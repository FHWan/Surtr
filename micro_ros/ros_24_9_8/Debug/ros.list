
ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b4fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d4  0801b690  0801b690  0001c690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d064  0801d064  0001fc28  2**0
                  CONTENTS
  4 .ARM          00000008  0801d064  0801d064  0001e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d06c  0801d06c  0001fc28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801d06c  0801d06c  0001e06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d07c  0801d07c  0001e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c28  20000000  0801d080  0001f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001fc28  2**0
                  CONTENTS
 10 .bss          00013c2c  20000c28  20000c28  0001fc28  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20014854  20014854  0001fc28  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001fc28  2**0
                  CONTENTS, READONLY
 13 .debug_info   000279ef  00000000  00000000  0001fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000655f  00000000  00000000  00047647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e70  00000000  00000000  0004dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001778  00000000  00000000  0004fa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a485  00000000  00000000  00051190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030ee9  00000000  00000000  0007b615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebcd9  00000000  00000000  000ac4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  001981d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090ac  00000000  00000000  00198250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001a12fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c28 	.word	0x20000c28
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b674 	.word	0x0801b674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c2c 	.word	0x20000c2c
 80001cc:	0801b674 	.word	0x0801b674

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <CopeSerial2Data>:
float gyro_x;
float gyro_y;
float gyro_z;

void CopeSerial2Data(unsigned char ucData)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	static unsigned char ucRxBuffer[250];
	static unsigned char ucRxCnt = 0;

	ucRxBuffer[ucRxCnt++]=ucData;	//将收到的数据存入缓冲区中
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <CopeSerial2Data+0x80>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	b2d1      	uxtb	r1, r2
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <CopeSerial2Data+0x80>)
 800100c:	7011      	strb	r1, [r2, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	4a1a      	ldr	r2, [pc, #104]	@ (800107c <CopeSerial2Data+0x84>)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	5453      	strb	r3, [r2, r1]
	if (ucRxBuffer[0]!=0x55) //数据头不对，则重新开始寻找0x55数据头
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <CopeSerial2Data+0x84>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b55      	cmp	r3, #85	@ 0x55
 800101c:	d003      	beq.n	8001026 <CopeSerial2Data+0x2e>
	{
		ucRxCnt=0;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <CopeSerial2Data+0x80>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
		return;
 8001024:	e025      	b.n	8001072 <CopeSerial2Data+0x7a>
	}
	if (ucRxCnt<11) {return;}//数据不满11个，则返回
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <CopeSerial2Data+0x80>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b0a      	cmp	r3, #10
 800102c:	d920      	bls.n	8001070 <CopeSerial2Data+0x78>
	else
	{
		switch(ucRxBuffer[1])//判断数据是哪种数据，然后将其拷贝到对应的结构体中，有些数据包需要通过上位机打开对应的输出后，才能接收到这个数据包的数据
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <CopeSerial2Data+0x84>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	2b53      	cmp	r3, #83	@ 0x53
 8001034:	d012      	beq.n	800105c <CopeSerial2Data+0x64>
 8001036:	2b53      	cmp	r3, #83	@ 0x53
 8001038:	dc16      	bgt.n	8001068 <CopeSerial2Data+0x70>
 800103a:	2b51      	cmp	r3, #81	@ 0x51
 800103c:	d002      	beq.n	8001044 <CopeSerial2Data+0x4c>
 800103e:	2b52      	cmp	r3, #82	@ 0x52
 8001040:	d006      	beq.n	8001050 <CopeSerial2Data+0x58>
 8001042:	e011      	b.n	8001068 <CopeSerial2Data+0x70>
		{
			//memcpy为编译器自带的内存拷贝函数，需引用"string.h"，将接收缓冲区的字符拷贝到数据结构体里面，从而实现数据的解析。
			case 0x51:	memcpy(&ACC,&ucRxBuffer[2],8);break;
 8001044:	2208      	movs	r2, #8
 8001046:	490e      	ldr	r1, [pc, #56]	@ (8001080 <CopeSerial2Data+0x88>)
 8001048:	480e      	ldr	r0, [pc, #56]	@ (8001084 <CopeSerial2Data+0x8c>)
 800104a:	f018 fca4 	bl	8019996 <memcpy>
 800104e:	e00b      	b.n	8001068 <CopeSerial2Data+0x70>
			case 0x52:	memcpy(&Gyro,&ucRxBuffer[2],8);break;
 8001050:	2208      	movs	r2, #8
 8001052:	490b      	ldr	r1, [pc, #44]	@ (8001080 <CopeSerial2Data+0x88>)
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <CopeSerial2Data+0x90>)
 8001056:	f018 fc9e 	bl	8019996 <memcpy>
 800105a:	e005      	b.n	8001068 <CopeSerial2Data+0x70>
			case 0x53:	memcpy(&Angle,&ucRxBuffer[2],8);break;
 800105c:	2208      	movs	r2, #8
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <CopeSerial2Data+0x88>)
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <CopeSerial2Data+0x94>)
 8001062:	f018 fc98 	bl	8019996 <memcpy>
 8001066:	bf00      	nop
		}
		ucRxCnt=0;//清空缓存区
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <CopeSerial2Data+0x80>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e000      	b.n	8001072 <CopeSerial2Data+0x7a>
	if (ucRxCnt<11) {return;}//数据不满11个，则返回
 8001070:	bf00      	nop
	}
}
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000c84 	.word	0x20000c84
 800107c:	20000c88 	.word	0x20000c88
 8001080:	20000c8a 	.word	0x20000c8a
 8001084:	20000c48 	.word	0x20000c48
 8001088:	20000c58 	.word	0x20000c58
 800108c:	20000c50 	.word	0x20000c50

08001090 <get_data>:
	}

}

void get_data(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	acc_x = (float)ACC.a[0]/32768*16;
 8001094:	4b53      	ldr	r3, [pc, #332]	@ (80011e4 <get_data+0x154>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a2:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80011e8 <get_data+0x158>
 80010a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010aa:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	4b4e      	ldr	r3, [pc, #312]	@ (80011ec <get_data+0x15c>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]
	acc_y = (float)ACC.a[1]/32768*16;
 80010b8:	4b4a      	ldr	r3, [pc, #296]	@ (80011e4 <get_data+0x154>)
 80010ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80011e8 <get_data+0x158>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80010d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d6:	4b46      	ldr	r3, [pc, #280]	@ (80011f0 <get_data+0x160>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
	acc_z = (float)ACC.a[2]/32768*16;
 80010dc:	4b41      	ldr	r3, [pc, #260]	@ (80011e4 <get_data+0x154>)
 80010de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80011e8 <get_data+0x158>
 80010ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f2:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <get_data+0x164>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]

	gyro_x = (float)Gyro.w[0]/32768*2000;
 8001100:	4b3d      	ldr	r3, [pc, #244]	@ (80011f8 <get_data+0x168>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80011e8 <get_data+0x158>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80011fc <get_data+0x16c>
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <get_data+0x170>)
 8001120:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)Gyro.w[1]/32768*2000;
 8001124:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <get_data+0x168>)
 8001126:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001132:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80011e8 <get_data+0x158>
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80011fc <get_data+0x16c>
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <get_data+0x174>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)Gyro.w[2]/32768*2000;
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <get_data+0x168>)
 800114a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80011e8 <get_data+0x158>
 800115a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80011fc <get_data+0x16c>
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <get_data+0x178>)
 8001168:	edc3 7a00 	vstr	s15, [r3]

	angle_x = (float)Angle.Angle[0]/32768*180;
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <get_data+0x17c>)
 800116e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117a:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80011e8 <get_data+0x158>
 800117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001182:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001210 <get_data+0x180>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <get_data+0x184>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
	angle_y = (float)Angle.Angle[1]/32768*180;
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <get_data+0x17c>)
 8001192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80011e8 <get_data+0x158>
 80011a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001210 <get_data+0x180>
 80011aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <get_data+0x188>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
	angle_z = (float)Angle.Angle[2]/32768*180;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <get_data+0x17c>)
 80011b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80011e8 <get_data+0x158>
 80011c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ca:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001210 <get_data+0x180>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <get_data+0x18c>)
 80011d4:	edc3 7a00 	vstr	s15, [r3]

}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000c48 	.word	0x20000c48
 80011e8:	47000000 	.word	0x47000000
 80011ec:	20000c6c 	.word	0x20000c6c
 80011f0:	20000c70 	.word	0x20000c70
 80011f4:	20000c74 	.word	0x20000c74
 80011f8:	20000c58 	.word	0x20000c58
 80011fc:	44fa0000 	.word	0x44fa0000
 8001200:	20000c78 	.word	0x20000c78
 8001204:	20000c7c 	.word	0x20000c7c
 8001208:	20000c80 	.word	0x20000c80
 800120c:	20000c50 	.word	0x20000c50
 8001210:	43340000 	.word	0x43340000
 8001214:	20000c60 	.word	0x20000c60
 8001218:	20000c64 	.word	0x20000c64
 800121c:	20000c68 	.word	0x20000c68

08001220 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart->ErrorCode&HAL_UART_ERROR_ORE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00f      	beq.n	8001254 <HAL_UART_ErrorCallback+0x34>
	{
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart3,&rx_buff1,1);
 800124a:	2201      	movs	r2, #1
 800124c:	4903      	ldr	r1, [pc, #12]	@ (800125c <HAL_UART_ErrorCallback+0x3c>)
 800124e:	4804      	ldr	r0, [pc, #16]	@ (8001260 <HAL_UART_ErrorCallback+0x40>)
 8001250:	f005 fdd7 	bl	8006e02 <HAL_UART_Receive_IT>
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000c44 	.word	0x20000c44
 8001260:	20004868 	.word	0x20004868

08001264 <Encoder_Init>:

Motor motor1;
Motor motor2;

void Encoder_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&GAP_TIM);                      		 //开启10ms定时器中断
 8001268:	4811      	ldr	r0, [pc, #68]	@ (80012b0 <Encoder_Init+0x4c>)
 800126a:	f004 fb93 	bl	8005994 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&ENCODER_1_TIM, TIM_CHANNEL_ALL);      //开启编码器定时器左
 800126e:	213c      	movs	r1, #60	@ 0x3c
 8001270:	4810      	ldr	r0, [pc, #64]	@ (80012b4 <Encoder_Init+0x50>)
 8001272:	f004 fdbd 	bl	8005df0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&ENCODER_2_TIM, TIM_CHANNEL_ALL);      //开启编码器定时器右
 8001276:	213c      	movs	r1, #60	@ 0x3c
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <Encoder_Init+0x54>)
 800127a:	f004 fdb9 	bl	8005df0 <HAL_TIM_Encoder_Start>
//    __HAL_TIM_ENABLE_IT(&ENCODER_1_TIM,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
//    __HAL_TIM_ENABLE_IT(&ENCODER_2_TIM,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
//    __HAL_TIM_SET_COUNTER(&ENCODER_1_TIM, 10000);                	 //编码器定时器初始值设定为10000
//    __HAL_TIM_SET_COUNTER(&ENCODER_2_TIM, 10000);                	 //编码器定时器初始值设定为10000
    motor1.CaptureNumber = motor2.CaptureNumber = 0;                  //结构体内容初始化
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <Encoder_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <Encoder_Init+0x58>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <Encoder_Init+0x5c>)
 800128a:	6013      	str	r3, [r2, #0]
    motor1.Direction = motor2.Direction = 0;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <Encoder_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <Encoder_Init+0x58>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <Encoder_Init+0x5c>)
 8001298:	6053      	str	r3, [r2, #4]
    motor1.speed = motor2.speed = 0;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <Encoder_Init+0x58>)
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <Encoder_Init+0x58>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <Encoder_Init+0x5c>)
 80012a8:	6093      	str	r3, [r2, #8]
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20004700 	.word	0x20004700
 80012b4:	20004748 	.word	0x20004748
 80012b8:	20004790 	.word	0x20004790
 80012bc:	20000d90 	.word	0x20000d90
 80012c0:	20000d84 	.word	0x20000d84

080012c4 <left_motor_control>:
#include <motor/motor.h>

void left_motor_control(int speed){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(speed == 0){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d104      	bne.n	80012dc <left_motor_control+0x18>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);	//设置占空比为0
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <left_motor_control+0x6c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	@ 0x34
		return 0;
 80012da:	e026      	b.n	800132a <left_motor_control+0x66>
	}
	else if(speed > 0){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dd0a      	ble.n	80012f8 <left_motor_control+0x34>
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <left_motor_control+0x70>)
 80012e8:	f003 fcdc 	bl	8004ca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2102      	movs	r1, #2
 80012f0:	4810      	ldr	r0, [pc, #64]	@ (8001334 <left_motor_control+0x70>)
 80012f2:	f003 fcd7 	bl	8004ca4 <HAL_GPIO_WritePin>
 80012f6:	e00f      	b.n	8001318 <left_motor_control+0x54>
	}
	else if(speed < 0){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da0c      	bge.n	8001318 <left_motor_control+0x54>
		speed = -speed;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	425b      	negs	r3, r3
 8001302:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2101      	movs	r1, #1
 8001308:	480a      	ldr	r0, [pc, #40]	@ (8001334 <left_motor_control+0x70>)
 800130a:	f003 fccb 	bl	8004ca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2102      	movs	r1, #2
 8001312:	4808      	ldr	r0, [pc, #32]	@ (8001334 <left_motor_control+0x70>)
 8001314:	f003 fcc6 	bl	8004ca4 <HAL_GPIO_WritePin>
	}if(speed >= 100)	speed = 100;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b63      	cmp	r3, #99	@ 0x63
 800131c:	dd01      	ble.n	8001322 <left_motor_control+0x5e>
 800131e:	2364      	movs	r3, #100	@ 0x64
 8001320:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);	//设置占空比
 8001322:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <left_motor_control+0x6c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200046b8 	.word	0x200046b8
 8001334:	40021000 	.word	0x40021000

08001338 <right_motor_control>:

void right_motor_control(int speed){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(speed == 0){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d104      	bne.n	8001350 <right_motor_control+0x18>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);	//设置占空比为0
 8001346:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <right_motor_control+0x6c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	639a      	str	r2, [r3, #56]	@ 0x38
		return 0;
 800134e:	e026      	b.n	800139e <right_motor_control+0x66>
	}
	else if(speed > 0){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dd0a      	ble.n	800136c <right_motor_control+0x34>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2101      	movs	r1, #1
 800135a:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <right_motor_control+0x70>)
 800135c:	f003 fca2 	bl	8004ca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);//使能
 8001360:	2201      	movs	r2, #1
 8001362:	2102      	movs	r1, #2
 8001364:	4810      	ldr	r0, [pc, #64]	@ (80013a8 <right_motor_control+0x70>)
 8001366:	f003 fc9d 	bl	8004ca4 <HAL_GPIO_WritePin>
 800136a:	e00f      	b.n	800138c <right_motor_control+0x54>
	}
	else if(speed < 0){
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da0c      	bge.n	800138c <right_motor_control+0x54>
		speed = -speed;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	425b      	negs	r3, r3
 8001376:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);//使能
 8001378:	2201      	movs	r2, #1
 800137a:	2101      	movs	r1, #1
 800137c:	480a      	ldr	r0, [pc, #40]	@ (80013a8 <right_motor_control+0x70>)
 800137e:	f003 fc91 	bl	8004ca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2102      	movs	r1, #2
 8001386:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <right_motor_control+0x70>)
 8001388:	f003 fc8c 	bl	8004ca4 <HAL_GPIO_WritePin>
	}if(speed >= 100)	speed = 100;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b63      	cmp	r3, #99	@ 0x63
 8001390:	dd01      	ble.n	8001396 <right_motor_control+0x5e>
 8001392:	2364      	movs	r3, #100	@ 0x64
 8001394:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);	//设置占空比
 8001396:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <right_motor_control+0x6c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200046b8 	.word	0x200046b8
 80013a8:	40020800 	.word	0x40020800

080013ac <geometry_msgs__msg__Twist__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Twist__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
      0x9c, 0x45, 0xbf, 0x16, 0xfe, 0x09, 0x83, 0xd8,
      0x0e, 0x3c, 0xfe, 0x75, 0x0d, 0x68, 0x35, 0x84,
      0x3d, 0x26, 0x5a, 0x9a, 0x6c, 0x46, 0xbd, 0x2e,
      0x60, 0x9f, 0xcd, 0xdd, 0xe6, 0xfb, 0x8d, 0x2a,
    }};
  return &hash;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <geometry_msgs__msg__Twist__get_type_hash+0x18>)
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000168 	.word	0x20000168

080013c8 <geometry_msgs__msg__Twist__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Twist__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Twist__TYPE_NAME, 23, 23},
      {geometry_msgs__msg__Twist__FIELDS, 2, 2},
    },
    {geometry_msgs__msg__Twist__REFERENCED_TYPE_DESCRIPTIONS, 1, 1},
  };
  if (!constructed) {
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <geometry_msgs__msg__Twist__get_type_description+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f083 0301 	eor.w	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01f      	beq.n	800141e <geometry_msgs__msg__Twist__get_type_description+0x56>
    assert(0 == memcmp(&geometry_msgs__msg__Vector3__EXPECTED_HASH, geometry_msgs__msg__Vector3__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f8e8 	bl	80015b4 <geometry_msgs__msg__Vector3__get_type_hash>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2221      	movs	r2, #33	@ 0x21
 80013e8:	4619      	mov	r1, r3
 80013ea:	4810      	ldr	r0, [pc, #64]	@ (800142c <geometry_msgs__msg__Twist__get_type_description+0x64>)
 80013ec:	f018 f9ca 	bl	8019784 <memcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <geometry_msgs__msg__Twist__get_type_description+0x3a>
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <geometry_msgs__msg__Twist__get_type_description+0x68>)
 80013f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <geometry_msgs__msg__Twist__get_type_description+0x6c>)
 80013fa:	2159      	movs	r1, #89	@ 0x59
 80013fc:	480e      	ldr	r0, [pc, #56]	@ (8001438 <geometry_msgs__msg__Twist__get_type_description+0x70>)
 80013fe:	f016 fffb 	bl	80183f8 <__assert_func>
    description.referenced_type_descriptions.data[0].fields = geometry_msgs__msg__Vector3__get_type_description(NULL)->type_description.fields;
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f8e4 	bl	80015d0 <geometry_msgs__msg__Vector3__get_type_description>
 8001408:	4602      	mov	r2, r0
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <geometry_msgs__msg__Twist__get_type_description+0x74>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	330c      	adds	r3, #12
 8001410:	320c      	adds	r2, #12
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <geometry_msgs__msg__Twist__get_type_description+0x60>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <geometry_msgs__msg__Twist__get_type_description+0x74>)
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000d9c 	.word	0x20000d9c
 800142c:	0801baa4 	.word	0x0801baa4
 8001430:	0801b690 	.word	0x0801b690
 8001434:	0801bac8 	.word	0x0801bac8
 8001438:	0801b718 	.word	0x0801b718
 800143c:	0801baf8 	.word	0x0801baf8

08001440 <geometry_msgs__msg__Twist__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Twist__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Twist__TYPE_NAME, 23, 23},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 116, 116},
  };
  return &source;
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <geometry_msgs__msg__Twist__get_individual_type_description_source+0x18>)
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	0801bb1c 	.word	0x0801bb1c

0800145c <geometry_msgs__msg__Twist__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Twist__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[2];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 2, 2};
  static bool constructed = false;
  if (!constructed) {
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <geometry_msgs__msg__Twist__get_type_description_sources+0x5c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01d      	beq.n	80014ae <geometry_msgs__msg__Twist__get_type_description_sources+0x52>
    sources[0] = *geometry_msgs__msg__Twist__get_individual_type_description_source(NULL),
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ffe4 	bl	8001440 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8001478:	4603      	mov	r3, r0
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <geometry_msgs__msg__Twist__get_type_description_sources+0x60>)
 800147c:	4614      	mov	r4, r2
 800147e:	461d      	mov	r5, r3
 8001480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	6023      	str	r3, [r4, #0]
    sources[1] = *geometry_msgs__msg__Vector3__get_individual_type_description_source(NULL);
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f8b9 	bl	8001604 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8001492:	4602      	mov	r2, r0
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <geometry_msgs__msg__Twist__get_type_description_sources+0x60>)
 8001496:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800149a:	4615      	mov	r5, r2
 800149c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	6023      	str	r3, [r4, #0]
    constructed = true;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <geometry_msgs__msg__Twist__get_type_description_sources+0x5c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 80014ae:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <geometry_msgs__msg__Twist__get_type_description_sources+0x64>)
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	20000d9d 	.word	0x20000d9d
 80014bc:	20000da0 	.word	0x20000da0
 80014c0:	0801bb40 	.word	0x0801bb40

080014c4 <geometry_msgs__msg__Twist__init>:
// Member `angular`
#include "geometry_msgs/msg/detail/vector3__functions.h"

bool
geometry_msgs__msg__Twist__init(geometry_msgs__msg__Twist * msg)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <geometry_msgs__msg__Twist__init+0x12>
    return false;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e01f      	b.n	8001516 <geometry_msgs__msg__Twist__init+0x52>
  }
  // linear
  if (!geometry_msgs__msg__Vector3__init(&msg->linear)) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f8c7 	bl	800166c <geometry_msgs__msg__Vector3__init>
 80014de:	4603      	mov	r3, r0
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <geometry_msgs__msg__Twist__init+0x30>
    geometry_msgs__msg__Twist__fini(msg);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f817 	bl	800151e <geometry_msgs__msg__Twist__fini>
    return false;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e010      	b.n	8001516 <geometry_msgs__msg__Twist__init+0x52>
  }
  // angular
  if (!geometry_msgs__msg__Vector3__init(&msg->angular)) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3318      	adds	r3, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f8b7 	bl	800166c <geometry_msgs__msg__Vector3__init>
 80014fe:	4603      	mov	r3, r0
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <geometry_msgs__msg__Twist__init+0x50>
    geometry_msgs__msg__Twist__fini(msg);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f807 	bl	800151e <geometry_msgs__msg__Twist__fini>
    return false;
 8001510:	2300      	movs	r3, #0
 8001512:	e000      	b.n	8001516 <geometry_msgs__msg__Twist__init+0x52>
  }
  return true;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <geometry_msgs__msg__Twist__fini>:

void
geometry_msgs__msg__Twist__fini(geometry_msgs__msg__Twist * msg)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <geometry_msgs__msg__Twist__fini+0x22>
    return;
  }
  // linear
  geometry_msgs__msg__Vector3__fini(&msg->linear);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f8ac 	bl	800168c <geometry_msgs__msg__Vector3__fini>
  // angular
  geometry_msgs__msg__Vector3__fini(&msg->angular);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3318      	adds	r3, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f8a7 	bl	800168c <geometry_msgs__msg__Vector3__fini>
 800153e:	e000      	b.n	8001542 <geometry_msgs__msg__Twist__fini+0x24>
    return;
 8001540:	bf00      	nop
}
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
{
#endif

void geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Twist__init(message_memory);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffb5 	bl	80014c4 <geometry_msgs__msg__Twist__init>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:

void geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function(void * message_memory)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Twist__fini(message_memory);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffd7 	bl	800151e <geometry_msgs__msg__Twist__fini>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
  &geometry_msgs__msg__Twist__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Twist)() {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Vector3)();
 800157c:	f000 f8aa 	bl	80016d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8001580:	4603      	mov	r3, r0
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[0].members_ =
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x30>)
 8001584:	60d3      	str	r3, [r2, #12]
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[1].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Vector3)();
 8001586:	f000 f8a5 	bl	80016d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800158a:	4603      	mov	r3, r0
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[1].members_ =
 800158c:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x30>)
 800158e:	6493      	str	r3, [r2, #72]	@ 0x48
  if (!geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_type_support_handle.typesupport_identifier) {
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x34>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>
    geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_type_support_handle.typesupport_identifier =
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x38>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x34>)
 800159e:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_type_support_handle;
 80015a0:	4b02      	ldr	r3, [pc, #8]	@ (80015ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x34>)
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000018c 	.word	0x2000018c
 80015ac:	20000204 	.word	0x20000204
 80015b0:	200009b4 	.word	0x200009b4

080015b4 <geometry_msgs__msg__Vector3__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Vector3__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
      0xcc, 0x12, 0xfe, 0x83, 0xe4, 0xc0, 0x27, 0x19,
      0xf1, 0xce, 0x80, 0x70, 0xbf, 0xd1, 0x4a, 0xec,
      0xd4, 0x0f, 0x75, 0xa9, 0x66, 0x96, 0xa6, 0x7a,
      0x2a, 0x1f, 0x37, 0xf7, 0xdb, 0xb0, 0x76, 0x5d,
    }};
  return &hash;
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <geometry_msgs__msg__Vector3__get_type_hash+0x18>)
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000420 	.word	0x20000420

080015d0 <geometry_msgs__msg__Vector3__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Vector3__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Vector3__TYPE_NAME, 25, 25},
      {geometry_msgs__msg__Vector3__FIELDS, 3, 3},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <geometry_msgs__msg__Vector3__get_type_description+0x2c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <geometry_msgs__msg__Vector3__get_type_description+0x1c>
    constructed = true;
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <geometry_msgs__msg__Vector3__get_type_description+0x2c>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <geometry_msgs__msg__Vector3__get_type_description+0x30>)
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000de8 	.word	0x20000de8
 8001600:	0801bb68 	.word	0x0801bb68

08001604 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Vector3__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Vector3__TYPE_NAME, 25, 25},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 251, 251},
  };
  return &source;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x18>)
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0801bb8c 	.word	0x0801bb8c

08001620 <geometry_msgs__msg__Vector3__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Vector3__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <geometry_msgs__msg__Vector3__get_type_description_sources+0x40>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00f      	beq.n	8001656 <geometry_msgs__msg__Vector3__get_type_description_sources+0x36>
    sources[0] = *geometry_msgs__msg__Vector3__get_individual_type_description_source(NULL),
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff ffe4 	bl	8001604 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800163c:	4603      	mov	r3, r0
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <geometry_msgs__msg__Vector3__get_type_description_sources+0x44>)
 8001640:	4614      	mov	r4, r2
 8001642:	461d      	mov	r5, r3
 8001644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	6023      	str	r3, [r4, #0]
    constructed = true;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <geometry_msgs__msg__Vector3__get_type_description_sources+0x40>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <geometry_msgs__msg__Vector3__get_type_description_sources+0x48>)
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bdb0      	pop	{r4, r5, r7, pc}
 8001660:	20000de9 	.word	0x20000de9
 8001664:	20000dec 	.word	0x20000dec
 8001668:	0801bbb0 	.word	0x0801bbb0

0800166c <geometry_msgs__msg__Vector3__init>:
#include "rcutils/allocator.h"


bool
geometry_msgs__msg__Vector3__init(geometry_msgs__msg__Vector3 * msg)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <geometry_msgs__msg__Vector3__init+0x12>
    return false;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <geometry_msgs__msg__Vector3__init+0x14>
  }
  // x
  // y
  // z
  return true;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <geometry_msgs__msg__Vector3__fini>:

void
geometry_msgs__msg__Vector3__fini(geometry_msgs__msg__Vector3 * msg)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
    return;
  }
  // x
  // y
  // z
}
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
{
#endif

void geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Vector3__init(message_memory);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffdc 	bl	800166c <geometry_msgs__msg__Vector3__init>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:

void geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function(void * message_memory)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Vector3__fini(message_memory);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe1 	bl	800168c <geometry_msgs__msg__Vector3__fini>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
  &geometry_msgs__msg__Vector3__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Vector3)() {
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  if (!geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_message_type_support_handle.typesupport_identifier) {
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x20>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>
    geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_message_type_support_handle.typesupport_identifier =
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x24>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a03      	ldr	r2, [pc, #12]	@ (80016f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_message_type_support_handle;
 80016e8:	4b02      	ldr	r3, [pc, #8]	@ (80016f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x20>)
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	200004f8 	.word	0x200004f8
 80016f8:	200009b4 	.word	0x200009b4

080016fc <std_msgs__msg__Int32__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_std_msgs
const rosidl_type_hash_t *
std_msgs__msg__Int32__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
      0xb6, 0x57, 0x8d, 0xed, 0x3c, 0x58, 0xc6, 0x26,
      0xcf, 0xe8, 0xd1, 0xa6, 0xfb, 0x6e, 0x04, 0xf7,
      0x06, 0xf9, 0x7e, 0x9f, 0x03, 0xd2, 0x72, 0x7c,
      0x9f, 0xf4, 0xe7, 0x4b, 0x1c, 0xef, 0x0d, 0xeb,
    }};
  return &hash;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <std_msgs__msg__Int32__get_type_hash+0x18>)
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000684 	.word	0x20000684

08001718 <std_msgs__msg__Int32__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
std_msgs__msg__Int32__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
      {std_msgs__msg__Int32__TYPE_NAME, 18, 18},
      {std_msgs__msg__Int32__FIELDS, 1, 1},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <std_msgs__msg__Int32__get_type_description+0x2c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <std_msgs__msg__Int32__get_type_description+0x1c>
    constructed = true;
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <std_msgs__msg__Int32__get_type_description+0x2c>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <std_msgs__msg__Int32__get_type_description+0x30>)
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000e10 	.word	0x20000e10
 8001748:	0801bbd8 	.word	0x0801bbd8

0800174c <std_msgs__msg__Int32__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
std_msgs__msg__Int32__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {std_msgs__msg__Int32__TYPE_NAME, 18, 18},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 262, 262},
  };
  return &source;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <std_msgs__msg__Int32__get_individual_type_description_source+0x18>)
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	0801bbfc 	.word	0x0801bbfc

08001768 <std_msgs__msg__Int32__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
std_msgs__msg__Int32__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <std_msgs__msg__Int32__get_type_description_sources+0x40>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00f      	beq.n	800179e <std_msgs__msg__Int32__get_type_description_sources+0x36>
    sources[0] = *std_msgs__msg__Int32__get_individual_type_description_source(NULL),
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff ffe4 	bl	800174c <std_msgs__msg__Int32__get_individual_type_description_source>
 8001784:	4603      	mov	r3, r0
 8001786:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <std_msgs__msg__Int32__get_type_description_sources+0x44>)
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	6023      	str	r3, [r4, #0]
    constructed = true;
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <std_msgs__msg__Int32__get_type_description_sources+0x40>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <std_msgs__msg__Int32__get_type_description_sources+0x48>)
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	20000e11 	.word	0x20000e11
 80017ac:	20000e14 	.word	0x20000e14
 80017b0:	0801bc20 	.word	0x0801bc20

080017b4 <std_msgs__msg__Int32__init>:
#include "rcutils/allocator.h"


bool
std_msgs__msg__Int32__init(std_msgs__msg__Int32 * msg)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <std_msgs__msg__Int32__init+0x12>
    return false;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <std_msgs__msg__Int32__init+0x14>
  }
  // data
  return true;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <std_msgs__msg__Int32__fini>:

void
std_msgs__msg__Int32__fini(std_msgs__msg__Int32 * msg)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
    return;
  }
  // data
}
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
{
#endif

void std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  std_msgs__msg__Int32__init(message_memory);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffdc 	bl	80017b4 <std_msgs__msg__Int32__init>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:

void std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function(void * message_memory)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  std_msgs__msg__Int32__fini(message_memory);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe1 	bl	80017d4 <std_msgs__msg__Int32__fini>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
  &std_msgs__msg__Int32__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_std_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, std_msgs, msg, Int32)() {
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  if (!std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_message_type_support_handle.typesupport_identifier) {
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x20>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d103      	bne.n	8001830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>
    std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_message_type_support_handle.typesupport_identifier =
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x24>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a03      	ldr	r2, [pc, #12]	@ (800183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_message_type_support_handle;
 8001830:	4b02      	ldr	r3, [pc, #8]	@ (800183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x20>)
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	200006e4 	.word	0x200006e4
 8001840:	200009b4 	.word	0x200009b4

08001844 <std_msgs__msg__String__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_std_msgs
const rosidl_type_hash_t *
std_msgs__msg__String__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
      0xdf, 0x66, 0x8c, 0x74, 0x04, 0x82, 0xbb, 0xd4,
      0x8f, 0xb3, 0x9d, 0x76, 0xa7, 0x0d, 0xfd, 0x4b,
      0xd5, 0x9d, 0xb1, 0x28, 0x80, 0x21, 0x74, 0x35,
      0x03, 0x25, 0x9e, 0x94, 0x8f, 0x6b, 0x1a, 0x18,
    }};
  return &hash;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <std_msgs__msg__String__get_type_hash+0x18>)
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000086c 	.word	0x2000086c

08001860 <std_msgs__msg__String__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
std_msgs__msg__String__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
      {std_msgs__msg__String__TYPE_NAME, 19, 19},
      {std_msgs__msg__String__FIELDS, 1, 1},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <std_msgs__msg__String__get_type_description+0x2c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <std_msgs__msg__String__get_type_description+0x1c>
    constructed = true;
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <std_msgs__msg__String__get_type_description+0x2c>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <std_msgs__msg__String__get_type_description+0x30>)
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000e38 	.word	0x20000e38
 8001890:	0801bc48 	.word	0x0801bc48

08001894 <std_msgs__msg__String__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
std_msgs__msg__String__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {std_msgs__msg__String__TYPE_NAME, 19, 19},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 263, 263},
  };
  return &source;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <std_msgs__msg__String__get_individual_type_description_source+0x18>)
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0801bc6c 	.word	0x0801bc6c

080018b0 <std_msgs__msg__String__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
std_msgs__msg__String__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <std_msgs__msg__String__get_type_description_sources+0x40>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00f      	beq.n	80018e6 <std_msgs__msg__String__get_type_description_sources+0x36>
    sources[0] = *std_msgs__msg__String__get_individual_type_description_source(NULL),
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ffe4 	bl	8001894 <std_msgs__msg__String__get_individual_type_description_source>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <std_msgs__msg__String__get_type_description_sources+0x44>)
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	6023      	str	r3, [r4, #0]
    constructed = true;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <std_msgs__msg__String__get_type_description_sources+0x40>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 80018e6:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <std_msgs__msg__String__get_type_description_sources+0x48>)
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdb0      	pop	{r4, r5, r7, pc}
 80018f0:	20000e39 	.word	0x20000e39
 80018f4:	20000e3c 	.word	0x20000e3c
 80018f8:	0801bc90 	.word	0x0801bc90

080018fc <std_msgs__msg__String__init>:
// Member `data`
#include "rosidl_runtime_c/string_functions.h"

bool
std_msgs__msg__String__init(std_msgs__msg__String * msg)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <std_msgs__msg__String__init+0x12>
    return false;
 800190a:	2300      	movs	r3, #0
 800190c:	e00f      	b.n	800192e <std_msgs__msg__String__init+0x32>
  }
  // data
  if (!rosidl_runtime_c__String__init(&msg->data)) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f010 fbd5 	bl	80120c0 <rosidl_runtime_c__String__init>
 8001916:	4603      	mov	r3, r0
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <std_msgs__msg__String__init+0x30>
    std_msgs__msg__String__fini(msg);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f807 	bl	8001936 <std_msgs__msg__String__fini>
    return false;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <std_msgs__msg__String__init+0x32>
  }
  return true;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <std_msgs__msg__String__fini>:

void
std_msgs__msg__String__fini(std_msgs__msg__String * msg)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  if (!msg) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <std_msgs__msg__String__fini+0x18>
    return;
  }
  // data
  rosidl_runtime_c__String__fini(&msg->data);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f010 fbd0 	bl	80120ec <rosidl_runtime_c__String__fini>
 800194c:	e000      	b.n	8001950 <std_msgs__msg__String__fini+0x1a>
    return;
 800194e:	bf00      	nop
}
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
{
#endif

void std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  std_msgs__msg__String__init(message_memory);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffca 	bl	80018fc <std_msgs__msg__String__init>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:

void std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function(void * message_memory)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String__fini(message_memory);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffdc 	bl	8001936 <std_msgs__msg__String__fini>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
  &std_msgs__msg__String__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_std_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, std_msgs, msg, String)() {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  if (!std_msgs__msg__String__rosidl_typesupport_introspection_c__String_message_type_support_handle.typesupport_identifier) {
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x20>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>
    std_msgs__msg__String__rosidl_typesupport_introspection_c__String_message_type_support_handle.typesupport_identifier =
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a03      	ldr	r2, [pc, #12]	@ (80019a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x20>)
 800199a:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &std_msgs__msg__String__rosidl_typesupport_introspection_c__String_message_type_support_handle;
 800199c:	4b02      	ldr	r3, [pc, #8]	@ (80019a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x20>)
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	200008cc 	.word	0x200008cc
 80019ac:	200009b4 	.word	0x200009b4

080019b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <MX_DMA_Init+0x4c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <MX_DMA_Init+0x4c>)
 80019c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <MX_DMA_Init+0x4c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2105      	movs	r1, #5
 80019d6:	2010      	movs	r0, #16
 80019d8:	f002 fb9c 	bl	8004114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019dc:	2010      	movs	r0, #16
 80019de:	f002 fbb5 	bl	800414c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2105      	movs	r1, #5
 80019e6:	2011      	movs	r0, #17
 80019e8:	f002 fb94 	bl	8004114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019ec:	2011      	movs	r0, #17
 80019ee:	f002 fbad 	bl	800414c <HAL_NVIC_EnableIRQ>

}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a04:	f3bf 8f4f 	dsb	sy
}
 8001a08:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <__NVIC_SystemReset+0x24>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a12:	4904      	ldr	r1, [pc, #16]	@ (8001a24 <__NVIC_SystemReset+0x24>)
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_SystemReset+0x28>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a1a:	f3bf 8f4f 	dsb	sy
}
 8001a1e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <__NVIC_SystemReset+0x20>
 8001a24:	e000ed00 	.word	0xe000ed00
 8001a28:	05fa0004 	.word	0x05fa0004

08001a2c <__io_putchar>:

#include "stdio.h"
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001a34:	1d39      	adds	r1, r7, #4
 8001a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <__io_putchar+0x20>)
 8001a3e:	f005 f955 	bl	8006cec <HAL_UART_Transmit>
    return ch;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200047d8 	.word	0x200047d8

08001a50 <Uart6_SendStr>:

void Uart6_SendStr(char*SendBuf)//串口6打印数据(这个无法发送0x00)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	while(*SendBuf)
 8001a58:	e00d      	b.n	8001a76 <Uart6_SendStr+0x26>
	{
	  while((USART6->SR&0X40)==0);//等待发送完成
 8001a5a:	bf00      	nop
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <Uart6_SendStr+0x3c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f9      	beq.n	8001a5c <Uart6_SendStr+0xc>
    USART6->DR = (unsigned char) *SendBuf;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <Uart6_SendStr+0x3c>)
 8001a6e:	605a      	str	r2, [r3, #4]
		SendBuf++;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
	while(*SendBuf)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ed      	bne.n	8001a5a <Uart6_SendStr+0xa>
	}
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40011400 	.word	0x40011400

08001a90 <subscription_callback>:
// Implementation example:
void subscription_callback(const void * msgin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60fb      	str	r3, [r7, #12]
  printf("msg Received: %d\r\n", hx_get_msg.data);
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <subscription_callback+0x20>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <subscription_callback+0x24>)
 8001aa4:	f017 fc9a 	bl	80193dc <iprintf>
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000f50 	.word	0x20000f50
 8001ab4:	0801b810 	.word	0x0801b810

08001ab8 <subscription_callback_arm>:

void subscription_callback_arm(const void * msgin)//机械臂控制
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
  printf("arm Received: %s\r\n",arm_getdata);
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <subscription_callback_arm+0x1c>)
 8001ac6:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <subscription_callback_arm+0x20>)
 8001ac8:	f017 fc88 	bl	80193dc <iprintf>
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200010cc 	.word	0x200010cc
 8001ad8:	0801b824 	.word	0x0801b824

08001adc <subscription_callback_cmd>:

void subscription_callback_cmd(const void * msgin)//键盘控制
{
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]
  cmd_getFlag = 1;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <subscription_callback_cmd+0x64>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
  printf("\r\nlinear:  x: %lf\r\n"
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <subscription_callback_cmd+0x68>)
 8001af0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <subscription_callback_cmd+0x68>)
 8001af6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001afa:	4912      	ldr	r1, [pc, #72]	@ (8001b44 <subscription_callback_cmd+0x68>)
 8001afc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b04:	e9cd 2300 	strd	r2, r3, [sp]
 8001b08:	4622      	mov	r2, r4
 8001b0a:	462b      	mov	r3, r5
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <subscription_callback_cmd+0x6c>)
 8001b0e:	f017 fc65 	bl	80193dc <iprintf>
		     "         y: %lf\r\n"
			 "         z: %lf\r\n", cmd_get_msg.linear.x
								  , cmd_get_msg.linear.y
								  , cmd_get_msg.linear.z);
  printf("\r\nangular: x: %lf\r\n"
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <subscription_callback_cmd+0x68>)
 8001b14:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b18:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <subscription_callback_cmd+0x68>)
 8001b1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b1e:	4909      	ldr	r1, [pc, #36]	@ (8001b44 <subscription_callback_cmd+0x68>)
 8001b20:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 8001b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b28:	e9cd 2300 	strd	r2, r3, [sp]
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	462b      	mov	r3, r5
 8001b30:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <subscription_callback_cmd+0x70>)
 8001b32:	f017 fc53 	bl	80193dc <iprintf>
			 "         y: %lf\r\n"
		  	 "         z: %lf\r\n", cmd_get_msg.angular.x
								  , cmd_get_msg.angular.y
								  , cmd_get_msg.angular.z);
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200011f8 	.word	0x200011f8
 8001b44:	200011c8 	.word	0x200011c8
 8001b48:	0801b838 	.word	0x0801b838
 8001b4c:	0801b870 	.word	0x0801b870

08001b50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b54:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <MX_FREERTOS_Init+0x38>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <MX_FREERTOS_Init+0x3c>)
 8001b5a:	f006 fc95 	bl	8008488 <osThreadNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <MX_FREERTOS_Init+0x40>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of imuTask */
  imuTaskHandle = osThreadNew(StartImuTask, NULL, &imuTask_attributes);
 8001b64:	4a0b      	ldr	r2, [pc, #44]	@ (8001b94 <MX_FREERTOS_Init+0x44>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <MX_FREERTOS_Init+0x48>)
 8001b6a:	f006 fc8d 	bl	8008488 <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <MX_FREERTOS_Init+0x4c>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001b74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <MX_FREERTOS_Init+0x50>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	480a      	ldr	r0, [pc, #40]	@ (8001ba4 <MX_FREERTOS_Init+0x54>)
 8001b7a:	f006 fc85 	bl	8008488 <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <MX_FREERTOS_Init+0x58>)
 8001b82:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0801bcb8 	.word	0x0801bcb8
 8001b8c:	08001bb1 	.word	0x08001bb1
 8001b90:	20001214 	.word	0x20001214
 8001b94:	0801bcdc 	.word	0x0801bcdc
 8001b98:	08001d39 	.word	0x08001d39
 8001b9c:	20004154 	.word	0x20004154
 8001ba0:	0801bd00 	.word	0x0801bd00
 8001ba4:	08001d69 	.word	0x08001d69
 8001ba8:	200043b4 	.word	0x200043b4
 8001bac:	00000000 	.word	0x00000000

08001bb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b09f      	sub	sp, #124	@ 0x7c
 8001bb6:	af10      	add	r7, sp, #64	@ 0x40
 8001bb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartDefaultTask */

	micro_ros_init();
 8001bba:	f000 f9c3 	bl	8001f44 <micro_ros_init>

	// micro-ROS app
	hx_ros_init();//测试用
 8001bbe:	f000 fa29 	bl	8002014 <hx_ros_init>
	imu_ros_init();
 8001bc2:	f000 fa91 	bl	80020e8 <imu_ros_init>
	arm_ros_init();
 8001bc6:	f000 faaf 	bl	8002128 <arm_ros_init>
	cmd_get_init();
 8001bca:	f000 fb19 	bl	8002200 <cmd_get_init>

	start_sign = 1;
 8001bce:	4b48      	ldr	r3, [pc, #288]	@ (8001cf0 <StartDefaultTask+0x140>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
		//test
//		RCSOFTCHECK(rcl_publish(&hx_publisher, &hx_send_msg, NULL));//测试用
//		hx_send_msg.data++;

		//imu
		sprintf(imu_send_msg.data.data, "'\n'acc: %f/%f/%f"
 8001bd4:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <StartDefaultTask+0x144>)
 8001bd6:	681e      	ldr	r6, [r3, #0]
 8001bd8:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <StartDefaultTask+0x148>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcc3 	bl	8000568 <__aeabi_f2d>
 8001be2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001be6:	4b45      	ldr	r3, [pc, #276]	@ (8001cfc <StartDefaultTask+0x14c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcbc 	bl	8000568 <__aeabi_f2d>
 8001bf0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001bf4:	4b42      	ldr	r3, [pc, #264]	@ (8001d00 <StartDefaultTask+0x150>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcb5 	bl	8000568 <__aeabi_f2d>
 8001bfe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c02:	4b40      	ldr	r3, [pc, #256]	@ (8001d04 <StartDefaultTask+0x154>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fcae 	bl	8000568 <__aeabi_f2d>
 8001c0c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c10:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <StartDefaultTask+0x158>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fca7 	bl	8000568 <__aeabi_f2d>
 8001c1a:	e9c7 0100 	strd	r0, r1, [r7]
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <StartDefaultTask+0x15c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fca0 	bl	8000568 <__aeabi_f2d>
 8001c28:	4682      	mov	sl, r0
 8001c2a:	468b      	mov	fp, r1
 8001c2c:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <StartDefaultTask+0x160>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc99 	bl	8000568 <__aeabi_f2d>
 8001c36:	4680      	mov	r8, r0
 8001c38:	4689      	mov	r9, r1
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <StartDefaultTask+0x164>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc92 	bl	8000568 <__aeabi_f2d>
 8001c44:	4604      	mov	r4, r0
 8001c46:	460d      	mov	r5, r1
 8001c48:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <StartDefaultTask+0x168>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc8b 	bl	8000568 <__aeabi_f2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001c5a:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001c5e:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001c62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001c66:	ed97 7b00 	vldr	d7, [r7]
 8001c6a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c72:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001c76:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c7a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c7e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001c82:	ed8d 7b00 	vstr	d7, [sp]
 8001c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c8a:	4924      	ldr	r1, [pc, #144]	@ (8001d1c <StartDefaultTask+0x16c>)
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f017 fc49 	bl	8019524 <siprintf>
									    "'\n'gyr: %f/%f/%f"
									    "'\n'ang: %f/%f/%f", acc_x, acc_y, acc_z
														   , gyro_x, gyro_y, gyro_z
														   , angle_x, angle_y, angle_z);
		imu_send_msg.data.size = strlen(imu_send_msg.data.data);
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <StartDefaultTask+0x144>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fafa 	bl	8000290 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <StartDefaultTask+0x144>)
 8001ca0:	6053      	str	r3, [r2, #4]
		RCSOFTCHECK(rcl_publish(&imu_publisher, &imu_send_msg, NULL));
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4913      	ldr	r1, [pc, #76]	@ (8001cf4 <StartDefaultTask+0x144>)
 8001ca6:	481e      	ldr	r0, [pc, #120]	@ (8001d20 <StartDefaultTask+0x170>)
 8001ca8:	f00c fa84 	bl	800e1b4 <rcl_publish>
 8001cac:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <StartDefaultTask+0x110>
 8001cb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cb6:	f240 112f 	movw	r1, #303	@ 0x12f
 8001cba:	481a      	ldr	r0, [pc, #104]	@ (8001d24 <StartDefaultTask+0x174>)
 8001cbc:	f017 fb8e 	bl	80193dc <iprintf>

		rclc_executor_spin_some(&hx_executor, RCL_MS_TO_NS(10));
 8001cc0:	4a19      	ldr	r2, [pc, #100]	@ (8001d28 <StartDefaultTask+0x178>)
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	4819      	ldr	r0, [pc, #100]	@ (8001d2c <StartDefaultTask+0x17c>)
 8001cc8:	f00b fa76 	bl	800d1b8 <rclc_executor_spin_some>
		rclc_executor_spin_some(&arm_executor, RCL_MS_TO_NS(10));
 8001ccc:	4a16      	ldr	r2, [pc, #88]	@ (8001d28 <StartDefaultTask+0x178>)
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	4817      	ldr	r0, [pc, #92]	@ (8001d30 <StartDefaultTask+0x180>)
 8001cd4:	f00b fa70 	bl	800d1b8 <rclc_executor_spin_some>
		rclc_executor_spin_some(&cmd_executor, RCL_MS_TO_NS(50));
 8001cd8:	a303      	add	r3, pc, #12	@ (adr r3, 8001ce8 <StartDefaultTask+0x138>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <StartDefaultTask+0x184>)
 8001ce0:	f00b fa6a 	bl	800d1b8 <rclc_executor_spin_some>
		sprintf(imu_send_msg.data.data, "'\n'acc: %f/%f/%f"
 8001ce4:	e776      	b.n	8001bd4 <StartDefaultTask+0x24>
 8001ce6:	bf00      	nop
 8001ce8:	02faf080 	.word	0x02faf080
 8001cec:	00000000 	.word	0x00000000
 8001cf0:	20000e60 	.word	0x20000e60
 8001cf4:	20000f58 	.word	0x20000f58
 8001cf8:	20000c6c 	.word	0x20000c6c
 8001cfc:	20000c70 	.word	0x20000c70
 8001d00:	20000c74 	.word	0x20000c74
 8001d04:	20000c78 	.word	0x20000c78
 8001d08:	20000c7c 	.word	0x20000c7c
 8001d0c:	20000c80 	.word	0x20000c80
 8001d10:	20000c60 	.word	0x20000c60
 8001d14:	20000c64 	.word	0x20000c64
 8001d18:	20000c68 	.word	0x20000c68
 8001d1c:	0801b8a8 	.word	0x0801b8a8
 8001d20:	20000f54 	.word	0x20000f54
 8001d24:	0801b8dc 	.word	0x0801b8dc
 8001d28:	00989680 	.word	0x00989680
 8001d2c:	20000ec0 	.word	0x20000ec0
 8001d30:	20001030 	.word	0x20001030
 8001d34:	20001138 	.word	0x20001138

08001d38 <StartImuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartImuTask */
void StartImuTask(void *argument)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  {
	  //	while(1){
	  //		OLED_ShowString(0, 3, en1, 12, 0);
	  //		OLED_ShowString(0, 4, en2, 12, 0);
	  //	  }
	get_data();//JY61P获取数据
 8001d40:	f7ff f9a6 	bl	8001090 <get_data>
	if(arm_getdata[0] != '\0'){
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <StartImuTask+0x2c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <StartImuTask+0x24>
		Uart6_SendStr(arm_getdata);
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <StartImuTask+0x2c>)
 8001d4e:	f7ff fe7f 	bl	8001a50 <Uart6_SendStr>
		memset(arm_getdata, 0, sizeof(arm_getdata));
 8001d52:	2264      	movs	r2, #100	@ 0x64
 8001d54:	2100      	movs	r1, #0
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <StartImuTask+0x2c>)
 8001d58:	f017 fd3e 	bl	80197d8 <memset>
	}
    osDelay(10);
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f006 fc25 	bl	80085ac <osDelay>
	get_data();//JY61P获取数据
 8001d62:	e7ed      	b.n	8001d40 <StartImuTask+0x8>
 8001d64:	200010cc 	.word	0x200010cc

08001d68 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
  for(;;)
  {
	  if(cmd_getFlag == 1){
 8001d70:	4b63      	ldr	r3, [pc, #396]	@ (8001f00 <StartMotorTask+0x198>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d149      	bne.n	8001e0c <StartMotorTask+0xa4>
		  angular_temp = cmd_get_msg.angular.z ; //获取/cmd_vel的角速度,rad/s
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <StartMotorTask+0x19c>)
 8001d7a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff21 	bl	8000bc8 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a5f      	ldr	r2, [pc, #380]	@ (8001f08 <StartMotorTask+0x1a0>)
 8001d8a:	6013      	str	r3, [r2, #0]
		  linear_temp = cmd_get_msg.linear.x ;   //获取/cmd_vel的线速度.m/s
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <StartMotorTask+0x19c>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff17 	bl	8000bc8 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a5b      	ldr	r2, [pc, #364]	@ (8001f0c <StartMotorTask+0x1a4>)
 8001d9e:	6013      	str	r3, [r2, #0]
		  //将转换好的小车�?�度分量为左右轮速度
		  left_speed = (linear_temp - 0.5f*angular_temp*D)*ratio ;
 8001da0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f0c <StartMotorTask+0x1a4>)
 8001da2:	ed93 7a00 	vldr	s14, [r3]
 8001da6:	4b58      	ldr	r3, [pc, #352]	@ (8001f08 <StartMotorTask+0x1a0>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001db0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001db4:	4b56      	ldr	r3, [pc, #344]	@ (8001f10 <StartMotorTask+0x1a8>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc2:	4b54      	ldr	r3, [pc, #336]	@ (8001f14 <StartMotorTask+0x1ac>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dcc:	4b52      	ldr	r3, [pc, #328]	@ (8001f18 <StartMotorTask+0x1b0>)
 8001dce:	edc3 7a00 	vstr	s15, [r3]
		  right_speed = (linear_temp + 0.5f*angular_temp*D)*ratio ;
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f08 <StartMotorTask+0x1a0>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f10 <StartMotorTask+0x1a8>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dea:	4b48      	ldr	r3, [pc, #288]	@ (8001f0c <StartMotorTask+0x1a4>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df4:	4b47      	ldr	r3, [pc, #284]	@ (8001f14 <StartMotorTask+0x1ac>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	4b47      	ldr	r3, [pc, #284]	@ (8001f1c <StartMotorTask+0x1b4>)
 8001e00:	edc3 7a00 	vstr	s15, [r3]

		  cmd_getFlag = 0;
 8001e04:	4b3e      	ldr	r3, [pc, #248]	@ (8001f00 <StartMotorTask+0x198>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e007      	b.n	8001e1c <StartMotorTask+0xb4>
	  }
	  else{
		  left_speed = right_speed = 0;
 8001e0c:	4b43      	ldr	r3, [pc, #268]	@ (8001f1c <StartMotorTask+0x1b4>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4b41      	ldr	r3, [pc, #260]	@ (8001f1c <StartMotorTask+0x1b4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3f      	ldr	r2, [pc, #252]	@ (8001f18 <StartMotorTask+0x1b0>)
 8001e1a:	6013      	str	r3, [r2, #0]
	  }

      left_output = pid_compute(&pid, left_speed, motor1.speed);
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <StartMotorTask+0x1b0>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	4b3f      	ldr	r3, [pc, #252]	@ (8001f20 <StartMotorTask+0x1b8>)
 8001e24:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e28:	eef0 0a47 	vmov.f32	s1, s14
 8001e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e30:	483c      	ldr	r0, [pc, #240]	@ (8001f24 <StartMotorTask+0x1bc>)
 8001e32:	f000 fa41 	bl	80022b8 <pid_compute>
 8001e36:	eef0 7a40 	vmov.f32	s15, s0
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <StartMotorTask+0x1c0>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
      right_output = pid_compute(&pid, right_speed, motor2.speed);
 8001e40:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <StartMotorTask+0x1b4>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <StartMotorTask+0x1c4>)
 8001e48:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e4c:	eef0 0a47 	vmov.f32	s1, s14
 8001e50:	eeb0 0a67 	vmov.f32	s0, s15
 8001e54:	4833      	ldr	r0, [pc, #204]	@ (8001f24 <StartMotorTask+0x1bc>)
 8001e56:	f000 fa2f 	bl	80022b8 <pid_compute>
 8001e5a:	eef0 7a40 	vmov.f32	s15, s0
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <StartMotorTask+0x1c8>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]

      left_output = (left_output > 100) ? 100 : (left_output < -100) ? -100 : left_output;
 8001e64:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <StartMotorTask+0x1c0>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001f34 <StartMotorTask+0x1cc>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dd01      	ble.n	8001e7c <StartMotorTask+0x114>
 8001e78:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <StartMotorTask+0x1d0>)
 8001e7a:	e00d      	b.n	8001e98 <StartMotorTask+0x130>
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <StartMotorTask+0x1c0>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001f3c <StartMotorTask+0x1d4>
 8001e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	d501      	bpl.n	8001e94 <StartMotorTask+0x12c>
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <StartMotorTask+0x1d8>)
 8001e92:	e001      	b.n	8001e98 <StartMotorTask+0x130>
 8001e94:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <StartMotorTask+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <StartMotorTask+0x1c0>)
 8001e9a:	6013      	str	r3, [r2, #0]
      right_output = (right_output > 100) ? 100 : (right_output < -100) ? -100 : right_output;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <StartMotorTask+0x1c8>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001f34 <StartMotorTask+0x1cc>
 8001ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	dd01      	ble.n	8001eb4 <StartMotorTask+0x14c>
 8001eb0:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <StartMotorTask+0x1d0>)
 8001eb2:	e00d      	b.n	8001ed0 <StartMotorTask+0x168>
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <StartMotorTask+0x1c8>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001f3c <StartMotorTask+0x1d4>
 8001ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d501      	bpl.n	8001ecc <StartMotorTask+0x164>
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <StartMotorTask+0x1d8>)
 8001eca:	e001      	b.n	8001ed0 <StartMotorTask+0x168>
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <StartMotorTask+0x1c8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a17      	ldr	r2, [pc, #92]	@ (8001f30 <StartMotorTask+0x1c8>)
 8001ed2:	6013      	str	r3, [r2, #0]

	  left_motor_control(left_speed);
 8001ed4:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <StartMotorTask+0x1b0>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ede:	ee17 0a90 	vmov	r0, s15
 8001ee2:	f7ff f9ef 	bl	80012c4 <left_motor_control>
	  right_motor_control(right_speed);
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <StartMotorTask+0x1b4>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef0:	ee17 0a90 	vmov	r0, s15
 8001ef4:	f7ff fa20 	bl	8001338 <right_motor_control>

    osDelay(120);
 8001ef8:	2078      	movs	r0, #120	@ 0x78
 8001efa:	f006 fb57 	bl	80085ac <osDelay>
	  if(cmd_getFlag == 1){
 8001efe:	e737      	b.n	8001d70 <StartMotorTask+0x8>
 8001f00:	200011f8 	.word	0x200011f8
 8001f04:	200011c8 	.word	0x200011c8
 8001f08:	20001200 	.word	0x20001200
 8001f0c:	200011fc 	.word	0x200011fc
 8001f10:	200008e8 	.word	0x200008e8
 8001f14:	200008e4 	.word	0x200008e4
 8001f18:	20001204 	.word	0x20001204
 8001f1c:	20001208 	.word	0x20001208
 8001f20:	20000d84 	.word	0x20000d84
 8001f24:	200008ec 	.word	0x200008ec
 8001f28:	2000120c 	.word	0x2000120c
 8001f2c:	20000d90 	.word	0x20000d90
 8001f30:	20001210 	.word	0x20001210
 8001f34:	42c80000 	.word	0x42c80000
 8001f38:	42c80000 	.word	0x42c80000
 8001f3c:	c2c80000 	.word	0xc2c80000
 8001f40:	c2c80000 	.word	0xc2c80000

08001f44 <micro_ros_init>:
  /* USER CODE END StartMotorTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void micro_ros_init(void){
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b08e      	sub	sp, #56	@ 0x38
 8001f48:	af02      	add	r7, sp, #8
	 printf("hello mirco_ros\r\n");
 8001f4a:	4822      	ldr	r0, [pc, #136]	@ (8001fd4 <micro_ros_init+0x90>)
 8001f4c:	f017 faae 	bl	80194ac <puts>
		  rmw_uros_set_custom_transport(
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <micro_ros_init+0x94>)
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <micro_ros_init+0x98>)
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <micro_ros_init+0x9c>)
 8001f5a:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <micro_ros_init+0xa0>)
 8001f5c:	4922      	ldr	r1, [pc, #136]	@ (8001fe8 <micro_ros_init+0xa4>)
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f00e f8f0 	bl	8010144 <rmw_uros_set_custom_transport>
		    cubemx_transport_open,
		    cubemx_transport_close,
		    cubemx_transport_write,
		    cubemx_transport_read);

		  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00d fcc5 	bl	800f8f8 <rcutils_get_zero_initialized_allocator>
		  freeRTOS_allocator.allocate = microros_allocate;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <micro_ros_init+0xa8>)
 8001f70:	61fb      	str	r3, [r7, #28]
		  freeRTOS_allocator.deallocate = microros_deallocate;
 8001f72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <micro_ros_init+0xac>)
 8001f74:	623b      	str	r3, [r7, #32]
		  freeRTOS_allocator.reallocate = microros_reallocate;
 8001f76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <micro_ros_init+0xb0>)
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
		  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <micro_ros_init+0xb4>)
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

		  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4618      	mov	r0, r3
 8001f84:	f00d fcc6 	bl	800f914 <rcutils_set_default_allocator>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <micro_ros_init+0x5a>
		      printf("Error on default allocators (line %d)\n", __LINE__);
 8001f94:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <micro_ros_init+0xb8>)
 8001f9a:	f017 fa1f 	bl	80193dc <iprintf>
		  }

		  allocator = rcl_get_default_allocator();
 8001f9e:	4c18      	ldr	r4, [pc, #96]	@ (8002000 <micro_ros_init+0xbc>)
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00d fcd4 	bl	800f950 <rcutils_get_default_allocator>
 8001fa8:	4625      	mov	r5, r4
 8001faa:	463c      	mov	r4, r7
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	602b      	str	r3, [r5, #0]

		  //create init_options
		  rclc_support_init(&support, 0, NULL, &allocator);
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <micro_ros_init+0xbc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4812      	ldr	r0, [pc, #72]	@ (8002004 <micro_ros_init+0xc0>)
 8001fbc:	f00b f934 	bl	800d228 <rclc_support_init>

		  // create node
		  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <micro_ros_init+0xc0>)
 8001fc2:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <micro_ros_init+0xc4>)
 8001fc4:	4911      	ldr	r1, [pc, #68]	@ (800200c <micro_ros_init+0xc8>)
 8001fc6:	4812      	ldr	r0, [pc, #72]	@ (8002010 <micro_ros_init+0xcc>)
 8001fc8:	f00b fa44 	bl	800d454 <rclc_node_init_default>
}
 8001fcc:	bf00      	nop
 8001fce:	3730      	adds	r7, #48	@ 0x30
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd4:	0801b908 	.word	0x0801b908
 8001fd8:	08003e25 	.word	0x08003e25
 8001fdc:	08003dbd 	.word	0x08003dbd
 8001fe0:	08003d9d 	.word	0x08003d9d
 8001fe4:	08003d71 	.word	0x08003d71
 8001fe8:	20004820 	.word	0x20004820
 8001fec:	08003aa9 	.word	0x08003aa9
 8001ff0:	08003aed 	.word	0x08003aed
 8001ff4:	08003b25 	.word	0x08003b25
 8001ff8:	08003b91 	.word	0x08003b91
 8001ffc:	0801b91c 	.word	0x0801b91c
 8002000:	20000e98 	.word	0x20000e98
 8002004:	20000e64 	.word	0x20000e64
 8002008:	0801b944 	.word	0x0801b944
 800200c:	0801b948 	.word	0x0801b948
 8002010:	20000eac 	.word	0x20000eac

08002014 <hx_ros_init>:

void hx_ros_init(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af02      	add	r7, sp, #8
	// create publisher
	rclc_publisher_init_default(
 800201a:	f010 f8dd 	bl	80121d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800201e:	4602      	mov	r2, r0
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <hx_ros_init+0xa0>)
 8002022:	4925      	ldr	r1, [pc, #148]	@ (80020b8 <hx_ros_init+0xa4>)
 8002024:	4825      	ldr	r0, [pc, #148]	@ (80020bc <hx_ros_init+0xa8>)
 8002026:	f00b fad5 	bl	800d5d4 <rclc_publisher_init_default>
	&hx_publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");
	hx_send_msg.data = 0;
 800202a:	4b25      	ldr	r3, [pc, #148]	@ (80020c0 <hx_ros_init+0xac>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

	const char * subscriber_name = "hx_topic";
 8002030:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <hx_ros_init+0xb0>)
 8002032:	60fb      	str	r3, [r7, #12]
	// Initialize a reliable subscriber
	rcl_ret_t rc = rclc_subscription_init_default(
 8002034:	f010 f8d0 	bl	80121d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	491e      	ldr	r1, [pc, #120]	@ (80020b8 <hx_ros_init+0xa4>)
 800203e:	4822      	ldr	r0, [pc, #136]	@ (80020c8 <hx_ros_init+0xb4>)
 8002040:	f00b fafc 	bl	800d63c <rclc_subscription_init_default>
 8002044:	60b8      	str	r0, [r7, #8]
	  &hx_subscriber, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), subscriber_name);
	if (RCL_RET_OK != rc) {
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <hx_ros_init+0x48>
		 printf("Error subscription_init (line %d) (ret %d)\r\n", __LINE__,rc);
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8002052:	481e      	ldr	r0, [pc, #120]	@ (80020cc <hx_ros_init+0xb8>)
 8002054:	f017 f9c2 	bl	80193dc <iprintf>
		 while(1){
			 NVIC_SystemReset();
 8002058:	f7ff fcd2 	bl	8001a00 <__NVIC_SystemReset>
			 osDelay(200);
		 }
	}
	RCCHECK(rclc_executor_init(&hx_executor, &support.context, 1, &allocator));
 800205c:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <hx_ros_init+0xbc>)
 800205e:	2201      	movs	r2, #1
 8002060:	491c      	ldr	r1, [pc, #112]	@ (80020d4 <hx_ros_init+0xc0>)
 8002062:	481d      	ldr	r0, [pc, #116]	@ (80020d8 <hx_ros_init+0xc4>)
 8002064:	f00a fe18 	bl	800cc98 <rclc_executor_init>
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <hx_ros_init+0x6e>
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	f240 11af 	movw	r1, #431	@ 0x1af
 8002076:	4819      	ldr	r0, [pc, #100]	@ (80020dc <hx_ros_init+0xc8>)
 8002078:	f017 f9b0 	bl	80193dc <iprintf>
 800207c:	2000      	movs	r0, #0
 800207e:	f007 fa39 	bl	80094f4 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&hx_executor, &hx_subscriber, &hx_get_msg, &subscription_callback, ON_NEW_DATA));
 8002082:	2300      	movs	r3, #0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <hx_ros_init+0xcc>)
 8002088:	4a16      	ldr	r2, [pc, #88]	@ (80020e4 <hx_ros_init+0xd0>)
 800208a:	490f      	ldr	r1, [pc, #60]	@ (80020c8 <hx_ros_init+0xb4>)
 800208c:	4812      	ldr	r0, [pc, #72]	@ (80020d8 <hx_ros_init+0xc4>)
 800208e:	f00a fe73 	bl	800cd78 <rclc_executor_add_subscription>
 8002092:	6038      	str	r0, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <hx_ros_init+0x98>
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80020a0:	480e      	ldr	r0, [pc, #56]	@ (80020dc <hx_ros_init+0xc8>)
 80020a2:	f017 f99b 	bl	80193dc <iprintf>
 80020a6:	2000      	movs	r0, #0
 80020a8:	f007 fa24 	bl	80094f4 <vTaskDelete>
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0801b954 	.word	0x0801b954
 80020b8:	20000eac 	.word	0x20000eac
 80020bc:	20000eb4 	.word	0x20000eb4
 80020c0:	20000eb8 	.word	0x20000eb8
 80020c4:	0801b968 	.word	0x0801b968
 80020c8:	20000ebc 	.word	0x20000ebc
 80020cc:	0801b974 	.word	0x0801b974
 80020d0:	20000e98 	.word	0x20000e98
 80020d4:	20000e64 	.word	0x20000e64
 80020d8:	20000ec0 	.word	0x20000ec0
 80020dc:	0801b9a4 	.word	0x0801b9a4
 80020e0:	08001a91 	.word	0x08001a91
 80020e4:	20000f50 	.word	0x20000f50

080020e8 <imu_ros_init>:

void imu_ros_init(void){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	imu_send_msg.data.data = &string_memory[0];
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <imu_ros_init+0x2c>)
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <imu_ros_init+0x30>)
 80020f0:	601a      	str	r2, [r3, #0]
	imu_send_msg.data.size = 0;
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <imu_ros_init+0x2c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
	imu_send_msg.data.capacity = STRING_LEN;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <imu_ros_init+0x2c>)
 80020fa:	22c8      	movs	r2, #200	@ 0xc8
 80020fc:	609a      	str	r2, [r3, #8]

	// create publisher
	rclc_publisher_init_default(
 80020fe:	f010 f883 	bl	8012208 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002102:	4602      	mov	r2, r0
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <imu_ros_init+0x34>)
 8002106:	4906      	ldr	r1, [pc, #24]	@ (8002120 <imu_ros_init+0x38>)
 8002108:	4806      	ldr	r0, [pc, #24]	@ (8002124 <imu_ros_init+0x3c>)
 800210a:	f00b fa63 	bl	800d5d4 <rclc_publisher_init_default>
	&imu_publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	"imu_publisher");
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000f58 	.word	0x20000f58
 8002118:	20000f64 	.word	0x20000f64
 800211c:	0801b9d0 	.word	0x0801b9d0
 8002120:	20000eac 	.word	0x20000eac
 8002124:	20000f54 	.word	0x20000f54

08002128 <arm_ros_init>:

void arm_ros_init(void){
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af02      	add	r7, sp, #8
	arm_get_msg.data.data = &arm_getdata[0];
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <arm_ros_init+0xa8>)
 8002130:	4a28      	ldr	r2, [pc, #160]	@ (80021d4 <arm_ros_init+0xac>)
 8002132:	601a      	str	r2, [r3, #0]
	arm_get_msg.data.size = 0;
 8002134:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <arm_ros_init+0xa8>)
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
	arm_get_msg.data.capacity = 100;
 800213a:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <arm_ros_init+0xa8>)
 800213c:	2264      	movs	r2, #100	@ 0x64
 800213e:	609a      	str	r2, [r3, #8]

	const char * arm_subscriber_name = "arm_topic";
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <arm_ros_init+0xb0>)
 8002142:	60fb      	str	r3, [r7, #12]
	// Initialize a reliable subscriber
	rcl_ret_t rc_arm = rclc_subscription_init_default(
 8002144:	f010 f860 	bl	8012208 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4923      	ldr	r1, [pc, #140]	@ (80021dc <arm_ros_init+0xb4>)
 800214e:	4824      	ldr	r0, [pc, #144]	@ (80021e0 <arm_ros_init+0xb8>)
 8002150:	f00b fa74 	bl	800d63c <rclc_subscription_init_default>
 8002154:	60b8      	str	r0, [r7, #8]
	  &arm_subscriber, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String), arm_subscriber_name);
	if (RCL_RET_OK != rc_arm) {
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <arm_ros_init+0x48>
		 printf("Error subscription_init (line %d) (ret %d)\n", __LINE__,rc_arm);
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8002162:	4820      	ldr	r0, [pc, #128]	@ (80021e4 <arm_ros_init+0xbc>)
 8002164:	f017 f93a 	bl	80193dc <iprintf>
		 while(1){
			 osDelay(200);
 8002168:	20c8      	movs	r0, #200	@ 0xc8
 800216a:	f006 fa1f 	bl	80085ac <osDelay>
 800216e:	e7fb      	b.n	8002168 <arm_ros_init+0x40>
		 }
	}
	RCCHECK(rclc_executor_init(&arm_executor, &support.context, 1, &allocator));
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <arm_ros_init+0xc0>)
 8002172:	2201      	movs	r2, #1
 8002174:	491d      	ldr	r1, [pc, #116]	@ (80021ec <arm_ros_init+0xc4>)
 8002176:	481e      	ldr	r0, [pc, #120]	@ (80021f0 <arm_ros_init+0xc8>)
 8002178:	f00a fd8e 	bl	800cc98 <rclc_executor_init>
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <arm_ros_init+0x6e>
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 800218a:	481a      	ldr	r0, [pc, #104]	@ (80021f4 <arm_ros_init+0xcc>)
 800218c:	f017 f926 	bl	80193dc <iprintf>
 8002190:	2000      	movs	r0, #0
 8002192:	f007 f9af 	bl	80094f4 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&arm_executor, &arm_subscriber, &arm_get_msg, &subscription_callback_arm, ON_NEW_DATA));
 8002196:	2300      	movs	r3, #0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <arm_ros_init+0xd0>)
 800219c:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <arm_ros_init+0xa8>)
 800219e:	4910      	ldr	r1, [pc, #64]	@ (80021e0 <arm_ros_init+0xb8>)
 80021a0:	4813      	ldr	r0, [pc, #76]	@ (80021f0 <arm_ros_init+0xc8>)
 80021a2:	f00a fde9 	bl	800cd78 <rclc_executor_add_subscription>
 80021a6:	6038      	str	r0, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <arm_ros_init+0x98>
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	f240 11d1 	movw	r1, #465	@ 0x1d1
 80021b4:	480f      	ldr	r0, [pc, #60]	@ (80021f4 <arm_ros_init+0xcc>)
 80021b6:	f017 f911 	bl	80193dc <iprintf>
 80021ba:	2000      	movs	r0, #0
 80021bc:	f007 f99a 	bl	80094f4 <vTaskDelete>

	Uart6_SendStr("{#001P1500T1000!#002P1200T1000!#003P0500T1000!#004P1500T1000!#005P1500T1000!}");//机械臂初始位置
 80021c0:	480e      	ldr	r0, [pc, #56]	@ (80021fc <arm_ros_init+0xd4>)
 80021c2:	f7ff fc45 	bl	8001a50 <Uart6_SendStr>
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200010c0 	.word	0x200010c0
 80021d4:	200010cc 	.word	0x200010cc
 80021d8:	0801b9e0 	.word	0x0801b9e0
 80021dc:	20000eac 	.word	0x20000eac
 80021e0:	2000102c 	.word	0x2000102c
 80021e4:	0801b9ec 	.word	0x0801b9ec
 80021e8:	20000e98 	.word	0x20000e98
 80021ec:	20000e64 	.word	0x20000e64
 80021f0:	20001030 	.word	0x20001030
 80021f4:	0801b9a4 	.word	0x0801b9a4
 80021f8:	08001ab9 	.word	0x08001ab9
 80021fc:	0801ba18 	.word	0x0801ba18

08002200 <cmd_get_init>:

void cmd_get_init(void){
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
	const char * cmd_subscriber_name = "cmd_vel";
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <cmd_get_init+0x90>)
 8002208:	60fb      	str	r3, [r7, #12]
	// Initialize a reliable subscriber
	rcl_ret_t rc_cmd = rclc_subscription_init_default(
 800220a:	f008 ff0d 	bl	800b028 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4920      	ldr	r1, [pc, #128]	@ (8002294 <cmd_get_init+0x94>)
 8002214:	4820      	ldr	r0, [pc, #128]	@ (8002298 <cmd_get_init+0x98>)
 8002216:	f00b fa11 	bl	800d63c <rclc_subscription_init_default>
 800221a:	60b8      	str	r0, [r7, #8]
	  &cmd_subscriber, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), cmd_subscriber_name);
	if (RCL_RET_OK != rc_cmd) {
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <cmd_get_init+0x36>
		 printf("Error subscription_init (line %d) (ret %d)\n", __LINE__,rc_cmd);
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8002228:	481c      	ldr	r0, [pc, #112]	@ (800229c <cmd_get_init+0x9c>)
 800222a:	f017 f8d7 	bl	80193dc <iprintf>
		 while(1){
			 osDelay(200);
 800222e:	20c8      	movs	r0, #200	@ 0xc8
 8002230:	f006 f9bc 	bl	80085ac <osDelay>
 8002234:	e7fb      	b.n	800222e <cmd_get_init+0x2e>
		 }
	}
	RCCHECK(rclc_executor_init(&cmd_executor, &support.context, 1, &allocator));
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <cmd_get_init+0xa0>)
 8002238:	2201      	movs	r2, #1
 800223a:	491a      	ldr	r1, [pc, #104]	@ (80022a4 <cmd_get_init+0xa4>)
 800223c:	481a      	ldr	r0, [pc, #104]	@ (80022a8 <cmd_get_init+0xa8>)
 800223e:	f00a fd2b 	bl	800cc98 <rclc_executor_init>
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <cmd_get_init+0x5c>
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002250:	4816      	ldr	r0, [pc, #88]	@ (80022ac <cmd_get_init+0xac>)
 8002252:	f017 f8c3 	bl	80193dc <iprintf>
 8002256:	2000      	movs	r0, #0
 8002258:	f007 f94c 	bl	80094f4 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&cmd_executor, &cmd_subscriber, &cmd_get_msg, &subscription_callback_cmd, ON_NEW_DATA));
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <cmd_get_init+0xb0>)
 8002262:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <cmd_get_init+0xb4>)
 8002264:	490c      	ldr	r1, [pc, #48]	@ (8002298 <cmd_get_init+0x98>)
 8002266:	4810      	ldr	r0, [pc, #64]	@ (80022a8 <cmd_get_init+0xa8>)
 8002268:	f00a fd86 	bl	800cd78 <rclc_executor_add_subscription>
 800226c:	6038      	str	r0, [r7, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <cmd_get_init+0x86>
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800227a:	480c      	ldr	r0, [pc, #48]	@ (80022ac <cmd_get_init+0xac>)
 800227c:	f017 f8ae 	bl	80193dc <iprintf>
 8002280:	2000      	movs	r0, #0
 8002282:	f007 f937 	bl	80094f4 <vTaskDelete>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	0801ba68 	.word	0x0801ba68
 8002294:	20000eac 	.word	0x20000eac
 8002298:	20001130 	.word	0x20001130
 800229c:	0801b9ec 	.word	0x0801b9ec
 80022a0:	20000e98 	.word	0x20000e98
 80022a4:	20000e64 	.word	0x20000e64
 80022a8:	20001138 	.word	0x20001138
 80022ac:	0801b9a4 	.word	0x0801b9a4
 80022b0:	08001add 	.word	0x08001add
 80022b4:	200011c8 	.word	0x200011c8

080022b8 <pid_compute>:

float pid_compute(PIDController *pid, float setpoint, float measured) {
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80022c4:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measured;
 80022c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80022cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	edc7 7a07 	vstr	s15, [r7, #28]
    pid->integral += error;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	ed93 7a03 	vldr	s14, [r3, #12]
 80022de:	edd7 7a07 	vldr	s15, [r7, #28]
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	edc3 7a03 	vstr	s15, [r3, #12]
    float derivative = error - pid->prev_error;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80022f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fa:	edc7 7a06 	vstr	s15, [r7, #24]
    pid->prev_error = error;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	611a      	str	r2, [r3, #16]

    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	edd7 7a07 	vldr	s15, [r7, #28]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	edd3 6a01 	vldr	s13, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	edd3 7a03 	vldr	s15, [r3, #12]
 800231e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	edd3 6a02 	vldr	s13, [r3, #8]
 800232c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002338:	edc7 7a05 	vstr	s15, [r7, #20]
    return output;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	ee07 3a90 	vmov	s15, r3
}
 8002342:	eeb0 0a67 	vmov.f32	s0, s15
 8002346:	3724      	adds	r7, #36	@ 0x24
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	@ 0x30
 8002354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <MX_GPIO_Init+0x114>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a3d      	ldr	r2, [pc, #244]	@ (8002464 <MX_GPIO_Init+0x114>)
 8002370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <MX_GPIO_Init+0x114>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <MX_GPIO_Init+0x114>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a36      	ldr	r2, [pc, #216]	@ (8002464 <MX_GPIO_Init+0x114>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <MX_GPIO_Init+0x114>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b29      	ldr	r3, [pc, #164]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a28      	ldr	r2, [pc, #160]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ca:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a21      	ldr	r2, [pc, #132]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002464 <MX_GPIO_Init+0x114>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <MX_GPIO_Init+0x114>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	2103      	movs	r1, #3
 8002412:	4815      	ldr	r0, [pc, #84]	@ (8002468 <MX_GPIO_Init+0x118>)
 8002414:	f002 fc46 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	2103      	movs	r1, #3
 800241c:	4813      	ldr	r0, [pc, #76]	@ (800246c <MX_GPIO_Init+0x11c>)
 800241e:	f002 fc41 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8002422:	2303      	movs	r3, #3
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	480b      	ldr	r0, [pc, #44]	@ (8002468 <MX_GPIO_Init+0x118>)
 800243a:	f002 fa97 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 800243e:	2303      	movs	r3, #3
 8002440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	2301      	movs	r3, #1
 8002444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	4805      	ldr	r0, [pc, #20]	@ (800246c <MX_GPIO_Init+0x11c>)
 8002456:	f002 fa89 	bl	800496c <HAL_GPIO_Init>

}
 800245a:	bf00      	nop
 800245c:	3730      	adds	r7, #48	@ 0x30
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40020800 	.word	0x40020800
 800246c:	40021000 	.word	0x40021000

08002470 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002476:	4a13      	ldr	r2, [pc, #76]	@ (80024c4 <MX_I2C1_Init+0x54>)
 8002478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <MX_I2C1_Init+0x50>)
 800247c:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <MX_I2C1_Init+0x58>)
 800247e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <MX_I2C1_Init+0x50>)
 800248e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002494:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <MX_I2C1_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a0:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <MX_I2C1_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <MX_I2C1_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	@ (80024c0 <MX_I2C1_Init+0x50>)
 80024ae:	f002 fc13 	bl	8004cd8 <HAL_I2C_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024b8:	f000 f9c8 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20004614 	.word	0x20004614
 80024c4:	40005400 	.word	0x40005400
 80024c8:	000186a0 	.word	0x000186a0

080024cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a19      	ldr	r2, [pc, #100]	@ (8002550 <HAL_I2C_MspInit+0x84>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d12b      	bne.n	8002546 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a17      	ldr	r2, [pc, #92]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250a:	23c0      	movs	r3, #192	@ 0xc0
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250e:	2312      	movs	r3, #18
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251a:	2304      	movs	r3, #4
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	480c      	ldr	r0, [pc, #48]	@ (8002558 <HAL_I2C_MspInit+0x8c>)
 8002526:	f002 fa21 	bl	800496c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 8002534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	@ 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40005400 	.word	0x40005400
 8002554:	40023800 	.word	0x40023800
 8002558:	40020400 	.word	0x40020400

0800255c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002560:	f001 fcde 	bl	8003f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002564:	f000 f834 	bl	80025d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002568:	f7ff fef2 	bl	8002350 <MX_GPIO_Init>
  MX_DMA_Init();
 800256c:	f7ff fa20 	bl	80019b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002570:	f000 fe30 	bl	80031d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002574:	f000 fe04 	bl	8003180 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002578:	f000 fb5a 	bl	8002c30 <MX_TIM1_Init>
  MX_I2C1_Init();
 800257c:	f7ff ff78 	bl	8002470 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002580:	f000 fe52 	bl	8003228 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002584:	f000 fc32 	bl	8002dec <MX_TIM3_Init>
  MX_TIM4_Init();
 8002588:	f000 fc84 	bl	8002e94 <MX_TIM4_Init>
  MX_TIM2_Init();
 800258c:	f000 fbe0 	bl	8002d50 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8002590:	f000 fe74 	bl	800327c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,&rx_buff1,1);
 8002594:	2201      	movs	r2, #1
 8002596:	490b      	ldr	r1, [pc, #44]	@ (80025c4 <main+0x68>)
 8002598:	480b      	ldr	r0, [pc, #44]	@ (80025c8 <main+0x6c>)
 800259a:	f004 fc32 	bl	8006e02 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart6,&rx_buff1,1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);	//使能TIM1-1		左AIN
 800259e:	2100      	movs	r1, #0
 80025a0:	480a      	ldr	r0, [pc, #40]	@ (80025cc <main+0x70>)
 80025a2:	f003 fab7 	bl	8005b14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);	//使能TIM1-2		右BIN
 80025a6:	2104      	movs	r1, #4
 80025a8:	4808      	ldr	r0, [pc, #32]	@ (80025cc <main+0x70>)
 80025aa:	f003 fab3 	bl	8005b14 <HAL_TIM_PWM_Start>
  Encoder_Init();
 80025ae:	f7fe fe59 	bl	8001264 <Encoder_Init>
//  OLED_Clear();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025b2:	f005 ff1f 	bl	80083f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80025b6:	f7ff facb 	bl	8001b50 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80025ba:	f005 ff3f 	bl	800843c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025be:	bf00      	nop
 80025c0:	e7fd      	b.n	80025be <main+0x62>
 80025c2:	bf00      	nop
 80025c4:	20000c44 	.word	0x20000c44
 80025c8:	20004868 	.word	0x20004868
 80025cc:	200046b8 	.word	0x200046b8

080025d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	@ 0x50
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 0320 	add.w	r3, r7, #32
 80025da:	2230      	movs	r2, #48	@ 0x30
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f017 f8fa 	bl	80197d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	4b28      	ldr	r3, [pc, #160]	@ (800269c <SystemClock_Config+0xcc>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4a27      	ldr	r2, [pc, #156]	@ (800269c <SystemClock_Config+0xcc>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	@ 0x40
 8002604:	4b25      	ldr	r3, [pc, #148]	@ (800269c <SystemClock_Config+0xcc>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <SystemClock_Config+0xd0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a21      	ldr	r2, [pc, #132]	@ (80026a0 <SystemClock_Config+0xd0>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <SystemClock_Config+0xd0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800262c:	2301      	movs	r3, #1
 800262e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002636:	2302      	movs	r3, #2
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002640:	2308      	movs	r3, #8
 8002642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002644:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800264a:	2302      	movs	r3, #2
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800264e:	2304      	movs	r3, #4
 8002650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002652:	f107 0320 	add.w	r3, r7, #32
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fc82 	bl	8004f60 <HAL_RCC_OscConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002662:	f000 f8f3 	bl	800284c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002666:	230f      	movs	r3, #15
 8002668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266a:	2302      	movs	r3, #2
 800266c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002672:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	2105      	movs	r1, #5
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fee3 	bl	8005450 <HAL_RCC_ClockConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002690:	f000 f8dc 	bl	800284c <Error_Handler>
  }
}
 8002694:	bf00      	nop
 8002696:	3750      	adds	r7, #80	@ 0x50
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	40007000 	.word	0x40007000
 80026a4:	00000000 	.word	0x00000000

080026a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002828 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026ba:	f001 fc53 	bl	8003f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance==GAP_TIM.Instance)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b5a      	ldr	r3, [pc, #360]	@ (800282c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	f040 80a6 	bne.w	8002818 <HAL_TIM_PeriodElapsedCallback+0x170>
  {
	motor1.Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&ENCODER_1_TIM);
 80026cc:	4b58      	ldr	r3, [pc, #352]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b54      	ldr	r3, [pc, #336]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80026e4:	605a      	str	r2, [r3, #4]
	motor2.Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&ENCODER_2_TIM);
 80026e6:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80026fe:	605a      	str	r2, [r3, #4]
	motor1.CaptureNumber = __HAL_TIM_GET_COUNTER(&ENCODER_1_TIM);
 8002700:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	4a4b      	ldr	r2, [pc, #300]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002708:	6013      	str	r3, [r2, #0]
	motor2.CaptureNumber = __HAL_TIM_GET_COUNTER(&ENCODER_2_TIM);
 800270a:	4b4b      	ldr	r3, [pc, #300]	@ (8002838 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	4a4a      	ldr	r2, [pc, #296]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002712:	6013      	str	r3, [r2, #0]

	if(motor1.Direction)  //如果向下计数，真实的脉冲计数值＝65535-CaptureNumber
 8002714:	4b47      	ldr	r3, [pc, #284]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_TIM_PeriodElapsedCallback+0x82>
		motor1.CaptureNumber = 65535 - motor1.CaptureNumber;
 800271c:	4b45      	ldr	r3, [pc, #276]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8002724:	33ff      	adds	r3, #255	@ 0xff
 8002726:	4a43      	ldr	r2, [pc, #268]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002728:	6013      	str	r3, [r2, #0]
	if(motor2.Direction)  //如果向下计数，真实的脉冲计数值＝65535-CaptureNumber
 800272a:	4b44      	ldr	r3, [pc, #272]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <HAL_TIM_PeriodElapsedCallback+0x98>
			motor2.CaptureNumber = 65535 - motor2.CaptureNumber;
 8002732:	4b42      	ldr	r3, [pc, #264]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800273a:	33ff      	adds	r3, #255	@ 0xff
 800273c:	4a3f      	ldr	r2, [pc, #252]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800273e:	6013      	str	r3, [r2, #0]
	motor1.speed = motor1.CaptureNumber * 60/0.01/4/1320/30;
 8002740:	4b3c      	ldr	r3, [pc, #240]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fee9 	bl	8000524 <__aeabi_ui2d>
 8002752:	a333      	add	r3, pc, #204	@ (adr r3, 8002820 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fe f888 	bl	800086c <__aeabi_ddiv>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800276a:	f7fe f87f 	bl	800086c <__aeabi_ddiv>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800277c:	f7fe f876 	bl	800086c <__aeabi_ddiv>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	4b2e      	ldr	r3, [pc, #184]	@ (8002848 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800278e:	f7fe f86d 	bl	800086c <__aeabi_ddiv>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f7fe fa15 	bl	8000bc8 <__aeabi_d2f>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a24      	ldr	r2, [pc, #144]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80027a2:	6093      	str	r3, [r2, #8]
	motor2.speed = motor2.CaptureNumber * 60/0.01/4/1320/30;
 80027a4:	4b25      	ldr	r3, [pc, #148]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd feb7 	bl	8000524 <__aeabi_ui2d>
 80027b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002820 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f856 	bl	800086c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002840 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80027ce:	f7fe f84d 	bl	800086c <__aeabi_ddiv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80027e0:	f7fe f844 	bl	800086c <__aeabi_ddiv>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80027f2:	f7fe f83b 	bl	800086c <__aeabi_ddiv>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f9e3 	bl	8000bc8 <__aeabi_d2f>
 8002802:	4603      	mov	r3, r0
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002806:	6093      	str	r3, [r2, #8]
	// 脉冲数量×60/定时时间(s)/4倍频/单圈脉冲�?(1320)/减�?�比�?    单位 r/min

	__HAL_TIM_GET_COUNTER(&ENCODER_1_TIM) = 0;//计数值清0�?
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_GET_COUNTER(&ENCODER_2_TIM) = 0;//计数值清0�?
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* USER CODE END Callback 1 */
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	47ae147b 	.word	0x47ae147b
 8002824:	3f847ae1 	.word	0x3f847ae1
 8002828:	40002000 	.word	0x40002000
 800282c:	20004700 	.word	0x20004700
 8002830:	20004748 	.word	0x20004748
 8002834:	20000d84 	.word	0x20000d84
 8002838:	20004790 	.word	0x20004790
 800283c:	20000d90 	.word	0x20000d90
 8002840:	40100000 	.word	0x40100000
 8002844:	4094a000 	.word	0x4094a000
 8002848:	403e0000 	.word	0x403e0000

0800284c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
}
 8002852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <Error_Handler+0x8>

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_MspInit+0x54>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	4a11      	ldr	r2, [pc, #68]	@ (80028ac <HAL_MspInit+0x54>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286c:	6453      	str	r3, [r2, #68]	@ 0x44
 800286e:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_MspInit+0x54>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_MspInit+0x54>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <HAL_MspInit+0x54>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	@ 0x40
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_MspInit+0x54>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	210f      	movs	r1, #15
 800289a:	f06f 0001 	mvn.w	r0, #1
 800289e:	f001 fc39 	bl	8004114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	@ 0x38
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	4b33      	ldr	r3, [pc, #204]	@ (8002994 <HAL_InitTick+0xe4>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	4a32      	ldr	r2, [pc, #200]	@ (8002994 <HAL_InitTick+0xe4>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d0:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <HAL_InitTick+0xe4>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028dc:	f107 0210 	add.w	r2, r7, #16
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 ffd2 	bl	8005890 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028f6:	f002 ffa3 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 80028fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80028fc:	e004      	b.n	8002908 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80028fe:	f002 ff9f 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8002902:	4603      	mov	r3, r0
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290a:	4a23      	ldr	r2, [pc, #140]	@ (8002998 <HAL_InitTick+0xe8>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	0c9b      	lsrs	r3, r3, #18
 8002912:	3b01      	subs	r3, #1
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002916:	4b21      	ldr	r3, [pc, #132]	@ (800299c <HAL_InitTick+0xec>)
 8002918:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <HAL_InitTick+0xf0>)
 800291a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800291c:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <HAL_InitTick+0xec>)
 800291e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002922:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_InitTick+0xec>)
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800292a:	4b1c      	ldr	r3, [pc, #112]	@ (800299c <HAL_InitTick+0xec>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002930:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_InitTick+0xec>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002936:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_InitTick+0xec>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800293c:	4817      	ldr	r0, [pc, #92]	@ (800299c <HAL_InitTick+0xec>)
 800293e:	f002 ffd9 	bl	80058f4 <HAL_TIM_Base_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002948:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11b      	bne.n	8002988 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002950:	4812      	ldr	r0, [pc, #72]	@ (800299c <HAL_InitTick+0xec>)
 8002952:	f003 f81f 	bl	8005994 <HAL_TIM_Base_Start_IT>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800295c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002964:	202d      	movs	r0, #45	@ 0x2d
 8002966:	f001 fbf1 	bl	800414c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b0f      	cmp	r3, #15
 800296e:	d808      	bhi.n	8002982 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002970:	2200      	movs	r2, #0
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	202d      	movs	r0, #45	@ 0x2d
 8002976:	f001 fbcd 	bl	8004114 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <HAL_InitTick+0xf4>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e002      	b.n	8002988 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800298c:	4618      	mov	r0, r3
 800298e:	3738      	adds	r7, #56	@ 0x38
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	431bde83 	.word	0x431bde83
 800299c:	20004668 	.word	0x20004668
 80029a0:	40002000 	.word	0x40002000
 80029a4:	20000908 	.word	0x20000908

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <NMI_Handler+0x4>

080029b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <MemManage_Handler+0x4>

080029c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <UsageFault_Handler+0x4>

080029d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <DMA1_Stream5_IRQHandler+0x10>)
 80029e6:	f001 fd57 	bl	8004498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200048f8 	.word	0x200048f8

080029f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <DMA1_Stream6_IRQHandler+0x10>)
 80029fa:	f001 fd4d 	bl	8004498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20004958 	.word	0x20004958

08002a08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <TIM2_IRQHandler+0x10>)
 8002a0e:	f003 fa7d 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20004700 	.word	0x20004700

08002a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <USART1_IRQHandler+0x10>)
 8002a22:	f004 fb27 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200047d8 	.word	0x200047d8

08002a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <USART2_IRQHandler+0x10>)
 8002a36:	f004 fb1d 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20004820 	.word	0x20004820

08002a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <USART3_IRQHandler+0x10>)
 8002a4a:	f004 fb13 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20004868 	.word	0x20004868

08002a58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002a5e:	f003 fa55 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20004668 	.word	0x20004668

08002a6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <USART6_IRQHandler+0x10>)
 8002a72:	f004 faff 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200048b0 	.word	0x200048b0

08002a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return 1;
 8002a84:	2301      	movs	r3, #1
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <_kill>:

int _kill(int pid, int sig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a9a:	f016 ff47 	bl	801992c <__errno>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2216      	movs	r2, #22
 8002aa2:	601a      	str	r2, [r3, #0]
  return -1;
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_exit>:

void _exit (int status)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffe7 	bl	8002a90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ac2:	bf00      	nop
 8002ac4:	e7fd      	b.n	8002ac2 <_exit+0x12>

08002ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e00a      	b.n	8002aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ad8:	f3af 8000 	nop.w
 8002adc:	4601      	mov	r1, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	60ba      	str	r2, [r7, #8]
 8002ae4:	b2ca      	uxtb	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	dbf0      	blt.n	8002ad8 <_read+0x12>
  }

  return len;
 8002af6:	687b      	ldr	r3, [r7, #4]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e009      	b.n	8002b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	60ba      	str	r2, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe ff86 	bl	8001a2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	dbf1      	blt.n	8002b12 <_write+0x12>
  }
  return len;
 8002b2e:	687b      	ldr	r3, [r7, #4]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_close>:

int _close(int file)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b60:	605a      	str	r2, [r3, #4]
  return 0;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_isatty>:

int _isatty(int file)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba8:	4a14      	ldr	r2, [pc, #80]	@ (8002bfc <_sbrk+0x5c>)
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <_sbrk+0x60>)
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb4:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <_sbrk+0x64>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <_sbrk+0x68>)
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d207      	bcs.n	8002be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd0:	f016 feac 	bl	801992c <__errno>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e009      	b.n	8002bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be6:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	4a05      	ldr	r2, [pc, #20]	@ (8002c04 <_sbrk+0x64>)
 8002bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20020000 	.word	0x20020000
 8002c00:	00000400 	.word	0x00000400
 8002c04:	200046b4 	.word	0x200046b4
 8002c08:	20014858 	.word	0x20014858

08002c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <SystemInit+0x20>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <SystemInit+0x20>)
 8002c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b092      	sub	sp, #72	@ 0x48
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
 8002c50:	615a      	str	r2, [r3, #20]
 8002c52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2220      	movs	r2, #32
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f016 fdbc 	bl	80197d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c60:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c62:	4a3a      	ldr	r2, [pc, #232]	@ (8002d4c <MX_TIM1_Init+0x11c>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8002c66:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c68:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002c6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b36      	ldr	r3, [pc, #216]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002c74:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c76:	2263      	movs	r2, #99	@ 0x63
 8002c78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7a:	4b33      	ldr	r3, [pc, #204]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c80:	4b31      	ldr	r3, [pc, #196]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c8c:	482e      	ldr	r0, [pc, #184]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002c8e:	f002 fef1 	bl	8005a74 <HAL_TIM_PWM_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002c98:	f7ff fdd8 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ca4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4827      	ldr	r0, [pc, #156]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002cac:	f003 feec 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002cb6:	f7ff fdc9 	bl	800284c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cba:	2360      	movs	r3, #96	@ 0x60
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	481a      	ldr	r0, [pc, #104]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002ce0:	f003 fa04 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002cea:	f7ff fdaf 	bl	800284c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4814      	ldr	r0, [pc, #80]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002cf8:	f003 f9f8 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002d02:	f7ff fda3 	bl	800284c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4807      	ldr	r0, [pc, #28]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002d2a:	f003 ff29 	bl	8006b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002d34:	f7ff fd8a 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d38:	4803      	ldr	r0, [pc, #12]	@ (8002d48 <MX_TIM1_Init+0x118>)
 8002d3a:	f000 f9c5 	bl	80030c8 <HAL_TIM_MspPostInit>

}
 8002d3e:	bf00      	nop
 8002d40:	3748      	adds	r7, #72	@ 0x48
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200046b8 	.word	0x200046b8
 8002d4c:	40010000 	.word	0x40010000

08002d50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	463b      	mov	r3, r7
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d76:	f240 628f 	movw	r2, #1679	@ 0x68f
 8002d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d90:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d96:	4814      	ldr	r0, [pc, #80]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002d98:	f002 fdac 	bl	80058f4 <HAL_TIM_Base_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002da2:	f7ff fd53 	bl	800284c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	4619      	mov	r1, r3
 8002db2:	480d      	ldr	r0, [pc, #52]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002db4:	f003 fa5c 	bl	8006270 <HAL_TIM_ConfigClockSource>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002dbe:	f7ff fd45 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4806      	ldr	r0, [pc, #24]	@ (8002de8 <MX_TIM2_Init+0x98>)
 8002dd0:	f003 fe5a 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002dda:	f7ff fd37 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20004700 	.word	0x20004700

08002dec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	@ 0x30
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	2224      	movs	r2, #36	@ 0x24
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f016 fcec 	bl	80197d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e08:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e0a:	4a21      	ldr	r2, [pc, #132]	@ (8002e90 <MX_TIM3_Init+0xa4>)
 8002e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e28:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e36:	2301      	movs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e46:	2301      	movs	r3, #1
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	480c      	ldr	r0, [pc, #48]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e5a:	f002 ff23 	bl	8005ca4 <HAL_TIM_Encoder_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e64:	f7ff fcf2 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <MX_TIM3_Init+0xa0>)
 8002e76:	f003 fe07 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e80:	f7ff fce4 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e84:	bf00      	nop
 8002e86:	3730      	adds	r7, #48	@ 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20004748 	.word	0x20004748
 8002e90:	40000400 	.word	0x40000400

08002e94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	@ 0x30
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	2224      	movs	r2, #36	@ 0x24
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f016 fc98 	bl	80197d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eb0:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002eb2:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <MX_TIM4_Init+0xa4>)
 8002eb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ec8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eca:	4b1a      	ldr	r3, [pc, #104]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed0:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002efa:	f107 030c 	add.w	r3, r7, #12
 8002efe:	4619      	mov	r1, r3
 8002f00:	480c      	ldr	r0, [pc, #48]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002f02:	f002 fecf 	bl	8005ca4 <HAL_TIM_Encoder_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f0c:	f7ff fc9e 	bl	800284c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <MX_TIM4_Init+0xa0>)
 8002f1e:	f003 fdb3 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002f28:	f7ff fc90 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f2c:	bf00      	nop
 8002f2e:	3730      	adds	r7, #48	@ 0x30
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20004790 	.word	0x20004790
 8002f38:	40000800 	.word	0x40000800

08002f3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0b      	ldr	r2, [pc, #44]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10d      	bne.n	8002f6a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <HAL_TIM_PWM_MspInit+0x40>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_TIM_PWM_MspInit+0x40>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <HAL_TIM_PWM_MspInit+0x40>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f90:	d115      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <HAL_TIM_Base_MspInit+0x48>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc8 <HAL_TIM_Base_MspInit+0x48>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_TIM_Base_MspInit+0x48>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	201c      	movs	r0, #28
 8002fb4:	f001 f8ae 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fb8:	201c      	movs	r0, #28
 8002fba:	f001 f8c7 	bl	800414c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a32      	ldr	r2, [pc, #200]	@ (80030b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d12c      	bne.n	8003048 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4a30      	ldr	r2, [pc, #192]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b2a      	ldr	r3, [pc, #168]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a29      	ldr	r2, [pc, #164]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003026:	23c0      	movs	r3, #192	@ 0xc0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003036:	2302      	movs	r3, #2
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	481e      	ldr	r0, [pc, #120]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xf0>)
 8003042:	f001 fc93 	bl	800496c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003046:	e031      	b.n	80030ac <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1c      	ldr	r2, [pc, #112]	@ (80030c0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12c      	bne.n	80030ac <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6413      	str	r3, [r2, #64]	@ 0x40
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a10      	ldr	r2, [pc, #64]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800308a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800308e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	2302      	movs	r3, #2
 8003092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003098:	2300      	movs	r3, #0
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800309c:	2302      	movs	r3, #2
 800309e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	4619      	mov	r1, r3
 80030a6:	4807      	ldr	r0, [pc, #28]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80030a8:	f001 fc60 	bl	800496c <HAL_GPIO_Init>
}
 80030ac:	bf00      	nop
 80030ae:	3730      	adds	r7, #48	@ 0x30
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40020c00 	.word	0x40020c00

080030c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a22      	ldr	r2, [pc, #136]	@ (8003170 <HAL_TIM_MspPostInit+0xa8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d13d      	bne.n	8003166 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <HAL_TIM_MspPostInit+0xac>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <HAL_TIM_MspPostInit+0xac>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_TIM_MspPostInit+0xac>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_TIM_MspPostInit+0xac>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_TIM_MspPostInit+0xac>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b17      	ldr	r3, [pc, #92]	@ (8003174 <HAL_TIM_MspPostInit+0xac>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003134:	2301      	movs	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4619      	mov	r1, r3
 800313e:	480e      	ldr	r0, [pc, #56]	@ (8003178 <HAL_TIM_MspPostInit+0xb0>)
 8003140:	f001 fc14 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003156:	2301      	movs	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4806      	ldr	r0, [pc, #24]	@ (800317c <HAL_TIM_MspPostInit+0xb4>)
 8003162:	f001 fc03 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	@ 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000
 8003174:	40023800 	.word	0x40023800
 8003178:	40021000 	.word	0x40021000
 800317c:	40020000 	.word	0x40020000

08003180 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003184:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 8003186:	4a12      	ldr	r2, [pc, #72]	@ (80031d0 <MX_USART1_UART_Init+0x50>)
 8003188:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 800318c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003190:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003192:	4b0e      	ldr	r3, [pc, #56]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800319e:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 80031a6:	220c      	movs	r2, #12
 80031a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031aa:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031b6:	4805      	ldr	r0, [pc, #20]	@ (80031cc <MX_USART1_UART_Init+0x4c>)
 80031b8:	f003 fd48 	bl	8006c4c <HAL_UART_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031c2:	f7ff fb43 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200047d8 	.word	0x200047d8
 80031d0:	40011000 	.word	0x40011000

080031d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <MX_USART2_UART_Init+0x50>)
 80031dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 80031e0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80031e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f8:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 80031fa:	220c      	movs	r2, #12
 80031fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800320a:	4805      	ldr	r0, [pc, #20]	@ (8003220 <MX_USART2_UART_Init+0x4c>)
 800320c:	f003 fd1e 	bl	8006c4c <HAL_UART_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003216:	f7ff fb19 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20004820 	.word	0x20004820
 8003224:	40004400 	.word	0x40004400

08003228 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 800322e:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <MX_USART3_UART_Init+0x50>)
 8003230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 8003234:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800323a:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800324c:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 800324e:	220c      	movs	r2, #12
 8003250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003252:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003258:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800325e:	4805      	ldr	r0, [pc, #20]	@ (8003274 <MX_USART3_UART_Init+0x4c>)
 8003260:	f003 fcf4 	bl	8006c4c <HAL_UART_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800326a:	f7ff faef 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20004868 	.word	0x20004868
 8003278:	40004800 	.word	0x40004800

0800327c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <MX_USART6_UART_Init+0x50>)
 8003284:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 8003288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800328c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800328e:	4b0e      	ldr	r3, [pc, #56]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003294:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 80032a2:	220c      	movs	r2, #12
 80032a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032b2:	4805      	ldr	r0, [pc, #20]	@ (80032c8 <MX_USART6_UART_Init+0x4c>)
 80032b4:	f003 fcca 	bl	8006c4c <HAL_UART_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80032be:	f7ff fac5 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200048b0 	.word	0x200048b0
 80032cc:	40011400 	.word	0x40011400

080032d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b090      	sub	sp, #64	@ 0x40
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4aa5      	ldr	r2, [pc, #660]	@ (8003584 <HAL_UART_MspInit+0x2b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d135      	bne.n	800335e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f6:	4ba4      	ldr	r3, [pc, #656]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	4aa3      	ldr	r2, [pc, #652]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80032fc:	f043 0310 	orr.w	r3, r3, #16
 8003300:	6453      	str	r3, [r2, #68]	@ 0x44
 8003302:	4ba1      	ldr	r3, [pc, #644]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
 8003312:	4b9d      	ldr	r3, [pc, #628]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a9c      	ldr	r2, [pc, #624]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b9a      	ldr	r3, [pc, #616]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800332a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800332e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2303      	movs	r3, #3
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800333c:	2307      	movs	r3, #7
 800333e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003344:	4619      	mov	r1, r3
 8003346:	4891      	ldr	r0, [pc, #580]	@ (800358c <HAL_UART_MspInit+0x2bc>)
 8003348:	f001 fb10 	bl	800496c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800334c:	2200      	movs	r2, #0
 800334e:	2105      	movs	r1, #5
 8003350:	2025      	movs	r0, #37	@ 0x25
 8003352:	f000 fedf 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003356:	2025      	movs	r0, #37	@ 0x25
 8003358:	f000 fef8 	bl	800414c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800335c:	e10d      	b.n	800357a <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8b      	ldr	r2, [pc, #556]	@ (8003590 <HAL_UART_MspInit+0x2c0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	f040 8094 	bne.w	8003492 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
 800336e:	4b86      	ldr	r3, [pc, #536]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	4a85      	ldr	r2, [pc, #532]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	6413      	str	r3, [r2, #64]	@ 0x40
 800337a:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a7e      	ldr	r2, [pc, #504]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b7c      	ldr	r3, [pc, #496]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033a2:	230c      	movs	r3, #12
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033b2:	2307      	movs	r3, #7
 80033b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033ba:	4619      	mov	r1, r3
 80033bc:	4873      	ldr	r0, [pc, #460]	@ (800358c <HAL_UART_MspInit+0x2bc>)
 80033be:	f001 fad5 	bl	800496c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80033c2:	4b74      	ldr	r3, [pc, #464]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033c4:	4a74      	ldr	r2, [pc, #464]	@ (8003598 <HAL_UART_MspInit+0x2c8>)
 80033c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80033c8:	4b72      	ldr	r3, [pc, #456]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033d0:	4b70      	ldr	r3, [pc, #448]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80033f0:	4b68      	ldr	r3, [pc, #416]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 80033fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003400:	4b64      	ldr	r3, [pc, #400]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 8003402:	2200      	movs	r2, #0
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003406:	4863      	ldr	r0, [pc, #396]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 8003408:	f000 feae 	bl	8004168 <HAL_DMA_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8003412:	f7ff fa1b 	bl	800284c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a5e      	ldr	r2, [pc, #376]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 800341a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800341c:	4a5d      	ldr	r2, [pc, #372]	@ (8003594 <HAL_UART_MspInit+0x2c4>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003422:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003424:	4a5e      	ldr	r2, [pc, #376]	@ (80035a0 <HAL_UART_MspInit+0x2d0>)
 8003426:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003428:	4b5c      	ldr	r3, [pc, #368]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 800342a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800342e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003430:	4b5a      	ldr	r3, [pc, #360]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003436:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	4b57      	ldr	r3, [pc, #348]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 800343e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003442:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003444:	4b55      	ldr	r3, [pc, #340]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003446:	2200      	movs	r2, #0
 8003448:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344a:	4b54      	ldr	r3, [pc, #336]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003450:	4b52      	ldr	r3, [pc, #328]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003456:	4b51      	ldr	r3, [pc, #324]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003458:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800345c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800345e:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003460:	2200      	movs	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003464:	484d      	ldr	r0, [pc, #308]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003466:	f000 fe7f 	bl	8004168 <HAL_DMA_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8003470:	f7ff f9ec 	bl	800284c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a49      	ldr	r2, [pc, #292]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
 800347a:	4a48      	ldr	r2, [pc, #288]	@ (800359c <HAL_UART_MspInit+0x2cc>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003480:	2200      	movs	r2, #0
 8003482:	2105      	movs	r1, #5
 8003484:	2026      	movs	r0, #38	@ 0x26
 8003486:	f000 fe45 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800348a:	2026      	movs	r0, #38	@ 0x26
 800348c:	f000 fe5e 	bl	800414c <HAL_NVIC_EnableIRQ>
}
 8003490:	e073      	b.n	800357a <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a43      	ldr	r2, [pc, #268]	@ (80035a4 <HAL_UART_MspInit+0x2d4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d135      	bne.n	8003508 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART3_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	4b39      	ldr	r3, [pc, #228]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	4a38      	ldr	r2, [pc, #224]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80034a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	4a31      	ldr	r2, [pc, #196]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80034c2:	f043 0302 	orr.w	r3, r3, #2
 80034c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034e6:	2307      	movs	r3, #7
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034ee:	4619      	mov	r1, r3
 80034f0:	482d      	ldr	r0, [pc, #180]	@ (80035a8 <HAL_UART_MspInit+0x2d8>)
 80034f2:	f001 fa3b 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2105      	movs	r1, #5
 80034fa:	2027      	movs	r0, #39	@ 0x27
 80034fc:	f000 fe0a 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003500:	2027      	movs	r0, #39	@ 0x27
 8003502:	f000 fe23 	bl	800414c <HAL_NVIC_EnableIRQ>
}
 8003506:	e038      	b.n	800357a <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART6)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a27      	ldr	r2, [pc, #156]	@ (80035ac <HAL_UART_MspInit+0x2dc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d133      	bne.n	800357a <HAL_UART_MspInit+0x2aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 800351c:	f043 0320 	orr.w	r3, r3, #32
 8003520:	6453      	str	r3, [r2, #68]	@ 0x44
 8003522:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	6313      	str	r3, [r2, #48]	@ 0x30
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_UART_MspInit+0x2b8>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800354a:	23c0      	movs	r3, #192	@ 0xc0
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003556:	2303      	movs	r3, #3
 8003558:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800355a:	2308      	movs	r3, #8
 800355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003562:	4619      	mov	r1, r3
 8003564:	4812      	ldr	r0, [pc, #72]	@ (80035b0 <HAL_UART_MspInit+0x2e0>)
 8003566:	f001 fa01 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2105      	movs	r1, #5
 800356e:	2047      	movs	r0, #71	@ 0x47
 8003570:	f000 fdd0 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003574:	2047      	movs	r0, #71	@ 0x47
 8003576:	f000 fde9 	bl	800414c <HAL_NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3740      	adds	r7, #64	@ 0x40
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40011000 	.word	0x40011000
 8003588:	40023800 	.word	0x40023800
 800358c:	40020000 	.word	0x40020000
 8003590:	40004400 	.word	0x40004400
 8003594:	200048f8 	.word	0x200048f8
 8003598:	40026088 	.word	0x40026088
 800359c:	20004958 	.word	0x20004958
 80035a0:	400260a0 	.word	0x400260a0
 80035a4:	40004800 	.word	0x40004800
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40011400 	.word	0x40011400
 80035b0:	40020800 	.word	0x40020800

080035b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack     /* set stack pointer */
 80035b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035b8:	f7ff fb28 	bl	8002c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035bc:	480c      	ldr	r0, [pc, #48]	@ (80035f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035be:	490d      	ldr	r1, [pc, #52]	@ (80035f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c4:	e002      	b.n	80035cc <LoopCopyDataInit>

080035c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ca:	3304      	adds	r3, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d0:	d3f9      	bcc.n	80035c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d2:	4a0a      	ldr	r2, [pc, #40]	@ (80035fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d8:	e001      	b.n	80035de <LoopFillZerobss>

080035da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035dc:	3204      	adds	r2, #4

080035de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e0:	d3fb      	bcc.n	80035da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e2:	f016 f9a9 	bl	8019938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035e6:	f7fe ffb9 	bl	800255c <main>
  bx  lr    
 80035ea:	4770      	bx	lr
	  ldr   sp, =_estack     /* set stack pointer */
 80035ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f4:	20000c28 	.word	0x20000c28
  ldr r2, =_sidata
 80035f8:	0801d080 	.word	0x0801d080
  ldr r2, =_sbss
 80035fc:	20000c28 	.word	0x20000c28
  ldr r4, =_ebss
 8003600:	20014854 	.word	0x20014854

08003604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003604:	e7fe      	b.n	8003604 <ADC_IRQHandler>
	...

08003608 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	@ 0x28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003614:	f006 f880 	bl	8009718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003618:	4b5a      	ldr	r3, [pc, #360]	@ (8003784 <pvPortMallocMicroROS+0x17c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8003620:	f000 f986 	bl	8003930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003624:	4b58      	ldr	r3, [pc, #352]	@ (8003788 <pvPortMallocMicroROS+0x180>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 8090 	bne.w	8003752 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01e      	beq.n	8003676 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003638:	2208      	movs	r2, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f023 0307 	bic.w	r3, r3, #7
 8003650:	3308      	adds	r3, #8
 8003652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d06a      	beq.n	8003752 <pvPortMallocMicroROS+0x14a>
 800367c:	4b43      	ldr	r3, [pc, #268]	@ (800378c <pvPortMallocMicroROS+0x184>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d865      	bhi.n	8003752 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003686:	4b42      	ldr	r3, [pc, #264]	@ (8003790 <pvPortMallocMicroROS+0x188>)
 8003688:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800368a:	4b41      	ldr	r3, [pc, #260]	@ (8003790 <pvPortMallocMicroROS+0x188>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003690:	e004      	b.n	800369c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d903      	bls.n	80036ae <pvPortMallocMicroROS+0xa6>
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f1      	bne.n	8003692 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036ae:	4b35      	ldr	r3, [pc, #212]	@ (8003784 <pvPortMallocMicroROS+0x17c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d04c      	beq.n	8003752 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2208      	movs	r2, #8
 80036be:	4413      	add	r3, r2
 80036c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad2      	subs	r2, r2, r3
 80036d2:	2308      	movs	r3, #8
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d920      	bls.n	800371c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	613b      	str	r3, [r7, #16]
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad2      	subs	r2, r2, r3
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003716:	69b8      	ldr	r0, [r7, #24]
 8003718:	f000 f96c 	bl	80039f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800371c:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <pvPortMallocMicroROS+0x184>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	4a19      	ldr	r2, [pc, #100]	@ (800378c <pvPortMallocMicroROS+0x184>)
 8003728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800372a:	4b18      	ldr	r3, [pc, #96]	@ (800378c <pvPortMallocMicroROS+0x184>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <pvPortMallocMicroROS+0x18c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d203      	bcs.n	800373e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003736:	4b15      	ldr	r3, [pc, #84]	@ (800378c <pvPortMallocMicroROS+0x184>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <pvPortMallocMicroROS+0x18c>)
 800373c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <pvPortMallocMicroROS+0x180>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	431a      	orrs	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003752:	f005 ffef 	bl	8009734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60fb      	str	r3, [r7, #12]
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8003778:	69fb      	ldr	r3, [r7, #28]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3728      	adds	r7, #40	@ 0x28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200097e0 	.word	0x200097e0
 8003788:	200097ec 	.word	0x200097ec
 800378c:	200097e4 	.word	0x200097e4
 8003790:	200097d8 	.word	0x200097d8
 8003794:	200097e8 	.word	0x200097e8

08003798 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d04a      	beq.n	8003840 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037aa:	2308      	movs	r3, #8
 80037ac:	425b      	negs	r3, r3
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <vPortFreeMicroROS+0xb0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <vPortFreeMicroROS+0x46>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	60fb      	str	r3, [r7, #12]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <vPortFreeMicroROS+0x66>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	60bb      	str	r3, [r7, #8]
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	e7fd      	b.n	80037fa <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <vPortFreeMicroROS+0xb0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d019      	beq.n	8003840 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <vPortFreeMicroROS+0xb0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003824:	f005 ff78 	bl	8009718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4b07      	ldr	r3, [pc, #28]	@ (800384c <vPortFreeMicroROS+0xb4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4413      	add	r3, r2
 8003832:	4a06      	ldr	r2, [pc, #24]	@ (800384c <vPortFreeMicroROS+0xb4>)
 8003834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003836:	6938      	ldr	r0, [r7, #16]
 8003838:	f000 f8dc 	bl	80039f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800383c:	f005 ff7a 	bl	8009734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	200097ec 	.word	0x200097ec
 800384c:	200097e4 	.word	0x200097e4

08003850 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800385c:	2308      	movs	r3, #8
 800385e:	425b      	negs	r3, r3
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <getBlockSize+0x38>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	43db      	mvns	r3, r3
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

	return count;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	200097ec 	.word	0x200097ec

0800388c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8003896:	f005 ff3f 	bl	8009718 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800389a:	6838      	ldr	r0, [r7, #0]
 800389c:	f7ff feb4 	bl	8003608 <pvPortMallocMicroROS>
 80038a0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <pvPortReallocMicroROS+0x4c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ffce 	bl	8003850 <getBlockSize>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2208      	movs	r2, #8
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d201      	bcs.n	80038c8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	68b8      	ldr	r0, [r7, #8]
 80038ce:	f016 f862 	bl	8019996 <memcpy>

		vPortFreeMicroROS(pv);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff60 	bl	8003798 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80038d8:	f005 ff2c 	bl	8009734 <xTaskResumeAll>

	return newmem;
 80038dc:	68bb      	ldr	r3, [r7, #8]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80038f0:	f005 ff12 	bl	8009718 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff fe82 	bl	8003608 <pvPortMallocMicroROS>
 8003904:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	613b      	str	r3, [r7, #16]

  	while(count--)
 800390a:	e004      	b.n	8003916 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	613a      	str	r2, [r7, #16]
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	1e5a      	subs	r2, r3, #1
 800391a:	617a      	str	r2, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f5      	bne.n	800390c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8003920:	f005 ff08 	bl	8009734 <xTaskResumeAll>
  	return mem;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003936:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800393a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <prvHeapInit+0xac>)
 800393e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3307      	adds	r3, #7
 800394e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0307 	bic.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <prvHeapInit+0xac>)
 8003960:	4413      	add	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <prvHeapInit+0xb0>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800396e:	4b1c      	ldr	r3, [pc, #112]	@ (80039e0 <prvHeapInit+0xb0>)
 8003970:	2200      	movs	r2, #0
 8003972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4413      	add	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800397c:	2208      	movs	r2, #8
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0307 	bic.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a15      	ldr	r2, [pc, #84]	@ (80039e4 <prvHeapInit+0xb4>)
 8003990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003992:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <prvHeapInit+0xb4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800399a:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <prvHeapInit+0xb4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039b0:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <prvHeapInit+0xb4>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <prvHeapInit+0xb8>)
 80039be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a09      	ldr	r2, [pc, #36]	@ (80039ec <prvHeapInit+0xbc>)
 80039c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039c8:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <prvHeapInit+0xc0>)
 80039ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	200049b8 	.word	0x200049b8
 80039e0:	200097d8 	.word	0x200097d8
 80039e4:	200097e0 	.word	0x200097e0
 80039e8:	200097e8 	.word	0x200097e8
 80039ec:	200097e4 	.word	0x200097e4
 80039f0:	200097ec 	.word	0x200097ec

080039f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039fc:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <prvInsertBlockIntoFreeList+0xac>)
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e002      	b.n	8003a08 <prvInsertBlockIntoFreeList+0x14>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d8f7      	bhi.n	8003a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d108      	bne.n	8003a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	441a      	add	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d118      	bne.n	8003a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d00d      	beq.n	8003a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e008      	b.n	8003a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e003      	b.n	8003a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d002      	beq.n	8003a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	200097d8 	.word	0x200097d8
 8003aa4:	200097e0 	.word	0x200097e0

08003aa8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <microros_allocate+0x3c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <microros_allocate+0x3c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <microros_allocate+0x40>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <microros_allocate+0x40>)
 8003ad0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fd98 	bl	8003608 <pvPortMallocMicroROS>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200097f0 	.word	0x200097f0
 8003ae8:	200097f4 	.word	0x200097f4

08003aec <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fea7 	bl	8003850 <getBlockSize>
 8003b02:	4603      	mov	r3, r0
 8003b04:	4a06      	ldr	r2, [pc, #24]	@ (8003b20 <microros_deallocate+0x34>)
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <microros_deallocate+0x34>)
 8003b0e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fe41 	bl	8003798 <vPortFreeMicroROS>
  }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200097f4 	.word	0x200097f4

08003b24 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003b30:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <microros_reallocate+0x64>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4413      	add	r3, r2
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <microros_reallocate+0x64>)
 8003b3e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003b40:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <microros_reallocate+0x68>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4413      	add	r3, r2
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <microros_reallocate+0x68>)
 8003b4e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8003b56:	68b8      	ldr	r0, [r7, #8]
 8003b58:	f7ff fd56 	bl	8003608 <pvPortMallocMicroROS>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	e00e      	b.n	8003b7e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fe75 	bl	8003850 <getBlockSize>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <microros_reallocate+0x68>)
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <microros_reallocate+0x68>)
 8003b72:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff fe88 	bl	800388c <pvPortReallocMicroROS>
 8003b7c:	4603      	mov	r3, r0
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200097f0 	.word	0x200097f0
 8003b8c:	200097f4 	.word	0x200097f4

08003b90 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd8 <microros_zero_allocate+0x48>)
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <microros_zero_allocate+0x48>)
 8003bae:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <microros_zero_allocate+0x4c>)
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <microros_zero_allocate+0x4c>)
 8003bc2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff fe8d 	bl	80038e6 <pvPortCallocMicroROS>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200097f0 	.word	0x200097f0
 8003bdc:	200097f4 	.word	0x200097f4

08003be0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bf6:	a320      	add	r3, pc, #128	@ (adr r3, 8003c78 <UTILS_NanosecondsToTimespec+0x98>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fd f834 	bl	8000c68 <__aeabi_ldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003c78 <UTILS_NanosecondsToTimespec+0x98>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fd f828 	bl	8000c68 <__aeabi_ldivmod>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da20      	bge.n	8003c66 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a11      	ldr	r2, [pc, #68]	@ (8003c70 <UTILS_NanosecondsToTimespec+0x90>)
 8003c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003c2e:	1712      	asrs	r2, r2, #28
 8003c30:	17db      	asrs	r3, r3, #31
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	17c8      	asrs	r0, r1, #31
 8003c42:	460c      	mov	r4, r1
 8003c44:	4605      	mov	r5, r0
 8003c46:	ebb2 0804 	subs.w	r8, r2, r4
 8003c4a:	eb63 0905 	sbc.w	r9, r3, r5
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4906      	ldr	r1, [pc, #24]	@ (8003c74 <UTILS_NanosecondsToTimespec+0x94>)
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]
    }
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c70:	44b82fa1 	.word	0x44b82fa1
 8003c74:	3b9aca00 	.word	0x3b9aca00
 8003c78:	3b9aca00 	.word	0x3b9aca00
 8003c7c:	00000000 	.word	0x00000000

08003c80 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b08e      	sub	sp, #56	@ 0x38
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c8a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003c8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003c90:	2300      	movs	r3, #0
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f005 ffc0 	bl	8009c2c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	17da      	asrs	r2, r3, #31
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	61fa      	str	r2, [r7, #28]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	000b      	movs	r3, r1
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	461c      	mov	r4, r3
 8003ccc:	4615      	mov	r5, r2
 8003cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003cd2:	1911      	adds	r1, r2, r4
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	416b      	adcs	r3, r5
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003cde:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003ce2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	f04f 0500 	mov.w	r5, #0
 8003cf2:	015d      	lsls	r5, r3, #5
 8003cf4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003cf8:	0154      	lsls	r4, r2, #5
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	ebb2 0800 	subs.w	r8, r2, r0
 8003d02:	eb63 0901 	sbc.w	r9, r3, r1
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003d12:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003d16:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003d1a:	4690      	mov	r8, r2
 8003d1c:	4699      	mov	r9, r3
 8003d1e:	eb18 0a00 	adds.w	sl, r8, r0
 8003d22:	eb49 0b01 	adc.w	fp, r9, r1
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d3a:	ebb2 040a 	subs.w	r4, r2, sl
 8003d3e:	603c      	str	r4, [r7, #0]
 8003d40:	eb63 030b 	sbc.w	r3, r3, fp
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	181b      	adds	r3, r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	462b      	mov	r3, r5
 8003d52:	eb41 0303 	adc.w	r3, r1, r3
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d5e:	f7ff ff3f 	bl	8003be0 <UTILS_NanosecondsToTimespec>

    return 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	3738      	adds	r7, #56	@ 0x38
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d70 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003d7e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8003d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d84:	4904      	ldr	r1, [pc, #16]	@ (8003d98 <cubemx_transport_open+0x28>)
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f003 f8d0 	bl	8006f2c <HAL_UART_Receive_DMA>
    return true;
 8003d8c:	2301      	movs	r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200097f8 	.word	0x200097f8

08003d9c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003daa:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f003 f8e2 	bl	8006f76 <HAL_UART_DMAStop>
    return true;
 8003db2:	2301      	movs	r3, #1
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003dd0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d11c      	bne.n	8003e18 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f003 f830 	bl	8006e4c <HAL_UART_Transmit_DMA>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003df0:	e002      	b.n	8003df8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8003df2:	2001      	movs	r0, #1
 8003df4:	f004 fbda 	bl	80085ac <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <cubemx_transport_write+0x4e>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d1f3      	bne.n	8003df2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <cubemx_transport_write+0x58>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	e002      	b.n	8003e1a <cubemx_transport_write+0x5e>
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8003e18:	2300      	movs	r3, #0
    }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003e38:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e3e:	b672      	cpsid	i
}
 8003e40:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec0 <cubemx_transport_read+0x9c>)
 8003e50:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e52:	b662      	cpsie	i
}
 8003e54:	bf00      	nop
        __enable_irq();
        ms_used++;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f004 fba5 	bl	80085ac <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8003e62:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <cubemx_transport_read+0xa0>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <cubemx_transport_read+0x9c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d103      	bne.n	8003e76 <cubemx_transport_read+0x52>
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	dbe3      	blt.n	8003e3e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003e7a:	e011      	b.n	8003ea0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <cubemx_transport_read+0xa0>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	440b      	add	r3, r1
 8003e86:	4910      	ldr	r1, [pc, #64]	@ (8003ec8 <cubemx_transport_read+0xa4>)
 8003e88:	5c8a      	ldrb	r2, [r1, r2]
 8003e8a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <cubemx_transport_read+0xa0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e96:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec4 <cubemx_transport_read+0xa0>)
 8003e98:	6013      	str	r3, [r2, #0]
        wrote++;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003ea0:	4b08      	ldr	r3, [pc, #32]	@ (8003ec4 <cubemx_transport_read+0xa0>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <cubemx_transport_read+0x9c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d003      	beq.n	8003eb4 <cubemx_transport_read+0x90>
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3e3      	bcc.n	8003e7c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20009ffc 	.word	0x20009ffc
 8003ec4:	20009ff8 	.word	0x20009ff8
 8003ec8:	200097f8 	.word	0x200097f8

08003ecc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8003f10 <HAL_UART_RxCpltCallback+0x44>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d106      	bne.n	8003eea <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_DMA(&huart2, dma_buffer, UART_DMA_BUFFER_SIZE);
 8003edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ee0:	490c      	ldr	r1, [pc, #48]	@ (8003f14 <HAL_UART_RxCpltCallback+0x48>)
 8003ee2:	480b      	ldr	r0, [pc, #44]	@ (8003f10 <HAL_UART_RxCpltCallback+0x44>)
 8003ee4:	f003 f822 	bl	8006f2c <HAL_UART_Receive_DMA>
//	else if(huart==&huart6)
//	{
//		CopeSerialData_arm(rx_buff_arm);
//		HAL_UART_Receive_IT(&huart6,&rx_buff_arm,1);
//	}
}
 8003ee8:	e00d      	b.n	8003f06 <HAL_UART_RxCpltCallback+0x3a>
	else if(huart==&huart3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <HAL_UART_RxCpltCallback+0x4c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d109      	bne.n	8003f06 <HAL_UART_RxCpltCallback+0x3a>
		CopeSerial2Data(rx_buff1);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <HAL_UART_RxCpltCallback+0x50>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd f87e 	bl	8000ff8 <CopeSerial2Data>
		HAL_UART_Receive_IT(&huart3,&rx_buff1,1);
 8003efc:	2201      	movs	r2, #1
 8003efe:	4907      	ldr	r1, [pc, #28]	@ (8003f1c <HAL_UART_RxCpltCallback+0x50>)
 8003f00:	4805      	ldr	r0, [pc, #20]	@ (8003f18 <HAL_UART_RxCpltCallback+0x4c>)
 8003f02:	f002 ff7e 	bl	8006e02 <HAL_UART_Receive_IT>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20004820 	.word	0x20004820
 8003f14:	200097f8 	.word	0x200097f8
 8003f18:	20004868 	.word	0x20004868
 8003f1c:	20000c44 	.word	0x20000c44

08003f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_Init+0x40>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0d      	ldr	r2, [pc, #52]	@ (8003f60 <HAL_Init+0x40>)
 8003f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_Init+0x40>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0a      	ldr	r2, [pc, #40]	@ (8003f60 <HAL_Init+0x40>)
 8003f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f3c:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <HAL_Init+0x40>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a07      	ldr	r2, [pc, #28]	@ (8003f60 <HAL_Init+0x40>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f48:	2003      	movs	r0, #3
 8003f4a:	f000 f8d8 	bl	80040fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f4e:	200f      	movs	r0, #15
 8003f50:	f7fe fcae 	bl	80028b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f54:	f7fe fc80 	bl	8002858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023c00 	.word	0x40023c00

08003f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_IncTick+0x20>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_IncTick+0x24>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	4a04      	ldr	r2, [pc, #16]	@ (8003f88 <HAL_IncTick+0x24>)
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	2000090c 	.word	0x2000090c
 8003f88:	2000a000 	.word	0x2000a000

08003f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f90:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <HAL_GetTick+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	2000a000 	.word	0x2000a000

08003fa4 <__NVIC_SetPriorityGrouping>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd6:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	60d3      	str	r3, [r2, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <__NVIC_GetPriorityGrouping>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff0:	4b04      	ldr	r3, [pc, #16]	@ (8004004 <__NVIC_GetPriorityGrouping+0x18>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 0307 	and.w	r3, r3, #7
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_EnableIRQ>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	2b00      	cmp	r3, #0
 8004018:	db0b      	blt.n	8004032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	f003 021f 	and.w	r2, r3, #31
 8004020:	4907      	ldr	r1, [pc, #28]	@ (8004040 <__NVIC_EnableIRQ+0x38>)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2001      	movs	r0, #1
 800402a:	fa00 f202 	lsl.w	r2, r0, r2
 800402e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000e100 	.word	0xe000e100

08004044 <__NVIC_SetPriority>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	6039      	str	r1, [r7, #0]
 800404e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db0a      	blt.n	800406e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	490c      	ldr	r1, [pc, #48]	@ (8004090 <__NVIC_SetPriority+0x4c>)
 800405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004062:	0112      	lsls	r2, r2, #4
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	440b      	add	r3, r1
 8004068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800406c:	e00a      	b.n	8004084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4908      	ldr	r1, [pc, #32]	@ (8004094 <__NVIC_SetPriority+0x50>)
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	3b04      	subs	r3, #4
 800407c:	0112      	lsls	r2, r2, #4
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	440b      	add	r3, r1
 8004082:	761a      	strb	r2, [r3, #24]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	e000e100 	.word	0xe000e100
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <NVIC_EncodePriority>:
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	@ 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f1c3 0307 	rsb	r3, r3, #7
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf28      	it	cs
 80040b6:	2304      	movcs	r3, #4
 80040b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3304      	adds	r3, #4
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d902      	bls.n	80040c8 <NVIC_EncodePriority+0x30>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3b03      	subs	r3, #3
 80040c6:	e000      	b.n	80040ca <NVIC_EncodePriority+0x32>
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	401a      	ands	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e0:	f04f 31ff 	mov.w	r1, #4294967295
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	43d9      	mvns	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	4313      	orrs	r3, r2
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3724      	adds	r7, #36	@ 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff4c 	bl	8003fa4 <__NVIC_SetPriorityGrouping>
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004126:	f7ff ff61 	bl	8003fec <__NVIC_GetPriorityGrouping>
 800412a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	6978      	ldr	r0, [r7, #20]
 8004132:	f7ff ffb1 	bl	8004098 <NVIC_EncodePriority>
 8004136:	4602      	mov	r2, r0
 8004138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff80 	bl	8004044 <__NVIC_SetPriority>
}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff54 	bl	8004008 <__NVIC_EnableIRQ>
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff ff0a 	bl	8003f8c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e099      	b.n	80042b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a4:	e00f      	b.n	80041c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a6:	f7ff fef1 	bl	8003f8c <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d908      	bls.n	80041c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e078      	b.n	80042b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e8      	bne.n	80041a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <HAL_DMA_Init+0x158>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	2b04      	cmp	r3, #4
 800421e:	d107      	bne.n	8004230 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	4313      	orrs	r3, r2
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0307 	bic.w	r3, r3, #7
 8004246:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	2b04      	cmp	r3, #4
 8004258:	d117      	bne.n	800428a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb01 	bl	8004874 <DMA_CheckFifoParam>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2240      	movs	r2, #64	@ 0x40
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004286:	2301      	movs	r3, #1
 8004288:	e016      	b.n	80042b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fab8 	bl	8004808 <DMA_CalcBaseAndBitshift>
 8004298:	4603      	mov	r3, r0
 800429a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	223f      	movs	r2, #63	@ 0x3f
 80042a2:	409a      	lsls	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	f010803f 	.word	0xf010803f

080042c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_DMA_Start_IT+0x26>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e040      	b.n	800436c <HAL_DMA_Start_IT+0xa8>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d12f      	bne.n	800435e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa4a 	bl	80047ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	223f      	movs	r2, #63	@ 0x3f
 800431e:	409a      	lsls	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0216 	orr.w	r2, r2, #22
 8004332:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0208 	orr.w	r2, r2, #8
 800434a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e005      	b.n	800436a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004382:	f7ff fe03 	bl	8003f8c <HAL_GetTick>
 8004386:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d008      	beq.n	80043a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2280      	movs	r2, #128	@ 0x80
 8004398:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e052      	b.n	800444c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0216 	bic.w	r2, r2, #22
 80043b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <HAL_DMA_Abort+0x62>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0208 	bic.w	r2, r2, #8
 80043e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f6:	e013      	b.n	8004420 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043f8:	f7ff fdc8 	bl	8003f8c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b05      	cmp	r3, #5
 8004404:	d90c      	bls.n	8004420 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2203      	movs	r2, #3
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e015      	b.n	800444c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e4      	bne.n	80043f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004432:	223f      	movs	r2, #63	@ 0x3f
 8004434:	409a      	lsls	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d004      	beq.n	8004472 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2280      	movs	r2, #128	@ 0x80
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e00c      	b.n	800448c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2205      	movs	r2, #5
 8004476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044a4:	4b8e      	ldr	r3, [pc, #568]	@ (80046e0 <HAL_DMA_IRQHandler+0x248>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a8e      	ldr	r2, [pc, #568]	@ (80046e4 <HAL_DMA_IRQHandler+0x24c>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0a9b      	lsrs	r3, r3, #10
 80044b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	2208      	movs	r2, #8
 80044c4:	409a      	lsls	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01a      	beq.n	8004504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0204 	bic.w	r2, r2, #4
 80044ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f0:	2208      	movs	r2, #8
 80044f2:	409a      	lsls	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	f043 0201 	orr.w	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d012      	beq.n	800453a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004526:	2201      	movs	r2, #1
 8004528:	409a      	lsls	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	f043 0202 	orr.w	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453e:	2204      	movs	r2, #4
 8004540:	409a      	lsls	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4013      	ands	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d012      	beq.n	8004570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455c:	2204      	movs	r2, #4
 800455e:	409a      	lsls	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004568:	f043 0204 	orr.w	r2, r3, #4
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	2210      	movs	r2, #16
 8004576:	409a      	lsls	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d043      	beq.n	8004608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03c      	beq.n	8004608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004592:	2210      	movs	r2, #16
 8004594:	409a      	lsls	r2, r3
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d018      	beq.n	80045da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d108      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d024      	beq.n	8004608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
 80045c6:	e01f      	b.n	8004608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
 80045d8:	e016      	b.n	8004608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d107      	bne.n	80045f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0208 	bic.w	r2, r2, #8
 80045f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460c:	2220      	movs	r2, #32
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 808f 	beq.w	8004738 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8087 	beq.w	8004738 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462e:	2220      	movs	r2, #32
 8004630:	409a      	lsls	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b05      	cmp	r3, #5
 8004640:	d136      	bne.n	80046b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0216 	bic.w	r2, r2, #22
 8004650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <HAL_DMA_IRQHandler+0x1da>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0208 	bic.w	r2, r2, #8
 8004680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004686:	223f      	movs	r2, #63	@ 0x3f
 8004688:	409a      	lsls	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d07e      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
        }
        return;
 80046ae:	e079      	b.n	80047a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01d      	beq.n	80046fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d031      	beq.n	8004738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	e02c      	b.n	8004738 <HAL_DMA_IRQHandler+0x2a0>
 80046de:	bf00      	nop
 80046e0:	20000904 	.word	0x20000904
 80046e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d023      	beq.n	8004738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
 80046f8:	e01e      	b.n	8004738 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10f      	bne.n	8004728 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0210 	bic.w	r2, r2, #16
 8004716:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d032      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d022      	beq.n	8004792 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2205      	movs	r2, #5
 8004750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	3301      	adds	r3, #1
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	d307      	bcc.n	8004780 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f2      	bne.n	8004764 <HAL_DMA_IRQHandler+0x2cc>
 800477e:	e000      	b.n	8004782 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004780:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
 80047a2:	e000      	b.n	80047a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80047a4:	bf00      	nop
    }
  }
}
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	d108      	bne.n	80047ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ea:	e007      	b.n	80047fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	3b10      	subs	r3, #16
 8004818:	4a14      	ldr	r2, [pc, #80]	@ (800486c <DMA_CalcBaseAndBitshift+0x64>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004822:	4a13      	ldr	r2, [pc, #76]	@ (8004870 <DMA_CalcBaseAndBitshift+0x68>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d909      	bls.n	800484a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	659a      	str	r2, [r3, #88]	@ 0x58
 8004848:	e007      	b.n	800485a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	aaaaaaab 	.word	0xaaaaaaab
 8004870:	0801bd3c 	.word	0x0801bd3c

08004874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11f      	bne.n	80048ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d856      	bhi.n	8004942 <DMA_CheckFifoParam+0xce>
 8004894:	a201      	add	r2, pc, #4	@ (adr r2, 800489c <DMA_CheckFifoParam+0x28>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048bf 	.word	0x080048bf
 80048a4:	080048ad 	.word	0x080048ad
 80048a8:	08004943 	.word	0x08004943
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d046      	beq.n	8004946 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048bc:	e043      	b.n	8004946 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048c6:	d140      	bne.n	800494a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048cc:	e03d      	b.n	800494a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d6:	d121      	bne.n	800491c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d837      	bhi.n	800494e <DMA_CheckFifoParam+0xda>
 80048de:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <DMA_CheckFifoParam+0x70>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	080048fb 	.word	0x080048fb
 80048ec:	080048f5 	.word	0x080048f5
 80048f0:	0800490d 	.word	0x0800490d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e030      	b.n	800495c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d025      	beq.n	8004952 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490a:	e022      	b.n	8004952 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004914:	d11f      	bne.n	8004956 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800491a:	e01c      	b.n	8004956 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d903      	bls.n	800492a <DMA_CheckFifoParam+0xb6>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d003      	beq.n	8004930 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004928:	e018      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
      break;
 800492e:	e015      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      break;
 8004940:	e00b      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;
 8004942:	bf00      	nop
 8004944:	e00a      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      break;
 8004946:	bf00      	nop
 8004948:	e008      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      break;
 800494a:	bf00      	nop
 800494c:	e006      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      break;
 800494e:	bf00      	nop
 8004950:	e004      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      break;
 8004952:	bf00      	nop
 8004954:	e002      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      break;   
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <DMA_CheckFifoParam+0xe8>
      break;
 800495a:	bf00      	nop
    }
  } 
  
  return status; 
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop

0800496c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	@ 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e16b      	b.n	8004c60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004988:	2201      	movs	r2, #1
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	f040 815a 	bne.w	8004c5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d005      	beq.n	80049be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d130      	bne.n	8004a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2203      	movs	r2, #3
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f4:	2201      	movs	r2, #1
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 0201 	and.w	r2, r3, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d017      	beq.n	8004a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	2203      	movs	r2, #3
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d123      	bne.n	8004ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	220f      	movs	r2, #15
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	08da      	lsrs	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3208      	adds	r2, #8
 8004aaa:	69b9      	ldr	r1, [r7, #24]
 8004aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	2203      	movs	r2, #3
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 0203 	and.w	r2, r3, #3
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80b4 	beq.w	8004c5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	4b60      	ldr	r3, [pc, #384]	@ (8004c78 <HAL_GPIO_Init+0x30c>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	4a5f      	ldr	r2, [pc, #380]	@ (8004c78 <HAL_GPIO_Init+0x30c>)
 8004afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b02:	4b5d      	ldr	r3, [pc, #372]	@ (8004c78 <HAL_GPIO_Init+0x30c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c7c <HAL_GPIO_Init+0x310>)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	220f      	movs	r2, #15
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a52      	ldr	r2, [pc, #328]	@ (8004c80 <HAL_GPIO_Init+0x314>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02b      	beq.n	8004b92 <HAL_GPIO_Init+0x226>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a51      	ldr	r2, [pc, #324]	@ (8004c84 <HAL_GPIO_Init+0x318>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d025      	beq.n	8004b8e <HAL_GPIO_Init+0x222>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a50      	ldr	r2, [pc, #320]	@ (8004c88 <HAL_GPIO_Init+0x31c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01f      	beq.n	8004b8a <HAL_GPIO_Init+0x21e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004c8c <HAL_GPIO_Init+0x320>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d019      	beq.n	8004b86 <HAL_GPIO_Init+0x21a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a4e      	ldr	r2, [pc, #312]	@ (8004c90 <HAL_GPIO_Init+0x324>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_GPIO_Init+0x216>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004c94 <HAL_GPIO_Init+0x328>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00d      	beq.n	8004b7e <HAL_GPIO_Init+0x212>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4c      	ldr	r2, [pc, #304]	@ (8004c98 <HAL_GPIO_Init+0x32c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <HAL_GPIO_Init+0x20e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c9c <HAL_GPIO_Init+0x330>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_GPIO_Init+0x20a>
 8004b72:	2307      	movs	r3, #7
 8004b74:	e00e      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b76:	2308      	movs	r3, #8
 8004b78:	e00c      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	e00a      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b7e:	2305      	movs	r3, #5
 8004b80:	e008      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b82:	2304      	movs	r3, #4
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b86:	2303      	movs	r3, #3
 8004b88:	e004      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e002      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b92:	2300      	movs	r3, #0
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	f002 0203 	and.w	r2, r2, #3
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba4:	4935      	ldr	r1, [pc, #212]	@ (8004c7c <HAL_GPIO_Init+0x310>)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	3302      	adds	r3, #2
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd6:	4a32      	ldr	r2, [pc, #200]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bdc:	4b30      	ldr	r3, [pc, #192]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c00:	4a27      	ldr	r2, [pc, #156]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c06:	4b26      	ldr	r3, [pc, #152]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c54:	4a12      	ldr	r2, [pc, #72]	@ (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	f67f ae90 	bls.w	8004988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	@ 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40020000 	.word	0x40020000
 8004c84:	40020400 	.word	0x40020400
 8004c88:	40020800 	.word	0x40020800
 8004c8c:	40020c00 	.word	0x40020c00
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40021400 	.word	0x40021400
 8004c98:	40021800 	.word	0x40021800
 8004c9c:	40021c00 	.word	0x40021c00
 8004ca0:	40013c00 	.word	0x40013c00

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc0:	e003      	b.n	8004cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e12b      	b.n	8004f42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd fbe4 	bl	80024cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	@ 0x24
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d3c:	f000 fd80 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8004d40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4a81      	ldr	r2, [pc, #516]	@ (8004f4c <HAL_I2C_Init+0x274>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d807      	bhi.n	8004d5c <HAL_I2C_Init+0x84>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a80      	ldr	r2, [pc, #512]	@ (8004f50 <HAL_I2C_Init+0x278>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bf94      	ite	ls
 8004d54:	2301      	movls	r3, #1
 8004d56:	2300      	movhi	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e006      	b.n	8004d6a <HAL_I2C_Init+0x92>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f54 <HAL_I2C_Init+0x27c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bf94      	ite	ls
 8004d64:	2301      	movls	r3, #1
 8004d66:	2300      	movhi	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0e7      	b.n	8004f42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a78      	ldr	r2, [pc, #480]	@ (8004f58 <HAL_I2C_Init+0x280>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	0c9b      	lsrs	r3, r3, #18
 8004d7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f4c <HAL_I2C_Init+0x274>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d802      	bhi.n	8004dac <HAL_I2C_Init+0xd4>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	3301      	adds	r3, #1
 8004daa:	e009      	b.n	8004dc0 <HAL_I2C_Init+0xe8>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	4a69      	ldr	r2, [pc, #420]	@ (8004f5c <HAL_I2C_Init+0x284>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004dd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	495c      	ldr	r1, [pc, #368]	@ (8004f4c <HAL_I2C_Init+0x274>)
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	d819      	bhi.n	8004e14 <HAL_I2C_Init+0x13c>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1e59      	subs	r1, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004df4:	400b      	ands	r3, r1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_I2C_Init+0x138>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1e59      	subs	r1, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0e:	e051      	b.n	8004eb4 <HAL_I2C_Init+0x1dc>
 8004e10:	2304      	movs	r3, #4
 8004e12:	e04f      	b.n	8004eb4 <HAL_I2C_Init+0x1dc>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d111      	bne.n	8004e40 <HAL_I2C_Init+0x168>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1e58      	subs	r0, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	440b      	add	r3, r1
 8004e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e012      	b.n	8004e66 <HAL_I2C_Init+0x18e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e58      	subs	r0, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	0099      	lsls	r1, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e56:	3301      	adds	r3, #1
 8004e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Init+0x196>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e022      	b.n	8004eb4 <HAL_I2C_Init+0x1dc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10e      	bne.n	8004e94 <HAL_I2C_Init+0x1bc>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1e58      	subs	r0, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	440b      	add	r3, r1
 8004e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e92:	e00f      	b.n	8004eb4 <HAL_I2C_Init+0x1dc>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1e58      	subs	r0, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	0099      	lsls	r1, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	6809      	ldr	r1, [r1, #0]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69da      	ldr	r2, [r3, #28]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ee2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6911      	ldr	r1, [r2, #16]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68d2      	ldr	r2, [r2, #12]
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	000186a0 	.word	0x000186a0
 8004f50:	001e847f 	.word	0x001e847f
 8004f54:	003d08ff 	.word	0x003d08ff
 8004f58:	431bde83 	.word	0x431bde83
 8004f5c:	10624dd3 	.word	0x10624dd3

08004f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e267      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d075      	beq.n	800506a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f7e:	4b88      	ldr	r3, [pc, #544]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d00c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8a:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d112      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f96:	4b82      	ldr	r3, [pc, #520]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa2:	d10b      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d05b      	beq.n	8005068 <HAL_RCC_OscConfig+0x108>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d157      	bne.n	8005068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e242      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc4:	d106      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x74>
 8004fc6:	4b76      	ldr	r3, [pc, #472]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a75      	ldr	r2, [pc, #468]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e01d      	b.n	8005010 <HAL_RCC_OscConfig+0xb0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x98>
 8004fde:	4b70      	ldr	r3, [pc, #448]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b6d      	ldr	r3, [pc, #436]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6c      	ldr	r2, [pc, #432]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e00b      	b.n	8005010 <HAL_RCC_OscConfig+0xb0>
 8004ff8:	4b69      	ldr	r3, [pc, #420]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a68      	ldr	r2, [pc, #416]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b66      	ldr	r3, [pc, #408]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a65      	ldr	r2, [pc, #404]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800500a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800500e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fe ffb8 	bl	8003f8c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005020:	f7fe ffb4 	bl	8003f8c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e207      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b5b      	ldr	r3, [pc, #364]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0xc0>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fe ffa4 	bl	8003f8c <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe ffa0 	bl	8003f8c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1f3      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	4b51      	ldr	r3, [pc, #324]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0xe8>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d063      	beq.n	800513e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005076:	4b4a      	ldr	r3, [pc, #296]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b47      	ldr	r3, [pc, #284]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800508a:	2b08      	cmp	r3, #8
 800508c:	d11c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508e:	4b44      	ldr	r3, [pc, #272]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	4b41      	ldr	r3, [pc, #260]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCC_OscConfig+0x152>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e1c7      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b2:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4937      	ldr	r1, [pc, #220]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	e03a      	b.n	800513e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d0:	4b34      	ldr	r3, [pc, #208]	@ (80051a4 <HAL_RCC_OscConfig+0x244>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fe ff59 	bl	8003f8c <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050de:	f7fe ff55 	bl	8003f8c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1a8      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f0:	4b2b      	ldr	r3, [pc, #172]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fc:	4b28      	ldr	r3, [pc, #160]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4925      	ldr	r1, [pc, #148]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	e015      	b.n	800513e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005112:	4b24      	ldr	r3, [pc, #144]	@ (80051a4 <HAL_RCC_OscConfig+0x244>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fe ff38 	bl	8003f8c <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005120:	f7fe ff34 	bl	8003f8c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e187      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005132:	4b1b      	ldr	r3, [pc, #108]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d036      	beq.n	80051b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005152:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <HAL_RCC_OscConfig+0x248>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fe ff18 	bl	8003f8c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005160:	f7fe ff14 	bl	8003f8c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e167      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005172:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x200>
 800517e:	e01b      	b.n	80051b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <HAL_RCC_OscConfig+0x248>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005186:	f7fe ff01 	bl	8003f8c <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	e00e      	b.n	80051ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518e:	f7fe fefd 	bl	8003f8c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d907      	bls.n	80051ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e150      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
 80051a0:	40023800 	.word	0x40023800
 80051a4:	42470000 	.word	0x42470000
 80051a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ac:	4b88      	ldr	r3, [pc, #544]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ea      	bne.n	800518e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8097 	beq.w	80052f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c6:	2300      	movs	r3, #0
 80051c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ca:	4b81      	ldr	r3, [pc, #516]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	4b7d      	ldr	r3, [pc, #500]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	4a7c      	ldr	r2, [pc, #496]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051e6:	4b7a      	ldr	r3, [pc, #488]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	4b77      	ldr	r3, [pc, #476]	@ (80053d4 <HAL_RCC_OscConfig+0x474>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d118      	bne.n	8005234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005202:	4b74      	ldr	r3, [pc, #464]	@ (80053d4 <HAL_RCC_OscConfig+0x474>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a73      	ldr	r2, [pc, #460]	@ (80053d4 <HAL_RCC_OscConfig+0x474>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520e:	f7fe febd 	bl	8003f8c <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005216:	f7fe feb9 	bl	8003f8c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e10c      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	4b6a      	ldr	r3, [pc, #424]	@ (80053d4 <HAL_RCC_OscConfig+0x474>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x2ea>
 800523c:	4b64      	ldr	r3, [pc, #400]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005240:	4a63      	ldr	r2, [pc, #396]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6713      	str	r3, [r2, #112]	@ 0x70
 8005248:	e01c      	b.n	8005284 <HAL_RCC_OscConfig+0x324>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x30c>
 8005252:	4b5f      	ldr	r3, [pc, #380]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	4a5e      	ldr	r2, [pc, #376]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005258:	f043 0304 	orr.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	@ 0x70
 800525e:	4b5c      	ldr	r3, [pc, #368]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005262:	4a5b      	ldr	r2, [pc, #364]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6713      	str	r3, [r2, #112]	@ 0x70
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0x324>
 800526c:	4b58      	ldr	r3, [pc, #352]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	4a57      	ldr	r2, [pc, #348]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	@ 0x70
 8005278:	4b55      	ldr	r3, [pc, #340]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527c:	4a54      	ldr	r2, [pc, #336]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 800527e:	f023 0304 	bic.w	r3, r3, #4
 8005282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fe fe7e 	bl	8003f8c <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fe fe7a 	bl	8003f8c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0cb      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	4b49      	ldr	r3, [pc, #292]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ee      	beq.n	8005294 <HAL_RCC_OscConfig+0x334>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b8:	f7fe fe68 	bl	8003f8c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fe fe64 	bl	8003f8c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0b5      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d6:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ee      	bne.n	80052c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	4a38      	ldr	r2, [pc, #224]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80a1 	beq.w	8005440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052fe:	4b34      	ldr	r3, [pc, #208]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b08      	cmp	r3, #8
 8005308:	d05c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d141      	bne.n	8005396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fe fe38 	bl	8003f8c <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005320:	f7fe fe34 	bl	8003f8c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e087      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	3b01      	subs	r3, #1
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	061b      	lsls	r3, r3, #24
 8005362:	491b      	ldr	r1, [pc, #108]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005364:	4313      	orrs	r3, r2
 8005366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fe fe0d 	bl	8003f8c <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005376:	f7fe fe09 	bl	8003f8c <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e05c      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005388:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x416>
 8005394:	e054      	b.n	8005440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005396:	4b10      	ldr	r3, [pc, #64]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fe fdf6 	bl	8003f8c <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fe fdf2 	bl	8003f8c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e045      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <HAL_RCC_OscConfig+0x470>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x444>
 80053c2:	e03d      	b.n	8005440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e038      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40007000 	.word	0x40007000
 80053d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <HAL_RCC_OscConfig+0x4ec>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d028      	beq.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d121      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d11a      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800540c:	4013      	ands	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005414:	4293      	cmp	r3, r2
 8005416:	d111      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	3b01      	subs	r3, #1
 8005426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d107      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800

08005450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0cc      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005464:	4b68      	ldr	r3, [pc, #416]	@ (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d90c      	bls.n	800548c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b65      	ldr	r3, [pc, #404]	@ (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b63      	ldr	r3, [pc, #396]	@ (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0b8      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a4:	4b59      	ldr	r3, [pc, #356]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a58      	ldr	r2, [pc, #352]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054bc:	4b53      	ldr	r3, [pc, #332]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a52      	ldr	r2, [pc, #328]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c8:	4b50      	ldr	r3, [pc, #320]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	494d      	ldr	r1, [pc, #308]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d044      	beq.n	8005570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b47      	ldr	r3, [pc, #284]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d119      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e07f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d003      	beq.n	800550e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550a:	2b03      	cmp	r3, #3
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b3f      	ldr	r3, [pc, #252]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e06f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	4b3b      	ldr	r3, [pc, #236]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e067      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552e:	4b37      	ldr	r3, [pc, #220]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4934      	ldr	r1, [pc, #208]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005540:	f7fe fd24 	bl	8003f8c <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	e00a      	b.n	800555e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005548:	f7fe fd20 	bl	8003f8c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e04f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	4b2b      	ldr	r3, [pc, #172]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 020c 	and.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	429a      	cmp	r2, r3
 800556e:	d1eb      	bne.n	8005548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d20c      	bcs.n	8005598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e032      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a4:	4b19      	ldr	r3, [pc, #100]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4916      	ldr	r1, [pc, #88]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c2:	4b12      	ldr	r3, [pc, #72]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	490e      	ldr	r1, [pc, #56]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055d6:	f000 f821 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	490a      	ldr	r1, [pc, #40]	@ (8005610 <HAL_RCC_ClockConfig+0x1c0>)
 80055e8:	5ccb      	ldrb	r3, [r1, r3]
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	4a09      	ldr	r2, [pc, #36]	@ (8005614 <HAL_RCC_ClockConfig+0x1c4>)
 80055f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055f2:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <HAL_RCC_ClockConfig+0x1c8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd f95a 	bl	80028b0 <HAL_InitTick>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023c00 	.word	0x40023c00
 800560c:	40023800 	.word	0x40023800
 8005610:	0801bd24 	.word	0x0801bd24
 8005614:	20000904 	.word	0x20000904
 8005618:	20000908 	.word	0x20000908

0800561c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b094      	sub	sp, #80	@ 0x50
 8005622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	647b      	str	r3, [r7, #68]	@ 0x44
 8005628:	2300      	movs	r3, #0
 800562a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800562c:	2300      	movs	r3, #0
 800562e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005634:	4b79      	ldr	r3, [pc, #484]	@ (800581c <HAL_RCC_GetSysClockFreq+0x200>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b08      	cmp	r3, #8
 800563e:	d00d      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x40>
 8005640:	2b08      	cmp	r3, #8
 8005642:	f200 80e1 	bhi.w	8005808 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x34>
 800564a:	2b04      	cmp	r3, #4
 800564c:	d003      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x3a>
 800564e:	e0db      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005650:	4b73      	ldr	r3, [pc, #460]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x204>)
 8005652:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005654:	e0db      	b.n	800580e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005656:	4b73      	ldr	r3, [pc, #460]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x208>)
 8005658:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800565a:	e0d8      	b.n	800580e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800565c:	4b6f      	ldr	r3, [pc, #444]	@ (800581c <HAL_RCC_GetSysClockFreq+0x200>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005664:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005666:	4b6d      	ldr	r3, [pc, #436]	@ (800581c <HAL_RCC_GetSysClockFreq+0x200>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d063      	beq.n	800573a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005672:	4b6a      	ldr	r3, [pc, #424]	@ (800581c <HAL_RCC_GetSysClockFreq+0x200>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	2200      	movs	r2, #0
 800567a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800567c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800567e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005684:	633b      	str	r3, [r7, #48]	@ 0x30
 8005686:	2300      	movs	r3, #0
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
 800568a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800568e:	4622      	mov	r2, r4
 8005690:	462b      	mov	r3, r5
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f04f 0100 	mov.w	r1, #0
 800569a:	0159      	lsls	r1, r3, #5
 800569c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056a0:	0150      	lsls	r0, r2, #5
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4621      	mov	r1, r4
 80056a8:	1a51      	subs	r1, r2, r1
 80056aa:	6139      	str	r1, [r7, #16]
 80056ac:	4629      	mov	r1, r5
 80056ae:	eb63 0301 	sbc.w	r3, r3, r1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c0:	4659      	mov	r1, fp
 80056c2:	018b      	lsls	r3, r1, #6
 80056c4:	4651      	mov	r1, sl
 80056c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ca:	4651      	mov	r1, sl
 80056cc:	018a      	lsls	r2, r1, #6
 80056ce:	4651      	mov	r1, sl
 80056d0:	ebb2 0801 	subs.w	r8, r2, r1
 80056d4:	4659      	mov	r1, fp
 80056d6:	eb63 0901 	sbc.w	r9, r3, r1
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ee:	4690      	mov	r8, r2
 80056f0:	4699      	mov	r9, r3
 80056f2:	4623      	mov	r3, r4
 80056f4:	eb18 0303 	adds.w	r3, r8, r3
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	462b      	mov	r3, r5
 80056fc:	eb49 0303 	adc.w	r3, r9, r3
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800570e:	4629      	mov	r1, r5
 8005710:	024b      	lsls	r3, r1, #9
 8005712:	4621      	mov	r1, r4
 8005714:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005718:	4621      	mov	r1, r4
 800571a:	024a      	lsls	r2, r1, #9
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005722:	2200      	movs	r2, #0
 8005724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800572c:	f7fb faec 	bl	8000d08 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4613      	mov	r3, r2
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005738:	e058      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800573a:	4b38      	ldr	r3, [pc, #224]	@ (800581c <HAL_RCC_GetSysClockFreq+0x200>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	099b      	lsrs	r3, r3, #6
 8005740:	2200      	movs	r2, #0
 8005742:	4618      	mov	r0, r3
 8005744:	4611      	mov	r1, r2
 8005746:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	2300      	movs	r3, #0
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005750:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	f04f 0000 	mov.w	r0, #0
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	0159      	lsls	r1, r3, #5
 8005762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005766:	0150      	lsls	r0, r2, #5
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4641      	mov	r1, r8
 800576e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005772:	4649      	mov	r1, r9
 8005774:	eb63 0b01 	sbc.w	fp, r3, r1
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005784:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005788:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800578c:	ebb2 040a 	subs.w	r4, r2, sl
 8005790:	eb63 050b 	sbc.w	r5, r3, fp
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	00eb      	lsls	r3, r5, #3
 800579e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057a2:	00e2      	lsls	r2, r4, #3
 80057a4:	4614      	mov	r4, r2
 80057a6:	461d      	mov	r5, r3
 80057a8:	4643      	mov	r3, r8
 80057aa:	18e3      	adds	r3, r4, r3
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	464b      	mov	r3, r9
 80057b0:	eb45 0303 	adc.w	r3, r5, r3
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057c2:	4629      	mov	r1, r5
 80057c4:	028b      	lsls	r3, r1, #10
 80057c6:	4621      	mov	r1, r4
 80057c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057cc:	4621      	mov	r1, r4
 80057ce:	028a      	lsls	r2, r1, #10
 80057d0:	4610      	mov	r0, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d6:	2200      	movs	r2, #0
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	61fa      	str	r2, [r7, #28]
 80057dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e0:	f7fb fa92 	bl	8000d08 <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4613      	mov	r3, r2
 80057ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	3301      	adds	r3, #1
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80057fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005806:	e002      	b.n	800580e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005808:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x204>)
 800580a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800580c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800580e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005810:	4618      	mov	r0, r3
 8005812:	3750      	adds	r7, #80	@ 0x50
 8005814:	46bd      	mov	sp, r7
 8005816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	00f42400 	.word	0x00f42400
 8005824:	007a1200 	.word	0x007a1200

08005828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800582c:	4b03      	ldr	r3, [pc, #12]	@ (800583c <HAL_RCC_GetHCLKFreq+0x14>)
 800582e:	681b      	ldr	r3, [r3, #0]
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000904 	.word	0x20000904

08005840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005844:	f7ff fff0 	bl	8005828 <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b05      	ldr	r3, [pc, #20]	@ (8005860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	0a9b      	lsrs	r3, r3, #10
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4903      	ldr	r1, [pc, #12]	@ (8005864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40023800 	.word	0x40023800
 8005864:	0801bd34 	.word	0x0801bd34

08005868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800586c:	f7ff ffdc 	bl	8005828 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0b5b      	lsrs	r3, r3, #13
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4903      	ldr	r1, [pc, #12]	@ (800588c <HAL_RCC_GetPCLK2Freq+0x24>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	0801bd34 	.word	0x0801bd34

08005890 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	220f      	movs	r2, #15
 800589e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058a0:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <HAL_RCC_GetClockConfig+0x5c>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0203 	and.w	r2, r3, #3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <HAL_RCC_GetClockConfig+0x5c>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <HAL_RCC_GetClockConfig+0x5c>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058c4:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <HAL_RCC_GetClockConfig+0x5c>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	08db      	lsrs	r3, r3, #3
 80058ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <HAL_RCC_GetClockConfig+0x60>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0207 	and.w	r2, r3, #7
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	601a      	str	r2, [r3, #0]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40023c00 	.word	0x40023c00

080058f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e041      	b.n	800598a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fd fb30 	bl	8002f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f000 fd8c 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04e      	b.n	8005a4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a23      	ldr	r2, [pc, #140]	@ (8005a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d6:	d01d      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a19      	ldr	r2, [pc, #100]	@ (8005a6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a18      	ldr	r2, [pc, #96]	@ (8005a70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d111      	bne.n	8005a38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d010      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a36:	e007      	b.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40010400 	.word	0x40010400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40001800 	.word	0x40001800

08005a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e041      	b.n	8005b0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fd fa4e 	bl	8002f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 fccc 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <HAL_TIM_PWM_Start+0x24>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e022      	b.n	8005b7e <HAL_TIM_PWM_Start+0x6a>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d109      	bne.n	8005b52 <HAL_TIM_PWM_Start+0x3e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	bf14      	ite	ne
 8005b4a:	2301      	movne	r3, #1
 8005b4c:	2300      	moveq	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	e015      	b.n	8005b7e <HAL_TIM_PWM_Start+0x6a>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d109      	bne.n	8005b6c <HAL_TIM_PWM_Start+0x58>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e008      	b.n	8005b7e <HAL_TIM_PWM_Start+0x6a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e07c      	b.n	8005c80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x82>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b94:	e013      	b.n	8005bbe <HAL_TIM_PWM_Start+0xaa>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x92>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ba4:	e00b      	b.n	8005bbe <HAL_TIM_PWM_Start+0xaa>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb4:	e003      	b.n	8005bbe <HAL_TIM_PWM_Start+0xaa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 ff38 	bl	8006a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c88 <HAL_TIM_PWM_Start+0x174>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIM_PWM_Start+0xcc>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2c      	ldr	r2, [pc, #176]	@ (8005c8c <HAL_TIM_PWM_Start+0x178>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_TIM_PWM_Start+0xd0>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_TIM_PWM_Start+0xd2>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a22      	ldr	r2, [pc, #136]	@ (8005c88 <HAL_TIM_PWM_Start+0x174>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d022      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0c:	d01d      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1f      	ldr	r2, [pc, #124]	@ (8005c90 <HAL_TIM_PWM_Start+0x17c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d018      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <HAL_TIM_PWM_Start+0x180>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <HAL_TIM_PWM_Start+0x184>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a16      	ldr	r2, [pc, #88]	@ (8005c8c <HAL_TIM_PWM_Start+0x178>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <HAL_TIM_PWM_Start+0x188>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x136>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <HAL_TIM_PWM_Start+0x18c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d111      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b06      	cmp	r3, #6
 8005c5a:	d010      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6c:	e007      	b.n	8005c7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800

08005ca4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e097      	b.n	8005de8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fd f97d 	bl	8002fcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ce8:	f023 0307 	bic.w	r3, r3, #7
 8005cec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f000 fba9 	bl	8006450 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	4313      	orrs	r3, r2
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d44:	f023 030c 	bic.w	r3, r3, #12
 8005d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	4313      	orrs	r3, r2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	031b      	lsls	r3, r3, #12
 8005d74:	4313      	orrs	r3, r2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	4313      	orrs	r3, r2
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d110      	bne.n	8005e42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d102      	bne.n	8005e2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e26:	7b7b      	ldrb	r3, [r7, #13]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e069      	b.n	8005f04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e40:	e031      	b.n	8005ea6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d110      	bne.n	8005e6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d102      	bne.n	8005e54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e4e:	7b3b      	ldrb	r3, [r7, #12]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e055      	b.n	8005f04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e68:	e01d      	b.n	8005ea6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d108      	bne.n	8005e82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d105      	bne.n	8005e82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e76:	7b7b      	ldrb	r3, [r7, #13]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d102      	bne.n	8005e82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e7c:	7b3b      	ldrb	r3, [r7, #12]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d001      	beq.n	8005e86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e03e      	b.n	8005f04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_TIM_Encoder_Start+0xc4>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d008      	beq.n	8005ec4 <HAL_TIM_Encoder_Start+0xd4>
 8005eb2:	e00f      	b.n	8005ed4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fdbd 	bl	8006a3c <TIM_CCxChannelCmd>
      break;
 8005ec2:	e016      	b.n	8005ef2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2104      	movs	r1, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fdb5 	bl	8006a3c <TIM_CCxChannelCmd>
      break;
 8005ed2:	e00e      	b.n	8005ef2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fdad 	bl	8006a3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	2104      	movs	r1, #4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fda6 	bl	8006a3c <TIM_CCxChannelCmd>
      break;
 8005ef0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0201 	orr.w	r2, r2, #1
 8005f00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0202 	mvn.w	r2, #2
 8005f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa5b 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa4d 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fa5e 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa35 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa27 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fa38 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0208 	mvn.w	r2, #8
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa0f 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa01 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa12 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0210 	mvn.w	r2, #16
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2208      	movs	r2, #8
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9e9 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9db 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9ec 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0201 	mvn.w	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc fb18 	bl	80026a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fdce 	bl	8006c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9bd 	bl	800643a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0220 	mvn.w	r2, #32
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fda0 	bl	8006c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006106:	2302      	movs	r3, #2
 8006108:	e0ae      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	f200 809f 	bhi.w	8006258 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006155 	.word	0x08006155
 8006124:	08006259 	.word	0x08006259
 8006128:	08006259 	.word	0x08006259
 800612c:	08006259 	.word	0x08006259
 8006130:	08006195 	.word	0x08006195
 8006134:	08006259 	.word	0x08006259
 8006138:	08006259 	.word	0x08006259
 800613c:	08006259 	.word	0x08006259
 8006140:	080061d7 	.word	0x080061d7
 8006144:	08006259 	.word	0x08006259
 8006148:	08006259 	.word	0x08006259
 800614c:	08006259 	.word	0x08006259
 8006150:	08006217 	.word	0x08006217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fa24 	bl	80065a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0204 	bic.w	r2, r2, #4
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	619a      	str	r2, [r3, #24]
      break;
 8006192:	e064      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa74 	bl	8006688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
      break;
 80061d4:	e043      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fac9 	bl	8006774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0208 	orr.w	r2, r2, #8
 80061f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0204 	bic.w	r2, r2, #4
 8006200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	61da      	str	r2, [r3, #28]
      break;
 8006214:	e023      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fb1d 	bl	800685c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	021a      	lsls	r2, r3, #8
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	61da      	str	r2, [r3, #28]
      break;
 8006256:	e002      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
      break;
 800625c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIM_ConfigClockSource+0x1c>
 8006288:	2302      	movs	r3, #2
 800628a:	e0b4      	b.n	80063f6 <HAL_TIM_ConfigClockSource+0x186>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c4:	d03e      	beq.n	8006344 <HAL_TIM_ConfigClockSource+0xd4>
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ca:	f200 8087 	bhi.w	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d2:	f000 8086 	beq.w	80063e2 <HAL_TIM_ConfigClockSource+0x172>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062da:	d87f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b70      	cmp	r3, #112	@ 0x70
 80062de:	d01a      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0xa6>
 80062e0:	2b70      	cmp	r3, #112	@ 0x70
 80062e2:	d87b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b60      	cmp	r3, #96	@ 0x60
 80062e6:	d050      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x11a>
 80062e8:	2b60      	cmp	r3, #96	@ 0x60
 80062ea:	d877      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b50      	cmp	r3, #80	@ 0x50
 80062ee:	d03c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xfa>
 80062f0:	2b50      	cmp	r3, #80	@ 0x50
 80062f2:	d873      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d058      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x13a>
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d86f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b30      	cmp	r3, #48	@ 0x30
 80062fe:	d064      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006300:	2b30      	cmp	r3, #48	@ 0x30
 8006302:	d86b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d060      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d867      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	2b10      	cmp	r3, #16
 8006312:	d05a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	e062      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006326:	f000 fb69 	bl	80069fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	609a      	str	r2, [r3, #8]
      break;
 8006342:	e04f      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006354:	f000 fb52 	bl	80069fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006366:	609a      	str	r2, [r3, #8]
      break;
 8006368:	e03c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fac6 	bl	8006908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2150      	movs	r1, #80	@ 0x50
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb1f 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8006388:	e02c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fae5 	bl	8006966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2160      	movs	r1, #96	@ 0x60
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb0f 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e01c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 faa6 	bl	8006908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2140      	movs	r1, #64	@ 0x40
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 faff 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e00c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f000 faf6 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 80063da:	e003      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
      break;
 80063e0:	e000      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a46      	ldr	r2, [pc, #280]	@ (800657c <TIM_Base_SetConfig+0x12c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d013      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d00f      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a43      	ldr	r2, [pc, #268]	@ (8006580 <TIM_Base_SetConfig+0x130>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00b      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a42      	ldr	r2, [pc, #264]	@ (8006584 <TIM_Base_SetConfig+0x134>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a41      	ldr	r2, [pc, #260]	@ (8006588 <TIM_Base_SetConfig+0x138>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a40      	ldr	r2, [pc, #256]	@ (800658c <TIM_Base_SetConfig+0x13c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d108      	bne.n	80064a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a35      	ldr	r2, [pc, #212]	@ (800657c <TIM_Base_SetConfig+0x12c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02b      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b0:	d027      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a32      	ldr	r2, [pc, #200]	@ (8006580 <TIM_Base_SetConfig+0x130>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d023      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a31      	ldr	r2, [pc, #196]	@ (8006584 <TIM_Base_SetConfig+0x134>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01f      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a30      	ldr	r2, [pc, #192]	@ (8006588 <TIM_Base_SetConfig+0x138>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01b      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2f      	ldr	r2, [pc, #188]	@ (800658c <TIM_Base_SetConfig+0x13c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d017      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006590 <TIM_Base_SetConfig+0x140>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006594 <TIM_Base_SetConfig+0x144>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00f      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006598 <TIM_Base_SetConfig+0x148>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2b      	ldr	r2, [pc, #172]	@ (800659c <TIM_Base_SetConfig+0x14c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d007      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2a      	ldr	r2, [pc, #168]	@ (80065a0 <TIM_Base_SetConfig+0x150>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a29      	ldr	r2, [pc, #164]	@ (80065a4 <TIM_Base_SetConfig+0x154>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d108      	bne.n	8006514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a10      	ldr	r2, [pc, #64]	@ (800657c <TIM_Base_SetConfig+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_Base_SetConfig+0xf8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a12      	ldr	r2, [pc, #72]	@ (800658c <TIM_Base_SetConfig+0x13c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d103      	bne.n	8006550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	611a      	str	r2, [r3, #16]
  }
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800
 800659c:	40001800 	.word	0x40001800
 80065a0:	40001c00 	.word	0x40001c00
 80065a4:	40002000 	.word	0x40002000

080065a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f023 0201 	bic.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f023 0302 	bic.w	r3, r3, #2
 80065f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a20      	ldr	r2, [pc, #128]	@ (8006680 <TIM_OC1_SetConfig+0xd8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC1_SetConfig+0x64>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a1f      	ldr	r2, [pc, #124]	@ (8006684 <TIM_OC1_SetConfig+0xdc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10c      	bne.n	8006626 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0308 	bic.w	r3, r3, #8
 8006612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <TIM_OC1_SetConfig+0xd8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_OC1_SetConfig+0x8e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a14      	ldr	r2, [pc, #80]	@ (8006684 <TIM_OC1_SetConfig+0xdc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d111      	bne.n	800665a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800663c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40010000 	.word	0x40010000
 8006684:	40010400 	.word	0x40010400

08006688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f023 0210 	bic.w	r2, r3, #16
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0320 	bic.w	r3, r3, #32
 80066d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a22      	ldr	r2, [pc, #136]	@ (800676c <TIM_OC2_SetConfig+0xe4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC2_SetConfig+0x68>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a21      	ldr	r2, [pc, #132]	@ (8006770 <TIM_OC2_SetConfig+0xe8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10d      	bne.n	800670c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a17      	ldr	r2, [pc, #92]	@ (800676c <TIM_OC2_SetConfig+0xe4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_OC2_SetConfig+0x94>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a16      	ldr	r2, [pc, #88]	@ (8006770 <TIM_OC2_SetConfig+0xe8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d113      	bne.n	8006744 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800672a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400

08006774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a21      	ldr	r2, [pc, #132]	@ (8006854 <TIM_OC3_SetConfig+0xe0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC3_SetConfig+0x66>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a20      	ldr	r2, [pc, #128]	@ (8006858 <TIM_OC3_SetConfig+0xe4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10d      	bne.n	80067f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a16      	ldr	r2, [pc, #88]	@ (8006854 <TIM_OC3_SetConfig+0xe0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC3_SetConfig+0x92>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a15      	ldr	r2, [pc, #84]	@ (8006858 <TIM_OC3_SetConfig+0xe4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d113      	bne.n	800682e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40010000 	.word	0x40010000
 8006858:	40010400 	.word	0x40010400

0800685c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	031b      	lsls	r3, r3, #12
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a12      	ldr	r2, [pc, #72]	@ (8006900 <TIM_OC4_SetConfig+0xa4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC4_SetConfig+0x68>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a11      	ldr	r2, [pc, #68]	@ (8006904 <TIM_OC4_SetConfig+0xa8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d109      	bne.n	80068d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	019b      	lsls	r3, r3, #6
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400

08006908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0201 	bic.w	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 030a 	bic.w	r3, r3, #10
 8006944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 0210 	bic.w	r2, r3, #16
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	031b      	lsls	r3, r3, #12
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f043 0307 	orr.w	r3, r3, #7
 80069e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	609a      	str	r2, [r3, #8]
}
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	021a      	lsls	r2, r3, #8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	609a      	str	r2, [r3, #8]
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	2201      	movs	r2, #1
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	43db      	mvns	r3, r3
 8006a5e:	401a      	ands	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1a      	ldr	r2, [r3, #32]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	fa01 f303 	lsl.w	r3, r1, r3
 8006a74:	431a      	orrs	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e05a      	b.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d022      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aec:	d01d      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d018      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1a      	ldr	r2, [pc, #104]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00e      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a18      	ldr	r2, [pc, #96]	@ (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d009      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	@ (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a15      	ldr	r2, [pc, #84]	@ (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d10c      	bne.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40010400 	.word	0x40010400
 8006b78:	40014000 	.word	0x40014000
 8006b7c:	40001800 	.word	0x40001800

08006b80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e03d      	b.n	8006c18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e042      	b.n	8006ce4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fc fb2c 	bl	80032d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2224      	movs	r2, #36	@ 0x24
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f8f7 	bl	8007e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695a      	ldr	r2, [r3, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	@ 0x28
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d175      	bne.n	8006df8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <HAL_UART_Transmit+0x2c>
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e06e      	b.n	8006dfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2221      	movs	r2, #33	@ 0x21
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d2a:	f7fd f92f 	bl	8003f8c <HAL_GetTick>
 8006d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	88fa      	ldrh	r2, [r7, #6]
 8006d34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d44:	d108      	bne.n	8006d58 <HAL_UART_Transmit+0x6c>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e003      	b.n	8006d60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d60:	e02e      	b.n	8006dc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2180      	movs	r1, #128	@ 0x80
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fd96 	bl	800789e <UART_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e03a      	b.n	8006dfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	e007      	b.n	8006db2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	3301      	adds	r3, #1
 8006db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1cb      	bne.n	8006d62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2140      	movs	r1, #64	@ 0x40
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fd62 	bl	800789e <UART_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e006      	b.n	8006dfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d112      	bne.n	8006e42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_UART_Receive_IT+0x26>
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e00b      	b.n	8006e44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	461a      	mov	r2, r3
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fd89 	bl	8007950 <UART_Start_Receive_IT>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	e000      	b.n	8006e44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
  }
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	@ 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d156      	bne.n	8006f14 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_UART_Transmit_DMA+0x26>
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e04f      	b.n	8006f16 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	88fa      	ldrh	r2, [r7, #6]
 8006e80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2221      	movs	r2, #33	@ 0x21
 8006e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	4a21      	ldr	r2, [pc, #132]	@ (8006f20 <HAL_UART_Transmit_DMA+0xd4>)
 8006e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea2:	4a20      	ldr	r2, [pc, #128]	@ (8006f24 <HAL_UART_Transmit_DMA+0xd8>)
 8006ea4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8006f28 <HAL_UART_Transmit_DMA+0xdc>)
 8006eac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006eb6:	f107 0308 	add.w	r3, r7, #8
 8006eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	461a      	mov	r2, r3
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	f7fd f9f9 	bl	80042c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006eda:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	617b      	str	r3, [r7, #20]
   return(result);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3314      	adds	r3, #20
 8006efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6a39      	ldr	r1, [r7, #32]
 8006f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e000      	b.n	8006f16 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3730      	adds	r7, #48	@ 0x30
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	080075ed 	.word	0x080075ed
 8006f24:	08007687 	.word	0x08007687
 8006f28:	0800780b 	.word	0x0800780b

08006f2c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d112      	bne.n	8006f6c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <HAL_UART_Receive_DMA+0x26>
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e00b      	b.n	8006f6e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fd2e 	bl	80079c4 <UART_Start_Receive_DMA>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	e000      	b.n	8006f6e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b090      	sub	sp, #64	@ 0x40
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8c:	2b80      	cmp	r3, #128	@ 0x80
 8006f8e:	bf0c      	ite	eq
 8006f90:	2301      	moveq	r3, #1
 8006f92:	2300      	movne	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b21      	cmp	r3, #33	@ 0x21
 8006fa2:	d128      	bne.n	8006ff6 <HAL_UART_DMAStop+0x80>
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d025      	beq.n	8006ff6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fca:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e5      	bne.n	8006faa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fd f9c2 	bl	8004374 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fd81 	bl	8007af8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007000:	2b40      	cmp	r3, #64	@ 0x40
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b22      	cmp	r3, #34	@ 0x22
 8007016:	d128      	bne.n	800706a <HAL_UART_DMAStop+0xf4>
 8007018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d025      	beq.n	800706a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	60fb      	str	r3, [r7, #12]
   return(result);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007034:	637b      	str	r3, [r7, #52]	@ 0x34
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800703e:	61fa      	str	r2, [r7, #28]
 8007040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	69b9      	ldr	r1, [r7, #24]
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	617b      	str	r3, [r7, #20]
   return(result);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705e:	4618      	mov	r0, r3
 8007060:	f7fd f988 	bl	8004374 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fd6f 	bl	8007b48 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3740      	adds	r7, #64	@ 0x40
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b0ba      	sub	sp, #232	@ 0xe8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800709a:	2300      	movs	r3, #0
 800709c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80070b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10f      	bne.n	80070da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_UART_IRQHandler+0x66>
 80070c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fe17 	bl	8007d06 <UART_Receive_IT>
      return;
 80070d8:	e25b      	b.n	8007592 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80de 	beq.w	80072a0 <HAL_UART_IRQHandler+0x22c>
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80d1 	beq.w	80072a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_UART_IRQHandler+0xae>
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800710e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711a:	f043 0201 	orr.w	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
 800712e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713e:	f043 0202 	orr.w	r2, r3, #2
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <HAL_UART_IRQHandler+0xf6>
 8007152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	f043 0204 	orr.w	r2, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d011      	beq.n	800719a <HAL_UART_IRQHandler+0x126>
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d105      	bne.n	800718e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007192:	f043 0208 	orr.w	r2, r3, #8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 81f2 	beq.w	8007588 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_UART_IRQHandler+0x14e>
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fda2 	bl	8007d06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b40      	cmp	r3, #64	@ 0x40
 80071ce:	bf0c      	ite	eq
 80071d0:	2301      	moveq	r3, #1
 80071d2:	2300      	movne	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <HAL_UART_IRQHandler+0x17a>
 80071e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d04f      	beq.n	800728e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fcaa 	bl	8007b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fe:	2b40      	cmp	r3, #64	@ 0x40
 8007200:	d141      	bne.n	8007286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3314      	adds	r3, #20
 8007208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800721c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800722e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800723a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d9      	bne.n	8007202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725a:	4a7e      	ldr	r2, [pc, #504]	@ (8007454 <HAL_UART_IRQHandler+0x3e0>)
 800725c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007262:	4618      	mov	r0, r3
 8007264:	f7fd f8f6 	bl	8004454 <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00e      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7f9 ffce 	bl	8001220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00a      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7f9 ffca 	bl	8001220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e006      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7f9 ffc6 	bl	8001220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800729a:	e175      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	bf00      	nop
    return;
 800729e:	e173      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f040 814f 	bne.w	8007548 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8148 	beq.w	8007548 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8141 	beq.w	8007548 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e6:	2b40      	cmp	r3, #64	@ 0x40
 80072e8:	f040 80b6 	bne.w	8007458 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8145 	beq.w	800758c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800730a:	429a      	cmp	r2, r3
 800730c:	f080 813e 	bcs.w	800758c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007316:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007322:	f000 8088 	beq.w	8007436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800733c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800735e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800736a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1d9      	bne.n	8007326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3314      	adds	r3, #20
 8007378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007396:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800739a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800739e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e1      	bne.n	8007372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3314      	adds	r3, #20
 80073ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e3      	bne.n	80073ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007418:	65ba      	str	r2, [r7, #88]	@ 0x58
 800741a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800741e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e3      	bne.n	80073f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007430:	4618      	mov	r0, r3
 8007432:	f7fc ff9f 	bl	8004374 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007444:	b29b      	uxth	r3, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8c1 	bl	80075d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007452:	e09b      	b.n	800758c <HAL_UART_IRQHandler+0x518>
 8007454:	08007c0f 	.word	0x08007c0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007460:	b29b      	uxth	r3, r3
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 808e 	beq.w	8007590 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8089 	beq.w	8007590 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	330c      	adds	r3, #12
 8007484:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800748e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80074a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1e3      	bne.n	800747e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3314      	adds	r3, #20
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	623b      	str	r3, [r7, #32]
   return(result);
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3314      	adds	r3, #20
 80074d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074da:	633a      	str	r2, [r7, #48]	@ 0x30
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e3      	bne.n	80074b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60fb      	str	r3, [r7, #12]
   return(result);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0310 	bic.w	r3, r3, #16
 8007512:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007520:	61fa      	str	r2, [r7, #28]
 8007522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	69b9      	ldr	r1, [r7, #24]
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	617b      	str	r3, [r7, #20]
   return(result);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e3      	bne.n	80074fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800753a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f847 	bl	80075d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007546:	e023      	b.n	8007590 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800754c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007550:	2b00      	cmp	r3, #0
 8007552:	d009      	beq.n	8007568 <HAL_UART_IRQHandler+0x4f4>
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb68 	bl	8007c36 <UART_Transmit_IT>
    return;
 8007566:	e014      	b.n	8007592 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00e      	beq.n	8007592 <HAL_UART_IRQHandler+0x51e>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fba8 	bl	8007cd6 <UART_EndTransmit_IT>
    return;
 8007586:	e004      	b.n	8007592 <HAL_UART_IRQHandler+0x51e>
    return;
 8007588:	bf00      	nop
 800758a:	e002      	b.n	8007592 <HAL_UART_IRQHandler+0x51e>
      return;
 800758c:	bf00      	nop
 800758e:	e000      	b.n	8007592 <HAL_UART_IRQHandler+0x51e>
      return;
 8007590:	bf00      	nop
  }
}
 8007592:	37e8      	adds	r7, #232	@ 0xe8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b090      	sub	sp, #64	@ 0x40
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d137      	bne.n	8007678 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760a:	2200      	movs	r2, #0
 800760c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800760e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3314      	adds	r3, #20
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	623b      	str	r3, [r7, #32]
   return(result);
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800762e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	330c      	adds	r3, #12
 8007648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	60fb      	str	r3, [r7, #12]
   return(result);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007658:	637b      	str	r3, [r7, #52]	@ 0x34
 800765a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007662:	61fa      	str	r2, [r7, #28]
 8007664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	617b      	str	r3, [r7, #20]
   return(result);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e5      	bne.n	8007642 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007676:	e002      	b.n	800767e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007678:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800767a:	f7ff ff8d 	bl	8007598 <HAL_UART_TxCpltCallback>
}
 800767e:	bf00      	nop
 8007680:	3740      	adds	r7, #64	@ 0x40
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff ff89 	bl	80075ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b09c      	sub	sp, #112	@ 0x70
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d172      	bne.n	80077a4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80076be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c0:	2200      	movs	r2, #0
 80076c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	330c      	adds	r3, #12
 80076ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80076e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e5      	bne.n	80076c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3314      	adds	r3, #20
 80076fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3314      	adds	r3, #20
 8007716:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007718:	647a      	str	r2, [r7, #68]	@ 0x44
 800771a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800771e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800772c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3314      	adds	r3, #20
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	623b      	str	r3, [r7, #32]
   return(result);
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007742:	663b      	str	r3, [r7, #96]	@ 0x60
 8007744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3314      	adds	r3, #20
 800774a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800774c:	633a      	str	r2, [r7, #48]	@ 0x30
 800774e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800776a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776c:	2b01      	cmp	r3, #1
 800776e:	d119      	bne.n	80077a4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0310 	bic.w	r3, r3, #16
 8007786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007790:	61fa      	str	r2, [r7, #28]
 8007792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	69b9      	ldr	r1, [r7, #24]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	617b      	str	r3, [r7, #20]
   return(result);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e5      	bne.n	8007770 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a6:	2200      	movs	r2, #0
 80077a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d106      	bne.n	80077c0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077b6:	4619      	mov	r1, r3
 80077b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077ba:	f7ff ff0b 	bl	80075d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077be:	e002      	b.n	80077c6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80077c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077c2:	f7fc fb83 	bl	8003ecc <HAL_UART_RxCpltCallback>
}
 80077c6:	bf00      	nop
 80077c8:	3770      	adds	r7, #112	@ 0x70
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d108      	bne.n	80077fc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	4619      	mov	r1, r3
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff feed 	bl	80075d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077fa:	e002      	b.n	8007802 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff fedf 	bl	80075c0 <HAL_UART_RxHalfCpltCallback>
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007826:	2b80      	cmp	r3, #128	@ 0x80
 8007828:	bf0c      	ite	eq
 800782a:	2301      	moveq	r3, #1
 800782c:	2300      	movne	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b21      	cmp	r3, #33	@ 0x21
 800783c:	d108      	bne.n	8007850 <UART_DMAError+0x46>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800784a:	68b8      	ldr	r0, [r7, #8]
 800784c:	f000 f954 	bl	8007af8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785a:	2b40      	cmp	r3, #64	@ 0x40
 800785c:	bf0c      	ite	eq
 800785e:	2301      	moveq	r3, #1
 8007860:	2300      	movne	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b22      	cmp	r3, #34	@ 0x22
 8007870:	d108      	bne.n	8007884 <UART_DMAError+0x7a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800787e:	68b8      	ldr	r0, [r7, #8]
 8007880:	f000 f962 	bl	8007b48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007888:	f043 0210 	orr.w	r2, r3, #16
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007890:	68b8      	ldr	r0, [r7, #8]
 8007892:	f7f9 fcc5 	bl	8001220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ae:	e03b      	b.n	8007928 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d037      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b8:	f7fc fb68 	bl	8003f8c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d302      	bcc.n	80078ce <UART_WaitOnFlagUntilTimeout+0x30>
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e03a      	b.n	8007948 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d023      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x8a>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b80      	cmp	r3, #128	@ 0x80
 80078e4:	d020      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x8a>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b40      	cmp	r3, #64	@ 0x40
 80078ea:	d01d      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d116      	bne.n	8007928 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f919 	bl	8007b48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2208      	movs	r2, #8
 800791a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e00f      	b.n	8007948 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	429a      	cmp	r2, r3
 8007944:	d0b4      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2222      	movs	r2, #34	@ 0x22
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d007      	beq.n	8007996 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007994:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0220 	orr.w	r2, r2, #32
 80079b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b098      	sub	sp, #96	@ 0x60
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2222      	movs	r2, #34	@ 0x22
 80079e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f0:	4a3e      	ldr	r2, [pc, #248]	@ (8007aec <UART_Start_Receive_DMA+0x128>)
 80079f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f8:	4a3d      	ldr	r2, [pc, #244]	@ (8007af0 <UART_Start_Receive_DMA+0x12c>)
 80079fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a00:	4a3c      	ldr	r2, [pc, #240]	@ (8007af4 <UART_Start_Receive_DMA+0x130>)
 8007a02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a08:	2200      	movs	r2, #0
 8007a0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	f7fc fc4e 	bl	80042c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d019      	beq.n	8007a7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e5      	bne.n	8007a46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3314      	adds	r3, #20
 8007a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3314      	adds	r3, #20
 8007a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007aa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e5      	bne.n	8007a7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	617b      	str	r3, [r7, #20]
   return(result);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3314      	adds	r3, #20
 8007acc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ace:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6a39      	ldr	r1, [r7, #32]
 8007ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e5      	bne.n	8007aae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3760      	adds	r7, #96	@ 0x60
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	080076a3 	.word	0x080076a3
 8007af0:	080077cf 	.word	0x080077cf
 8007af4:	0800780b 	.word	0x0800780b

08007af8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b089      	sub	sp, #36	@ 0x24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	330c      	adds	r3, #12
 8007b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b16:	61fb      	str	r3, [r7, #28]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	61ba      	str	r2, [r7, #24]
 8007b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6979      	ldr	r1, [r7, #20]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e5      	bne.n	8007b00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b3c:	bf00      	nop
 8007b3e:	3724      	adds	r7, #36	@ 0x24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b095      	sub	sp, #84	@ 0x54
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b70:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e5      	bne.n	8007b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3314      	adds	r3, #20
 8007b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e5      	bne.n	8007b84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d119      	bne.n	8007bf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be0:	61ba      	str	r2, [r7, #24]
 8007be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6979      	ldr	r1, [r7, #20]
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	613b      	str	r3, [r7, #16]
   return(result);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c02:	bf00      	nop
 8007c04:	3754      	adds	r7, #84	@ 0x54
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7f9 faf9 	bl	8001220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b21      	cmp	r3, #33	@ 0x21
 8007c48:	d13e      	bne.n	8007cc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c52:	d114      	bne.n	8007c7e <UART_Transmit_IT+0x48>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d110      	bne.n	8007c7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	1c9a      	adds	r2, r3, #2
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]
 8007c7c:	e008      	b.n	8007c90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	1c59      	adds	r1, r3, #1
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6211      	str	r1, [r2, #32]
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10f      	bne.n	8007cc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e000      	b.n	8007cca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cc8:	2302      	movs	r3, #2
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fc4e 	bl	8007598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b08c      	sub	sp, #48	@ 0x30
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b22      	cmp	r3, #34	@ 0x22
 8007d18:	f040 80ae 	bne.w	8007e78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d24:	d117      	bne.n	8007d56 <UART_Receive_IT+0x50>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d113      	bne.n	8007d56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	1c9a      	adds	r2, r3, #2
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d54:	e026      	b.n	8007da4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d68:	d007      	beq.n	8007d7a <UART_Receive_IT+0x74>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <UART_Receive_IT+0x82>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e008      	b.n	8007d9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	4619      	mov	r1, r3
 8007db2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d15d      	bne.n	8007e74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0220 	bic.w	r2, r2, #32
 8007dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695a      	ldr	r2, [r3, #20]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0201 	bic.w	r2, r2, #1
 8007de6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d135      	bne.n	8007e6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	613b      	str	r3, [r7, #16]
   return(result);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f023 0310 	bic.w	r3, r3, #16
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	330c      	adds	r3, #12
 8007e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e24:	623a      	str	r2, [r7, #32]
 8007e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	69f9      	ldr	r1, [r7, #28]
 8007e2a:	6a3a      	ldr	r2, [r7, #32]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e5      	bne.n	8007e04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b10      	cmp	r3, #16
 8007e44:	d10a      	bne.n	8007e5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fbb6 	bl	80075d4 <HAL_UARTEx_RxEventCallback>
 8007e68:	e002      	b.n	8007e70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fc f82e 	bl	8003ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e002      	b.n	8007e7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e000      	b.n	8007e7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e78:	2302      	movs	r3, #2
  }
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3730      	adds	r7, #48	@ 0x30
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e88:	b0c0      	sub	sp, #256	@ 0x100
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea0:	68d9      	ldr	r1, [r3, #12]
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	ea40 0301 	orr.w	r3, r0, r1
 8007eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007edc:	f021 010c 	bic.w	r1, r1, #12
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007eea:	430b      	orrs	r3, r1
 8007eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efe:	6999      	ldr	r1, [r3, #24]
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	ea40 0301 	orr.w	r3, r0, r1
 8007f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b8f      	ldr	r3, [pc, #572]	@ (8008150 <UART_SetConfig+0x2cc>)
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d005      	beq.n	8007f24 <UART_SetConfig+0xa0>
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8008154 <UART_SetConfig+0x2d0>)
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d104      	bne.n	8007f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f24:	f7fd fca0 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8007f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f2c:	e003      	b.n	8007f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f7fd fc87 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8007f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f40:	f040 810c 	bne.w	800815c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	1891      	adds	r1, r2, r2
 8007f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f5e:	415b      	adcs	r3, r3
 8007f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f66:	4621      	mov	r1, r4
 8007f68:	eb12 0801 	adds.w	r8, r2, r1
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	eb43 0901 	adc.w	r9, r3, r1
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f86:	4690      	mov	r8, r2
 8007f88:	4699      	mov	r9, r3
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	eb18 0303 	adds.w	r3, r8, r3
 8007f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f94:	462b      	mov	r3, r5
 8007f96:	eb49 0303 	adc.w	r3, r9, r3
 8007f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	18db      	adds	r3, r3, r3
 8007fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fb8:	4613      	mov	r3, r2
 8007fba:	eb42 0303 	adc.w	r3, r2, r3
 8007fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fc8:	f7f8 fe9e 	bl	8000d08 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4b61      	ldr	r3, [pc, #388]	@ (8008158 <UART_SetConfig+0x2d4>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	011c      	lsls	r4, r3, #4
 8007fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	1891      	adds	r1, r2, r2
 8007ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ff4:	415b      	adcs	r3, r3
 8007ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8008002:	4649      	mov	r1, r9
 8008004:	eb43 0b01 	adc.w	fp, r3, r1
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800801c:	4692      	mov	sl, r2
 800801e:	469b      	mov	fp, r3
 8008020:	4643      	mov	r3, r8
 8008022:	eb1a 0303 	adds.w	r3, sl, r3
 8008026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800802a:	464b      	mov	r3, r9
 800802c:	eb4b 0303 	adc.w	r3, fp, r3
 8008030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008048:	460b      	mov	r3, r1
 800804a:	18db      	adds	r3, r3, r3
 800804c:	643b      	str	r3, [r7, #64]	@ 0x40
 800804e:	4613      	mov	r3, r2
 8008050:	eb42 0303 	adc.w	r3, r2, r3
 8008054:	647b      	str	r3, [r7, #68]	@ 0x44
 8008056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800805a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800805e:	f7f8 fe53 	bl	8000d08 <__aeabi_uldivmod>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4611      	mov	r1, r2
 8008068:	4b3b      	ldr	r3, [pc, #236]	@ (8008158 <UART_SetConfig+0x2d4>)
 800806a:	fba3 2301 	umull	r2, r3, r3, r1
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	2264      	movs	r2, #100	@ 0x64
 8008072:	fb02 f303 	mul.w	r3, r2, r3
 8008076:	1acb      	subs	r3, r1, r3
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800807e:	4b36      	ldr	r3, [pc, #216]	@ (8008158 <UART_SetConfig+0x2d4>)
 8008080:	fba3 2302 	umull	r2, r3, r3, r2
 8008084:	095b      	lsrs	r3, r3, #5
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800808c:	441c      	add	r4, r3
 800808e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008092:	2200      	movs	r2, #0
 8008094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800809c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080a0:	4642      	mov	r2, r8
 80080a2:	464b      	mov	r3, r9
 80080a4:	1891      	adds	r1, r2, r2
 80080a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080a8:	415b      	adcs	r3, r3
 80080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080b0:	4641      	mov	r1, r8
 80080b2:	1851      	adds	r1, r2, r1
 80080b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80080b6:	4649      	mov	r1, r9
 80080b8:	414b      	adcs	r3, r1
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080c8:	4659      	mov	r1, fp
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	4651      	mov	r1, sl
 80080ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d2:	4651      	mov	r1, sl
 80080d4:	00ca      	lsls	r2, r1, #3
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	4603      	mov	r3, r0
 80080dc:	4642      	mov	r2, r8
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080e4:	464b      	mov	r3, r9
 80080e6:	460a      	mov	r2, r1
 80080e8:	eb42 0303 	adc.w	r3, r2, r3
 80080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008104:	460b      	mov	r3, r1
 8008106:	18db      	adds	r3, r3, r3
 8008108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800810a:	4613      	mov	r3, r2
 800810c:	eb42 0303 	adc.w	r3, r2, r3
 8008110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800811a:	f7f8 fdf5 	bl	8000d08 <__aeabi_uldivmod>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <UART_SetConfig+0x2d4>)
 8008124:	fba3 1302 	umull	r1, r3, r3, r2
 8008128:	095b      	lsrs	r3, r3, #5
 800812a:	2164      	movs	r1, #100	@ 0x64
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	3332      	adds	r3, #50	@ 0x32
 8008136:	4a08      	ldr	r2, [pc, #32]	@ (8008158 <UART_SetConfig+0x2d4>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	f003 0207 	and.w	r2, r3, #7
 8008142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4422      	add	r2, r4
 800814a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800814c:	e106      	b.n	800835c <UART_SetConfig+0x4d8>
 800814e:	bf00      	nop
 8008150:	40011000 	.word	0x40011000
 8008154:	40011400 	.word	0x40011400
 8008158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008160:	2200      	movs	r2, #0
 8008162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800816a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800816e:	4642      	mov	r2, r8
 8008170:	464b      	mov	r3, r9
 8008172:	1891      	adds	r1, r2, r2
 8008174:	6239      	str	r1, [r7, #32]
 8008176:	415b      	adcs	r3, r3
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
 800817a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800817e:	4641      	mov	r1, r8
 8008180:	1854      	adds	r4, r2, r1
 8008182:	4649      	mov	r1, r9
 8008184:	eb43 0501 	adc.w	r5, r3, r1
 8008188:	f04f 0200 	mov.w	r2, #0
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	00eb      	lsls	r3, r5, #3
 8008192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008196:	00e2      	lsls	r2, r4, #3
 8008198:	4614      	mov	r4, r2
 800819a:	461d      	mov	r5, r3
 800819c:	4643      	mov	r3, r8
 800819e:	18e3      	adds	r3, r4, r3
 80081a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081a4:	464b      	mov	r3, r9
 80081a6:	eb45 0303 	adc.w	r3, r5, r3
 80081aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081ca:	4629      	mov	r1, r5
 80081cc:	008b      	lsls	r3, r1, #2
 80081ce:	4621      	mov	r1, r4
 80081d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d4:	4621      	mov	r1, r4
 80081d6:	008a      	lsls	r2, r1, #2
 80081d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081dc:	f7f8 fd94 	bl	8000d08 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4b60      	ldr	r3, [pc, #384]	@ (8008368 <UART_SetConfig+0x4e4>)
 80081e6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	011c      	lsls	r4, r3, #4
 80081ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	1891      	adds	r1, r2, r2
 8008206:	61b9      	str	r1, [r7, #24]
 8008208:	415b      	adcs	r3, r3
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008210:	4641      	mov	r1, r8
 8008212:	1851      	adds	r1, r2, r1
 8008214:	6139      	str	r1, [r7, #16]
 8008216:	4649      	mov	r1, r9
 8008218:	414b      	adcs	r3, r1
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008228:	4659      	mov	r1, fp
 800822a:	00cb      	lsls	r3, r1, #3
 800822c:	4651      	mov	r1, sl
 800822e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008232:	4651      	mov	r1, sl
 8008234:	00ca      	lsls	r2, r1, #3
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	4603      	mov	r3, r0
 800823c:	4642      	mov	r2, r8
 800823e:	189b      	adds	r3, r3, r2
 8008240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008244:	464b      	mov	r3, r9
 8008246:	460a      	mov	r2, r1
 8008248:	eb42 0303 	adc.w	r3, r2, r3
 800824c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800825a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008268:	4649      	mov	r1, r9
 800826a:	008b      	lsls	r3, r1, #2
 800826c:	4641      	mov	r1, r8
 800826e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008272:	4641      	mov	r1, r8
 8008274:	008a      	lsls	r2, r1, #2
 8008276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800827a:	f7f8 fd45 	bl	8000d08 <__aeabi_uldivmod>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4611      	mov	r1, r2
 8008284:	4b38      	ldr	r3, [pc, #224]	@ (8008368 <UART_SetConfig+0x4e4>)
 8008286:	fba3 2301 	umull	r2, r3, r3, r1
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	2264      	movs	r2, #100	@ 0x64
 800828e:	fb02 f303 	mul.w	r3, r2, r3
 8008292:	1acb      	subs	r3, r1, r3
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	3332      	adds	r3, #50	@ 0x32
 8008298:	4a33      	ldr	r2, [pc, #204]	@ (8008368 <UART_SetConfig+0x4e4>)
 800829a:	fba2 2303 	umull	r2, r3, r2, r3
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082a4:	441c      	add	r4, r3
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082aa:	2200      	movs	r2, #0
 80082ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80082ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80082b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082b4:	4642      	mov	r2, r8
 80082b6:	464b      	mov	r3, r9
 80082b8:	1891      	adds	r1, r2, r2
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	415b      	adcs	r3, r3
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082c4:	4641      	mov	r1, r8
 80082c6:	1851      	adds	r1, r2, r1
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	4649      	mov	r1, r9
 80082cc:	414b      	adcs	r3, r1
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082dc:	4659      	mov	r1, fp
 80082de:	00cb      	lsls	r3, r1, #3
 80082e0:	4651      	mov	r1, sl
 80082e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082e6:	4651      	mov	r1, sl
 80082e8:	00ca      	lsls	r2, r1, #3
 80082ea:	4610      	mov	r0, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	4642      	mov	r2, r8
 80082f2:	189b      	adds	r3, r3, r2
 80082f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082f6:	464b      	mov	r3, r9
 80082f8:	460a      	mov	r2, r1
 80082fa:	eb42 0303 	adc.w	r3, r2, r3
 80082fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	663b      	str	r3, [r7, #96]	@ 0x60
 800830a:	667a      	str	r2, [r7, #100]	@ 0x64
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008318:	4649      	mov	r1, r9
 800831a:	008b      	lsls	r3, r1, #2
 800831c:	4641      	mov	r1, r8
 800831e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008322:	4641      	mov	r1, r8
 8008324:	008a      	lsls	r2, r1, #2
 8008326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800832a:	f7f8 fced 	bl	8000d08 <__aeabi_uldivmod>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <UART_SetConfig+0x4e4>)
 8008334:	fba3 1302 	umull	r1, r3, r3, r2
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	2164      	movs	r1, #100	@ 0x64
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	3332      	adds	r3, #50	@ 0x32
 8008346:	4a08      	ldr	r2, [pc, #32]	@ (8008368 <UART_SetConfig+0x4e4>)
 8008348:	fba2 2303 	umull	r2, r3, r2, r3
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4422      	add	r2, r4
 800835a:	609a      	str	r2, [r3, #8]
}
 800835c:	bf00      	nop
 800835e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008362:	46bd      	mov	sp, r7
 8008364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008368:	51eb851f 	.word	0x51eb851f

0800836c <__NVIC_SetPriority>:
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800837c:	2b00      	cmp	r3, #0
 800837e:	db0a      	blt.n	8008396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	b2da      	uxtb	r2, r3
 8008384:	490c      	ldr	r1, [pc, #48]	@ (80083b8 <__NVIC_SetPriority+0x4c>)
 8008386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800838a:	0112      	lsls	r2, r2, #4
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	440b      	add	r3, r1
 8008390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008394:	e00a      	b.n	80083ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4908      	ldr	r1, [pc, #32]	@ (80083bc <__NVIC_SetPriority+0x50>)
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	3b04      	subs	r3, #4
 80083a4:	0112      	lsls	r2, r2, #4
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	440b      	add	r3, r1
 80083aa:	761a      	strb	r2, [r3, #24]
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	e000e100 	.word	0xe000e100
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <SysTick_Handler+0x1c>)
 80083c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083c8:	f001 fdb4 	bl	8009f34 <xTaskGetSchedulerState>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d001      	beq.n	80083d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083d2:	f002 fba9 	bl	800ab28 <xPortSysTickHandler>
  }
}
 80083d6:	bf00      	nop
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	e000e010 	.word	0xe000e010

080083e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083e4:	2100      	movs	r1, #0
 80083e6:	f06f 0004 	mvn.w	r0, #4
 80083ea:	f7ff ffbf 	bl	800836c <__NVIC_SetPriority>
#endif
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fa:	f3ef 8305 	mrs	r3, IPSR
 80083fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008406:	f06f 0305 	mvn.w	r3, #5
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	e00c      	b.n	8008428 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800840e:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <osKernelInitialize+0x44>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d105      	bne.n	8008422 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008416:	4b08      	ldr	r3, [pc, #32]	@ (8008438 <osKernelInitialize+0x44>)
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800841c:	2300      	movs	r3, #0
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	e002      	b.n	8008428 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008422:	f04f 33ff 	mov.w	r3, #4294967295
 8008426:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008428:	687b      	ldr	r3, [r7, #4]
}
 800842a:	4618      	mov	r0, r3
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	2000a004 	.word	0x2000a004

0800843c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008442:	f3ef 8305 	mrs	r3, IPSR
 8008446:	603b      	str	r3, [r7, #0]
  return(result);
 8008448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <osKernelStart+0x1a>
    stat = osErrorISR;
 800844e:	f06f 0305 	mvn.w	r3, #5
 8008452:	607b      	str	r3, [r7, #4]
 8008454:	e010      	b.n	8008478 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008456:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <osKernelStart+0x48>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d109      	bne.n	8008472 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800845e:	f7ff ffbf 	bl	80083e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008462:	4b08      	ldr	r3, [pc, #32]	@ (8008484 <osKernelStart+0x48>)
 8008464:	2202      	movs	r2, #2
 8008466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008468:	f001 f8ee 	bl	8009648 <vTaskStartScheduler>
      stat = osOK;
 800846c:	2300      	movs	r3, #0
 800846e:	607b      	str	r3, [r7, #4]
 8008470:	e002      	b.n	8008478 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008478:	687b      	ldr	r3, [r7, #4]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	2000a004 	.word	0x2000a004

08008488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	@ 0x38
 800848c:	af04      	add	r7, sp, #16
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008498:	f3ef 8305 	mrs	r3, IPSR
 800849c:	617b      	str	r3, [r7, #20]
  return(result);
 800849e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d17e      	bne.n	80085a2 <osThreadNew+0x11a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d07b      	beq.n	80085a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084aa:	2380      	movs	r3, #128	@ 0x80
 80084ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084ae:	2318      	movs	r3, #24
 80084b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80084b6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d045      	beq.n	800854e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <osThreadNew+0x48>
        name = attr->name;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <osThreadNew+0x6e>
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	2b38      	cmp	r3, #56	@ 0x38
 80084e8:	d805      	bhi.n	80084f6 <osThreadNew+0x6e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <osThreadNew+0x72>
        return (NULL);
 80084f6:	2300      	movs	r3, #0
 80084f8:	e054      	b.n	80085a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00e      	beq.n	8008530 <osThreadNew+0xa8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b5b      	cmp	r3, #91	@ 0x5b
 8008518:	d90a      	bls.n	8008530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800851e:	2b00      	cmp	r3, #0
 8008520:	d006      	beq.n	8008530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <osThreadNew+0xa8>
        mem = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	e010      	b.n	8008552 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10c      	bne.n	8008552 <osThreadNew+0xca>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d108      	bne.n	8008552 <osThreadNew+0xca>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <osThreadNew+0xca>
          mem = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	61bb      	str	r3, [r7, #24]
 800854c:	e001      	b.n	8008552 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d110      	bne.n	800857a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008560:	9202      	str	r2, [sp, #8]
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6a3a      	ldr	r2, [r7, #32]
 800856c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fe1a 	bl	80091a8 <xTaskCreateStatic>
 8008574:	4603      	mov	r3, r0
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	e013      	b.n	80085a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d110      	bne.n	80085a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	b29a      	uxth	r2, r3
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fe68 	bl	8009268 <xTaskCreate>
 8008598:	4603      	mov	r3, r0
 800859a:	2b01      	cmp	r3, #1
 800859c:	d001      	beq.n	80085a2 <osThreadNew+0x11a>
            hTask = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085a2:	693b      	ldr	r3, [r7, #16]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3728      	adds	r7, #40	@ 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b4:	f3ef 8305 	mrs	r3, IPSR
 80085b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80085ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <osDelay+0x1c>
    stat = osErrorISR;
 80085c0:	f06f 0305 	mvn.w	r3, #5
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	e007      	b.n	80085d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f802 	bl	80095dc <vTaskDelay>
    }
  }

  return (stat);
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a07      	ldr	r2, [pc, #28]	@ (8008610 <vApplicationGetIdleTaskMemory+0x2c>)
 80085f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a06      	ldr	r2, [pc, #24]	@ (8008614 <vApplicationGetIdleTaskMemory+0x30>)
 80085fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2280      	movs	r2, #128	@ 0x80
 8008600:	601a      	str	r2, [r3, #0]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	2000a008 	.word	0x2000a008
 8008614:	2000a064 	.word	0x2000a064

08008618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4a07      	ldr	r2, [pc, #28]	@ (8008644 <vApplicationGetTimerTaskMemory+0x2c>)
 8008628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4a06      	ldr	r2, [pc, #24]	@ (8008648 <vApplicationGetTimerTaskMemory+0x30>)
 800862e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	2000a264 	.word	0x2000a264
 8008648:	2000a2c0 	.word	0x2000a2c0

0800864c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f103 0208 	add.w	r2, r3, #8
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f103 0208 	add.w	r2, r3, #8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f103 0208 	add.w	r2, r3, #8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d103      	bne.n	800870e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e00c      	b.n	8008728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3308      	adds	r3, #8
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e002      	b.n	800871c <vListInsert+0x2e>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	429a      	cmp	r2, r3
 8008726:	d2f6      	bcs.n	8008716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
}
 8008754:	bf00      	nop
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6892      	ldr	r2, [r2, #8]
 8008776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6852      	ldr	r2, [r2, #4]
 8008780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d103      	bne.n	8008794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	1e5a      	subs	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <xQueueGenericReset+0x2c>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	60bb      	str	r3, [r7, #8]
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087e0:	f002 f912 	bl	800aa08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ec:	68f9      	ldr	r1, [r7, #12]
 80087ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008810:	3b01      	subs	r3, #1
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	441a      	add	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	22ff      	movs	r2, #255	@ 0xff
 8008824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	22ff      	movs	r2, #255	@ 0xff
 800882c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d114      	bne.n	8008860 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d01a      	beq.n	8008874 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3310      	adds	r3, #16
 8008842:	4618      	mov	r0, r3
 8008844:	f001 f98e 	bl	8009b64 <xTaskRemoveFromEventList>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d012      	beq.n	8008874 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800884e:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <xQueueGenericReset+0xd0>)
 8008850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	e009      	b.n	8008874 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3310      	adds	r3, #16
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fef1 	bl	800864c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3324      	adds	r3, #36	@ 0x24
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff feec 	bl	800864c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008874:	f002 f8fa 	bl	800aa6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008878:	2301      	movs	r3, #1
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08e      	sub	sp, #56	@ 0x38
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10b      	bne.n	80088d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	e7fd      	b.n	80088ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <xQueueGenericCreateStatic+0x56>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <xQueueGenericCreateStatic+0x5a>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueGenericCreateStatic+0x5c>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	623b      	str	r3, [r7, #32]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <xQueueGenericCreateStatic+0x84>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <xQueueGenericCreateStatic+0x88>
 800890c:	2301      	movs	r3, #1
 800890e:	e000      	b.n	8008912 <xQueueGenericCreateStatic+0x8a>
 8008910:	2300      	movs	r3, #0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	61fb      	str	r3, [r7, #28]
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	e7fd      	b.n	800892a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800892e:	2350      	movs	r3, #80	@ 0x50
 8008930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b50      	cmp	r3, #80	@ 0x50
 8008936:	d00b      	beq.n	8008950 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	61bb      	str	r3, [r7, #24]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008950:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00d      	beq.n	8008978 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008964:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f805 	bl	8008982 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800897a:	4618      	mov	r0, r3
 800897c:	3730      	adds	r7, #48	@ 0x30
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	e002      	b.n	80089a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089b0:	2101      	movs	r1, #1
 80089b2:	69b8      	ldr	r0, [r7, #24]
 80089b4:	f7ff fefe 	bl	80087b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08e      	sub	sp, #56	@ 0x38
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089d6:	2300      	movs	r3, #0
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10b      	bne.n	80089fc <xQueueGenericSend+0x34>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <xQueueGenericSend+0x42>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <xQueueGenericSend+0x46>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueGenericSend+0x48>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <xQueueGenericSend+0x64>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d103      	bne.n	8008a3a <xQueueGenericSend+0x72>
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <xQueueGenericSend+0x76>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <xQueueGenericSend+0x78>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10b      	bne.n	8008a5c <xQueueGenericSend+0x94>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	623b      	str	r3, [r7, #32]
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a5c:	f001 fa6a 	bl	8009f34 <xTaskGetSchedulerState>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <xQueueGenericSend+0xa4>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <xQueueGenericSend+0xa8>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <xQueueGenericSend+0xaa>
 8008a70:	2300      	movs	r3, #0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	61fb      	str	r3, [r7, #28]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a8e:	f001 ffbb 	bl	800aa08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d302      	bcc.n	8008aa4 <xQueueGenericSend+0xdc>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d129      	bne.n	8008af8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	68b9      	ldr	r1, [r7, #8]
 8008aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aaa:	f000 fa0f 	bl	8008ecc <prvCopyDataToQueue>
 8008aae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d010      	beq.n	8008ada <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	3324      	adds	r3, #36	@ 0x24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 f851 	bl	8009b64 <xTaskRemoveFromEventList>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d013      	beq.n	8008af0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc8 <xQueueGenericSend+0x200>)
 8008aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	e00a      	b.n	8008af0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ae0:	4b39      	ldr	r3, [pc, #228]	@ (8008bc8 <xQueueGenericSend+0x200>)
 8008ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008af0:	f001 ffbc 	bl	800aa6c <vPortExitCritical>
				return pdPASS;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e063      	b.n	8008bc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d103      	bne.n	8008b06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008afe:	f001 ffb5 	bl	800aa6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e05c      	b.n	8008bc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d106      	bne.n	8008b1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b0c:	f107 0314 	add.w	r3, r7, #20
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 f8b3 	bl	8009c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b16:	2301      	movs	r3, #1
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b1a:	f001 ffa7 	bl	800aa6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b1e:	f000 fdfb 	bl	8009718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b22:	f001 ff71 	bl	800aa08 <vPortEnterCritical>
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b32:	d103      	bne.n	8008b3c <xQueueGenericSend+0x174>
 8008b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d103      	bne.n	8008b52 <xQueueGenericSend+0x18a>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b52:	f001 ff8b 	bl	800aa6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b56:	1d3a      	adds	r2, r7, #4
 8008b58:	f107 0314 	add.w	r3, r7, #20
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 f8a2 	bl	8009ca8 <xTaskCheckForTimeOut>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d124      	bne.n	8008bb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b6c:	f000 faa6 	bl	80090bc <prvIsQueueFull>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d018      	beq.n	8008ba8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	3310      	adds	r3, #16
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 ff9e 	bl	8009ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b86:	f000 fa31 	bl	8008fec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b8a:	f000 fdd3 	bl	8009734 <xTaskResumeAll>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f47f af7c 	bne.w	8008a8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b96:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc8 <xQueueGenericSend+0x200>)
 8008b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	e772      	b.n	8008a8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008baa:	f000 fa1f 	bl	8008fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bae:	f000 fdc1 	bl	8009734 <xTaskResumeAll>
 8008bb2:	e76c      	b.n	8008a8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bb6:	f000 fa19 	bl	8008fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bba:	f000 fdbb 	bl	8009734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3738      	adds	r7, #56	@ 0x38
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b090      	sub	sp, #64	@ 0x40
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10b      	bne.n	8008bfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bf6:	bf00      	nop
 8008bf8:	bf00      	nop
 8008bfa:	e7fd      	b.n	8008bf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <xQueueGenericSendFromISR+0x3e>
 8008c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <xQueueGenericSendFromISR+0x42>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <xQueueGenericSendFromISR+0x44>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	e7fd      	b.n	8008c28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d103      	bne.n	8008c3a <xQueueGenericSendFromISR+0x6e>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <xQueueGenericSendFromISR+0x72>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <xQueueGenericSendFromISR+0x74>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10b      	bne.n	8008c5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	623b      	str	r3, [r7, #32]
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	e7fd      	b.n	8008c58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c5c:	f001 ffb4 	bl	800abc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c60:	f3ef 8211 	mrs	r2, BASEPRI
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	61fa      	str	r2, [r7, #28]
 8008c76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d302      	bcc.n	8008c8e <xQueueGenericSendFromISR+0xc2>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d12f      	bne.n	8008cee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ca4:	f000 f912 	bl	8008ecc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ca8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb0:	d112      	bne.n	8008cd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d016      	beq.n	8008ce8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	3324      	adds	r3, #36	@ 0x24
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 ff50 	bl	8009b64 <xTaskRemoveFromEventList>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00e      	beq.n	8008ce8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	e007      	b.n	8008ce8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cdc:	3301      	adds	r3, #1
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	b25a      	sxtb	r2, r3
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cec:	e001      	b.n	8008cf2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3740      	adds	r7, #64	@ 0x40
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08c      	sub	sp, #48	@ 0x30
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10b      	bne.n	8008d3a <xQueueReceive+0x32>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	623b      	str	r3, [r7, #32]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <xQueueReceive+0x40>
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <xQueueReceive+0x44>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <xQueueReceive+0x46>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <xQueueReceive+0x62>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	61fb      	str	r3, [r7, #28]
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d6a:	f001 f8e3 	bl	8009f34 <xTaskGetSchedulerState>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d102      	bne.n	8008d7a <xQueueReceive+0x72>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <xQueueReceive+0x76>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <xQueueReceive+0x78>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10b      	bne.n	8008d9c <xQueueReceive+0x94>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	61bb      	str	r3, [r7, #24]
}
 8008d96:	bf00      	nop
 8008d98:	bf00      	nop
 8008d9a:	e7fd      	b.n	8008d98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d9c:	f001 fe34 	bl	800aa08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01f      	beq.n	8008dec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008db0:	f000 f8f6 	bl	8008fa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	1e5a      	subs	r2, r3, #1
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00f      	beq.n	8008de4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fecb 	bl	8009b64 <xTaskRemoveFromEventList>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d007      	beq.n	8008de4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ec8 <xQueueReceive+0x1c0>)
 8008dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008de4:	f001 fe42 	bl	800aa6c <vPortExitCritical>
				return pdPASS;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e069      	b.n	8008ec0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d103      	bne.n	8008dfa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008df2:	f001 fe3b 	bl	800aa6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e062      	b.n	8008ec0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d106      	bne.n	8008e0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e00:	f107 0310 	add.w	r3, r7, #16
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 ff39 	bl	8009c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e0e:	f001 fe2d 	bl	800aa6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e12:	f000 fc81 	bl	8009718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e16:	f001 fdf7 	bl	800aa08 <vPortEnterCritical>
 8008e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e20:	b25b      	sxtb	r3, r3
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d103      	bne.n	8008e30 <xQueueReceive+0x128>
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3c:	d103      	bne.n	8008e46 <xQueueReceive+0x13e>
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e46:	f001 fe11 	bl	800aa6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e4a:	1d3a      	adds	r2, r7, #4
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 ff28 	bl	8009ca8 <xTaskCheckForTimeOut>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d123      	bne.n	8008ea6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e60:	f000 f916 	bl	8009090 <prvIsQueueEmpty>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d017      	beq.n	8008e9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	3324      	adds	r3, #36	@ 0x24
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fe24 	bl	8009ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7a:	f000 f8b7 	bl	8008fec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e7e:	f000 fc59 	bl	8009734 <xTaskResumeAll>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d189      	bne.n	8008d9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e88:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec8 <xQueueReceive+0x1c0>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	e780      	b.n	8008d9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e9c:	f000 f8a6 	bl	8008fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ea0:	f000 fc48 	bl	8009734 <xTaskResumeAll>
 8008ea4:	e77a      	b.n	8008d9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea8:	f000 f8a0 	bl	8008fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eac:	f000 fc42 	bl	8009734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eb2:	f000 f8ed 	bl	8009090 <prvIsQueueEmpty>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f43f af6f 	beq.w	8008d9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ebe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3730      	adds	r7, #48	@ 0x30
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10d      	bne.n	8008f06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d14d      	bne.n	8008f8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 f83a 	bl	8009f70 <xTaskPriorityDisinherit>
 8008efc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	609a      	str	r2, [r3, #8]
 8008f04:	e043      	b.n	8008f8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d119      	bne.n	8008f40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6858      	ldr	r0, [r3, #4]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	461a      	mov	r2, r3
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	f010 fd3d 	bl	8019996 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f24:	441a      	add	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d32b      	bcc.n	8008f8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	605a      	str	r2, [r3, #4]
 8008f3e:	e026      	b.n	8008f8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68d8      	ldr	r0, [r3, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f48:	461a      	mov	r2, r3
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	f010 fd23 	bl	8019996 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f58:	425b      	negs	r3, r3
 8008f5a:	441a      	add	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d207      	bcs.n	8008f7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f74:	425b      	negs	r3, r3
 8008f76:	441a      	add	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d105      	bne.n	8008f8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f96:	697b      	ldr	r3, [r7, #20]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d018      	beq.n	8008fe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fba:	441a      	add	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d303      	bcc.n	8008fd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68d9      	ldr	r1, [r3, #12]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6838      	ldr	r0, [r7, #0]
 8008fe0:	f010 fcd9 	bl	8019996 <memcpy>
	}
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ff4:	f001 fd08 	bl	800aa08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ffe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009000:	e011      	b.n	8009026 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009006:	2b00      	cmp	r3, #0
 8009008:	d012      	beq.n	8009030 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3324      	adds	r3, #36	@ 0x24
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fda8 	bl	8009b64 <xTaskRemoveFromEventList>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800901a:	f000 fea9 	bl	8009d70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	3b01      	subs	r3, #1
 8009022:	b2db      	uxtb	r3, r3
 8009024:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dce9      	bgt.n	8009002 <prvUnlockQueue+0x16>
 800902e:	e000      	b.n	8009032 <prvUnlockQueue+0x46>
					break;
 8009030:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	22ff      	movs	r2, #255	@ 0xff
 8009036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800903a:	f001 fd17 	bl	800aa6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800903e:	f001 fce3 	bl	800aa08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009048:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800904a:	e011      	b.n	8009070 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d012      	beq.n	800907a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3310      	adds	r3, #16
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fd83 	bl	8009b64 <xTaskRemoveFromEventList>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009064:	f000 fe84 	bl	8009d70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	3b01      	subs	r3, #1
 800906c:	b2db      	uxtb	r3, r3
 800906e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dce9      	bgt.n	800904c <prvUnlockQueue+0x60>
 8009078:	e000      	b.n	800907c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800907a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	22ff      	movs	r2, #255	@ 0xff
 8009080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009084:	f001 fcf2 	bl	800aa6c <vPortExitCritical>
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009098:	f001 fcb6 	bl	800aa08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e001      	b.n	80090ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090aa:	2300      	movs	r3, #0
 80090ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ae:	f001 fcdd 	bl	800aa6c <vPortExitCritical>

	return xReturn;
 80090b2:	68fb      	ldr	r3, [r7, #12]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090c4:	f001 fca0 	bl	800aa08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d102      	bne.n	80090da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	e001      	b.n	80090de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090de:	f001 fcc5 	bl	800aa6c <vPortExitCritical>

	return xReturn;
 80090e2:	68fb      	ldr	r3, [r7, #12]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	e014      	b.n	8009126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090fc:	4a0f      	ldr	r2, [pc, #60]	@ (800913c <vQueueAddToRegistry+0x50>)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009108:	490c      	ldr	r1, [pc, #48]	@ (800913c <vQueueAddToRegistry+0x50>)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009112:	4a0a      	ldr	r2, [pc, #40]	@ (800913c <vQueueAddToRegistry+0x50>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	4413      	add	r3, r2
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800911e:	e006      	b.n	800912e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3301      	adds	r3, #1
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b07      	cmp	r3, #7
 800912a:	d9e7      	bls.n	80090fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	2000a6c0 	.word	0x2000a6c0

08009140 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009150:	f001 fc5a 	bl	800aa08 <vPortEnterCritical>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800915a:	b25b      	sxtb	r3, r3
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d103      	bne.n	800916a <vQueueWaitForMessageRestricted+0x2a>
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009170:	b25b      	sxtb	r3, r3
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d103      	bne.n	8009180 <vQueueWaitForMessageRestricted+0x40>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009180:	f001 fc74 	bl	800aa6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	3324      	adds	r3, #36	@ 0x24
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fcb9 	bl	8009b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800919a:	6978      	ldr	r0, [r7, #20]
 800919c:	f7ff ff26 	bl	8008fec <prvUnlockQueue>
	}
 80091a0:	bf00      	nop
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08e      	sub	sp, #56	@ 0x38
 80091ac:	af04      	add	r7, sp, #16
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10b      	bne.n	80091d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	623b      	str	r3, [r7, #32]
}
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
 80091d2:	e7fd      	b.n	80091d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	61fb      	str	r3, [r7, #28]
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	e7fd      	b.n	80091ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091f2:	235c      	movs	r3, #92	@ 0x5c
 80091f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80091fa:	d00b      	beq.n	8009214 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	61bb      	str	r3, [r7, #24]
}
 800920e:	bf00      	nop
 8009210:	bf00      	nop
 8009212:	e7fd      	b.n	8009210 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009214:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01e      	beq.n	800925a <xTaskCreateStatic+0xb2>
 800921c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01b      	beq.n	800925a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800922a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	2202      	movs	r2, #2
 8009230:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009234:	2300      	movs	r3, #0
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	9302      	str	r3, [sp, #8]
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f850 	bl	80092f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009252:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009254:	f000 f8de 	bl	8009414 <prvAddNewTaskToReadyList>
 8009258:	e001      	b.n	800925e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800925e:	697b      	ldr	r3, [r7, #20]
	}
 8009260:	4618      	mov	r0, r3
 8009262:	3728      	adds	r7, #40	@ 0x28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08c      	sub	sp, #48	@ 0x30
 800926c:	af04      	add	r7, sp, #16
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	4613      	mov	r3, r2
 8009276:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4618      	mov	r0, r3
 800927e:	f001 fce5 	bl	800ac4c <pvPortMalloc>
 8009282:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00e      	beq.n	80092a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800928a:	205c      	movs	r0, #92	@ 0x5c
 800928c:	f001 fcde 	bl	800ac4c <pvPortMalloc>
 8009290:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	631a      	str	r2, [r3, #48]	@ 0x30
 800929e:	e005      	b.n	80092ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092a0:	6978      	ldr	r0, [r7, #20]
 80092a2:	f001 fda1 	bl	800ade8 <vPortFree>
 80092a6:	e001      	b.n	80092ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d017      	beq.n	80092e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	2300      	movs	r3, #0
 80092be:	9303      	str	r3, [sp, #12]
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	9302      	str	r3, [sp, #8]
 80092c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 f80e 	bl	80092f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092d6:	69f8      	ldr	r0, [r7, #28]
 80092d8:	f000 f89c 	bl	8009414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092dc:	2301      	movs	r3, #1
 80092de:	61bb      	str	r3, [r7, #24]
 80092e0:	e002      	b.n	80092e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092e2:	f04f 33ff 	mov.w	r3, #4294967295
 80092e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092e8:	69bb      	ldr	r3, [r7, #24]
	}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b088      	sub	sp, #32
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	461a      	mov	r2, r3
 800930a:	21a5      	movs	r1, #165	@ 0xa5
 800930c:	f010 fa64 	bl	80197d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800931a:	3b01      	subs	r3, #1
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	f023 0307 	bic.w	r3, r3, #7
 8009328:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	f003 0307 	and.w	r3, r3, #7
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	617b      	str	r3, [r7, #20]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01f      	beq.n	8009392 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	e012      	b.n	800937e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	7819      	ldrb	r1, [r3, #0]
 8009360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	4413      	add	r3, r2
 8009366:	3334      	adds	r3, #52	@ 0x34
 8009368:	460a      	mov	r2, r1
 800936a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d006      	beq.n	8009386 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	3301      	adds	r3, #1
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b0f      	cmp	r3, #15
 8009382:	d9e9      	bls.n	8009358 <prvInitialiseNewTask+0x66>
 8009384:	e000      	b.n	8009388 <prvInitialiseNewTask+0x96>
			{
				break;
 8009386:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009390:	e003      	b.n	800939a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800939a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939c:	2b37      	cmp	r3, #55	@ 0x37
 800939e:	d901      	bls.n	80093a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093a0:	2337      	movs	r3, #55	@ 0x37
 80093a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	2200      	movs	r2, #0
 80093b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	3304      	adds	r3, #4
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff f966 	bl	800868c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	3318      	adds	r3, #24
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff f961 	bl	800868c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	2200      	movs	r2, #0
 80093e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	68f9      	ldr	r1, [r7, #12]
 80093f2:	69b8      	ldr	r0, [r7, #24]
 80093f4:	f001 f9da 	bl	800a7ac <pxPortInitialiseStack>
 80093f8:	4602      	mov	r2, r0
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800940a:	bf00      	nop
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800941c:	f001 faf4 	bl	800aa08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009420:	4b2d      	ldr	r3, [pc, #180]	@ (80094d8 <prvAddNewTaskToReadyList+0xc4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	4a2c      	ldr	r2, [pc, #176]	@ (80094d8 <prvAddNewTaskToReadyList+0xc4>)
 8009428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800942a:	4b2c      	ldr	r3, [pc, #176]	@ (80094dc <prvAddNewTaskToReadyList+0xc8>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009432:	4a2a      	ldr	r2, [pc, #168]	@ (80094dc <prvAddNewTaskToReadyList+0xc8>)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009438:	4b27      	ldr	r3, [pc, #156]	@ (80094d8 <prvAddNewTaskToReadyList+0xc4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d110      	bne.n	8009462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009440:	f000 fcba 	bl	8009db8 <prvInitialiseTaskLists>
 8009444:	e00d      	b.n	8009462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009446:	4b26      	ldr	r3, [pc, #152]	@ (80094e0 <prvAddNewTaskToReadyList+0xcc>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800944e:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <prvAddNewTaskToReadyList+0xc8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009458:	429a      	cmp	r2, r3
 800945a:	d802      	bhi.n	8009462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800945c:	4a1f      	ldr	r2, [pc, #124]	@ (80094dc <prvAddNewTaskToReadyList+0xc8>)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009462:	4b20      	ldr	r3, [pc, #128]	@ (80094e4 <prvAddNewTaskToReadyList+0xd0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	4a1e      	ldr	r2, [pc, #120]	@ (80094e4 <prvAddNewTaskToReadyList+0xd0>)
 800946a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800946c:	4b1d      	ldr	r3, [pc, #116]	@ (80094e4 <prvAddNewTaskToReadyList+0xd0>)
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009478:	4b1b      	ldr	r3, [pc, #108]	@ (80094e8 <prvAddNewTaskToReadyList+0xd4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	429a      	cmp	r2, r3
 800947e:	d903      	bls.n	8009488 <prvAddNewTaskToReadyList+0x74>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	4a18      	ldr	r2, [pc, #96]	@ (80094e8 <prvAddNewTaskToReadyList+0xd4>)
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4a15      	ldr	r2, [pc, #84]	@ (80094ec <prvAddNewTaskToReadyList+0xd8>)
 8009496:	441a      	add	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3304      	adds	r3, #4
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7ff f901 	bl	80086a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094a4:	f001 fae2 	bl	800aa6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094a8:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <prvAddNewTaskToReadyList+0xcc>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00e      	beq.n	80094ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094b0:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <prvAddNewTaskToReadyList+0xc8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d207      	bcs.n	80094ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094be:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <prvAddNewTaskToReadyList+0xdc>)
 80094c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	2000abd4 	.word	0x2000abd4
 80094dc:	2000a700 	.word	0x2000a700
 80094e0:	2000abe0 	.word	0x2000abe0
 80094e4:	2000abf0 	.word	0x2000abf0
 80094e8:	2000abdc 	.word	0x2000abdc
 80094ec:	2000a704 	.word	0x2000a704
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80094fc:	f001 fa84 	bl	800aa08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <vTaskDelete+0x18>
 8009506:	4b2d      	ldr	r3, [pc, #180]	@ (80095bc <vTaskDelete+0xc8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	e000      	b.n	800950e <vTaskDelete+0x1a>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3304      	adds	r3, #4
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff f923 	bl	8008760 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3318      	adds	r3, #24
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff f91a 	bl	8008760 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800952c:	4b24      	ldr	r3, [pc, #144]	@ (80095c0 <vTaskDelete+0xcc>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3301      	adds	r3, #1
 8009532:	4a23      	ldr	r2, [pc, #140]	@ (80095c0 <vTaskDelete+0xcc>)
 8009534:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009536:	4b21      	ldr	r3, [pc, #132]	@ (80095bc <vTaskDelete+0xc8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	429a      	cmp	r2, r3
 800953e:	d10b      	bne.n	8009558 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3304      	adds	r3, #4
 8009544:	4619      	mov	r1, r3
 8009546:	481f      	ldr	r0, [pc, #124]	@ (80095c4 <vTaskDelete+0xd0>)
 8009548:	f7ff f8ad 	bl	80086a6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800954c:	4b1e      	ldr	r3, [pc, #120]	@ (80095c8 <vTaskDelete+0xd4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	4a1d      	ldr	r2, [pc, #116]	@ (80095c8 <vTaskDelete+0xd4>)
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	e009      	b.n	800956c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009558:	4b1c      	ldr	r3, [pc, #112]	@ (80095cc <vTaskDelete+0xd8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3b01      	subs	r3, #1
 800955e:	4a1b      	ldr	r2, [pc, #108]	@ (80095cc <vTaskDelete+0xd8>)
 8009560:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fc96 	bl	8009e94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009568:	f000 fcc4 	bl	8009ef4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800956c:	f001 fa7e 	bl	800aa6c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009570:	4b17      	ldr	r3, [pc, #92]	@ (80095d0 <vTaskDelete+0xdc>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01c      	beq.n	80095b2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8009578:	4b10      	ldr	r3, [pc, #64]	@ (80095bc <vTaskDelete+0xc8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	429a      	cmp	r2, r3
 8009580:	d117      	bne.n	80095b2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009582:	4b14      	ldr	r3, [pc, #80]	@ (80095d4 <vTaskDelete+0xe0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00b      	beq.n	80095a2 <vTaskDelete+0xae>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	60bb      	str	r3, [r7, #8]
}
 800959c:	bf00      	nop
 800959e:	bf00      	nop
 80095a0:	e7fd      	b.n	800959e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80095a2:	4b0d      	ldr	r3, [pc, #52]	@ (80095d8 <vTaskDelete+0xe4>)
 80095a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	2000a700 	.word	0x2000a700
 80095c0:	2000abf0 	.word	0x2000abf0
 80095c4:	2000aba8 	.word	0x2000aba8
 80095c8:	2000abbc 	.word	0x2000abbc
 80095cc:	2000abd4 	.word	0x2000abd4
 80095d0:	2000abe0 	.word	0x2000abe0
 80095d4:	2000abfc 	.word	0x2000abfc
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d018      	beq.n	8009620 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095ee:	4b14      	ldr	r3, [pc, #80]	@ (8009640 <vTaskDelay+0x64>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <vTaskDelay+0x32>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	60bb      	str	r3, [r7, #8]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800960e:	f000 f883 	bl	8009718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009612:	2100      	movs	r1, #0
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fd1b 	bl	800a050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800961a:	f000 f88b 	bl	8009734 <xTaskResumeAll>
 800961e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d107      	bne.n	8009636 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009626:	4b07      	ldr	r3, [pc, #28]	@ (8009644 <vTaskDelay+0x68>)
 8009628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009636:	bf00      	nop
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	2000abfc 	.word	0x2000abfc
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	@ 0x28
 800964c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009656:	463a      	mov	r2, r7
 8009658:	1d39      	adds	r1, r7, #4
 800965a:	f107 0308 	add.w	r3, r7, #8
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe ffc0 	bl	80085e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	9202      	str	r2, [sp, #8]
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	2300      	movs	r3, #0
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	2300      	movs	r3, #0
 8009674:	460a      	mov	r2, r1
 8009676:	4922      	ldr	r1, [pc, #136]	@ (8009700 <vTaskStartScheduler+0xb8>)
 8009678:	4822      	ldr	r0, [pc, #136]	@ (8009704 <vTaskStartScheduler+0xbc>)
 800967a:	f7ff fd95 	bl	80091a8 <xTaskCreateStatic>
 800967e:	4603      	mov	r3, r0
 8009680:	4a21      	ldr	r2, [pc, #132]	@ (8009708 <vTaskStartScheduler+0xc0>)
 8009682:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009684:	4b20      	ldr	r3, [pc, #128]	@ (8009708 <vTaskStartScheduler+0xc0>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800968c:	2301      	movs	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	e001      	b.n	8009696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009692:	2300      	movs	r3, #0
 8009694:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d102      	bne.n	80096a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800969c:	f000 fd2c 	bl	800a0f8 <xTimerCreateTimerTask>
 80096a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d116      	bne.n	80096d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	613b      	str	r3, [r7, #16]
}
 80096ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096bc:	4b13      	ldr	r3, [pc, #76]	@ (800970c <vTaskStartScheduler+0xc4>)
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096c4:	4b12      	ldr	r3, [pc, #72]	@ (8009710 <vTaskStartScheduler+0xc8>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096ca:	4b12      	ldr	r3, [pc, #72]	@ (8009714 <vTaskStartScheduler+0xcc>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096d0:	f001 f8f6 	bl	800a8c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096d4:	e00f      	b.n	80096f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096dc:	d10b      	bne.n	80096f6 <vTaskStartScheduler+0xae>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60fb      	str	r3, [r7, #12]
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	e7fd      	b.n	80096f2 <vTaskStartScheduler+0xaa>
}
 80096f6:	bf00      	nop
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	0801ba70 	.word	0x0801ba70
 8009704:	08009d89 	.word	0x08009d89
 8009708:	2000abf8 	.word	0x2000abf8
 800970c:	2000abf4 	.word	0x2000abf4
 8009710:	2000abe0 	.word	0x2000abe0
 8009714:	2000abd8 	.word	0x2000abd8

08009718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800971c:	4b04      	ldr	r3, [pc, #16]	@ (8009730 <vTaskSuspendAll+0x18>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	4a03      	ldr	r2, [pc, #12]	@ (8009730 <vTaskSuspendAll+0x18>)
 8009724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009726:	bf00      	nop
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	2000abfc 	.word	0x2000abfc

08009734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009742:	4b42      	ldr	r3, [pc, #264]	@ (800984c <xTaskResumeAll+0x118>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10b      	bne.n	8009762 <xTaskResumeAll+0x2e>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	603b      	str	r3, [r7, #0]
}
 800975c:	bf00      	nop
 800975e:	bf00      	nop
 8009760:	e7fd      	b.n	800975e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009762:	f001 f951 	bl	800aa08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009766:	4b39      	ldr	r3, [pc, #228]	@ (800984c <xTaskResumeAll+0x118>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3b01      	subs	r3, #1
 800976c:	4a37      	ldr	r2, [pc, #220]	@ (800984c <xTaskResumeAll+0x118>)
 800976e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009770:	4b36      	ldr	r3, [pc, #216]	@ (800984c <xTaskResumeAll+0x118>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d162      	bne.n	800983e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009778:	4b35      	ldr	r3, [pc, #212]	@ (8009850 <xTaskResumeAll+0x11c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d05e      	beq.n	800983e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009780:	e02f      	b.n	80097e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009782:	4b34      	ldr	r3, [pc, #208]	@ (8009854 <xTaskResumeAll+0x120>)
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3318      	adds	r3, #24
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe ffe6 	bl	8008760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3304      	adds	r3, #4
 8009798:	4618      	mov	r0, r3
 800979a:	f7fe ffe1 	bl	8008760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009858 <xTaskResumeAll+0x124>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d903      	bls.n	80097b2 <xTaskResumeAll+0x7e>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009858 <xTaskResumeAll+0x124>)
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4a27      	ldr	r2, [pc, #156]	@ (800985c <xTaskResumeAll+0x128>)
 80097c0:	441a      	add	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7fe ff6c 	bl	80086a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d2:	4b23      	ldr	r3, [pc, #140]	@ (8009860 <xTaskResumeAll+0x12c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d8:	429a      	cmp	r2, r3
 80097da:	d302      	bcc.n	80097e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80097dc:	4b21      	ldr	r3, [pc, #132]	@ (8009864 <xTaskResumeAll+0x130>)
 80097de:	2201      	movs	r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009854 <xTaskResumeAll+0x120>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1cb      	bne.n	8009782 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097f0:	f000 fb80 	bl	8009ef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009868 <xTaskResumeAll+0x134>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d010      	beq.n	8009822 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009800:	f000 f846 	bl	8009890 <xTaskIncrementTick>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800980a:	4b16      	ldr	r3, [pc, #88]	@ (8009864 <xTaskResumeAll+0x130>)
 800980c:	2201      	movs	r2, #1
 800980e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3b01      	subs	r3, #1
 8009814:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f1      	bne.n	8009800 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800981c:	4b12      	ldr	r3, [pc, #72]	@ (8009868 <xTaskResumeAll+0x134>)
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009822:	4b10      	ldr	r3, [pc, #64]	@ (8009864 <xTaskResumeAll+0x130>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d009      	beq.n	800983e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800982a:	2301      	movs	r3, #1
 800982c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800982e:	4b0f      	ldr	r3, [pc, #60]	@ (800986c <xTaskResumeAll+0x138>)
 8009830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800983e:	f001 f915 	bl	800aa6c <vPortExitCritical>

	return xAlreadyYielded;
 8009842:	68bb      	ldr	r3, [r7, #8]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	2000abfc 	.word	0x2000abfc
 8009850:	2000abd4 	.word	0x2000abd4
 8009854:	2000ab94 	.word	0x2000ab94
 8009858:	2000abdc 	.word	0x2000abdc
 800985c:	2000a704 	.word	0x2000a704
 8009860:	2000a700 	.word	0x2000a700
 8009864:	2000abe8 	.word	0x2000abe8
 8009868:	2000abe4 	.word	0x2000abe4
 800986c:	e000ed04 	.word	0xe000ed04

08009870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009876:	4b05      	ldr	r3, [pc, #20]	@ (800988c <xTaskGetTickCount+0x1c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800987c:	687b      	ldr	r3, [r7, #4]
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	2000abd8 	.word	0x2000abd8

08009890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009896:	2300      	movs	r3, #0
 8009898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800989a:	4b4f      	ldr	r3, [pc, #316]	@ (80099d8 <xTaskIncrementTick+0x148>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f040 8090 	bne.w	80099c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098a4:	4b4d      	ldr	r3, [pc, #308]	@ (80099dc <xTaskIncrementTick+0x14c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098ac:	4a4b      	ldr	r2, [pc, #300]	@ (80099dc <xTaskIncrementTick+0x14c>)
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d121      	bne.n	80098fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098b8:	4b49      	ldr	r3, [pc, #292]	@ (80099e0 <xTaskIncrementTick+0x150>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <xTaskIncrementTick+0x4a>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	603b      	str	r3, [r7, #0]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <xTaskIncrementTick+0x46>
 80098da:	4b41      	ldr	r3, [pc, #260]	@ (80099e0 <xTaskIncrementTick+0x150>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	4b40      	ldr	r3, [pc, #256]	@ (80099e4 <xTaskIncrementTick+0x154>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a3e      	ldr	r2, [pc, #248]	@ (80099e0 <xTaskIncrementTick+0x150>)
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	4a3e      	ldr	r2, [pc, #248]	@ (80099e4 <xTaskIncrementTick+0x154>)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	4b3e      	ldr	r3, [pc, #248]	@ (80099e8 <xTaskIncrementTick+0x158>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a3c      	ldr	r2, [pc, #240]	@ (80099e8 <xTaskIncrementTick+0x158>)
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	f000 fafc 	bl	8009ef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098fc:	4b3b      	ldr	r3, [pc, #236]	@ (80099ec <xTaskIncrementTick+0x15c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	429a      	cmp	r2, r3
 8009904:	d349      	bcc.n	800999a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009906:	4b36      	ldr	r3, [pc, #216]	@ (80099e0 <xTaskIncrementTick+0x150>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009910:	4b36      	ldr	r3, [pc, #216]	@ (80099ec <xTaskIncrementTick+0x15c>)
 8009912:	f04f 32ff 	mov.w	r2, #4294967295
 8009916:	601a      	str	r2, [r3, #0]
					break;
 8009918:	e03f      	b.n	800999a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991a:	4b31      	ldr	r3, [pc, #196]	@ (80099e0 <xTaskIncrementTick+0x150>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	429a      	cmp	r2, r3
 8009930:	d203      	bcs.n	800993a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009932:	4a2e      	ldr	r2, [pc, #184]	@ (80099ec <xTaskIncrementTick+0x15c>)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009938:	e02f      	b.n	800999a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	3304      	adds	r3, #4
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe ff0e 	bl	8008760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	3318      	adds	r3, #24
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe ff05 	bl	8008760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995a:	4b25      	ldr	r3, [pc, #148]	@ (80099f0 <xTaskIncrementTick+0x160>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d903      	bls.n	800996a <xTaskIncrementTick+0xda>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	4a22      	ldr	r2, [pc, #136]	@ (80099f0 <xTaskIncrementTick+0x160>)
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4a1f      	ldr	r2, [pc, #124]	@ (80099f4 <xTaskIncrementTick+0x164>)
 8009978:	441a      	add	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	3304      	adds	r3, #4
 800997e:	4619      	mov	r1, r3
 8009980:	4610      	mov	r0, r2
 8009982:	f7fe fe90 	bl	80086a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998a:	4b1b      	ldr	r3, [pc, #108]	@ (80099f8 <xTaskIncrementTick+0x168>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009990:	429a      	cmp	r2, r3
 8009992:	d3b8      	bcc.n	8009906 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009994:	2301      	movs	r3, #1
 8009996:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009998:	e7b5      	b.n	8009906 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800999a:	4b17      	ldr	r3, [pc, #92]	@ (80099f8 <xTaskIncrementTick+0x168>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a0:	4914      	ldr	r1, [pc, #80]	@ (80099f4 <xTaskIncrementTick+0x164>)
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	440b      	add	r3, r1
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d901      	bls.n	80099b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099b2:	2301      	movs	r3, #1
 80099b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099b6:	4b11      	ldr	r3, [pc, #68]	@ (80099fc <xTaskIncrementTick+0x16c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d007      	beq.n	80099ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80099be:	2301      	movs	r3, #1
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	e004      	b.n	80099ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a00 <xTaskIncrementTick+0x170>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009a00 <xTaskIncrementTick+0x170>)
 80099cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099ce:	697b      	ldr	r3, [r7, #20]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	2000abfc 	.word	0x2000abfc
 80099dc:	2000abd8 	.word	0x2000abd8
 80099e0:	2000ab8c 	.word	0x2000ab8c
 80099e4:	2000ab90 	.word	0x2000ab90
 80099e8:	2000abec 	.word	0x2000abec
 80099ec:	2000abf4 	.word	0x2000abf4
 80099f0:	2000abdc 	.word	0x2000abdc
 80099f4:	2000a704 	.word	0x2000a704
 80099f8:	2000a700 	.word	0x2000a700
 80099fc:	2000abe8 	.word	0x2000abe8
 8009a00:	2000abe4 	.word	0x2000abe4

08009a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a0a:	4b28      	ldr	r3, [pc, #160]	@ (8009aac <vTaskSwitchContext+0xa8>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a12:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <vTaskSwitchContext+0xac>)
 8009a14:	2201      	movs	r2, #1
 8009a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a18:	e042      	b.n	8009aa0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a1a:	4b25      	ldr	r3, [pc, #148]	@ (8009ab0 <vTaskSwitchContext+0xac>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	4b24      	ldr	r3, [pc, #144]	@ (8009ab4 <vTaskSwitchContext+0xb0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	e011      	b.n	8009a4c <vTaskSwitchContext+0x48>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <vTaskSwitchContext+0x42>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	607b      	str	r3, [r7, #4]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <vTaskSwitchContext+0x3e>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	491a      	ldr	r1, [pc, #104]	@ (8009ab8 <vTaskSwitchContext+0xb4>)
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0e3      	beq.n	8009a28 <vTaskSwitchContext+0x24>
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4a13      	ldr	r2, [pc, #76]	@ (8009ab8 <vTaskSwitchContext+0xb4>)
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60bb      	str	r3, [r7, #8]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	605a      	str	r2, [r3, #4]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	3308      	adds	r3, #8
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d104      	bne.n	8009a90 <vTaskSwitchContext+0x8c>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	605a      	str	r2, [r3, #4]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	4a09      	ldr	r2, [pc, #36]	@ (8009abc <vTaskSwitchContext+0xb8>)
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	4a06      	ldr	r2, [pc, #24]	@ (8009ab4 <vTaskSwitchContext+0xb0>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6013      	str	r3, [r2, #0]
}
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	2000abfc 	.word	0x2000abfc
 8009ab0:	2000abe8 	.word	0x2000abe8
 8009ab4:	2000abdc 	.word	0x2000abdc
 8009ab8:	2000a704 	.word	0x2000a704
 8009abc:	2000a700 	.word	0x2000a700

08009ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ae8:	4b07      	ldr	r3, [pc, #28]	@ (8009b08 <vTaskPlaceOnEventList+0x48>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3318      	adds	r3, #24
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7fe fdfc 	bl	80086ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009af6:	2101      	movs	r1, #1
 8009af8:	6838      	ldr	r0, [r7, #0]
 8009afa:	f000 faa9 	bl	800a050 <prvAddCurrentTaskToDelayedList>
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	2000a700 	.word	0x2000a700

08009b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	617b      	str	r3, [r7, #20]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b36:	4b0a      	ldr	r3, [pc, #40]	@ (8009b60 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3318      	adds	r3, #24
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f7fe fdb1 	bl	80086a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f000 fa7c 	bl	800a050 <prvAddCurrentTaskToDelayedList>
	}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	2000a700 	.word	0x2000a700

08009b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	60fb      	str	r3, [r7, #12]
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3318      	adds	r3, #24
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fde2 	bl	8008760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c14 <xTaskRemoveFromEventList+0xb0>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11d      	bne.n	8009be0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fdd9 	bl	8008760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb2:	4b19      	ldr	r3, [pc, #100]	@ (8009c18 <xTaskRemoveFromEventList+0xb4>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d903      	bls.n	8009bc2 <xTaskRemoveFromEventList+0x5e>
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	4a16      	ldr	r2, [pc, #88]	@ (8009c18 <xTaskRemoveFromEventList+0xb4>)
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4a13      	ldr	r2, [pc, #76]	@ (8009c1c <xTaskRemoveFromEventList+0xb8>)
 8009bd0:	441a      	add	r2, r3
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fe fd64 	bl	80086a6 <vListInsertEnd>
 8009bde:	e005      	b.n	8009bec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4619      	mov	r1, r3
 8009be6:	480e      	ldr	r0, [pc, #56]	@ (8009c20 <xTaskRemoveFromEventList+0xbc>)
 8009be8:	f7fe fd5d 	bl	80086a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c24 <xTaskRemoveFromEventList+0xc0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d905      	bls.n	8009c06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <xTaskRemoveFromEventList+0xc4>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e001      	b.n	8009c0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	2000abfc 	.word	0x2000abfc
 8009c18:	2000abdc 	.word	0x2000abdc
 8009c1c:	2000a704 	.word	0x2000a704
 8009c20:	2000ab94 	.word	0x2000ab94
 8009c24:	2000a700 	.word	0x2000a700
 8009c28:	2000abe8 	.word	0x2000abe8

08009c2c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	60fb      	str	r3, [r7, #12]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009c52:	f000 fed9 	bl	800aa08 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c56:	4b07      	ldr	r3, [pc, #28]	@ (8009c74 <vTaskSetTimeOutState+0x48>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009c5e:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <vTaskSetTimeOutState+0x4c>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009c66:	f000 ff01 	bl	800aa6c <vPortExitCritical>
}
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2000abec 	.word	0x2000abec
 8009c78:	2000abd8 	.word	0x2000abd8

08009c7c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c84:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <vTaskInternalSetTimeOutState+0x24>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ca4 <vTaskInternalSetTimeOutState+0x28>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	2000abec 	.word	0x2000abec
 8009ca4:	2000abd8 	.word	0x2000abd8

08009ca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10b      	bne.n	8009cd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	613b      	str	r3, [r7, #16]
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10b      	bne.n	8009cee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009cee:	f000 fe8b 	bl	800aa08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d68 <xTaskCheckForTimeOut+0xc0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0a:	d102      	bne.n	8009d12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	61fb      	str	r3, [r7, #28]
 8009d10:	e023      	b.n	8009d5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b15      	ldr	r3, [pc, #84]	@ (8009d6c <xTaskCheckForTimeOut+0xc4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d007      	beq.n	8009d2e <xTaskCheckForTimeOut+0x86>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d302      	bcc.n	8009d2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	61fb      	str	r3, [r7, #28]
 8009d2c:	e015      	b.n	8009d5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d20b      	bcs.n	8009d50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff ff99 	bl	8009c7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61fb      	str	r3, [r7, #28]
 8009d4e:	e004      	b.n	8009d5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d56:	2301      	movs	r3, #1
 8009d58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d5a:	f000 fe87 	bl	800aa6c <vPortExitCritical>

	return xReturn;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3720      	adds	r7, #32
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	2000abd8 	.word	0x2000abd8
 8009d6c:	2000abec 	.word	0x2000abec

08009d70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d74:	4b03      	ldr	r3, [pc, #12]	@ (8009d84 <vTaskMissedYield+0x14>)
 8009d76:	2201      	movs	r2, #1
 8009d78:	601a      	str	r2, [r3, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	2000abe8 	.word	0x2000abe8

08009d88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d90:	f000 f852 	bl	8009e38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d94:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <prvIdleTask+0x28>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d9f9      	bls.n	8009d90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d9c:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <prvIdleTask+0x2c>)
 8009d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dac:	e7f0      	b.n	8009d90 <prvIdleTask+0x8>
 8009dae:	bf00      	nop
 8009db0:	2000a704 	.word	0x2000a704
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	607b      	str	r3, [r7, #4]
 8009dc2:	e00c      	b.n	8009dde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4a12      	ldr	r2, [pc, #72]	@ (8009e18 <prvInitialiseTaskLists+0x60>)
 8009dd0:	4413      	add	r3, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fc3a 	bl	800864c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b37      	cmp	r3, #55	@ 0x37
 8009de2:	d9ef      	bls.n	8009dc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009de4:	480d      	ldr	r0, [pc, #52]	@ (8009e1c <prvInitialiseTaskLists+0x64>)
 8009de6:	f7fe fc31 	bl	800864c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dea:	480d      	ldr	r0, [pc, #52]	@ (8009e20 <prvInitialiseTaskLists+0x68>)
 8009dec:	f7fe fc2e 	bl	800864c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009df0:	480c      	ldr	r0, [pc, #48]	@ (8009e24 <prvInitialiseTaskLists+0x6c>)
 8009df2:	f7fe fc2b 	bl	800864c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009df6:	480c      	ldr	r0, [pc, #48]	@ (8009e28 <prvInitialiseTaskLists+0x70>)
 8009df8:	f7fe fc28 	bl	800864c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dfc:	480b      	ldr	r0, [pc, #44]	@ (8009e2c <prvInitialiseTaskLists+0x74>)
 8009dfe:	f7fe fc25 	bl	800864c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e02:	4b0b      	ldr	r3, [pc, #44]	@ (8009e30 <prvInitialiseTaskLists+0x78>)
 8009e04:	4a05      	ldr	r2, [pc, #20]	@ (8009e1c <prvInitialiseTaskLists+0x64>)
 8009e06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e08:	4b0a      	ldr	r3, [pc, #40]	@ (8009e34 <prvInitialiseTaskLists+0x7c>)
 8009e0a:	4a05      	ldr	r2, [pc, #20]	@ (8009e20 <prvInitialiseTaskLists+0x68>)
 8009e0c:	601a      	str	r2, [r3, #0]
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	2000a704 	.word	0x2000a704
 8009e1c:	2000ab64 	.word	0x2000ab64
 8009e20:	2000ab78 	.word	0x2000ab78
 8009e24:	2000ab94 	.word	0x2000ab94
 8009e28:	2000aba8 	.word	0x2000aba8
 8009e2c:	2000abc0 	.word	0x2000abc0
 8009e30:	2000ab8c 	.word	0x2000ab8c
 8009e34:	2000ab90 	.word	0x2000ab90

08009e38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e3e:	e019      	b.n	8009e74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e40:	f000 fde2 	bl	800aa08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e44:	4b10      	ldr	r3, [pc, #64]	@ (8009e88 <prvCheckTasksWaitingTermination+0x50>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe fc85 	bl	8008760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e56:	4b0d      	ldr	r3, [pc, #52]	@ (8009e8c <prvCheckTasksWaitingTermination+0x54>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8009e8c <prvCheckTasksWaitingTermination+0x54>)
 8009e5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e60:	4b0b      	ldr	r3, [pc, #44]	@ (8009e90 <prvCheckTasksWaitingTermination+0x58>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	4a0a      	ldr	r2, [pc, #40]	@ (8009e90 <prvCheckTasksWaitingTermination+0x58>)
 8009e68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e6a:	f000 fdff 	bl	800aa6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f810 	bl	8009e94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e74:	4b06      	ldr	r3, [pc, #24]	@ (8009e90 <prvCheckTasksWaitingTermination+0x58>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1e1      	bne.n	8009e40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	2000aba8 	.word	0x2000aba8
 8009e8c:	2000abd4 	.word	0x2000abd4
 8009e90:	2000abbc 	.word	0x2000abbc

08009e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d108      	bne.n	8009eb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 ff9c 	bl	800ade8 <vPortFree>
				vPortFree( pxTCB );
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 ff99 	bl	800ade8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009eb6:	e019      	b.n	8009eec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d103      	bne.n	8009eca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 ff90 	bl	800ade8 <vPortFree>
	}
 8009ec8:	e010      	b.n	8009eec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d00b      	beq.n	8009eec <prvDeleteTCB+0x58>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60fb      	str	r3, [r7, #12]
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	e7fd      	b.n	8009ee8 <prvDeleteTCB+0x54>
	}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efa:	4b0c      	ldr	r3, [pc, #48]	@ (8009f2c <prvResetNextTaskUnblockTime+0x38>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f04:	4b0a      	ldr	r3, [pc, #40]	@ (8009f30 <prvResetNextTaskUnblockTime+0x3c>)
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f0c:	e008      	b.n	8009f20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0e:	4b07      	ldr	r3, [pc, #28]	@ (8009f2c <prvResetNextTaskUnblockTime+0x38>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4a04      	ldr	r2, [pc, #16]	@ (8009f30 <prvResetNextTaskUnblockTime+0x3c>)
 8009f1e:	6013      	str	r3, [r2, #0]
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	2000ab8c 	.word	0x2000ab8c
 8009f30:	2000abf4 	.word	0x2000abf4

08009f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f68 <xTaskGetSchedulerState+0x34>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f42:	2301      	movs	r3, #1
 8009f44:	607b      	str	r3, [r7, #4]
 8009f46:	e008      	b.n	8009f5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f48:	4b08      	ldr	r3, [pc, #32]	@ (8009f6c <xTaskGetSchedulerState+0x38>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f50:	2302      	movs	r3, #2
 8009f52:	607b      	str	r3, [r7, #4]
 8009f54:	e001      	b.n	8009f5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f56:	2300      	movs	r3, #0
 8009f58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f5a:	687b      	ldr	r3, [r7, #4]
	}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	2000abe0 	.word	0x2000abe0
 8009f6c:	2000abfc 	.word	0x2000abfc

08009f70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d058      	beq.n	800a038 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f86:	4b2f      	ldr	r3, [pc, #188]	@ (800a044 <xTaskPriorityDisinherit+0xd4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d00b      	beq.n	8009fa8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60fb      	str	r3, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	bf00      	nop
 8009fa6:	e7fd      	b.n	8009fa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10b      	bne.n	8009fc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	60bb      	str	r3, [r7, #8]
}
 8009fc2:	bf00      	nop
 8009fc4:	bf00      	nop
 8009fc6:	e7fd      	b.n	8009fc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fcc:	1e5a      	subs	r2, r3, #1
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d02c      	beq.n	800a038 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d128      	bne.n	800a038 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe fbb8 	bl	8008760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a008:	4b0f      	ldr	r3, [pc, #60]	@ (800a048 <xTaskPriorityDisinherit+0xd8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d903      	bls.n	800a018 <xTaskPriorityDisinherit+0xa8>
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a014:	4a0c      	ldr	r2, [pc, #48]	@ (800a048 <xTaskPriorityDisinherit+0xd8>)
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4a09      	ldr	r2, [pc, #36]	@ (800a04c <xTaskPriorityDisinherit+0xdc>)
 800a026:	441a      	add	r2, r3
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7fe fb39 	bl	80086a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a034:	2301      	movs	r3, #1
 800a036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a038:	697b      	ldr	r3, [r7, #20]
	}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	2000a700 	.word	0x2000a700
 800a048:	2000abdc 	.word	0x2000abdc
 800a04c:	2000a704 	.word	0x2000a704

0800a050 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a05a:	4b21      	ldr	r3, [pc, #132]	@ (800a0e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a060:	4b20      	ldr	r3, [pc, #128]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3304      	adds	r3, #4
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fb7a 	bl	8008760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d10a      	bne.n	800a08a <prvAddCurrentTaskToDelayedList+0x3a>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d007      	beq.n	800a08a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a07a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4819      	ldr	r0, [pc, #100]	@ (800a0e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a084:	f7fe fb0f 	bl	80086a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a088:	e026      	b.n	800a0d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4413      	add	r3, r2
 800a090:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a092:	4b14      	ldr	r3, [pc, #80]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d209      	bcs.n	800a0b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a2:	4b12      	ldr	r3, [pc, #72]	@ (800a0ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f7fe fb1d 	bl	80086ee <vListInsert>
}
 800a0b4:	e010      	b.n	800a0d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7fe fb13 	bl	80086ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d202      	bcs.n	800a0d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0d2:	4a08      	ldr	r2, [pc, #32]	@ (800a0f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6013      	str	r3, [r2, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	2000abd8 	.word	0x2000abd8
 800a0e4:	2000a700 	.word	0x2000a700
 800a0e8:	2000abc0 	.word	0x2000abc0
 800a0ec:	2000ab90 	.word	0x2000ab90
 800a0f0:	2000ab8c 	.word	0x2000ab8c
 800a0f4:	2000abf4 	.word	0x2000abf4

0800a0f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	@ 0x28
 800a0fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a102:	f000 fb13 	bl	800a72c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a106:	4b1d      	ldr	r3, [pc, #116]	@ (800a17c <xTimerCreateTimerTask+0x84>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d021      	beq.n	800a152 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a116:	1d3a      	adds	r2, r7, #4
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	f107 030c 	add.w	r3, r7, #12
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fa79 	bl	8008618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	9202      	str	r2, [sp, #8]
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	2302      	movs	r3, #2
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	460a      	mov	r2, r1
 800a138:	4911      	ldr	r1, [pc, #68]	@ (800a180 <xTimerCreateTimerTask+0x88>)
 800a13a:	4812      	ldr	r0, [pc, #72]	@ (800a184 <xTimerCreateTimerTask+0x8c>)
 800a13c:	f7ff f834 	bl	80091a8 <xTaskCreateStatic>
 800a140:	4603      	mov	r3, r0
 800a142:	4a11      	ldr	r2, [pc, #68]	@ (800a188 <xTimerCreateTimerTask+0x90>)
 800a144:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a146:	4b10      	ldr	r3, [pc, #64]	@ (800a188 <xTimerCreateTimerTask+0x90>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a14e:	2301      	movs	r3, #1
 800a150:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	613b      	str	r3, [r7, #16]
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a170:	697b      	ldr	r3, [r7, #20]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	2000ac30 	.word	0x2000ac30
 800a180:	0801ba78 	.word	0x0801ba78
 800a184:	0800a2c5 	.word	0x0800a2c5
 800a188:	2000ac34 	.word	0x2000ac34

0800a18c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	@ 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10b      	bne.n	800a1bc <xTimerGenericCommand+0x30>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	623b      	str	r3, [r7, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	bf00      	nop
 800a1ba:	e7fd      	b.n	800a1b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1bc:	4b19      	ldr	r3, [pc, #100]	@ (800a224 <xTimerGenericCommand+0x98>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d02a      	beq.n	800a21a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b05      	cmp	r3, #5
 800a1d4:	dc18      	bgt.n	800a208 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1d6:	f7ff fead 	bl	8009f34 <xTaskGetSchedulerState>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d109      	bne.n	800a1f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1e0:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <xTimerGenericCommand+0x98>)
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	f107 0110 	add.w	r1, r7, #16
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ec:	f7fe fbec 	bl	80089c8 <xQueueGenericSend>
 800a1f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1f2:	e012      	b.n	800a21a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <xTimerGenericCommand+0x98>)
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	f107 0110 	add.w	r1, r7, #16
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2200      	movs	r2, #0
 800a200:	f7fe fbe2 	bl	80089c8 <xQueueGenericSend>
 800a204:	6278      	str	r0, [r7, #36]	@ 0x24
 800a206:	e008      	b.n	800a21a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <xTimerGenericCommand+0x98>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	f107 0110 	add.w	r1, r7, #16
 800a210:	2300      	movs	r3, #0
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	f7fe fcda 	bl	8008bcc <xQueueGenericSendFromISR>
 800a218:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3728      	adds	r7, #40	@ 0x28
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	2000ac30 	.word	0x2000ac30

0800a228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a232:	4b23      	ldr	r3, [pc, #140]	@ (800a2c0 <prvProcessExpiredTimer+0x98>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3304      	adds	r3, #4
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fa8d 	bl	8008760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	d023      	beq.n	800a29c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	699a      	ldr	r2, [r3, #24]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	18d1      	adds	r1, r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	6978      	ldr	r0, [r7, #20]
 800a262:	f000 f8d5 	bl	800a410 <prvInsertTimerInActiveList>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d020      	beq.n	800a2ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a26c:	2300      	movs	r3, #0
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2300      	movs	r3, #0
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	2100      	movs	r1, #0
 800a276:	6978      	ldr	r0, [r7, #20]
 800a278:	f7ff ff88 	bl	800a18c <xTimerGenericCommand>
 800a27c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d114      	bne.n	800a2ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	bf00      	nop
 800a29a:	e7fd      	b.n	800a298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a2:	f023 0301 	bic.w	r3, r3, #1
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	6978      	ldr	r0, [r7, #20]
 800a2b4:	4798      	blx	r3
}
 800a2b6:	bf00      	nop
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000ac28 	.word	0x2000ac28

0800a2c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2cc:	f107 0308 	add.w	r3, r7, #8
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 f859 	bl	800a388 <prvGetNextExpireTime>
 800a2d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 f805 	bl	800a2ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2e2:	f000 f8d7 	bl	800a494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2e6:	bf00      	nop
 800a2e8:	e7f0      	b.n	800a2cc <prvTimerTask+0x8>
	...

0800a2ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2f6:	f7ff fa0f 	bl	8009718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2fa:	f107 0308 	add.w	r3, r7, #8
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 f866 	bl	800a3d0 <prvSampleTimeNow>
 800a304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d130      	bne.n	800a36e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <prvProcessTimerOrBlockTask+0x3c>
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	429a      	cmp	r2, r3
 800a318:	d806      	bhi.n	800a328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a31a:	f7ff fa0b 	bl	8009734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff ff81 	bl	800a228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a326:	e024      	b.n	800a372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d008      	beq.n	800a340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a32e:	4b13      	ldr	r3, [pc, #76]	@ (800a37c <prvProcessTimerOrBlockTask+0x90>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <prvProcessTimerOrBlockTask+0x50>
 800a338:	2301      	movs	r3, #1
 800a33a:	e000      	b.n	800a33e <prvProcessTimerOrBlockTask+0x52>
 800a33c:	2300      	movs	r3, #0
 800a33e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a340:	4b0f      	ldr	r3, [pc, #60]	@ (800a380 <prvProcessTimerOrBlockTask+0x94>)
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	4619      	mov	r1, r3
 800a34e:	f7fe fef7 	bl	8009140 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a352:	f7ff f9ef 	bl	8009734 <xTaskResumeAll>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a35c:	4b09      	ldr	r3, [pc, #36]	@ (800a384 <prvProcessTimerOrBlockTask+0x98>)
 800a35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	f3bf 8f6f 	isb	sy
}
 800a36c:	e001      	b.n	800a372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a36e:	f7ff f9e1 	bl	8009734 <xTaskResumeAll>
}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	2000ac2c 	.word	0x2000ac2c
 800a380:	2000ac30 	.word	0x2000ac30
 800a384:	e000ed04 	.word	0xe000ed04

0800a388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a390:	4b0e      	ldr	r3, [pc, #56]	@ (800a3cc <prvGetNextExpireTime+0x44>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <prvGetNextExpireTime+0x16>
 800a39a:	2201      	movs	r2, #1
 800a39c:	e000      	b.n	800a3a0 <prvGetNextExpireTime+0x18>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d105      	bne.n	800a3b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3ac:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <prvGetNextExpireTime+0x44>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	e001      	b.n	800a3bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	2000ac28 	.word	0x2000ac28

0800a3d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3d8:	f7ff fa4a 	bl	8009870 <xTaskGetTickCount>
 800a3dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3de:	4b0b      	ldr	r3, [pc, #44]	@ (800a40c <prvSampleTimeNow+0x3c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d205      	bcs.n	800a3f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3e8:	f000 f93a 	bl	800a660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3fa:	4a04      	ldr	r2, [pc, #16]	@ (800a40c <prvSampleTimeNow+0x3c>)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a400:	68fb      	ldr	r3, [r7, #12]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	2000ac38 	.word	0x2000ac38

0800a410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a41e:	2300      	movs	r3, #0
 800a420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	429a      	cmp	r2, r3
 800a434:	d812      	bhi.n	800a45c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	429a      	cmp	r2, r3
 800a442:	d302      	bcc.n	800a44a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a444:	2301      	movs	r3, #1
 800a446:	617b      	str	r3, [r7, #20]
 800a448:	e01b      	b.n	800a482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a44a:	4b10      	ldr	r3, [pc, #64]	@ (800a48c <prvInsertTimerInActiveList+0x7c>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3304      	adds	r3, #4
 800a452:	4619      	mov	r1, r3
 800a454:	4610      	mov	r0, r2
 800a456:	f7fe f94a 	bl	80086ee <vListInsert>
 800a45a:	e012      	b.n	800a482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d206      	bcs.n	800a472 <prvInsertTimerInActiveList+0x62>
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d302      	bcc.n	800a472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a46c:	2301      	movs	r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e007      	b.n	800a482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a472:	4b07      	ldr	r3, [pc, #28]	@ (800a490 <prvInsertTimerInActiveList+0x80>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3304      	adds	r3, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f7fe f936 	bl	80086ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a482:	697b      	ldr	r3, [r7, #20]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	2000ac2c 	.word	0x2000ac2c
 800a490:	2000ac28 	.word	0x2000ac28

0800a494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08e      	sub	sp, #56	@ 0x38
 800a498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a49a:	e0ce      	b.n	800a63a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	da19      	bge.n	800a4d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4a2:	1d3b      	adds	r3, r7, #4
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	61fb      	str	r3, [r7, #28]
}
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	e7fd      	b.n	800a4c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4cc:	6850      	ldr	r0, [r2, #4]
 800a4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4d0:	6892      	ldr	r2, [r2, #8]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f2c0 80ae 	blt.w	800a63a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d004      	beq.n	800a4f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe f936 	bl	8008760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff ff6a 	bl	800a3d0 <prvSampleTimeNow>
 800a4fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b09      	cmp	r3, #9
 800a502:	f200 8097 	bhi.w	800a634 <prvProcessReceivedCommands+0x1a0>
 800a506:	a201      	add	r2, pc, #4	@ (adr r2, 800a50c <prvProcessReceivedCommands+0x78>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a535 	.word	0x0800a535
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a535 	.word	0x0800a535
 800a518:	0800a5ab 	.word	0x0800a5ab
 800a51c:	0800a5bf 	.word	0x0800a5bf
 800a520:	0800a60b 	.word	0x0800a60b
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a535 	.word	0x0800a535
 800a52c:	0800a5ab 	.word	0x0800a5ab
 800a530:	0800a5bf 	.word	0x0800a5bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a53a:	f043 0301 	orr.w	r3, r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	18d1      	adds	r1, r2, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a554:	f7ff ff5c 	bl	800a410 <prvInsertTimerInActiveList>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d06c      	beq.n	800a638 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	d061      	beq.n	800a638 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	441a      	add	r2, r3
 800a57c:	2300      	movs	r3, #0
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	2300      	movs	r3, #0
 800a582:	2100      	movs	r1, #0
 800a584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a586:	f7ff fe01 	bl	800a18c <xTimerGenericCommand>
 800a58a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d152      	bne.n	800a638 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	61bb      	str	r3, [r7, #24]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5bc:	e03d      	b.n	800a63a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5c4:	f043 0301 	orr.w	r3, r3, #1
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10b      	bne.n	800a5f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	617b      	str	r3, [r7, #20]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	699a      	ldr	r2, [r3, #24]
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	18d1      	adds	r1, r2, r3
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a604:	f7ff ff04 	bl	800a410 <prvInsertTimerInActiveList>
					break;
 800a608:	e017      	b.n	800a63a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a61a:	f000 fbe5 	bl	800ade8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a61e:	e00c      	b.n	800a63a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a626:	f023 0301 	bic.w	r3, r3, #1
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a632:	e002      	b.n	800a63a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <prvProcessReceivedCommands+0x1a6>
					break;
 800a638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a63a:	4b08      	ldr	r3, [pc, #32]	@ (800a65c <prvProcessReceivedCommands+0x1c8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	1d39      	adds	r1, r7, #4
 800a640:	2200      	movs	r2, #0
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe fb60 	bl	8008d08 <xQueueReceive>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f47f af26 	bne.w	800a49c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a650:	bf00      	nop
 800a652:	bf00      	nop
 800a654:	3730      	adds	r7, #48	@ 0x30
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	2000ac30 	.word	0x2000ac30

0800a660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a666:	e049      	b.n	800a6fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a668:	4b2e      	ldr	r3, [pc, #184]	@ (800a724 <prvSwitchTimerLists+0xc4>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a672:	4b2c      	ldr	r3, [pc, #176]	@ (800a724 <prvSwitchTimerLists+0xc4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3304      	adds	r3, #4
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe f86d 	bl	8008760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d02f      	beq.n	800a6fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d90e      	bls.n	800a6cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a724 <prvSwitchTimerLists+0xc4>)
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	f7fe f812 	bl	80086ee <vListInsert>
 800a6ca:	e017      	b.n	800a6fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fd58 	bl	800a18c <xTimerGenericCommand>
 800a6dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10b      	bne.n	800a6fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	603b      	str	r3, [r7, #0]
}
 800a6f6:	bf00      	nop
 800a6f8:	bf00      	nop
 800a6fa:	e7fd      	b.n	800a6f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6fc:	4b09      	ldr	r3, [pc, #36]	@ (800a724 <prvSwitchTimerLists+0xc4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1b0      	bne.n	800a668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a706:	4b07      	ldr	r3, [pc, #28]	@ (800a724 <prvSwitchTimerLists+0xc4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a70c:	4b06      	ldr	r3, [pc, #24]	@ (800a728 <prvSwitchTimerLists+0xc8>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a04      	ldr	r2, [pc, #16]	@ (800a724 <prvSwitchTimerLists+0xc4>)
 800a712:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a714:	4a04      	ldr	r2, [pc, #16]	@ (800a728 <prvSwitchTimerLists+0xc8>)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	6013      	str	r3, [r2, #0]
}
 800a71a:	bf00      	nop
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	2000ac28 	.word	0x2000ac28
 800a728:	2000ac2c 	.word	0x2000ac2c

0800a72c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a732:	f000 f969 	bl	800aa08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a736:	4b15      	ldr	r3, [pc, #84]	@ (800a78c <prvCheckForValidListAndQueue+0x60>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d120      	bne.n	800a780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a73e:	4814      	ldr	r0, [pc, #80]	@ (800a790 <prvCheckForValidListAndQueue+0x64>)
 800a740:	f7fd ff84 	bl	800864c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a744:	4813      	ldr	r0, [pc, #76]	@ (800a794 <prvCheckForValidListAndQueue+0x68>)
 800a746:	f7fd ff81 	bl	800864c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a74a:	4b13      	ldr	r3, [pc, #76]	@ (800a798 <prvCheckForValidListAndQueue+0x6c>)
 800a74c:	4a10      	ldr	r2, [pc, #64]	@ (800a790 <prvCheckForValidListAndQueue+0x64>)
 800a74e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a750:	4b12      	ldr	r3, [pc, #72]	@ (800a79c <prvCheckForValidListAndQueue+0x70>)
 800a752:	4a10      	ldr	r2, [pc, #64]	@ (800a794 <prvCheckForValidListAndQueue+0x68>)
 800a754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a756:	2300      	movs	r3, #0
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	4b11      	ldr	r3, [pc, #68]	@ (800a7a0 <prvCheckForValidListAndQueue+0x74>)
 800a75c:	4a11      	ldr	r2, [pc, #68]	@ (800a7a4 <prvCheckForValidListAndQueue+0x78>)
 800a75e:	2110      	movs	r1, #16
 800a760:	200a      	movs	r0, #10
 800a762:	f7fe f891 	bl	8008888 <xQueueGenericCreateStatic>
 800a766:	4603      	mov	r3, r0
 800a768:	4a08      	ldr	r2, [pc, #32]	@ (800a78c <prvCheckForValidListAndQueue+0x60>)
 800a76a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a76c:	4b07      	ldr	r3, [pc, #28]	@ (800a78c <prvCheckForValidListAndQueue+0x60>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d005      	beq.n	800a780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a774:	4b05      	ldr	r3, [pc, #20]	@ (800a78c <prvCheckForValidListAndQueue+0x60>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	490b      	ldr	r1, [pc, #44]	@ (800a7a8 <prvCheckForValidListAndQueue+0x7c>)
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fcb6 	bl	80090ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a780:	f000 f974 	bl	800aa6c <vPortExitCritical>
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	2000ac30 	.word	0x2000ac30
 800a790:	2000ac00 	.word	0x2000ac00
 800a794:	2000ac14 	.word	0x2000ac14
 800a798:	2000ac28 	.word	0x2000ac28
 800a79c:	2000ac2c 	.word	0x2000ac2c
 800a7a0:	2000acdc 	.word	0x2000acdc
 800a7a4:	2000ac3c 	.word	0x2000ac3c
 800a7a8:	0801ba80 	.word	0x0801ba80

0800a7ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3b04      	subs	r3, #4
 800a7bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3b04      	subs	r3, #4
 800a7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f023 0201 	bic.w	r2, r3, #1
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3b04      	subs	r3, #4
 800a7da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7dc:	4a0c      	ldr	r2, [pc, #48]	@ (800a810 <pxPortInitialiseStack+0x64>)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3b14      	subs	r3, #20
 800a7e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3b04      	subs	r3, #4
 800a7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f06f 0202 	mvn.w	r2, #2
 800a7fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3b20      	subs	r3, #32
 800a800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	0800a815 	.word	0x0800a815

0800a814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a81e:	4b13      	ldr	r3, [pc, #76]	@ (800a86c <prvTaskExitError+0x58>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a826:	d00b      	beq.n	800a840 <prvTaskExitError+0x2c>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	60fb      	str	r3, [r7, #12]
}
 800a83a:	bf00      	nop
 800a83c:	bf00      	nop
 800a83e:	e7fd      	b.n	800a83c <prvTaskExitError+0x28>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	60bb      	str	r3, [r7, #8]
}
 800a852:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a854:	bf00      	nop
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0fc      	beq.n	800a856 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20000910 	.word	0x20000910

0800a870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a870:	4b07      	ldr	r3, [pc, #28]	@ (800a890 <pxCurrentTCBConst2>)
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	6808      	ldr	r0, [r1, #0]
 800a876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87a:	f380 8809 	msr	PSP, r0
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	4770      	bx	lr
 800a88c:	f3af 8000 	nop.w

0800a890 <pxCurrentTCBConst2>:
 800a890:	2000a700 	.word	0x2000a700
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop

0800a898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a898:	4808      	ldr	r0, [pc, #32]	@ (800a8bc <prvPortStartFirstTask+0x24>)
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	6800      	ldr	r0, [r0, #0]
 800a89e:	f380 8808 	msr	MSP, r0
 800a8a2:	f04f 0000 	mov.w	r0, #0
 800a8a6:	f380 8814 	msr	CONTROL, r0
 800a8aa:	b662      	cpsie	i
 800a8ac:	b661      	cpsie	f
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	df00      	svc	0
 800a8b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8ba:	bf00      	nop
 800a8bc:	e000ed08 	.word	0xe000ed08

0800a8c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8c6:	4b47      	ldr	r3, [pc, #284]	@ (800a9e4 <xPortStartScheduler+0x124>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a47      	ldr	r2, [pc, #284]	@ (800a9e8 <xPortStartScheduler+0x128>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d10b      	bne.n	800a8e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	613b      	str	r3, [r7, #16]
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	e7fd      	b.n	800a8e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9e4 <xPortStartScheduler+0x124>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a9ec <xPortStartScheduler+0x12c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d10b      	bne.n	800a90a <xPortStartScheduler+0x4a>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60fb      	str	r3, [r7, #12]
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop
 800a908:	e7fd      	b.n	800a906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a90a:	4b39      	ldr	r3, [pc, #228]	@ (800a9f0 <xPortStartScheduler+0x130>)
 800a90c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	22ff      	movs	r2, #255	@ 0xff
 800a91a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	4b31      	ldr	r3, [pc, #196]	@ (800a9f4 <xPortStartScheduler+0x134>)
 800a930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a932:	4b31      	ldr	r3, [pc, #196]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a934:	2207      	movs	r2, #7
 800a936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a938:	e009      	b.n	800a94e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a93a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3b01      	subs	r3, #1
 800a940:	4a2d      	ldr	r2, [pc, #180]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	b2db      	uxtb	r3, r3
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a956:	2b80      	cmp	r3, #128	@ 0x80
 800a958:	d0ef      	beq.n	800a93a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a95a:	4b27      	ldr	r3, [pc, #156]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f1c3 0307 	rsb	r3, r3, #7
 800a962:	2b04      	cmp	r3, #4
 800a964:	d00b      	beq.n	800a97e <xPortStartScheduler+0xbe>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	60bb      	str	r3, [r7, #8]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a97e:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a988:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a990:	4a19      	ldr	r2, [pc, #100]	@ (800a9f8 <xPortStartScheduler+0x138>)
 800a992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	b2da      	uxtb	r2, r3
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a99c:	4b17      	ldr	r3, [pc, #92]	@ (800a9fc <xPortStartScheduler+0x13c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a16      	ldr	r2, [pc, #88]	@ (800a9fc <xPortStartScheduler+0x13c>)
 800a9a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a9a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9a8:	4b14      	ldr	r3, [pc, #80]	@ (800a9fc <xPortStartScheduler+0x13c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a13      	ldr	r2, [pc, #76]	@ (800a9fc <xPortStartScheduler+0x13c>)
 800a9ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a9b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9b4:	f000 f8da 	bl	800ab6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9b8:	4b11      	ldr	r3, [pc, #68]	@ (800aa00 <xPortStartScheduler+0x140>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9be:	f000 f8f9 	bl	800abb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9c2:	4b10      	ldr	r3, [pc, #64]	@ (800aa04 <xPortStartScheduler+0x144>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a0f      	ldr	r2, [pc, #60]	@ (800aa04 <xPortStartScheduler+0x144>)
 800a9c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a9cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9ce:	f7ff ff63 	bl	800a898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9d2:	f7ff f817 	bl	8009a04 <vTaskSwitchContext>
	prvTaskExitError();
 800a9d6:	f7ff ff1d 	bl	800a814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	e000ed00 	.word	0xe000ed00
 800a9e8:	410fc271 	.word	0x410fc271
 800a9ec:	410fc270 	.word	0x410fc270
 800a9f0:	e000e400 	.word	0xe000e400
 800a9f4:	2000ad2c 	.word	0x2000ad2c
 800a9f8:	2000ad30 	.word	0x2000ad30
 800a9fc:	e000ed20 	.word	0xe000ed20
 800aa00:	20000910 	.word	0x20000910
 800aa04:	e000ef34 	.word	0xe000ef34

0800aa08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	607b      	str	r3, [r7, #4]
}
 800aa20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa22:	4b10      	ldr	r3, [pc, #64]	@ (800aa64 <vPortEnterCritical+0x5c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	4a0e      	ldr	r2, [pc, #56]	@ (800aa64 <vPortEnterCritical+0x5c>)
 800aa2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <vPortEnterCritical+0x5c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d110      	bne.n	800aa56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa34:	4b0c      	ldr	r3, [pc, #48]	@ (800aa68 <vPortEnterCritical+0x60>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <vPortEnterCritical+0x4e>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	603b      	str	r3, [r7, #0]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <vPortEnterCritical+0x4a>
	}
}
 800aa56:	bf00      	nop
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20000910 	.word	0x20000910
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa72:	4b12      	ldr	r3, [pc, #72]	@ (800aabc <vPortExitCritical+0x50>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10b      	bne.n	800aa92 <vPortExitCritical+0x26>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	607b      	str	r3, [r7, #4]
}
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
 800aa90:	e7fd      	b.n	800aa8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa92:	4b0a      	ldr	r3, [pc, #40]	@ (800aabc <vPortExitCritical+0x50>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	4a08      	ldr	r2, [pc, #32]	@ (800aabc <vPortExitCritical+0x50>)
 800aa9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa9c:	4b07      	ldr	r3, [pc, #28]	@ (800aabc <vPortExitCritical+0x50>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d105      	bne.n	800aab0 <vPortExitCritical+0x44>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	f383 8811 	msr	BASEPRI, r3
}
 800aaae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	20000910 	.word	0x20000910

0800aac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aac0:	f3ef 8009 	mrs	r0, PSP
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4b15      	ldr	r3, [pc, #84]	@ (800ab20 <pxCurrentTCBConst>)
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	f01e 0f10 	tst.w	lr, #16
 800aad0:	bf08      	it	eq
 800aad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	6010      	str	r0, [r2, #0]
 800aadc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aae4:	f380 8811 	msr	BASEPRI, r0
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f7fe ff88 	bl	8009a04 <vTaskSwitchContext>
 800aaf4:	f04f 0000 	mov.w	r0, #0
 800aaf8:	f380 8811 	msr	BASEPRI, r0
 800aafc:	bc09      	pop	{r0, r3}
 800aafe:	6819      	ldr	r1, [r3, #0]
 800ab00:	6808      	ldr	r0, [r1, #0]
 800ab02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab06:	f01e 0f10 	tst.w	lr, #16
 800ab0a:	bf08      	it	eq
 800ab0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab10:	f380 8809 	msr	PSP, r0
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w

0800ab20 <pxCurrentTCBConst>:
 800ab20:	2000a700 	.word	0x2000a700
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop

0800ab28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	607b      	str	r3, [r7, #4]
}
 800ab40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab42:	f7fe fea5 	bl	8009890 <xTaskIncrementTick>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab4c:	4b06      	ldr	r3, [pc, #24]	@ (800ab68 <xPortSysTickHandler+0x40>)
 800ab4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	2300      	movs	r3, #0
 800ab56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f383 8811 	msr	BASEPRI, r3
}
 800ab5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	e000ed04 	.word	0xe000ed04

0800ab6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <vPortSetupTimerInterrupt+0x34>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab76:	4b0b      	ldr	r3, [pc, #44]	@ (800aba4 <vPortSetupTimerInterrupt+0x38>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aba8 <vPortSetupTimerInterrupt+0x3c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a0a      	ldr	r2, [pc, #40]	@ (800abac <vPortSetupTimerInterrupt+0x40>)
 800ab82:	fba2 2303 	umull	r2, r3, r2, r3
 800ab86:	099b      	lsrs	r3, r3, #6
 800ab88:	4a09      	ldr	r2, [pc, #36]	@ (800abb0 <vPortSetupTimerInterrupt+0x44>)
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab8e:	4b04      	ldr	r3, [pc, #16]	@ (800aba0 <vPortSetupTimerInterrupt+0x34>)
 800ab90:	2207      	movs	r2, #7
 800ab92:	601a      	str	r2, [r3, #0]
}
 800ab94:	bf00      	nop
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	e000e010 	.word	0xe000e010
 800aba4:	e000e018 	.word	0xe000e018
 800aba8:	20000904 	.word	0x20000904
 800abac:	10624dd3 	.word	0x10624dd3
 800abb0:	e000e014 	.word	0xe000e014

0800abb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800abc4 <vPortEnableVFP+0x10>
 800abb8:	6801      	ldr	r1, [r0, #0]
 800abba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800abbe:	6001      	str	r1, [r0, #0]
 800abc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abc2:	bf00      	nop
 800abc4:	e000ed88 	.word	0xe000ed88

0800abc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abce:	f3ef 8305 	mrs	r3, IPSR
 800abd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b0f      	cmp	r3, #15
 800abd8:	d915      	bls.n	800ac06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abda:	4a18      	ldr	r2, [pc, #96]	@ (800ac3c <vPortValidateInterruptPriority+0x74>)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abe4:	4b16      	ldr	r3, [pc, #88]	@ (800ac40 <vPortValidateInterruptPriority+0x78>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	7afa      	ldrb	r2, [r7, #11]
 800abea:	429a      	cmp	r2, r3
 800abec:	d20b      	bcs.n	800ac06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	607b      	str	r3, [r7, #4]
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	e7fd      	b.n	800ac02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac06:	4b0f      	ldr	r3, [pc, #60]	@ (800ac44 <vPortValidateInterruptPriority+0x7c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac48 <vPortValidateInterruptPriority+0x80>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d90b      	bls.n	800ac2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	603b      	str	r3, [r7, #0]
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	e7fd      	b.n	800ac2a <vPortValidateInterruptPriority+0x62>
	}
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	e000e3f0 	.word	0xe000e3f0
 800ac40:	2000ad2c 	.word	0x2000ad2c
 800ac44:	e000ed0c 	.word	0xe000ed0c
 800ac48:	2000ad30 	.word	0x2000ad30

0800ac4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08a      	sub	sp, #40	@ 0x28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac58:	f7fe fd5e 	bl	8009718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac5c:	4b5c      	ldr	r3, [pc, #368]	@ (800add0 <pvPortMalloc+0x184>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac64:	f000 f924 	bl	800aeb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac68:	4b5a      	ldr	r3, [pc, #360]	@ (800add4 <pvPortMalloc+0x188>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 8095 	bne.w	800ada0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01e      	beq.n	800acba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac7c:	2208      	movs	r2, #8
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d015      	beq.n	800acba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f023 0307 	bic.w	r3, r3, #7
 800ac94:	3308      	adds	r3, #8
 800ac96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f003 0307 	and.w	r3, r3, #7
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00b      	beq.n	800acba <pvPortMalloc+0x6e>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	617b      	str	r3, [r7, #20]
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d06f      	beq.n	800ada0 <pvPortMalloc+0x154>
 800acc0:	4b45      	ldr	r3, [pc, #276]	@ (800add8 <pvPortMalloc+0x18c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d86a      	bhi.n	800ada0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acca:	4b44      	ldr	r3, [pc, #272]	@ (800addc <pvPortMalloc+0x190>)
 800accc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acce:	4b43      	ldr	r3, [pc, #268]	@ (800addc <pvPortMalloc+0x190>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acd4:	e004      	b.n	800ace0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d903      	bls.n	800acf2 <pvPortMalloc+0xa6>
 800acea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1f1      	bne.n	800acd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acf2:	4b37      	ldr	r3, [pc, #220]	@ (800add0 <pvPortMalloc+0x184>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d051      	beq.n	800ada0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2208      	movs	r2, #8
 800ad02:	4413      	add	r3, r2
 800ad04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1ad2      	subs	r2, r2, r3
 800ad16:	2308      	movs	r3, #8
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d920      	bls.n	800ad60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4413      	add	r3, r2
 800ad24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <pvPortMalloc+0xfc>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	613b      	str	r3, [r7, #16]
}
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
 800ad46:	e7fd      	b.n	800ad44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	1ad2      	subs	r2, r2, r3
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad5a:	69b8      	ldr	r0, [r7, #24]
 800ad5c:	f000 f90a 	bl	800af74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad60:	4b1d      	ldr	r3, [pc, #116]	@ (800add8 <pvPortMalloc+0x18c>)
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	4a1b      	ldr	r2, [pc, #108]	@ (800add8 <pvPortMalloc+0x18c>)
 800ad6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad6e:	4b1a      	ldr	r3, [pc, #104]	@ (800add8 <pvPortMalloc+0x18c>)
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	4b1b      	ldr	r3, [pc, #108]	@ (800ade0 <pvPortMalloc+0x194>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d203      	bcs.n	800ad82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad7a:	4b17      	ldr	r3, [pc, #92]	@ (800add8 <pvPortMalloc+0x18c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a18      	ldr	r2, [pc, #96]	@ (800ade0 <pvPortMalloc+0x194>)
 800ad80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	4b13      	ldr	r3, [pc, #76]	@ (800add4 <pvPortMalloc+0x188>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad96:	4b13      	ldr	r3, [pc, #76]	@ (800ade4 <pvPortMalloc+0x198>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	4a11      	ldr	r2, [pc, #68]	@ (800ade4 <pvPortMalloc+0x198>)
 800ad9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ada0:	f7fe fcc8 	bl	8009734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00b      	beq.n	800adc6 <pvPortMalloc+0x17a>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	60fb      	str	r3, [r7, #12]
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	e7fd      	b.n	800adc2 <pvPortMalloc+0x176>
	return pvReturn;
 800adc6:	69fb      	ldr	r3, [r7, #28]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3728      	adds	r7, #40	@ 0x28
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	2000fb5c 	.word	0x2000fb5c
 800add4:	2000fb70 	.word	0x2000fb70
 800add8:	2000fb60 	.word	0x2000fb60
 800addc:	2000fb54 	.word	0x2000fb54
 800ade0:	2000fb64 	.word	0x2000fb64
 800ade4:	2000fb68 	.word	0x2000fb68

0800ade8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d04f      	beq.n	800ae9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adfa:	2308      	movs	r3, #8
 800adfc:	425b      	negs	r3, r3
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	4b25      	ldr	r3, [pc, #148]	@ (800aea4 <vPortFree+0xbc>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4013      	ands	r3, r2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10b      	bne.n	800ae2e <vPortFree+0x46>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	60fb      	str	r3, [r7, #12]
}
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	e7fd      	b.n	800ae2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00b      	beq.n	800ae4e <vPortFree+0x66>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	60bb      	str	r3, [r7, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	4b14      	ldr	r3, [pc, #80]	@ (800aea4 <vPortFree+0xbc>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4013      	ands	r3, r2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01e      	beq.n	800ae9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11a      	bne.n	800ae9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	4b0e      	ldr	r3, [pc, #56]	@ (800aea4 <vPortFree+0xbc>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	43db      	mvns	r3, r3
 800ae6e:	401a      	ands	r2, r3
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae74:	f7fe fc50 	bl	8009718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aea8 <vPortFree+0xc0>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4413      	add	r3, r2
 800ae82:	4a09      	ldr	r2, [pc, #36]	@ (800aea8 <vPortFree+0xc0>)
 800ae84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae86:	6938      	ldr	r0, [r7, #16]
 800ae88:	f000 f874 	bl	800af74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae8c:	4b07      	ldr	r3, [pc, #28]	@ (800aeac <vPortFree+0xc4>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	4a06      	ldr	r2, [pc, #24]	@ (800aeac <vPortFree+0xc4>)
 800ae94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae96:	f7fe fc4d 	bl	8009734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae9a:	bf00      	nop
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	2000fb70 	.word	0x2000fb70
 800aea8:	2000fb60 	.word	0x2000fb60
 800aeac:	2000fb6c 	.word	0x2000fb6c

0800aeb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aeb6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800aeba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aebc:	4b27      	ldr	r3, [pc, #156]	@ (800af5c <prvHeapInit+0xac>)
 800aebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00c      	beq.n	800aee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3307      	adds	r3, #7
 800aece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0307 	bic.w	r3, r3, #7
 800aed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	4a1f      	ldr	r2, [pc, #124]	@ (800af5c <prvHeapInit+0xac>)
 800aee0:	4413      	add	r3, r2
 800aee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aee8:	4a1d      	ldr	r2, [pc, #116]	@ (800af60 <prvHeapInit+0xb0>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aeee:	4b1c      	ldr	r3, [pc, #112]	@ (800af60 <prvHeapInit+0xb0>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4413      	add	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aefc:	2208      	movs	r2, #8
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0307 	bic.w	r3, r3, #7
 800af0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4a15      	ldr	r2, [pc, #84]	@ (800af64 <prvHeapInit+0xb4>)
 800af10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af12:	4b14      	ldr	r3, [pc, #80]	@ (800af64 <prvHeapInit+0xb4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af1a:	4b12      	ldr	r3, [pc, #72]	@ (800af64 <prvHeapInit+0xb4>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	1ad2      	subs	r2, r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af30:	4b0c      	ldr	r3, [pc, #48]	@ (800af64 <prvHeapInit+0xb4>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	4a0a      	ldr	r2, [pc, #40]	@ (800af68 <prvHeapInit+0xb8>)
 800af3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	4a09      	ldr	r2, [pc, #36]	@ (800af6c <prvHeapInit+0xbc>)
 800af46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af48:	4b09      	ldr	r3, [pc, #36]	@ (800af70 <prvHeapInit+0xc0>)
 800af4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	2000ad34 	.word	0x2000ad34
 800af60:	2000fb54 	.word	0x2000fb54
 800af64:	2000fb5c 	.word	0x2000fb5c
 800af68:	2000fb64 	.word	0x2000fb64
 800af6c:	2000fb60 	.word	0x2000fb60
 800af70:	2000fb70 	.word	0x2000fb70

0800af74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af7c:	4b28      	ldr	r3, [pc, #160]	@ (800b020 <prvInsertBlockIntoFreeList+0xac>)
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	e002      	b.n	800af88 <prvInsertBlockIntoFreeList+0x14>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d8f7      	bhi.n	800af82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d108      	bne.n	800afb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	441a      	add	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d118      	bne.n	800affc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	4b15      	ldr	r3, [pc, #84]	@ (800b024 <prvInsertBlockIntoFreeList+0xb0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d00d      	beq.n	800aff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	441a      	add	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	e008      	b.n	800b004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aff2:	4b0c      	ldr	r3, [pc, #48]	@ (800b024 <prvInsertBlockIntoFreeList+0xb0>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	e003      	b.n	800b004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d002      	beq.n	800b012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b012:	bf00      	nop
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	2000fb54 	.word	0x2000fb54
 800b024:	2000fb5c 	.word	0x2000fb5c

0800b028 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b028:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	b10a      	cbz	r2, 800b032 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800b02e:	4803      	ldr	r0, [pc, #12]	@ (800b03c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b030:	4770      	bx	lr
 800b032:	4a03      	ldr	r2, [pc, #12]	@ (800b040 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800b034:	4801      	ldr	r0, [pc, #4]	@ (800b03c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800b036:	6812      	ldr	r2, [r2, #0]
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	4770      	bx	lr
 800b03c:	2000091c 	.word	0x2000091c
 800b040:	200009b0 	.word	0x200009b0

0800b044 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b044:	4a02      	ldr	r2, [pc, #8]	@ (800b050 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800b046:	4b03      	ldr	r3, [pc, #12]	@ (800b054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	200009b0 	.word	0x200009b0
 800b054:	2000091c 	.word	0x2000091c

0800b058 <get_serialized_size_geometry_msgs__msg__Twist>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	4604      	mov	r4, r0
 800b05c:	b148      	cbz	r0, 800b072 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800b05e:	460d      	mov	r5, r1
 800b060:	f000 f860 	bl	800b124 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b064:	4606      	mov	r6, r0
 800b066:	1829      	adds	r1, r5, r0
 800b068:	f104 0018 	add.w	r0, r4, #24
 800b06c:	f000 f85a 	bl	800b124 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b070:	4430      	add	r0, r6
 800b072:	bd70      	pop	{r4, r5, r6, pc}

0800b074 <_Twist__cdr_deserialize>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	460c      	mov	r4, r1
 800b078:	b189      	cbz	r1, 800b09e <_Twist__cdr_deserialize+0x2a>
 800b07a:	4605      	mov	r5, r0
 800b07c:	f000 f8de 	bl	800b23c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b080:	6843      	ldr	r3, [r0, #4]
 800b082:	4621      	mov	r1, r4
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	4628      	mov	r0, r5
 800b088:	4798      	blx	r3
 800b08a:	f000 f8d7 	bl	800b23c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b08e:	6843      	ldr	r3, [r0, #4]
 800b090:	f104 0118 	add.w	r1, r4, #24
 800b094:	4628      	mov	r0, r5
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b09c:	4718      	bx	r3
 800b09e:	4608      	mov	r0, r1
 800b0a0:	bd70      	pop	{r4, r5, r6, pc}
 800b0a2:	bf00      	nop

0800b0a4 <_Twist__cdr_serialize>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	9101      	str	r1, [sp, #4]
 800b0aa:	b190      	cbz	r0, 800b0d2 <_Twist__cdr_serialize+0x2e>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	f000 f8c5 	bl	800b23c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b0b2:	6843      	ldr	r3, [r0, #4]
 800b0b4:	9901      	ldr	r1, [sp, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4798      	blx	r3
 800b0bc:	f000 f8be 	bl	800b23c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b0c0:	6843      	ldr	r3, [r0, #4]
 800b0c2:	9901      	ldr	r1, [sp, #4]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f104 0018 	add.w	r0, r4, #24
 800b0ca:	b002      	add	sp, #8
 800b0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d0:	4718      	bx	r3
 800b0d2:	b002      	add	sp, #8
 800b0d4:	bd10      	pop	{r4, pc}
 800b0d6:	bf00      	nop

0800b0d8 <_Twist__get_serialized_size>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b148      	cbz	r0, 800b0f2 <_Twist__get_serialized_size+0x1a>
 800b0de:	2100      	movs	r1, #0
 800b0e0:	f000 f820 	bl	800b124 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	f104 0018 	add.w	r0, r4, #24
 800b0ec:	f000 f81a 	bl	800b124 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b0f0:	4428      	add	r0, r5
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}

0800b0f4 <_Twist__max_serialized_size>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	f10d 0007 	add.w	r0, sp, #7
 800b100:	f88d 3007 	strb.w	r3, [sp, #7]
 800b104:	f000 f87e 	bl	800b204 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b108:	4604      	mov	r4, r0
 800b10a:	4601      	mov	r1, r0
 800b10c:	f10d 0007 	add.w	r0, sp, #7
 800b110:	f000 f878 	bl	800b204 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b114:	4420      	add	r0, r4
 800b116:	b002      	add	sp, #8
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop

0800b11c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b11c:	4800      	ldr	r0, [pc, #0]	@ (800b120 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800b11e:	4770      	bx	lr
 800b120:	20000934 	.word	0x20000934

0800b124 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800b124:	b1b8      	cbz	r0, 800b156 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800b126:	b538      	push	{r3, r4, r5, lr}
 800b128:	460d      	mov	r5, r1
 800b12a:	4628      	mov	r0, r5
 800b12c:	2108      	movs	r1, #8
 800b12e:	f001 f9fd 	bl	800c52c <ucdr_alignment>
 800b132:	f105 0308 	add.w	r3, r5, #8
 800b136:	181c      	adds	r4, r3, r0
 800b138:	2108      	movs	r1, #8
 800b13a:	4620      	mov	r0, r4
 800b13c:	f001 f9f6 	bl	800c52c <ucdr_alignment>
 800b140:	3008      	adds	r0, #8
 800b142:	4404      	add	r4, r0
 800b144:	2108      	movs	r1, #8
 800b146:	4620      	mov	r0, r4
 800b148:	f001 f9f0 	bl	800c52c <ucdr_alignment>
 800b14c:	f1c5 0508 	rsb	r5, r5, #8
 800b150:	4428      	add	r0, r5
 800b152:	4420      	add	r0, r4
 800b154:	bd38      	pop	{r3, r4, r5, pc}
 800b156:	4770      	bx	lr

0800b158 <_Vector3__cdr_deserialize>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	b171      	cbz	r1, 800b17c <_Vector3__cdr_deserialize+0x24>
 800b15e:	4605      	mov	r5, r0
 800b160:	f001 f8c6 	bl	800c2f0 <ucdr_deserialize_double>
 800b164:	f104 0108 	add.w	r1, r4, #8
 800b168:	4628      	mov	r0, r5
 800b16a:	f001 f8c1 	bl	800c2f0 <ucdr_deserialize_double>
 800b16e:	f104 0110 	add.w	r1, r4, #16
 800b172:	4628      	mov	r0, r5
 800b174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b178:	f001 b8ba 	b.w	800c2f0 <ucdr_deserialize_double>
 800b17c:	4608      	mov	r0, r1
 800b17e:	bd38      	pop	{r3, r4, r5, pc}

0800b180 <_Vector3__cdr_serialize>:
 800b180:	b198      	cbz	r0, 800b1aa <_Vector3__cdr_serialize+0x2a>
 800b182:	b538      	push	{r3, r4, r5, lr}
 800b184:	ed90 0b00 	vldr	d0, [r0]
 800b188:	460d      	mov	r5, r1
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	f000 ffdf 	bl	800c150 <ucdr_serialize_double>
 800b192:	ed94 0b02 	vldr	d0, [r4, #8]
 800b196:	4628      	mov	r0, r5
 800b198:	f000 ffda 	bl	800c150 <ucdr_serialize_double>
 800b19c:	ed94 0b04 	vldr	d0, [r4, #16]
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a6:	f000 bfd3 	b.w	800c150 <ucdr_serialize_double>
 800b1aa:	4770      	bx	lr

0800b1ac <_Vector3__get_serialized_size>:
 800b1ac:	b198      	cbz	r0, 800b1d6 <_Vector3__get_serialized_size+0x2a>
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	2108      	movs	r1, #8
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	f001 f9ba 	bl	800c52c <ucdr_alignment>
 800b1b8:	f100 0408 	add.w	r4, r0, #8
 800b1bc:	2108      	movs	r1, #8
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f001 f9b4 	bl	800c52c <ucdr_alignment>
 800b1c4:	3008      	adds	r0, #8
 800b1c6:	4404      	add	r4, r0
 800b1c8:	2108      	movs	r1, #8
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f001 f9ae 	bl	800c52c <ucdr_alignment>
 800b1d0:	3008      	adds	r0, #8
 800b1d2:	4420      	add	r0, r4
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	4770      	bx	lr

0800b1d8 <_Vector3__max_serialized_size>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	2108      	movs	r1, #8
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f001 f9a5 	bl	800c52c <ucdr_alignment>
 800b1e2:	f100 0508 	add.w	r5, r0, #8
 800b1e6:	2108      	movs	r1, #8
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f001 f99f 	bl	800c52c <ucdr_alignment>
 800b1ee:	f100 0408 	add.w	r4, r0, #8
 800b1f2:	442c      	add	r4, r5
 800b1f4:	2108      	movs	r1, #8
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f001 f998 	bl	800c52c <ucdr_alignment>
 800b1fc:	3008      	adds	r0, #8
 800b1fe:	4420      	add	r0, r4
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	bf00      	nop

0800b204 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	2301      	movs	r3, #1
 800b208:	460c      	mov	r4, r1
 800b20a:	7003      	strb	r3, [r0, #0]
 800b20c:	2108      	movs	r1, #8
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 f98c 	bl	800c52c <ucdr_alignment>
 800b214:	f104 0508 	add.w	r5, r4, #8
 800b218:	1946      	adds	r6, r0, r5
 800b21a:	2108      	movs	r1, #8
 800b21c:	4630      	mov	r0, r6
 800b21e:	f001 f985 	bl	800c52c <ucdr_alignment>
 800b222:	f100 0508 	add.w	r5, r0, #8
 800b226:	4435      	add	r5, r6
 800b228:	2108      	movs	r1, #8
 800b22a:	4628      	mov	r0, r5
 800b22c:	f001 f97e 	bl	800c52c <ucdr_alignment>
 800b230:	f1c4 0408 	rsb	r4, r4, #8
 800b234:	4420      	add	r0, r4
 800b236:	4428      	add	r0, r5
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	bf00      	nop

0800b23c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b23c:	4800      	ldr	r0, [pc, #0]	@ (800b240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800b23e:	4770      	bx	lr
 800b240:	20000968 	.word	0x20000968

0800b244 <ucdr_serialize_bool>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	460d      	mov	r5, r1
 800b248:	2101      	movs	r1, #1
 800b24a:	4604      	mov	r4, r0
 800b24c:	f001 f922 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b250:	b148      	cbz	r0, 800b266 <ucdr_serialize_bool+0x22>
 800b252:	68a3      	ldr	r3, [r4, #8]
 800b254:	701d      	strb	r5, [r3, #0]
 800b256:	68a2      	ldr	r2, [r4, #8]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	2101      	movs	r1, #1
 800b25c:	440a      	add	r2, r1
 800b25e:	440b      	add	r3, r1
 800b260:	60a2      	str	r2, [r4, #8]
 800b262:	6123      	str	r3, [r4, #16]
 800b264:	7561      	strb	r1, [r4, #21]
 800b266:	7da0      	ldrb	r0, [r4, #22]
 800b268:	f080 0001 	eor.w	r0, r0, #1
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	bf00      	nop

0800b270 <ucdr_deserialize_bool>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	460d      	mov	r5, r1
 800b274:	2101      	movs	r1, #1
 800b276:	4604      	mov	r4, r0
 800b278:	f001 f90c 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b27c:	b160      	cbz	r0, 800b298 <ucdr_deserialize_bool+0x28>
 800b27e:	68a2      	ldr	r2, [r4, #8]
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b286:	3900      	subs	r1, #0
 800b288:	bf18      	it	ne
 800b28a:	2101      	movne	r1, #1
 800b28c:	7029      	strb	r1, [r5, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	2101      	movs	r1, #1
 800b292:	60a2      	str	r2, [r4, #8]
 800b294:	6123      	str	r3, [r4, #16]
 800b296:	7561      	strb	r1, [r4, #21]
 800b298:	7da0      	ldrb	r0, [r4, #22]
 800b29a:	f080 0001 	eor.w	r0, r0, #1
 800b29e:	bd38      	pop	{r3, r4, r5, pc}

0800b2a0 <ucdr_serialize_uint8_t>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	f001 f8f4 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b2ac:	b148      	cbz	r0, 800b2c2 <ucdr_serialize_uint8_t+0x22>
 800b2ae:	68a3      	ldr	r3, [r4, #8]
 800b2b0:	701d      	strb	r5, [r3, #0]
 800b2b2:	68a2      	ldr	r2, [r4, #8]
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	440a      	add	r2, r1
 800b2ba:	440b      	add	r3, r1
 800b2bc:	60a2      	str	r2, [r4, #8]
 800b2be:	6123      	str	r3, [r4, #16]
 800b2c0:	7561      	strb	r1, [r4, #21]
 800b2c2:	7da0      	ldrb	r0, [r4, #22]
 800b2c4:	f080 0001 	eor.w	r0, r0, #1
 800b2c8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ca:	bf00      	nop

0800b2cc <ucdr_deserialize_uint8_t>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	f001 f8de 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b2d8:	b150      	cbz	r0, 800b2f0 <ucdr_deserialize_uint8_t+0x24>
 800b2da:	68a3      	ldr	r3, [r4, #8]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	702b      	strb	r3, [r5, #0]
 800b2e0:	68a2      	ldr	r2, [r4, #8]
 800b2e2:	6923      	ldr	r3, [r4, #16]
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	440a      	add	r2, r1
 800b2e8:	440b      	add	r3, r1
 800b2ea:	60a2      	str	r2, [r4, #8]
 800b2ec:	6123      	str	r3, [r4, #16]
 800b2ee:	7561      	strb	r1, [r4, #21]
 800b2f0:	7da0      	ldrb	r0, [r4, #22]
 800b2f2:	f080 0001 	eor.w	r0, r0, #1
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}

0800b2f8 <ucdr_serialize_uint16_t>:
 800b2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	460b      	mov	r3, r1
 800b300:	2102      	movs	r1, #2
 800b302:	4604      	mov	r4, r0
 800b304:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b308:	f001 f918 	bl	800c53c <ucdr_buffer_alignment>
 800b30c:	4601      	mov	r1, r0
 800b30e:	4620      	mov	r0, r4
 800b310:	7d67      	ldrb	r7, [r4, #21]
 800b312:	f001 f957 	bl	800c5c4 <ucdr_advance_buffer>
 800b316:	2102      	movs	r1, #2
 800b318:	4620      	mov	r0, r4
 800b31a:	f001 f8af 	bl	800c47c <ucdr_check_buffer_available_for>
 800b31e:	bb78      	cbnz	r0, 800b380 <ucdr_serialize_uint16_t+0x88>
 800b320:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b324:	42ab      	cmp	r3, r5
 800b326:	d926      	bls.n	800b376 <ucdr_serialize_uint16_t+0x7e>
 800b328:	1b5e      	subs	r6, r3, r5
 800b32a:	60a3      	str	r3, [r4, #8]
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	f1c6 0802 	rsb	r8, r6, #2
 800b332:	4433      	add	r3, r6
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	4641      	mov	r1, r8
 800b338:	4620      	mov	r0, r4
 800b33a:	f001 f8ab 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d03b      	beq.n	800b3ba <ucdr_serialize_uint16_t+0xc2>
 800b342:	7d23      	ldrb	r3, [r4, #20]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d04a      	beq.n	800b3de <ucdr_serialize_uint16_t+0xe6>
 800b348:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b34c:	702b      	strb	r3, [r5, #0]
 800b34e:	2e00      	cmp	r6, #0
 800b350:	d040      	beq.n	800b3d4 <ucdr_serialize_uint16_t+0xdc>
 800b352:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b356:	706b      	strb	r3, [r5, #1]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	68a2      	ldr	r2, [r4, #8]
 800b35c:	7da0      	ldrb	r0, [r4, #22]
 800b35e:	3302      	adds	r3, #2
 800b360:	1b9e      	subs	r6, r3, r6
 800b362:	4442      	add	r2, r8
 800b364:	2302      	movs	r3, #2
 800b366:	f080 0001 	eor.w	r0, r0, #1
 800b36a:	60a2      	str	r2, [r4, #8]
 800b36c:	6126      	str	r6, [r4, #16]
 800b36e:	7563      	strb	r3, [r4, #21]
 800b370:	b002      	add	sp, #8
 800b372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b376:	2102      	movs	r1, #2
 800b378:	4620      	mov	r0, r4
 800b37a:	f001 f88b 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b37e:	b190      	cbz	r0, 800b3a6 <ucdr_serialize_uint16_t+0xae>
 800b380:	7d23      	ldrb	r3, [r4, #20]
 800b382:	2b01      	cmp	r3, #1
 800b384:	68a3      	ldr	r3, [r4, #8]
 800b386:	d014      	beq.n	800b3b2 <ucdr_serialize_uint16_t+0xba>
 800b388:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b394:	705a      	strb	r2, [r3, #1]
 800b396:	68a2      	ldr	r2, [r4, #8]
 800b398:	6923      	ldr	r3, [r4, #16]
 800b39a:	3202      	adds	r2, #2
 800b39c:	3302      	adds	r3, #2
 800b39e:	2102      	movs	r1, #2
 800b3a0:	60a2      	str	r2, [r4, #8]
 800b3a2:	6123      	str	r3, [r4, #16]
 800b3a4:	7561      	strb	r1, [r4, #21]
 800b3a6:	7da0      	ldrb	r0, [r4, #22]
 800b3a8:	f080 0001 	eor.w	r0, r0, #1
 800b3ac:	b002      	add	sp, #8
 800b3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b3b6:	801a      	strh	r2, [r3, #0]
 800b3b8:	e7ed      	b.n	800b396 <ucdr_serialize_uint16_t+0x9e>
 800b3ba:	68a2      	ldr	r2, [r4, #8]
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	7da0      	ldrb	r0, [r4, #22]
 800b3c0:	7567      	strb	r7, [r4, #21]
 800b3c2:	1b92      	subs	r2, r2, r6
 800b3c4:	1b9b      	subs	r3, r3, r6
 800b3c6:	f080 0001 	eor.w	r0, r0, #1
 800b3ca:	60a2      	str	r2, [r4, #8]
 800b3cc:	6123      	str	r3, [r4, #16]
 800b3ce:	b002      	add	sp, #8
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d4:	68a3      	ldr	r3, [r4, #8]
 800b3d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3da:	701a      	strb	r2, [r3, #0]
 800b3dc:	e7bc      	b.n	800b358 <ucdr_serialize_uint16_t+0x60>
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f10d 0506 	add.w	r5, sp, #6
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	f00e fad5 	bl	8019996 <memcpy>
 800b3ec:	68a0      	ldr	r0, [r4, #8]
 800b3ee:	4642      	mov	r2, r8
 800b3f0:	19a9      	adds	r1, r5, r6
 800b3f2:	f00e fad0 	bl	8019996 <memcpy>
 800b3f6:	e7af      	b.n	800b358 <ucdr_serialize_uint16_t+0x60>

0800b3f8 <ucdr_serialize_endian_uint16_t>:
 800b3f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	460d      	mov	r5, r1
 800b400:	2102      	movs	r1, #2
 800b402:	4604      	mov	r4, r0
 800b404:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b408:	f001 f898 	bl	800c53c <ucdr_buffer_alignment>
 800b40c:	4601      	mov	r1, r0
 800b40e:	4620      	mov	r0, r4
 800b410:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b414:	f001 f8d6 	bl	800c5c4 <ucdr_advance_buffer>
 800b418:	2102      	movs	r1, #2
 800b41a:	4620      	mov	r0, r4
 800b41c:	f001 f82e 	bl	800c47c <ucdr_check_buffer_available_for>
 800b420:	bb70      	cbnz	r0, 800b480 <ucdr_serialize_endian_uint16_t+0x88>
 800b422:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b426:	42be      	cmp	r6, r7
 800b428:	d925      	bls.n	800b476 <ucdr_serialize_endian_uint16_t+0x7e>
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	60a6      	str	r6, [r4, #8]
 800b42e:	1bf6      	subs	r6, r6, r7
 800b430:	4433      	add	r3, r6
 800b432:	f1c6 0902 	rsb	r9, r6, #2
 800b436:	6123      	str	r3, [r4, #16]
 800b438:	4649      	mov	r1, r9
 800b43a:	4620      	mov	r0, r4
 800b43c:	f001 f82a 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b440:	2800      	cmp	r0, #0
 800b442:	d039      	beq.n	800b4b8 <ucdr_serialize_endian_uint16_t+0xc0>
 800b444:	2d01      	cmp	r5, #1
 800b446:	d04a      	beq.n	800b4de <ucdr_serialize_endian_uint16_t+0xe6>
 800b448:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b44c:	703b      	strb	r3, [r7, #0]
 800b44e:	2e00      	cmp	r6, #0
 800b450:	d040      	beq.n	800b4d4 <ucdr_serialize_endian_uint16_t+0xdc>
 800b452:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b456:	707b      	strb	r3, [r7, #1]
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	68a2      	ldr	r2, [r4, #8]
 800b45c:	7da0      	ldrb	r0, [r4, #22]
 800b45e:	3302      	adds	r3, #2
 800b460:	444a      	add	r2, r9
 800b462:	1b9b      	subs	r3, r3, r6
 800b464:	2102      	movs	r1, #2
 800b466:	f080 0001 	eor.w	r0, r0, #1
 800b46a:	60a2      	str	r2, [r4, #8]
 800b46c:	6123      	str	r3, [r4, #16]
 800b46e:	7561      	strb	r1, [r4, #21]
 800b470:	b003      	add	sp, #12
 800b472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b476:	2102      	movs	r1, #2
 800b478:	4620      	mov	r0, r4
 800b47a:	f001 f80b 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b47e:	b188      	cbz	r0, 800b4a4 <ucdr_serialize_endian_uint16_t+0xac>
 800b480:	2d01      	cmp	r5, #1
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	d014      	beq.n	800b4b0 <ucdr_serialize_endian_uint16_t+0xb8>
 800b486:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b492:	705a      	strb	r2, [r3, #1]
 800b494:	68a2      	ldr	r2, [r4, #8]
 800b496:	6923      	ldr	r3, [r4, #16]
 800b498:	3202      	adds	r2, #2
 800b49a:	3302      	adds	r3, #2
 800b49c:	2102      	movs	r1, #2
 800b49e:	60a2      	str	r2, [r4, #8]
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	7561      	strb	r1, [r4, #21]
 800b4a4:	7da0      	ldrb	r0, [r4, #22]
 800b4a6:	f080 0001 	eor.w	r0, r0, #1
 800b4aa:	b003      	add	sp, #12
 800b4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b4b4:	801a      	strh	r2, [r3, #0]
 800b4b6:	e7ed      	b.n	800b494 <ucdr_serialize_endian_uint16_t+0x9c>
 800b4b8:	68a2      	ldr	r2, [r4, #8]
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	7da0      	ldrb	r0, [r4, #22]
 800b4be:	f884 8015 	strb.w	r8, [r4, #21]
 800b4c2:	1b92      	subs	r2, r2, r6
 800b4c4:	1b9b      	subs	r3, r3, r6
 800b4c6:	f080 0001 	eor.w	r0, r0, #1
 800b4ca:	60a2      	str	r2, [r4, #8]
 800b4cc:	6123      	str	r3, [r4, #16]
 800b4ce:	b003      	add	sp, #12
 800b4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d4:	68a3      	ldr	r3, [r4, #8]
 800b4d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4da:	701a      	strb	r2, [r3, #0]
 800b4dc:	e7bc      	b.n	800b458 <ucdr_serialize_endian_uint16_t+0x60>
 800b4de:	f10d 0506 	add.w	r5, sp, #6
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	f00e fa55 	bl	8019996 <memcpy>
 800b4ec:	68a0      	ldr	r0, [r4, #8]
 800b4ee:	464a      	mov	r2, r9
 800b4f0:	19a9      	adds	r1, r5, r6
 800b4f2:	f00e fa50 	bl	8019996 <memcpy>
 800b4f6:	e7af      	b.n	800b458 <ucdr_serialize_endian_uint16_t+0x60>

0800b4f8 <ucdr_deserialize_uint16_t>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	2102      	movs	r1, #2
 800b500:	4604      	mov	r4, r0
 800b502:	f001 f81b 	bl	800c53c <ucdr_buffer_alignment>
 800b506:	4601      	mov	r1, r0
 800b508:	4620      	mov	r0, r4
 800b50a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b50e:	f001 f859 	bl	800c5c4 <ucdr_advance_buffer>
 800b512:	2102      	movs	r1, #2
 800b514:	4620      	mov	r0, r4
 800b516:	f000 ffb1 	bl	800c47c <ucdr_check_buffer_available_for>
 800b51a:	bb60      	cbnz	r0, 800b576 <ucdr_deserialize_uint16_t+0x7e>
 800b51c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b520:	42be      	cmp	r6, r7
 800b522:	d923      	bls.n	800b56c <ucdr_deserialize_uint16_t+0x74>
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	60a6      	str	r6, [r4, #8]
 800b528:	1bf6      	subs	r6, r6, r7
 800b52a:	4433      	add	r3, r6
 800b52c:	f1c6 0902 	rsb	r9, r6, #2
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	4649      	mov	r1, r9
 800b534:	4620      	mov	r0, r4
 800b536:	f000 ffad 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d034      	beq.n	800b5a8 <ucdr_deserialize_uint16_t+0xb0>
 800b53e:	7d23      	ldrb	r3, [r4, #20]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d042      	beq.n	800b5ca <ucdr_deserialize_uint16_t+0xd2>
 800b544:	787b      	ldrb	r3, [r7, #1]
 800b546:	702b      	strb	r3, [r5, #0]
 800b548:	2e00      	cmp	r6, #0
 800b54a:	d03a      	beq.n	800b5c2 <ucdr_deserialize_uint16_t+0xca>
 800b54c:	783b      	ldrb	r3, [r7, #0]
 800b54e:	706b      	strb	r3, [r5, #1]
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	68a2      	ldr	r2, [r4, #8]
 800b554:	7da0      	ldrb	r0, [r4, #22]
 800b556:	2102      	movs	r1, #2
 800b558:	3302      	adds	r3, #2
 800b55a:	444a      	add	r2, r9
 800b55c:	1b9b      	subs	r3, r3, r6
 800b55e:	7561      	strb	r1, [r4, #21]
 800b560:	60a2      	str	r2, [r4, #8]
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	f080 0001 	eor.w	r0, r0, #1
 800b568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56c:	2102      	movs	r1, #2
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 ff90 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b574:	b180      	cbz	r0, 800b598 <ucdr_deserialize_uint16_t+0xa0>
 800b576:	7d23      	ldrb	r3, [r4, #20]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	68a3      	ldr	r3, [r4, #8]
 800b57c:	d011      	beq.n	800b5a2 <ucdr_deserialize_uint16_t+0xaa>
 800b57e:	785b      	ldrb	r3, [r3, #1]
 800b580:	702b      	strb	r3, [r5, #0]
 800b582:	68a3      	ldr	r3, [r4, #8]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	706b      	strb	r3, [r5, #1]
 800b588:	68a2      	ldr	r2, [r4, #8]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	3202      	adds	r2, #2
 800b58e:	3302      	adds	r3, #2
 800b590:	2102      	movs	r1, #2
 800b592:	60a2      	str	r2, [r4, #8]
 800b594:	6123      	str	r3, [r4, #16]
 800b596:	7561      	strb	r1, [r4, #21]
 800b598:	7da0      	ldrb	r0, [r4, #22]
 800b59a:	f080 0001 	eor.w	r0, r0, #1
 800b59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a2:	881b      	ldrh	r3, [r3, #0]
 800b5a4:	802b      	strh	r3, [r5, #0]
 800b5a6:	e7ef      	b.n	800b588 <ucdr_deserialize_uint16_t+0x90>
 800b5a8:	68a2      	ldr	r2, [r4, #8]
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	7da0      	ldrb	r0, [r4, #22]
 800b5ae:	f884 8015 	strb.w	r8, [r4, #21]
 800b5b2:	1b92      	subs	r2, r2, r6
 800b5b4:	1b9b      	subs	r3, r3, r6
 800b5b6:	60a2      	str	r2, [r4, #8]
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	f080 0001 	eor.w	r0, r0, #1
 800b5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	706b      	strb	r3, [r5, #1]
 800b5c8:	e7c2      	b.n	800b550 <ucdr_deserialize_uint16_t+0x58>
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f00e f9e1 	bl	8019996 <memcpy>
 800b5d4:	68a1      	ldr	r1, [r4, #8]
 800b5d6:	464a      	mov	r2, r9
 800b5d8:	19a8      	adds	r0, r5, r6
 800b5da:	f00e f9dc 	bl	8019996 <memcpy>
 800b5de:	e7b7      	b.n	800b550 <ucdr_deserialize_uint16_t+0x58>

0800b5e0 <ucdr_deserialize_endian_uint16_t>:
 800b5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e4:	460e      	mov	r6, r1
 800b5e6:	2102      	movs	r1, #2
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	4615      	mov	r5, r2
 800b5ec:	f000 ffa6 	bl	800c53c <ucdr_buffer_alignment>
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b5f8:	f000 ffe4 	bl	800c5c4 <ucdr_advance_buffer>
 800b5fc:	2102      	movs	r1, #2
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 ff3c 	bl	800c47c <ucdr_check_buffer_available_for>
 800b604:	bb70      	cbnz	r0, 800b664 <ucdr_deserialize_endian_uint16_t+0x84>
 800b606:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b60a:	4547      	cmp	r7, r8
 800b60c:	d925      	bls.n	800b65a <ucdr_deserialize_endian_uint16_t+0x7a>
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	60a7      	str	r7, [r4, #8]
 800b612:	eba7 0708 	sub.w	r7, r7, r8
 800b616:	443b      	add	r3, r7
 800b618:	f1c7 0a02 	rsb	sl, r7, #2
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	4651      	mov	r1, sl
 800b620:	4620      	mov	r0, r4
 800b622:	f000 ff37 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b626:	2800      	cmp	r0, #0
 800b628:	d034      	beq.n	800b694 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b62a:	2e01      	cmp	r6, #1
 800b62c:	d043      	beq.n	800b6b6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b62e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b632:	702b      	strb	r3, [r5, #0]
 800b634:	2f00      	cmp	r7, #0
 800b636:	d03a      	beq.n	800b6ae <ucdr_deserialize_endian_uint16_t+0xce>
 800b638:	f898 3000 	ldrb.w	r3, [r8]
 800b63c:	706b      	strb	r3, [r5, #1]
 800b63e:	6923      	ldr	r3, [r4, #16]
 800b640:	68a2      	ldr	r2, [r4, #8]
 800b642:	7da0      	ldrb	r0, [r4, #22]
 800b644:	2102      	movs	r1, #2
 800b646:	3302      	adds	r3, #2
 800b648:	4452      	add	r2, sl
 800b64a:	1bdb      	subs	r3, r3, r7
 800b64c:	7561      	strb	r1, [r4, #21]
 800b64e:	60a2      	str	r2, [r4, #8]
 800b650:	6123      	str	r3, [r4, #16]
 800b652:	f080 0001 	eor.w	r0, r0, #1
 800b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b65a:	2102      	movs	r1, #2
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 ff19 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b662:	b178      	cbz	r0, 800b684 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b664:	2e01      	cmp	r6, #1
 800b666:	68a3      	ldr	r3, [r4, #8]
 800b668:	d011      	beq.n	800b68e <ucdr_deserialize_endian_uint16_t+0xae>
 800b66a:	785b      	ldrb	r3, [r3, #1]
 800b66c:	702b      	strb	r3, [r5, #0]
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	706b      	strb	r3, [r5, #1]
 800b674:	68a2      	ldr	r2, [r4, #8]
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	3202      	adds	r2, #2
 800b67a:	3302      	adds	r3, #2
 800b67c:	2102      	movs	r1, #2
 800b67e:	60a2      	str	r2, [r4, #8]
 800b680:	6123      	str	r3, [r4, #16]
 800b682:	7561      	strb	r1, [r4, #21]
 800b684:	7da0      	ldrb	r0, [r4, #22]
 800b686:	f080 0001 	eor.w	r0, r0, #1
 800b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	802b      	strh	r3, [r5, #0]
 800b692:	e7ef      	b.n	800b674 <ucdr_deserialize_endian_uint16_t+0x94>
 800b694:	68a2      	ldr	r2, [r4, #8]
 800b696:	6923      	ldr	r3, [r4, #16]
 800b698:	7da0      	ldrb	r0, [r4, #22]
 800b69a:	f884 9015 	strb.w	r9, [r4, #21]
 800b69e:	1bd2      	subs	r2, r2, r7
 800b6a0:	1bdb      	subs	r3, r3, r7
 800b6a2:	60a2      	str	r2, [r4, #8]
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	f080 0001 	eor.w	r0, r0, #1
 800b6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	706b      	strb	r3, [r5, #1]
 800b6b4:	e7c3      	b.n	800b63e <ucdr_deserialize_endian_uint16_t+0x5e>
 800b6b6:	4641      	mov	r1, r8
 800b6b8:	463a      	mov	r2, r7
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f00e f96b 	bl	8019996 <memcpy>
 800b6c0:	68a1      	ldr	r1, [r4, #8]
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	19e8      	adds	r0, r5, r7
 800b6c6:	f00e f966 	bl	8019996 <memcpy>
 800b6ca:	e7b8      	b.n	800b63e <ucdr_deserialize_endian_uint16_t+0x5e>

0800b6cc <ucdr_serialize_uint32_t>:
 800b6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	9101      	str	r1, [sp, #4]
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	f000 ff30 	bl	800c53c <ucdr_buffer_alignment>
 800b6dc:	4601      	mov	r1, r0
 800b6de:	4620      	mov	r0, r4
 800b6e0:	7d67      	ldrb	r7, [r4, #21]
 800b6e2:	f000 ff6f 	bl	800c5c4 <ucdr_advance_buffer>
 800b6e6:	2104      	movs	r1, #4
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f000 fec7 	bl	800c47c <ucdr_check_buffer_available_for>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d139      	bne.n	800b766 <ucdr_serialize_uint32_t+0x9a>
 800b6f2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b6f6:	42ab      	cmp	r3, r5
 800b6f8:	d930      	bls.n	800b75c <ucdr_serialize_uint32_t+0x90>
 800b6fa:	1b5e      	subs	r6, r3, r5
 800b6fc:	60a3      	str	r3, [r4, #8]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	f1c6 0804 	rsb	r8, r6, #4
 800b704:	4433      	add	r3, r6
 800b706:	6123      	str	r3, [r4, #16]
 800b708:	4641      	mov	r1, r8
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 fec2 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b710:	2800      	cmp	r0, #0
 800b712:	d04c      	beq.n	800b7ae <ucdr_serialize_uint32_t+0xe2>
 800b714:	7d23      	ldrb	r3, [r4, #20]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d063      	beq.n	800b7e2 <ucdr_serialize_uint32_t+0x116>
 800b71a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b71e:	702b      	strb	r3, [r5, #0]
 800b720:	2e00      	cmp	r6, #0
 800b722:	d051      	beq.n	800b7c8 <ucdr_serialize_uint32_t+0xfc>
 800b724:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b728:	706b      	strb	r3, [r5, #1]
 800b72a:	2e01      	cmp	r6, #1
 800b72c:	d050      	beq.n	800b7d0 <ucdr_serialize_uint32_t+0x104>
 800b72e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b732:	70ab      	strb	r3, [r5, #2]
 800b734:	2e02      	cmp	r6, #2
 800b736:	d04f      	beq.n	800b7d8 <ucdr_serialize_uint32_t+0x10c>
 800b738:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b73c:	70eb      	strb	r3, [r5, #3]
 800b73e:	6923      	ldr	r3, [r4, #16]
 800b740:	68a2      	ldr	r2, [r4, #8]
 800b742:	7da0      	ldrb	r0, [r4, #22]
 800b744:	3304      	adds	r3, #4
 800b746:	1b9e      	subs	r6, r3, r6
 800b748:	4442      	add	r2, r8
 800b74a:	2304      	movs	r3, #4
 800b74c:	f080 0001 	eor.w	r0, r0, #1
 800b750:	60a2      	str	r2, [r4, #8]
 800b752:	6126      	str	r6, [r4, #16]
 800b754:	7563      	strb	r3, [r4, #21]
 800b756:	b002      	add	sp, #8
 800b758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75c:	2104      	movs	r1, #4
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 fe98 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b764:	b1d0      	cbz	r0, 800b79c <ucdr_serialize_uint32_t+0xd0>
 800b766:	7d23      	ldrb	r3, [r4, #20]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	d01c      	beq.n	800b7a8 <ucdr_serialize_uint32_t+0xdc>
 800b76e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	68a3      	ldr	r3, [r4, #8]
 800b776:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b77a:	705a      	strb	r2, [r3, #1]
 800b77c:	68a3      	ldr	r3, [r4, #8]
 800b77e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b782:	709a      	strb	r2, [r3, #2]
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b78a:	70da      	strb	r2, [r3, #3]
 800b78c:	68a2      	ldr	r2, [r4, #8]
 800b78e:	6923      	ldr	r3, [r4, #16]
 800b790:	3204      	adds	r2, #4
 800b792:	3304      	adds	r3, #4
 800b794:	2104      	movs	r1, #4
 800b796:	60a2      	str	r2, [r4, #8]
 800b798:	6123      	str	r3, [r4, #16]
 800b79a:	7561      	strb	r1, [r4, #21]
 800b79c:	7da0      	ldrb	r0, [r4, #22]
 800b79e:	f080 0001 	eor.w	r0, r0, #1
 800b7a2:	b002      	add	sp, #8
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a8:	9a01      	ldr	r2, [sp, #4]
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	e7ee      	b.n	800b78c <ucdr_serialize_uint32_t+0xc0>
 800b7ae:	68a2      	ldr	r2, [r4, #8]
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	7da0      	ldrb	r0, [r4, #22]
 800b7b4:	7567      	strb	r7, [r4, #21]
 800b7b6:	1b92      	subs	r2, r2, r6
 800b7b8:	1b9b      	subs	r3, r3, r6
 800b7ba:	f080 0001 	eor.w	r0, r0, #1
 800b7be:	60a2      	str	r2, [r4, #8]
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	b002      	add	sp, #8
 800b7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e7ad      	b.n	800b73e <ucdr_serialize_uint32_t+0x72>
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	ad01      	add	r5, sp, #4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	f00e f8d4 	bl	8019996 <memcpy>
 800b7ee:	68a0      	ldr	r0, [r4, #8]
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	19a9      	adds	r1, r5, r6
 800b7f4:	f00e f8cf 	bl	8019996 <memcpy>
 800b7f8:	e7a1      	b.n	800b73e <ucdr_serialize_uint32_t+0x72>
 800b7fa:	bf00      	nop

0800b7fc <ucdr_serialize_endian_uint32_t>:
 800b7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b800:	b083      	sub	sp, #12
 800b802:	460d      	mov	r5, r1
 800b804:	2104      	movs	r1, #4
 800b806:	4604      	mov	r4, r0
 800b808:	9201      	str	r2, [sp, #4]
 800b80a:	f000 fe97 	bl	800c53c <ucdr_buffer_alignment>
 800b80e:	4601      	mov	r1, r0
 800b810:	4620      	mov	r0, r4
 800b812:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b816:	f000 fed5 	bl	800c5c4 <ucdr_advance_buffer>
 800b81a:	2104      	movs	r1, #4
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 fe2d 	bl	800c47c <ucdr_check_buffer_available_for>
 800b822:	2800      	cmp	r0, #0
 800b824:	d138      	bne.n	800b898 <ucdr_serialize_endian_uint32_t+0x9c>
 800b826:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b82a:	42b7      	cmp	r7, r6
 800b82c:	d92f      	bls.n	800b88e <ucdr_serialize_endian_uint32_t+0x92>
 800b82e:	6923      	ldr	r3, [r4, #16]
 800b830:	60a7      	str	r7, [r4, #8]
 800b832:	1bbf      	subs	r7, r7, r6
 800b834:	443b      	add	r3, r7
 800b836:	f1c7 0904 	rsb	r9, r7, #4
 800b83a:	6123      	str	r3, [r4, #16]
 800b83c:	4649      	mov	r1, r9
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 fe28 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b844:	2800      	cmp	r0, #0
 800b846:	d04a      	beq.n	800b8de <ucdr_serialize_endian_uint32_t+0xe2>
 800b848:	2d01      	cmp	r5, #1
 800b84a:	d063      	beq.n	800b914 <ucdr_serialize_endian_uint32_t+0x118>
 800b84c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b850:	7033      	strb	r3, [r6, #0]
 800b852:	2f00      	cmp	r7, #0
 800b854:	d051      	beq.n	800b8fa <ucdr_serialize_endian_uint32_t+0xfe>
 800b856:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b85a:	7073      	strb	r3, [r6, #1]
 800b85c:	2f01      	cmp	r7, #1
 800b85e:	d050      	beq.n	800b902 <ucdr_serialize_endian_uint32_t+0x106>
 800b860:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b864:	70b3      	strb	r3, [r6, #2]
 800b866:	2f02      	cmp	r7, #2
 800b868:	d04f      	beq.n	800b90a <ucdr_serialize_endian_uint32_t+0x10e>
 800b86a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b86e:	70f3      	strb	r3, [r6, #3]
 800b870:	6923      	ldr	r3, [r4, #16]
 800b872:	68a2      	ldr	r2, [r4, #8]
 800b874:	7da0      	ldrb	r0, [r4, #22]
 800b876:	3304      	adds	r3, #4
 800b878:	444a      	add	r2, r9
 800b87a:	1bdb      	subs	r3, r3, r7
 800b87c:	2104      	movs	r1, #4
 800b87e:	f080 0001 	eor.w	r0, r0, #1
 800b882:	60a2      	str	r2, [r4, #8]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	7561      	strb	r1, [r4, #21]
 800b888:	b003      	add	sp, #12
 800b88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b88e:	2104      	movs	r1, #4
 800b890:	4620      	mov	r0, r4
 800b892:	f000 fdff 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b896:	b1c8      	cbz	r0, 800b8cc <ucdr_serialize_endian_uint32_t+0xd0>
 800b898:	2d01      	cmp	r5, #1
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	d01c      	beq.n	800b8d8 <ucdr_serialize_endian_uint32_t+0xdc>
 800b89e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8a2:	701a      	strb	r2, [r3, #0]
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8aa:	705a      	strb	r2, [r3, #1]
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8b2:	709a      	strb	r2, [r3, #2]
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8ba:	70da      	strb	r2, [r3, #3]
 800b8bc:	68a2      	ldr	r2, [r4, #8]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	3204      	adds	r2, #4
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	60a2      	str	r2, [r4, #8]
 800b8c8:	6123      	str	r3, [r4, #16]
 800b8ca:	7561      	strb	r1, [r4, #21]
 800b8cc:	7da0      	ldrb	r0, [r4, #22]
 800b8ce:	f080 0001 	eor.w	r0, r0, #1
 800b8d2:	b003      	add	sp, #12
 800b8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8d8:	9a01      	ldr	r2, [sp, #4]
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	e7ee      	b.n	800b8bc <ucdr_serialize_endian_uint32_t+0xc0>
 800b8de:	68a2      	ldr	r2, [r4, #8]
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	7da0      	ldrb	r0, [r4, #22]
 800b8e4:	f884 8015 	strb.w	r8, [r4, #21]
 800b8e8:	1bd2      	subs	r2, r2, r7
 800b8ea:	1bdb      	subs	r3, r3, r7
 800b8ec:	f080 0001 	eor.w	r0, r0, #1
 800b8f0:	60a2      	str	r2, [r4, #8]
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	b003      	add	sp, #12
 800b8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	e7ad      	b.n	800b870 <ucdr_serialize_endian_uint32_t+0x74>
 800b914:	ad01      	add	r5, sp, #4
 800b916:	4629      	mov	r1, r5
 800b918:	463a      	mov	r2, r7
 800b91a:	4630      	mov	r0, r6
 800b91c:	f00e f83b 	bl	8019996 <memcpy>
 800b920:	68a0      	ldr	r0, [r4, #8]
 800b922:	464a      	mov	r2, r9
 800b924:	19e9      	adds	r1, r5, r7
 800b926:	f00e f836 	bl	8019996 <memcpy>
 800b92a:	e7a1      	b.n	800b870 <ucdr_serialize_endian_uint32_t+0x74>

0800b92c <ucdr_deserialize_uint32_t>:
 800b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b930:	460d      	mov	r5, r1
 800b932:	2104      	movs	r1, #4
 800b934:	4604      	mov	r4, r0
 800b936:	f000 fe01 	bl	800c53c <ucdr_buffer_alignment>
 800b93a:	4601      	mov	r1, r0
 800b93c:	4620      	mov	r0, r4
 800b93e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b942:	f000 fe3f 	bl	800c5c4 <ucdr_advance_buffer>
 800b946:	2104      	movs	r1, #4
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fd97 	bl	800c47c <ucdr_check_buffer_available_for>
 800b94e:	2800      	cmp	r0, #0
 800b950:	d138      	bne.n	800b9c4 <ucdr_deserialize_uint32_t+0x98>
 800b952:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b956:	42b7      	cmp	r7, r6
 800b958:	d92f      	bls.n	800b9ba <ucdr_deserialize_uint32_t+0x8e>
 800b95a:	6923      	ldr	r3, [r4, #16]
 800b95c:	60a7      	str	r7, [r4, #8]
 800b95e:	1bbf      	subs	r7, r7, r6
 800b960:	443b      	add	r3, r7
 800b962:	f1c7 0904 	rsb	r9, r7, #4
 800b966:	6123      	str	r3, [r4, #16]
 800b968:	4649      	mov	r1, r9
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 fd92 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b970:	2800      	cmp	r0, #0
 800b972:	d046      	beq.n	800ba02 <ucdr_deserialize_uint32_t+0xd6>
 800b974:	7d23      	ldrb	r3, [r4, #20]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d05c      	beq.n	800ba34 <ucdr_deserialize_uint32_t+0x108>
 800b97a:	78f3      	ldrb	r3, [r6, #3]
 800b97c:	702b      	strb	r3, [r5, #0]
 800b97e:	2f00      	cmp	r7, #0
 800b980:	d04c      	beq.n	800ba1c <ucdr_deserialize_uint32_t+0xf0>
 800b982:	78b3      	ldrb	r3, [r6, #2]
 800b984:	706b      	strb	r3, [r5, #1]
 800b986:	2f01      	cmp	r7, #1
 800b988:	f105 0302 	add.w	r3, r5, #2
 800b98c:	d04a      	beq.n	800ba24 <ucdr_deserialize_uint32_t+0xf8>
 800b98e:	7873      	ldrb	r3, [r6, #1]
 800b990:	70ab      	strb	r3, [r5, #2]
 800b992:	2f02      	cmp	r7, #2
 800b994:	f105 0303 	add.w	r3, r5, #3
 800b998:	d048      	beq.n	800ba2c <ucdr_deserialize_uint32_t+0x100>
 800b99a:	7833      	ldrb	r3, [r6, #0]
 800b99c:	70eb      	strb	r3, [r5, #3]
 800b99e:	6923      	ldr	r3, [r4, #16]
 800b9a0:	68a2      	ldr	r2, [r4, #8]
 800b9a2:	7da0      	ldrb	r0, [r4, #22]
 800b9a4:	2104      	movs	r1, #4
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	444a      	add	r2, r9
 800b9aa:	1bdb      	subs	r3, r3, r7
 800b9ac:	7561      	strb	r1, [r4, #21]
 800b9ae:	60a2      	str	r2, [r4, #8]
 800b9b0:	6123      	str	r3, [r4, #16]
 800b9b2:	f080 0001 	eor.w	r0, r0, #1
 800b9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ba:	2104      	movs	r1, #4
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f000 fd69 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800b9c2:	b1b0      	cbz	r0, 800b9f2 <ucdr_deserialize_uint32_t+0xc6>
 800b9c4:	7d23      	ldrb	r3, [r4, #20]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	d017      	beq.n	800b9fc <ucdr_deserialize_uint32_t+0xd0>
 800b9cc:	78db      	ldrb	r3, [r3, #3]
 800b9ce:	702b      	strb	r3, [r5, #0]
 800b9d0:	68a3      	ldr	r3, [r4, #8]
 800b9d2:	789b      	ldrb	r3, [r3, #2]
 800b9d4:	706b      	strb	r3, [r5, #1]
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	70ab      	strb	r3, [r5, #2]
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	70eb      	strb	r3, [r5, #3]
 800b9e2:	68a2      	ldr	r2, [r4, #8]
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	3204      	adds	r2, #4
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	2104      	movs	r1, #4
 800b9ec:	60a2      	str	r2, [r4, #8]
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	7561      	strb	r1, [r4, #21]
 800b9f2:	7da0      	ldrb	r0, [r4, #22]
 800b9f4:	f080 0001 	eor.w	r0, r0, #1
 800b9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	e7ef      	b.n	800b9e2 <ucdr_deserialize_uint32_t+0xb6>
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	7da0      	ldrb	r0, [r4, #22]
 800ba08:	f884 8015 	strb.w	r8, [r4, #21]
 800ba0c:	1bd2      	subs	r2, r2, r7
 800ba0e:	1bdb      	subs	r3, r3, r7
 800ba10:	60a2      	str	r2, [r4, #8]
 800ba12:	6123      	str	r3, [r4, #16]
 800ba14:	f080 0001 	eor.w	r0, r0, #1
 800ba18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1c:	68a3      	ldr	r3, [r4, #8]
 800ba1e:	789b      	ldrb	r3, [r3, #2]
 800ba20:	706b      	strb	r3, [r5, #1]
 800ba22:	1cab      	adds	r3, r5, #2
 800ba24:	68a2      	ldr	r2, [r4, #8]
 800ba26:	7852      	ldrb	r2, [r2, #1]
 800ba28:	f803 2b01 	strb.w	r2, [r3], #1
 800ba2c:	68a2      	ldr	r2, [r4, #8]
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	e7b4      	b.n	800b99e <ucdr_deserialize_uint32_t+0x72>
 800ba34:	4631      	mov	r1, r6
 800ba36:	463a      	mov	r2, r7
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f00d ffac 	bl	8019996 <memcpy>
 800ba3e:	68a1      	ldr	r1, [r4, #8]
 800ba40:	464a      	mov	r2, r9
 800ba42:	19e8      	adds	r0, r5, r7
 800ba44:	f00d ffa7 	bl	8019996 <memcpy>
 800ba48:	e7a9      	b.n	800b99e <ucdr_deserialize_uint32_t+0x72>
 800ba4a:	bf00      	nop

0800ba4c <ucdr_deserialize_endian_uint32_t>:
 800ba4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba50:	460e      	mov	r6, r1
 800ba52:	2104      	movs	r1, #4
 800ba54:	4604      	mov	r4, r0
 800ba56:	4615      	mov	r5, r2
 800ba58:	f000 fd70 	bl	800c53c <ucdr_buffer_alignment>
 800ba5c:	4601      	mov	r1, r0
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ba64:	f000 fdae 	bl	800c5c4 <ucdr_advance_buffer>
 800ba68:	2104      	movs	r1, #4
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 fd06 	bl	800c47c <ucdr_check_buffer_available_for>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d13c      	bne.n	800baee <ucdr_deserialize_endian_uint32_t+0xa2>
 800ba74:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ba78:	42bb      	cmp	r3, r7
 800ba7a:	d933      	bls.n	800bae4 <ucdr_deserialize_endian_uint32_t+0x98>
 800ba7c:	eba3 0807 	sub.w	r8, r3, r7
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	f1c8 0a04 	rsb	sl, r8, #4
 800ba88:	4443      	add	r3, r8
 800ba8a:	6123      	str	r3, [r4, #16]
 800ba8c:	4651      	mov	r1, sl
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fd00 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d048      	beq.n	800bb2a <ucdr_deserialize_endian_uint32_t+0xde>
 800ba98:	2e01      	cmp	r6, #1
 800ba9a:	d061      	beq.n	800bb60 <ucdr_deserialize_endian_uint32_t+0x114>
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	702b      	strb	r3, [r5, #0]
 800baa0:	f1b8 0f00 	cmp.w	r8, #0
 800baa4:	d050      	beq.n	800bb48 <ucdr_deserialize_endian_uint32_t+0xfc>
 800baa6:	78bb      	ldrb	r3, [r7, #2]
 800baa8:	706b      	strb	r3, [r5, #1]
 800baaa:	f1b8 0f01 	cmp.w	r8, #1
 800baae:	f105 0302 	add.w	r3, r5, #2
 800bab2:	d04d      	beq.n	800bb50 <ucdr_deserialize_endian_uint32_t+0x104>
 800bab4:	787b      	ldrb	r3, [r7, #1]
 800bab6:	70ab      	strb	r3, [r5, #2]
 800bab8:	f1b8 0f02 	cmp.w	r8, #2
 800babc:	f105 0303 	add.w	r3, r5, #3
 800bac0:	d04a      	beq.n	800bb58 <ucdr_deserialize_endian_uint32_t+0x10c>
 800bac2:	783b      	ldrb	r3, [r7, #0]
 800bac4:	70eb      	strb	r3, [r5, #3]
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	68a2      	ldr	r2, [r4, #8]
 800baca:	7da0      	ldrb	r0, [r4, #22]
 800bacc:	2104      	movs	r1, #4
 800bace:	3304      	adds	r3, #4
 800bad0:	4452      	add	r2, sl
 800bad2:	eba3 0308 	sub.w	r3, r3, r8
 800bad6:	7561      	strb	r1, [r4, #21]
 800bad8:	60a2      	str	r2, [r4, #8]
 800bada:	6123      	str	r3, [r4, #16]
 800badc:	f080 0001 	eor.w	r0, r0, #1
 800bae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae4:	2104      	movs	r1, #4
 800bae6:	4620      	mov	r0, r4
 800bae8:	f000 fcd4 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800baec:	b1a8      	cbz	r0, 800bb1a <ucdr_deserialize_endian_uint32_t+0xce>
 800baee:	2e01      	cmp	r6, #1
 800baf0:	68a3      	ldr	r3, [r4, #8]
 800baf2:	d017      	beq.n	800bb24 <ucdr_deserialize_endian_uint32_t+0xd8>
 800baf4:	78db      	ldrb	r3, [r3, #3]
 800baf6:	702b      	strb	r3, [r5, #0]
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	789b      	ldrb	r3, [r3, #2]
 800bafc:	706b      	strb	r3, [r5, #1]
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	70ab      	strb	r3, [r5, #2]
 800bb04:	68a3      	ldr	r3, [r4, #8]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	70eb      	strb	r3, [r5, #3]
 800bb0a:	68a2      	ldr	r2, [r4, #8]
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	3204      	adds	r2, #4
 800bb10:	3304      	adds	r3, #4
 800bb12:	2104      	movs	r1, #4
 800bb14:	60a2      	str	r2, [r4, #8]
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	7561      	strb	r1, [r4, #21]
 800bb1a:	7da0      	ldrb	r0, [r4, #22]
 800bb1c:	f080 0001 	eor.w	r0, r0, #1
 800bb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	602b      	str	r3, [r5, #0]
 800bb28:	e7ef      	b.n	800bb0a <ucdr_deserialize_endian_uint32_t+0xbe>
 800bb2a:	68a2      	ldr	r2, [r4, #8]
 800bb2c:	6923      	ldr	r3, [r4, #16]
 800bb2e:	7da0      	ldrb	r0, [r4, #22]
 800bb30:	f884 9015 	strb.w	r9, [r4, #21]
 800bb34:	eba2 0208 	sub.w	r2, r2, r8
 800bb38:	eba3 0308 	sub.w	r3, r3, r8
 800bb3c:	60a2      	str	r2, [r4, #8]
 800bb3e:	6123      	str	r3, [r4, #16]
 800bb40:	f080 0001 	eor.w	r0, r0, #1
 800bb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	789b      	ldrb	r3, [r3, #2]
 800bb4c:	706b      	strb	r3, [r5, #1]
 800bb4e:	1cab      	adds	r3, r5, #2
 800bb50:	68a2      	ldr	r2, [r4, #8]
 800bb52:	7852      	ldrb	r2, [r2, #1]
 800bb54:	f803 2b01 	strb.w	r2, [r3], #1
 800bb58:	68a2      	ldr	r2, [r4, #8]
 800bb5a:	7812      	ldrb	r2, [r2, #0]
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	e7b2      	b.n	800bac6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800bb60:	4639      	mov	r1, r7
 800bb62:	4642      	mov	r2, r8
 800bb64:	4628      	mov	r0, r5
 800bb66:	f00d ff16 	bl	8019996 <memcpy>
 800bb6a:	68a1      	ldr	r1, [r4, #8]
 800bb6c:	4652      	mov	r2, sl
 800bb6e:	eb05 0008 	add.w	r0, r5, r8
 800bb72:	f00d ff10 	bl	8019996 <memcpy>
 800bb76:	e7a6      	b.n	800bac6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800bb78 <ucdr_serialize_uint64_t>:
 800bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7c:	2108      	movs	r1, #8
 800bb7e:	b082      	sub	sp, #8
 800bb80:	4604      	mov	r4, r0
 800bb82:	e9cd 2300 	strd	r2, r3, [sp]
 800bb86:	f000 fcd9 	bl	800c53c <ucdr_buffer_alignment>
 800bb8a:	4601      	mov	r1, r0
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	7d67      	ldrb	r7, [r4, #21]
 800bb90:	f000 fd18 	bl	800c5c4 <ucdr_advance_buffer>
 800bb94:	2108      	movs	r1, #8
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 fc70 	bl	800c47c <ucdr_check_buffer_available_for>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d14e      	bne.n	800bc3e <ucdr_serialize_uint64_t+0xc6>
 800bba0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bba4:	42ab      	cmp	r3, r5
 800bba6:	d945      	bls.n	800bc34 <ucdr_serialize_uint64_t+0xbc>
 800bba8:	1b5e      	subs	r6, r3, r5
 800bbaa:	60a3      	str	r3, [r4, #8]
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	f1c6 0808 	rsb	r8, r6, #8
 800bbb2:	4433      	add	r3, r6
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	4641      	mov	r1, r8
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fc6b 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d074      	beq.n	800bcac <ucdr_serialize_uint64_t+0x134>
 800bbc2:	7d23      	ldrb	r3, [r4, #20]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	f000 809b 	beq.w	800bd00 <ucdr_serialize_uint64_t+0x188>
 800bbca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbce:	702b      	strb	r3, [r5, #0]
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	d078      	beq.n	800bcc6 <ucdr_serialize_uint64_t+0x14e>
 800bbd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbd8:	706b      	strb	r3, [r5, #1]
 800bbda:	2e01      	cmp	r6, #1
 800bbdc:	d077      	beq.n	800bcce <ucdr_serialize_uint64_t+0x156>
 800bbde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bbe2:	70ab      	strb	r3, [r5, #2]
 800bbe4:	2e02      	cmp	r6, #2
 800bbe6:	d076      	beq.n	800bcd6 <ucdr_serialize_uint64_t+0x15e>
 800bbe8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bbec:	70eb      	strb	r3, [r5, #3]
 800bbee:	2e03      	cmp	r6, #3
 800bbf0:	d075      	beq.n	800bcde <ucdr_serialize_uint64_t+0x166>
 800bbf2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bbf6:	712b      	strb	r3, [r5, #4]
 800bbf8:	2e04      	cmp	r6, #4
 800bbfa:	d074      	beq.n	800bce6 <ucdr_serialize_uint64_t+0x16e>
 800bbfc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bc00:	716b      	strb	r3, [r5, #5]
 800bc02:	2e05      	cmp	r6, #5
 800bc04:	d073      	beq.n	800bcee <ucdr_serialize_uint64_t+0x176>
 800bc06:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bc0a:	71ab      	strb	r3, [r5, #6]
 800bc0c:	2e06      	cmp	r6, #6
 800bc0e:	d072      	beq.n	800bcf6 <ucdr_serialize_uint64_t+0x17e>
 800bc10:	f89d 3000 	ldrb.w	r3, [sp]
 800bc14:	71eb      	strb	r3, [r5, #7]
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	68a2      	ldr	r2, [r4, #8]
 800bc1a:	7da0      	ldrb	r0, [r4, #22]
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	1b9e      	subs	r6, r3, r6
 800bc20:	4442      	add	r2, r8
 800bc22:	2308      	movs	r3, #8
 800bc24:	f080 0001 	eor.w	r0, r0, #1
 800bc28:	60a2      	str	r2, [r4, #8]
 800bc2a:	6126      	str	r6, [r4, #16]
 800bc2c:	7563      	strb	r3, [r4, #21]
 800bc2e:	b002      	add	sp, #8
 800bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc34:	2108      	movs	r1, #8
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 fc2c 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bc3c:	b350      	cbz	r0, 800bc94 <ucdr_serialize_uint64_t+0x11c>
 800bc3e:	7d23      	ldrb	r3, [r4, #20]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d02d      	beq.n	800bca0 <ucdr_serialize_uint64_t+0x128>
 800bc44:	68a3      	ldr	r3, [r4, #8]
 800bc46:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	68a3      	ldr	r3, [r4, #8]
 800bc4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc52:	705a      	strb	r2, [r3, #1]
 800bc54:	68a3      	ldr	r3, [r4, #8]
 800bc56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc5a:	709a      	strb	r2, [r3, #2]
 800bc5c:	68a3      	ldr	r3, [r4, #8]
 800bc5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc62:	70da      	strb	r2, [r3, #3]
 800bc64:	68a3      	ldr	r3, [r4, #8]
 800bc66:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bc6a:	711a      	strb	r2, [r3, #4]
 800bc6c:	68a3      	ldr	r3, [r4, #8]
 800bc6e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bc72:	715a      	strb	r2, [r3, #5]
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bc7a:	719a      	strb	r2, [r3, #6]
 800bc7c:	68a3      	ldr	r3, [r4, #8]
 800bc7e:	f89d 2000 	ldrb.w	r2, [sp]
 800bc82:	71da      	strb	r2, [r3, #7]
 800bc84:	68a2      	ldr	r2, [r4, #8]
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	3208      	adds	r2, #8
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	2108      	movs	r1, #8
 800bc8e:	60a2      	str	r2, [r4, #8]
 800bc90:	6123      	str	r3, [r4, #16]
 800bc92:	7561      	strb	r1, [r4, #21]
 800bc94:	7da0      	ldrb	r0, [r4, #22]
 800bc96:	f080 0001 	eor.w	r0, r0, #1
 800bc9a:	b002      	add	sp, #8
 800bc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca0:	466b      	mov	r3, sp
 800bca2:	cb03      	ldmia	r3!, {r0, r1}
 800bca4:	68a3      	ldr	r3, [r4, #8]
 800bca6:	6018      	str	r0, [r3, #0]
 800bca8:	6059      	str	r1, [r3, #4]
 800bcaa:	e7eb      	b.n	800bc84 <ucdr_serialize_uint64_t+0x10c>
 800bcac:	68a2      	ldr	r2, [r4, #8]
 800bcae:	6923      	ldr	r3, [r4, #16]
 800bcb0:	7da0      	ldrb	r0, [r4, #22]
 800bcb2:	7567      	strb	r7, [r4, #21]
 800bcb4:	1b92      	subs	r2, r2, r6
 800bcb6:	1b9b      	subs	r3, r3, r6
 800bcb8:	f080 0001 	eor.w	r0, r0, #1
 800bcbc:	60a2      	str	r2, [r4, #8]
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	b002      	add	sp, #8
 800bcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bccc:	701a      	strb	r2, [r3, #0]
 800bcce:	68a3      	ldr	r3, [r4, #8]
 800bcd0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bcdc:	701a      	strb	r2, [r3, #0]
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bcec:	701a      	strb	r2, [r3, #0]
 800bcee:	68a3      	ldr	r3, [r4, #8]
 800bcf0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bcf4:	701a      	strb	r2, [r3, #0]
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	f89d 2000 	ldrb.w	r2, [sp]
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e78a      	b.n	800bc16 <ucdr_serialize_uint64_t+0x9e>
 800bd00:	4628      	mov	r0, r5
 800bd02:	466d      	mov	r5, sp
 800bd04:	4629      	mov	r1, r5
 800bd06:	4632      	mov	r2, r6
 800bd08:	f00d fe45 	bl	8019996 <memcpy>
 800bd0c:	68a0      	ldr	r0, [r4, #8]
 800bd0e:	4642      	mov	r2, r8
 800bd10:	19a9      	adds	r1, r5, r6
 800bd12:	f00d fe40 	bl	8019996 <memcpy>
 800bd16:	e77e      	b.n	800bc16 <ucdr_serialize_uint64_t+0x9e>

0800bd18 <ucdr_serialize_int16_t>:
 800bd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	460b      	mov	r3, r1
 800bd20:	2102      	movs	r1, #2
 800bd22:	4604      	mov	r4, r0
 800bd24:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bd28:	f000 fc08 	bl	800c53c <ucdr_buffer_alignment>
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	4620      	mov	r0, r4
 800bd30:	7d67      	ldrb	r7, [r4, #21]
 800bd32:	f000 fc47 	bl	800c5c4 <ucdr_advance_buffer>
 800bd36:	2102      	movs	r1, #2
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fb9f 	bl	800c47c <ucdr_check_buffer_available_for>
 800bd3e:	bb78      	cbnz	r0, 800bda0 <ucdr_serialize_int16_t+0x88>
 800bd40:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bd44:	42ab      	cmp	r3, r5
 800bd46:	d926      	bls.n	800bd96 <ucdr_serialize_int16_t+0x7e>
 800bd48:	1b5e      	subs	r6, r3, r5
 800bd4a:	60a3      	str	r3, [r4, #8]
 800bd4c:	6923      	ldr	r3, [r4, #16]
 800bd4e:	f1c6 0802 	rsb	r8, r6, #2
 800bd52:	4433      	add	r3, r6
 800bd54:	6123      	str	r3, [r4, #16]
 800bd56:	4641      	mov	r1, r8
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fb9b 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d03b      	beq.n	800bdda <ucdr_serialize_int16_t+0xc2>
 800bd62:	7d23      	ldrb	r3, [r4, #20]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d04a      	beq.n	800bdfe <ucdr_serialize_int16_t+0xe6>
 800bd68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd6c:	702b      	strb	r3, [r5, #0]
 800bd6e:	2e00      	cmp	r6, #0
 800bd70:	d040      	beq.n	800bdf4 <ucdr_serialize_int16_t+0xdc>
 800bd72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd76:	706b      	strb	r3, [r5, #1]
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	68a2      	ldr	r2, [r4, #8]
 800bd7c:	7da0      	ldrb	r0, [r4, #22]
 800bd7e:	3302      	adds	r3, #2
 800bd80:	1b9e      	subs	r6, r3, r6
 800bd82:	4442      	add	r2, r8
 800bd84:	2302      	movs	r3, #2
 800bd86:	f080 0001 	eor.w	r0, r0, #1
 800bd8a:	60a2      	str	r2, [r4, #8]
 800bd8c:	6126      	str	r6, [r4, #16]
 800bd8e:	7563      	strb	r3, [r4, #21]
 800bd90:	b002      	add	sp, #8
 800bd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd96:	2102      	movs	r1, #2
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fb7b 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bd9e:	b190      	cbz	r0, 800bdc6 <ucdr_serialize_int16_t+0xae>
 800bda0:	7d23      	ldrb	r3, [r4, #20]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	d014      	beq.n	800bdd2 <ucdr_serialize_int16_t+0xba>
 800bda8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdb4:	705a      	strb	r2, [r3, #1]
 800bdb6:	68a2      	ldr	r2, [r4, #8]
 800bdb8:	6923      	ldr	r3, [r4, #16]
 800bdba:	3202      	adds	r2, #2
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	2102      	movs	r1, #2
 800bdc0:	60a2      	str	r2, [r4, #8]
 800bdc2:	6123      	str	r3, [r4, #16]
 800bdc4:	7561      	strb	r1, [r4, #21]
 800bdc6:	7da0      	ldrb	r0, [r4, #22]
 800bdc8:	f080 0001 	eor.w	r0, r0, #1
 800bdcc:	b002      	add	sp, #8
 800bdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bdd6:	801a      	strh	r2, [r3, #0]
 800bdd8:	e7ed      	b.n	800bdb6 <ucdr_serialize_int16_t+0x9e>
 800bdda:	68a2      	ldr	r2, [r4, #8]
 800bddc:	6923      	ldr	r3, [r4, #16]
 800bdde:	7da0      	ldrb	r0, [r4, #22]
 800bde0:	7567      	strb	r7, [r4, #21]
 800bde2:	1b92      	subs	r2, r2, r6
 800bde4:	1b9b      	subs	r3, r3, r6
 800bde6:	f080 0001 	eor.w	r0, r0, #1
 800bdea:	60a2      	str	r2, [r4, #8]
 800bdec:	6123      	str	r3, [r4, #16]
 800bdee:	b002      	add	sp, #8
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	68a3      	ldr	r3, [r4, #8]
 800bdf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdfa:	701a      	strb	r2, [r3, #0]
 800bdfc:	e7bc      	b.n	800bd78 <ucdr_serialize_int16_t+0x60>
 800bdfe:	4628      	mov	r0, r5
 800be00:	f10d 0506 	add.w	r5, sp, #6
 800be04:	4629      	mov	r1, r5
 800be06:	4632      	mov	r2, r6
 800be08:	f00d fdc5 	bl	8019996 <memcpy>
 800be0c:	68a0      	ldr	r0, [r4, #8]
 800be0e:	4642      	mov	r2, r8
 800be10:	19a9      	adds	r1, r5, r6
 800be12:	f00d fdc0 	bl	8019996 <memcpy>
 800be16:	e7af      	b.n	800bd78 <ucdr_serialize_int16_t+0x60>

0800be18 <ucdr_deserialize_int16_t>:
 800be18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be1c:	460d      	mov	r5, r1
 800be1e:	2102      	movs	r1, #2
 800be20:	4604      	mov	r4, r0
 800be22:	f000 fb8b 	bl	800c53c <ucdr_buffer_alignment>
 800be26:	4601      	mov	r1, r0
 800be28:	4620      	mov	r0, r4
 800be2a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be2e:	f000 fbc9 	bl	800c5c4 <ucdr_advance_buffer>
 800be32:	2102      	movs	r1, #2
 800be34:	4620      	mov	r0, r4
 800be36:	f000 fb21 	bl	800c47c <ucdr_check_buffer_available_for>
 800be3a:	bb60      	cbnz	r0, 800be96 <ucdr_deserialize_int16_t+0x7e>
 800be3c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800be40:	42be      	cmp	r6, r7
 800be42:	d923      	bls.n	800be8c <ucdr_deserialize_int16_t+0x74>
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	60a6      	str	r6, [r4, #8]
 800be48:	1bf6      	subs	r6, r6, r7
 800be4a:	4433      	add	r3, r6
 800be4c:	f1c6 0902 	rsb	r9, r6, #2
 800be50:	6123      	str	r3, [r4, #16]
 800be52:	4649      	mov	r1, r9
 800be54:	4620      	mov	r0, r4
 800be56:	f000 fb1d 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d034      	beq.n	800bec8 <ucdr_deserialize_int16_t+0xb0>
 800be5e:	7d23      	ldrb	r3, [r4, #20]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d042      	beq.n	800beea <ucdr_deserialize_int16_t+0xd2>
 800be64:	787b      	ldrb	r3, [r7, #1]
 800be66:	702b      	strb	r3, [r5, #0]
 800be68:	2e00      	cmp	r6, #0
 800be6a:	d03a      	beq.n	800bee2 <ucdr_deserialize_int16_t+0xca>
 800be6c:	783b      	ldrb	r3, [r7, #0]
 800be6e:	706b      	strb	r3, [r5, #1]
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	68a2      	ldr	r2, [r4, #8]
 800be74:	7da0      	ldrb	r0, [r4, #22]
 800be76:	2102      	movs	r1, #2
 800be78:	3302      	adds	r3, #2
 800be7a:	444a      	add	r2, r9
 800be7c:	1b9b      	subs	r3, r3, r6
 800be7e:	7561      	strb	r1, [r4, #21]
 800be80:	60a2      	str	r2, [r4, #8]
 800be82:	6123      	str	r3, [r4, #16]
 800be84:	f080 0001 	eor.w	r0, r0, #1
 800be88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8c:	2102      	movs	r1, #2
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 fb00 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800be94:	b180      	cbz	r0, 800beb8 <ucdr_deserialize_int16_t+0xa0>
 800be96:	7d23      	ldrb	r3, [r4, #20]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	d011      	beq.n	800bec2 <ucdr_deserialize_int16_t+0xaa>
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	702b      	strb	r3, [r5, #0]
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	706b      	strb	r3, [r5, #1]
 800bea8:	68a2      	ldr	r2, [r4, #8]
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	3202      	adds	r2, #2
 800beae:	3302      	adds	r3, #2
 800beb0:	2102      	movs	r1, #2
 800beb2:	60a2      	str	r2, [r4, #8]
 800beb4:	6123      	str	r3, [r4, #16]
 800beb6:	7561      	strb	r1, [r4, #21]
 800beb8:	7da0      	ldrb	r0, [r4, #22]
 800beba:	f080 0001 	eor.w	r0, r0, #1
 800bebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	802b      	strh	r3, [r5, #0]
 800bec6:	e7ef      	b.n	800bea8 <ucdr_deserialize_int16_t+0x90>
 800bec8:	68a2      	ldr	r2, [r4, #8]
 800beca:	6923      	ldr	r3, [r4, #16]
 800becc:	7da0      	ldrb	r0, [r4, #22]
 800bece:	f884 8015 	strb.w	r8, [r4, #21]
 800bed2:	1b92      	subs	r2, r2, r6
 800bed4:	1b9b      	subs	r3, r3, r6
 800bed6:	60a2      	str	r2, [r4, #8]
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	f080 0001 	eor.w	r0, r0, #1
 800bede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee2:	68a3      	ldr	r3, [r4, #8]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	706b      	strb	r3, [r5, #1]
 800bee8:	e7c2      	b.n	800be70 <ucdr_deserialize_int16_t+0x58>
 800beea:	4639      	mov	r1, r7
 800beec:	4632      	mov	r2, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	f00d fd51 	bl	8019996 <memcpy>
 800bef4:	68a1      	ldr	r1, [r4, #8]
 800bef6:	464a      	mov	r2, r9
 800bef8:	19a8      	adds	r0, r5, r6
 800befa:	f00d fd4c 	bl	8019996 <memcpy>
 800befe:	e7b7      	b.n	800be70 <ucdr_deserialize_int16_t+0x58>

0800bf00 <ucdr_serialize_int32_t>:
 800bf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	4604      	mov	r4, r0
 800bf08:	9101      	str	r1, [sp, #4]
 800bf0a:	2104      	movs	r1, #4
 800bf0c:	f000 fb16 	bl	800c53c <ucdr_buffer_alignment>
 800bf10:	4601      	mov	r1, r0
 800bf12:	4620      	mov	r0, r4
 800bf14:	7d67      	ldrb	r7, [r4, #21]
 800bf16:	f000 fb55 	bl	800c5c4 <ucdr_advance_buffer>
 800bf1a:	2104      	movs	r1, #4
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 faad 	bl	800c47c <ucdr_check_buffer_available_for>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d139      	bne.n	800bf9a <ucdr_serialize_int32_t+0x9a>
 800bf26:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf2a:	42ab      	cmp	r3, r5
 800bf2c:	d930      	bls.n	800bf90 <ucdr_serialize_int32_t+0x90>
 800bf2e:	1b5e      	subs	r6, r3, r5
 800bf30:	60a3      	str	r3, [r4, #8]
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	f1c6 0804 	rsb	r8, r6, #4
 800bf38:	4433      	add	r3, r6
 800bf3a:	6123      	str	r3, [r4, #16]
 800bf3c:	4641      	mov	r1, r8
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f000 faa8 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d04c      	beq.n	800bfe2 <ucdr_serialize_int32_t+0xe2>
 800bf48:	7d23      	ldrb	r3, [r4, #20]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d063      	beq.n	800c016 <ucdr_serialize_int32_t+0x116>
 800bf4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf52:	702b      	strb	r3, [r5, #0]
 800bf54:	2e00      	cmp	r6, #0
 800bf56:	d051      	beq.n	800bffc <ucdr_serialize_int32_t+0xfc>
 800bf58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf5c:	706b      	strb	r3, [r5, #1]
 800bf5e:	2e01      	cmp	r6, #1
 800bf60:	d050      	beq.n	800c004 <ucdr_serialize_int32_t+0x104>
 800bf62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bf66:	70ab      	strb	r3, [r5, #2]
 800bf68:	2e02      	cmp	r6, #2
 800bf6a:	d04f      	beq.n	800c00c <ucdr_serialize_int32_t+0x10c>
 800bf6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bf70:	70eb      	strb	r3, [r5, #3]
 800bf72:	6923      	ldr	r3, [r4, #16]
 800bf74:	68a2      	ldr	r2, [r4, #8]
 800bf76:	7da0      	ldrb	r0, [r4, #22]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	1b9e      	subs	r6, r3, r6
 800bf7c:	4442      	add	r2, r8
 800bf7e:	2304      	movs	r3, #4
 800bf80:	f080 0001 	eor.w	r0, r0, #1
 800bf84:	60a2      	str	r2, [r4, #8]
 800bf86:	6126      	str	r6, [r4, #16]
 800bf88:	7563      	strb	r3, [r4, #21]
 800bf8a:	b002      	add	sp, #8
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	2104      	movs	r1, #4
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 fa7e 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800bf98:	b1d0      	cbz	r0, 800bfd0 <ucdr_serialize_int32_t+0xd0>
 800bf9a:	7d23      	ldrb	r3, [r4, #20]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	68a3      	ldr	r3, [r4, #8]
 800bfa0:	d01c      	beq.n	800bfdc <ucdr_serialize_int32_t+0xdc>
 800bfa2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bfa6:	701a      	strb	r2, [r3, #0]
 800bfa8:	68a3      	ldr	r3, [r4, #8]
 800bfaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfae:	705a      	strb	r2, [r3, #1]
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bfb6:	709a      	strb	r2, [r3, #2]
 800bfb8:	68a3      	ldr	r3, [r4, #8]
 800bfba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bfbe:	70da      	strb	r2, [r3, #3]
 800bfc0:	68a2      	ldr	r2, [r4, #8]
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	3204      	adds	r2, #4
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	2104      	movs	r1, #4
 800bfca:	60a2      	str	r2, [r4, #8]
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	7561      	strb	r1, [r4, #21]
 800bfd0:	7da0      	ldrb	r0, [r4, #22]
 800bfd2:	f080 0001 	eor.w	r0, r0, #1
 800bfd6:	b002      	add	sp, #8
 800bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfdc:	9a01      	ldr	r2, [sp, #4]
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	e7ee      	b.n	800bfc0 <ucdr_serialize_int32_t+0xc0>
 800bfe2:	68a2      	ldr	r2, [r4, #8]
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	7da0      	ldrb	r0, [r4, #22]
 800bfe8:	7567      	strb	r7, [r4, #21]
 800bfea:	1b92      	subs	r2, r2, r6
 800bfec:	1b9b      	subs	r3, r3, r6
 800bfee:	f080 0001 	eor.w	r0, r0, #1
 800bff2:	60a2      	str	r2, [r4, #8]
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	b002      	add	sp, #8
 800bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffc:	68a3      	ldr	r3, [r4, #8]
 800bffe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	68a3      	ldr	r3, [r4, #8]
 800c006:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	e7ad      	b.n	800bf72 <ucdr_serialize_int32_t+0x72>
 800c016:	4628      	mov	r0, r5
 800c018:	ad01      	add	r5, sp, #4
 800c01a:	4629      	mov	r1, r5
 800c01c:	4632      	mov	r2, r6
 800c01e:	f00d fcba 	bl	8019996 <memcpy>
 800c022:	68a0      	ldr	r0, [r4, #8]
 800c024:	4642      	mov	r2, r8
 800c026:	19a9      	adds	r1, r5, r6
 800c028:	f00d fcb5 	bl	8019996 <memcpy>
 800c02c:	e7a1      	b.n	800bf72 <ucdr_serialize_int32_t+0x72>
 800c02e:	bf00      	nop

0800c030 <ucdr_deserialize_int32_t>:
 800c030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c034:	460d      	mov	r5, r1
 800c036:	2104      	movs	r1, #4
 800c038:	4604      	mov	r4, r0
 800c03a:	f000 fa7f 	bl	800c53c <ucdr_buffer_alignment>
 800c03e:	4601      	mov	r1, r0
 800c040:	4620      	mov	r0, r4
 800c042:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c046:	f000 fabd 	bl	800c5c4 <ucdr_advance_buffer>
 800c04a:	2104      	movs	r1, #4
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fa15 	bl	800c47c <ucdr_check_buffer_available_for>
 800c052:	2800      	cmp	r0, #0
 800c054:	d138      	bne.n	800c0c8 <ucdr_deserialize_int32_t+0x98>
 800c056:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c05a:	42b7      	cmp	r7, r6
 800c05c:	d92f      	bls.n	800c0be <ucdr_deserialize_int32_t+0x8e>
 800c05e:	6923      	ldr	r3, [r4, #16]
 800c060:	60a7      	str	r7, [r4, #8]
 800c062:	1bbf      	subs	r7, r7, r6
 800c064:	443b      	add	r3, r7
 800c066:	f1c7 0904 	rsb	r9, r7, #4
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	4649      	mov	r1, r9
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fa10 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c074:	2800      	cmp	r0, #0
 800c076:	d046      	beq.n	800c106 <ucdr_deserialize_int32_t+0xd6>
 800c078:	7d23      	ldrb	r3, [r4, #20]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d05c      	beq.n	800c138 <ucdr_deserialize_int32_t+0x108>
 800c07e:	78f3      	ldrb	r3, [r6, #3]
 800c080:	702b      	strb	r3, [r5, #0]
 800c082:	2f00      	cmp	r7, #0
 800c084:	d04c      	beq.n	800c120 <ucdr_deserialize_int32_t+0xf0>
 800c086:	78b3      	ldrb	r3, [r6, #2]
 800c088:	706b      	strb	r3, [r5, #1]
 800c08a:	2f01      	cmp	r7, #1
 800c08c:	f105 0302 	add.w	r3, r5, #2
 800c090:	d04a      	beq.n	800c128 <ucdr_deserialize_int32_t+0xf8>
 800c092:	7873      	ldrb	r3, [r6, #1]
 800c094:	70ab      	strb	r3, [r5, #2]
 800c096:	2f02      	cmp	r7, #2
 800c098:	f105 0303 	add.w	r3, r5, #3
 800c09c:	d048      	beq.n	800c130 <ucdr_deserialize_int32_t+0x100>
 800c09e:	7833      	ldrb	r3, [r6, #0]
 800c0a0:	70eb      	strb	r3, [r5, #3]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	68a2      	ldr	r2, [r4, #8]
 800c0a6:	7da0      	ldrb	r0, [r4, #22]
 800c0a8:	2104      	movs	r1, #4
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	444a      	add	r2, r9
 800c0ae:	1bdb      	subs	r3, r3, r7
 800c0b0:	7561      	strb	r1, [r4, #21]
 800c0b2:	60a2      	str	r2, [r4, #8]
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	f080 0001 	eor.w	r0, r0, #1
 800c0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0be:	2104      	movs	r1, #4
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 f9e7 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c0c6:	b1b0      	cbz	r0, 800c0f6 <ucdr_deserialize_int32_t+0xc6>
 800c0c8:	7d23      	ldrb	r3, [r4, #20]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	68a3      	ldr	r3, [r4, #8]
 800c0ce:	d017      	beq.n	800c100 <ucdr_deserialize_int32_t+0xd0>
 800c0d0:	78db      	ldrb	r3, [r3, #3]
 800c0d2:	702b      	strb	r3, [r5, #0]
 800c0d4:	68a3      	ldr	r3, [r4, #8]
 800c0d6:	789b      	ldrb	r3, [r3, #2]
 800c0d8:	706b      	strb	r3, [r5, #1]
 800c0da:	68a3      	ldr	r3, [r4, #8]
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	70ab      	strb	r3, [r5, #2]
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	70eb      	strb	r3, [r5, #3]
 800c0e6:	68a2      	ldr	r2, [r4, #8]
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	3204      	adds	r2, #4
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	2104      	movs	r1, #4
 800c0f0:	60a2      	str	r2, [r4, #8]
 800c0f2:	6123      	str	r3, [r4, #16]
 800c0f4:	7561      	strb	r1, [r4, #21]
 800c0f6:	7da0      	ldrb	r0, [r4, #22]
 800c0f8:	f080 0001 	eor.w	r0, r0, #1
 800c0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	e7ef      	b.n	800c0e6 <ucdr_deserialize_int32_t+0xb6>
 800c106:	68a2      	ldr	r2, [r4, #8]
 800c108:	6923      	ldr	r3, [r4, #16]
 800c10a:	7da0      	ldrb	r0, [r4, #22]
 800c10c:	f884 8015 	strb.w	r8, [r4, #21]
 800c110:	1bd2      	subs	r2, r2, r7
 800c112:	1bdb      	subs	r3, r3, r7
 800c114:	60a2      	str	r2, [r4, #8]
 800c116:	6123      	str	r3, [r4, #16]
 800c118:	f080 0001 	eor.w	r0, r0, #1
 800c11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c120:	68a3      	ldr	r3, [r4, #8]
 800c122:	789b      	ldrb	r3, [r3, #2]
 800c124:	706b      	strb	r3, [r5, #1]
 800c126:	1cab      	adds	r3, r5, #2
 800c128:	68a2      	ldr	r2, [r4, #8]
 800c12a:	7852      	ldrb	r2, [r2, #1]
 800c12c:	f803 2b01 	strb.w	r2, [r3], #1
 800c130:	68a2      	ldr	r2, [r4, #8]
 800c132:	7812      	ldrb	r2, [r2, #0]
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e7b4      	b.n	800c0a2 <ucdr_deserialize_int32_t+0x72>
 800c138:	4631      	mov	r1, r6
 800c13a:	463a      	mov	r2, r7
 800c13c:	4628      	mov	r0, r5
 800c13e:	f00d fc2a 	bl	8019996 <memcpy>
 800c142:	68a1      	ldr	r1, [r4, #8]
 800c144:	464a      	mov	r2, r9
 800c146:	19e8      	adds	r0, r5, r7
 800c148:	f00d fc25 	bl	8019996 <memcpy>
 800c14c:	e7a9      	b.n	800c0a2 <ucdr_deserialize_int32_t+0x72>
 800c14e:	bf00      	nop

0800c150 <ucdr_serialize_double>:
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	2108      	movs	r1, #8
 800c156:	b082      	sub	sp, #8
 800c158:	4604      	mov	r4, r0
 800c15a:	ed8d 0b00 	vstr	d0, [sp]
 800c15e:	f000 f9ed 	bl	800c53c <ucdr_buffer_alignment>
 800c162:	4601      	mov	r1, r0
 800c164:	4620      	mov	r0, r4
 800c166:	7d67      	ldrb	r7, [r4, #21]
 800c168:	f000 fa2c 	bl	800c5c4 <ucdr_advance_buffer>
 800c16c:	2108      	movs	r1, #8
 800c16e:	4620      	mov	r0, r4
 800c170:	f000 f984 	bl	800c47c <ucdr_check_buffer_available_for>
 800c174:	2800      	cmp	r0, #0
 800c176:	d14e      	bne.n	800c216 <ucdr_serialize_double+0xc6>
 800c178:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c17c:	42ab      	cmp	r3, r5
 800c17e:	d945      	bls.n	800c20c <ucdr_serialize_double+0xbc>
 800c180:	1b5e      	subs	r6, r3, r5
 800c182:	60a3      	str	r3, [r4, #8]
 800c184:	6923      	ldr	r3, [r4, #16]
 800c186:	f1c6 0808 	rsb	r8, r6, #8
 800c18a:	4433      	add	r3, r6
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	4641      	mov	r1, r8
 800c190:	4620      	mov	r0, r4
 800c192:	f000 f97f 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c196:	2800      	cmp	r0, #0
 800c198:	d074      	beq.n	800c284 <ucdr_serialize_double+0x134>
 800c19a:	7d23      	ldrb	r3, [r4, #20]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	f000 809b 	beq.w	800c2d8 <ucdr_serialize_double+0x188>
 800c1a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1a6:	702b      	strb	r3, [r5, #0]
 800c1a8:	2e00      	cmp	r6, #0
 800c1aa:	d078      	beq.n	800c29e <ucdr_serialize_double+0x14e>
 800c1ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1b0:	706b      	strb	r3, [r5, #1]
 800c1b2:	2e01      	cmp	r6, #1
 800c1b4:	d077      	beq.n	800c2a6 <ucdr_serialize_double+0x156>
 800c1b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c1ba:	70ab      	strb	r3, [r5, #2]
 800c1bc:	2e02      	cmp	r6, #2
 800c1be:	d076      	beq.n	800c2ae <ucdr_serialize_double+0x15e>
 800c1c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1c4:	70eb      	strb	r3, [r5, #3]
 800c1c6:	2e03      	cmp	r6, #3
 800c1c8:	d075      	beq.n	800c2b6 <ucdr_serialize_double+0x166>
 800c1ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c1ce:	712b      	strb	r3, [r5, #4]
 800c1d0:	2e04      	cmp	r6, #4
 800c1d2:	d074      	beq.n	800c2be <ucdr_serialize_double+0x16e>
 800c1d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c1d8:	716b      	strb	r3, [r5, #5]
 800c1da:	2e05      	cmp	r6, #5
 800c1dc:	d073      	beq.n	800c2c6 <ucdr_serialize_double+0x176>
 800c1de:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c1e2:	71ab      	strb	r3, [r5, #6]
 800c1e4:	2e06      	cmp	r6, #6
 800c1e6:	d072      	beq.n	800c2ce <ucdr_serialize_double+0x17e>
 800c1e8:	f89d 3000 	ldrb.w	r3, [sp]
 800c1ec:	71eb      	strb	r3, [r5, #7]
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	68a2      	ldr	r2, [r4, #8]
 800c1f2:	7da0      	ldrb	r0, [r4, #22]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	1b9e      	subs	r6, r3, r6
 800c1f8:	4442      	add	r2, r8
 800c1fa:	2308      	movs	r3, #8
 800c1fc:	f080 0001 	eor.w	r0, r0, #1
 800c200:	60a2      	str	r2, [r4, #8]
 800c202:	6126      	str	r6, [r4, #16]
 800c204:	7563      	strb	r3, [r4, #21]
 800c206:	b002      	add	sp, #8
 800c208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c20c:	2108      	movs	r1, #8
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 f940 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c214:	b350      	cbz	r0, 800c26c <ucdr_serialize_double+0x11c>
 800c216:	7d23      	ldrb	r3, [r4, #20]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d02d      	beq.n	800c278 <ucdr_serialize_double+0x128>
 800c21c:	68a3      	ldr	r3, [r4, #8]
 800c21e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c22a:	705a      	strb	r2, [r3, #1]
 800c22c:	68a3      	ldr	r3, [r4, #8]
 800c22e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c232:	709a      	strb	r2, [r3, #2]
 800c234:	68a3      	ldr	r3, [r4, #8]
 800c236:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c23a:	70da      	strb	r2, [r3, #3]
 800c23c:	68a3      	ldr	r3, [r4, #8]
 800c23e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c242:	711a      	strb	r2, [r3, #4]
 800c244:	68a3      	ldr	r3, [r4, #8]
 800c246:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c24a:	715a      	strb	r2, [r3, #5]
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c252:	719a      	strb	r2, [r3, #6]
 800c254:	68a3      	ldr	r3, [r4, #8]
 800c256:	f89d 2000 	ldrb.w	r2, [sp]
 800c25a:	71da      	strb	r2, [r3, #7]
 800c25c:	68a2      	ldr	r2, [r4, #8]
 800c25e:	6923      	ldr	r3, [r4, #16]
 800c260:	3208      	adds	r2, #8
 800c262:	3308      	adds	r3, #8
 800c264:	2108      	movs	r1, #8
 800c266:	60a2      	str	r2, [r4, #8]
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	7561      	strb	r1, [r4, #21]
 800c26c:	7da0      	ldrb	r0, [r4, #22]
 800c26e:	f080 0001 	eor.w	r0, r0, #1
 800c272:	b002      	add	sp, #8
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	466b      	mov	r3, sp
 800c27a:	cb03      	ldmia	r3!, {r0, r1}
 800c27c:	68a3      	ldr	r3, [r4, #8]
 800c27e:	6018      	str	r0, [r3, #0]
 800c280:	6059      	str	r1, [r3, #4]
 800c282:	e7eb      	b.n	800c25c <ucdr_serialize_double+0x10c>
 800c284:	68a2      	ldr	r2, [r4, #8]
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	7da0      	ldrb	r0, [r4, #22]
 800c28a:	7567      	strb	r7, [r4, #21]
 800c28c:	1b92      	subs	r2, r2, r6
 800c28e:	1b9b      	subs	r3, r3, r6
 800c290:	f080 0001 	eor.w	r0, r0, #1
 800c294:	60a2      	str	r2, [r4, #8]
 800c296:	6123      	str	r3, [r4, #16]
 800c298:	b002      	add	sp, #8
 800c29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2a4:	701a      	strb	r2, [r3, #0]
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2b4:	701a      	strb	r2, [r3, #0]
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c2bc:	701a      	strb	r2, [r3, #0]
 800c2be:	68a3      	ldr	r3, [r4, #8]
 800c2c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c2cc:	701a      	strb	r2, [r3, #0]
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	f89d 2000 	ldrb.w	r2, [sp]
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	e78a      	b.n	800c1ee <ucdr_serialize_double+0x9e>
 800c2d8:	4628      	mov	r0, r5
 800c2da:	466d      	mov	r5, sp
 800c2dc:	4629      	mov	r1, r5
 800c2de:	4632      	mov	r2, r6
 800c2e0:	f00d fb59 	bl	8019996 <memcpy>
 800c2e4:	68a0      	ldr	r0, [r4, #8]
 800c2e6:	4642      	mov	r2, r8
 800c2e8:	19a9      	adds	r1, r5, r6
 800c2ea:	f00d fb54 	bl	8019996 <memcpy>
 800c2ee:	e77e      	b.n	800c1ee <ucdr_serialize_double+0x9e>

0800c2f0 <ucdr_deserialize_double>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	460d      	mov	r5, r1
 800c2f6:	2108      	movs	r1, #8
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	f000 f91f 	bl	800c53c <ucdr_buffer_alignment>
 800c2fe:	4601      	mov	r1, r0
 800c300:	4620      	mov	r0, r4
 800c302:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c306:	f000 f95d 	bl	800c5c4 <ucdr_advance_buffer>
 800c30a:	2108      	movs	r1, #8
 800c30c:	4620      	mov	r0, r4
 800c30e:	f000 f8b5 	bl	800c47c <ucdr_check_buffer_available_for>
 800c312:	2800      	cmp	r0, #0
 800c314:	d151      	bne.n	800c3ba <ucdr_deserialize_double+0xca>
 800c316:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c31a:	42be      	cmp	r6, r7
 800c31c:	d948      	bls.n	800c3b0 <ucdr_deserialize_double+0xc0>
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	60a6      	str	r6, [r4, #8]
 800c322:	1bf6      	subs	r6, r6, r7
 800c324:	4433      	add	r3, r6
 800c326:	f1c6 0808 	rsb	r8, r6, #8
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	4641      	mov	r1, r8
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 f8b0 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c334:	2800      	cmp	r0, #0
 800c336:	d06d      	beq.n	800c414 <ucdr_deserialize_double+0x124>
 800c338:	7d23      	ldrb	r3, [r4, #20]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	f000 8093 	beq.w	800c466 <ucdr_deserialize_double+0x176>
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	702b      	strb	r3, [r5, #0]
 800c344:	2e00      	cmp	r6, #0
 800c346:	d072      	beq.n	800c42e <ucdr_deserialize_double+0x13e>
 800c348:	79bb      	ldrb	r3, [r7, #6]
 800c34a:	706b      	strb	r3, [r5, #1]
 800c34c:	2e01      	cmp	r6, #1
 800c34e:	f105 0302 	add.w	r3, r5, #2
 800c352:	d070      	beq.n	800c436 <ucdr_deserialize_double+0x146>
 800c354:	797b      	ldrb	r3, [r7, #5]
 800c356:	70ab      	strb	r3, [r5, #2]
 800c358:	2e02      	cmp	r6, #2
 800c35a:	f105 0303 	add.w	r3, r5, #3
 800c35e:	d06e      	beq.n	800c43e <ucdr_deserialize_double+0x14e>
 800c360:	793b      	ldrb	r3, [r7, #4]
 800c362:	70eb      	strb	r3, [r5, #3]
 800c364:	2e03      	cmp	r6, #3
 800c366:	f105 0304 	add.w	r3, r5, #4
 800c36a:	d06c      	beq.n	800c446 <ucdr_deserialize_double+0x156>
 800c36c:	78fb      	ldrb	r3, [r7, #3]
 800c36e:	712b      	strb	r3, [r5, #4]
 800c370:	2e04      	cmp	r6, #4
 800c372:	f105 0305 	add.w	r3, r5, #5
 800c376:	d06a      	beq.n	800c44e <ucdr_deserialize_double+0x15e>
 800c378:	78bb      	ldrb	r3, [r7, #2]
 800c37a:	716b      	strb	r3, [r5, #5]
 800c37c:	2e05      	cmp	r6, #5
 800c37e:	f105 0306 	add.w	r3, r5, #6
 800c382:	d068      	beq.n	800c456 <ucdr_deserialize_double+0x166>
 800c384:	787b      	ldrb	r3, [r7, #1]
 800c386:	71ab      	strb	r3, [r5, #6]
 800c388:	2e06      	cmp	r6, #6
 800c38a:	f105 0307 	add.w	r3, r5, #7
 800c38e:	d066      	beq.n	800c45e <ucdr_deserialize_double+0x16e>
 800c390:	783b      	ldrb	r3, [r7, #0]
 800c392:	71eb      	strb	r3, [r5, #7]
 800c394:	6923      	ldr	r3, [r4, #16]
 800c396:	68a2      	ldr	r2, [r4, #8]
 800c398:	7da0      	ldrb	r0, [r4, #22]
 800c39a:	3308      	adds	r3, #8
 800c39c:	1b9e      	subs	r6, r3, r6
 800c39e:	2308      	movs	r3, #8
 800c3a0:	4442      	add	r2, r8
 800c3a2:	7563      	strb	r3, [r4, #21]
 800c3a4:	60a2      	str	r2, [r4, #8]
 800c3a6:	6126      	str	r6, [r4, #16]
 800c3a8:	f080 0001 	eor.w	r0, r0, #1
 800c3ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b0:	2108      	movs	r1, #8
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 f86e 	bl	800c494 <ucdr_check_final_buffer_behavior>
 800c3b8:	b310      	cbz	r0, 800c400 <ucdr_deserialize_double+0x110>
 800c3ba:	7d23      	ldrb	r3, [r4, #20]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	d023      	beq.n	800c40a <ucdr_deserialize_double+0x11a>
 800c3c2:	79db      	ldrb	r3, [r3, #7]
 800c3c4:	702b      	strb	r3, [r5, #0]
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	799b      	ldrb	r3, [r3, #6]
 800c3ca:	706b      	strb	r3, [r5, #1]
 800c3cc:	68a3      	ldr	r3, [r4, #8]
 800c3ce:	795b      	ldrb	r3, [r3, #5]
 800c3d0:	70ab      	strb	r3, [r5, #2]
 800c3d2:	68a3      	ldr	r3, [r4, #8]
 800c3d4:	791b      	ldrb	r3, [r3, #4]
 800c3d6:	70eb      	strb	r3, [r5, #3]
 800c3d8:	68a3      	ldr	r3, [r4, #8]
 800c3da:	78db      	ldrb	r3, [r3, #3]
 800c3dc:	712b      	strb	r3, [r5, #4]
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	789b      	ldrb	r3, [r3, #2]
 800c3e2:	716b      	strb	r3, [r5, #5]
 800c3e4:	68a3      	ldr	r3, [r4, #8]
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	71ab      	strb	r3, [r5, #6]
 800c3ea:	68a3      	ldr	r3, [r4, #8]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	71eb      	strb	r3, [r5, #7]
 800c3f0:	68a2      	ldr	r2, [r4, #8]
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	3208      	adds	r2, #8
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	2108      	movs	r1, #8
 800c3fa:	60a2      	str	r2, [r4, #8]
 800c3fc:	6123      	str	r3, [r4, #16]
 800c3fe:	7561      	strb	r1, [r4, #21]
 800c400:	7da0      	ldrb	r0, [r4, #22]
 800c402:	f080 0001 	eor.w	r0, r0, #1
 800c406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	606b      	str	r3, [r5, #4]
 800c410:	602a      	str	r2, [r5, #0]
 800c412:	e7ed      	b.n	800c3f0 <ucdr_deserialize_double+0x100>
 800c414:	68a2      	ldr	r2, [r4, #8]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	7da0      	ldrb	r0, [r4, #22]
 800c41a:	f884 9015 	strb.w	r9, [r4, #21]
 800c41e:	1b92      	subs	r2, r2, r6
 800c420:	1b9b      	subs	r3, r3, r6
 800c422:	60a2      	str	r2, [r4, #8]
 800c424:	6123      	str	r3, [r4, #16]
 800c426:	f080 0001 	eor.w	r0, r0, #1
 800c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42e:	68a3      	ldr	r3, [r4, #8]
 800c430:	799b      	ldrb	r3, [r3, #6]
 800c432:	706b      	strb	r3, [r5, #1]
 800c434:	1cab      	adds	r3, r5, #2
 800c436:	68a2      	ldr	r2, [r4, #8]
 800c438:	7952      	ldrb	r2, [r2, #5]
 800c43a:	f803 2b01 	strb.w	r2, [r3], #1
 800c43e:	68a2      	ldr	r2, [r4, #8]
 800c440:	7912      	ldrb	r2, [r2, #4]
 800c442:	f803 2b01 	strb.w	r2, [r3], #1
 800c446:	68a2      	ldr	r2, [r4, #8]
 800c448:	78d2      	ldrb	r2, [r2, #3]
 800c44a:	f803 2b01 	strb.w	r2, [r3], #1
 800c44e:	68a2      	ldr	r2, [r4, #8]
 800c450:	7892      	ldrb	r2, [r2, #2]
 800c452:	f803 2b01 	strb.w	r2, [r3], #1
 800c456:	68a2      	ldr	r2, [r4, #8]
 800c458:	7852      	ldrb	r2, [r2, #1]
 800c45a:	f803 2b01 	strb.w	r2, [r3], #1
 800c45e:	68a2      	ldr	r2, [r4, #8]
 800c460:	7812      	ldrb	r2, [r2, #0]
 800c462:	701a      	strb	r2, [r3, #0]
 800c464:	e796      	b.n	800c394 <ucdr_deserialize_double+0xa4>
 800c466:	4639      	mov	r1, r7
 800c468:	4632      	mov	r2, r6
 800c46a:	4628      	mov	r0, r5
 800c46c:	f00d fa93 	bl	8019996 <memcpy>
 800c470:	68a1      	ldr	r1, [r4, #8]
 800c472:	4642      	mov	r2, r8
 800c474:	19a8      	adds	r0, r5, r6
 800c476:	f00d fa8e 	bl	8019996 <memcpy>
 800c47a:	e78b      	b.n	800c394 <ucdr_deserialize_double+0xa4>

0800c47c <ucdr_check_buffer_available_for>:
 800c47c:	7d83      	ldrb	r3, [r0, #22]
 800c47e:	b93b      	cbnz	r3, 800c490 <ucdr_check_buffer_available_for+0x14>
 800c480:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c484:	4419      	add	r1, r3
 800c486:	4288      	cmp	r0, r1
 800c488:	bf34      	ite	cc
 800c48a:	2000      	movcc	r0, #0
 800c48c:	2001      	movcs	r0, #1
 800c48e:	4770      	bx	lr
 800c490:	2000      	movs	r0, #0
 800c492:	4770      	bx	lr

0800c494 <ucdr_check_final_buffer_behavior>:
 800c494:	7d83      	ldrb	r3, [r0, #22]
 800c496:	b943      	cbnz	r3, 800c4aa <ucdr_check_final_buffer_behavior+0x16>
 800c498:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c49c:	4291      	cmp	r1, r2
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	d205      	bcs.n	800c4b0 <ucdr_check_final_buffer_behavior+0x1c>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	4770      	bx	lr
 800c4b0:	6982      	ldr	r2, [r0, #24]
 800c4b2:	b13a      	cbz	r2, 800c4c4 <ucdr_check_final_buffer_behavior+0x30>
 800c4b4:	69c1      	ldr	r1, [r0, #28]
 800c4b6:	4790      	blx	r2
 800c4b8:	f080 0301 	eor.w	r3, r0, #1
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	75a0      	strb	r0, [r4, #22]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	bd10      	pop	{r4, pc}
 800c4c4:	2001      	movs	r0, #1
 800c4c6:	75a0      	strb	r0, [r4, #22]
 800c4c8:	e7fa      	b.n	800c4c0 <ucdr_check_final_buffer_behavior+0x2c>
 800c4ca:	bf00      	nop

0800c4cc <ucdr_set_on_full_buffer_callback>:
 800c4cc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop

0800c4d4 <ucdr_init_buffer_origin_offset_endian>:
 800c4d4:	b410      	push	{r4}
 800c4d6:	9c01      	ldr	r4, [sp, #4]
 800c4d8:	6001      	str	r1, [r0, #0]
 800c4da:	440a      	add	r2, r1
 800c4dc:	6042      	str	r2, [r0, #4]
 800c4de:	190a      	adds	r2, r1, r4
 800c4e0:	441c      	add	r4, r3
 800c4e2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c4e6:	6082      	str	r2, [r0, #8]
 800c4e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c4ec:	7503      	strb	r3, [r0, #20]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f8:	7542      	strb	r2, [r0, #21]
 800c4fa:	7582      	strb	r2, [r0, #22]
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop

0800c500 <ucdr_init_buffer_origin_offset>:
 800c500:	b510      	push	{r4, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	9c04      	ldr	r4, [sp, #16]
 800c506:	9400      	str	r4, [sp, #0]
 800c508:	2401      	movs	r4, #1
 800c50a:	9401      	str	r4, [sp, #4]
 800c50c:	f7ff ffe2 	bl	800c4d4 <ucdr_init_buffer_origin_offset_endian>
 800c510:	b002      	add	sp, #8
 800c512:	bd10      	pop	{r4, pc}

0800c514 <ucdr_init_buffer_origin>:
 800c514:	b510      	push	{r4, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	2400      	movs	r4, #0
 800c51a:	9400      	str	r4, [sp, #0]
 800c51c:	f7ff fff0 	bl	800c500 <ucdr_init_buffer_origin_offset>
 800c520:	b002      	add	sp, #8
 800c522:	bd10      	pop	{r4, pc}

0800c524 <ucdr_init_buffer>:
 800c524:	2300      	movs	r3, #0
 800c526:	f7ff bff5 	b.w	800c514 <ucdr_init_buffer_origin>
 800c52a:	bf00      	nop

0800c52c <ucdr_alignment>:
 800c52c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c530:	fb03 0011 	mls	r0, r3, r1, r0
 800c534:	1a08      	subs	r0, r1, r0
 800c536:	3901      	subs	r1, #1
 800c538:	4008      	ands	r0, r1
 800c53a:	4770      	bx	lr

0800c53c <ucdr_buffer_alignment>:
 800c53c:	7d43      	ldrb	r3, [r0, #21]
 800c53e:	428b      	cmp	r3, r1
 800c540:	d208      	bcs.n	800c554 <ucdr_buffer_alignment+0x18>
 800c542:	6900      	ldr	r0, [r0, #16]
 800c544:	fbb0 f3f1 	udiv	r3, r0, r1
 800c548:	fb01 0013 	mls	r0, r1, r3, r0
 800c54c:	1a08      	subs	r0, r1, r0
 800c54e:	3901      	subs	r1, #1
 800c550:	4008      	ands	r0, r1
 800c552:	4770      	bx	lr
 800c554:	2000      	movs	r0, #0
 800c556:	4770      	bx	lr

0800c558 <ucdr_align_to>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4604      	mov	r4, r0
 800c55c:	460d      	mov	r5, r1
 800c55e:	f7ff ffed 	bl	800c53c <ucdr_buffer_alignment>
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	6921      	ldr	r1, [r4, #16]
 800c566:	7565      	strb	r5, [r4, #21]
 800c568:	181a      	adds	r2, r3, r0
 800c56a:	6863      	ldr	r3, [r4, #4]
 800c56c:	4293      	cmp	r3, r2
 800c56e:	4408      	add	r0, r1
 800c570:	bf28      	it	cs
 800c572:	4613      	movcs	r3, r2
 800c574:	6120      	str	r0, [r4, #16]
 800c576:	60a3      	str	r3, [r4, #8]
 800c578:	bd38      	pop	{r3, r4, r5, pc}
 800c57a:	bf00      	nop

0800c57c <ucdr_buffer_length>:
 800c57c:	6882      	ldr	r2, [r0, #8]
 800c57e:	6800      	ldr	r0, [r0, #0]
 800c580:	1a10      	subs	r0, r2, r0
 800c582:	4770      	bx	lr

0800c584 <ucdr_buffer_remaining>:
 800c584:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c588:	1a10      	subs	r0, r2, r0
 800c58a:	4770      	bx	lr

0800c58c <ucdr_check_final_buffer_behavior_array>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	7d83      	ldrb	r3, [r0, #22]
 800c590:	b963      	cbnz	r3, 800c5ac <ucdr_check_final_buffer_behavior_array+0x20>
 800c592:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	4604      	mov	r4, r0
 800c59a:	460d      	mov	r5, r1
 800c59c:	d308      	bcc.n	800c5b0 <ucdr_check_final_buffer_behavior_array+0x24>
 800c59e:	b139      	cbz	r1, 800c5b0 <ucdr_check_final_buffer_behavior_array+0x24>
 800c5a0:	6983      	ldr	r3, [r0, #24]
 800c5a2:	b163      	cbz	r3, 800c5be <ucdr_check_final_buffer_behavior_array+0x32>
 800c5a4:	69c1      	ldr	r1, [r0, #28]
 800c5a6:	4798      	blx	r3
 800c5a8:	75a0      	strb	r0, [r4, #22]
 800c5aa:	b108      	cbz	r0, 800c5b0 <ucdr_check_final_buffer_behavior_array+0x24>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f7ff ffe7 	bl	800c584 <ucdr_buffer_remaining>
 800c5b6:	42a8      	cmp	r0, r5
 800c5b8:	bf28      	it	cs
 800c5ba:	4628      	movcs	r0, r5
 800c5bc:	bd38      	pop	{r3, r4, r5, pc}
 800c5be:	2301      	movs	r3, #1
 800c5c0:	7583      	strb	r3, [r0, #22]
 800c5c2:	e7f3      	b.n	800c5ac <ucdr_check_final_buffer_behavior_array+0x20>

0800c5c4 <ucdr_advance_buffer>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	f7ff ff57 	bl	800c47c <ucdr_check_buffer_available_for>
 800c5ce:	b178      	cbz	r0, 800c5f0 <ucdr_advance_buffer+0x2c>
 800c5d0:	6923      	ldr	r3, [r4, #16]
 800c5d2:	68a2      	ldr	r2, [r4, #8]
 800c5d4:	442b      	add	r3, r5
 800c5d6:	6123      	str	r3, [r4, #16]
 800c5d8:	2301      	movs	r3, #1
 800c5da:	442a      	add	r2, r5
 800c5dc:	7563      	strb	r3, [r4, #21]
 800c5de:	60a2      	str	r2, [r4, #8]
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
 800c5e2:	68a2      	ldr	r2, [r4, #8]
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	4402      	add	r2, r0
 800c5e8:	4403      	add	r3, r0
 800c5ea:	1a2d      	subs	r5, r5, r0
 800c5ec:	60a2      	str	r2, [r4, #8]
 800c5ee:	6123      	str	r3, [r4, #16]
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f7ff ffc9 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d1f1      	bne.n	800c5e2 <ucdr_advance_buffer+0x1e>
 800c5fe:	2301      	movs	r3, #1
 800c600:	7563      	strb	r3, [r4, #21]
 800c602:	bd38      	pop	{r3, r4, r5, pc}

0800c604 <_rclc_check_for_new_data>:
 800c604:	2800      	cmp	r0, #0
 800c606:	d046      	beq.n	800c696 <_rclc_check_for_new_data+0x92>
 800c608:	b510      	push	{r4, lr}
 800c60a:	7802      	ldrb	r2, [r0, #0]
 800c60c:	b084      	sub	sp, #16
 800c60e:	4603      	mov	r3, r0
 800c610:	2a0a      	cmp	r2, #10
 800c612:	d842      	bhi.n	800c69a <_rclc_check_for_new_data+0x96>
 800c614:	e8df f002 	tbb	[pc, r2]
 800c618:	14181212 	.word	0x14181212
 800c61c:	06060614 	.word	0x06060614
 800c620:	2e1a      	.short	0x2e1a
 800c622:	16          	.byte	0x16
 800c623:	00          	.byte	0x00
 800c624:	6a0a      	ldr	r2, [r1, #32]
 800c626:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c628:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c62c:	2000      	movs	r0, #0
 800c62e:	1a12      	subs	r2, r2, r0
 800c630:	bf18      	it	ne
 800c632:	2201      	movne	r2, #1
 800c634:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c638:	b004      	add	sp, #16
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	680a      	ldr	r2, [r1, #0]
 800c63e:	e7f2      	b.n	800c626 <_rclc_check_for_new_data+0x22>
 800c640:	698a      	ldr	r2, [r1, #24]
 800c642:	e7f0      	b.n	800c626 <_rclc_check_for_new_data+0x22>
 800c644:	688a      	ldr	r2, [r1, #8]
 800c646:	e7ee      	b.n	800c626 <_rclc_check_for_new_data+0x22>
 800c648:	690a      	ldr	r2, [r1, #16]
 800c64a:	e7ec      	b.n	800c626 <_rclc_check_for_new_data+0x22>
 800c64c:	685c      	ldr	r4, [r3, #4]
 800c64e:	4608      	mov	r0, r1
 800c650:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c654:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c658:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c65c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c666:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c66a:	f104 0110 	add.w	r1, r4, #16
 800c66e:	f009 fd79 	bl	8016164 <rcl_action_client_wait_set_get_entities_ready>
 800c672:	e7e1      	b.n	800c638 <_rclc_check_for_new_data+0x34>
 800c674:	685c      	ldr	r4, [r3, #4]
 800c676:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c67a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c67e:	e9cd 3200 	strd	r3, r2, [sp]
 800c682:	4608      	mov	r0, r1
 800c684:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c688:	f104 0220 	add.w	r2, r4, #32
 800c68c:	f104 0110 	add.w	r1, r4, #16
 800c690:	f009 ff80 	bl	8016594 <rcl_action_server_wait_set_get_entities_ready>
 800c694:	e7d0      	b.n	800c638 <_rclc_check_for_new_data+0x34>
 800c696:	200b      	movs	r0, #11
 800c698:	4770      	bx	lr
 800c69a:	2001      	movs	r0, #1
 800c69c:	e7cc      	b.n	800c638 <_rclc_check_for_new_data+0x34>
 800c69e:	bf00      	nop

0800c6a0 <_rclc_take_new_data>:
 800c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a2:	b099      	sub	sp, #100	@ 0x64
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	f000 8088 	beq.w	800c7ba <_rclc_take_new_data+0x11a>
 800c6aa:	7803      	ldrb	r3, [r0, #0]
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	2b0a      	cmp	r3, #10
 800c6b0:	f200 8167 	bhi.w	800c982 <_rclc_take_new_data+0x2e2>
 800c6b4:	e8df f003 	tbb	[pc, r3]
 800c6b8:	44152d2d 	.word	0x44152d2d
 800c6bc:	19191944 	.word	0x19191944
 800c6c0:	065a      	.short	0x065a
 800c6c2:	15          	.byte	0x15
 800c6c3:	00          	.byte	0x00
 800c6c4:	6840      	ldr	r0, [r0, #4]
 800c6c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f040 80b2 	bne.w	800c834 <_rclc_take_new_data+0x194>
 800c6d0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f040 80e4 	bne.w	800c8a2 <_rclc_take_new_data+0x202>
 800c6da:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d16f      	bne.n	800c7c2 <_rclc_take_new_data+0x122>
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	b019      	add	sp, #100	@ 0x64
 800c6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c6ec:	6a0b      	ldr	r3, [r1, #32]
 800c6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0f5      	beq.n	800c6e2 <_rclc_take_new_data+0x42>
 800c6f6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c6fa:	f104 0110 	add.w	r1, r4, #16
 800c6fe:	f001 fea1 	bl	800e444 <rcl_take_request>
 800c702:	4605      	mov	r5, r0
 800c704:	2800      	cmp	r0, #0
 800c706:	d0ec      	beq.n	800c6e2 <_rclc_take_new_data+0x42>
 800c708:	f240 2359 	movw	r3, #601	@ 0x259
 800c70c:	4298      	cmp	r0, r3
 800c70e:	d013      	beq.n	800c738 <_rclc_take_new_data+0x98>
 800c710:	e029      	b.n	800c766 <_rclc_take_new_data+0xc6>
 800c712:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c714:	680b      	ldr	r3, [r1, #0]
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0e1      	beq.n	800c6e2 <_rclc_take_new_data+0x42>
 800c71e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c722:	2300      	movs	r3, #0
 800c724:	aa0a      	add	r2, sp, #40	@ 0x28
 800c726:	f002 f88f 	bl	800e848 <rcl_take>
 800c72a:	4605      	mov	r5, r0
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d0d9      	beq.n	800c6e4 <_rclc_take_new_data+0x44>
 800c730:	f240 1391 	movw	r3, #401	@ 0x191
 800c734:	4298      	cmp	r0, r3
 800c736:	d116      	bne.n	800c766 <_rclc_take_new_data+0xc6>
 800c738:	2300      	movs	r3, #0
 800c73a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c73e:	e7d1      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c740:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c742:	698b      	ldr	r3, [r1, #24]
 800c744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d0ca      	beq.n	800c6e2 <_rclc_take_new_data+0x42>
 800c74c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c750:	f104 0110 	add.w	r1, r4, #16
 800c754:	f000 fe0c 	bl	800d370 <rcl_take_response>
 800c758:	4605      	mov	r5, r0
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0c1      	beq.n	800c6e2 <_rclc_take_new_data+0x42>
 800c75e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c762:	4298      	cmp	r0, r3
 800c764:	d0be      	beq.n	800c6e4 <_rclc_take_new_data+0x44>
 800c766:	f003 f9e3 	bl	800fb30 <rcutils_reset_error>
 800c76a:	e7bb      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c76c:	6840      	ldr	r0, [r0, #4]
 800c76e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c772:	2b00      	cmp	r3, #0
 800c774:	d17d      	bne.n	800c872 <_rclc_take_new_data+0x1d2>
 800c776:	69c3      	ldr	r3, [r0, #28]
 800c778:	b11b      	cbz	r3, 800c782 <_rclc_take_new_data+0xe2>
 800c77a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d144      	bne.n	800c80c <_rclc_take_new_data+0x16c>
 800c782:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c786:	2b00      	cmp	r3, #0
 800c788:	f040 80ac 	bne.w	800c8e4 <_rclc_take_new_data+0x244>
 800c78c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c790:	2b00      	cmp	r3, #0
 800c792:	d0a6      	beq.n	800c6e2 <_rclc_take_new_data+0x42>
 800c794:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c796:	a90a      	add	r1, sp, #40	@ 0x28
 800c798:	3010      	adds	r0, #16
 800c79a:	f009 fbbb 	bl	8015f14 <rcl_action_take_result_response>
 800c79e:	4605      	mov	r5, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d1e0      	bne.n	800c766 <_rclc_take_new_data+0xc6>
 800c7a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7a8:	6860      	ldr	r0, [r4, #4]
 800c7aa:	f00a f817 	bl	80167dc <rclc_action_find_handle_by_result_request_sequence_number>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d098      	beq.n	800c6e4 <_rclc_take_new_data+0x44>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c7b8:	e794      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c7ba:	250b      	movs	r5, #11
 800c7bc:	4628      	mov	r0, r5
 800c7be:	b019      	add	sp, #100	@ 0x64
 800c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c2:	ae04      	add	r6, sp, #16
 800c7c4:	aa0a      	add	r2, sp, #40	@ 0x28
 800c7c6:	3010      	adds	r0, #16
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	f009 fe17 	bl	80163fc <rcl_action_take_cancel_request>
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d1c8      	bne.n	800c766 <_rclc_take_new_data+0xc6>
 800c7d4:	6860      	ldr	r0, [r4, #4]
 800c7d6:	a90a      	add	r1, sp, #40	@ 0x28
 800c7d8:	f009 ffbe 	bl	8016758 <rclc_action_find_goal_handle_by_uuid>
 800c7dc:	4607      	mov	r7, r0
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f000 80bb 	beq.w	800c95a <_rclc_take_new_data+0x2ba>
 800c7e4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c7e8:	2101      	movs	r1, #1
 800c7ea:	f009 ff3f 	bl	801666c <rcl_action_transition_goal_state>
 800c7ee:	2803      	cmp	r0, #3
 800c7f0:	4684      	mov	ip, r0
 800c7f2:	f040 80a7 	bne.w	800c944 <_rclc_take_new_data+0x2a4>
 800c7f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c7f8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c7fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c802:	e884 0003 	stmia.w	r4, {r0, r1}
 800c806:	f887 c008 	strb.w	ip, [r7, #8]
 800c80a:	e76b      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c80c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c80e:	3010      	adds	r0, #16
 800c810:	f009 fc00 	bl	8016014 <rcl_action_take_feedback>
 800c814:	4605      	mov	r5, r0
 800c816:	2800      	cmp	r0, #0
 800c818:	d1a5      	bne.n	800c766 <_rclc_take_new_data+0xc6>
 800c81a:	6860      	ldr	r0, [r4, #4]
 800c81c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c81e:	f009 ff9b 	bl	8016758 <rclc_action_find_goal_handle_by_uuid>
 800c822:	4603      	mov	r3, r0
 800c824:	2800      	cmp	r0, #0
 800c826:	f000 80a3 	beq.w	800c970 <_rclc_take_new_data+0x2d0>
 800c82a:	2201      	movs	r2, #1
 800c82c:	6860      	ldr	r0, [r4, #4]
 800c82e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c832:	e7a6      	b.n	800c782 <_rclc_take_new_data+0xe2>
 800c834:	f009 ff6a 	bl	801670c <rclc_action_take_goal_handle>
 800c838:	4606      	mov	r6, r0
 800c83a:	6860      	ldr	r0, [r4, #4]
 800c83c:	2e00      	cmp	r6, #0
 800c83e:	f43f af47 	beq.w	800c6d0 <_rclc_take_new_data+0x30>
 800c842:	6070      	str	r0, [r6, #4]
 800c844:	69f2      	ldr	r2, [r6, #28]
 800c846:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c84a:	3010      	adds	r0, #16
 800c84c:	f009 fd1e 	bl	801628c <rcl_action_take_goal_request>
 800c850:	4605      	mov	r5, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	f040 808e 	bne.w	800c974 <_rclc_take_new_data+0x2d4>
 800c858:	69f7      	ldr	r7, [r6, #28]
 800c85a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c85c:	7235      	strb	r5, [r6, #8]
 800c85e:	f8c6 0009 	str.w	r0, [r6, #9]
 800c862:	f8c6 100d 	str.w	r1, [r6, #13]
 800c866:	6860      	ldr	r0, [r4, #4]
 800c868:	f8c6 2011 	str.w	r2, [r6, #17]
 800c86c:	f8c6 3015 	str.w	r3, [r6, #21]
 800c870:	e72e      	b.n	800c6d0 <_rclc_take_new_data+0x30>
 800c872:	aa04      	add	r2, sp, #16
 800c874:	a90a      	add	r1, sp, #40	@ 0x28
 800c876:	3010      	adds	r0, #16
 800c878:	f009 fad4 	bl	8015e24 <rcl_action_take_goal_response>
 800c87c:	4605      	mov	r5, r0
 800c87e:	2800      	cmp	r0, #0
 800c880:	f47f af71 	bne.w	800c766 <_rclc_take_new_data+0xc6>
 800c884:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c888:	6860      	ldr	r0, [r4, #4]
 800c88a:	f009 ff95 	bl	80167b8 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c88e:	b130      	cbz	r0, 800c89e <_rclc_take_new_data+0x1fe>
 800c890:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c894:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c898:	2201      	movs	r2, #1
 800c89a:	f880 2020 	strb.w	r2, [r0, #32]
 800c89e:	6860      	ldr	r0, [r4, #4]
 800c8a0:	e769      	b.n	800c776 <_rclc_take_new_data+0xd6>
 800c8a2:	aa04      	add	r2, sp, #16
 800c8a4:	3010      	adds	r0, #16
 800c8a6:	a90a      	add	r1, sp, #40	@ 0x28
 800c8a8:	f009 fd68 	bl	801637c <rcl_action_take_result_request>
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	f47f af59 	bne.w	800c766 <_rclc_take_new_data+0xc6>
 800c8b4:	6860      	ldr	r0, [r4, #4]
 800c8b6:	a904      	add	r1, sp, #16
 800c8b8:	f009 ff4e 	bl	8016758 <rclc_action_find_goal_handle_by_uuid>
 800c8bc:	4607      	mov	r7, r0
 800c8be:	b160      	cbz	r0, 800c8da <_rclc_take_new_data+0x23a>
 800c8c0:	ad0a      	add	r5, sp, #40	@ 0x28
 800c8c2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c8c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c8ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8ce:	f04f 0c02 	mov.w	ip, #2
 800c8d2:	e886 0003 	stmia.w	r6, {r0, r1}
 800c8d6:	f887 c008 	strb.w	ip, [r7, #8]
 800c8da:	6860      	ldr	r0, [r4, #4]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c8e2:	e6fa      	b.n	800c6da <_rclc_take_new_data+0x3a>
 800c8e4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c8e8:	a90a      	add	r1, sp, #40	@ 0x28
 800c8ea:	3010      	adds	r0, #16
 800c8ec:	f009 fb52 	bl	8015f94 <rcl_action_take_cancel_response>
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	f47f af37 	bne.w	800c766 <_rclc_take_new_data+0xc6>
 800c8f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8fc:	6860      	ldr	r0, [r4, #4]
 800c8fe:	f009 ff7f 	bl	8016800 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c902:	4606      	mov	r6, r0
 800c904:	6860      	ldr	r0, [r4, #4]
 800c906:	2e00      	cmp	r6, #0
 800c908:	f43f af40 	beq.w	800c78c <_rclc_take_new_data+0xec>
 800c90c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c90e:	2701      	movs	r7, #1
 800c910:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c912:	2b00      	cmp	r3, #0
 800c914:	f43f af3a 	beq.w	800c78c <_rclc_take_new_data+0xec>
 800c918:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c91a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c91e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c922:	f009 ff19 	bl	8016758 <rclc_action_find_goal_handle_by_uuid>
 800c926:	b138      	cbz	r0, 800c938 <_rclc_take_new_data+0x298>
 800c928:	6860      	ldr	r0, [r4, #4]
 800c92a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c92c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c930:	3501      	adds	r5, #1
 800c932:	42ab      	cmp	r3, r5
 800c934:	d8f0      	bhi.n	800c918 <_rclc_take_new_data+0x278>
 800c936:	e729      	b.n	800c78c <_rclc_take_new_data+0xec>
 800c938:	6860      	ldr	r0, [r4, #4]
 800c93a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c93c:	3501      	adds	r5, #1
 800c93e:	42ab      	cmp	r3, r5
 800c940:	d8ea      	bhi.n	800c918 <_rclc_take_new_data+0x278>
 800c942:	e723      	b.n	800c78c <_rclc_take_new_data+0xec>
 800c944:	ab06      	add	r3, sp, #24
 800c946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c948:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c94c:	2103      	movs	r1, #3
 800c94e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c952:	6860      	ldr	r0, [r4, #4]
 800c954:	f009 ffc8 	bl	80168e8 <rclc_action_server_goal_cancel_reject>
 800c958:	e6c4      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c95a:	ab06      	add	r3, sp, #24
 800c95c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c95e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c962:	2102      	movs	r1, #2
 800c964:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c968:	6860      	ldr	r0, [r4, #4]
 800c96a:	f009 ffbd 	bl	80168e8 <rclc_action_server_goal_cancel_reject>
 800c96e:	e6b9      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c970:	6860      	ldr	r0, [r4, #4]
 800c972:	e706      	b.n	800c782 <_rclc_take_new_data+0xe2>
 800c974:	6860      	ldr	r0, [r4, #4]
 800c976:	4631      	mov	r1, r6
 800c978:	f009 fed8 	bl	801672c <rclc_action_remove_used_goal_handle>
 800c97c:	f003 f8d8 	bl	800fb30 <rcutils_reset_error>
 800c980:	e6b0      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c982:	2501      	movs	r5, #1
 800c984:	e6ae      	b.n	800c6e4 <_rclc_take_new_data+0x44>
 800c986:	bf00      	nop

0800c988 <_rclc_execute.part.0>:
 800c988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98a:	7803      	ldrb	r3, [r0, #0]
 800c98c:	b087      	sub	sp, #28
 800c98e:	4604      	mov	r4, r0
 800c990:	2b0a      	cmp	r3, #10
 800c992:	f200 8136 	bhi.w	800cc02 <_rclc_execute.part.0+0x27a>
 800c996:	e8df f003 	tbb	[pc, r3]
 800c99a:	435e      	.short	0x435e
 800c99c:	06a1664f 	.word	0x06a1664f
 800c9a0:	6c1e0606 	.word	0x6c1e0606
 800c9a4:	59          	.byte	0x59
 800c9a5:	00          	.byte	0x00
 800c9a6:	2b06      	cmp	r3, #6
 800c9a8:	f000 8122 	beq.w	800cbf0 <_rclc_execute.part.0+0x268>
 800c9ac:	2b07      	cmp	r3, #7
 800c9ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9b0:	f040 8118 	bne.w	800cbe4 <_rclc_execute.part.0+0x25c>
 800c9b4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c9b8:	6880      	ldr	r0, [r0, #8]
 800c9ba:	4798      	blx	r3
 800c9bc:	f104 0110 	add.w	r1, r4, #16
 800c9c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c9c2:	6860      	ldr	r0, [r4, #4]
 800c9c4:	f001 fd8e 	bl	800e4e4 <rcl_send_response>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d033      	beq.n	800ca34 <_rclc_execute.part.0+0xac>
 800c9cc:	9005      	str	r0, [sp, #20]
 800c9ce:	f003 f8af 	bl	800fb30 <rcutils_reset_error>
 800c9d2:	9805      	ldr	r0, [sp, #20]
 800c9d4:	e02e      	b.n	800ca34 <_rclc_execute.part.0+0xac>
 800c9d6:	6840      	ldr	r0, [r0, #4]
 800c9d8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 8086 	beq.w	800caee <_rclc_execute.part.0+0x166>
 800c9e2:	2600      	movs	r6, #0
 800c9e4:	2701      	movs	r7, #1
 800c9e6:	e004      	b.n	800c9f2 <_rclc_execute.part.0+0x6a>
 800c9e8:	f009 fe6a 	bl	80166c0 <rclc_action_send_result_request>
 800c9ec:	b998      	cbnz	r0, 800ca16 <_rclc_execute.part.0+0x8e>
 800c9ee:	722f      	strb	r7, [r5, #8]
 800c9f0:	6860      	ldr	r0, [r4, #4]
 800c9f2:	f009 ff17 	bl	8016824 <rclc_action_find_first_handle_with_goal_response>
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d077      	beq.n	800caec <_rclc_execute.part.0+0x164>
 800c9fc:	6863      	ldr	r3, [r4, #4]
 800c9fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ca06:	f885 6020 	strb.w	r6, [r5, #32]
 800ca0a:	4798      	blx	r3
 800ca0c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ca10:	4628      	mov	r0, r5
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e8      	bne.n	800c9e8 <_rclc_execute.part.0+0x60>
 800ca16:	6860      	ldr	r0, [r4, #4]
 800ca18:	4629      	mov	r1, r5
 800ca1a:	f009 fe87 	bl	801672c <rclc_action_remove_used_goal_handle>
 800ca1e:	e7e7      	b.n	800c9f0 <_rclc_execute.part.0+0x68>
 800ca20:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ca24:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ca28:	2d00      	cmp	r5, #0
 800ca2a:	f000 80c9 	beq.w	800cbc0 <_rclc_execute.part.0+0x238>
 800ca2e:	6880      	ldr	r0, [r0, #8]
 800ca30:	4798      	blx	r3
 800ca32:	2000      	movs	r0, #0
 800ca34:	b007      	add	sp, #28
 800ca36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca38:	6840      	ldr	r0, [r0, #4]
 800ca3a:	f002 f813 	bl	800ea64 <rcl_timer_call>
 800ca3e:	f240 3321 	movw	r3, #801	@ 0x321
 800ca42:	4298      	cmp	r0, r3
 800ca44:	d004      	beq.n	800ca50 <_rclc_execute.part.0+0xc8>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d0f4      	beq.n	800ca34 <_rclc_execute.part.0+0xac>
 800ca4a:	e7bf      	b.n	800c9cc <_rclc_execute.part.0+0x44>
 800ca4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca4e:	4798      	blx	r3
 800ca50:	2000      	movs	r0, #0
 800ca52:	b007      	add	sp, #28
 800ca54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca56:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ca5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca5c:	b925      	cbnz	r5, 800ca68 <_rclc_execute.part.0+0xe0>
 800ca5e:	4628      	mov	r0, r5
 800ca60:	4798      	blx	r3
 800ca62:	4628      	mov	r0, r5
 800ca64:	e7e6      	b.n	800ca34 <_rclc_execute.part.0+0xac>
 800ca66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca68:	68a0      	ldr	r0, [r4, #8]
 800ca6a:	4798      	blx	r3
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	b007      	add	sp, #28
 800ca70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca72:	6840      	ldr	r0, [r0, #4]
 800ca74:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ca78:	bb3b      	cbnz	r3, 800caca <_rclc_execute.part.0+0x142>
 800ca7a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d07b      	beq.n	800cb7a <_rclc_execute.part.0+0x1f2>
 800ca82:	f640 0634 	movw	r6, #2100	@ 0x834
 800ca86:	2701      	movs	r7, #1
 800ca88:	e007      	b.n	800ca9a <_rclc_execute.part.0+0x112>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f009 fee2 	bl	8016854 <rclc_action_server_response_goal_request>
 800ca90:	6860      	ldr	r0, [r4, #4]
 800ca92:	4629      	mov	r1, r5
 800ca94:	f009 fe4a 	bl	801672c <rclc_action_remove_used_goal_handle>
 800ca98:	6860      	ldr	r0, [r4, #4]
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	f009 fe74 	bl	8016788 <rclc_action_find_first_handle_by_status>
 800caa0:	4605      	mov	r5, r0
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d066      	beq.n	800cb74 <_rclc_execute.part.0+0x1ec>
 800caa6:	6863      	ldr	r3, [r4, #4]
 800caa8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	4798      	blx	r3
 800caae:	42b0      	cmp	r0, r6
 800cab0:	f04f 0100 	mov.w	r1, #0
 800cab4:	d1e9      	bne.n	800ca8a <_rclc_execute.part.0+0x102>
 800cab6:	2101      	movs	r1, #1
 800cab8:	4628      	mov	r0, r5
 800caba:	f009 fecb 	bl	8016854 <rclc_action_server_response_goal_request>
 800cabe:	722f      	strb	r7, [r5, #8]
 800cac0:	e7ea      	b.n	800ca98 <_rclc_execute.part.0+0x110>
 800cac2:	6848      	ldr	r0, [r1, #4]
 800cac4:	f009 fe32 	bl	801672c <rclc_action_remove_used_goal_handle>
 800cac8:	6860      	ldr	r0, [r4, #4]
 800caca:	f009 fe69 	bl	80167a0 <rclc_action_find_first_terminated_handle>
 800cace:	4601      	mov	r1, r0
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d1f6      	bne.n	800cac2 <_rclc_execute.part.0+0x13a>
 800cad4:	6860      	ldr	r0, [r4, #4]
 800cad6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800cada:	e7ce      	b.n	800ca7a <_rclc_execute.part.0+0xf2>
 800cadc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cade:	6880      	ldr	r0, [r0, #8]
 800cae0:	f104 0110 	add.w	r1, r4, #16
 800cae4:	4798      	blx	r3
 800cae6:	2000      	movs	r0, #0
 800cae8:	b007      	add	sp, #28
 800caea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caec:	6860      	ldr	r0, [r4, #4]
 800caee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800caf2:	b18b      	cbz	r3, 800cb18 <_rclc_execute.part.0+0x190>
 800caf4:	68c5      	ldr	r5, [r0, #12]
 800caf6:	b32d      	cbz	r5, 800cb44 <_rclc_execute.part.0+0x1bc>
 800caf8:	2600      	movs	r6, #0
 800cafa:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cafe:	b143      	cbz	r3, 800cb12 <_rclc_execute.part.0+0x18a>
 800cb00:	69c3      	ldr	r3, [r0, #28]
 800cb02:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cb06:	b123      	cbz	r3, 800cb12 <_rclc_execute.part.0+0x18a>
 800cb08:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cb0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	4798      	blx	r3
 800cb10:	6860      	ldr	r0, [r4, #4]
 800cb12:	682d      	ldr	r5, [r5, #0]
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	d1f0      	bne.n	800cafa <_rclc_execute.part.0+0x172>
 800cb18:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cb1c:	b193      	cbz	r3, 800cb44 <_rclc_execute.part.0+0x1bc>
 800cb1e:	68c5      	ldr	r5, [r0, #12]
 800cb20:	b185      	cbz	r5, 800cb44 <_rclc_execute.part.0+0x1bc>
 800cb22:	2600      	movs	r6, #0
 800cb24:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cb28:	b14b      	cbz	r3, 800cb3e <_rclc_execute.part.0+0x1b6>
 800cb2a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cb2c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cb30:	b12b      	cbz	r3, 800cb3e <_rclc_execute.part.0+0x1b6>
 800cb32:	4628      	mov	r0, r5
 800cb34:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cb38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb3a:	4798      	blx	r3
 800cb3c:	6860      	ldr	r0, [r4, #4]
 800cb3e:	682d      	ldr	r5, [r5, #0]
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	d1ef      	bne.n	800cb24 <_rclc_execute.part.0+0x19c>
 800cb44:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d081      	beq.n	800ca50 <_rclc_execute.part.0+0xc8>
 800cb4c:	2700      	movs	r7, #0
 800cb4e:	e00b      	b.n	800cb68 <_rclc_execute.part.0+0x1e0>
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cb56:	6a1e      	ldr	r6, [r3, #32]
 800cb58:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cb5c:	47b0      	blx	r6
 800cb5e:	6860      	ldr	r0, [r4, #4]
 800cb60:	4629      	mov	r1, r5
 800cb62:	f009 fde3 	bl	801672c <rclc_action_remove_used_goal_handle>
 800cb66:	6860      	ldr	r0, [r4, #4]
 800cb68:	f009 fe68 	bl	801683c <rclc_action_find_first_handle_with_result_response>
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d1ee      	bne.n	800cb50 <_rclc_execute.part.0+0x1c8>
 800cb72:	e76d      	b.n	800ca50 <_rclc_execute.part.0+0xc8>
 800cb74:	6860      	ldr	r0, [r4, #4]
 800cb76:	f880 5020 	strb.w	r5, [r0, #32]
 800cb7a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f43f af66 	beq.w	800ca50 <_rclc_execute.part.0+0xc8>
 800cb84:	68c5      	ldr	r5, [r0, #12]
 800cb86:	b1b5      	cbz	r5, 800cbb6 <_rclc_execute.part.0+0x22e>
 800cb88:	2602      	movs	r6, #2
 800cb8a:	e001      	b.n	800cb90 <_rclc_execute.part.0+0x208>
 800cb8c:	682d      	ldr	r5, [r5, #0]
 800cb8e:	b195      	cbz	r5, 800cbb6 <_rclc_execute.part.0+0x22e>
 800cb90:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d1f9      	bne.n	800cb8c <_rclc_execute.part.0+0x204>
 800cb98:	69c3      	ldr	r3, [r0, #28]
 800cb9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	4798      	blx	r3
 800cba0:	4603      	mov	r3, r0
 800cba2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cba6:	4628      	mov	r0, r5
 800cba8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cbac:	b163      	cbz	r3, 800cbc8 <_rclc_execute.part.0+0x240>
 800cbae:	f009 fe6f 	bl	8016890 <rclc_action_server_goal_cancel_accept>
 800cbb2:	6860      	ldr	r0, [r4, #4]
 800cbb4:	e7ea      	b.n	800cb8c <_rclc_execute.part.0+0x204>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	e739      	b.n	800ca34 <_rclc_execute.part.0+0xac>
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	4798      	blx	r3
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	e735      	b.n	800ca34 <_rclc_execute.part.0+0xac>
 800cbc8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cbca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cbce:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800cbd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbd6:	6860      	ldr	r0, [r4, #4]
 800cbd8:	2101      	movs	r1, #1
 800cbda:	f009 fe85 	bl	80168e8 <rclc_action_server_goal_cancel_reject>
 800cbde:	722e      	strb	r6, [r5, #8]
 800cbe0:	6860      	ldr	r0, [r4, #4]
 800cbe2:	e7d3      	b.n	800cb8c <_rclc_execute.part.0+0x204>
 800cbe4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cbe6:	6880      	ldr	r0, [r0, #8]
 800cbe8:	4798      	blx	r3
 800cbea:	f104 0110 	add.w	r1, r4, #16
 800cbee:	e6e7      	b.n	800c9c0 <_rclc_execute.part.0+0x38>
 800cbf0:	f100 0110 	add.w	r1, r0, #16
 800cbf4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cbf6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800cbf8:	6880      	ldr	r0, [r0, #8]
 800cbfa:	9105      	str	r1, [sp, #20]
 800cbfc:	4798      	blx	r3
 800cbfe:	9905      	ldr	r1, [sp, #20]
 800cc00:	e6de      	b.n	800c9c0 <_rclc_execute.part.0+0x38>
 800cc02:	2001      	movs	r0, #1
 800cc04:	e716      	b.n	800ca34 <_rclc_execute.part.0+0xac>
 800cc06:	bf00      	nop

0800cc08 <rclc_executor_trigger_any>:
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d03f      	beq.n	800cc8c <rclc_executor_trigger_any+0x84>
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	d03e      	beq.n	800cc8e <rclc_executor_trigger_any+0x86>
 800cc10:	4603      	mov	r3, r0
 800cc12:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800cc16:	2200      	movs	r2, #0
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d037      	beq.n	800cc8c <rclc_executor_trigger_any+0x84>
 800cc1c:	b430      	push	{r4, r5}
 800cc1e:	f893 c000 	ldrb.w	ip, [r3]
 800cc22:	f1bc 0f08 	cmp.w	ip, #8
 800cc26:	d11e      	bne.n	800cc66 <rclc_executor_trigger_any+0x5e>
 800cc28:	685c      	ldr	r4, [r3, #4]
 800cc2a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cc2c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cc30:	d105      	bne.n	800cc3e <rclc_executor_trigger_any+0x36>
 800cc32:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cc36:	b910      	cbnz	r0, 800cc3e <rclc_executor_trigger_any+0x36>
 800cc38:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cc3c:	b128      	cbz	r0, 800cc4a <rclc_executor_trigger_any+0x42>
 800cc3e:	bc30      	pop	{r4, r5}
 800cc40:	4770      	bx	lr
 800cc42:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d1f9      	bne.n	800cc3e <rclc_executor_trigger_any+0x36>
 800cc4a:	3201      	adds	r2, #1
 800cc4c:	4291      	cmp	r1, r2
 800cc4e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cc52:	d018      	beq.n	800cc86 <rclc_executor_trigger_any+0x7e>
 800cc54:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d0f0      	beq.n	800cc3e <rclc_executor_trigger_any+0x36>
 800cc5c:	f893 c000 	ldrb.w	ip, [r3]
 800cc60:	f1bc 0f08 	cmp.w	ip, #8
 800cc64:	d0e0      	beq.n	800cc28 <rclc_executor_trigger_any+0x20>
 800cc66:	f1bc 0f09 	cmp.w	ip, #9
 800cc6a:	d1ea      	bne.n	800cc42 <rclc_executor_trigger_any+0x3a>
 800cc6c:	685c      	ldr	r4, [r3, #4]
 800cc6e:	6a25      	ldr	r5, [r4, #32]
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	d1e4      	bne.n	800cc3e <rclc_executor_trigger_any+0x36>
 800cc74:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d1e0      	bne.n	800cc3e <rclc_executor_trigger_any+0x36>
 800cc7c:	3201      	adds	r2, #1
 800cc7e:	4291      	cmp	r1, r2
 800cc80:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cc84:	d1e6      	bne.n	800cc54 <rclc_executor_trigger_any+0x4c>
 800cc86:	2000      	movs	r0, #0
 800cc88:	bc30      	pop	{r4, r5}
 800cc8a:	4770      	bx	lr
 800cc8c:	4770      	bx	lr
 800cc8e:	4608      	mov	r0, r1
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	0000      	movs	r0, r0
	...

0800cc98 <rclc_executor_init>:
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d05f      	beq.n	800cd5c <rclc_executor_init+0xc4>
 800cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca0:	460c      	mov	r4, r1
 800cca2:	b0b2      	sub	sp, #200	@ 0xc8
 800cca4:	2900      	cmp	r1, #0
 800cca6:	d051      	beq.n	800cd4c <rclc_executor_init+0xb4>
 800cca8:	4605      	mov	r5, r0
 800ccaa:	4618      	mov	r0, r3
 800ccac:	4616      	mov	r6, r2
 800ccae:	461f      	mov	r7, r3
 800ccb0:	f002 fe5c 	bl	800f96c <rcutils_allocator_is_valid>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d049      	beq.n	800cd4c <rclc_executor_init+0xb4>
 800ccb8:	2e00      	cmp	r6, #0
 800ccba:	d047      	beq.n	800cd4c <rclc_executor_init+0xb4>
 800ccbc:	492c      	ldr	r1, [pc, #176]	@ (800cd70 <rclc_executor_init+0xd8>)
 800ccbe:	2290      	movs	r2, #144	@ 0x90
 800ccc0:	a80e      	add	r0, sp, #56	@ 0x38
 800ccc2:	f00c fe68 	bl	8019996 <memcpy>
 800ccc6:	a90e      	add	r1, sp, #56	@ 0x38
 800ccc8:	2290      	movs	r2, #144	@ 0x90
 800ccca:	4628      	mov	r0, r5
 800cccc:	f00c fe63 	bl	8019996 <memcpy>
 800ccd0:	606c      	str	r4, [r5, #4]
 800ccd2:	4668      	mov	r0, sp
 800ccd4:	60ee      	str	r6, [r5, #12]
 800ccd6:	466c      	mov	r4, sp
 800ccd8:	f002 f836 	bl	800ed48 <rcl_get_zero_initialized_wait_set>
 800ccdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccde:	f105 0c18 	add.w	ip, r5, #24
 800cce2:	f8d7 8000 	ldr.w	r8, [r7]
 800cce6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccf6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cd68 <rclc_executor_init+0xd0>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	f8cc 3000 	str.w	r3, [ip]
 800cd00:	6939      	ldr	r1, [r7, #16]
 800cd02:	616f      	str	r7, [r5, #20]
 800cd04:	ed85 7b1c 	vstr	d7, [r5, #112]	@ 0x70
 800cd08:	01b0      	lsls	r0, r6, #6
 800cd0a:	47c0      	blx	r8
 800cd0c:	60a8      	str	r0, [r5, #8]
 800cd0e:	b338      	cbz	r0, 800cd60 <rclc_executor_init+0xc8>
 800cd10:	2400      	movs	r4, #0
 800cd12:	e000      	b.n	800cd16 <rclc_executor_init+0x7e>
 800cd14:	68a8      	ldr	r0, [r5, #8]
 800cd16:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	3401      	adds	r4, #1
 800cd1e:	f000 fa6b 	bl	800d1f8 <rclc_executor_handle_init>
 800cd22:	42a6      	cmp	r6, r4
 800cd24:	d1f6      	bne.n	800cd14 <rclc_executor_init+0x7c>
 800cd26:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 800cd2a:	f000 fa5b 	bl	800d1e4 <rclc_executor_handle_counters_zero_init>
 800cd2e:	4a11      	ldr	r2, [pc, #68]	@ (800cd74 <rclc_executor_init+0xdc>)
 800cd30:	68ab      	ldr	r3, [r5, #8]
 800cd32:	2000      	movs	r0, #0
 800cd34:	e9c5 2020 	strd	r2, r0, [r5, #128]	@ 0x80
 800cd38:	b163      	cbz	r3, 800cd54 <rclc_executor_init+0xbc>
 800cd3a:	696b      	ldr	r3, [r5, #20]
 800cd3c:	b153      	cbz	r3, 800cd54 <rclc_executor_init+0xbc>
 800cd3e:	68eb      	ldr	r3, [r5, #12]
 800cd40:	b143      	cbz	r3, 800cd54 <rclc_executor_init+0xbc>
 800cd42:	f885 0088 	strb.w	r0, [r5, #136]	@ 0x88
 800cd46:	b032      	add	sp, #200	@ 0xc8
 800cd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd4c:	200b      	movs	r0, #11
 800cd4e:	b032      	add	sp, #200	@ 0xc8
 800cd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd54:	4618      	mov	r0, r3
 800cd56:	b032      	add	sp, #200	@ 0xc8
 800cd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd5c:	200b      	movs	r0, #11
 800cd5e:	4770      	bx	lr
 800cd60:	200a      	movs	r0, #10
 800cd62:	e7f4      	b.n	800cd4e <rclc_executor_init+0xb6>
 800cd64:	f3af 8000 	nop.w
 800cd68:	3b9aca00 	.word	0x3b9aca00
 800cd6c:	00000000 	.word	0x00000000
 800cd70:	0801bea0 	.word	0x0801bea0
 800cd74:	0800cc09 	.word	0x0800cc09

0800cd78 <rclc_executor_add_subscription>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800cd7e:	b338      	cbz	r0, 800cdd0 <rclc_executor_add_subscription+0x58>
 800cd80:	b331      	cbz	r1, 800cdd0 <rclc_executor_add_subscription+0x58>
 800cd82:	b32a      	cbz	r2, 800cdd0 <rclc_executor_add_subscription+0x58>
 800cd84:	b323      	cbz	r3, 800cdd0 <rclc_executor_add_subscription+0x58>
 800cd86:	4604      	mov	r4, r0
 800cd88:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800cd8c:	42a8      	cmp	r0, r5
 800cd8e:	d301      	bcc.n	800cd94 <rclc_executor_add_subscription+0x1c>
 800cd90:	2001      	movs	r0, #1
 800cd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd94:	68a6      	ldr	r6, [r4, #8]
 800cd96:	0187      	lsls	r7, r0, #6
 800cd98:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800cd9c:	2500      	movs	r5, #0
 800cd9e:	55f5      	strb	r5, [r6, r7]
 800cda0:	3001      	adds	r0, #1
 800cda2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cda6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f104 0518 	add.w	r5, r4, #24
 800cdb0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cdb4:	f88c e001 	strb.w	lr, [ip, #1]
 800cdb8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800cdbc:	6120      	str	r0, [r4, #16]
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f001 ffd6 	bl	800ed70 <rcl_wait_set_is_valid>
 800cdc4:	b930      	cbnz	r0, 800cdd4 <rclc_executor_add_subscription+0x5c>
 800cdc6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cdc8:	3301      	adds	r3, #1
 800cdca:	2000      	movs	r0, #0
 800cdcc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd0:	200b      	movs	r0, #11
 800cdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f001 ffd1 	bl	800ed7c <rcl_wait_set_fini>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d0f3      	beq.n	800cdc6 <rclc_executor_add_subscription+0x4e>
 800cdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cde0 <rclc_executor_prepare>:
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d044      	beq.n	800ce6e <rclc_executor_prepare+0x8e>
 800cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde6:	f100 0518 	add.w	r5, r0, #24
 800cdea:	b09b      	sub	sp, #108	@ 0x6c
 800cdec:	4604      	mov	r4, r0
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f001 ffbe 	bl	800ed70 <rcl_wait_set_is_valid>
 800cdf4:	b110      	cbz	r0, 800cdfc <rclc_executor_prepare+0x1c>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	b01b      	add	sp, #108	@ 0x6c
 800cdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	f001 ffbd 	bl	800ed7c <rcl_wait_set_fini>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d130      	bne.n	800ce68 <rclc_executor_prepare+0x88>
 800ce06:	a80c      	add	r0, sp, #48	@ 0x30
 800ce08:	f001 ff9e 	bl	800ed48 <rcl_get_zero_initialized_wait_set>
 800ce0c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ce10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce14:	46ae      	mov	lr, r5
 800ce16:	6967      	ldr	r7, [r4, #20]
 800ce18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce2c:	f8dc 3000 	ldr.w	r3, [ip]
 800ce30:	f8ce 3000 	str.w	r3, [lr]
 800ce34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce36:	ae04      	add	r6, sp, #16
 800ce38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	6862      	ldr	r2, [r4, #4]
 800ce3e:	6033      	str	r3, [r6, #0]
 800ce40:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ce42:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ce44:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ce48:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800ce4c:	e9cd 2100 	strd	r2, r1, [sp]
 800ce50:	4628      	mov	r0, r5
 800ce52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce54:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ce56:	f002 fa8f 	bl	800f378 <rcl_wait_set_init>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d0cc      	beq.n	800cdf8 <rclc_executor_prepare+0x18>
 800ce5e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ce60:	f002 fe66 	bl	800fb30 <rcutils_reset_error>
 800ce64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ce66:	e7c7      	b.n	800cdf8 <rclc_executor_prepare+0x18>
 800ce68:	f002 fe62 	bl	800fb30 <rcutils_reset_error>
 800ce6c:	e7cb      	b.n	800ce06 <rclc_executor_prepare+0x26>
 800ce6e:	200b      	movs	r0, #11
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop

0800ce74 <rclc_executor_spin_some.part.0>:
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	f100 0618 	add.w	r6, r0, #24
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	4691      	mov	r9, r2
 800ce80:	4698      	mov	r8, r3
 800ce82:	4605      	mov	r5, r0
 800ce84:	f7ff ffac 	bl	800cde0 <rclc_executor_prepare>
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f002 f843 	bl	800ef14 <rcl_wait_set_clear>
 800ce8e:	4607      	mov	r7, r0
 800ce90:	2800      	cmp	r0, #0
 800ce92:	f040 80ed 	bne.w	800d070 <rclc_executor_spin_some.part.0+0x1fc>
 800ce96:	68eb      	ldr	r3, [r5, #12]
 800ce98:	4604      	mov	r4, r0
 800ce9a:	b303      	cbz	r3, 800cede <rclc_executor_spin_some.part.0+0x6a>
 800ce9c:	68a9      	ldr	r1, [r5, #8]
 800ce9e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cea2:	01a2      	lsls	r2, r4, #6
 800cea4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cea8:	b1cb      	cbz	r3, 800cede <rclc_executor_spin_some.part.0+0x6a>
 800ceaa:	5c8b      	ldrb	r3, [r1, r2]
 800ceac:	2b0a      	cmp	r3, #10
 800ceae:	f200 80d8 	bhi.w	800d062 <rclc_executor_spin_some.part.0+0x1ee>
 800ceb2:	e8df f003 	tbb	[pc, r3]
 800ceb6:	9c9c      	.short	0x9c9c
 800ceb8:	068c8ca7 	.word	0x068c8ca7
 800cebc:	bdc90606 	.word	0xbdc90606
 800cec0:	b2          	.byte	0xb2
 800cec1:	00          	.byte	0x00
 800cec2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cec6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ceca:	4630      	mov	r0, r6
 800cecc:	f002 fb6a 	bl	800f5a4 <rcl_wait_set_add_service>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	f040 8086 	bne.w	800cfe2 <rclc_executor_spin_some.part.0+0x16e>
 800ced6:	68eb      	ldr	r3, [r5, #12]
 800ced8:	3401      	adds	r4, #1
 800ceda:	429c      	cmp	r4, r3
 800cedc:	d3de      	bcc.n	800ce9c <rclc_executor_spin_some.part.0+0x28>
 800cede:	4643      	mov	r3, r8
 800cee0:	464a      	mov	r2, r9
 800cee2:	4630      	mov	r0, r6
 800cee4:	f002 fb8c 	bl	800f600 <rcl_wait>
 800cee8:	f895 3088 	ldrb.w	r3, [r5, #136]	@ 0x88
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 80c7 	beq.w	800d080 <rclc_executor_spin_some.part.0+0x20c>
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	f040 80b5 	bne.w	800d062 <rclc_executor_spin_some.part.0+0x1ee>
 800cef8:	68eb      	ldr	r3, [r5, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 8159 	beq.w	800d1b2 <rclc_executor_spin_some.part.0+0x33e>
 800cf00:	2400      	movs	r4, #0
 800cf02:	46a0      	mov	r8, r4
 800cf04:	f240 1991 	movw	r9, #401	@ 0x191
 800cf08:	e00a      	b.n	800cf20 <rclc_executor_spin_some.part.0+0xac>
 800cf0a:	f7ff fb7b 	bl	800c604 <_rclc_check_for_new_data>
 800cf0e:	4604      	mov	r4, r0
 800cf10:	b110      	cbz	r0, 800cf18 <rclc_executor_spin_some.part.0+0xa4>
 800cf12:	4548      	cmp	r0, r9
 800cf14:	f040 80b2 	bne.w	800d07c <rclc_executor_spin_some.part.0+0x208>
 800cf18:	68eb      	ldr	r3, [r5, #12]
 800cf1a:	4598      	cmp	r8, r3
 800cf1c:	f080 8126 	bcs.w	800d16c <rclc_executor_spin_some.part.0+0x2f8>
 800cf20:	68aa      	ldr	r2, [r5, #8]
 800cf22:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cf26:	4631      	mov	r1, r6
 800cf28:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cf2c:	f108 0801 	add.w	r8, r8, #1
 800cf30:	f1bc 0f00 	cmp.w	ip, #0
 800cf34:	d1e9      	bne.n	800cf0a <rclc_executor_spin_some.part.0+0x96>
 800cf36:	4619      	mov	r1, r3
 800cf38:	4610      	mov	r0, r2
 800cf3a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	@ 0x80
 800cf3e:	4798      	blx	r3
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f000 809b 	beq.w	800d07c <rclc_executor_spin_some.part.0+0x208>
 800cf46:	68eb      	ldr	r3, [r5, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8097 	beq.w	800d07c <rclc_executor_spin_some.part.0+0x208>
 800cf4e:	f04f 0800 	mov.w	r8, #0
 800cf52:	f240 1991 	movw	r9, #401	@ 0x191
 800cf56:	e009      	b.n	800cf6c <rclc_executor_spin_some.part.0+0xf8>
 800cf58:	f7ff fba2 	bl	800c6a0 <_rclc_take_new_data>
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	b110      	cbz	r0, 800cf66 <rclc_executor_spin_some.part.0+0xf2>
 800cf60:	4548      	cmp	r0, r9
 800cf62:	f040 808b 	bne.w	800d07c <rclc_executor_spin_some.part.0+0x208>
 800cf66:	68eb      	ldr	r3, [r5, #12]
 800cf68:	4598      	cmp	r8, r3
 800cf6a:	d209      	bcs.n	800cf80 <rclc_executor_spin_some.part.0+0x10c>
 800cf6c:	68a8      	ldr	r0, [r5, #8]
 800cf6e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cf72:	4631      	mov	r1, r6
 800cf74:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cf78:	f108 0801 	add.w	r8, r8, #1
 800cf7c:	2a00      	cmp	r2, #0
 800cf7e:	d1eb      	bne.n	800cf58 <rclc_executor_spin_some.part.0+0xe4>
 800cf80:	2600      	movs	r6, #0
 800cf82:	b97b      	cbnz	r3, 800cfa4 <rclc_executor_spin_some.part.0+0x130>
 800cf84:	e07a      	b.n	800d07c <rclc_executor_spin_some.part.0+0x208>
 800cf86:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cf8a:	2a08      	cmp	r2, #8
 800cf8c:	f000 80fd 	beq.w	800d18a <rclc_executor_spin_some.part.0+0x316>
 800cf90:	2a09      	cmp	r2, #9
 800cf92:	f000 80ef 	beq.w	800d174 <rclc_executor_spin_some.part.0+0x300>
 800cf96:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cf9a:	b98a      	cbnz	r2, 800cfc0 <rclc_executor_spin_some.part.0+0x14c>
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	429e      	cmp	r6, r3
 800cfa0:	d262      	bcs.n	800d068 <rclc_executor_spin_some.part.0+0x1f4>
 800cfa2:	2400      	movs	r4, #0
 800cfa4:	68aa      	ldr	r2, [r5, #8]
 800cfa6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cfaa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cfae:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cfb2:	2900      	cmp	r1, #0
 800cfb4:	d062      	beq.n	800d07c <rclc_executor_spin_some.part.0+0x208>
 800cfb6:	7841      	ldrb	r1, [r0, #1]
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	d0e4      	beq.n	800cf86 <rclc_executor_spin_some.part.0+0x112>
 800cfbc:	2901      	cmp	r1, #1
 800cfbe:	d1ed      	bne.n	800cf9c <rclc_executor_spin_some.part.0+0x128>
 800cfc0:	f7ff fce2 	bl	800c988 <_rclc_execute.part.0>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f040 80b6 	bne.w	800d136 <rclc_executor_spin_some.part.0+0x2c2>
 800cfca:	68eb      	ldr	r3, [r5, #12]
 800cfcc:	e7e6      	b.n	800cf9c <rclc_executor_spin_some.part.0+0x128>
 800cfce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cfd2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f002 fab8 	bl	800f54c <rcl_wait_set_add_client>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	f43f af7a 	beq.w	800ced6 <rclc_executor_spin_some.part.0+0x62>
 800cfe2:	9001      	str	r0, [sp, #4]
 800cfe4:	f002 fda4 	bl	800fb30 <rcutils_reset_error>
 800cfe8:	9801      	ldr	r0, [sp, #4]
 800cfea:	4607      	mov	r7, r0
 800cfec:	e03c      	b.n	800d068 <rclc_executor_spin_some.part.0+0x1f4>
 800cfee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cff2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cff6:	4630      	mov	r0, r6
 800cff8:	f001 ff60 	bl	800eebc <rcl_wait_set_add_subscription>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	f43f af6a 	beq.w	800ced6 <rclc_executor_spin_some.part.0+0x62>
 800d002:	e7ee      	b.n	800cfe2 <rclc_executor_spin_some.part.0+0x16e>
 800d004:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d008:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d00c:	4630      	mov	r0, r6
 800d00e:	f002 fa6d 	bl	800f4ec <rcl_wait_set_add_timer>
 800d012:	2800      	cmp	r0, #0
 800d014:	f43f af5f 	beq.w	800ced6 <rclc_executor_spin_some.part.0+0x62>
 800d018:	e7e3      	b.n	800cfe2 <rclc_executor_spin_some.part.0+0x16e>
 800d01a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d01e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d022:	4630      	mov	r0, r6
 800d024:	f002 fa36 	bl	800f494 <rcl_wait_set_add_guard_condition>
 800d028:	2800      	cmp	r0, #0
 800d02a:	f43f af54 	beq.w	800ced6 <rclc_executor_spin_some.part.0+0x62>
 800d02e:	e7d8      	b.n	800cfe2 <rclc_executor_spin_some.part.0+0x16e>
 800d030:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d034:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d038:	3110      	adds	r1, #16
 800d03a:	4630      	mov	r0, r6
 800d03c:	f009 fa56 	bl	80164ec <rcl_action_wait_set_add_action_server>
 800d040:	2800      	cmp	r0, #0
 800d042:	f43f af48 	beq.w	800ced6 <rclc_executor_spin_some.part.0+0x62>
 800d046:	e7cc      	b.n	800cfe2 <rclc_executor_spin_some.part.0+0x16e>
 800d048:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d04c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d050:	3110      	adds	r1, #16
 800d052:	2300      	movs	r3, #0
 800d054:	4630      	mov	r0, r6
 800d056:	f009 f821 	bl	801609c <rcl_action_wait_set_add_action_client>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	f43f af3b 	beq.w	800ced6 <rclc_executor_spin_some.part.0+0x62>
 800d060:	e7bf      	b.n	800cfe2 <rclc_executor_spin_some.part.0+0x16e>
 800d062:	f002 fd65 	bl	800fb30 <rcutils_reset_error>
 800d066:	2701      	movs	r7, #1
 800d068:	4638      	mov	r0, r7
 800d06a:	b003      	add	sp, #12
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	f002 fd5e 	bl	800fb30 <rcutils_reset_error>
 800d074:	4638      	mov	r0, r7
 800d076:	b003      	add	sp, #12
 800d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07c:	4627      	mov	r7, r4
 800d07e:	e7f3      	b.n	800d068 <rclc_executor_spin_some.part.0+0x1f4>
 800d080:	68eb      	ldr	r3, [r5, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 8092 	beq.w	800d1ac <rclc_executor_spin_some.part.0+0x338>
 800d088:	2400      	movs	r4, #0
 800d08a:	46a0      	mov	r8, r4
 800d08c:	f240 1991 	movw	r9, #401	@ 0x191
 800d090:	e008      	b.n	800d0a4 <rclc_executor_spin_some.part.0+0x230>
 800d092:	f7ff fab7 	bl	800c604 <_rclc_check_for_new_data>
 800d096:	4604      	mov	r4, r0
 800d098:	b108      	cbz	r0, 800d09e <rclc_executor_spin_some.part.0+0x22a>
 800d09a:	4548      	cmp	r0, r9
 800d09c:	d1ee      	bne.n	800d07c <rclc_executor_spin_some.part.0+0x208>
 800d09e:	68eb      	ldr	r3, [r5, #12]
 800d0a0:	4598      	cmp	r8, r3
 800d0a2:	d265      	bcs.n	800d170 <rclc_executor_spin_some.part.0+0x2fc>
 800d0a4:	68aa      	ldr	r2, [r5, #8]
 800d0a6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d0b0:	f108 0801 	add.w	r8, r8, #1
 800d0b4:	f1bc 0f00 	cmp.w	ip, #0
 800d0b8:	d1eb      	bne.n	800d092 <rclc_executor_spin_some.part.0+0x21e>
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	@ 0x80
 800d0c2:	4798      	blx	r3
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d0d9      	beq.n	800d07c <rclc_executor_spin_some.part.0+0x208>
 800d0c8:	68eb      	ldr	r3, [r5, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0d6      	beq.n	800d07c <rclc_executor_spin_some.part.0+0x208>
 800d0ce:	f04f 0800 	mov.w	r8, #0
 800d0d2:	f240 1991 	movw	r9, #401	@ 0x191
 800d0d6:	f240 2a59 	movw	sl, #601	@ 0x259
 800d0da:	e00e      	b.n	800d0fa <rclc_executor_spin_some.part.0+0x286>
 800d0dc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d033      	beq.n	800d14c <rclc_executor_spin_some.part.0+0x2d8>
 800d0e4:	2b09      	cmp	r3, #9
 800d0e6:	d028      	beq.n	800d13a <rclc_executor_spin_some.part.0+0x2c6>
 800d0e8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d0ec:	b9fb      	cbnz	r3, 800d12e <rclc_executor_spin_some.part.0+0x2ba>
 800d0ee:	68eb      	ldr	r3, [r5, #12]
 800d0f0:	f108 0801 	add.w	r8, r8, #1
 800d0f4:	4598      	cmp	r8, r3
 800d0f6:	d2b7      	bcs.n	800d068 <rclc_executor_spin_some.part.0+0x1f4>
 800d0f8:	2400      	movs	r4, #0
 800d0fa:	68a8      	ldr	r0, [r5, #8]
 800d0fc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d100:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d104:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0b7      	beq.n	800d07c <rclc_executor_spin_some.part.0+0x208>
 800d10c:	4631      	mov	r1, r6
 800d10e:	f7ff fac7 	bl	800c6a0 <_rclc_take_new_data>
 800d112:	b118      	cbz	r0, 800d11c <rclc_executor_spin_some.part.0+0x2a8>
 800d114:	4548      	cmp	r0, r9
 800d116:	d001      	beq.n	800d11c <rclc_executor_spin_some.part.0+0x2a8>
 800d118:	4550      	cmp	r0, sl
 800d11a:	d10c      	bne.n	800d136 <rclc_executor_spin_some.part.0+0x2c2>
 800d11c:	68ab      	ldr	r3, [r5, #8]
 800d11e:	eb13 000b 	adds.w	r0, r3, fp
 800d122:	d021      	beq.n	800d168 <rclc_executor_spin_some.part.0+0x2f4>
 800d124:	7842      	ldrb	r2, [r0, #1]
 800d126:	2a00      	cmp	r2, #0
 800d128:	d0d8      	beq.n	800d0dc <rclc_executor_spin_some.part.0+0x268>
 800d12a:	2a01      	cmp	r2, #1
 800d12c:	d1df      	bne.n	800d0ee <rclc_executor_spin_some.part.0+0x27a>
 800d12e:	f7ff fc2b 	bl	800c988 <_rclc_execute.part.0>
 800d132:	2800      	cmp	r0, #0
 800d134:	d0db      	beq.n	800d0ee <rclc_executor_spin_some.part.0+0x27a>
 800d136:	4607      	mov	r7, r0
 800d138:	e796      	b.n	800d068 <rclc_executor_spin_some.part.0+0x1f4>
 800d13a:	6843      	ldr	r3, [r0, #4]
 800d13c:	6a1a      	ldr	r2, [r3, #32]
 800d13e:	2a00      	cmp	r2, #0
 800d140:	d1f5      	bne.n	800d12e <rclc_executor_spin_some.part.0+0x2ba>
 800d142:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0d1      	beq.n	800d0ee <rclc_executor_spin_some.part.0+0x27a>
 800d14a:	e7f0      	b.n	800d12e <rclc_executor_spin_some.part.0+0x2ba>
 800d14c:	6843      	ldr	r3, [r0, #4]
 800d14e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d150:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d154:	d1eb      	bne.n	800d12e <rclc_executor_spin_some.part.0+0x2ba>
 800d156:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	d1e7      	bne.n	800d12e <rclc_executor_spin_some.part.0+0x2ba>
 800d15e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0c3      	beq.n	800d0ee <rclc_executor_spin_some.part.0+0x27a>
 800d166:	e7e2      	b.n	800d12e <rclc_executor_spin_some.part.0+0x2ba>
 800d168:	270b      	movs	r7, #11
 800d16a:	e77d      	b.n	800d068 <rclc_executor_spin_some.part.0+0x1f4>
 800d16c:	68aa      	ldr	r2, [r5, #8]
 800d16e:	e6e2      	b.n	800cf36 <rclc_executor_spin_some.part.0+0xc2>
 800d170:	68aa      	ldr	r2, [r5, #8]
 800d172:	e7a2      	b.n	800d0ba <rclc_executor_spin_some.part.0+0x246>
 800d174:	6842      	ldr	r2, [r0, #4]
 800d176:	6a11      	ldr	r1, [r2, #32]
 800d178:	2900      	cmp	r1, #0
 800d17a:	f47f af21 	bne.w	800cfc0 <rclc_executor_spin_some.part.0+0x14c>
 800d17e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d182:	2a00      	cmp	r2, #0
 800d184:	f43f af0a 	beq.w	800cf9c <rclc_executor_spin_some.part.0+0x128>
 800d188:	e71a      	b.n	800cfc0 <rclc_executor_spin_some.part.0+0x14c>
 800d18a:	6842      	ldr	r2, [r0, #4]
 800d18c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d18e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d192:	f47f af15 	bne.w	800cfc0 <rclc_executor_spin_some.part.0+0x14c>
 800d196:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d19a:	2900      	cmp	r1, #0
 800d19c:	f47f af10 	bne.w	800cfc0 <rclc_executor_spin_some.part.0+0x14c>
 800d1a0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	f43f aef9 	beq.w	800cf9c <rclc_executor_spin_some.part.0+0x128>
 800d1aa:	e709      	b.n	800cfc0 <rclc_executor_spin_some.part.0+0x14c>
 800d1ac:	68aa      	ldr	r2, [r5, #8]
 800d1ae:	461c      	mov	r4, r3
 800d1b0:	e783      	b.n	800d0ba <rclc_executor_spin_some.part.0+0x246>
 800d1b2:	68aa      	ldr	r2, [r5, #8]
 800d1b4:	461c      	mov	r4, r3
 800d1b6:	e6be      	b.n	800cf36 <rclc_executor_spin_some.part.0+0xc2>

0800d1b8 <rclc_executor_spin_some>:
 800d1b8:	b190      	cbz	r0, 800d1e0 <rclc_executor_spin_some+0x28>
 800d1ba:	b570      	push	{r4, r5, r6, lr}
 800d1bc:	4604      	mov	r4, r0
 800d1be:	6840      	ldr	r0, [r0, #4]
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	461d      	mov	r5, r3
 800d1c4:	f000 f9a0 	bl	800d508 <rcl_context_is_valid>
 800d1c8:	b130      	cbz	r0, 800d1d8 <rclc_executor_spin_some+0x20>
 800d1ca:	4632      	mov	r2, r6
 800d1cc:	462b      	mov	r3, r5
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1d4:	f7ff be4e 	b.w	800ce74 <rclc_executor_spin_some.part.0>
 800d1d8:	f002 fcaa 	bl	800fb30 <rcutils_reset_error>
 800d1dc:	2001      	movs	r0, #1
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	200b      	movs	r0, #11
 800d1e2:	4770      	bx	lr

0800d1e4 <rclc_executor_handle_counters_zero_init>:
 800d1e4:	b130      	cbz	r0, 800d1f4 <rclc_executor_handle_counters_zero_init+0x10>
 800d1e6:	b508      	push	{r3, lr}
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	f00c faf4 	bl	80197d8 <memset>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	bd08      	pop	{r3, pc}
 800d1f4:	200b      	movs	r0, #11
 800d1f6:	4770      	bx	lr

0800d1f8 <rclc_executor_handle_init>:
 800d1f8:	b168      	cbz	r0, 800d216 <rclc_executor_handle_init+0x1e>
 800d1fa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d220 <rclc_executor_handle_init+0x28>
 800d1fe:	2300      	movs	r3, #0
 800d200:	220b      	movs	r2, #11
 800d202:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d206:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d20a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d20e:	8002      	strh	r2, [r0, #0]
 800d210:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d212:	4618      	mov	r0, r3
 800d214:	4770      	bx	lr
 800d216:	200b      	movs	r0, #11
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	f3af 8000 	nop.w
	...

0800d228 <rclc_support_init>:
 800d228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d22c:	b086      	sub	sp, #24
 800d22e:	b3b8      	cbz	r0, 800d2a0 <rclc_support_init+0x78>
 800d230:	461c      	mov	r4, r3
 800d232:	b3ab      	cbz	r3, 800d2a0 <rclc_support_init+0x78>
 800d234:	460f      	mov	r7, r1
 800d236:	4690      	mov	r8, r2
 800d238:	4606      	mov	r6, r0
 800d23a:	f000 fb69 	bl	800d910 <rcl_get_zero_initialized_init_options>
 800d23e:	f104 030c 	add.w	r3, r4, #12
 800d242:	9005      	str	r0, [sp, #20]
 800d244:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d248:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d24c:	a805      	add	r0, sp, #20
 800d24e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d252:	f000 fb5f 	bl	800d914 <rcl_init_options_init>
 800d256:	4605      	mov	r5, r0
 800d258:	b9e0      	cbnz	r0, 800d294 <rclc_support_init+0x6c>
 800d25a:	ad02      	add	r5, sp, #8
 800d25c:	4628      	mov	r0, r5
 800d25e:	f000 f949 	bl	800d4f4 <rcl_get_zero_initialized_context>
 800d262:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d266:	4633      	mov	r3, r6
 800d268:	e886 0003 	stmia.w	r6, {r0, r1}
 800d26c:	aa05      	add	r2, sp, #20
 800d26e:	4641      	mov	r1, r8
 800d270:	4638      	mov	r0, r7
 800d272:	f000 fa17 	bl	800d6a4 <rcl_init>
 800d276:	4605      	mov	r5, r0
 800d278:	b9b8      	cbnz	r0, 800d2aa <rclc_support_init+0x82>
 800d27a:	60b4      	str	r4, [r6, #8]
 800d27c:	4622      	mov	r2, r4
 800d27e:	f106 010c 	add.w	r1, r6, #12
 800d282:	2003      	movs	r0, #3
 800d284:	f001 fb6a 	bl	800e95c <rcl_clock_init>
 800d288:	4605      	mov	r5, r0
 800d28a:	b970      	cbnz	r0, 800d2aa <rclc_support_init+0x82>
 800d28c:	a805      	add	r0, sp, #20
 800d28e:	f000 fb9d 	bl	800d9cc <rcl_init_options_fini>
 800d292:	b108      	cbz	r0, 800d298 <rclc_support_init+0x70>
 800d294:	f002 fc4c 	bl	800fb30 <rcutils_reset_error>
 800d298:	4628      	mov	r0, r5
 800d29a:	b006      	add	sp, #24
 800d29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a0:	250b      	movs	r5, #11
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	b006      	add	sp, #24
 800d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2aa:	f002 fc41 	bl	800fb30 <rcutils_reset_error>
 800d2ae:	a805      	add	r0, sp, #20
 800d2b0:	f000 fb8c 	bl	800d9cc <rcl_init_options_fini>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d0ef      	beq.n	800d298 <rclc_support_init+0x70>
 800d2b8:	e7ec      	b.n	800d294 <rclc_support_init+0x6c>
 800d2ba:	bf00      	nop

0800d2bc <rcl_client_get_rmw_handle>:
 800d2bc:	b118      	cbz	r0, 800d2c6 <rcl_client_get_rmw_handle+0xa>
 800d2be:	6800      	ldr	r0, [r0, #0]
 800d2c0:	b108      	cbz	r0, 800d2c6 <rcl_client_get_rmw_handle+0xa>
 800d2c2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d2c6:	4770      	bx	lr

0800d2c8 <rcl_send_request>:
 800d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ca:	b08b      	sub	sp, #44	@ 0x2c
 800d2cc:	b1e8      	cbz	r0, 800d30a <rcl_send_request+0x42>
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	6800      	ldr	r0, [r0, #0]
 800d2d2:	b1d0      	cbz	r0, 800d30a <rcl_send_request+0x42>
 800d2d4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800d2d8:	b1bb      	cbz	r3, 800d30a <rcl_send_request+0x42>
 800d2da:	460f      	mov	r7, r1
 800d2dc:	b1d1      	cbz	r1, 800d314 <rcl_send_request+0x4c>
 800d2de:	4616      	mov	r6, r2
 800d2e0:	b1c2      	cbz	r2, 800d314 <rcl_send_request+0x4c>
 800d2e2:	2105      	movs	r1, #5
 800d2e4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800d2e8:	f002 fb4e 	bl	800f988 <__atomic_load_8>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	e9c6 0100 	strd	r0, r1, [r6]
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	f003 fc93 	bl	8010c24 <rmw_send_request>
 800d2fe:	4605      	mov	r5, r0
 800d300:	b160      	cbz	r0, 800d31c <rcl_send_request+0x54>
 800d302:	2501      	movs	r5, #1
 800d304:	4628      	mov	r0, r5
 800d306:	b00b      	add	sp, #44	@ 0x2c
 800d308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800d30e:	4628      	mov	r0, r5
 800d310:	b00b      	add	sp, #44	@ 0x2c
 800d312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d314:	250b      	movs	r5, #11
 800d316:	4628      	mov	r0, r5
 800d318:	b00b      	add	sp, #44	@ 0x2c
 800d31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d31c:	6820      	ldr	r0, [r4, #0]
 800d31e:	2305      	movs	r3, #5
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d326:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800d32a:	f002 fb99 	bl	800fa60 <__atomic_exchange_8>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800d334:	2a00      	cmp	r2, #0
 800d336:	d0e5      	beq.n	800d304 <rcl_send_request+0x3c>
 800d338:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d33c:	a905      	add	r1, sp, #20
 800d33e:	f002 ff5b 	bl	80101f8 <rmw_get_gid_for_client>
 800d342:	b970      	cbnz	r0, 800d362 <rcl_send_request+0x9a>
 800d344:	6822      	ldr	r2, [r4, #0]
 800d346:	ab06      	add	r3, sp, #24
 800d348:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800d34c:	9302      	str	r3, [sp, #8]
 800d34e:	4629      	mov	r1, r5
 800d350:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d354:	463a      	mov	r2, r7
 800d356:	e9cd 4500 	strd	r4, r5, [sp]
 800d35a:	f001 f8fd 	bl	800e558 <rcl_send_service_event_message>
 800d35e:	4605      	mov	r5, r0
 800d360:	e7d0      	b.n	800d304 <rcl_send_request+0x3c>
 800d362:	f000 f8b3 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800d366:	4605      	mov	r5, r0
 800d368:	e7cc      	b.n	800d304 <rcl_send_request+0x3c>
 800d36a:	bf00      	nop
 800d36c:	0000      	movs	r0, r0
	...

0800d370 <rcl_take_response>:
 800d370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d372:	468e      	mov	lr, r1
 800d374:	460c      	mov	r4, r1
 800d376:	4616      	mov	r6, r2
 800d378:	4605      	mov	r5, r0
 800d37a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d37e:	b095      	sub	sp, #84	@ 0x54
 800d380:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800d384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d388:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d38c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d390:	2d00      	cmp	r5, #0
 800d392:	d042      	beq.n	800d41a <rcl_take_response+0xaa>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d03f      	beq.n	800d41a <rcl_take_response+0xaa>
 800d39a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d03b      	beq.n	800d41a <rcl_take_response+0xaa>
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	d03c      	beq.n	800d420 <rcl_take_response+0xb0>
 800d3a6:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 800d438 <rcl_take_response+0xc8>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f88d 3013 	strb.w	r3, [sp, #19]
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	f10d 0313 	add.w	r3, sp, #19
 800d3b6:	a90a      	add	r1, sp, #40	@ 0x28
 800d3b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d3bc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d3c0:	f003 fd38 	bl	8010e34 <rmw_take_response>
 800d3c4:	4607      	mov	r7, r0
 800d3c6:	bb68      	cbnz	r0, 800d424 <rcl_take_response+0xb4>
 800d3c8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800d3cc:	b363      	cbz	r3, 800d428 <rcl_take_response+0xb8>
 800d3ce:	682b      	ldr	r3, [r5, #0]
 800d3d0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800d3d4:	b19a      	cbz	r2, 800d3fe <rcl_take_response+0x8e>
 800d3d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d3da:	a905      	add	r1, sp, #20
 800d3dc:	f002 ff0c 	bl	80101f8 <rmw_get_gid_for_client>
 800d3e0:	bb28      	cbnz	r0, 800d42e <rcl_take_response+0xbe>
 800d3e2:	682a      	ldr	r2, [r5, #0]
 800d3e4:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	@ 0x48
 800d3ee:	ab06      	add	r3, sp, #24
 800d3f0:	e9cd 6700 	strd	r6, r7, [sp]
 800d3f4:	9302      	str	r3, [sp, #8]
 800d3f6:	2103      	movs	r1, #3
 800d3f8:	f001 f8ae 	bl	800e558 <rcl_send_service_event_message>
 800d3fc:	4607      	mov	r7, r0
 800d3fe:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 800d402:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d406:	46a4      	mov	ip, r4
 800d408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d40c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d410:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d414:	4638      	mov	r0, r7
 800d416:	b015      	add	sp, #84	@ 0x54
 800d418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41a:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 800d41e:	e7ee      	b.n	800d3fe <rcl_take_response+0x8e>
 800d420:	270b      	movs	r7, #11
 800d422:	e7ec      	b.n	800d3fe <rcl_take_response+0x8e>
 800d424:	2701      	movs	r7, #1
 800d426:	e7ea      	b.n	800d3fe <rcl_take_response+0x8e>
 800d428:	f240 17f5 	movw	r7, #501	@ 0x1f5
 800d42c:	e7e7      	b.n	800d3fe <rcl_take_response+0x8e>
 800d42e:	f000 f84d 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800d432:	4607      	mov	r7, r0
 800d434:	e7e3      	b.n	800d3fe <rcl_take_response+0x8e>
 800d436:	bf00      	nop
	...

0800d440 <rcl_client_is_valid>:
 800d440:	b130      	cbz	r0, 800d450 <rcl_client_is_valid+0x10>
 800d442:	6800      	ldr	r0, [r0, #0]
 800d444:	b120      	cbz	r0, 800d450 <rcl_client_is_valid+0x10>
 800d446:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d44a:	3800      	subs	r0, #0
 800d44c:	bf18      	it	ne
 800d44e:	2001      	movne	r0, #1
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop

0800d454 <rclc_node_init_default>:
 800d454:	b3b8      	cbz	r0, 800d4c6 <rclc_node_init_default+0x72>
 800d456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d45a:	460d      	mov	r5, r1
 800d45c:	b0a3      	sub	sp, #140	@ 0x8c
 800d45e:	b329      	cbz	r1, 800d4ac <rclc_node_init_default+0x58>
 800d460:	4616      	mov	r6, r2
 800d462:	b31a      	cbz	r2, 800d4ac <rclc_node_init_default+0x58>
 800d464:	461f      	mov	r7, r3
 800d466:	b30b      	cbz	r3, 800d4ac <rclc_node_init_default+0x58>
 800d468:	f10d 0810 	add.w	r8, sp, #16
 800d46c:	4604      	mov	r4, r0
 800d46e:	4640      	mov	r0, r8
 800d470:	f000 fb56 	bl	800db20 <rcl_get_zero_initialized_node>
 800d474:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d478:	f10d 0918 	add.w	r9, sp, #24
 800d47c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d480:	4648      	mov	r0, r9
 800d482:	f000 fce5 	bl	800de50 <rcl_node_get_default_options>
 800d486:	4640      	mov	r0, r8
 800d488:	f000 fb4a 	bl	800db20 <rcl_get_zero_initialized_node>
 800d48c:	f8cd 9000 	str.w	r9, [sp]
 800d490:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d494:	463b      	mov	r3, r7
 800d496:	e884 0003 	stmia.w	r4, {r0, r1}
 800d49a:	4632      	mov	r2, r6
 800d49c:	4629      	mov	r1, r5
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 fb48 	bl	800db34 <rcl_node_init>
 800d4a4:	b930      	cbnz	r0, 800d4b4 <rclc_node_init_default+0x60>
 800d4a6:	b023      	add	sp, #140	@ 0x8c
 800d4a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ac:	200b      	movs	r0, #11
 800d4ae:	b023      	add	sp, #140	@ 0x8c
 800d4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4b4:	9003      	str	r0, [sp, #12]
 800d4b6:	f002 fb3b 	bl	800fb30 <rcutils_reset_error>
 800d4ba:	f002 fb39 	bl	800fb30 <rcutils_reset_error>
 800d4be:	9803      	ldr	r0, [sp, #12]
 800d4c0:	b023      	add	sp, #140	@ 0x8c
 800d4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c6:	200b      	movs	r0, #11
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop

0800d4cc <rcl_convert_rmw_ret_to_rcl_ret>:
 800d4cc:	280b      	cmp	r0, #11
 800d4ce:	dc0d      	bgt.n	800d4ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	db09      	blt.n	800d4e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d4d4:	280b      	cmp	r0, #11
 800d4d6:	d807      	bhi.n	800d4e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d4d8:	e8df f000 	tbb	[pc, r0]
 800d4dc:	07060607 	.word	0x07060607
 800d4e0:	06060606 	.word	0x06060606
 800d4e4:	07070606 	.word	0x07070606
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	4770      	bx	lr
 800d4ec:	28cb      	cmp	r0, #203	@ 0xcb
 800d4ee:	bf18      	it	ne
 800d4f0:	2001      	movne	r0, #1
 800d4f2:	4770      	bx	lr

0800d4f4 <rcl_get_zero_initialized_context>:
 800d4f4:	4a03      	ldr	r2, [pc, #12]	@ (800d504 <rcl_get_zero_initialized_context+0x10>)
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4fc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d500:	4618      	mov	r0, r3
 800d502:	4770      	bx	lr
 800d504:	0801bf30 	.word	0x0801bf30

0800d508 <rcl_context_is_valid>:
 800d508:	b118      	cbz	r0, 800d512 <rcl_context_is_valid+0xa>
 800d50a:	6840      	ldr	r0, [r0, #4]
 800d50c:	3800      	subs	r0, #0
 800d50e:	bf18      	it	ne
 800d510:	2001      	movne	r0, #1
 800d512:	4770      	bx	lr

0800d514 <__cleanup_context>:
 800d514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d518:	4606      	mov	r6, r0
 800d51a:	6800      	ldr	r0, [r0, #0]
 800d51c:	2300      	movs	r3, #0
 800d51e:	6073      	str	r3, [r6, #4]
 800d520:	2800      	cmp	r0, #0
 800d522:	d049      	beq.n	800d5b8 <__cleanup_context+0xa4>
 800d524:	6947      	ldr	r7, [r0, #20]
 800d526:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d52a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d52e:	b137      	cbz	r7, 800d53e <__cleanup_context+0x2a>
 800d530:	3014      	adds	r0, #20
 800d532:	f000 fa4b 	bl	800d9cc <rcl_init_options_fini>
 800d536:	4607      	mov	r7, r0
 800d538:	2800      	cmp	r0, #0
 800d53a:	d144      	bne.n	800d5c6 <__cleanup_context+0xb2>
 800d53c:	6830      	ldr	r0, [r6, #0]
 800d53e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d540:	b143      	cbz	r3, 800d554 <__cleanup_context+0x40>
 800d542:	3028      	adds	r0, #40	@ 0x28
 800d544:	f003 f884 	bl	8010650 <rmw_context_fini>
 800d548:	b118      	cbz	r0, 800d552 <__cleanup_context+0x3e>
 800d54a:	2f00      	cmp	r7, #0
 800d54c:	d03e      	beq.n	800d5cc <__cleanup_context+0xb8>
 800d54e:	f002 faef 	bl	800fb30 <rcutils_reset_error>
 800d552:	6830      	ldr	r0, [r6, #0]
 800d554:	6a03      	ldr	r3, [r0, #32]
 800d556:	b1db      	cbz	r3, 800d590 <__cleanup_context+0x7c>
 800d558:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800d55c:	2a01      	cmp	r2, #1
 800d55e:	f17c 0100 	sbcs.w	r1, ip, #0
 800d562:	db11      	blt.n	800d588 <__cleanup_context+0x74>
 800d564:	2400      	movs	r4, #0
 800d566:	4625      	mov	r5, r4
 800d568:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d56c:	4649      	mov	r1, r9
 800d56e:	b1b8      	cbz	r0, 800d5a0 <__cleanup_context+0x8c>
 800d570:	47c0      	blx	r8
 800d572:	6833      	ldr	r3, [r6, #0]
 800d574:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800d578:	3401      	adds	r4, #1
 800d57a:	f145 0500 	adc.w	r5, r5, #0
 800d57e:	4294      	cmp	r4, r2
 800d580:	eb75 010c 	sbcs.w	r1, r5, ip
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	dbef      	blt.n	800d568 <__cleanup_context+0x54>
 800d588:	4618      	mov	r0, r3
 800d58a:	4649      	mov	r1, r9
 800d58c:	47c0      	blx	r8
 800d58e:	6830      	ldr	r0, [r6, #0]
 800d590:	4649      	mov	r1, r9
 800d592:	47c0      	blx	r8
 800d594:	2300      	movs	r3, #0
 800d596:	e9c6 3300 	strd	r3, r3, [r6]
 800d59a:	4638      	mov	r0, r7
 800d59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5a0:	3401      	adds	r4, #1
 800d5a2:	f145 0500 	adc.w	r5, r5, #0
 800d5a6:	4294      	cmp	r4, r2
 800d5a8:	eb75 010c 	sbcs.w	r1, r5, ip
 800d5ac:	dbdc      	blt.n	800d568 <__cleanup_context+0x54>
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	4649      	mov	r1, r9
 800d5b2:	47c0      	blx	r8
 800d5b4:	6830      	ldr	r0, [r6, #0]
 800d5b6:	e7eb      	b.n	800d590 <__cleanup_context+0x7c>
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e9c6 3300 	strd	r3, r3, [r6]
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	f002 fab3 	bl	800fb30 <rcutils_reset_error>
 800d5ca:	e7b7      	b.n	800d53c <__cleanup_context+0x28>
 800d5cc:	f7ff ff7e 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800d5d0:	4607      	mov	r7, r0
 800d5d2:	e7bc      	b.n	800d54e <__cleanup_context+0x3a>

0800d5d4 <rclc_publisher_init_default>:
 800d5d4:	b368      	cbz	r0, 800d632 <rclc_publisher_init_default+0x5e>
 800d5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5da:	460d      	mov	r5, r1
 800d5dc:	b0a0      	sub	sp, #128	@ 0x80
 800d5de:	b321      	cbz	r1, 800d62a <rclc_publisher_init_default+0x56>
 800d5e0:	4616      	mov	r6, r2
 800d5e2:	b312      	cbz	r2, 800d62a <rclc_publisher_init_default+0x56>
 800d5e4:	461f      	mov	r7, r3
 800d5e6:	b303      	cbz	r3, 800d62a <rclc_publisher_init_default+0x56>
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	f000 fd05 	bl	800dff8 <rcl_get_zero_initialized_publisher>
 800d5ee:	f10d 0810 	add.w	r8, sp, #16
 800d5f2:	6020      	str	r0, [r4, #0]
 800d5f4:	4640      	mov	r0, r8
 800d5f6:	f000 fd9d 	bl	800e134 <rcl_publisher_get_default_options>
 800d5fa:	490f      	ldr	r1, [pc, #60]	@ (800d638 <rclc_publisher_init_default+0x64>)
 800d5fc:	2250      	movs	r2, #80	@ 0x50
 800d5fe:	4640      	mov	r0, r8
 800d600:	f00c f9c9 	bl	8019996 <memcpy>
 800d604:	f8cd 8000 	str.w	r8, [sp]
 800d608:	463b      	mov	r3, r7
 800d60a:	4632      	mov	r2, r6
 800d60c:	4629      	mov	r1, r5
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 fcf8 	bl	800e004 <rcl_publisher_init>
 800d614:	b910      	cbnz	r0, 800d61c <rclc_publisher_init_default+0x48>
 800d616:	b020      	add	sp, #128	@ 0x80
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61c:	9003      	str	r0, [sp, #12]
 800d61e:	f002 fa87 	bl	800fb30 <rcutils_reset_error>
 800d622:	9803      	ldr	r0, [sp, #12]
 800d624:	b020      	add	sp, #128	@ 0x80
 800d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62a:	200b      	movs	r0, #11
 800d62c:	b020      	add	sp, #128	@ 0x80
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	200b      	movs	r0, #11
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	0801bf38 	.word	0x0801bf38

0800d63c <rclc_subscription_init_default>:
 800d63c:	b368      	cbz	r0, 800d69a <rclc_subscription_init_default+0x5e>
 800d63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d642:	460d      	mov	r5, r1
 800d644:	b0a2      	sub	sp, #136	@ 0x88
 800d646:	b321      	cbz	r1, 800d692 <rclc_subscription_init_default+0x56>
 800d648:	4616      	mov	r6, r2
 800d64a:	b312      	cbz	r2, 800d692 <rclc_subscription_init_default+0x56>
 800d64c:	461f      	mov	r7, r3
 800d64e:	b303      	cbz	r3, 800d692 <rclc_subscription_init_default+0x56>
 800d650:	4604      	mov	r4, r0
 800d652:	f001 f819 	bl	800e688 <rcl_get_zero_initialized_subscription>
 800d656:	f10d 0810 	add.w	r8, sp, #16
 800d65a:	6020      	str	r0, [r4, #0]
 800d65c:	4640      	mov	r0, r8
 800d65e:	f001 f8c1 	bl	800e7e4 <rcl_subscription_get_default_options>
 800d662:	490f      	ldr	r1, [pc, #60]	@ (800d6a0 <rclc_subscription_init_default+0x64>)
 800d664:	2250      	movs	r2, #80	@ 0x50
 800d666:	4640      	mov	r0, r8
 800d668:	f00c f995 	bl	8019996 <memcpy>
 800d66c:	f8cd 8000 	str.w	r8, [sp]
 800d670:	463b      	mov	r3, r7
 800d672:	4632      	mov	r2, r6
 800d674:	4629      	mov	r1, r5
 800d676:	4620      	mov	r0, r4
 800d678:	f001 f80c 	bl	800e694 <rcl_subscription_init>
 800d67c:	b910      	cbnz	r0, 800d684 <rclc_subscription_init_default+0x48>
 800d67e:	b022      	add	sp, #136	@ 0x88
 800d680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d684:	9003      	str	r0, [sp, #12]
 800d686:	f002 fa53 	bl	800fb30 <rcutils_reset_error>
 800d68a:	9803      	ldr	r0, [sp, #12]
 800d68c:	b022      	add	sp, #136	@ 0x88
 800d68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d692:	200b      	movs	r0, #11
 800d694:	b022      	add	sp, #136	@ 0x88
 800d696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d69a:	200b      	movs	r0, #11
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	0801bf88 	.word	0x0801bf88

0800d6a4 <rcl_init>:
 800d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	1e05      	subs	r5, r0, #0
 800d6aa:	b0a7      	sub	sp, #156	@ 0x9c
 800d6ac:	460e      	mov	r6, r1
 800d6ae:	4690      	mov	r8, r2
 800d6b0:	461f      	mov	r7, r3
 800d6b2:	f340 809d 	ble.w	800d7f0 <rcl_init+0x14c>
 800d6b6:	2900      	cmp	r1, #0
 800d6b8:	f000 809d 	beq.w	800d7f6 <rcl_init+0x152>
 800d6bc:	f1a1 0e04 	sub.w	lr, r1, #4
 800d6c0:	f04f 0c00 	mov.w	ip, #0
 800d6c4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800d6c8:	f10c 0c01 	add.w	ip, ip, #1
 800d6cc:	2c00      	cmp	r4, #0
 800d6ce:	f000 8092 	beq.w	800d7f6 <rcl_init+0x152>
 800d6d2:	4565      	cmp	r5, ip
 800d6d4:	d1f6      	bne.n	800d6c4 <rcl_init+0x20>
 800d6d6:	f1b8 0f00 	cmp.w	r8, #0
 800d6da:	f000 808c 	beq.w	800d7f6 <rcl_init+0x152>
 800d6de:	f8d8 4000 	ldr.w	r4, [r8]
 800d6e2:	2c00      	cmp	r4, #0
 800d6e4:	f000 8087 	beq.w	800d7f6 <rcl_init+0x152>
 800d6e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6ea:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 800d6ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	f8cc 3000 	str.w	r3, [ip]
 800d6f8:	a821      	add	r0, sp, #132	@ 0x84
 800d6fa:	f002 f937 	bl	800f96c <rcutils_allocator_is_valid>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d079      	beq.n	800d7f6 <rcl_init+0x152>
 800d702:	2f00      	cmp	r7, #0
 800d704:	d077      	beq.n	800d7f6 <rcl_init+0x152>
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d179      	bne.n	800d800 <rcl_init+0x15c>
 800d70c:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800d710:	2198      	movs	r1, #152	@ 0x98
 800d712:	2001      	movs	r0, #1
 800d714:	4798      	blx	r3
 800d716:	4604      	mov	r4, r0
 800d718:	6038      	str	r0, [r7, #0]
 800d71a:	2800      	cmp	r0, #0
 800d71c:	f000 80cd 	beq.w	800d8ba <rcl_init+0x216>
 800d720:	a802      	add	r0, sp, #8
 800d722:	f002 fceb 	bl	80100fc <rmw_get_zero_initialized_context>
 800d726:	a902      	add	r1, sp, #8
 800d728:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d72c:	2270      	movs	r2, #112	@ 0x70
 800d72e:	f00c f932 	bl	8019996 <memcpy>
 800d732:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 800d736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d73a:	f8d7 e000 	ldr.w	lr, [r7]
 800d73e:	4674      	mov	r4, lr
 800d740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d742:	f8dc 3000 	ldr.w	r3, [ip]
 800d746:	6023      	str	r3, [r4, #0]
 800d748:	f10e 0114 	add.w	r1, lr, #20
 800d74c:	4640      	mov	r0, r8
 800d74e:	f000 f967 	bl	800da20 <rcl_init_options_copy>
 800d752:	4604      	mov	r4, r0
 800d754:	2800      	cmp	r0, #0
 800d756:	d144      	bne.n	800d7e2 <rcl_init+0x13e>
 800d758:	f8d7 9000 	ldr.w	r9, [r7]
 800d75c:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800d760:	f8c9 0020 	str.w	r0, [r9, #32]
 800d764:	f8c9 5018 	str.w	r5, [r9, #24]
 800d768:	f8c9 a01c 	str.w	sl, [r9, #28]
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d04e      	beq.n	800d80e <rcl_init+0x16a>
 800d770:	2e00      	cmp	r6, #0
 800d772:	d04c      	beq.n	800d80e <rcl_init+0x16a>
 800d774:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800d778:	2104      	movs	r1, #4
 800d77a:	4628      	mov	r0, r5
 800d77c:	4798      	blx	r3
 800d77e:	f8c9 0020 	str.w	r0, [r9, #32]
 800d782:	f8d7 9000 	ldr.w	r9, [r7]
 800d786:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800d78a:	46cb      	mov	fp, r9
 800d78c:	b343      	cbz	r3, 800d7e0 <rcl_init+0x13c>
 800d78e:	2d01      	cmp	r5, #1
 800d790:	f17a 0300 	sbcs.w	r3, sl, #0
 800d794:	db3b      	blt.n	800d80e <rcl_init+0x16a>
 800d796:	2400      	movs	r4, #0
 800d798:	3e04      	subs	r6, #4
 800d79a:	46a1      	mov	r9, r4
 800d79c:	e00b      	b.n	800d7b6 <rcl_init+0x112>
 800d79e:	6831      	ldr	r1, [r6, #0]
 800d7a0:	f00c f8f9 	bl	8019996 <memcpy>
 800d7a4:	3401      	adds	r4, #1
 800d7a6:	f149 0900 	adc.w	r9, r9, #0
 800d7aa:	45ca      	cmp	sl, r9
 800d7ac:	bf08      	it	eq
 800d7ae:	42a5      	cmpeq	r5, r4
 800d7b0:	d02b      	beq.n	800d80a <rcl_init+0x166>
 800d7b2:	f8d7 b000 	ldr.w	fp, [r7]
 800d7b6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800d7ba:	f7f2 fd69 	bl	8000290 <strlen>
 800d7be:	1c42      	adds	r2, r0, #1
 800d7c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7c2:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800d7c4:	f8db b020 	ldr.w	fp, [fp, #32]
 800d7c8:	9201      	str	r2, [sp, #4]
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	4798      	blx	r3
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800d7d4:	6a1b      	ldr	r3, [r3, #32]
 800d7d6:	9a01      	ldr	r2, [sp, #4]
 800d7d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d1de      	bne.n	800d79e <rcl_init+0xfa>
 800d7e0:	240a      	movs	r4, #10
 800d7e2:	4638      	mov	r0, r7
 800d7e4:	f7ff fe96 	bl	800d514 <__cleanup_context>
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	b027      	add	sp, #156	@ 0x9c
 800d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f0:	2900      	cmp	r1, #0
 800d7f2:	f43f af70 	beq.w	800d6d6 <rcl_init+0x32>
 800d7f6:	240b      	movs	r4, #11
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	b027      	add	sp, #156	@ 0x9c
 800d7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d800:	2464      	movs	r4, #100	@ 0x64
 800d802:	4620      	mov	r0, r4
 800d804:	b027      	add	sp, #156	@ 0x9c
 800d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	f8d7 9000 	ldr.w	r9, [r7]
 800d80e:	493f      	ldr	r1, [pc, #252]	@ (800d90c <rcl_init+0x268>)
 800d810:	680b      	ldr	r3, [r1, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	d04c      	beq.n	800d8b0 <rcl_init+0x20c>
 800d816:	600b      	str	r3, [r1, #0]
 800d818:	461a      	mov	r2, r3
 800d81a:	2000      	movs	r0, #0
 800d81c:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800d820:	607b      	str	r3, [r7, #4]
 800d822:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d824:	3301      	adds	r3, #1
 800d826:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800d82a:	d05c      	beq.n	800d8e6 <rcl_init+0x242>
 800d82c:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800d830:	2b00      	cmp	r3, #0
 800d832:	d044      	beq.n	800d8be <rcl_init+0x21a>
 800d834:	2b01      	cmp	r3, #1
 800d836:	d04e      	beq.n	800d8d6 <rcl_init+0x232>
 800d838:	f8d8 3000 	ldr.w	r3, [r8]
 800d83c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d840:	f105 0634 	add.w	r6, r5, #52	@ 0x34
 800d844:	2b00      	cmp	r3, #0
 800d846:	d059      	beq.n	800d8fc <rcl_init+0x258>
 800d848:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d84a:	b953      	cbnz	r3, 800d862 <rcl_init+0x1be>
 800d84c:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 800d850:	2801      	cmp	r0, #1
 800d852:	d008      	beq.n	800d866 <rcl_init+0x1c2>
 800d854:	a921      	add	r1, sp, #132	@ 0x84
 800d856:	4630      	mov	r0, r6
 800d858:	f009 f8b2 	bl	80169c0 <rcl_get_discovery_static_peers>
 800d85c:	4604      	mov	r4, r0
 800d85e:	2800      	cmp	r0, #0
 800d860:	d1bf      	bne.n	800d7e2 <rcl_init+0x13e>
 800d862:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 800d866:	f009 f8a1 	bl	80169ac <rcl_automatic_discovery_range_to_string>
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	aa20      	add	r2, sp, #128	@ 0x80
 800d870:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d872:	a91f      	add	r1, sp, #124	@ 0x7c
 800d874:	f001 fa56 	bl	800ed24 <rcl_validate_enclave_name>
 800d878:	4604      	mov	r4, r0
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d1b1      	bne.n	800d7e2 <rcl_init+0x13e>
 800d87e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d880:	bb7b      	cbnz	r3, 800d8e2 <rcl_init+0x23e>
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	694b      	ldr	r3, [r1, #20]
 800d886:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d888:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800d88c:	f000 fd84 	bl	800e398 <rcl_get_security_options_from_environment>
 800d890:	4604      	mov	r4, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	d1a5      	bne.n	800d7e2 <rcl_init+0x13e>
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6948      	ldr	r0, [r1, #20]
 800d89a:	3128      	adds	r1, #40	@ 0x28
 800d89c:	3018      	adds	r0, #24
 800d89e:	f002 fda1 	bl	80103e4 <rmw_init>
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d0a7      	beq.n	800d7f8 <rcl_init+0x154>
 800d8a8:	f7ff fe10 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	e798      	b.n	800d7e2 <rcl_init+0x13e>
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	600a      	str	r2, [r1, #0]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	e7b0      	b.n	800d81c <rcl_init+0x178>
 800d8ba:	240a      	movs	r4, #10
 800d8bc:	e79c      	b.n	800d7f8 <rcl_init+0x154>
 800d8be:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800d8c2:	f000 f909 	bl	800dad8 <rcl_get_localhost_only>
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d18a      	bne.n	800d7e2 <rcl_init+0x13e>
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800d8d2:	6955      	ldr	r5, [r2, #20]
 800d8d4:	e7ae      	b.n	800d834 <rcl_init+0x190>
 800d8d6:	2002      	movs	r0, #2
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 800d8de:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800d8e0:	e7c1      	b.n	800d866 <rcl_init+0x1c2>
 800d8e2:	2401      	movs	r4, #1
 800d8e4:	e77d      	b.n	800d7e2 <rcl_init+0x13e>
 800d8e6:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d8ea:	f009 f8cf 	bl	8016a8c <rcl_get_default_domain_id>
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	f47f af76 	bne.w	800d7e2 <rcl_init+0x13e>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	695d      	ldr	r5, [r3, #20]
 800d8fa:	e797      	b.n	800d82c <rcl_init+0x188>
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f009 f813 	bl	8016928 <rcl_get_automatic_discovery_range>
 800d902:	4604      	mov	r4, r0
 800d904:	2800      	cmp	r0, #0
 800d906:	d09f      	beq.n	800d848 <rcl_init+0x1a4>
 800d908:	e76b      	b.n	800d7e2 <rcl_init+0x13e>
 800d90a:	bf00      	nop
 800d90c:	2000fb74 	.word	0x2000fb74

0800d910 <rcl_get_zero_initialized_init_options>:
 800d910:	2000      	movs	r0, #0
 800d912:	4770      	bx	lr

0800d914 <rcl_init_options_init>:
 800d914:	b084      	sub	sp, #16
 800d916:	b570      	push	{r4, r5, r6, lr}
 800d918:	b09e      	sub	sp, #120	@ 0x78
 800d91a:	ad23      	add	r5, sp, #140	@ 0x8c
 800d91c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d920:	2800      	cmp	r0, #0
 800d922:	d046      	beq.n	800d9b2 <rcl_init_options_init+0x9e>
 800d924:	6803      	ldr	r3, [r0, #0]
 800d926:	4604      	mov	r4, r0
 800d928:	b133      	cbz	r3, 800d938 <rcl_init_options_init+0x24>
 800d92a:	2564      	movs	r5, #100	@ 0x64
 800d92c:	4628      	mov	r0, r5
 800d92e:	b01e      	add	sp, #120	@ 0x78
 800d930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d934:	b004      	add	sp, #16
 800d936:	4770      	bx	lr
 800d938:	4628      	mov	r0, r5
 800d93a:	f002 f817 	bl	800f96c <rcutils_allocator_is_valid>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d037      	beq.n	800d9b2 <rcl_init_options_init+0x9e>
 800d942:	46ae      	mov	lr, r5
 800d944:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d948:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800d94c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d950:	f8de 3000 	ldr.w	r3, [lr]
 800d954:	f8cc 3000 	str.w	r3, [ip]
 800d958:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800d95a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d95c:	2070      	movs	r0, #112	@ 0x70
 800d95e:	4798      	blx	r3
 800d960:	4606      	mov	r6, r0
 800d962:	6020      	str	r0, [r4, #0]
 800d964:	b338      	cbz	r0, 800d9b6 <rcl_init_options_init+0xa2>
 800d966:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800d96a:	4686      	mov	lr, r0
 800d96c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d970:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d974:	f8dc 3000 	ldr.w	r3, [ip]
 800d978:	f8ce 3000 	str.w	r3, [lr]
 800d97c:	a802      	add	r0, sp, #8
 800d97e:	f002 fbcd 	bl	801011c <rmw_get_zero_initialized_init_options>
 800d982:	2258      	movs	r2, #88	@ 0x58
 800d984:	a902      	add	r1, sp, #8
 800d986:	f106 0018 	add.w	r0, r6, #24
 800d98a:	f00c f804 	bl	8019996 <memcpy>
 800d98e:	ab26      	add	r3, sp, #152	@ 0x98
 800d990:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d994:	6826      	ldr	r6, [r4, #0]
 800d996:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d99a:	f106 0018 	add.w	r0, r6, #24
 800d99e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800d9a2:	f002 fc4d 	bl	8010240 <rmw_init_options_init>
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	b938      	cbnz	r0, 800d9ba <rcl_init_options_init+0xa6>
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800d9b0:	e7bc      	b.n	800d92c <rcl_init_options_init+0x18>
 800d9b2:	250b      	movs	r5, #11
 800d9b4:	e7ba      	b.n	800d92c <rcl_init_options_init+0x18>
 800d9b6:	250a      	movs	r5, #10
 800d9b8:	e7b8      	b.n	800d92c <rcl_init_options_init+0x18>
 800d9ba:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800d9bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d9be:	6820      	ldr	r0, [r4, #0]
 800d9c0:	4798      	blx	r3
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	f7ff fd82 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	e7af      	b.n	800d92c <rcl_init_options_init+0x18>

0800d9cc <rcl_init_options_fini>:
 800d9cc:	b530      	push	{r4, r5, lr}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	b1f0      	cbz	r0, 800da10 <rcl_init_options_fini+0x44>
 800d9d2:	6803      	ldr	r3, [r0, #0]
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	b1db      	cbz	r3, 800da10 <rcl_init_options_fini+0x44>
 800d9d8:	469c      	mov	ip, r3
 800d9da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9de:	f10d 0e04 	add.w	lr, sp, #4
 800d9e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d9e6:	f8dc 3000 	ldr.w	r3, [ip]
 800d9ea:	f8ce 3000 	str.w	r3, [lr]
 800d9ee:	a801      	add	r0, sp, #4
 800d9f0:	f001 ffbc 	bl	800f96c <rcutils_allocator_is_valid>
 800d9f4:	b160      	cbz	r0, 800da10 <rcl_init_options_fini+0x44>
 800d9f6:	6820      	ldr	r0, [r4, #0]
 800d9f8:	3018      	adds	r0, #24
 800d9fa:	f002 fcbd 	bl	8010378 <rmw_init_options_fini>
 800d9fe:	4605      	mov	r5, r0
 800da00:	b950      	cbnz	r0, 800da18 <rcl_init_options_fini+0x4c>
 800da02:	6820      	ldr	r0, [r4, #0]
 800da04:	9b02      	ldr	r3, [sp, #8]
 800da06:	9905      	ldr	r1, [sp, #20]
 800da08:	4798      	blx	r3
 800da0a:	4628      	mov	r0, r5
 800da0c:	b007      	add	sp, #28
 800da0e:	bd30      	pop	{r4, r5, pc}
 800da10:	250b      	movs	r5, #11
 800da12:	4628      	mov	r0, r5
 800da14:	b007      	add	sp, #28
 800da16:	bd30      	pop	{r4, r5, pc}
 800da18:	f7ff fd58 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800da1c:	4605      	mov	r5, r0
 800da1e:	e7f8      	b.n	800da12 <rcl_init_options_fini+0x46>

0800da20 <rcl_init_options_copy>:
 800da20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da22:	b09d      	sub	sp, #116	@ 0x74
 800da24:	2800      	cmp	r0, #0
 800da26:	d04a      	beq.n	800dabe <rcl_init_options_copy+0x9e>
 800da28:	4604      	mov	r4, r0
 800da2a:	6800      	ldr	r0, [r0, #0]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d046      	beq.n	800dabe <rcl_init_options_copy+0x9e>
 800da30:	460d      	mov	r5, r1
 800da32:	f001 ff9b 	bl	800f96c <rcutils_allocator_is_valid>
 800da36:	2800      	cmp	r0, #0
 800da38:	d041      	beq.n	800dabe <rcl_init_options_copy+0x9e>
 800da3a:	2d00      	cmp	r5, #0
 800da3c:	d03f      	beq.n	800dabe <rcl_init_options_copy+0x9e>
 800da3e:	682b      	ldr	r3, [r5, #0]
 800da40:	b11b      	cbz	r3, 800da4a <rcl_init_options_copy+0x2a>
 800da42:	2464      	movs	r4, #100	@ 0x64
 800da44:	4620      	mov	r0, r4
 800da46:	b01d      	add	sp, #116	@ 0x74
 800da48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da4a:	6826      	ldr	r6, [r4, #0]
 800da4c:	46b6      	mov	lr, r6
 800da4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da52:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800da56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da5a:	f8de 3000 	ldr.w	r3, [lr]
 800da5e:	6837      	ldr	r7, [r6, #0]
 800da60:	f8cc 3000 	str.w	r3, [ip]
 800da64:	4619      	mov	r1, r3
 800da66:	2070      	movs	r0, #112	@ 0x70
 800da68:	47b8      	blx	r7
 800da6a:	4606      	mov	r6, r0
 800da6c:	6028      	str	r0, [r5, #0]
 800da6e:	b350      	cbz	r0, 800dac6 <rcl_init_options_copy+0xa6>
 800da70:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800da74:	4686      	mov	lr, r0
 800da76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800da7e:	f8dc 3000 	ldr.w	r3, [ip]
 800da82:	f8ce 3000 	str.w	r3, [lr]
 800da86:	4668      	mov	r0, sp
 800da88:	f002 fb48 	bl	801011c <rmw_get_zero_initialized_init_options>
 800da8c:	2258      	movs	r2, #88	@ 0x58
 800da8e:	4669      	mov	r1, sp
 800da90:	f106 0018 	add.w	r0, r6, #24
 800da94:	f00b ff7f 	bl	8019996 <memcpy>
 800da98:	6820      	ldr	r0, [r4, #0]
 800da9a:	6829      	ldr	r1, [r5, #0]
 800da9c:	3018      	adds	r0, #24
 800da9e:	3118      	adds	r1, #24
 800daa0:	f002 fc36 	bl	8010310 <rmw_init_options_copy>
 800daa4:	4604      	mov	r4, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d0cc      	beq.n	800da44 <rcl_init_options_copy+0x24>
 800daaa:	f002 f829 	bl	800fb00 <rcutils_get_error_string>
 800daae:	f002 f83f 	bl	800fb30 <rcutils_reset_error>
 800dab2:	4628      	mov	r0, r5
 800dab4:	f7ff ff8a 	bl	800d9cc <rcl_init_options_fini>
 800dab8:	b138      	cbz	r0, 800daca <rcl_init_options_copy+0xaa>
 800daba:	4604      	mov	r4, r0
 800dabc:	e7c2      	b.n	800da44 <rcl_init_options_copy+0x24>
 800dabe:	240b      	movs	r4, #11
 800dac0:	4620      	mov	r0, r4
 800dac2:	b01d      	add	sp, #116	@ 0x74
 800dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac6:	240a      	movs	r4, #10
 800dac8:	e7bc      	b.n	800da44 <rcl_init_options_copy+0x24>
 800daca:	4620      	mov	r0, r4
 800dacc:	b01d      	add	sp, #116	@ 0x74
 800dace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dad2:	f7ff bcfb 	b.w	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800dad6:	bf00      	nop

0800dad8 <rcl_get_localhost_only>:
 800dad8:	b510      	push	{r4, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	2300      	movs	r3, #0
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	b1c0      	cbz	r0, 800db14 <rcl_get_localhost_only+0x3c>
 800dae2:	4604      	mov	r4, r0
 800dae4:	a901      	add	r1, sp, #4
 800dae6:	480d      	ldr	r0, [pc, #52]	@ (800db1c <rcl_get_localhost_only+0x44>)
 800dae8:	f001 fff2 	bl	800fad0 <rcutils_get_env>
 800daec:	b110      	cbz	r0, 800daf4 <rcl_get_localhost_only+0x1c>
 800daee:	2001      	movs	r0, #1
 800daf0:	b002      	add	sp, #8
 800daf2:	bd10      	pop	{r4, pc}
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	b10b      	cbz	r3, 800dafc <rcl_get_localhost_only+0x24>
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	b923      	cbnz	r3, 800db06 <rcl_get_localhost_only+0x2e>
 800dafc:	2300      	movs	r3, #0
 800dafe:	4618      	mov	r0, r3
 800db00:	7023      	strb	r3, [r4, #0]
 800db02:	b002      	add	sp, #8
 800db04:	bd10      	pop	{r4, pc}
 800db06:	2b31      	cmp	r3, #49	@ 0x31
 800db08:	bf0c      	ite	eq
 800db0a:	2301      	moveq	r3, #1
 800db0c:	2302      	movne	r3, #2
 800db0e:	7023      	strb	r3, [r4, #0]
 800db10:	b002      	add	sp, #8
 800db12:	bd10      	pop	{r4, pc}
 800db14:	200b      	movs	r0, #11
 800db16:	b002      	add	sp, #8
 800db18:	bd10      	pop	{r4, pc}
 800db1a:	bf00      	nop
 800db1c:	0801bfd8 	.word	0x0801bfd8

0800db20 <rcl_get_zero_initialized_node>:
 800db20:	4a03      	ldr	r2, [pc, #12]	@ (800db30 <rcl_get_zero_initialized_node+0x10>)
 800db22:	4603      	mov	r3, r0
 800db24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db28:	e883 0003 	stmia.w	r3, {r0, r1}
 800db2c:	4618      	mov	r0, r3
 800db2e:	4770      	bx	lr
 800db30:	0801c024 	.word	0x0801c024

0800db34 <rcl_node_init>:
 800db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db38:	b0ab      	sub	sp, #172	@ 0xac
 800db3a:	4604      	mov	r4, r0
 800db3c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 800db40:	a825      	add	r0, sp, #148	@ 0x94
 800db42:	460e      	mov	r6, r1
 800db44:	4615      	mov	r5, r2
 800db46:	461f      	mov	r7, r3
 800db48:	f009 f9c8 	bl	8016edc <rcl_guard_condition_get_default_options>
 800db4c:	f1b8 0f00 	cmp.w	r8, #0
 800db50:	f000 80e6 	beq.w	800dd20 <rcl_node_init+0x1ec>
 800db54:	4640      	mov	r0, r8
 800db56:	f001 ff09 	bl	800f96c <rcutils_allocator_is_valid>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	f000 80e0 	beq.w	800dd20 <rcl_node_init+0x1ec>
 800db60:	2e00      	cmp	r6, #0
 800db62:	f000 80dd 	beq.w	800dd20 <rcl_node_init+0x1ec>
 800db66:	2d00      	cmp	r5, #0
 800db68:	f000 80da 	beq.w	800dd20 <rcl_node_init+0x1ec>
 800db6c:	2c00      	cmp	r4, #0
 800db6e:	f000 80d7 	beq.w	800dd20 <rcl_node_init+0x1ec>
 800db72:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800db76:	f1b9 0f00 	cmp.w	r9, #0
 800db7a:	f040 80fd 	bne.w	800dd78 <rcl_node_init+0x244>
 800db7e:	2f00      	cmp	r7, #0
 800db80:	f000 80ce 	beq.w	800dd20 <rcl_node_init+0x1ec>
 800db84:	4638      	mov	r0, r7
 800db86:	f7ff fcbf 	bl	800d508 <rcl_context_is_valid>
 800db8a:	4682      	mov	sl, r0
 800db8c:	2800      	cmp	r0, #0
 800db8e:	f000 80cd 	beq.w	800dd2c <rcl_node_init+0x1f8>
 800db92:	464a      	mov	r2, r9
 800db94:	a924      	add	r1, sp, #144	@ 0x90
 800db96:	4630      	mov	r0, r6
 800db98:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 800db9c:	f004 fa26 	bl	8011fec <rmw_validate_node_name>
 800dba0:	4681      	mov	r9, r0
 800dba2:	2800      	cmp	r0, #0
 800dba4:	f040 80be 	bne.w	800dd24 <rcl_node_init+0x1f0>
 800dba8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	f040 80f0 	bne.w	800dd90 <rcl_node_init+0x25c>
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f7f2 fb6d 	bl	8000290 <strlen>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	f040 80bb 	bne.w	800dd32 <rcl_node_init+0x1fe>
 800dbbc:	4d7c      	ldr	r5, [pc, #496]	@ (800ddb0 <rcl_node_init+0x27c>)
 800dbbe:	a924      	add	r1, sp, #144	@ 0x90
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f004 f9f4 	bl	8011fb0 <rmw_validate_namespace>
 800dbc8:	4681      	mov	r9, r0
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f040 80aa 	bne.w	800dd24 <rcl_node_init+0x1f0>
 800dbd0:	4682      	mov	sl, r0
 800dbd2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f040 80e0 	bne.w	800dd9a <rcl_node_init+0x266>
 800dbda:	f8d8 3000 	ldr.w	r3, [r8]
 800dbde:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbe2:	2080      	movs	r0, #128	@ 0x80
 800dbe4:	4798      	blx	r3
 800dbe6:	4681      	mov	r9, r0
 800dbe8:	6060      	str	r0, [r4, #4]
 800dbea:	2800      	cmp	r0, #0
 800dbec:	f000 80ca 	beq.w	800dd84 <rcl_node_init+0x250>
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800dbf8:	e9c9 231e 	strd	r2, r3, [r9, #120]	@ 0x78
 800dbfc:	a808      	add	r0, sp, #32
 800dbfe:	f000 f927 	bl	800de50 <rcl_node_get_default_options>
 800dc02:	a908      	add	r1, sp, #32
 800dc04:	4648      	mov	r0, r9
 800dc06:	2270      	movs	r2, #112	@ 0x70
 800dc08:	f00b fec5 	bl	8019996 <memcpy>
 800dc0c:	6861      	ldr	r1, [r4, #4]
 800dc0e:	6027      	str	r7, [r4, #0]
 800dc10:	4640      	mov	r0, r8
 800dc12:	f000 f92b 	bl	800de6c <rcl_node_options_copy>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d158      	bne.n	800dccc <rcl_node_init+0x198>
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f7f2 fb38 	bl	8000290 <strlen>
 800dc20:	4428      	add	r0, r5
 800dc22:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800dc26:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800dc2a:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	bf0c      	ite	eq
 800dc34:	4b5f      	ldreq	r3, [pc, #380]	@ (800ddb4 <rcl_node_init+0x280>)
 800dc36:	4b60      	ldrne	r3, [pc, #384]	@ (800ddb8 <rcl_node_init+0x284>)
 800dc38:	9302      	str	r3, [sp, #8]
 800dc3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dc44:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dc48:	f001 ff9e 	bl	800fb88 <rcutils_format_string_limit>
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	f8c9 007c 	str.w	r0, [r9, #124]	@ 0x7c
 800dc52:	6818      	ldr	r0, [r3, #0]
 800dc54:	4631      	mov	r1, r6
 800dc56:	3028      	adds	r0, #40	@ 0x28
 800dc58:	462a      	mov	r2, r5
 800dc5a:	6866      	ldr	r6, [r4, #4]
 800dc5c:	f002 fda4 	bl	80107a8 <rmw_create_node>
 800dc60:	6863      	ldr	r3, [r4, #4]
 800dc62:	6730      	str	r0, [r6, #112]	@ 0x70
 800dc64:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d032      	beq.n	800dcd0 <rcl_node_init+0x19c>
 800dc6a:	f002 fe31 	bl	80108d0 <rmw_node_get_graph_guard_condition>
 800dc6e:	4681      	mov	r9, r0
 800dc70:	b360      	cbz	r0, 800dccc <rcl_node_init+0x198>
 800dc72:	f8d8 3000 	ldr.w	r3, [r8]
 800dc76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dc7a:	6866      	ldr	r6, [r4, #4]
 800dc7c:	2008      	movs	r0, #8
 800dc7e:	4798      	blx	r3
 800dc80:	6863      	ldr	r3, [r4, #4]
 800dc82:	6770      	str	r0, [r6, #116]	@ 0x74
 800dc84:	f8d3 b074 	ldr.w	fp, [r3, #116]	@ 0x74
 800dc88:	f1bb 0f00 	cmp.w	fp, #0
 800dc8c:	d020      	beq.n	800dcd0 <rcl_node_init+0x19c>
 800dc8e:	a806      	add	r0, sp, #24
 800dc90:	f009 f894 	bl	8016dbc <rcl_get_zero_initialized_guard_condition>
 800dc94:	a806      	add	r0, sp, #24
 800dc96:	c803      	ldmia	r0, {r0, r1}
 800dc98:	6863      	ldr	r3, [r4, #4]
 800dc9a:	46c4      	mov	ip, r8
 800dc9c:	f8d3 e074 	ldr.w	lr, [r3, #116]	@ 0x74
 800dca0:	e88b 0003 	stmia.w	fp, {r0, r1}
 800dca4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dca8:	ae25      	add	r6, sp, #148	@ 0x94
 800dcaa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dcac:	f8dc 3000 	ldr.w	r3, [ip]
 800dcb0:	6033      	str	r3, [r6, #0]
 800dcb2:	ab2a      	add	r3, sp, #168	@ 0xa8
 800dcb4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800dcb8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800dcc0:	463a      	mov	r2, r7
 800dcc2:	4670      	mov	r0, lr
 800dcc4:	f009 f884 	bl	8016dd0 <rcl_guard_condition_init_from_rmw>
 800dcc8:	4681      	mov	r9, r0
 800dcca:	b328      	cbz	r0, 800dd18 <rcl_node_init+0x1e4>
 800dccc:	6863      	ldr	r3, [r4, #4]
 800dcce:	b1f3      	cbz	r3, 800dd0e <rcl_node_init+0x1da>
 800dcd0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800dcd2:	b128      	cbz	r0, 800dce0 <rcl_node_init+0x1ac>
 800dcd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcd8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dcdc:	4798      	blx	r3
 800dcde:	6863      	ldr	r3, [r4, #4]
 800dce0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800dce2:	b110      	cbz	r0, 800dcea <rcl_node_init+0x1b6>
 800dce4:	f002 fd78 	bl	80107d8 <rmw_destroy_node>
 800dce8:	6863      	ldr	r3, [r4, #4]
 800dcea:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800dcec:	b148      	cbz	r0, 800dd02 <rcl_node_init+0x1ce>
 800dcee:	f009 f8cf 	bl	8016e90 <rcl_guard_condition_fini>
 800dcf2:	6863      	ldr	r3, [r4, #4]
 800dcf4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dcf8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800dcfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcfe:	4798      	blx	r3
 800dd00:	6863      	ldr	r3, [r4, #4]
 800dd02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd0c:	4798      	blx	r3
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e9c4 3300 	strd	r3, r3, [r4]
 800dd14:	f04f 0901 	mov.w	r9, #1
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	d125      	bne.n	800dd6a <rcl_node_init+0x236>
 800dd1e:	e001      	b.n	800dd24 <rcl_node_init+0x1f0>
 800dd20:	f04f 090b 	mov.w	r9, #11
 800dd24:	4648      	mov	r0, r9
 800dd26:	b02b      	add	sp, #172	@ 0xac
 800dd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800dd30:	e7f8      	b.n	800dd24 <rcl_node_init+0x1f0>
 800dd32:	782b      	ldrb	r3, [r5, #0]
 800dd34:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd36:	f43f af42 	beq.w	800dbbe <rcl_node_init+0x8a>
 800dd3a:	9503      	str	r5, [sp, #12]
 800dd3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	4b1e      	ldr	r3, [pc, #120]	@ (800ddbc <rcl_node_init+0x288>)
 800dd44:	9302      	str	r3, [sp, #8]
 800dd46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dd50:	f001 ff1a 	bl	800fb88 <rcutils_format_string_limit>
 800dd54:	4605      	mov	r5, r0
 800dd56:	b340      	cbz	r0, 800ddaa <rcl_node_init+0x276>
 800dd58:	2200      	movs	r2, #0
 800dd5a:	a924      	add	r1, sp, #144	@ 0x90
 800dd5c:	9224      	str	r2, [sp, #144]	@ 0x90
 800dd5e:	f004 f927 	bl	8011fb0 <rmw_validate_namespace>
 800dd62:	4681      	mov	r9, r0
 800dd64:	2800      	cmp	r0, #0
 800dd66:	f43f af34 	beq.w	800dbd2 <rcl_node_init+0x9e>
 800dd6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dd72:	4628      	mov	r0, r5
 800dd74:	4798      	blx	r3
 800dd76:	e7d5      	b.n	800dd24 <rcl_node_init+0x1f0>
 800dd78:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800dd7c:	4648      	mov	r0, r9
 800dd7e:	b02b      	add	sp, #172	@ 0xac
 800dd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd84:	f04f 090a 	mov.w	r9, #10
 800dd88:	f1ba 0f00 	cmp.w	sl, #0
 800dd8c:	d1ed      	bne.n	800dd6a <rcl_node_init+0x236>
 800dd8e:	e7c9      	b.n	800dd24 <rcl_node_init+0x1f0>
 800dd90:	f004 f97e 	bl	8012090 <rmw_node_name_validation_result_string>
 800dd94:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800dd98:	e7c4      	b.n	800dd24 <rcl_node_init+0x1f0>
 800dd9a:	f004 f91b 	bl	8011fd4 <rmw_namespace_validation_result_string>
 800dd9e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800dda2:	f1ba 0f00 	cmp.w	sl, #0
 800dda6:	d1e0      	bne.n	800dd6a <rcl_node_init+0x236>
 800dda8:	e7bc      	b.n	800dd24 <rcl_node_init+0x1f0>
 800ddaa:	f04f 090a 	mov.w	r9, #10
 800ddae:	e7b9      	b.n	800dd24 <rcl_node_init+0x1f0>
 800ddb0:	0801bff0 	.word	0x0801bff0
 800ddb4:	0801bff8 	.word	0x0801bff8
 800ddb8:	0801c000 	.word	0x0801c000
 800ddbc:	0801bff4 	.word	0x0801bff4

0800ddc0 <rcl_node_is_valid>:
 800ddc0:	b130      	cbz	r0, 800ddd0 <rcl_node_is_valid+0x10>
 800ddc2:	6843      	ldr	r3, [r0, #4]
 800ddc4:	b123      	cbz	r3, 800ddd0 <rcl_node_is_valid+0x10>
 800ddc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddc8:	b113      	cbz	r3, 800ddd0 <rcl_node_is_valid+0x10>
 800ddca:	6800      	ldr	r0, [r0, #0]
 800ddcc:	f7ff bb9c 	b.w	800d508 <rcl_context_is_valid>
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	4770      	bx	lr

0800ddd4 <rcl_node_get_name>:
 800ddd4:	b120      	cbz	r0, 800dde0 <rcl_node_get_name+0xc>
 800ddd6:	6840      	ldr	r0, [r0, #4]
 800ddd8:	b110      	cbz	r0, 800dde0 <rcl_node_get_name+0xc>
 800ddda:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800dddc:	b100      	cbz	r0, 800dde0 <rcl_node_get_name+0xc>
 800ddde:	6880      	ldr	r0, [r0, #8]
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop

0800dde4 <rcl_node_get_namespace>:
 800dde4:	b120      	cbz	r0, 800ddf0 <rcl_node_get_namespace+0xc>
 800dde6:	6840      	ldr	r0, [r0, #4]
 800dde8:	b110      	cbz	r0, 800ddf0 <rcl_node_get_namespace+0xc>
 800ddea:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800ddec:	b100      	cbz	r0, 800ddf0 <rcl_node_get_namespace+0xc>
 800ddee:	68c0      	ldr	r0, [r0, #12]
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop

0800ddf4 <rcl_node_get_options>:
 800ddf4:	b128      	cbz	r0, 800de02 <rcl_node_get_options+0xe>
 800ddf6:	6840      	ldr	r0, [r0, #4]
 800ddf8:	b118      	cbz	r0, 800de02 <rcl_node_get_options+0xe>
 800ddfa:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bf08      	it	eq
 800de00:	2000      	moveq	r0, #0
 800de02:	4770      	bx	lr

0800de04 <rcl_node_get_rmw_handle>:
 800de04:	b110      	cbz	r0, 800de0c <rcl_node_get_rmw_handle+0x8>
 800de06:	6840      	ldr	r0, [r0, #4]
 800de08:	b100      	cbz	r0, 800de0c <rcl_node_get_rmw_handle+0x8>
 800de0a:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop

0800de10 <rcl_get_disable_loaned_message>:
 800de10:	b510      	push	{r4, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	2300      	movs	r3, #0
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	b1a0      	cbz	r0, 800de44 <rcl_get_disable_loaned_message+0x34>
 800de1a:	4604      	mov	r4, r0
 800de1c:	a901      	add	r1, sp, #4
 800de1e:	480b      	ldr	r0, [pc, #44]	@ (800de4c <rcl_get_disable_loaned_message+0x3c>)
 800de20:	f001 fe56 	bl	800fad0 <rcutils_get_env>
 800de24:	b110      	cbz	r0, 800de2c <rcl_get_disable_loaned_message+0x1c>
 800de26:	2001      	movs	r0, #1
 800de28:	b002      	add	sp, #8
 800de2a:	bd10      	pop	{r4, pc}
 800de2c:	9a01      	ldr	r2, [sp, #4]
 800de2e:	7813      	ldrb	r3, [r2, #0]
 800de30:	3b31      	subs	r3, #49	@ 0x31
 800de32:	bf08      	it	eq
 800de34:	7853      	ldrbeq	r3, [r2, #1]
 800de36:	fab3 f383 	clz	r3, r3
 800de3a:	095b      	lsrs	r3, r3, #5
 800de3c:	2000      	movs	r0, #0
 800de3e:	7023      	strb	r3, [r4, #0]
 800de40:	b002      	add	sp, #8
 800de42:	bd10      	pop	{r4, pc}
 800de44:	200b      	movs	r0, #11
 800de46:	b002      	add	sp, #8
 800de48:	bd10      	pop	{r4, pc}
 800de4a:	bf00      	nop
 800de4c:	0801c008 	.word	0x0801c008

0800de50 <rcl_node_get_default_options>:
 800de50:	b510      	push	{r4, lr}
 800de52:	2270      	movs	r2, #112	@ 0x70
 800de54:	4604      	mov	r4, r0
 800de56:	2100      	movs	r1, #0
 800de58:	f00b fcbe 	bl	80197d8 <memset>
 800de5c:	4620      	mov	r0, r4
 800de5e:	f001 fd77 	bl	800f950 <rcutils_get_default_allocator>
 800de62:	2301      	movs	r3, #1
 800de64:	7523      	strb	r3, [r4, #20]
 800de66:	4620      	mov	r0, r4
 800de68:	bd10      	pop	{r4, pc}
 800de6a:	bf00      	nop

0800de6c <rcl_node_options_copy>:
 800de6c:	b1d0      	cbz	r0, 800dea4 <rcl_node_options_copy+0x38>
 800de6e:	b570      	push	{r4, r5, r6, lr}
 800de70:	460c      	mov	r4, r1
 800de72:	b1a9      	cbz	r1, 800dea0 <rcl_node_options_copy+0x34>
 800de74:	4288      	cmp	r0, r1
 800de76:	4684      	mov	ip, r0
 800de78:	d012      	beq.n	800dea0 <rcl_node_options_copy+0x34>
 800de7a:	4605      	mov	r5, r0
 800de7c:	8a86      	ldrh	r6, [r0, #20]
 800de7e:	468e      	mov	lr, r1
 800de80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	f8ce 3000 	str.w	r3, [lr]
 800de8c:	f10c 0118 	add.w	r1, ip, #24
 800de90:	2250      	movs	r2, #80	@ 0x50
 800de92:	82a6      	strh	r6, [r4, #20]
 800de94:	f104 0018 	add.w	r0, r4, #24
 800de98:	f00b fd7d 	bl	8019996 <memcpy>
 800de9c:	2000      	movs	r0, #0
 800de9e:	bd70      	pop	{r4, r5, r6, pc}
 800dea0:	200b      	movs	r0, #11
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	200b      	movs	r0, #11
 800dea6:	4770      	bx	lr

0800dea8 <rcl_node_resolve_name>:
 800dea8:	b082      	sub	sp, #8
 800deaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deae:	b091      	sub	sp, #68	@ 0x44
 800deb0:	ac1a      	add	r4, sp, #104	@ 0x68
 800deb2:	e884 000c 	stmia.w	r4, {r2, r3}
 800deb6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800deba:	2800      	cmp	r0, #0
 800debc:	d03b      	beq.n	800df36 <rcl_node_resolve_name+0x8e>
 800debe:	460c      	mov	r4, r1
 800dec0:	4605      	mov	r5, r0
 800dec2:	f7ff ff97 	bl	800ddf4 <rcl_node_get_options>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d037      	beq.n	800df3a <rcl_node_resolve_name+0x92>
 800deca:	4628      	mov	r0, r5
 800decc:	f7ff ff82 	bl	800ddd4 <rcl_node_get_name>
 800ded0:	4606      	mov	r6, r0
 800ded2:	4628      	mov	r0, r5
 800ded4:	f7ff ff86 	bl	800dde4 <rcl_node_get_namespace>
 800ded8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800dedc:	4681      	mov	r9, r0
 800dede:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dee2:	ad0b      	add	r5, sp, #44	@ 0x2c
 800dee4:	46ac      	mov	ip, r5
 800dee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800deea:	f8de 3000 	ldr.w	r3, [lr]
 800deee:	f8cc 3000 	str.w	r3, [ip]
 800def2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800def4:	b1fb      	cbz	r3, 800df36 <rcl_node_resolve_name+0x8e>
 800def6:	468a      	mov	sl, r1
 800def8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800defc:	f001 ffa6 	bl	800fe4c <rcutils_get_zero_initialized_string_map>
 800df00:	ab10      	add	r3, sp, #64	@ 0x40
 800df02:	9008      	str	r0, [sp, #32]
 800df04:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800df08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800df0c:	2100      	movs	r1, #0
 800df0e:	e895 000c 	ldmia.w	r5, {r2, r3}
 800df12:	a808      	add	r0, sp, #32
 800df14:	f001 ffec 	bl	800fef0 <rcutils_string_map_init>
 800df18:	4607      	mov	r7, r0
 800df1a:	b180      	cbz	r0, 800df3e <rcl_node_resolve_name+0x96>
 800df1c:	f001 fdf0 	bl	800fb00 <rcutils_get_error_string>
 800df20:	f001 fe06 	bl	800fb30 <rcutils_reset_error>
 800df24:	2f0a      	cmp	r7, #10
 800df26:	bf18      	it	ne
 800df28:	2701      	movne	r7, #1
 800df2a:	4638      	mov	r0, r7
 800df2c:	b011      	add	sp, #68	@ 0x44
 800df2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df32:	b002      	add	sp, #8
 800df34:	4770      	bx	lr
 800df36:	270b      	movs	r7, #11
 800df38:	e7f7      	b.n	800df2a <rcl_node_resolve_name+0x82>
 800df3a:	2701      	movs	r7, #1
 800df3c:	e7f5      	b.n	800df2a <rcl_node_resolve_name+0x82>
 800df3e:	9009      	str	r0, [sp, #36]	@ 0x24
 800df40:	9007      	str	r0, [sp, #28]
 800df42:	a808      	add	r0, sp, #32
 800df44:	f008 ff34 	bl	8016db0 <rcl_get_default_topic_name_substitutions>
 800df48:	4607      	mov	r7, r0
 800df4a:	b1a8      	cbz	r0, 800df78 <rcl_node_resolve_name+0xd0>
 800df4c:	280a      	cmp	r0, #10
 800df4e:	9c07      	ldr	r4, [sp, #28]
 800df50:	d000      	beq.n	800df54 <rcl_node_resolve_name+0xac>
 800df52:	2701      	movs	r7, #1
 800df54:	a808      	add	r0, sp, #32
 800df56:	f002 f809 	bl	800ff6c <rcutils_string_map_fini>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d13d      	bne.n	800dfda <rcl_node_resolve_name+0x132>
 800df5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df60:	4659      	mov	r1, fp
 800df62:	47d0      	blx	sl
 800df64:	4659      	mov	r1, fp
 800df66:	4620      	mov	r0, r4
 800df68:	47d0      	blx	sl
 800df6a:	f1b8 0f00 	cmp.w	r8, #0
 800df6e:	d0dc      	beq.n	800df2a <rcl_node_resolve_name+0x82>
 800df70:	2f67      	cmp	r7, #103	@ 0x67
 800df72:	bf08      	it	eq
 800df74:	2768      	moveq	r7, #104	@ 0x68
 800df76:	e7d8      	b.n	800df2a <rcl_node_resolve_name+0x82>
 800df78:	ab09      	add	r3, sp, #36	@ 0x24
 800df7a:	9305      	str	r3, [sp, #20]
 800df7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df7e:	46ec      	mov	ip, sp
 800df80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df84:	682b      	ldr	r3, [r5, #0]
 800df86:	f8cc 3000 	str.w	r3, [ip]
 800df8a:	464a      	mov	r2, r9
 800df8c:	4631      	mov	r1, r6
 800df8e:	4620      	mov	r0, r4
 800df90:	ab08      	add	r3, sp, #32
 800df92:	f008 fdaf 	bl	8016af4 <rcl_expand_topic_name>
 800df96:	4607      	mov	r7, r0
 800df98:	b9b8      	cbnz	r0, 800dfca <rcl_node_resolve_name+0x122>
 800df9a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800df9c:	9009      	str	r0, [sp, #36]	@ 0x24
 800df9e:	4602      	mov	r2, r0
 800dfa0:	a90a      	add	r1, sp, #40	@ 0x28
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f003 ff40 	bl	8011e28 <rmw_validate_full_topic_name>
 800dfa8:	b988      	cbnz	r0, 800dfce <rcl_node_resolve_name+0x126>
 800dfaa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dfac:	b9d5      	cbnz	r5, 800dfe4 <rcl_node_resolve_name+0x13c>
 800dfae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dfb0:	a808      	add	r0, sp, #32
 800dfb2:	601c      	str	r4, [r3, #0]
 800dfb4:	f001 ffda 	bl	800ff6c <rcutils_string_map_fini>
 800dfb8:	4607      	mov	r7, r0
 800dfba:	b1a8      	cbz	r0, 800dfe8 <rcl_node_resolve_name+0x140>
 800dfbc:	f001 fda0 	bl	800fb00 <rcutils_get_error_string>
 800dfc0:	462c      	mov	r4, r5
 800dfc2:	f001 fdb5 	bl	800fb30 <rcutils_reset_error>
 800dfc6:	2701      	movs	r7, #1
 800dfc8:	e7c9      	b.n	800df5e <rcl_node_resolve_name+0xb6>
 800dfca:	9c07      	ldr	r4, [sp, #28]
 800dfcc:	e7c2      	b.n	800df54 <rcl_node_resolve_name+0xac>
 800dfce:	f001 fd97 	bl	800fb00 <rcutils_get_error_string>
 800dfd2:	2701      	movs	r7, #1
 800dfd4:	f001 fdac 	bl	800fb30 <rcutils_reset_error>
 800dfd8:	e7bc      	b.n	800df54 <rcl_node_resolve_name+0xac>
 800dfda:	f001 fd91 	bl	800fb00 <rcutils_get_error_string>
 800dfde:	f001 fda7 	bl	800fb30 <rcutils_reset_error>
 800dfe2:	e7bc      	b.n	800df5e <rcl_node_resolve_name+0xb6>
 800dfe4:	2767      	movs	r7, #103	@ 0x67
 800dfe6:	e7b5      	b.n	800df54 <rcl_node_resolve_name+0xac>
 800dfe8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfea:	4659      	mov	r1, fp
 800dfec:	47d0      	blx	sl
 800dfee:	4659      	mov	r1, fp
 800dff0:	4638      	mov	r0, r7
 800dff2:	47d0      	blx	sl
 800dff4:	e799      	b.n	800df2a <rcl_node_resolve_name+0x82>
 800dff6:	bf00      	nop

0800dff8 <rcl_get_zero_initialized_publisher>:
 800dff8:	4b01      	ldr	r3, [pc, #4]	@ (800e000 <rcl_get_zero_initialized_publisher+0x8>)
 800dffa:	6818      	ldr	r0, [r3, #0]
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	0801c02c 	.word	0x0801c02c

0800e004 <rcl_publisher_init>:
 800e004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e008:	b088      	sub	sp, #32
 800e00a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	d06a      	beq.n	800e0e6 <rcl_publisher_init+0xe2>
 800e010:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e014:	4604      	mov	r4, r0
 800e016:	4648      	mov	r0, r9
 800e018:	460e      	mov	r6, r1
 800e01a:	4690      	mov	r8, r2
 800e01c:	461f      	mov	r7, r3
 800e01e:	f001 fca5 	bl	800f96c <rcutils_allocator_is_valid>
 800e022:	2800      	cmp	r0, #0
 800e024:	d05f      	beq.n	800e0e6 <rcl_publisher_init+0xe2>
 800e026:	2c00      	cmp	r4, #0
 800e028:	d05d      	beq.n	800e0e6 <rcl_publisher_init+0xe2>
 800e02a:	f8d4 a000 	ldr.w	sl, [r4]
 800e02e:	f1ba 0f00 	cmp.w	sl, #0
 800e032:	d004      	beq.n	800e03e <rcl_publisher_init+0x3a>
 800e034:	2764      	movs	r7, #100	@ 0x64
 800e036:	4638      	mov	r0, r7
 800e038:	b008      	add	sp, #32
 800e03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff febe 	bl	800ddc0 <rcl_node_is_valid>
 800e044:	2800      	cmp	r0, #0
 800e046:	d053      	beq.n	800e0f0 <rcl_publisher_init+0xec>
 800e048:	f1b8 0f00 	cmp.w	r8, #0
 800e04c:	d04b      	beq.n	800e0e6 <rcl_publisher_init+0xe2>
 800e04e:	2f00      	cmp	r7, #0
 800e050:	d049      	beq.n	800e0e6 <rcl_publisher_init+0xe2>
 800e052:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e056:	aa07      	add	r2, sp, #28
 800e058:	9205      	str	r2, [sp, #20]
 800e05a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e05e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e062:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e066:	f8cd a01c 	str.w	sl, [sp, #28]
 800e06a:	4639      	mov	r1, r7
 800e06c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e070:	4630      	mov	r0, r6
 800e072:	f7ff ff19 	bl	800dea8 <rcl_node_resolve_name>
 800e076:	4607      	mov	r7, r0
 800e078:	2800      	cmp	r0, #0
 800e07a:	d150      	bne.n	800e11e <rcl_publisher_init+0x11a>
 800e07c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800e080:	21c8      	movs	r1, #200	@ 0xc8
 800e082:	2001      	movs	r0, #1
 800e084:	4798      	blx	r3
 800e086:	6020      	str	r0, [r4, #0]
 800e088:	2800      	cmp	r0, #0
 800e08a:	d04e      	beq.n	800e12a <rcl_publisher_init+0x126>
 800e08c:	4630      	mov	r0, r6
 800e08e:	f7ff feb9 	bl	800de04 <rcl_node_get_rmw_handle>
 800e092:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	9a07      	ldr	r2, [sp, #28]
 800e09a:	6827      	ldr	r7, [r4, #0]
 800e09c:	462b      	mov	r3, r5
 800e09e:	4641      	mov	r1, r8
 800e0a0:	f002 fc80 	bl	80109a4 <rmw_create_publisher>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e0aa:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e0ae:	b370      	cbz	r0, 800e10e <rcl_publisher_init+0x10a>
 800e0b0:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e0b4:	f002 fd54 	bl	8010b60 <rmw_publisher_get_actual_qos>
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	4607      	mov	r7, r0
 800e0bc:	b9d0      	cbnz	r0, 800e0f4 <rcl_publisher_init+0xf0>
 800e0be:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e0c2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	2270      	movs	r2, #112	@ 0x70
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f00b fc63 	bl	8019996 <memcpy>
 800e0d0:	6832      	ldr	r2, [r6, #0]
 800e0d2:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e0d6:	9807      	ldr	r0, [sp, #28]
 800e0d8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e0da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e0dc:	4798      	blx	r3
 800e0de:	4638      	mov	r0, r7
 800e0e0:	b008      	add	sp, #32
 800e0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e6:	270b      	movs	r7, #11
 800e0e8:	4638      	mov	r0, r7
 800e0ea:	b008      	add	sp, #32
 800e0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f0:	27c8      	movs	r7, #200	@ 0xc8
 800e0f2:	e7a0      	b.n	800e036 <rcl_publisher_init+0x32>
 800e0f4:	b18b      	cbz	r3, 800e11a <rcl_publisher_init+0x116>
 800e0f6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e0fa:	b142      	cbz	r2, 800e10e <rcl_publisher_init+0x10a>
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f7ff fe81 	bl	800de04 <rcl_node_get_rmw_handle>
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e108:	f002 fd3a 	bl	8010b80 <rmw_destroy_publisher>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e110:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e112:	4618      	mov	r0, r3
 800e114:	4790      	blx	r2
 800e116:	2300      	movs	r3, #0
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	2701      	movs	r7, #1
 800e11c:	e7db      	b.n	800e0d6 <rcl_publisher_init+0xd2>
 800e11e:	2867      	cmp	r0, #103	@ 0x67
 800e120:	d0d9      	beq.n	800e0d6 <rcl_publisher_init+0xd2>
 800e122:	2869      	cmp	r0, #105	@ 0x69
 800e124:	d003      	beq.n	800e12e <rcl_publisher_init+0x12a>
 800e126:	280a      	cmp	r0, #10
 800e128:	d1f7      	bne.n	800e11a <rcl_publisher_init+0x116>
 800e12a:	270a      	movs	r7, #10
 800e12c:	e7d3      	b.n	800e0d6 <rcl_publisher_init+0xd2>
 800e12e:	2767      	movs	r7, #103	@ 0x67
 800e130:	e7d1      	b.n	800e0d6 <rcl_publisher_init+0xd2>
 800e132:	bf00      	nop

0800e134 <rcl_publisher_get_default_options>:
 800e134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e136:	4d1d      	ldr	r5, [pc, #116]	@ (800e1ac <rcl_publisher_get_default_options+0x78>)
 800e138:	491d      	ldr	r1, [pc, #116]	@ (800e1b0 <rcl_publisher_get_default_options+0x7c>)
 800e13a:	b08b      	sub	sp, #44	@ 0x2c
 800e13c:	2250      	movs	r2, #80	@ 0x50
 800e13e:	4604      	mov	r4, r0
 800e140:	4628      	mov	r0, r5
 800e142:	f00b fc28 	bl	8019996 <memcpy>
 800e146:	a802      	add	r0, sp, #8
 800e148:	f001 fc02 	bl	800f950 <rcutils_get_default_allocator>
 800e14c:	f10d 0c08 	add.w	ip, sp, #8
 800e150:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e154:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e158:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e15c:	466e      	mov	r6, sp
 800e15e:	f8dc 3000 	ldr.w	r3, [ip]
 800e162:	f8ce 3000 	str.w	r3, [lr]
 800e166:	4630      	mov	r0, r6
 800e168:	f003 fdaa 	bl	8011cc0 <rmw_get_default_publisher_options>
 800e16c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e170:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e174:	e883 0003 	stmia.w	r3, {r0, r1}
 800e178:	2700      	movs	r7, #0
 800e17a:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800e17e:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 800e182:	f7ff fe45 	bl	800de10 <rcl_get_disable_loaned_message>
 800e186:	b958      	cbnz	r0, 800e1a0 <rcl_publisher_get_default_options+0x6c>
 800e188:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e18c:	f885 306c 	strb.w	r3, [r5, #108]	@ 0x6c
 800e190:	4906      	ldr	r1, [pc, #24]	@ (800e1ac <rcl_publisher_get_default_options+0x78>)
 800e192:	2270      	movs	r2, #112	@ 0x70
 800e194:	4620      	mov	r0, r4
 800e196:	f00b fbfe 	bl	8019996 <memcpy>
 800e19a:	4620      	mov	r0, r4
 800e19c:	b00b      	add	sp, #44	@ 0x2c
 800e19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a0:	f001 fcc6 	bl	800fb30 <rcutils_reset_error>
 800e1a4:	f885 706c 	strb.w	r7, [r5, #108]	@ 0x6c
 800e1a8:	e7f2      	b.n	800e190 <rcl_publisher_get_default_options+0x5c>
 800e1aa:	bf00      	nop
 800e1ac:	2000fb78 	.word	0x2000fb78
 800e1b0:	0801c030 	.word	0x0801c030

0800e1b4 <rcl_publish>:
 800e1b4:	b1f8      	cbz	r0, 800e1f6 <rcl_publish+0x42>
 800e1b6:	6803      	ldr	r3, [r0, #0]
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	b1b3      	cbz	r3, 800e1ec <rcl_publish+0x38>
 800e1be:	4616      	mov	r6, r2
 800e1c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e1c4:	b192      	cbz	r2, 800e1ec <rcl_publish+0x38>
 800e1c6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e1ca:	460d      	mov	r5, r1
 800e1cc:	f7ff f99c 	bl	800d508 <rcl_context_is_valid>
 800e1d0:	b160      	cbz	r0, 800e1ec <rcl_publish+0x38>
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e1d8:	b140      	cbz	r0, 800e1ec <rcl_publish+0x38>
 800e1da:	b155      	cbz	r5, 800e1f2 <rcl_publish+0x3e>
 800e1dc:	4632      	mov	r2, r6
 800e1de:	4629      	mov	r1, r5
 800e1e0:	f002 fb80 	bl	80108e4 <rmw_publish>
 800e1e4:	3800      	subs	r0, #0
 800e1e6:	bf18      	it	ne
 800e1e8:	2001      	movne	r0, #1
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	200b      	movs	r0, #11
 800e1f4:	bd70      	pop	{r4, r5, r6, pc}
 800e1f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e1fa:	4770      	bx	lr

0800e1fc <rcl_publisher_is_valid>:
 800e1fc:	b1a0      	cbz	r0, 800e228 <rcl_publisher_is_valid+0x2c>
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	b510      	push	{r4, lr}
 800e202:	4604      	mov	r4, r0
 800e204:	b173      	cbz	r3, 800e224 <rcl_publisher_is_valid+0x28>
 800e206:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e20a:	b15a      	cbz	r2, 800e224 <rcl_publisher_is_valid+0x28>
 800e20c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e210:	f7ff f97a 	bl	800d508 <rcl_context_is_valid>
 800e214:	b130      	cbz	r0, 800e224 <rcl_publisher_is_valid+0x28>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e21c:	3800      	subs	r0, #0
 800e21e:	bf18      	it	ne
 800e220:	2001      	movne	r0, #1
 800e222:	bd10      	pop	{r4, pc}
 800e224:	2000      	movs	r0, #0
 800e226:	bd10      	pop	{r4, pc}
 800e228:	2000      	movs	r0, #0
 800e22a:	4770      	bx	lr

0800e22c <rcl_publisher_is_valid_except_context>:
 800e22c:	b130      	cbz	r0, 800e23c <rcl_publisher_is_valid_except_context+0x10>
 800e22e:	6800      	ldr	r0, [r0, #0]
 800e230:	b120      	cbz	r0, 800e23c <rcl_publisher_is_valid_except_context+0x10>
 800e232:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e236:	3800      	subs	r0, #0
 800e238:	bf18      	it	ne
 800e23a:	2001      	movne	r0, #1
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop

0800e240 <exact_match_lookup>:
 800e240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e242:	f102 0708 	add.w	r7, r2, #8
 800e246:	460b      	mov	r3, r1
 800e248:	4614      	mov	r4, r2
 800e24a:	4606      	mov	r6, r0
 800e24c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e250:	b085      	sub	sp, #20
 800e252:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e256:	4618      	mov	r0, r3
 800e258:	4919      	ldr	r1, [pc, #100]	@ (800e2c0 <exact_match_lookup+0x80>)
 800e25a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800e25e:	f001 fc85 	bl	800fb6c <rcutils_join_path>
 800e262:	7833      	ldrb	r3, [r6, #0]
 800e264:	2b2f      	cmp	r3, #47	@ 0x2f
 800e266:	4605      	mov	r5, r0
 800e268:	d023      	beq.n	800e2b2 <exact_match_lookup+0x72>
 800e26a:	f104 030c 	add.w	r3, r4, #12
 800e26e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e272:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e276:	1c70      	adds	r0, r6, #1
 800e278:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e27c:	f001 fc7c 	bl	800fb78 <rcutils_to_native_path>
 800e280:	4606      	mov	r6, r0
 800e282:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e286:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e28a:	4631      	mov	r1, r6
 800e28c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800e290:	4628      	mov	r0, r5
 800e292:	f001 fc6b 	bl	800fb6c <rcutils_join_path>
 800e296:	6862      	ldr	r2, [r4, #4]
 800e298:	6921      	ldr	r1, [r4, #16]
 800e29a:	4603      	mov	r3, r0
 800e29c:	4630      	mov	r0, r6
 800e29e:	461e      	mov	r6, r3
 800e2a0:	4790      	blx	r2
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	6863      	ldr	r3, [r4, #4]
 800e2a6:	6921      	ldr	r1, [r4, #16]
 800e2a8:	4798      	blx	r3
 800e2aa:	4635      	mov	r5, r6
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	b005      	add	sp, #20
 800e2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2b2:	7873      	ldrb	r3, [r6, #1]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d1d8      	bne.n	800e26a <exact_match_lookup+0x2a>
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	b005      	add	sp, #20
 800e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	0801c0bc 	.word	0x0801c0bc

0800e2c4 <rcl_get_secure_root>:
 800e2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2c8:	b085      	sub	sp, #20
 800e2ca:	b168      	cbz	r0, 800e2e8 <rcl_get_secure_root+0x24>
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	4608      	mov	r0, r1
 800e2d0:	460c      	mov	r4, r1
 800e2d2:	f001 fb4b 	bl	800f96c <rcutils_allocator_is_valid>
 800e2d6:	b138      	cbz	r0, 800e2e8 <rcl_get_secure_root+0x24>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	482d      	ldr	r0, [pc, #180]	@ (800e390 <rcl_get_secure_root+0xcc>)
 800e2dc:	9303      	str	r3, [sp, #12]
 800e2de:	a903      	add	r1, sp, #12
 800e2e0:	f001 fbf6 	bl	800fad0 <rcutils_get_env>
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	b120      	cbz	r0, 800e2f2 <rcl_get_secure_root+0x2e>
 800e2e8:	2500      	movs	r5, #0
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	b005      	add	sp, #20
 800e2ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	781a      	ldrb	r2, [r3, #0]
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	d0f6      	beq.n	800e2e8 <rcl_get_secure_root+0x24>
 800e2fa:	f104 090c 	add.w	r9, r4, #12
 800e2fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e302:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e306:	4618      	mov	r0, r3
 800e308:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e30c:	f001 fd56 	bl	800fdbc <rcutils_strdup>
 800e310:	4680      	mov	r8, r0
 800e312:	2800      	cmp	r0, #0
 800e314:	d0e8      	beq.n	800e2e8 <rcl_get_secure_root+0x24>
 800e316:	481f      	ldr	r0, [pc, #124]	@ (800e394 <rcl_get_secure_root+0xd0>)
 800e318:	9503      	str	r5, [sp, #12]
 800e31a:	a903      	add	r1, sp, #12
 800e31c:	f001 fbd8 	bl	800fad0 <rcutils_get_env>
 800e320:	b160      	cbz	r0, 800e33c <rcl_get_secure_root+0x78>
 800e322:	2600      	movs	r6, #0
 800e324:	6863      	ldr	r3, [r4, #4]
 800e326:	6921      	ldr	r1, [r4, #16]
 800e328:	4630      	mov	r0, r6
 800e32a:	4798      	blx	r3
 800e32c:	4640      	mov	r0, r8
 800e32e:	6863      	ldr	r3, [r4, #4]
 800e330:	6921      	ldr	r1, [r4, #16]
 800e332:	4798      	blx	r3
 800e334:	4628      	mov	r0, r5
 800e336:	b005      	add	sp, #20
 800e338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	781e      	ldrb	r6, [r3, #0]
 800e340:	b1f6      	cbz	r6, 800e380 <rcl_get_secure_root+0xbc>
 800e342:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e346:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e34a:	4618      	mov	r0, r3
 800e34c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e350:	f001 fd34 	bl	800fdbc <rcutils_strdup>
 800e354:	4606      	mov	r6, r0
 800e356:	2800      	cmp	r0, #0
 800e358:	d0e3      	beq.n	800e322 <rcl_get_secure_root+0x5e>
 800e35a:	4622      	mov	r2, r4
 800e35c:	4641      	mov	r1, r8
 800e35e:	f7ff ff6f 	bl	800e240 <exact_match_lookup>
 800e362:	4605      	mov	r5, r0
 800e364:	2d00      	cmp	r5, #0
 800e366:	d0dd      	beq.n	800e324 <rcl_get_secure_root+0x60>
 800e368:	4628      	mov	r0, r5
 800e36a:	f001 fbfd 	bl	800fb68 <rcutils_is_directory>
 800e36e:	4603      	mov	r3, r0
 800e370:	2800      	cmp	r0, #0
 800e372:	d1d7      	bne.n	800e324 <rcl_get_secure_root+0x60>
 800e374:	4628      	mov	r0, r5
 800e376:	6921      	ldr	r1, [r4, #16]
 800e378:	461d      	mov	r5, r3
 800e37a:	6863      	ldr	r3, [r4, #4]
 800e37c:	4798      	blx	r3
 800e37e:	e7d1      	b.n	800e324 <rcl_get_secure_root+0x60>
 800e380:	4622      	mov	r2, r4
 800e382:	4638      	mov	r0, r7
 800e384:	4641      	mov	r1, r8
 800e386:	f7ff ff5b 	bl	800e240 <exact_match_lookup>
 800e38a:	4605      	mov	r5, r0
 800e38c:	e7ea      	b.n	800e364 <rcl_get_secure_root+0xa0>
 800e38e:	bf00      	nop
 800e390:	0801c0c8 	.word	0x0801c0c8
 800e394:	0801c0e0 	.word	0x0801c0e0

0800e398 <rcl_get_security_options_from_environment>:
 800e398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	460f      	mov	r7, r1
 800e3a4:	4820      	ldr	r0, [pc, #128]	@ (800e428 <rcl_get_security_options_from_environment+0x90>)
 800e3a6:	9301      	str	r3, [sp, #4]
 800e3a8:	a901      	add	r1, sp, #4
 800e3aa:	4690      	mov	r8, r2
 800e3ac:	f001 fb90 	bl	800fad0 <rcutils_get_env>
 800e3b0:	b120      	cbz	r0, 800e3bc <rcl_get_security_options_from_environment+0x24>
 800e3b2:	2501      	movs	r5, #1
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	b002      	add	sp, #8
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3bc:	491b      	ldr	r1, [pc, #108]	@ (800e42c <rcl_get_security_options_from_environment+0x94>)
 800e3be:	4604      	mov	r4, r0
 800e3c0:	9801      	ldr	r0, [sp, #4]
 800e3c2:	f7f1 ff05 	bl	80001d0 <strcmp>
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	b9e8      	cbnz	r0, 800e406 <rcl_get_security_options_from_environment+0x6e>
 800e3ca:	9001      	str	r0, [sp, #4]
 800e3cc:	f1b8 0f00 	cmp.w	r8, #0
 800e3d0:	d020      	beq.n	800e414 <rcl_get_security_options_from_environment+0x7c>
 800e3d2:	4817      	ldr	r0, [pc, #92]	@ (800e430 <rcl_get_security_options_from_environment+0x98>)
 800e3d4:	a901      	add	r1, sp, #4
 800e3d6:	f001 fb7b 	bl	800fad0 <rcutils_get_env>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	d1e9      	bne.n	800e3b2 <rcl_get_security_options_from_environment+0x1a>
 800e3de:	4915      	ldr	r1, [pc, #84]	@ (800e434 <rcl_get_security_options_from_environment+0x9c>)
 800e3e0:	9801      	ldr	r0, [sp, #4]
 800e3e2:	f7f1 fef5 	bl	80001d0 <strcmp>
 800e3e6:	fab0 f080 	clz	r0, r0
 800e3ea:	0940      	lsrs	r0, r0, #5
 800e3ec:	f888 0000 	strb.w	r0, [r8]
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f7ff ff66 	bl	800e2c4 <rcl_get_secure_root>
 800e3f8:	b170      	cbz	r0, 800e418 <rcl_get_security_options_from_environment+0x80>
 800e3fa:	f8c8 0004 	str.w	r0, [r8, #4]
 800e3fe:	4628      	mov	r0, r5
 800e400:	b002      	add	sp, #8
 800e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e406:	4625      	mov	r5, r4
 800e408:	4628      	mov	r0, r5
 800e40a:	f888 4000 	strb.w	r4, [r8]
 800e40e:	b002      	add	sp, #8
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	250b      	movs	r5, #11
 800e416:	e7cd      	b.n	800e3b4 <rcl_get_security_options_from_environment+0x1c>
 800e418:	f898 5000 	ldrb.w	r5, [r8]
 800e41c:	f1a5 0501 	sub.w	r5, r5, #1
 800e420:	fab5 f585 	clz	r5, r5
 800e424:	096d      	lsrs	r5, r5, #5
 800e426:	e7c5      	b.n	800e3b4 <rcl_get_security_options_from_environment+0x1c>
 800e428:	0801c080 	.word	0x0801c080
 800e42c:	0801c094 	.word	0x0801c094
 800e430:	0801c09c 	.word	0x0801c09c
 800e434:	0801c0b4 	.word	0x0801c0b4

0800e438 <rcl_service_get_rmw_handle>:
 800e438:	b118      	cbz	r0, 800e442 <rcl_service_get_rmw_handle+0xa>
 800e43a:	6800      	ldr	r0, [r0, #0]
 800e43c:	b108      	cbz	r0, 800e442 <rcl_service_get_rmw_handle+0xa>
 800e43e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e442:	4770      	bx	lr

0800e444 <rcl_take_request>:
 800e444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e446:	468e      	mov	lr, r1
 800e448:	460c      	mov	r4, r1
 800e44a:	4617      	mov	r7, r2
 800e44c:	4605      	mov	r5, r0
 800e44e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e452:	b091      	sub	sp, #68	@ 0x44
 800e454:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800e458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e45c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e460:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e464:	b30d      	cbz	r5, 800e4aa <rcl_take_request+0x66>
 800e466:	682b      	ldr	r3, [r5, #0]
 800e468:	b1fb      	cbz	r3, 800e4aa <rcl_take_request+0x66>
 800e46a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e46e:	b1e0      	cbz	r0, 800e4aa <rcl_take_request+0x66>
 800e470:	b397      	cbz	r7, 800e4d8 <rcl_take_request+0x94>
 800e472:	2300      	movs	r3, #0
 800e474:	f88d 3017 	strb.w	r3, [sp, #23]
 800e478:	463a      	mov	r2, r7
 800e47a:	f10d 0317 	add.w	r3, sp, #23
 800e47e:	a906      	add	r1, sp, #24
 800e480:	f002 fc1e 	bl	8010cc0 <rmw_take_request>
 800e484:	4606      	mov	r6, r0
 800e486:	b198      	cbz	r0, 800e4b0 <rcl_take_request+0x6c>
 800e488:	280a      	cmp	r0, #10
 800e48a:	bf18      	it	ne
 800e48c:	2601      	movne	r6, #1
 800e48e:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 800e492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e496:	46a6      	mov	lr, r4
 800e498:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e49c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800e4a0:	e88e 0003 	stmia.w	lr, {r0, r1}
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	b011      	add	sp, #68	@ 0x44
 800e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4aa:	f44f 7616 	mov.w	r6, #600	@ 0x258
 800e4ae:	e7ee      	b.n	800e48e <rcl_take_request+0x4a>
 800e4b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800e4b4:	b193      	cbz	r3, 800e4dc <rcl_take_request+0x98>
 800e4b6:	682b      	ldr	r3, [r5, #0]
 800e4b8:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d0e6      	beq.n	800e48e <rcl_take_request+0x4a>
 800e4c0:	463a      	mov	r2, r7
 800e4c2:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 800e4c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800e4c8:	e9cd 6700 	strd	r6, r7, [sp]
 800e4cc:	9302      	str	r3, [sp, #8]
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	f000 f842 	bl	800e558 <rcl_send_service_event_message>
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	e7da      	b.n	800e48e <rcl_take_request+0x4a>
 800e4d8:	260b      	movs	r6, #11
 800e4da:	e7d8      	b.n	800e48e <rcl_take_request+0x4a>
 800e4dc:	f240 2659 	movw	r6, #601	@ 0x259
 800e4e0:	e7d5      	b.n	800e48e <rcl_take_request+0x4a>
 800e4e2:	bf00      	nop

0800e4e4 <rcl_send_response>:
 800e4e4:	b350      	cbz	r0, 800e53c <rcl_send_response+0x58>
 800e4e6:	b570      	push	{r4, r5, r6, lr}
 800e4e8:	6803      	ldr	r3, [r0, #0]
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	b1cb      	cbz	r3, 800e524 <rcl_send_response+0x40>
 800e4f0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e4f4:	b1b0      	cbz	r0, 800e524 <rcl_send_response+0x40>
 800e4f6:	460e      	mov	r6, r1
 800e4f8:	b1e9      	cbz	r1, 800e536 <rcl_send_response+0x52>
 800e4fa:	4615      	mov	r5, r2
 800e4fc:	b1da      	cbz	r2, 800e536 <rcl_send_response+0x52>
 800e4fe:	f002 fc3d 	bl	8010d7c <rmw_send_response>
 800e502:	b998      	cbnz	r0, 800e52c <rcl_send_response+0x48>
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800e50a:	b16b      	cbz	r3, 800e528 <rcl_send_response+0x44>
 800e50c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800e510:	462a      	mov	r2, r5
 800e512:	e9cd 0100 	strd	r0, r1, [sp]
 800e516:	9602      	str	r6, [sp, #8]
 800e518:	2102      	movs	r1, #2
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 f81c 	bl	800e558 <rcl_send_service_event_message>
 800e520:	b004      	add	sp, #16
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e528:	b004      	add	sp, #16
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
 800e52c:	2802      	cmp	r0, #2
 800e52e:	bf18      	it	ne
 800e530:	2001      	movne	r0, #1
 800e532:	b004      	add	sp, #16
 800e534:	bd70      	pop	{r4, r5, r6, pc}
 800e536:	200b      	movs	r0, #11
 800e538:	b004      	add	sp, #16
 800e53a:	bd70      	pop	{r4, r5, r6, pc}
 800e53c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop

0800e544 <rcl_service_is_valid>:
 800e544:	b130      	cbz	r0, 800e554 <rcl_service_is_valid+0x10>
 800e546:	6800      	ldr	r0, [r0, #0]
 800e548:	b120      	cbz	r0, 800e554 <rcl_service_is_valid+0x10>
 800e54a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e54e:	3800      	subs	r0, #0
 800e550:	bf18      	it	ne
 800e552:	2001      	movne	r0, #1
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop

0800e558 <rcl_send_service_event_message>:
 800e558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e55c:	b093      	sub	sp, #76	@ 0x4c
 800e55e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e560:	b192      	cbz	r2, 800e588 <rcl_send_service_event_message+0x30>
 800e562:	b18e      	cbz	r6, 800e588 <rcl_send_service_event_message+0x30>
 800e564:	4604      	mov	r4, r0
 800e566:	b150      	cbz	r0, 800e57e <rcl_send_service_event_message+0x26>
 800e568:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800e56c:	b13b      	cbz	r3, 800e57e <rcl_send_service_event_message+0x26>
 800e56e:	68c0      	ldr	r0, [r0, #12]
 800e570:	460f      	mov	r7, r1
 800e572:	4615      	mov	r5, r2
 800e574:	f000 f9e8 	bl	800e948 <rcl_clock_valid>
 800e578:	b108      	cbz	r0, 800e57e <rcl_send_service_event_message+0x26>
 800e57a:	7a23      	ldrb	r3, [r4, #8]
 800e57c:	b94b      	cbnz	r3, 800e592 <rcl_send_service_event_message+0x3a>
 800e57e:	2401      	movs	r4, #1
 800e580:	4620      	mov	r0, r4
 800e582:	b013      	add	sp, #76	@ 0x4c
 800e584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e588:	240b      	movs	r4, #11
 800e58a:	4620      	mov	r0, r4
 800e58c:	b013      	add	sp, #76	@ 0x4c
 800e58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e592:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 800e596:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e59a:	f10d 0c0c 	add.w	ip, sp, #12
 800e59e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5a2:	f8de 3000 	ldr.w	r3, [lr]
 800e5a6:	f8cc 3000 	str.w	r3, [ip]
 800e5aa:	a803      	add	r0, sp, #12
 800e5ac:	f001 f9de 	bl	800f96c <rcutils_allocator_is_valid>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d0e9      	beq.n	800e588 <rcl_send_service_event_message+0x30>
 800e5b4:	6820      	ldr	r0, [r4, #0]
 800e5b6:	f7ff fe21 	bl	800e1fc <rcl_publisher_is_valid>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d05b      	beq.n	800e676 <rcl_send_service_event_message+0x11e>
 800e5be:	4669      	mov	r1, sp
 800e5c0:	68e0      	ldr	r0, [r4, #12]
 800e5c2:	f000 fa43 	bl	800ea4c <rcl_clock_get_now>
 800e5c6:	4601      	mov	r1, r0
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d144      	bne.n	800e656 <rcl_send_service_event_message+0xfe>
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	eb0d 0002 	add.w	r0, sp, r2
 800e5d2:	f00b f901 	bl	80197d8 <memset>
 800e5d6:	e9dd 8900 	ldrd	r8, r9, [sp]
 800e5da:	a329      	add	r3, pc, #164	@ (adr r3, 800e680 <rcl_send_service_event_message+0x128>)
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	4640      	mov	r0, r8
 800e5e2:	4649      	mov	r1, r9
 800e5e4:	f88d 7020 	strb.w	r7, [sp, #32]
 800e5e8:	f7f2 fb3e 	bl	8000c68 <__aeabi_ldivmod>
 800e5ec:	a324      	add	r3, pc, #144	@ (adr r3, 800e680 <rcl_send_service_event_message+0x128>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	9009      	str	r0, [sp, #36]	@ 0x24
 800e5f4:	4649      	mov	r1, r9
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	f7f2 fb36 	bl	8000c68 <__aeabi_ldivmod>
 800e5fc:	920a      	str	r2, [sp, #40]	@ 0x28
 800e5fe:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	@ 0x68
 800e602:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e606:	7a23      	ldrb	r3, [r4, #8]
 800e608:	6830      	ldr	r0, [r6, #0]
 800e60a:	6871      	ldr	r1, [r6, #4]
 800e60c:	68b2      	ldr	r2, [r6, #8]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	68f3      	ldr	r3, [r6, #12]
 800e612:	bf08      	it	eq
 800e614:	2500      	moveq	r5, #0
 800e616:	ae0b      	add	r6, sp, #44	@ 0x2c
 800e618:	2f01      	cmp	r7, #1
 800e61a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e61c:	d81e      	bhi.n	800e65c <rcl_send_service_event_message+0x104>
 800e61e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e622:	462a      	mov	r2, r5
 800e624:	a808      	add	r0, sp, #32
 800e626:	699d      	ldr	r5, [r3, #24]
 800e628:	a903      	add	r1, sp, #12
 800e62a:	2300      	movs	r3, #0
 800e62c:	47a8      	blx	r5
 800e62e:	4605      	mov	r5, r0
 800e630:	2d00      	cmp	r5, #0
 800e632:	d0a4      	beq.n	800e57e <rcl_send_service_event_message+0x26>
 800e634:	6820      	ldr	r0, [r4, #0]
 800e636:	4629      	mov	r1, r5
 800e638:	2200      	movs	r2, #0
 800e63a:	f7ff fdbb 	bl	800e1b4 <rcl_publish>
 800e63e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e642:	a903      	add	r1, sp, #12
 800e644:	4604      	mov	r4, r0
 800e646:	69db      	ldr	r3, [r3, #28]
 800e648:	4628      	mov	r0, r5
 800e64a:	4798      	blx	r3
 800e64c:	2c00      	cmp	r4, #0
 800e64e:	d097      	beq.n	800e580 <rcl_send_service_event_message+0x28>
 800e650:	f001 fa6e 	bl	800fb30 <rcutils_reset_error>
 800e654:	e794      	b.n	800e580 <rcl_send_service_event_message+0x28>
 800e656:	f001 fa6b 	bl	800fb30 <rcutils_reset_error>
 800e65a:	e790      	b.n	800e57e <rcl_send_service_event_message+0x26>
 800e65c:	1eb9      	subs	r1, r7, #2
 800e65e:	2901      	cmp	r1, #1
 800e660:	d8f9      	bhi.n	800e656 <rcl_send_service_event_message+0xfe>
 800e662:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e666:	462b      	mov	r3, r5
 800e668:	a808      	add	r0, sp, #32
 800e66a:	6995      	ldr	r5, [r2, #24]
 800e66c:	a903      	add	r1, sp, #12
 800e66e:	2200      	movs	r2, #0
 800e670:	47a8      	blx	r5
 800e672:	4605      	mov	r5, r0
 800e674:	e7dc      	b.n	800e630 <rcl_send_service_event_message+0xd8>
 800e676:	f44f 7496 	mov.w	r4, #300	@ 0x12c
 800e67a:	e781      	b.n	800e580 <rcl_send_service_event_message+0x28>
 800e67c:	f3af 8000 	nop.w
 800e680:	3b9aca00 	.word	0x3b9aca00
 800e684:	00000000 	.word	0x00000000

0800e688 <rcl_get_zero_initialized_subscription>:
 800e688:	4b01      	ldr	r3, [pc, #4]	@ (800e690 <rcl_get_zero_initialized_subscription+0x8>)
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	0801c100 	.word	0x0801c100

0800e694 <rcl_subscription_init>:
 800e694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e698:	b089      	sub	sp, #36	@ 0x24
 800e69a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e69c:	b1d6      	cbz	r6, 800e6d4 <rcl_subscription_init+0x40>
 800e69e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	4648      	mov	r0, r9
 800e6a6:	460d      	mov	r5, r1
 800e6a8:	4690      	mov	r8, r2
 800e6aa:	461f      	mov	r7, r3
 800e6ac:	f001 f95e 	bl	800f96c <rcutils_allocator_is_valid>
 800e6b0:	b180      	cbz	r0, 800e6d4 <rcl_subscription_init+0x40>
 800e6b2:	b17c      	cbz	r4, 800e6d4 <rcl_subscription_init+0x40>
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f7ff fb83 	bl	800ddc0 <rcl_node_is_valid>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d054      	beq.n	800e768 <rcl_subscription_init+0xd4>
 800e6be:	f1b8 0f00 	cmp.w	r8, #0
 800e6c2:	d007      	beq.n	800e6d4 <rcl_subscription_init+0x40>
 800e6c4:	b137      	cbz	r7, 800e6d4 <rcl_subscription_init+0x40>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	b14b      	cbz	r3, 800e6de <rcl_subscription_init+0x4a>
 800e6ca:	2764      	movs	r7, #100	@ 0x64
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	b009      	add	sp, #36	@ 0x24
 800e6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d4:	270b      	movs	r7, #11
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	b009      	add	sp, #36	@ 0x24
 800e6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6de:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e6e2:	aa07      	add	r2, sp, #28
 800e6e4:	9205      	str	r2, [sp, #20]
 800e6e6:	9307      	str	r3, [sp, #28]
 800e6e8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e6ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f7ff fbd4 	bl	800dea8 <rcl_node_resolve_name>
 800e700:	4607      	mov	r7, r0
 800e702:	2800      	cmp	r0, #0
 800e704:	d15f      	bne.n	800e7c6 <rcl_subscription_init+0x132>
 800e706:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800e70a:	21d0      	movs	r1, #208	@ 0xd0
 800e70c:	2001      	movs	r0, #1
 800e70e:	4798      	blx	r3
 800e710:	6020      	str	r0, [r4, #0]
 800e712:	2800      	cmp	r0, #0
 800e714:	d05d      	beq.n	800e7d2 <rcl_subscription_init+0x13e>
 800e716:	4628      	mov	r0, r5
 800e718:	f7ff fb74 	bl	800de04 <rcl_node_get_rmw_handle>
 800e71c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	9a07      	ldr	r2, [sp, #28]
 800e724:	6827      	ldr	r7, [r4, #0]
 800e726:	4641      	mov	r1, r8
 800e728:	4633      	mov	r3, r6
 800e72a:	f002 fc11 	bl	8010f50 <rmw_create_subscription>
 800e72e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 800e732:	6827      	ldr	r7, [r4, #0]
 800e734:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800e738:	b348      	cbz	r0, 800e78e <rcl_subscription_init+0xfa>
 800e73a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800e73e:	f002 fce9 	bl	8011114 <rmw_subscription_get_actual_qos>
 800e742:	4607      	mov	r7, r0
 800e744:	b9a8      	cbnz	r0, 800e772 <rcl_subscription_init+0xde>
 800e746:	6820      	ldr	r0, [r4, #0]
 800e748:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800e74c:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 800e750:	2278      	movs	r2, #120	@ 0x78
 800e752:	4631      	mov	r1, r6
 800e754:	f00b f91f 	bl	8019996 <memcpy>
 800e758:	9807      	ldr	r0, [sp, #28]
 800e75a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e75c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e75e:	4798      	blx	r3
 800e760:	4638      	mov	r0, r7
 800e762:	b009      	add	sp, #36	@ 0x24
 800e764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e768:	27c8      	movs	r7, #200	@ 0xc8
 800e76a:	4638      	mov	r0, r7
 800e76c:	b009      	add	sp, #36	@ 0x24
 800e76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e772:	6827      	ldr	r7, [r4, #0]
 800e774:	b32f      	cbz	r7, 800e7c2 <rcl_subscription_init+0x12e>
 800e776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e77a:	b14b      	cbz	r3, 800e790 <rcl_subscription_init+0xfc>
 800e77c:	4628      	mov	r0, r5
 800e77e:	f7ff fb41 	bl	800de04 <rcl_node_get_rmw_handle>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800e788:	f002 fcd4 	bl	8011134 <rmw_destroy_subscription>
 800e78c:	6827      	ldr	r7, [r4, #0]
 800e78e:	b197      	cbz	r7, 800e7b6 <rcl_subscription_init+0x122>
 800e790:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800e794:	4628      	mov	r0, r5
 800e796:	f001 f8e9 	bl	800f96c <rcutils_allocator_is_valid>
 800e79a:	b158      	cbz	r0, 800e7b4 <rcl_subscription_init+0x120>
 800e79c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e79e:	b148      	cbz	r0, 800e7b4 <rcl_subscription_init+0x120>
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f003 fa95 	bl	8011cd0 <rmw_subscription_content_filter_options_fini>
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	b9b8      	cbnz	r0, 800e7da <rcl_subscription_init+0x146>
 800e7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e7ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e7b0:	4798      	blx	r3
 800e7b2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800e7b4:	6827      	ldr	r7, [r4, #0]
 800e7b6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e7b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	4798      	blx	r3
 800e7be:	2300      	movs	r3, #0
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	2701      	movs	r7, #1
 800e7c4:	e7c8      	b.n	800e758 <rcl_subscription_init+0xc4>
 800e7c6:	2867      	cmp	r0, #103	@ 0x67
 800e7c8:	d0c6      	beq.n	800e758 <rcl_subscription_init+0xc4>
 800e7ca:	2869      	cmp	r0, #105	@ 0x69
 800e7cc:	d003      	beq.n	800e7d6 <rcl_subscription_init+0x142>
 800e7ce:	280a      	cmp	r0, #10
 800e7d0:	d1f7      	bne.n	800e7c2 <rcl_subscription_init+0x12e>
 800e7d2:	270a      	movs	r7, #10
 800e7d4:	e7c0      	b.n	800e758 <rcl_subscription_init+0xc4>
 800e7d6:	2767      	movs	r7, #103	@ 0x67
 800e7d8:	e7be      	b.n	800e758 <rcl_subscription_init+0xc4>
 800e7da:	f7fe fe77 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e7de:	6827      	ldr	r7, [r4, #0]
 800e7e0:	e7e9      	b.n	800e7b6 <rcl_subscription_init+0x122>
 800e7e2:	bf00      	nop

0800e7e4 <rcl_subscription_get_default_options>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	4c16      	ldr	r4, [pc, #88]	@ (800e840 <rcl_subscription_get_default_options+0x5c>)
 800e7e8:	4916      	ldr	r1, [pc, #88]	@ (800e844 <rcl_subscription_get_default_options+0x60>)
 800e7ea:	b08a      	sub	sp, #40	@ 0x28
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	2250      	movs	r2, #80	@ 0x50
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f00b f8d0 	bl	8019996 <memcpy>
 800e7f6:	a804      	add	r0, sp, #16
 800e7f8:	f001 f8aa 	bl	800f950 <rcutils_get_default_allocator>
 800e7fc:	f10d 0c10 	add.w	ip, sp, #16
 800e800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e804:	f104 0e50 	add.w	lr, r4, #80	@ 0x50
 800e808:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e80c:	466e      	mov	r6, sp
 800e80e:	f8dc 3000 	ldr.w	r3, [ip]
 800e812:	f8ce 3000 	str.w	r3, [lr]
 800e816:	4630      	mov	r0, r6
 800e818:	f003 fa74 	bl	8011d04 <rmw_get_default_subscription_options>
 800e81c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e820:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 800e824:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e828:	2301      	movs	r3, #1
 800e82a:	2278      	movs	r2, #120	@ 0x78
 800e82c:	4621      	mov	r1, r4
 800e82e:	4628      	mov	r0, r5
 800e830:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
 800e834:	f00b f8af 	bl	8019996 <memcpy>
 800e838:	4628      	mov	r0, r5
 800e83a:	b00a      	add	sp, #40	@ 0x28
 800e83c:	bd70      	pop	{r4, r5, r6, pc}
 800e83e:	bf00      	nop
 800e840:	2000fbe8 	.word	0x2000fbe8
 800e844:	0801c108 	.word	0x0801c108

0800e848 <rcl_take>:
 800e848:	2800      	cmp	r0, #0
 800e84a:	d04b      	beq.n	800e8e4 <rcl_take+0x9c>
 800e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e850:	4615      	mov	r5, r2
 800e852:	6802      	ldr	r2, [r0, #0]
 800e854:	b0a0      	sub	sp, #128	@ 0x80
 800e856:	4604      	mov	r4, r0
 800e858:	2a00      	cmp	r2, #0
 800e85a:	d03b      	beq.n	800e8d4 <rcl_take+0x8c>
 800e85c:	461f      	mov	r7, r3
 800e85e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 800e862:	2b00      	cmp	r3, #0
 800e864:	d036      	beq.n	800e8d4 <rcl_take+0x8c>
 800e866:	460e      	mov	r6, r1
 800e868:	2900      	cmp	r1, #0
 800e86a:	d039      	beq.n	800e8e0 <rcl_take+0x98>
 800e86c:	2d00      	cmp	r5, #0
 800e86e:	d03d      	beq.n	800e8ec <rcl_take+0xa4>
 800e870:	a802      	add	r0, sp, #8
 800e872:	f003 fad1 	bl	8011e18 <rmw_get_zero_initialized_message_info>
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	f10d 0c08 	add.w	ip, sp, #8
 800e87c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 800e880:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e884:	46ae      	mov	lr, r5
 800e886:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e88a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e88e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e892:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e896:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e89a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800e89e:	462b      	mov	r3, r5
 800e8a0:	e88e 0003 	stmia.w	lr, {r0, r1}
 800e8a4:	f04f 0800 	mov.w	r8, #0
 800e8a8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 800e8b4:	9700      	str	r7, [sp, #0]
 800e8b6:	f002 fc9d 	bl	80111f4 <rmw_take_with_info>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	b9c0      	cbnz	r0, 800e8f0 <rcl_take+0xa8>
 800e8be:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 800e8c2:	f240 1291 	movw	r2, #401	@ 0x191
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	bf08      	it	eq
 800e8ca:	4613      	moveq	r3, r2
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	b020      	add	sp, #128	@ 0x80
 800e8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e8d8:	4618      	mov	r0, r3
 800e8da:	b020      	add	sp, #128	@ 0x80
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e0:	230b      	movs	r3, #11
 800e8e2:	e7f3      	b.n	800e8cc <rcl_take+0x84>
 800e8e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	4770      	bx	lr
 800e8ec:	ad12      	add	r5, sp, #72	@ 0x48
 800e8ee:	e7bf      	b.n	800e870 <rcl_take+0x28>
 800e8f0:	f7fe fdec 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	e7e9      	b.n	800e8cc <rcl_take+0x84>

0800e8f8 <rcl_subscription_get_rmw_handle>:
 800e8f8:	b118      	cbz	r0, 800e902 <rcl_subscription_get_rmw_handle+0xa>
 800e8fa:	6800      	ldr	r0, [r0, #0]
 800e8fc:	b108      	cbz	r0, 800e902 <rcl_subscription_get_rmw_handle+0xa>
 800e8fe:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800e902:	4770      	bx	lr

0800e904 <rcl_subscription_is_valid>:
 800e904:	b130      	cbz	r0, 800e914 <rcl_subscription_is_valid+0x10>
 800e906:	6800      	ldr	r0, [r0, #0]
 800e908:	b120      	cbz	r0, 800e914 <rcl_subscription_is_valid+0x10>
 800e90a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800e90e:	3800      	subs	r0, #0
 800e910:	bf18      	it	ne
 800e912:	2001      	movne	r0, #1
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop

0800e918 <rcl_get_system_time>:
 800e918:	4608      	mov	r0, r1
 800e91a:	f001 bb9b 	b.w	8010054 <rcutils_system_time_now>
 800e91e:	bf00      	nop

0800e920 <rcl_get_steady_time>:
 800e920:	4608      	mov	r0, r1
 800e922:	f001 bbc1 	b.w	80100a8 <rcutils_steady_time_now>
 800e926:	bf00      	nop

0800e928 <rcl_get_ros_time>:
 800e928:	7a03      	ldrb	r3, [r0, #8]
 800e92a:	b510      	push	{r4, lr}
 800e92c:	460c      	mov	r4, r1
 800e92e:	b133      	cbz	r3, 800e93e <rcl_get_ros_time+0x16>
 800e930:	2105      	movs	r1, #5
 800e932:	f001 f829 	bl	800f988 <__atomic_load_8>
 800e936:	e9c4 0100 	strd	r0, r1, [r4]
 800e93a:	2000      	movs	r0, #0
 800e93c:	bd10      	pop	{r4, pc}
 800e93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e942:	4608      	mov	r0, r1
 800e944:	f001 bb86 	b.w	8010054 <rcutils_system_time_now>

0800e948 <rcl_clock_valid>:
 800e948:	b138      	cbz	r0, 800e95a <rcl_clock_valid+0x12>
 800e94a:	7803      	ldrb	r3, [r0, #0]
 800e94c:	b123      	cbz	r3, 800e958 <rcl_clock_valid+0x10>
 800e94e:	68c0      	ldr	r0, [r0, #12]
 800e950:	3800      	subs	r0, #0
 800e952:	bf18      	it	ne
 800e954:	2001      	movne	r0, #1
 800e956:	4770      	bx	lr
 800e958:	4618      	mov	r0, r3
 800e95a:	4770      	bx	lr

0800e95c <rcl_clock_init>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	4605      	mov	r5, r0
 800e960:	4610      	mov	r0, r2
 800e962:	4614      	mov	r4, r2
 800e964:	460e      	mov	r6, r1
 800e966:	f001 f801 	bl	800f96c <rcutils_allocator_is_valid>
 800e96a:	b128      	cbz	r0, 800e978 <rcl_clock_init+0x1c>
 800e96c:	2d03      	cmp	r5, #3
 800e96e:	d803      	bhi.n	800e978 <rcl_clock_init+0x1c>
 800e970:	e8df f005 	tbb	[pc, r5]
 800e974:	06532e1d 	.word	0x06532e1d
 800e978:	f04f 0c0b 	mov.w	ip, #11
 800e97c:	4660      	mov	r0, ip
 800e97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e980:	2e00      	cmp	r6, #0
 800e982:	d0f9      	beq.n	800e978 <rcl_clock_init+0x1c>
 800e984:	2c00      	cmp	r4, #0
 800e986:	d0f7      	beq.n	800e978 <rcl_clock_init+0x1c>
 800e988:	2300      	movs	r3, #0
 800e98a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e98e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800ea44 <rcl_clock_init+0xe8>
 800e992:	6133      	str	r3, [r6, #16]
 800e994:	f106 0514 	add.w	r5, r6, #20
 800e998:	469c      	mov	ip, r3
 800e99a:	2703      	movs	r7, #3
 800e99c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e99e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	602b      	str	r3, [r5, #0]
 800e9a4:	7037      	strb	r7, [r6, #0]
 800e9a6:	f8c6 e00c 	str.w	lr, [r6, #12]
 800e9aa:	4660      	mov	r0, ip
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ae:	2e00      	cmp	r6, #0
 800e9b0:	d0e2      	beq.n	800e978 <rcl_clock_init+0x1c>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	7033      	strb	r3, [r6, #0]
 800e9b6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e9ba:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800e9be:	469c      	mov	ip, r3
 800e9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9c2:	f106 0514 	add.w	r5, r6, #20
 800e9c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	4660      	mov	r0, ip
 800e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d0:	2e00      	cmp	r6, #0
 800e9d2:	d0d1      	beq.n	800e978 <rcl_clock_init+0x1c>
 800e9d4:	2c00      	cmp	r4, #0
 800e9d6:	d0cf      	beq.n	800e978 <rcl_clock_init+0x1c>
 800e9d8:	2700      	movs	r7, #0
 800e9da:	7037      	strb	r7, [r6, #0]
 800e9dc:	46a4      	mov	ip, r4
 800e9de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9e2:	f106 0514 	add.w	r5, r6, #20
 800e9e6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800e9ea:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800e9ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9f0:	f8dc 3000 	ldr.w	r3, [ip]
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	6921      	ldr	r1, [r4, #16]
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	2010      	movs	r0, #16
 800e9fc:	4798      	blx	r3
 800e9fe:	6130      	str	r0, [r6, #16]
 800ea00:	b1d0      	cbz	r0, 800ea38 <rcl_clock_init+0xdc>
 800ea02:	2200      	movs	r2, #0
 800ea04:	2300      	movs	r3, #0
 800ea06:	e9c0 2300 	strd	r2, r3, [r0]
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	7207      	strb	r7, [r0, #8]
 800ea0e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea40 <rcl_clock_init+0xe4>)
 800ea10:	7033      	strb	r3, [r6, #0]
 800ea12:	46bc      	mov	ip, r7
 800ea14:	60f2      	str	r2, [r6, #12]
 800ea16:	4660      	mov	r0, ip
 800ea18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea1a:	2e00      	cmp	r6, #0
 800ea1c:	d0ac      	beq.n	800e978 <rcl_clock_init+0x1c>
 800ea1e:	2c00      	cmp	r4, #0
 800ea20:	d0aa      	beq.n	800e978 <rcl_clock_init+0x1c>
 800ea22:	2300      	movs	r3, #0
 800ea24:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ea28:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800ea48 <rcl_clock_init+0xec>
 800ea2c:	6133      	str	r3, [r6, #16]
 800ea2e:	f106 0514 	add.w	r5, r6, #20
 800ea32:	469c      	mov	ip, r3
 800ea34:	2702      	movs	r7, #2
 800ea36:	e7b1      	b.n	800e99c <rcl_clock_init+0x40>
 800ea38:	f04f 0c0a 	mov.w	ip, #10
 800ea3c:	e79e      	b.n	800e97c <rcl_clock_init+0x20>
 800ea3e:	bf00      	nop
 800ea40:	0800e929 	.word	0x0800e929
 800ea44:	0800e921 	.word	0x0800e921
 800ea48:	0800e919 	.word	0x0800e919

0800ea4c <rcl_clock_get_now>:
 800ea4c:	b140      	cbz	r0, 800ea60 <rcl_clock_get_now+0x14>
 800ea4e:	b139      	cbz	r1, 800ea60 <rcl_clock_get_now+0x14>
 800ea50:	7803      	ldrb	r3, [r0, #0]
 800ea52:	b11b      	cbz	r3, 800ea5c <rcl_clock_get_now+0x10>
 800ea54:	68c3      	ldr	r3, [r0, #12]
 800ea56:	b10b      	cbz	r3, 800ea5c <rcl_clock_get_now+0x10>
 800ea58:	6900      	ldr	r0, [r0, #16]
 800ea5a:	4718      	bx	r3
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	4770      	bx	lr
 800ea60:	200b      	movs	r0, #11
 800ea62:	4770      	bx	lr

0800ea64 <rcl_timer_call>:
 800ea64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea68:	b087      	sub	sp, #28
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d06d      	beq.n	800eb4a <rcl_timer_call+0xe6>
 800ea6e:	6803      	ldr	r3, [r0, #0]
 800ea70:	4604      	mov	r4, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d063      	beq.n	800eb3e <rcl_timer_call+0xda>
 800ea76:	f3bf 8f5b 	dmb	ish
 800ea7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ea7e:	f3bf 8f5b 	dmb	ish
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d150      	bne.n	800eb28 <rcl_timer_call+0xc4>
 800ea86:	6803      	ldr	r3, [r0, #0]
 800ea88:	a904      	add	r1, sp, #16
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	f7ff ffde 	bl	800ea4c <rcl_clock_get_now>
 800ea90:	4605      	mov	r5, r0
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d14a      	bne.n	800eb2c <rcl_timer_call+0xc8>
 800ea96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	db4a      	blt.n	800eb34 <rcl_timer_call+0xd0>
 800ea9e:	6820      	ldr	r0, [r4, #0]
 800eaa0:	f04f 0a05 	mov.w	sl, #5
 800eaa4:	f8cd a000 	str.w	sl, [sp]
 800eaa8:	3020      	adds	r0, #32
 800eaaa:	f000 ffd9 	bl	800fa60 <__atomic_exchange_8>
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	f3bf 8f5b 	dmb	ish
 800eab4:	4680      	mov	r8, r0
 800eab6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800eaba:	f3bf 8f5b 	dmb	ish
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	4689      	mov	r9, r1
 800eac2:	3028      	adds	r0, #40	@ 0x28
 800eac4:	4651      	mov	r1, sl
 800eac6:	f000 ff5f 	bl	800f988 <__atomic_load_8>
 800eaca:	4606      	mov	r6, r0
 800eacc:	6820      	ldr	r0, [r4, #0]
 800eace:	460f      	mov	r7, r1
 800ead0:	3018      	adds	r0, #24
 800ead2:	4651      	mov	r1, sl
 800ead4:	f000 ff58 	bl	800f988 <__atomic_load_8>
 800ead8:	1836      	adds	r6, r6, r0
 800eada:	4602      	mov	r2, r0
 800eadc:	4682      	mov	sl, r0
 800eade:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800eae2:	eb47 0701 	adc.w	r7, r7, r1
 800eae6:	4286      	cmp	r6, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	eb77 010c 	sbcs.w	r1, r7, ip
 800eaee:	da04      	bge.n	800eafa <rcl_timer_call+0x96>
 800eaf0:	ea53 0102 	orrs.w	r1, r3, r2
 800eaf4:	d12e      	bne.n	800eb54 <rcl_timer_call+0xf0>
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	4667      	mov	r7, ip
 800eafa:	6820      	ldr	r0, [r4, #0]
 800eafc:	2105      	movs	r1, #5
 800eafe:	4632      	mov	r2, r6
 800eb00:	463b      	mov	r3, r7
 800eb02:	3028      	adds	r0, #40	@ 0x28
 800eb04:	9100      	str	r1, [sp, #0]
 800eb06:	f000 ff75 	bl	800f9f4 <__atomic_store_8>
 800eb0a:	f1bb 0f00 	cmp.w	fp, #0
 800eb0e:	d00d      	beq.n	800eb2c <rcl_timer_call+0xc8>
 800eb10:	9a04      	ldr	r2, [sp, #16]
 800eb12:	9b05      	ldr	r3, [sp, #20]
 800eb14:	ebb2 0208 	subs.w	r2, r2, r8
 800eb18:	4620      	mov	r0, r4
 800eb1a:	eb63 0309 	sbc.w	r3, r3, r9
 800eb1e:	47d8      	blx	fp
 800eb20:	4628      	mov	r0, r5
 800eb22:	b007      	add	sp, #28
 800eb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb28:	f240 3521 	movw	r5, #801	@ 0x321
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	b007      	add	sp, #28
 800eb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb34:	2501      	movs	r5, #1
 800eb36:	4628      	mov	r0, r5
 800eb38:	b007      	add	sp, #28
 800eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800eb42:	4628      	mov	r0, r5
 800eb44:	b007      	add	sp, #28
 800eb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4a:	250b      	movs	r5, #11
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	b007      	add	sp, #28
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	1b80      	subs	r0, r0, r6
 800eb56:	eb6c 0107 	sbc.w	r1, ip, r7
 800eb5a:	3801      	subs	r0, #1
 800eb5c:	f161 0100 	sbc.w	r1, r1, #0
 800eb60:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800eb64:	f7f2 f880 	bl	8000c68 <__aeabi_ldivmod>
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	f141 0100 	adc.w	r1, r1, #0
 800eb70:	fb00 f303 	mul.w	r3, r0, r3
 800eb74:	fb01 330a 	mla	r3, r1, sl, r3
 800eb78:	fba0 0a0a 	umull	r0, sl, r0, sl
 800eb7c:	1986      	adds	r6, r0, r6
 800eb7e:	4453      	add	r3, sl
 800eb80:	eb43 0707 	adc.w	r7, r3, r7
 800eb84:	e7b9      	b.n	800eafa <rcl_timer_call+0x96>
 800eb86:	bf00      	nop

0800eb88 <rcl_timer_is_ready>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	b378      	cbz	r0, 800ebee <rcl_timer_is_ready+0x66>
 800eb8e:	6803      	ldr	r3, [r0, #0]
 800eb90:	4604      	mov	r4, r0
 800eb92:	b383      	cbz	r3, 800ebf6 <rcl_timer_is_ready+0x6e>
 800eb94:	460d      	mov	r5, r1
 800eb96:	b351      	cbz	r1, 800ebee <rcl_timer_is_ready+0x66>
 800eb98:	f3bf 8f5b 	dmb	ish
 800eb9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800eba0:	f3bf 8f5b 	dmb	ish
 800eba4:	b953      	cbnz	r3, 800ebbc <rcl_timer_is_ready+0x34>
 800eba6:	6803      	ldr	r3, [r0, #0]
 800eba8:	4669      	mov	r1, sp
 800ebaa:	6818      	ldr	r0, [r3, #0]
 800ebac:	f7ff ff4e 	bl	800ea4c <rcl_clock_get_now>
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	b140      	cbz	r0, 800ebc6 <rcl_timer_is_ready+0x3e>
 800ebb4:	f240 3321 	movw	r3, #801	@ 0x321
 800ebb8:	4298      	cmp	r0, r3
 800ebba:	d101      	bne.n	800ebc0 <rcl_timer_is_ready+0x38>
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	702e      	strb	r6, [r5, #0]
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	b002      	add	sp, #8
 800ebc4:	bd70      	pop	{r4, r5, r6, pc}
 800ebc6:	6820      	ldr	r0, [r4, #0]
 800ebc8:	2105      	movs	r1, #5
 800ebca:	3028      	adds	r0, #40	@ 0x28
 800ebcc:	f000 fedc 	bl	800f988 <__atomic_load_8>
 800ebd0:	9b00      	ldr	r3, [sp, #0]
 800ebd2:	1ac0      	subs	r0, r0, r3
 800ebd4:	9b01      	ldr	r3, [sp, #4]
 800ebd6:	eb61 0103 	sbc.w	r1, r1, r3
 800ebda:	2801      	cmp	r0, #1
 800ebdc:	f171 0300 	sbcs.w	r3, r1, #0
 800ebe0:	bfb4      	ite	lt
 800ebe2:	2301      	movlt	r3, #1
 800ebe4:	2300      	movge	r3, #0
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	702b      	strb	r3, [r5, #0]
 800ebea:	b002      	add	sp, #8
 800ebec:	bd70      	pop	{r4, r5, r6, pc}
 800ebee:	260b      	movs	r6, #11
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	b002      	add	sp, #8
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
 800ebf6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800ebfa:	e7e1      	b.n	800ebc0 <rcl_timer_is_ready+0x38>

0800ebfc <rcl_timer_get_time_until_next_call>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	b330      	cbz	r0, 800ec50 <rcl_timer_get_time_until_next_call+0x54>
 800ec02:	6803      	ldr	r3, [r0, #0]
 800ec04:	4604      	mov	r4, r0
 800ec06:	b33b      	cbz	r3, 800ec58 <rcl_timer_get_time_until_next_call+0x5c>
 800ec08:	460d      	mov	r5, r1
 800ec0a:	b309      	cbz	r1, 800ec50 <rcl_timer_get_time_until_next_call+0x54>
 800ec0c:	f3bf 8f5b 	dmb	ish
 800ec10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ec14:	f3bf 8f5b 	dmb	ish
 800ec18:	b9ab      	cbnz	r3, 800ec46 <rcl_timer_get_time_until_next_call+0x4a>
 800ec1a:	6803      	ldr	r3, [r0, #0]
 800ec1c:	4669      	mov	r1, sp
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	f7ff ff14 	bl	800ea4c <rcl_clock_get_now>
 800ec24:	4606      	mov	r6, r0
 800ec26:	b958      	cbnz	r0, 800ec40 <rcl_timer_get_time_until_next_call+0x44>
 800ec28:	6820      	ldr	r0, [r4, #0]
 800ec2a:	2105      	movs	r1, #5
 800ec2c:	3028      	adds	r0, #40	@ 0x28
 800ec2e:	f000 feab 	bl	800f988 <__atomic_load_8>
 800ec32:	9b00      	ldr	r3, [sp, #0]
 800ec34:	1ac0      	subs	r0, r0, r3
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	6028      	str	r0, [r5, #0]
 800ec3a:	eb61 0103 	sbc.w	r1, r1, r3
 800ec3e:	6069      	str	r1, [r5, #4]
 800ec40:	4630      	mov	r0, r6
 800ec42:	b002      	add	sp, #8
 800ec44:	bd70      	pop	{r4, r5, r6, pc}
 800ec46:	f240 3621 	movw	r6, #801	@ 0x321
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	b002      	add	sp, #8
 800ec4e:	bd70      	pop	{r4, r5, r6, pc}
 800ec50:	260b      	movs	r6, #11
 800ec52:	4630      	mov	r0, r6
 800ec54:	b002      	add	sp, #8
 800ec56:	bd70      	pop	{r4, r5, r6, pc}
 800ec58:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800ec5c:	e7f0      	b.n	800ec40 <rcl_timer_get_time_until_next_call+0x44>
 800ec5e:	bf00      	nop

0800ec60 <rcl_timer_get_guard_condition>:
 800ec60:	b130      	cbz	r0, 800ec70 <rcl_timer_get_guard_condition+0x10>
 800ec62:	6800      	ldr	r0, [r0, #0]
 800ec64:	b120      	cbz	r0, 800ec70 <rcl_timer_get_guard_condition+0x10>
 800ec66:	68c3      	ldr	r3, [r0, #12]
 800ec68:	b10b      	cbz	r3, 800ec6e <rcl_timer_get_guard_condition+0xe>
 800ec6a:	3008      	adds	r0, #8
 800ec6c:	4770      	bx	lr
 800ec6e:	4618      	mov	r0, r3
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop

0800ec74 <rcl_validate_enclave_name_with_size>:
 800ec74:	b378      	cbz	r0, 800ecd6 <rcl_validate_enclave_name_with_size+0x62>
 800ec76:	b570      	push	{r4, r5, r6, lr}
 800ec78:	4615      	mov	r5, r2
 800ec7a:	b0c2      	sub	sp, #264	@ 0x108
 800ec7c:	b302      	cbz	r2, 800ecc0 <rcl_validate_enclave_name_with_size+0x4c>
 800ec7e:	461e      	mov	r6, r3
 800ec80:	466a      	mov	r2, sp
 800ec82:	ab01      	add	r3, sp, #4
 800ec84:	460c      	mov	r4, r1
 800ec86:	f003 f945 	bl	8011f14 <rmw_validate_namespace_with_size>
 800ec8a:	4684      	mov	ip, r0
 800ec8c:	b9e8      	cbnz	r0, 800ecca <rcl_validate_enclave_name_with_size+0x56>
 800ec8e:	9b00      	ldr	r3, [sp, #0]
 800ec90:	b923      	cbnz	r3, 800ec9c <rcl_validate_enclave_name_with_size+0x28>
 800ec92:	2300      	movs	r3, #0
 800ec94:	602b      	str	r3, [r5, #0]
 800ec96:	4660      	mov	r0, ip
 800ec98:	b042      	add	sp, #264	@ 0x108
 800ec9a:	bd70      	pop	{r4, r5, r6, pc}
 800ec9c:	2b07      	cmp	r3, #7
 800ec9e:	d007      	beq.n	800ecb0 <rcl_validate_enclave_name_with_size+0x3c>
 800eca0:	1e5a      	subs	r2, r3, #1
 800eca2:	2a05      	cmp	r2, #5
 800eca4:	d833      	bhi.n	800ed0e <rcl_validate_enclave_name_with_size+0x9a>
 800eca6:	e8df f002 	tbb	[pc, r2]
 800ecaa:	2c2f      	.short	0x2c2f
 800ecac:	1a232629 	.word	0x1a232629
 800ecb0:	2cff      	cmp	r4, #255	@ 0xff
 800ecb2:	d9ee      	bls.n	800ec92 <rcl_validate_enclave_name_with_size+0x1e>
 800ecb4:	602b      	str	r3, [r5, #0]
 800ecb6:	2e00      	cmp	r6, #0
 800ecb8:	d0ed      	beq.n	800ec96 <rcl_validate_enclave_name_with_size+0x22>
 800ecba:	23fe      	movs	r3, #254	@ 0xfe
 800ecbc:	6033      	str	r3, [r6, #0]
 800ecbe:	e7ea      	b.n	800ec96 <rcl_validate_enclave_name_with_size+0x22>
 800ecc0:	f04f 0c0b 	mov.w	ip, #11
 800ecc4:	4660      	mov	r0, ip
 800ecc6:	b042      	add	sp, #264	@ 0x108
 800ecc8:	bd70      	pop	{r4, r5, r6, pc}
 800ecca:	f7fe fbff 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 800ecce:	4684      	mov	ip, r0
 800ecd0:	4660      	mov	r0, ip
 800ecd2:	b042      	add	sp, #264	@ 0x108
 800ecd4:	bd70      	pop	{r4, r5, r6, pc}
 800ecd6:	f04f 0c0b 	mov.w	ip, #11
 800ecda:	4660      	mov	r0, ip
 800ecdc:	4770      	bx	lr
 800ecde:	2306      	movs	r3, #6
 800ece0:	602b      	str	r3, [r5, #0]
 800ece2:	2e00      	cmp	r6, #0
 800ece4:	d0d7      	beq.n	800ec96 <rcl_validate_enclave_name_with_size+0x22>
 800ece6:	9b01      	ldr	r3, [sp, #4]
 800ece8:	6033      	str	r3, [r6, #0]
 800ecea:	4660      	mov	r0, ip
 800ecec:	b042      	add	sp, #264	@ 0x108
 800ecee:	bd70      	pop	{r4, r5, r6, pc}
 800ecf0:	2305      	movs	r3, #5
 800ecf2:	602b      	str	r3, [r5, #0]
 800ecf4:	e7f5      	b.n	800ece2 <rcl_validate_enclave_name_with_size+0x6e>
 800ecf6:	2304      	movs	r3, #4
 800ecf8:	602b      	str	r3, [r5, #0]
 800ecfa:	e7f2      	b.n	800ece2 <rcl_validate_enclave_name_with_size+0x6e>
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	602b      	str	r3, [r5, #0]
 800ed00:	e7ef      	b.n	800ece2 <rcl_validate_enclave_name_with_size+0x6e>
 800ed02:	2302      	movs	r3, #2
 800ed04:	602b      	str	r3, [r5, #0]
 800ed06:	e7ec      	b.n	800ece2 <rcl_validate_enclave_name_with_size+0x6e>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	602b      	str	r3, [r5, #0]
 800ed0c:	e7e9      	b.n	800ece2 <rcl_validate_enclave_name_with_size+0x6e>
 800ed0e:	4a04      	ldr	r2, [pc, #16]	@ (800ed20 <rcl_validate_enclave_name_with_size+0xac>)
 800ed10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ed14:	a802      	add	r0, sp, #8
 800ed16:	f001 f825 	bl	800fd64 <rcutils_snprintf>
 800ed1a:	f04f 0c01 	mov.w	ip, #1
 800ed1e:	e7ba      	b.n	800ec96 <rcl_validate_enclave_name_with_size+0x22>
 800ed20:	0801c158 	.word	0x0801c158

0800ed24 <rcl_validate_enclave_name>:
 800ed24:	b168      	cbz	r0, 800ed42 <rcl_validate_enclave_name+0x1e>
 800ed26:	b570      	push	{r4, r5, r6, lr}
 800ed28:	460d      	mov	r5, r1
 800ed2a:	4616      	mov	r6, r2
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	f7f1 faaf 	bl	8000290 <strlen>
 800ed32:	4633      	mov	r3, r6
 800ed34:	4601      	mov	r1, r0
 800ed36:	462a      	mov	r2, r5
 800ed38:	4620      	mov	r0, r4
 800ed3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed3e:	f7ff bf99 	b.w	800ec74 <rcl_validate_enclave_name_with_size>
 800ed42:	200b      	movs	r0, #11
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop

0800ed48 <rcl_get_zero_initialized_wait_set>:
 800ed48:	b510      	push	{r4, lr}
 800ed4a:	4c08      	ldr	r4, [pc, #32]	@ (800ed6c <rcl_get_zero_initialized_wait_set+0x24>)
 800ed4c:	4686      	mov	lr, r0
 800ed4e:	4684      	mov	ip, r0
 800ed50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	f8cc 3000 	str.w	r3, [ip]
 800ed68:	4670      	mov	r0, lr
 800ed6a:	bd10      	pop	{r4, pc}
 800ed6c:	0801c1b8 	.word	0x0801c1b8

0800ed70 <rcl_wait_set_is_valid>:
 800ed70:	b118      	cbz	r0, 800ed7a <rcl_wait_set_is_valid+0xa>
 800ed72:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800ed74:	3800      	subs	r0, #0
 800ed76:	bf18      	it	ne
 800ed78:	2001      	movne	r0, #1
 800ed7a:	4770      	bx	lr

0800ed7c <rcl_wait_set_fini>:
 800ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed80:	b082      	sub	sp, #8
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f000 8095 	beq.w	800eeb2 <rcl_wait_set_fini+0x136>
 800ed88:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	2e00      	cmp	r6, #0
 800ed8e:	f000 808c 	beq.w	800eeaa <rcl_wait_set_fini+0x12e>
 800ed92:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800ed94:	f002 fc1c 	bl	80115d0 <rmw_destroy_wait_set>
 800ed98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ed9a:	1e06      	subs	r6, r0, #0
 800ed9c:	bf18      	it	ne
 800ed9e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800eda2:	2d00      	cmp	r5, #0
 800eda4:	f000 8081 	beq.w	800eeaa <rcl_wait_set_fini+0x12e>
 800eda8:	6820      	ldr	r0, [r4, #0]
 800edaa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800edae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800edb0:	2700      	movs	r7, #0
 800edb2:	6067      	str	r7, [r4, #4]
 800edb4:	602f      	str	r7, [r5, #0]
 800edb6:	b120      	cbz	r0, 800edc2 <rcl_wait_set_fini+0x46>
 800edb8:	9101      	str	r1, [sp, #4]
 800edba:	47c0      	blx	r8
 800edbc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800edbe:	9901      	ldr	r1, [sp, #4]
 800edc0:	6027      	str	r7, [r4, #0]
 800edc2:	68a8      	ldr	r0, [r5, #8]
 800edc4:	b120      	cbz	r0, 800edd0 <rcl_wait_set_fini+0x54>
 800edc6:	47c0      	blx	r8
 800edc8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800edca:	2300      	movs	r3, #0
 800edcc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800edd0:	68a0      	ldr	r0, [r4, #8]
 800edd2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800edd4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800edd6:	f04f 0800 	mov.w	r8, #0
 800edda:	f8c4 800c 	str.w	r8, [r4, #12]
 800edde:	f8c5 800c 	str.w	r8, [r5, #12]
 800ede2:	b128      	cbz	r0, 800edf0 <rcl_wait_set_fini+0x74>
 800ede4:	47b8      	blx	r7
 800ede6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ede8:	f8c4 8008 	str.w	r8, [r4, #8]
 800edec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800edee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800edf0:	6968      	ldr	r0, [r5, #20]
 800edf2:	f04f 0800 	mov.w	r8, #0
 800edf6:	f8c5 8010 	str.w	r8, [r5, #16]
 800edfa:	b128      	cbz	r0, 800ee08 <rcl_wait_set_fini+0x8c>
 800edfc:	47b8      	blx	r7
 800edfe:	f8c5 8014 	str.w	r8, [r5, #20]
 800ee02:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee04:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ee06:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ee08:	6920      	ldr	r0, [r4, #16]
 800ee0a:	f04f 0800 	mov.w	r8, #0
 800ee0e:	f8c4 8014 	str.w	r8, [r4, #20]
 800ee12:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800ee16:	b128      	cbz	r0, 800ee24 <rcl_wait_set_fini+0xa8>
 800ee18:	47b8      	blx	r7
 800ee1a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee1c:	f8c4 8010 	str.w	r8, [r4, #16]
 800ee20:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ee22:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ee24:	69a0      	ldr	r0, [r4, #24]
 800ee26:	f04f 0800 	mov.w	r8, #0
 800ee2a:	f8c4 801c 	str.w	r8, [r4, #28]
 800ee2e:	f8c5 8018 	str.w	r8, [r5, #24]
 800ee32:	b128      	cbz	r0, 800ee40 <rcl_wait_set_fini+0xc4>
 800ee34:	9101      	str	r1, [sp, #4]
 800ee36:	47b8      	blx	r7
 800ee38:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee3a:	9901      	ldr	r1, [sp, #4]
 800ee3c:	f8c4 8018 	str.w	r8, [r4, #24]
 800ee40:	6a28      	ldr	r0, [r5, #32]
 800ee42:	b120      	cbz	r0, 800ee4e <rcl_wait_set_fini+0xd2>
 800ee44:	47b8      	blx	r7
 800ee46:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800ee4e:	6a20      	ldr	r0, [r4, #32]
 800ee50:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800ee54:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ee56:	2700      	movs	r7, #0
 800ee58:	6267      	str	r7, [r4, #36]	@ 0x24
 800ee5a:	626f      	str	r7, [r5, #36]	@ 0x24
 800ee5c:	b120      	cbz	r0, 800ee68 <rcl_wait_set_fini+0xec>
 800ee5e:	9101      	str	r1, [sp, #4]
 800ee60:	47c0      	blx	r8
 800ee62:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee64:	9901      	ldr	r1, [sp, #4]
 800ee66:	6227      	str	r7, [r4, #32]
 800ee68:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800ee6a:	b120      	cbz	r0, 800ee76 <rcl_wait_set_fini+0xfa>
 800ee6c:	47c0      	blx	r8
 800ee6e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee70:	2300      	movs	r3, #0
 800ee72:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800ee76:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ee78:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800ee7c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ee7e:	2700      	movs	r7, #0
 800ee80:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800ee82:	632f      	str	r7, [r5, #48]	@ 0x30
 800ee84:	b120      	cbz	r0, 800ee90 <rcl_wait_set_fini+0x114>
 800ee86:	9101      	str	r1, [sp, #4]
 800ee88:	47c0      	blx	r8
 800ee8a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee8c:	9901      	ldr	r1, [sp, #4]
 800ee8e:	62a7      	str	r7, [r4, #40]	@ 0x28
 800ee90:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800ee92:	b120      	cbz	r0, 800ee9e <rcl_wait_set_fini+0x122>
 800ee94:	47c0      	blx	r8
 800ee96:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800ee9e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800eea0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800eea2:	4628      	mov	r0, r5
 800eea4:	4798      	blx	r3
 800eea6:	2300      	movs	r3, #0
 800eea8:	6323      	str	r3, [r4, #48]	@ 0x30
 800eeaa:	4630      	mov	r0, r6
 800eeac:	b002      	add	sp, #8
 800eeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb2:	260b      	movs	r6, #11
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	b002      	add	sp, #8
 800eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eebc <rcl_wait_set_add_subscription>:
 800eebc:	b318      	cbz	r0, 800ef06 <rcl_wait_set_add_subscription+0x4a>
 800eebe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eec0:	b570      	push	{r4, r5, r6, lr}
 800eec2:	4604      	mov	r4, r0
 800eec4:	b30b      	cbz	r3, 800ef0a <rcl_wait_set_add_subscription+0x4e>
 800eec6:	b319      	cbz	r1, 800ef10 <rcl_wait_set_add_subscription+0x54>
 800eec8:	681d      	ldr	r5, [r3, #0]
 800eeca:	6840      	ldr	r0, [r0, #4]
 800eecc:	4285      	cmp	r5, r0
 800eece:	d217      	bcs.n	800ef00 <rcl_wait_set_add_subscription+0x44>
 800eed0:	6820      	ldr	r0, [r4, #0]
 800eed2:	1c6e      	adds	r6, r5, #1
 800eed4:	601e      	str	r6, [r3, #0]
 800eed6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800eeda:	b102      	cbz	r2, 800eede <rcl_wait_set_add_subscription+0x22>
 800eedc:	6015      	str	r5, [r2, #0]
 800eede:	4608      	mov	r0, r1
 800eee0:	f7ff fd0a 	bl	800e8f8 <rcl_subscription_get_rmw_handle>
 800eee4:	b150      	cbz	r0, 800eefc <rcl_wait_set_add_subscription+0x40>
 800eee6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eee8:	6842      	ldr	r2, [r0, #4]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eef0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800eef2:	6853      	ldr	r3, [r2, #4]
 800eef4:	3301      	adds	r3, #1
 800eef6:	2000      	movs	r0, #0
 800eef8:	6053      	str	r3, [r2, #4]
 800eefa:	bd70      	pop	{r4, r5, r6, pc}
 800eefc:	2001      	movs	r0, #1
 800eefe:	bd70      	pop	{r4, r5, r6, pc}
 800ef00:	f240 3086 	movw	r0, #902	@ 0x386
 800ef04:	bd70      	pop	{r4, r5, r6, pc}
 800ef06:	200b      	movs	r0, #11
 800ef08:	4770      	bx	lr
 800ef0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ef0e:	bd70      	pop	{r4, r5, r6, pc}
 800ef10:	200b      	movs	r0, #11
 800ef12:	bd70      	pop	{r4, r5, r6, pc}

0800ef14 <rcl_wait_set_clear>:
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d073      	beq.n	800f000 <rcl_wait_set_clear+0xec>
 800ef18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ef1a:	b510      	push	{r4, lr}
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d070      	beq.n	800f004 <rcl_wait_set_clear+0xf0>
 800ef22:	6800      	ldr	r0, [r0, #0]
 800ef24:	b138      	cbz	r0, 800ef36 <rcl_wait_set_clear+0x22>
 800ef26:	6862      	ldr	r2, [r4, #4]
 800ef28:	2100      	movs	r1, #0
 800ef2a:	0092      	lsls	r2, r2, #2
 800ef2c:	f00a fc54 	bl	80197d8 <memset>
 800ef30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]
 800ef36:	68a0      	ldr	r0, [r4, #8]
 800ef38:	b138      	cbz	r0, 800ef4a <rcl_wait_set_clear+0x36>
 800ef3a:	68e2      	ldr	r2, [r4, #12]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	0092      	lsls	r2, r2, #2
 800ef40:	f00a fc4a 	bl	80197d8 <memset>
 800ef44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef46:	2200      	movs	r2, #0
 800ef48:	60da      	str	r2, [r3, #12]
 800ef4a:	69a0      	ldr	r0, [r4, #24]
 800ef4c:	b138      	cbz	r0, 800ef5e <rcl_wait_set_clear+0x4a>
 800ef4e:	69e2      	ldr	r2, [r4, #28]
 800ef50:	2100      	movs	r1, #0
 800ef52:	0092      	lsls	r2, r2, #2
 800ef54:	f00a fc40 	bl	80197d8 <memset>
 800ef58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	619a      	str	r2, [r3, #24]
 800ef5e:	6a20      	ldr	r0, [r4, #32]
 800ef60:	b138      	cbz	r0, 800ef72 <rcl_wait_set_clear+0x5e>
 800ef62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ef64:	2100      	movs	r1, #0
 800ef66:	0092      	lsls	r2, r2, #2
 800ef68:	f00a fc36 	bl	80197d8 <memset>
 800ef6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef6e:	2200      	movs	r2, #0
 800ef70:	625a      	str	r2, [r3, #36]	@ 0x24
 800ef72:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ef74:	b138      	cbz	r0, 800ef86 <rcl_wait_set_clear+0x72>
 800ef76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef78:	2100      	movs	r1, #0
 800ef7a:	0092      	lsls	r2, r2, #2
 800ef7c:	f00a fc2c 	bl	80197d8 <memset>
 800ef80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef82:	2200      	movs	r2, #0
 800ef84:	631a      	str	r2, [r3, #48]	@ 0x30
 800ef86:	6920      	ldr	r0, [r4, #16]
 800ef88:	b138      	cbz	r0, 800ef9a <rcl_wait_set_clear+0x86>
 800ef8a:	6962      	ldr	r2, [r4, #20]
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	0092      	lsls	r2, r2, #2
 800ef90:	f00a fc22 	bl	80197d8 <memset>
 800ef94:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef96:	2200      	movs	r2, #0
 800ef98:	641a      	str	r2, [r3, #64]	@ 0x40
 800ef9a:	6898      	ldr	r0, [r3, #8]
 800ef9c:	b138      	cbz	r0, 800efae <rcl_wait_set_clear+0x9a>
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	2100      	movs	r1, #0
 800efa2:	0092      	lsls	r2, r2, #2
 800efa4:	f00a fc18 	bl	80197d8 <memset>
 800efa8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800efaa:	2200      	movs	r2, #0
 800efac:	605a      	str	r2, [r3, #4]
 800efae:	6958      	ldr	r0, [r3, #20]
 800efb0:	b138      	cbz	r0, 800efc2 <rcl_wait_set_clear+0xae>
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	2100      	movs	r1, #0
 800efb6:	0092      	lsls	r2, r2, #2
 800efb8:	f00a fc0e 	bl	80197d8 <memset>
 800efbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800efbe:	2200      	movs	r2, #0
 800efc0:	611a      	str	r2, [r3, #16]
 800efc2:	6a18      	ldr	r0, [r3, #32]
 800efc4:	b138      	cbz	r0, 800efd6 <rcl_wait_set_clear+0xc2>
 800efc6:	69da      	ldr	r2, [r3, #28]
 800efc8:	2100      	movs	r1, #0
 800efca:	0092      	lsls	r2, r2, #2
 800efcc:	f00a fc04 	bl	80197d8 <memset>
 800efd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800efd2:	2200      	movs	r2, #0
 800efd4:	61da      	str	r2, [r3, #28]
 800efd6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800efd8:	b138      	cbz	r0, 800efea <rcl_wait_set_clear+0xd6>
 800efda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800efdc:	2100      	movs	r1, #0
 800efde:	0092      	lsls	r2, r2, #2
 800efe0:	f00a fbfa 	bl	80197d8 <memset>
 800efe4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800efe6:	2200      	movs	r2, #0
 800efe8:	629a      	str	r2, [r3, #40]	@ 0x28
 800efea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800efec:	b138      	cbz	r0, 800effe <rcl_wait_set_clear+0xea>
 800efee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eff0:	2100      	movs	r1, #0
 800eff2:	0092      	lsls	r2, r2, #2
 800eff4:	f00a fbf0 	bl	80197d8 <memset>
 800eff8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800effa:	2000      	movs	r0, #0
 800effc:	6358      	str	r0, [r3, #52]	@ 0x34
 800effe:	bd10      	pop	{r4, pc}
 800f000:	200b      	movs	r0, #11
 800f002:	4770      	bx	lr
 800f004:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f008:	bd10      	pop	{r4, pc}
 800f00a:	bf00      	nop

0800f00c <rcl_wait_set_resize>:
 800f00c:	2800      	cmp	r0, #0
 800f00e:	f000 8185 	beq.w	800f31c <rcl_wait_set_resize+0x310>
 800f012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f016:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800f018:	b083      	sub	sp, #12
 800f01a:	4605      	mov	r5, r0
 800f01c:	2c00      	cmp	r4, #0
 800f01e:	f000 817f 	beq.w	800f320 <rcl_wait_set_resize+0x314>
 800f022:	f04f 0900 	mov.w	r9, #0
 800f026:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800f02a:	461f      	mov	r7, r3
 800f02c:	4688      	mov	r8, r1
 800f02e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800f032:	4616      	mov	r6, r2
 800f034:	f8c0 9004 	str.w	r9, [r0, #4]
 800f038:	f8c4 9000 	str.w	r9, [r4]
 800f03c:	2900      	cmp	r1, #0
 800f03e:	f000 80bd 	beq.w	800f1bc <rcl_wait_set_resize+0x1b0>
 800f042:	008c      	lsls	r4, r1, #2
 800f044:	6800      	ldr	r0, [r0, #0]
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	4652      	mov	r2, sl
 800f04a:	4621      	mov	r1, r4
 800f04c:	4798      	blx	r3
 800f04e:	9b01      	ldr	r3, [sp, #4]
 800f050:	6028      	str	r0, [r5, #0]
 800f052:	2800      	cmp	r0, #0
 800f054:	f000 80cb 	beq.w	800f1ee <rcl_wait_set_resize+0x1e2>
 800f058:	4622      	mov	r2, r4
 800f05a:	4649      	mov	r1, r9
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	f00a fbbb 	bl	80197d8 <memset>
 800f062:	f8c5 8004 	str.w	r8, [r5, #4]
 800f066:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800f06a:	9b01      	ldr	r3, [sp, #4]
 800f06c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f070:	f8c8 9004 	str.w	r9, [r8, #4]
 800f074:	4652      	mov	r2, sl
 800f076:	4621      	mov	r1, r4
 800f078:	4798      	blx	r3
 800f07a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f07c:	f8c8 0008 	str.w	r0, [r8, #8]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 80ac 	beq.w	800f1e0 <rcl_wait_set_resize+0x1d4>
 800f088:	4622      	mov	r2, r4
 800f08a:	4649      	mov	r1, r9
 800f08c:	4618      	mov	r0, r3
 800f08e:	f00a fba3 	bl	80197d8 <memset>
 800f092:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f094:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f098:	f04f 0800 	mov.w	r8, #0
 800f09c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800f0a0:	f8c5 800c 	str.w	r8, [r5, #12]
 800f0a4:	f8c4 800c 	str.w	r8, [r4, #12]
 800f0a8:	2e00      	cmp	r6, #0
 800f0aa:	f040 80a4 	bne.w	800f1f6 <rcl_wait_set_resize+0x1ea>
 800f0ae:	68a8      	ldr	r0, [r5, #8]
 800f0b0:	b128      	cbz	r0, 800f0be <rcl_wait_set_resize+0xb2>
 800f0b2:	4649      	mov	r1, r9
 800f0b4:	4790      	blx	r2
 800f0b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f0b8:	60ae      	str	r6, [r5, #8]
 800f0ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f0be:	f04f 0800 	mov.w	r8, #0
 800f0c2:	19f6      	adds	r6, r6, r7
 800f0c4:	f8c4 8010 	str.w	r8, [r4, #16]
 800f0c8:	f040 80ac 	bne.w	800f224 <rcl_wait_set_resize+0x218>
 800f0cc:	6960      	ldr	r0, [r4, #20]
 800f0ce:	b130      	cbz	r0, 800f0de <rcl_wait_set_resize+0xd2>
 800f0d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	4798      	blx	r3
 800f0d6:	6166      	str	r6, [r4, #20]
 800f0d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f0da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f0de:	2600      	movs	r6, #0
 800f0e0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800f0e4:	616e      	str	r6, [r5, #20]
 800f0e6:	6426      	str	r6, [r4, #64]	@ 0x40
 800f0e8:	2f00      	cmp	r7, #0
 800f0ea:	f040 80ad 	bne.w	800f248 <rcl_wait_set_resize+0x23c>
 800f0ee:	6928      	ldr	r0, [r5, #16]
 800f0f0:	b138      	cbz	r0, 800f102 <rcl_wait_set_resize+0xf6>
 800f0f2:	4649      	mov	r1, r9
 800f0f4:	47d0      	blx	sl
 800f0f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f0f8:	612f      	str	r7, [r5, #16]
 800f0fa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800f0fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f104:	2600      	movs	r6, #0
 800f106:	61ee      	str	r6, [r5, #28]
 800f108:	61a6      	str	r6, [r4, #24]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f040 80af 	bne.w	800f26e <rcl_wait_set_resize+0x262>
 800f110:	69a8      	ldr	r0, [r5, #24]
 800f112:	b120      	cbz	r0, 800f11e <rcl_wait_set_resize+0x112>
 800f114:	4649      	mov	r1, r9
 800f116:	47d0      	blx	sl
 800f118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f11a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f11c:	61ab      	str	r3, [r5, #24]
 800f11e:	6a20      	ldr	r0, [r4, #32]
 800f120:	b128      	cbz	r0, 800f12e <rcl_wait_set_resize+0x122>
 800f122:	4649      	mov	r1, r9
 800f124:	47d0      	blx	sl
 800f126:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f128:	2300      	movs	r3, #0
 800f12a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f12e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f130:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800f132:	2600      	movs	r6, #0
 800f134:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800f138:	626e      	str	r6, [r5, #36]	@ 0x24
 800f13a:	6266      	str	r6, [r4, #36]	@ 0x24
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f000 80b6 	beq.w	800f2ae <rcl_wait_set_resize+0x2a2>
 800f142:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800f146:	6a28      	ldr	r0, [r5, #32]
 800f148:	463a      	mov	r2, r7
 800f14a:	4651      	mov	r1, sl
 800f14c:	47c8      	blx	r9
 800f14e:	6228      	str	r0, [r5, #32]
 800f150:	2800      	cmp	r0, #0
 800f152:	d04c      	beq.n	800f1ee <rcl_wait_set_resize+0x1e2>
 800f154:	4652      	mov	r2, sl
 800f156:	4631      	mov	r1, r6
 800f158:	f00a fb3e 	bl	80197d8 <memset>
 800f15c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f15e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f160:	626b      	str	r3, [r5, #36]	@ 0x24
 800f162:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f164:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f166:	463a      	mov	r2, r7
 800f168:	4651      	mov	r1, sl
 800f16a:	47c8      	blx	r9
 800f16c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f16e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800f170:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800f172:	2c00      	cmp	r4, #0
 800f174:	f000 80f0 	beq.w	800f358 <rcl_wait_set_resize+0x34c>
 800f178:	4620      	mov	r0, r4
 800f17a:	4652      	mov	r2, sl
 800f17c:	4631      	mov	r1, r6
 800f17e:	f00a fb2b 	bl	80197d8 <memset>
 800f182:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f186:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800f188:	2600      	movs	r6, #0
 800f18a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800f18e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800f190:	6326      	str	r6, [r4, #48]	@ 0x30
 800f192:	2b00      	cmp	r3, #0
 800f194:	f040 809d 	bne.w	800f2d2 <rcl_wait_set_resize+0x2c6>
 800f198:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800f19a:	b120      	cbz	r0, 800f1a6 <rcl_wait_set_resize+0x19a>
 800f19c:	4639      	mov	r1, r7
 800f19e:	47c0      	blx	r8
 800f1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f1a4:	62ab      	str	r3, [r5, #40]	@ 0x28
 800f1a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800f1a8:	b310      	cbz	r0, 800f1f0 <rcl_wait_set_resize+0x1e4>
 800f1aa:	4639      	mov	r1, r7
 800f1ac:	47c0      	blx	r8
 800f1ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800f1b6:	b003      	add	sp, #12
 800f1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1bc:	6800      	ldr	r0, [r0, #0]
 800f1be:	b120      	cbz	r0, 800f1ca <rcl_wait_set_resize+0x1be>
 800f1c0:	4651      	mov	r1, sl
 800f1c2:	47d8      	blx	fp
 800f1c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f1c6:	f8c5 8000 	str.w	r8, [r5]
 800f1ca:	68a0      	ldr	r0, [r4, #8]
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	f43f af61 	beq.w	800f094 <rcl_wait_set_resize+0x88>
 800f1d2:	4651      	mov	r1, sl
 800f1d4:	47d8      	blx	fp
 800f1d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f1de:	e759      	b.n	800f094 <rcl_wait_set_resize+0x88>
 800f1e0:	6828      	ldr	r0, [r5, #0]
 800f1e2:	9301      	str	r3, [sp, #4]
 800f1e4:	4651      	mov	r1, sl
 800f1e6:	47d8      	blx	fp
 800f1e8:	9b01      	ldr	r3, [sp, #4]
 800f1ea:	e9c5 3300 	strd	r3, r3, [r5]
 800f1ee:	200a      	movs	r0, #10
 800f1f0:	b003      	add	sp, #12
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	00b4      	lsls	r4, r6, #2
 800f1f8:	68a8      	ldr	r0, [r5, #8]
 800f1fa:	464a      	mov	r2, r9
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	4798      	blx	r3
 800f200:	60a8      	str	r0, [r5, #8]
 800f202:	2800      	cmp	r0, #0
 800f204:	d0f3      	beq.n	800f1ee <rcl_wait_set_resize+0x1e2>
 800f206:	4622      	mov	r2, r4
 800f208:	4641      	mov	r1, r8
 800f20a:	f00a fae5 	bl	80197d8 <memset>
 800f20e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f210:	60ee      	str	r6, [r5, #12]
 800f212:	f04f 0800 	mov.w	r8, #0
 800f216:	19f6      	adds	r6, r6, r7
 800f218:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f21c:	f8c4 8010 	str.w	r8, [r4, #16]
 800f220:	f43f af54 	beq.w	800f0cc <rcl_wait_set_resize+0xc0>
 800f224:	00b6      	lsls	r6, r6, #2
 800f226:	464a      	mov	r2, r9
 800f228:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f22a:	6960      	ldr	r0, [r4, #20]
 800f22c:	4631      	mov	r1, r6
 800f22e:	4798      	blx	r3
 800f230:	4681      	mov	r9, r0
 800f232:	6160      	str	r0, [r4, #20]
 800f234:	2800      	cmp	r0, #0
 800f236:	d076      	beq.n	800f326 <rcl_wait_set_resize+0x31a>
 800f238:	4632      	mov	r2, r6
 800f23a:	4641      	mov	r1, r8
 800f23c:	f00a facc 	bl	80197d8 <memset>
 800f240:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f242:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f246:	e74a      	b.n	800f0de <rcl_wait_set_resize+0xd2>
 800f248:	00bc      	lsls	r4, r7, #2
 800f24a:	6928      	ldr	r0, [r5, #16]
 800f24c:	464a      	mov	r2, r9
 800f24e:	4621      	mov	r1, r4
 800f250:	47c0      	blx	r8
 800f252:	6128      	str	r0, [r5, #16]
 800f254:	2800      	cmp	r0, #0
 800f256:	d0ca      	beq.n	800f1ee <rcl_wait_set_resize+0x1e2>
 800f258:	4622      	mov	r2, r4
 800f25a:	4631      	mov	r1, r6
 800f25c:	f00a fabc 	bl	80197d8 <memset>
 800f260:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f262:	616f      	str	r7, [r5, #20]
 800f264:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800f268:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f26c:	e749      	b.n	800f102 <rcl_wait_set_resize+0xf6>
 800f26e:	009c      	lsls	r4, r3, #2
 800f270:	69a8      	ldr	r0, [r5, #24]
 800f272:	464a      	mov	r2, r9
 800f274:	4621      	mov	r1, r4
 800f276:	47c0      	blx	r8
 800f278:	61a8      	str	r0, [r5, #24]
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d0b7      	beq.n	800f1ee <rcl_wait_set_resize+0x1e2>
 800f27e:	4622      	mov	r2, r4
 800f280:	4631      	mov	r1, r6
 800f282:	f00a faa9 	bl	80197d8 <memset>
 800f286:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800f288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f28a:	61eb      	str	r3, [r5, #28]
 800f28c:	6a38      	ldr	r0, [r7, #32]
 800f28e:	61fe      	str	r6, [r7, #28]
 800f290:	464a      	mov	r2, r9
 800f292:	4621      	mov	r1, r4
 800f294:	47c0      	blx	r8
 800f296:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f298:	6238      	str	r0, [r7, #32]
 800f29a:	6a1f      	ldr	r7, [r3, #32]
 800f29c:	2f00      	cmp	r7, #0
 800f29e:	d054      	beq.n	800f34a <rcl_wait_set_resize+0x33e>
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	f00a fa97 	bl	80197d8 <memset>
 800f2aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f2ac:	e73f      	b.n	800f12e <rcl_wait_set_resize+0x122>
 800f2ae:	6a28      	ldr	r0, [r5, #32]
 800f2b0:	b120      	cbz	r0, 800f2bc <rcl_wait_set_resize+0x2b0>
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	47c0      	blx	r8
 800f2b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f2ba:	622b      	str	r3, [r5, #32]
 800f2bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f43f af60 	beq.w	800f184 <rcl_wait_set_resize+0x178>
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	47c0      	blx	r8
 800f2c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800f2d0:	e758      	b.n	800f184 <rcl_wait_set_resize+0x178>
 800f2d2:	009c      	lsls	r4, r3, #2
 800f2d4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800f2d6:	463a      	mov	r2, r7
 800f2d8:	4621      	mov	r1, r4
 800f2da:	47c8      	blx	r9
 800f2dc:	62a8      	str	r0, [r5, #40]	@ 0x28
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d085      	beq.n	800f1ee <rcl_wait_set_resize+0x1e2>
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	4631      	mov	r1, r6
 800f2e6:	f00a fa77 	bl	80197d8 <memset>
 800f2ea:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800f2ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800f2f2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800f2f6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800f2fa:	463a      	mov	r2, r7
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	47c8      	blx	r9
 800f300:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f302:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800f306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f308:	b36b      	cbz	r3, 800f366 <rcl_wait_set_resize+0x35a>
 800f30a:	4622      	mov	r2, r4
 800f30c:	4631      	mov	r1, r6
 800f30e:	4618      	mov	r0, r3
 800f310:	f00a fa62 	bl	80197d8 <memset>
 800f314:	4630      	mov	r0, r6
 800f316:	b003      	add	sp, #12
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	200b      	movs	r0, #11
 800f31e:	4770      	bx	lr
 800f320:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f324:	e764      	b.n	800f1f0 <rcl_wait_set_resize+0x1e4>
 800f326:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f328:	68a8      	ldr	r0, [r5, #8]
 800f32a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800f32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f32e:	4798      	blx	r3
 800f330:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f332:	6928      	ldr	r0, [r5, #16]
 800f334:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f336:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800f338:	f8c5 900c 	str.w	r9, [r5, #12]
 800f33c:	f8c5 9008 	str.w	r9, [r5, #8]
 800f340:	4790      	blx	r2
 800f342:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800f346:	200a      	movs	r0, #10
 800f348:	e752      	b.n	800f1f0 <rcl_wait_set_resize+0x1e4>
 800f34a:	69a8      	ldr	r0, [r5, #24]
 800f34c:	4649      	mov	r1, r9
 800f34e:	47d0      	blx	sl
 800f350:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800f354:	200a      	movs	r0, #10
 800f356:	e74b      	b.n	800f1f0 <rcl_wait_set_resize+0x1e4>
 800f358:	6a28      	ldr	r0, [r5, #32]
 800f35a:	4639      	mov	r1, r7
 800f35c:	47c0      	blx	r8
 800f35e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800f362:	200a      	movs	r0, #10
 800f364:	e744      	b.n	800f1f0 <rcl_wait_set_resize+0x1e4>
 800f366:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800f368:	9301      	str	r3, [sp, #4]
 800f36a:	4639      	mov	r1, r7
 800f36c:	47c0      	blx	r8
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	200a      	movs	r0, #10
 800f372:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800f376:	e73b      	b.n	800f1f0 <rcl_wait_set_resize+0x1e4>

0800f378 <rcl_wait_set_init>:
 800f378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f37c:	b084      	sub	sp, #16
 800f37e:	4604      	mov	r4, r0
 800f380:	a810      	add	r0, sp, #64	@ 0x40
 800f382:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800f386:	460f      	mov	r7, r1
 800f388:	4690      	mov	r8, r2
 800f38a:	4699      	mov	r9, r3
 800f38c:	f000 faee 	bl	800f96c <rcutils_allocator_is_valid>
 800f390:	2800      	cmp	r0, #0
 800f392:	d06b      	beq.n	800f46c <rcl_wait_set_init+0xf4>
 800f394:	2c00      	cmp	r4, #0
 800f396:	d069      	beq.n	800f46c <rcl_wait_set_init+0xf4>
 800f398:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f39a:	b125      	cbz	r5, 800f3a6 <rcl_wait_set_init+0x2e>
 800f39c:	2564      	movs	r5, #100	@ 0x64
 800f39e:	4628      	mov	r0, r5
 800f3a0:	b004      	add	sp, #16
 800f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a6:	f1ba 0f00 	cmp.w	sl, #0
 800f3aa:	d05f      	beq.n	800f46c <rcl_wait_set_init+0xf4>
 800f3ac:	4650      	mov	r0, sl
 800f3ae:	f7fe f8ab 	bl	800d508 <rcl_context_is_valid>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d067      	beq.n	800f486 <rcl_wait_set_init+0x10e>
 800f3b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3b8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800f3ba:	205c      	movs	r0, #92	@ 0x5c
 800f3bc:	4798      	blx	r3
 800f3be:	6320      	str	r0, [r4, #48]	@ 0x30
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	d062      	beq.n	800f48a <rcl_wait_set_init+0x112>
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	225c      	movs	r2, #92	@ 0x5c
 800f3c8:	f00a fa06 	bl	80197d8 <memset>
 800f3cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800f3d0:	eb03 0e02 	add.w	lr, r3, r2
 800f3d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3d6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800f3d8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f3dc:	449e      	add	lr, r3
 800f3de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3e2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800f3e6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800f3ea:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800f3ee:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800f3f2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800f3f6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800f3fa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800f3fe:	f8da a000 	ldr.w	sl, [sl]
 800f402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f404:	44c6      	add	lr, r8
 800f406:	f8dc 3000 	ldr.w	r3, [ip]
 800f40a:	602b      	str	r3, [r5, #0]
 800f40c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800f410:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800f414:	f002 f8d2 	bl	80115bc <rmw_create_wait_set>
 800f418:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f41a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800f41c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f41e:	b350      	cbz	r0, 800f476 <rcl_wait_set_init+0xfe>
 800f420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f422:	9302      	str	r3, [sp, #8]
 800f424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f426:	9301      	str	r3, [sp, #4]
 800f428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	4642      	mov	r2, r8
 800f42e:	464b      	mov	r3, r9
 800f430:	4639      	mov	r1, r7
 800f432:	4620      	mov	r0, r4
 800f434:	f7ff fdea 	bl	800f00c <rcl_wait_set_resize>
 800f438:	4605      	mov	r5, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d0af      	beq.n	800f39e <rcl_wait_set_init+0x26>
 800f43e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f440:	bb2b      	cbnz	r3, 800f48e <rcl_wait_set_init+0x116>
 800f442:	2600      	movs	r6, #0
 800f444:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800f448:	9600      	str	r6, [sp, #0]
 800f44a:	4633      	mov	r3, r6
 800f44c:	4632      	mov	r2, r6
 800f44e:	4631      	mov	r1, r6
 800f450:	4620      	mov	r0, r4
 800f452:	f7ff fddb 	bl	800f00c <rcl_wait_set_resize>
 800f456:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f458:	2800      	cmp	r0, #0
 800f45a:	d0a0      	beq.n	800f39e <rcl_wait_set_init+0x26>
 800f45c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800f45e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800f460:	4798      	blx	r3
 800f462:	4628      	mov	r0, r5
 800f464:	6326      	str	r6, [r4, #48]	@ 0x30
 800f466:	b004      	add	sp, #16
 800f468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f46c:	250b      	movs	r5, #11
 800f46e:	4628      	mov	r0, r5
 800f470:	b004      	add	sp, #16
 800f472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f476:	2501      	movs	r5, #1
 800f478:	f002 f8aa 	bl	80115d0 <rmw_destroy_wait_set>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	bf18      	it	ne
 800f480:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800f484:	e7dd      	b.n	800f442 <rcl_wait_set_init+0xca>
 800f486:	2565      	movs	r5, #101	@ 0x65
 800f488:	e789      	b.n	800f39e <rcl_wait_set_init+0x26>
 800f48a:	250a      	movs	r5, #10
 800f48c:	e787      	b.n	800f39e <rcl_wait_set_init+0x26>
 800f48e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f490:	e7f2      	b.n	800f478 <rcl_wait_set_init+0x100>
 800f492:	bf00      	nop

0800f494 <rcl_wait_set_add_guard_condition>:
 800f494:	b318      	cbz	r0, 800f4de <rcl_wait_set_add_guard_condition+0x4a>
 800f496:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f498:	b570      	push	{r4, r5, r6, lr}
 800f49a:	4604      	mov	r4, r0
 800f49c:	b30b      	cbz	r3, 800f4e2 <rcl_wait_set_add_guard_condition+0x4e>
 800f49e:	b319      	cbz	r1, 800f4e8 <rcl_wait_set_add_guard_condition+0x54>
 800f4a0:	68dd      	ldr	r5, [r3, #12]
 800f4a2:	68c0      	ldr	r0, [r0, #12]
 800f4a4:	4285      	cmp	r5, r0
 800f4a6:	d217      	bcs.n	800f4d8 <rcl_wait_set_add_guard_condition+0x44>
 800f4a8:	68a0      	ldr	r0, [r4, #8]
 800f4aa:	1c6e      	adds	r6, r5, #1
 800f4ac:	60de      	str	r6, [r3, #12]
 800f4ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f4b2:	b102      	cbz	r2, 800f4b6 <rcl_wait_set_add_guard_condition+0x22>
 800f4b4:	6015      	str	r5, [r2, #0]
 800f4b6:	4608      	mov	r0, r1
 800f4b8:	f007 fd2c 	bl	8016f14 <rcl_guard_condition_get_rmw_handle>
 800f4bc:	b150      	cbz	r0, 800f4d4 <rcl_wait_set_add_guard_condition+0x40>
 800f4be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f4c0:	6842      	ldr	r2, [r0, #4]
 800f4c2:	695b      	ldr	r3, [r3, #20]
 800f4c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f4ca:	6913      	ldr	r3, [r2, #16]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	6113      	str	r3, [r2, #16]
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}
 800f4d4:	2001      	movs	r0, #1
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	f240 3086 	movw	r0, #902	@ 0x386
 800f4dc:	bd70      	pop	{r4, r5, r6, pc}
 800f4de:	200b      	movs	r0, #11
 800f4e0:	4770      	bx	lr
 800f4e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	200b      	movs	r0, #11
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}

0800f4ec <rcl_wait_set_add_timer>:
 800f4ec:	b328      	cbz	r0, 800f53a <rcl_wait_set_add_timer+0x4e>
 800f4ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f4f0:	b570      	push	{r4, r5, r6, lr}
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	b31b      	cbz	r3, 800f53e <rcl_wait_set_add_timer+0x52>
 800f4f6:	b329      	cbz	r1, 800f544 <rcl_wait_set_add_timer+0x58>
 800f4f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800f4fa:	6965      	ldr	r5, [r4, #20]
 800f4fc:	42a8      	cmp	r0, r5
 800f4fe:	d219      	bcs.n	800f534 <rcl_wait_set_add_timer+0x48>
 800f500:	6925      	ldr	r5, [r4, #16]
 800f502:	1c46      	adds	r6, r0, #1
 800f504:	641e      	str	r6, [r3, #64]	@ 0x40
 800f506:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800f50a:	b102      	cbz	r2, 800f50e <rcl_wait_set_add_timer+0x22>
 800f50c:	6010      	str	r0, [r2, #0]
 800f50e:	4608      	mov	r0, r1
 800f510:	f7ff fba6 	bl	800ec60 <rcl_timer_get_guard_condition>
 800f514:	b168      	cbz	r0, 800f532 <rcl_wait_set_add_timer+0x46>
 800f516:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f518:	68e3      	ldr	r3, [r4, #12]
 800f51a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800f51c:	3b01      	subs	r3, #1
 800f51e:	441d      	add	r5, r3
 800f520:	f007 fcf8 	bl	8016f14 <rcl_guard_condition_get_rmw_handle>
 800f524:	b180      	cbz	r0, 800f548 <rcl_wait_set_add_timer+0x5c>
 800f526:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f528:	6842      	ldr	r2, [r0, #4]
 800f52a:	695b      	ldr	r3, [r3, #20]
 800f52c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f530:	2000      	movs	r0, #0
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	f240 3086 	movw	r0, #902	@ 0x386
 800f538:	bd70      	pop	{r4, r5, r6, pc}
 800f53a:	200b      	movs	r0, #11
 800f53c:	4770      	bx	lr
 800f53e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f542:	bd70      	pop	{r4, r5, r6, pc}
 800f544:	200b      	movs	r0, #11
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	2001      	movs	r0, #1
 800f54a:	bd70      	pop	{r4, r5, r6, pc}

0800f54c <rcl_wait_set_add_client>:
 800f54c:	b318      	cbz	r0, 800f596 <rcl_wait_set_add_client+0x4a>
 800f54e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f550:	b570      	push	{r4, r5, r6, lr}
 800f552:	4604      	mov	r4, r0
 800f554:	b30b      	cbz	r3, 800f59a <rcl_wait_set_add_client+0x4e>
 800f556:	b319      	cbz	r1, 800f5a0 <rcl_wait_set_add_client+0x54>
 800f558:	699d      	ldr	r5, [r3, #24]
 800f55a:	69c0      	ldr	r0, [r0, #28]
 800f55c:	4285      	cmp	r5, r0
 800f55e:	d217      	bcs.n	800f590 <rcl_wait_set_add_client+0x44>
 800f560:	69a0      	ldr	r0, [r4, #24]
 800f562:	1c6e      	adds	r6, r5, #1
 800f564:	619e      	str	r6, [r3, #24]
 800f566:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f56a:	b102      	cbz	r2, 800f56e <rcl_wait_set_add_client+0x22>
 800f56c:	6015      	str	r5, [r2, #0]
 800f56e:	4608      	mov	r0, r1
 800f570:	f7fd fea4 	bl	800d2bc <rcl_client_get_rmw_handle>
 800f574:	b150      	cbz	r0, 800f58c <rcl_wait_set_add_client+0x40>
 800f576:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f578:	6842      	ldr	r2, [r0, #4]
 800f57a:	6a1b      	ldr	r3, [r3, #32]
 800f57c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f580:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f582:	69d3      	ldr	r3, [r2, #28]
 800f584:	3301      	adds	r3, #1
 800f586:	2000      	movs	r0, #0
 800f588:	61d3      	str	r3, [r2, #28]
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	2001      	movs	r0, #1
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
 800f590:	f240 3086 	movw	r0, #902	@ 0x386
 800f594:	bd70      	pop	{r4, r5, r6, pc}
 800f596:	200b      	movs	r0, #11
 800f598:	4770      	bx	lr
 800f59a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	200b      	movs	r0, #11
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}

0800f5a4 <rcl_wait_set_add_service>:
 800f5a4:	b318      	cbz	r0, 800f5ee <rcl_wait_set_add_service+0x4a>
 800f5a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	b30b      	cbz	r3, 800f5f2 <rcl_wait_set_add_service+0x4e>
 800f5ae:	b319      	cbz	r1, 800f5f8 <rcl_wait_set_add_service+0x54>
 800f5b0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800f5b2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800f5b4:	4285      	cmp	r5, r0
 800f5b6:	d217      	bcs.n	800f5e8 <rcl_wait_set_add_service+0x44>
 800f5b8:	6a20      	ldr	r0, [r4, #32]
 800f5ba:	1c6e      	adds	r6, r5, #1
 800f5bc:	625e      	str	r6, [r3, #36]	@ 0x24
 800f5be:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f5c2:	b102      	cbz	r2, 800f5c6 <rcl_wait_set_add_service+0x22>
 800f5c4:	6015      	str	r5, [r2, #0]
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	f7fe ff36 	bl	800e438 <rcl_service_get_rmw_handle>
 800f5cc:	b150      	cbz	r0, 800f5e4 <rcl_wait_set_add_service+0x40>
 800f5ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f5d0:	6842      	ldr	r2, [r0, #4]
 800f5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f5da:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800f5dc:	3301      	adds	r3, #1
 800f5de:	2000      	movs	r0, #0
 800f5e0:	6293      	str	r3, [r2, #40]	@ 0x28
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}
 800f5e4:	2001      	movs	r0, #1
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}
 800f5e8:	f240 3086 	movw	r0, #902	@ 0x386
 800f5ec:	bd70      	pop	{r4, r5, r6, pc}
 800f5ee:	200b      	movs	r0, #11
 800f5f0:	4770      	bx	lr
 800f5f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	200b      	movs	r0, #11
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}
 800f5fc:	0000      	movs	r0, r0
	...

0800f600 <rcl_wait>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	ed2d 8b02 	vpush	{d8}
 800f608:	b08d      	sub	sp, #52	@ 0x34
 800f60a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f60e:	2800      	cmp	r0, #0
 800f610:	f000 8143 	beq.w	800f89a <rcl_wait+0x29a>
 800f614:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800f616:	4605      	mov	r5, r0
 800f618:	2e00      	cmp	r6, #0
 800f61a:	f000 8112 	beq.w	800f842 <rcl_wait+0x242>
 800f61e:	6843      	ldr	r3, [r0, #4]
 800f620:	b983      	cbnz	r3, 800f644 <rcl_wait+0x44>
 800f622:	68eb      	ldr	r3, [r5, #12]
 800f624:	b973      	cbnz	r3, 800f644 <rcl_wait+0x44>
 800f626:	696b      	ldr	r3, [r5, #20]
 800f628:	b963      	cbnz	r3, 800f644 <rcl_wait+0x44>
 800f62a:	69eb      	ldr	r3, [r5, #28]
 800f62c:	b953      	cbnz	r3, 800f644 <rcl_wait+0x44>
 800f62e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800f630:	b943      	cbnz	r3, 800f644 <rcl_wait+0x44>
 800f632:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800f634:	b933      	cbnz	r3, 800f644 <rcl_wait+0x44>
 800f636:	f240 3085 	movw	r0, #901	@ 0x385
 800f63a:	b00d      	add	sp, #52	@ 0x34
 800f63c:	ecbd 8b02 	vpop	{d8}
 800f640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f644:	9b04      	ldr	r3, [sp, #16]
 800f646:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800f648:	2b01      	cmp	r3, #1
 800f64a:	9b05      	ldr	r3, [sp, #20]
 800f64c:	f173 0300 	sbcs.w	r3, r3, #0
 800f650:	f2c0 80f0 	blt.w	800f834 <rcl_wait+0x234>
 800f654:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800f658:	4643      	mov	r3, r8
 800f65a:	2a00      	cmp	r2, #0
 800f65c:	f000 8133 	beq.w	800f8c6 <rcl_wait+0x2c6>
 800f660:	2400      	movs	r4, #0
 800f662:	4613      	mov	r3, r2
 800f664:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800f8d8 <rcl_wait+0x2d8>
 800f668:	46a2      	mov	sl, r4
 800f66a:	46a3      	mov	fp, r4
 800f66c:	f240 3921 	movw	r9, #801	@ 0x321
 800f670:	4632      	mov	r2, r6
 800f672:	e014      	b.n	800f69e <rcl_wait+0x9e>
 800f674:	2800      	cmp	r0, #0
 800f676:	d1e0      	bne.n	800f63a <rcl_wait+0x3a>
 800f678:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f67c:	4542      	cmp	r2, r8
 800f67e:	eb73 0107 	sbcs.w	r1, r3, r7
 800f682:	da03      	bge.n	800f68c <rcl_wait+0x8c>
 800f684:	4690      	mov	r8, r2
 800f686:	461f      	mov	r7, r3
 800f688:	f04f 0b01 	mov.w	fp, #1
 800f68c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800f68e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f690:	3401      	adds	r4, #1
 800f692:	f14a 0a00 	adc.w	sl, sl, #0
 800f696:	429c      	cmp	r4, r3
 800f698:	f17a 0100 	sbcs.w	r1, sl, #0
 800f69c:	d228      	bcs.n	800f6f0 <rcl_wait+0xf0>
 800f69e:	6928      	ldr	r0, [r5, #16]
 800f6a0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f6a4:	a908      	add	r1, sp, #32
 800f6a6:	00a6      	lsls	r6, r4, #2
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d0f1      	beq.n	800f690 <rcl_wait+0x90>
 800f6ac:	68eb      	ldr	r3, [r5, #12]
 800f6ae:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800f6b2:	4423      	add	r3, r4
 800f6b4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800f6b8:	f1be 0f00 	cmp.w	lr, #0
 800f6bc:	d006      	beq.n	800f6cc <rcl_wait+0xcc>
 800f6be:	6913      	ldr	r3, [r2, #16]
 800f6c0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	6113      	str	r3, [r2, #16]
 800f6c8:	692b      	ldr	r3, [r5, #16]
 800f6ca:	5998      	ldr	r0, [r3, r6]
 800f6cc:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f6d0:	f7ff fa94 	bl	800ebfc <rcl_timer_get_time_until_next_call>
 800f6d4:	4548      	cmp	r0, r9
 800f6d6:	d1cd      	bne.n	800f674 <rcl_wait+0x74>
 800f6d8:	692b      	ldr	r3, [r5, #16]
 800f6da:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800f6dc:	2100      	movs	r1, #0
 800f6de:	5199      	str	r1, [r3, r6]
 800f6e0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f6e2:	3401      	adds	r4, #1
 800f6e4:	f14a 0a00 	adc.w	sl, sl, #0
 800f6e8:	429c      	cmp	r4, r3
 800f6ea:	f17a 0100 	sbcs.w	r1, sl, #0
 800f6ee:	d3d6      	bcc.n	800f69e <rcl_wait+0x9e>
 800f6f0:	4616      	mov	r6, r2
 800f6f2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	46d9      	mov	r9, fp
 800f6fa:	f040 80a9 	bne.w	800f850 <rcl_wait+0x250>
 800f6fe:	2300      	movs	r3, #0
 800f700:	2200      	movs	r2, #0
 800f702:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f706:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800f70a:	ab08      	add	r3, sp, #32
 800f70c:	9302      	str	r3, [sp, #8]
 800f70e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800f710:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800f714:	e9cd 3200 	strd	r3, r2, [sp]
 800f718:	f106 0110 	add.w	r1, r6, #16
 800f71c:	f106 031c 	add.w	r3, r6, #28
 800f720:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800f724:	1d30      	adds	r0, r6, #4
 800f726:	f001 fdd1 	bl	80112cc <rmw_wait>
 800f72a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f72c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f72e:	4680      	mov	r8, r0
 800f730:	b1ca      	cbz	r2, 800f766 <rcl_wait+0x166>
 800f732:	2400      	movs	r4, #0
 800f734:	4627      	mov	r7, r4
 800f736:	692a      	ldr	r2, [r5, #16]
 800f738:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800f73c:	f10d 011f 	add.w	r1, sp, #31
 800f740:	00a6      	lsls	r6, r4, #2
 800f742:	b160      	cbz	r0, 800f75e <rcl_wait+0x15e>
 800f744:	f88d 701f 	strb.w	r7, [sp, #31]
 800f748:	f7ff fa1e 	bl	800eb88 <rcl_timer_is_ready>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	f47f af74 	bne.w	800f63a <rcl_wait+0x3a>
 800f752:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f756:	b90b      	cbnz	r3, 800f75c <rcl_wait+0x15c>
 800f758:	692a      	ldr	r2, [r5, #16]
 800f75a:	5193      	str	r3, [r2, r6]
 800f75c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f75e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f760:	3401      	adds	r4, #1
 800f762:	42a2      	cmp	r2, r4
 800f764:	d8e7      	bhi.n	800f736 <rcl_wait+0x136>
 800f766:	f038 0002 	bics.w	r0, r8, #2
 800f76a:	f040 8090 	bne.w	800f88e <rcl_wait+0x28e>
 800f76e:	686e      	ldr	r6, [r5, #4]
 800f770:	4602      	mov	r2, r0
 800f772:	b91e      	cbnz	r6, 800f77c <rcl_wait+0x17c>
 800f774:	e00d      	b.n	800f792 <rcl_wait+0x192>
 800f776:	3201      	adds	r2, #1
 800f778:	42b2      	cmp	r2, r6
 800f77a:	d00a      	beq.n	800f792 <rcl_wait+0x192>
 800f77c:	6899      	ldr	r1, [r3, #8]
 800f77e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f782:	2900      	cmp	r1, #0
 800f784:	d1f7      	bne.n	800f776 <rcl_wait+0x176>
 800f786:	682c      	ldr	r4, [r5, #0]
 800f788:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f78c:	3201      	adds	r2, #1
 800f78e:	42b2      	cmp	r2, r6
 800f790:	d1f4      	bne.n	800f77c <rcl_wait+0x17c>
 800f792:	68ee      	ldr	r6, [r5, #12]
 800f794:	2200      	movs	r2, #0
 800f796:	b91e      	cbnz	r6, 800f7a0 <rcl_wait+0x1a0>
 800f798:	e00d      	b.n	800f7b6 <rcl_wait+0x1b6>
 800f79a:	3201      	adds	r2, #1
 800f79c:	42b2      	cmp	r2, r6
 800f79e:	d00a      	beq.n	800f7b6 <rcl_wait+0x1b6>
 800f7a0:	6959      	ldr	r1, [r3, #20]
 800f7a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f7a6:	2900      	cmp	r1, #0
 800f7a8:	d1f7      	bne.n	800f79a <rcl_wait+0x19a>
 800f7aa:	68ac      	ldr	r4, [r5, #8]
 800f7ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f7b0:	3201      	adds	r2, #1
 800f7b2:	42b2      	cmp	r2, r6
 800f7b4:	d1f4      	bne.n	800f7a0 <rcl_wait+0x1a0>
 800f7b6:	69ee      	ldr	r6, [r5, #28]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	b91e      	cbnz	r6, 800f7c4 <rcl_wait+0x1c4>
 800f7bc:	e00d      	b.n	800f7da <rcl_wait+0x1da>
 800f7be:	3201      	adds	r2, #1
 800f7c0:	42b2      	cmp	r2, r6
 800f7c2:	d00a      	beq.n	800f7da <rcl_wait+0x1da>
 800f7c4:	6a19      	ldr	r1, [r3, #32]
 800f7c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f7ca:	2900      	cmp	r1, #0
 800f7cc:	d1f7      	bne.n	800f7be <rcl_wait+0x1be>
 800f7ce:	69ac      	ldr	r4, [r5, #24]
 800f7d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f7d4:	3201      	adds	r2, #1
 800f7d6:	42b2      	cmp	r2, r6
 800f7d8:	d1f4      	bne.n	800f7c4 <rcl_wait+0x1c4>
 800f7da:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800f7dc:	2200      	movs	r2, #0
 800f7de:	b91e      	cbnz	r6, 800f7e8 <rcl_wait+0x1e8>
 800f7e0:	e00d      	b.n	800f7fe <rcl_wait+0x1fe>
 800f7e2:	3201      	adds	r2, #1
 800f7e4:	4296      	cmp	r6, r2
 800f7e6:	d00a      	beq.n	800f7fe <rcl_wait+0x1fe>
 800f7e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f7ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f7ee:	2900      	cmp	r1, #0
 800f7f0:	d1f7      	bne.n	800f7e2 <rcl_wait+0x1e2>
 800f7f2:	6a2c      	ldr	r4, [r5, #32]
 800f7f4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f7f8:	3201      	adds	r2, #1
 800f7fa:	4296      	cmp	r6, r2
 800f7fc:	d1f4      	bne.n	800f7e8 <rcl_wait+0x1e8>
 800f7fe:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800f800:	2200      	movs	r2, #0
 800f802:	b91e      	cbnz	r6, 800f80c <rcl_wait+0x20c>
 800f804:	e00d      	b.n	800f822 <rcl_wait+0x222>
 800f806:	3201      	adds	r2, #1
 800f808:	42b2      	cmp	r2, r6
 800f80a:	d00a      	beq.n	800f822 <rcl_wait+0x222>
 800f80c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800f80e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f812:	2900      	cmp	r1, #0
 800f814:	d1f7      	bne.n	800f806 <rcl_wait+0x206>
 800f816:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800f818:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f81c:	3201      	adds	r2, #1
 800f81e:	42b2      	cmp	r2, r6
 800f820:	d1f4      	bne.n	800f80c <rcl_wait+0x20c>
 800f822:	f1b8 0f02 	cmp.w	r8, #2
 800f826:	f47f af08 	bne.w	800f63a <rcl_wait+0x3a>
 800f82a:	464b      	mov	r3, r9
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	bf08      	it	eq
 800f830:	2002      	moveq	r0, #2
 800f832:	e702      	b.n	800f63a <rcl_wait+0x3a>
 800f834:	2a00      	cmp	r2, #0
 800f836:	d03a      	beq.n	800f8ae <rcl_wait+0x2ae>
 800f838:	f04f 38ff 	mov.w	r8, #4294967295
 800f83c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f840:	e70e      	b.n	800f660 <rcl_wait+0x60>
 800f842:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f846:	b00d      	add	sp, #52	@ 0x34
 800f848:	ecbd 8b02 	vpop	{d8}
 800f84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f850:	9b04      	ldr	r3, [sp, #16]
 800f852:	2b01      	cmp	r3, #1
 800f854:	9b05      	ldr	r3, [sp, #20]
 800f856:	f173 0300 	sbcs.w	r3, r3, #0
 800f85a:	db24      	blt.n	800f8a6 <rcl_wait+0x2a6>
 800f85c:	2f00      	cmp	r7, #0
 800f85e:	bfbc      	itt	lt
 800f860:	f04f 0800 	movlt.w	r8, #0
 800f864:	4647      	movlt	r7, r8
 800f866:	a31e      	add	r3, pc, #120	@ (adr r3, 800f8e0 <rcl_wait+0x2e0>)
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	4640      	mov	r0, r8
 800f86e:	4639      	mov	r1, r7
 800f870:	f7f1 f9fa 	bl	8000c68 <__aeabi_ldivmod>
 800f874:	a31a      	add	r3, pc, #104	@ (adr r3, 800f8e0 <rcl_wait+0x2e0>)
 800f876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f87e:	4640      	mov	r0, r8
 800f880:	4639      	mov	r1, r7
 800f882:	f7f1 f9f1 	bl	8000c68 <__aeabi_ldivmod>
 800f886:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800f88a:	ab08      	add	r3, sp, #32
 800f88c:	e73e      	b.n	800f70c <rcl_wait+0x10c>
 800f88e:	2001      	movs	r0, #1
 800f890:	b00d      	add	sp, #52	@ 0x34
 800f892:	ecbd 8b02 	vpop	{d8}
 800f896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89a:	200b      	movs	r0, #11
 800f89c:	b00d      	add	sp, #52	@ 0x34
 800f89e:	ecbd 8b02 	vpop	{d8}
 800f8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a6:	465b      	mov	r3, fp
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1d7      	bne.n	800f85c <rcl_wait+0x25c>
 800f8ac:	e72e      	b.n	800f70c <rcl_wait+0x10c>
 800f8ae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f8b2:	430b      	orrs	r3, r1
 800f8b4:	bf08      	it	eq
 800f8b6:	4691      	moveq	r9, r2
 800f8b8:	f43f af21 	beq.w	800f6fe <rcl_wait+0xfe>
 800f8bc:	9b04      	ldr	r3, [sp, #16]
 800f8be:	f04f 38ff 	mov.w	r8, #4294967295
 800f8c2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	9b05      	ldr	r3, [sp, #20]
 800f8ca:	f173 0300 	sbcs.w	r3, r3, #0
 800f8ce:	f04f 0300 	mov.w	r3, #0
 800f8d2:	4699      	mov	r9, r3
 800f8d4:	dac2      	bge.n	800f85c <rcl_wait+0x25c>
 800f8d6:	e719      	b.n	800f70c <rcl_wait+0x10c>
 800f8d8:	ffffffff 	.word	0xffffffff
 800f8dc:	7fffffff 	.word	0x7fffffff
 800f8e0:	3b9aca00 	.word	0x3b9aca00
 800f8e4:	00000000 	.word	0x00000000

0800f8e8 <__default_zero_allocate>:
 800f8e8:	f008 bda4 	b.w	8018434 <calloc>

0800f8ec <__default_reallocate>:
 800f8ec:	f008 bf42 	b.w	8018774 <realloc>

0800f8f0 <__default_deallocate>:
 800f8f0:	f008 be1e 	b.w	8018530 <free>

0800f8f4 <__default_allocate>:
 800f8f4:	f008 be14 	b.w	8018520 <malloc>

0800f8f8 <rcutils_get_zero_initialized_allocator>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	4c05      	ldr	r4, [pc, #20]	@ (800f910 <rcutils_get_zero_initialized_allocator+0x18>)
 800f8fc:	4686      	mov	lr, r0
 800f8fe:	4684      	mov	ip, r0
 800f900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	f8cc 3000 	str.w	r3, [ip]
 800f90c:	4670      	mov	r0, lr
 800f90e:	bd10      	pop	{r4, pc}
 800f910:	0801c1ec 	.word	0x0801c1ec

0800f914 <rcutils_set_default_allocator>:
 800f914:	b1a8      	cbz	r0, 800f942 <rcutils_set_default_allocator+0x2e>
 800f916:	6802      	ldr	r2, [r0, #0]
 800f918:	b1a2      	cbz	r2, 800f944 <rcutils_set_default_allocator+0x30>
 800f91a:	6841      	ldr	r1, [r0, #4]
 800f91c:	b1a1      	cbz	r1, 800f948 <rcutils_set_default_allocator+0x34>
 800f91e:	b410      	push	{r4}
 800f920:	68c4      	ldr	r4, [r0, #12]
 800f922:	b164      	cbz	r4, 800f93e <rcutils_set_default_allocator+0x2a>
 800f924:	6880      	ldr	r0, [r0, #8]
 800f926:	b138      	cbz	r0, 800f938 <rcutils_set_default_allocator+0x24>
 800f928:	4b08      	ldr	r3, [pc, #32]	@ (800f94c <rcutils_set_default_allocator+0x38>)
 800f92a:	601a      	str	r2, [r3, #0]
 800f92c:	2200      	movs	r2, #0
 800f92e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f932:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f936:	2001      	movs	r0, #1
 800f938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	4620      	mov	r0, r4
 800f940:	e7fa      	b.n	800f938 <rcutils_set_default_allocator+0x24>
 800f942:	4770      	bx	lr
 800f944:	4610      	mov	r0, r2
 800f946:	4770      	bx	lr
 800f948:	4608      	mov	r0, r1
 800f94a:	4770      	bx	lr
 800f94c:	2000099c 	.word	0x2000099c

0800f950 <rcutils_get_default_allocator>:
 800f950:	b510      	push	{r4, lr}
 800f952:	4c05      	ldr	r4, [pc, #20]	@ (800f968 <rcutils_get_default_allocator+0x18>)
 800f954:	4686      	mov	lr, r0
 800f956:	4684      	mov	ip, r0
 800f958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f95a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	f8cc 3000 	str.w	r3, [ip]
 800f964:	4670      	mov	r0, lr
 800f966:	bd10      	pop	{r4, pc}
 800f968:	2000099c 	.word	0x2000099c

0800f96c <rcutils_allocator_is_valid>:
 800f96c:	b158      	cbz	r0, 800f986 <rcutils_allocator_is_valid+0x1a>
 800f96e:	6803      	ldr	r3, [r0, #0]
 800f970:	b143      	cbz	r3, 800f984 <rcutils_allocator_is_valid+0x18>
 800f972:	6843      	ldr	r3, [r0, #4]
 800f974:	b133      	cbz	r3, 800f984 <rcutils_allocator_is_valid+0x18>
 800f976:	68c3      	ldr	r3, [r0, #12]
 800f978:	b123      	cbz	r3, 800f984 <rcutils_allocator_is_valid+0x18>
 800f97a:	6880      	ldr	r0, [r0, #8]
 800f97c:	3800      	subs	r0, #0
 800f97e:	bf18      	it	ne
 800f980:	2001      	movne	r0, #1
 800f982:	4770      	bx	lr
 800f984:	4618      	mov	r0, r3
 800f986:	4770      	bx	lr

0800f988 <__atomic_load_8>:
 800f988:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f98c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f990:	4a15      	ldr	r2, [pc, #84]	@ (800f9e8 <__atomic_load_8+0x60>)
 800f992:	4b16      	ldr	r3, [pc, #88]	@ (800f9ec <__atomic_load_8+0x64>)
 800f994:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f998:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f99c:	fb02 f101 	mul.w	r1, r2, r1
 800f9a0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f9a4:	fba3 2301 	umull	r2, r3, r3, r1
 800f9a8:	091b      	lsrs	r3, r3, #4
 800f9aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f9ae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800f9b2:	b4d0      	push	{r4, r6, r7}
 800f9b4:	4c0e      	ldr	r4, [pc, #56]	@ (800f9f0 <__atomic_load_8+0x68>)
 800f9b6:	1ac9      	subs	r1, r1, r3
 800f9b8:	1862      	adds	r2, r4, r1
 800f9ba:	f04f 0c01 	mov.w	ip, #1
 800f9be:	e8d2 3f4f 	ldrexb	r3, [r2]
 800f9c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 800f9c6:	2e00      	cmp	r6, #0
 800f9c8:	d1f9      	bne.n	800f9be <__atomic_load_8+0x36>
 800f9ca:	f3bf 8f5b 	dmb	ish
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d1f4      	bne.n	800f9be <__atomic_load_8+0x36>
 800f9d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f9d8:	f3bf 8f5b 	dmb	ish
 800f9dc:	5463      	strb	r3, [r4, r1]
 800f9de:	4630      	mov	r0, r6
 800f9e0:	4639      	mov	r1, r7
 800f9e2:	bcd0      	pop	{r4, r6, r7}
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	27d4eb2d 	.word	0x27d4eb2d
 800f9ec:	b21642c9 	.word	0xb21642c9
 800f9f0:	2000fc60 	.word	0x2000fc60

0800f9f4 <__atomic_store_8>:
 800f9f4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f9f8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800fa02:	4c14      	ldr	r4, [pc, #80]	@ (800fa54 <__atomic_store_8+0x60>)
 800fa04:	4d14      	ldr	r5, [pc, #80]	@ (800fa58 <__atomic_store_8+0x64>)
 800fa06:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800fa0a:	fb04 f101 	mul.w	r1, r4, r1
 800fa0e:	4c13      	ldr	r4, [pc, #76]	@ (800fa5c <__atomic_store_8+0x68>)
 800fa10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800fa14:	fba4 4e01 	umull	r4, lr, r4, r1
 800fa18:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800fa1c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800fa20:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800fa24:	eba1 0e0e 	sub.w	lr, r1, lr
 800fa28:	eb05 0c0e 	add.w	ip, r5, lr
 800fa2c:	f04f 0401 	mov.w	r4, #1
 800fa30:	e8dc 1f4f 	ldrexb	r1, [ip]
 800fa34:	e8cc 4f46 	strexb	r6, r4, [ip]
 800fa38:	2e00      	cmp	r6, #0
 800fa3a:	d1f9      	bne.n	800fa30 <__atomic_store_8+0x3c>
 800fa3c:	f3bf 8f5b 	dmb	ish
 800fa40:	b2c9      	uxtb	r1, r1
 800fa42:	2900      	cmp	r1, #0
 800fa44:	d1f4      	bne.n	800fa30 <__atomic_store_8+0x3c>
 800fa46:	e9c0 2300 	strd	r2, r3, [r0]
 800fa4a:	f3bf 8f5b 	dmb	ish
 800fa4e:	f805 100e 	strb.w	r1, [r5, lr]
 800fa52:	bd70      	pop	{r4, r5, r6, pc}
 800fa54:	27d4eb2d 	.word	0x27d4eb2d
 800fa58:	2000fc60 	.word	0x2000fc60
 800fa5c:	b21642c9 	.word	0xb21642c9

0800fa60 <__atomic_exchange_8>:
 800fa60:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800fa64:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800fa68:	4916      	ldr	r1, [pc, #88]	@ (800fac4 <__atomic_exchange_8+0x64>)
 800fa6a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800fa6e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800fa72:	fb01 fc0c 	mul.w	ip, r1, ip
 800fa76:	4914      	ldr	r1, [pc, #80]	@ (800fac8 <__atomic_exchange_8+0x68>)
 800fa78:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800fa7c:	b570      	push	{r4, r5, r6, lr}
 800fa7e:	4605      	mov	r5, r0
 800fa80:	fba1 010c 	umull	r0, r1, r1, ip
 800fa84:	0909      	lsrs	r1, r1, #4
 800fa86:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800fa8a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800fa8e:	4e0f      	ldr	r6, [pc, #60]	@ (800facc <__atomic_exchange_8+0x6c>)
 800fa90:	ebac 0c01 	sub.w	ip, ip, r1
 800fa94:	eb06 010c 	add.w	r1, r6, ip
 800fa98:	f04f 0e01 	mov.w	lr, #1
 800fa9c:	e8d1 4f4f 	ldrexb	r4, [r1]
 800faa0:	e8c1 ef40 	strexb	r0, lr, [r1]
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d1f9      	bne.n	800fa9c <__atomic_exchange_8+0x3c>
 800faa8:	f3bf 8f5b 	dmb	ish
 800faac:	b2e4      	uxtb	r4, r4
 800faae:	2c00      	cmp	r4, #0
 800fab0:	d1f4      	bne.n	800fa9c <__atomic_exchange_8+0x3c>
 800fab2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fab6:	e9c5 2300 	strd	r2, r3, [r5]
 800faba:	f3bf 8f5b 	dmb	ish
 800fabe:	f806 400c 	strb.w	r4, [r6, ip]
 800fac2:	bd70      	pop	{r4, r5, r6, pc}
 800fac4:	27d4eb2d 	.word	0x27d4eb2d
 800fac8:	b21642c9 	.word	0xb21642c9
 800facc:	2000fc60 	.word	0x2000fc60

0800fad0 <rcutils_get_env>:
 800fad0:	b168      	cbz	r0, 800faee <rcutils_get_env+0x1e>
 800fad2:	b510      	push	{r4, lr}
 800fad4:	460c      	mov	r4, r1
 800fad6:	b129      	cbz	r1, 800fae4 <rcutils_get_env+0x14>
 800fad8:	f008 fcda 	bl	8018490 <getenv>
 800fadc:	b120      	cbz	r0, 800fae8 <rcutils_get_env+0x18>
 800fade:	6020      	str	r0, [r4, #0]
 800fae0:	2000      	movs	r0, #0
 800fae2:	bd10      	pop	{r4, pc}
 800fae4:	4803      	ldr	r0, [pc, #12]	@ (800faf4 <rcutils_get_env+0x24>)
 800fae6:	bd10      	pop	{r4, pc}
 800fae8:	4b03      	ldr	r3, [pc, #12]	@ (800faf8 <rcutils_get_env+0x28>)
 800faea:	6023      	str	r3, [r4, #0]
 800faec:	bd10      	pop	{r4, pc}
 800faee:	4803      	ldr	r0, [pc, #12]	@ (800fafc <rcutils_get_env+0x2c>)
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	0801c21c 	.word	0x0801c21c
 800faf8:	0801c5c0 	.word	0x0801c5c0
 800fafc:	0801c200 	.word	0x0801c200

0800fb00 <rcutils_get_error_string>:
 800fb00:	4b06      	ldr	r3, [pc, #24]	@ (800fb1c <rcutils_get_error_string+0x1c>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	b13b      	cbz	r3, 800fb16 <rcutils_get_error_string+0x16>
 800fb06:	4b06      	ldr	r3, [pc, #24]	@ (800fb20 <rcutils_get_error_string+0x20>)
 800fb08:	781a      	ldrb	r2, [r3, #0]
 800fb0a:	b90a      	cbnz	r2, 800fb10 <rcutils_get_error_string+0x10>
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	701a      	strb	r2, [r3, #0]
 800fb10:	4b04      	ldr	r3, [pc, #16]	@ (800fb24 <rcutils_get_error_string+0x24>)
 800fb12:	7818      	ldrb	r0, [r3, #0]
 800fb14:	4770      	bx	lr
 800fb16:	4b04      	ldr	r3, [pc, #16]	@ (800fb28 <rcutils_get_error_string+0x28>)
 800fb18:	7818      	ldrb	r0, [r3, #0]
 800fb1a:	4770      	bx	lr
 800fb1c:	2000fc77 	.word	0x2000fc77
 800fb20:	2000fc89 	.word	0x2000fc89
 800fb24:	2000fc88 	.word	0x2000fc88
 800fb28:	0801c238 	.word	0x0801c238
 800fb2c:	00000000 	.word	0x00000000

0800fb30 <rcutils_reset_error>:
 800fb30:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800fb50 <rcutils_reset_error+0x20>
 800fb34:	4a08      	ldr	r2, [pc, #32]	@ (800fb58 <rcutils_reset_error+0x28>)
 800fb36:	4809      	ldr	r0, [pc, #36]	@ (800fb5c <rcutils_reset_error+0x2c>)
 800fb38:	4909      	ldr	r1, [pc, #36]	@ (800fb60 <rcutils_reset_error+0x30>)
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	8013      	strh	r3, [r2, #0]
 800fb3e:	ed82 7b02 	vstr	d7, [r2, #8]
 800fb42:	4a08      	ldr	r2, [pc, #32]	@ (800fb64 <rcutils_reset_error+0x34>)
 800fb44:	7003      	strb	r3, [r0, #0]
 800fb46:	700b      	strb	r3, [r1, #0]
 800fb48:	7013      	strb	r3, [r2, #0]
 800fb4a:	4770      	bx	lr
 800fb4c:	f3af 8000 	nop.w
	...
 800fb58:	2000fc78 	.word	0x2000fc78
 800fb5c:	2000fc89 	.word	0x2000fc89
 800fb60:	2000fc88 	.word	0x2000fc88
 800fb64:	2000fc77 	.word	0x2000fc77

0800fb68 <rcutils_is_directory>:
 800fb68:	2000      	movs	r0, #0
 800fb6a:	4770      	bx	lr

0800fb6c <rcutils_join_path>:
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fb72:	2000      	movs	r0, #0
 800fb74:	b002      	add	sp, #8
 800fb76:	4770      	bx	lr

0800fb78 <rcutils_to_native_path>:
 800fb78:	b084      	sub	sp, #16
 800fb7a:	a801      	add	r0, sp, #4
 800fb7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800fb80:	b004      	add	sp, #16
 800fb82:	2000      	movs	r0, #0
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop

0800fb88 <rcutils_format_string_limit>:
 800fb88:	b40f      	push	{r0, r1, r2, r3}
 800fb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8c:	b083      	sub	sp, #12
 800fb8e:	ac08      	add	r4, sp, #32
 800fb90:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800fb92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fb96:	b34e      	cbz	r6, 800fbec <rcutils_format_string_limit+0x64>
 800fb98:	a808      	add	r0, sp, #32
 800fb9a:	f7ff fee7 	bl	800f96c <rcutils_allocator_is_valid>
 800fb9e:	b328      	cbz	r0, 800fbec <rcutils_format_string_limit+0x64>
 800fba0:	2100      	movs	r1, #0
 800fba2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800fba4:	4632      	mov	r2, r6
 800fba6:	4608      	mov	r0, r1
 800fba8:	e9cd 3300 	strd	r3, r3, [sp]
 800fbac:	f000 f8f4 	bl	800fd98 <rcutils_vsnprintf>
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	d01a      	beq.n	800fbec <rcutils_format_string_limit+0x64>
 800fbb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fbba:	1c47      	adds	r7, r0, #1
 800fbbc:	429f      	cmp	r7, r3
 800fbbe:	bf84      	itt	hi
 800fbc0:	461f      	movhi	r7, r3
 800fbc2:	f103 35ff 	addhi.w	r5, r3, #4294967295
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	9b08      	ldr	r3, [sp, #32]
 800fbca:	4798      	blx	r3
 800fbcc:	4604      	mov	r4, r0
 800fbce:	b168      	cbz	r0, 800fbec <rcutils_format_string_limit+0x64>
 800fbd0:	9b01      	ldr	r3, [sp, #4]
 800fbd2:	4632      	mov	r2, r6
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	f000 f8df 	bl	800fd98 <rcutils_vsnprintf>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	db02      	blt.n	800fbe4 <rcutils_format_string_limit+0x5c>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	5563      	strb	r3, [r4, r5]
 800fbe2:	e004      	b.n	800fbee <rcutils_format_string_limit+0x66>
 800fbe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fbe8:	4620      	mov	r0, r4
 800fbea:	4798      	blx	r3
 800fbec:	2400      	movs	r4, #0
 800fbee:	4620      	mov	r0, r4
 800fbf0:	b003      	add	sp, #12
 800fbf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fbf6:	b004      	add	sp, #16
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop

0800fbfc <rcutils_repl_str>:
 800fbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc00:	ed2d 8b02 	vpush	{d8}
 800fc04:	b087      	sub	sp, #28
 800fc06:	4680      	mov	r8, r0
 800fc08:	4608      	mov	r0, r1
 800fc0a:	f8cd 8004 	str.w	r8, [sp, #4]
 800fc0e:	ee08 2a10 	vmov	s16, r2
 800fc12:	468a      	mov	sl, r1
 800fc14:	4699      	mov	r9, r3
 800fc16:	f7f0 fb3b 	bl	8000290 <strlen>
 800fc1a:	2600      	movs	r6, #0
 800fc1c:	4647      	mov	r7, r8
 800fc1e:	9002      	str	r0, [sp, #8]
 800fc20:	46b3      	mov	fp, r6
 800fc22:	2510      	movs	r5, #16
 800fc24:	46b0      	mov	r8, r6
 800fc26:	e01d      	b.n	800fc64 <rcutils_repl_str+0x68>
 800fc28:	f10b 0b01 	add.w	fp, fp, #1
 800fc2c:	455e      	cmp	r6, fp
 800fc2e:	d211      	bcs.n	800fc54 <rcutils_repl_str+0x58>
 800fc30:	442e      	add	r6, r5
 800fc32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fc36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fc3a:	00b1      	lsls	r1, r6, #2
 800fc3c:	4798      	blx	r3
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	f000 8088 	beq.w	800fd54 <rcutils_repl_str+0x158>
 800fc44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc48:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800fc4c:	4680      	mov	r8, r0
 800fc4e:	bf28      	it	cs
 800fc50:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800fc54:	9a01      	ldr	r2, [sp, #4]
 800fc56:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800fc5a:	1aa2      	subs	r2, r4, r2
 800fc5c:	f843 2c04 	str.w	r2, [r3, #-4]
 800fc60:	9b02      	ldr	r3, [sp, #8]
 800fc62:	18e7      	adds	r7, r4, r3
 800fc64:	4651      	mov	r1, sl
 800fc66:	4638      	mov	r0, r7
 800fc68:	f009 fdf0 	bl	801984c <strstr>
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	4640      	mov	r0, r8
 800fc70:	2c00      	cmp	r4, #0
 800fc72:	d1d9      	bne.n	800fc28 <rcutils_repl_str+0x2c>
 800fc74:	46b8      	mov	r8, r7
 800fc76:	4607      	mov	r7, r0
 800fc78:	4640      	mov	r0, r8
 800fc7a:	f7f0 fb09 	bl	8000290 <strlen>
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	eba8 0303 	sub.w	r3, r8, r3
 800fc84:	181c      	adds	r4, r3, r0
 800fc86:	9404      	str	r4, [sp, #16]
 800fc88:	f1bb 0f00 	cmp.w	fp, #0
 800fc8c:	d04a      	beq.n	800fd24 <rcutils_repl_str+0x128>
 800fc8e:	ee18 0a10 	vmov	r0, s16
 800fc92:	f7f0 fafd 	bl	8000290 <strlen>
 800fc96:	9b02      	ldr	r3, [sp, #8]
 800fc98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800fc9c:	1ac3      	subs	r3, r0, r3
 800fc9e:	fb0b 4303 	mla	r3, fp, r3, r4
 800fca2:	461a      	mov	r2, r3
 800fca4:	9305      	str	r3, [sp, #20]
 800fca6:	4606      	mov	r6, r0
 800fca8:	f8d9 3000 	ldr.w	r3, [r9]
 800fcac:	1c50      	adds	r0, r2, #1
 800fcae:	4798      	blx	r3
 800fcb0:	9003      	str	r0, [sp, #12]
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	d04f      	beq.n	800fd56 <rcutils_repl_str+0x15a>
 800fcb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	4641      	mov	r1, r8
 800fcbe:	f009 fe6a 	bl	8019996 <memcpy>
 800fcc2:	683d      	ldr	r5, [r7, #0]
 800fcc4:	9b03      	ldr	r3, [sp, #12]
 800fcc6:	9701      	str	r7, [sp, #4]
 800fcc8:	46ba      	mov	sl, r7
 800fcca:	441d      	add	r5, r3
 800fccc:	9f02      	ldr	r7, [sp, #8]
 800fcce:	f8cd 9008 	str.w	r9, [sp, #8]
 800fcd2:	2401      	movs	r4, #1
 800fcd4:	46d1      	mov	r9, sl
 800fcd6:	ee18 aa10 	vmov	sl, s16
 800fcda:	e00a      	b.n	800fcf2 <rcutils_repl_str+0xf6>
 800fcdc:	f8d9 5000 	ldr.w	r5, [r9]
 800fce0:	1aaa      	subs	r2, r5, r2
 800fce2:	1885      	adds	r5, r0, r2
 800fce4:	f009 fe57 	bl	8019996 <memcpy>
 800fce8:	45a3      	cmp	fp, r4
 800fcea:	f104 0201 	add.w	r2, r4, #1
 800fcee:	d935      	bls.n	800fd5c <rcutils_repl_str+0x160>
 800fcf0:	4614      	mov	r4, r2
 800fcf2:	4632      	mov	r2, r6
 800fcf4:	4651      	mov	r1, sl
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	f009 fe4d 	bl	8019996 <memcpy>
 800fcfc:	f859 2b04 	ldr.w	r2, [r9], #4
 800fd00:	45a3      	cmp	fp, r4
 800fd02:	443a      	add	r2, r7
 800fd04:	eb05 0006 	add.w	r0, r5, r6
 800fd08:	eb08 0102 	add.w	r1, r8, r2
 800fd0c:	d1e6      	bne.n	800fcdc <rcutils_repl_str+0xe0>
 800fd0e:	9b04      	ldr	r3, [sp, #16]
 800fd10:	1a9a      	subs	r2, r3, r2
 800fd12:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800fd16:	f009 fe3e 	bl	8019996 <memcpy>
 800fd1a:	9a03      	ldr	r2, [sp, #12]
 800fd1c:	9905      	ldr	r1, [sp, #20]
 800fd1e:	2300      	movs	r3, #0
 800fd20:	5453      	strb	r3, [r2, r1]
 800fd22:	e00b      	b.n	800fd3c <rcutils_repl_str+0x140>
 800fd24:	4620      	mov	r0, r4
 800fd26:	f8d9 3000 	ldr.w	r3, [r9]
 800fd2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800fd2e:	3001      	adds	r0, #1
 800fd30:	4798      	blx	r3
 800fd32:	9003      	str	r0, [sp, #12]
 800fd34:	b110      	cbz	r0, 800fd3c <rcutils_repl_str+0x140>
 800fd36:	9901      	ldr	r1, [sp, #4]
 800fd38:	f009 fe25 	bl	8019986 <strcpy>
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fd42:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800fd46:	4798      	blx	r3
 800fd48:	9803      	ldr	r0, [sp, #12]
 800fd4a:	b007      	add	sp, #28
 800fd4c:	ecbd 8b02 	vpop	{d8}
 800fd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd54:	4647      	mov	r7, r8
 800fd56:	2300      	movs	r3, #0
 800fd58:	9303      	str	r3, [sp, #12]
 800fd5a:	e7ef      	b.n	800fd3c <rcutils_repl_str+0x140>
 800fd5c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800fd60:	e7db      	b.n	800fd1a <rcutils_repl_str+0x11e>
 800fd62:	bf00      	nop

0800fd64 <rcutils_snprintf>:
 800fd64:	b40c      	push	{r2, r3}
 800fd66:	b530      	push	{r4, r5, lr}
 800fd68:	b083      	sub	sp, #12
 800fd6a:	ab06      	add	r3, sp, #24
 800fd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	b152      	cbz	r2, 800fd8a <rcutils_snprintf+0x26>
 800fd74:	b138      	cbz	r0, 800fd86 <rcutils_snprintf+0x22>
 800fd76:	b141      	cbz	r1, 800fd8a <rcutils_snprintf+0x26>
 800fd78:	f009 fc62 	bl	8019640 <vsniprintf>
 800fd7c:	b003      	add	sp, #12
 800fd7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd82:	b002      	add	sp, #8
 800fd84:	4770      	bx	lr
 800fd86:	2900      	cmp	r1, #0
 800fd88:	d0f6      	beq.n	800fd78 <rcutils_snprintf+0x14>
 800fd8a:	f009 fdcf 	bl	801992c <__errno>
 800fd8e:	2316      	movs	r3, #22
 800fd90:	6003      	str	r3, [r0, #0]
 800fd92:	f04f 30ff 	mov.w	r0, #4294967295
 800fd96:	e7f1      	b.n	800fd7c <rcutils_snprintf+0x18>

0800fd98 <rcutils_vsnprintf>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	b13a      	cbz	r2, 800fdac <rcutils_vsnprintf+0x14>
 800fd9c:	b120      	cbz	r0, 800fda8 <rcutils_vsnprintf+0x10>
 800fd9e:	b129      	cbz	r1, 800fdac <rcutils_vsnprintf+0x14>
 800fda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fda4:	f009 bc4c 	b.w	8019640 <vsniprintf>
 800fda8:	2900      	cmp	r1, #0
 800fdaa:	d0f9      	beq.n	800fda0 <rcutils_vsnprintf+0x8>
 800fdac:	f009 fdbe 	bl	801992c <__errno>
 800fdb0:	2316      	movs	r3, #22
 800fdb2:	6003      	str	r3, [r0, #0]
 800fdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb8:	bd70      	pop	{r4, r5, r6, pc}
 800fdba:	bf00      	nop

0800fdbc <rcutils_strdup>:
 800fdbc:	b084      	sub	sp, #16
 800fdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc0:	ac07      	add	r4, sp, #28
 800fdc2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800fdc6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fdc8:	4605      	mov	r5, r0
 800fdca:	b1d0      	cbz	r0, 800fe02 <rcutils_strdup+0x46>
 800fdcc:	460c      	mov	r4, r1
 800fdce:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	f7f0 fa0c 	bl	80001f0 <memchr>
 800fdd8:	b180      	cbz	r0, 800fdfc <rcutils_strdup+0x40>
 800fdda:	1b46      	subs	r6, r0, r5
 800fddc:	1c70      	adds	r0, r6, #1
 800fdde:	4639      	mov	r1, r7
 800fde0:	47a0      	blx	r4
 800fde2:	4604      	mov	r4, r0
 800fde4:	b128      	cbz	r0, 800fdf2 <rcutils_strdup+0x36>
 800fde6:	4632      	mov	r2, r6
 800fde8:	4629      	mov	r1, r5
 800fdea:	f009 fdd4 	bl	8019996 <memcpy>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	55a3      	strb	r3, [r4, r6]
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fdf8:	b004      	add	sp, #16
 800fdfa:	4770      	bx	lr
 800fdfc:	f04f 36ff 	mov.w	r6, #4294967295
 800fe00:	e7ed      	b.n	800fdde <rcutils_strdup+0x22>
 800fe02:	4604      	mov	r4, r0
 800fe04:	e7f5      	b.n	800fdf2 <rcutils_strdup+0x36>
 800fe06:	bf00      	nop

0800fe08 <rcutils_strndup>:
 800fe08:	b082      	sub	sp, #8
 800fe0a:	b570      	push	{r4, r5, r6, lr}
 800fe0c:	ac04      	add	r4, sp, #16
 800fe0e:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe12:	4606      	mov	r6, r0
 800fe14:	b1b8      	cbz	r0, 800fe46 <rcutils_strndup+0x3e>
 800fe16:	460c      	mov	r4, r1
 800fe18:	460a      	mov	r2, r1
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	f7f0 f9e8 	bl	80001f0 <memchr>
 800fe20:	b100      	cbz	r0, 800fe24 <rcutils_strndup+0x1c>
 800fe22:	1b84      	subs	r4, r0, r6
 800fe24:	9b04      	ldr	r3, [sp, #16]
 800fe26:	9908      	ldr	r1, [sp, #32]
 800fe28:	1c60      	adds	r0, r4, #1
 800fe2a:	4798      	blx	r3
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	b128      	cbz	r0, 800fe3c <rcutils_strndup+0x34>
 800fe30:	4622      	mov	r2, r4
 800fe32:	4631      	mov	r1, r6
 800fe34:	f009 fdaf 	bl	8019996 <memcpy>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	552b      	strb	r3, [r5, r4]
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe42:	b002      	add	sp, #8
 800fe44:	4770      	bx	lr
 800fe46:	4605      	mov	r5, r0
 800fe48:	e7f8      	b.n	800fe3c <rcutils_strndup+0x34>
 800fe4a:	bf00      	nop

0800fe4c <rcutils_get_zero_initialized_string_map>:
 800fe4c:	4b01      	ldr	r3, [pc, #4]	@ (800fe54 <rcutils_get_zero_initialized_string_map+0x8>)
 800fe4e:	2000      	movs	r0, #0
 800fe50:	6018      	str	r0, [r3, #0]
 800fe52:	4770      	bx	lr
 800fe54:	2000fc8c 	.word	0x2000fc8c

0800fe58 <rcutils_string_map_reserve>:
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	d03e      	beq.n	800feda <rcutils_string_map_reserve+0x82>
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	6805      	ldr	r5, [r0, #0]
 800fe60:	460c      	mov	r4, r1
 800fe62:	4606      	mov	r6, r0
 800fe64:	b12d      	cbz	r5, 800fe72 <rcutils_string_map_reserve+0x1a>
 800fe66:	68ab      	ldr	r3, [r5, #8]
 800fe68:	42a3      	cmp	r3, r4
 800fe6a:	d904      	bls.n	800fe76 <rcutils_string_map_reserve+0x1e>
 800fe6c:	461c      	mov	r4, r3
 800fe6e:	2d00      	cmp	r5, #0
 800fe70:	d1f9      	bne.n	800fe66 <rcutils_string_map_reserve+0xe>
 800fe72:	201f      	movs	r0, #31
 800fe74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe76:	686b      	ldr	r3, [r5, #4]
 800fe78:	42a3      	cmp	r3, r4
 800fe7a:	d02a      	beq.n	800fed2 <rcutils_string_map_reserve+0x7a>
 800fe7c:	69e9      	ldr	r1, [r5, #28]
 800fe7e:	b304      	cbz	r4, 800fec2 <rcutils_string_map_reserve+0x6a>
 800fe80:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 800fe84:	d227      	bcs.n	800fed6 <rcutils_string_map_reserve+0x7e>
 800fe86:	00e7      	lsls	r7, r4, #3
 800fe88:	460a      	mov	r2, r1
 800fe8a:	696b      	ldr	r3, [r5, #20]
 800fe8c:	6828      	ldr	r0, [r5, #0]
 800fe8e:	4639      	mov	r1, r7
 800fe90:	4798      	blx	r3
 800fe92:	b300      	cbz	r0, 800fed6 <rcutils_string_map_reserve+0x7e>
 800fe94:	6835      	ldr	r5, [r6, #0]
 800fe96:	686a      	ldr	r2, [r5, #4]
 800fe98:	6028      	str	r0, [r5, #0]
 800fe9a:	42a2      	cmp	r2, r4
 800fe9c:	d216      	bcs.n	800fecc <rcutils_string_map_reserve+0x74>
 800fe9e:	43d1      	mvns	r1, r2
 800fea0:	4421      	add	r1, r4
 800fea2:	2909      	cmp	r1, #9
 800fea4:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800fea8:	d919      	bls.n	800fede <rcutils_string_map_reserve+0x86>
 800feaa:	0759      	lsls	r1, r3, #29
 800feac:	d117      	bne.n	800fede <rcutils_string_map_reserve+0x86>
 800feae:	1aa1      	subs	r1, r4, r2
 800feb0:	2600      	movs	r6, #0
 800feb2:	2200      	movs	r2, #0
 800feb4:	2700      	movs	r7, #0
 800feb6:	3201      	adds	r2, #1
 800feb8:	4291      	cmp	r1, r2
 800feba:	e8e3 6702 	strd	r6, r7, [r3], #8
 800febe:	d8fa      	bhi.n	800feb6 <rcutils_string_map_reserve+0x5e>
 800fec0:	e004      	b.n	800fecc <rcutils_string_map_reserve+0x74>
 800fec2:	692b      	ldr	r3, [r5, #16]
 800fec4:	6828      	ldr	r0, [r5, #0]
 800fec6:	4798      	blx	r3
 800fec8:	6835      	ldr	r5, [r6, #0]
 800feca:	602c      	str	r4, [r5, #0]
 800fecc:	606c      	str	r4, [r5, #4]
 800fece:	2000      	movs	r0, #0
 800fed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed2:	2000      	movs	r0, #0
 800fed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed6:	200a      	movs	r0, #10
 800fed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feda:	200b      	movs	r0, #11
 800fedc:	4770      	bx	lr
 800fede:	4438      	add	r0, r7
 800fee0:	2200      	movs	r2, #0
 800fee2:	e9c3 2200 	strd	r2, r2, [r3]
 800fee6:	3308      	adds	r3, #8
 800fee8:	4283      	cmp	r3, r0
 800feea:	d1fa      	bne.n	800fee2 <rcutils_string_map_reserve+0x8a>
 800feec:	e7ee      	b.n	800fecc <rcutils_string_map_reserve+0x74>
 800feee:	bf00      	nop

0800fef0 <rcutils_string_map_init>:
 800fef0:	b082      	sub	sp, #8
 800fef2:	b570      	push	{r4, r5, r6, lr}
 800fef4:	ac04      	add	r4, sp, #16
 800fef6:	e884 000c 	stmia.w	r4, {r2, r3}
 800fefa:	b378      	cbz	r0, 800ff5c <rcutils_string_map_init+0x6c>
 800fefc:	6806      	ldr	r6, [r0, #0]
 800fefe:	4604      	mov	r4, r0
 800ff00:	b12e      	cbz	r6, 800ff0e <rcutils_string_map_init+0x1e>
 800ff02:	251e      	movs	r5, #30
 800ff04:	4628      	mov	r0, r5
 800ff06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff0a:	b002      	add	sp, #8
 800ff0c:	4770      	bx	lr
 800ff0e:	a804      	add	r0, sp, #16
 800ff10:	460d      	mov	r5, r1
 800ff12:	f7ff fd2b 	bl	800f96c <rcutils_allocator_is_valid>
 800ff16:	b308      	cbz	r0, 800ff5c <rcutils_string_map_init+0x6c>
 800ff18:	9b04      	ldr	r3, [sp, #16]
 800ff1a:	9908      	ldr	r1, [sp, #32]
 800ff1c:	2020      	movs	r0, #32
 800ff1e:	4798      	blx	r3
 800ff20:	6020      	str	r0, [r4, #0]
 800ff22:	b308      	cbz	r0, 800ff68 <rcutils_string_map_init+0x78>
 800ff24:	f10d 0e10 	add.w	lr, sp, #16
 800ff28:	e9c0 6600 	strd	r6, r6, [r0]
 800ff2c:	6086      	str	r6, [r0, #8]
 800ff2e:	f100 0c0c 	add.w	ip, r0, #12
 800ff32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff3a:	f8de 3000 	ldr.w	r3, [lr]
 800ff3e:	f8cc 3000 	str.w	r3, [ip]
 800ff42:	4629      	mov	r1, r5
 800ff44:	4620      	mov	r0, r4
 800ff46:	f7ff ff87 	bl	800fe58 <rcutils_string_map_reserve>
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d0d9      	beq.n	800ff04 <rcutils_string_map_init+0x14>
 800ff50:	9b05      	ldr	r3, [sp, #20]
 800ff52:	9908      	ldr	r1, [sp, #32]
 800ff54:	6820      	ldr	r0, [r4, #0]
 800ff56:	4798      	blx	r3
 800ff58:	6026      	str	r6, [r4, #0]
 800ff5a:	e7d3      	b.n	800ff04 <rcutils_string_map_init+0x14>
 800ff5c:	250b      	movs	r5, #11
 800ff5e:	4628      	mov	r0, r5
 800ff60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff64:	b002      	add	sp, #8
 800ff66:	4770      	bx	lr
 800ff68:	250a      	movs	r5, #10
 800ff6a:	e7cb      	b.n	800ff04 <rcutils_string_map_init+0x14>

0800ff6c <rcutils_string_map_fini>:
 800ff6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff70:	b083      	sub	sp, #12
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d03e      	beq.n	800fff4 <rcutils_string_map_fini+0x88>
 800ff76:	6804      	ldr	r4, [r0, #0]
 800ff78:	4606      	mov	r6, r0
 800ff7a:	2c00      	cmp	r4, #0
 800ff7c:	d036      	beq.n	800ffec <rcutils_string_map_fini+0x80>
 800ff7e:	6863      	ldr	r3, [r4, #4]
 800ff80:	b34b      	cbz	r3, 800ffd6 <rcutils_string_map_fini+0x6a>
 800ff82:	2500      	movs	r5, #0
 800ff84:	6822      	ldr	r2, [r4, #0]
 800ff86:	462f      	mov	r7, r5
 800ff88:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800ff8c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800ff90:	b1f0      	cbz	r0, 800ffd0 <rcutils_string_map_fini+0x64>
 800ff92:	69e1      	ldr	r1, [r4, #28]
 800ff94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff98:	9101      	str	r1, [sp, #4]
 800ff9a:	47c8      	blx	r9
 800ff9c:	6823      	ldr	r3, [r4, #0]
 800ff9e:	9901      	ldr	r1, [sp, #4]
 800ffa0:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 800ffa4:	eb03 0208 	add.w	r2, r3, r8
 800ffa8:	3501      	adds	r5, #1
 800ffaa:	6850      	ldr	r0, [r2, #4]
 800ffac:	47c8      	blx	r9
 800ffae:	6822      	ldr	r2, [r4, #0]
 800ffb0:	68a3      	ldr	r3, [r4, #8]
 800ffb2:	4442      	add	r2, r8
 800ffb4:	3b01      	subs	r3, #1
 800ffb6:	6057      	str	r7, [r2, #4]
 800ffb8:	60a3      	str	r3, [r4, #8]
 800ffba:	6834      	ldr	r4, [r6, #0]
 800ffbc:	6863      	ldr	r3, [r4, #4]
 800ffbe:	429d      	cmp	r5, r3
 800ffc0:	d209      	bcs.n	800ffd6 <rcutils_string_map_fini+0x6a>
 800ffc2:	6822      	ldr	r2, [r4, #0]
 800ffc4:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800ffc8:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d1e0      	bne.n	800ff92 <rcutils_string_map_fini+0x26>
 800ffd0:	3501      	adds	r5, #1
 800ffd2:	429d      	cmp	r5, r3
 800ffd4:	d3d8      	bcc.n	800ff88 <rcutils_string_map_fini+0x1c>
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f7ff ff3d 	bl	800fe58 <rcutils_string_map_reserve>
 800ffde:	4604      	mov	r4, r0
 800ffe0:	b920      	cbnz	r0, 800ffec <rcutils_string_map_fini+0x80>
 800ffe2:	6830      	ldr	r0, [r6, #0]
 800ffe4:	6903      	ldr	r3, [r0, #16]
 800ffe6:	69c1      	ldr	r1, [r0, #28]
 800ffe8:	4798      	blx	r3
 800ffea:	6034      	str	r4, [r6, #0]
 800ffec:	4620      	mov	r0, r4
 800ffee:	b003      	add	sp, #12
 800fff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fff4:	240b      	movs	r4, #11
 800fff6:	4620      	mov	r0, r4
 800fff8:	b003      	add	sp, #12
 800fffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fffe:	bf00      	nop

08010000 <rcutils_string_map_getn>:
 8010000:	b338      	cbz	r0, 8010052 <rcutils_string_map_getn+0x52>
 8010002:	6800      	ldr	r0, [r0, #0]
 8010004:	b328      	cbz	r0, 8010052 <rcutils_string_map_getn+0x52>
 8010006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801000a:	460f      	mov	r7, r1
 801000c:	b1d1      	cbz	r1, 8010044 <rcutils_string_map_getn+0x44>
 801000e:	e9d0 6900 	ldrd	r6, r9, [r0]
 8010012:	f1b9 0f00 	cmp.w	r9, #0
 8010016:	d015      	beq.n	8010044 <rcutils_string_map_getn+0x44>
 8010018:	4690      	mov	r8, r2
 801001a:	2400      	movs	r4, #0
 801001c:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 8010020:	eb06 0ac4 	add.w	sl, r6, r4, lsl #3
 8010024:	4628      	mov	r0, r5
 8010026:	3401      	adds	r4, #1
 8010028:	b155      	cbz	r5, 8010040 <rcutils_string_map_getn+0x40>
 801002a:	f7f0 f931 	bl	8000290 <strlen>
 801002e:	4540      	cmp	r0, r8
 8010030:	4602      	mov	r2, r0
 8010032:	4629      	mov	r1, r5
 8010034:	bf38      	it	cc
 8010036:	4642      	movcc	r2, r8
 8010038:	4638      	mov	r0, r7
 801003a:	f009 fbe2 	bl	8019802 <strncmp>
 801003e:	b120      	cbz	r0, 801004a <rcutils_string_map_getn+0x4a>
 8010040:	45a1      	cmp	r9, r4
 8010042:	d1eb      	bne.n	801001c <rcutils_string_map_getn+0x1c>
 8010044:	2000      	movs	r0, #0
 8010046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801004e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010052:	4770      	bx	lr

08010054 <rcutils_system_time_now>:
 8010054:	b318      	cbz	r0, 801009e <rcutils_system_time_now+0x4a>
 8010056:	b570      	push	{r4, r5, r6, lr}
 8010058:	b084      	sub	sp, #16
 801005a:	4604      	mov	r4, r0
 801005c:	4669      	mov	r1, sp
 801005e:	2001      	movs	r0, #1
 8010060:	f7f3 fe0e 	bl	8003c80 <clock_gettime>
 8010064:	2800      	cmp	r0, #0
 8010066:	db17      	blt.n	8010098 <rcutils_system_time_now+0x44>
 8010068:	e9dd 3600 	ldrd	r3, r6, [sp]
 801006c:	2e00      	cmp	r6, #0
 801006e:	db13      	blt.n	8010098 <rcutils_system_time_now+0x44>
 8010070:	9902      	ldr	r1, [sp, #8]
 8010072:	2900      	cmp	r1, #0
 8010074:	db0d      	blt.n	8010092 <rcutils_system_time_now+0x3e>
 8010076:	4d0b      	ldr	r5, [pc, #44]	@ (80100a4 <rcutils_system_time_now+0x50>)
 8010078:	fba3 3205 	umull	r3, r2, r3, r5
 801007c:	185b      	adds	r3, r3, r1
 801007e:	fb05 2206 	mla	r2, r5, r6, r2
 8010082:	f04f 0000 	mov.w	r0, #0
 8010086:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801008a:	e9c4 3200 	strd	r3, r2, [r4]
 801008e:	b004      	add	sp, #16
 8010090:	bd70      	pop	{r4, r5, r6, pc}
 8010092:	ea53 0206 	orrs.w	r2, r3, r6
 8010096:	d1ee      	bne.n	8010076 <rcutils_system_time_now+0x22>
 8010098:	2002      	movs	r0, #2
 801009a:	b004      	add	sp, #16
 801009c:	bd70      	pop	{r4, r5, r6, pc}
 801009e:	200b      	movs	r0, #11
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	3b9aca00 	.word	0x3b9aca00

080100a8 <rcutils_steady_time_now>:
 80100a8:	b318      	cbz	r0, 80100f2 <rcutils_steady_time_now+0x4a>
 80100aa:	b570      	push	{r4, r5, r6, lr}
 80100ac:	b084      	sub	sp, #16
 80100ae:	4604      	mov	r4, r0
 80100b0:	4669      	mov	r1, sp
 80100b2:	2000      	movs	r0, #0
 80100b4:	f7f3 fde4 	bl	8003c80 <clock_gettime>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	db17      	blt.n	80100ec <rcutils_steady_time_now+0x44>
 80100bc:	e9dd 3600 	ldrd	r3, r6, [sp]
 80100c0:	2e00      	cmp	r6, #0
 80100c2:	db13      	blt.n	80100ec <rcutils_steady_time_now+0x44>
 80100c4:	9902      	ldr	r1, [sp, #8]
 80100c6:	2900      	cmp	r1, #0
 80100c8:	db0d      	blt.n	80100e6 <rcutils_steady_time_now+0x3e>
 80100ca:	4d0b      	ldr	r5, [pc, #44]	@ (80100f8 <rcutils_steady_time_now+0x50>)
 80100cc:	fba3 3205 	umull	r3, r2, r3, r5
 80100d0:	185b      	adds	r3, r3, r1
 80100d2:	fb05 2206 	mla	r2, r5, r6, r2
 80100d6:	f04f 0000 	mov.w	r0, #0
 80100da:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80100de:	e9c4 3200 	strd	r3, r2, [r4]
 80100e2:	b004      	add	sp, #16
 80100e4:	bd70      	pop	{r4, r5, r6, pc}
 80100e6:	ea53 0206 	orrs.w	r2, r3, r6
 80100ea:	d1ee      	bne.n	80100ca <rcutils_steady_time_now+0x22>
 80100ec:	2002      	movs	r0, #2
 80100ee:	b004      	add	sp, #16
 80100f0:	bd70      	pop	{r4, r5, r6, pc}
 80100f2:	200b      	movs	r0, #11
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	3b9aca00 	.word	0x3b9aca00

080100fc <rmw_get_zero_initialized_context>:
 80100fc:	b510      	push	{r4, lr}
 80100fe:	4604      	mov	r4, r0
 8010100:	3010      	adds	r0, #16
 8010102:	f000 f80b 	bl	801011c <rmw_get_zero_initialized_init_options>
 8010106:	2300      	movs	r3, #0
 8010108:	2000      	movs	r0, #0
 801010a:	2100      	movs	r1, #0
 801010c:	e9c4 0100 	strd	r0, r1, [r4]
 8010110:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
 8010114:	60a3      	str	r3, [r4, #8]
 8010116:	4620      	mov	r0, r4
 8010118:	bd10      	pop	{r4, pc}
 801011a:	bf00      	nop

0801011c <rmw_get_zero_initialized_init_options>:
 801011c:	b510      	push	{r4, lr}
 801011e:	2258      	movs	r2, #88	@ 0x58
 8010120:	4604      	mov	r4, r0
 8010122:	2100      	movs	r1, #0
 8010124:	f009 fb58 	bl	80197d8 <memset>
 8010128:	f104 0010 	add.w	r0, r4, #16
 801012c:	f001 fdcc 	bl	8011cc8 <rmw_get_default_security_options>
 8010130:	f104 001c 	add.w	r0, r4, #28
 8010134:	f007 f8ca 	bl	80172cc <rmw_get_zero_initialized_discovery_options>
 8010138:	f04f 33ff 	mov.w	r3, #4294967295
 801013c:	60e3      	str	r3, [r4, #12]
 801013e:	4620      	mov	r0, r4
 8010140:	bd10      	pop	{r4, pc}
 8010142:	bf00      	nop

08010144 <rmw_uros_set_custom_transport>:
 8010144:	b470      	push	{r4, r5, r6}
 8010146:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801014a:	b162      	cbz	r2, 8010166 <rmw_uros_set_custom_transport+0x22>
 801014c:	b15b      	cbz	r3, 8010166 <rmw_uros_set_custom_transport+0x22>
 801014e:	b155      	cbz	r5, 8010166 <rmw_uros_set_custom_transport+0x22>
 8010150:	b14e      	cbz	r6, 8010166 <rmw_uros_set_custom_transport+0x22>
 8010152:	4c06      	ldr	r4, [pc, #24]	@ (801016c <rmw_uros_set_custom_transport+0x28>)
 8010154:	7020      	strb	r0, [r4, #0]
 8010156:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801015a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801015e:	6166      	str	r6, [r4, #20]
 8010160:	2000      	movs	r0, #0
 8010162:	bc70      	pop	{r4, r5, r6}
 8010164:	4770      	bx	lr
 8010166:	200b      	movs	r0, #11
 8010168:	bc70      	pop	{r4, r5, r6}
 801016a:	4770      	bx	lr
 801016c:	2000fc90 	.word	0x2000fc90

08010170 <rmw_destroy_client>:
 8010170:	b570      	push	{r4, r5, r6, lr}
 8010172:	b128      	cbz	r0, 8010180 <rmw_destroy_client+0x10>
 8010174:	4604      	mov	r4, r0
 8010176:	6800      	ldr	r0, [r0, #0]
 8010178:	460d      	mov	r5, r1
 801017a:	f001 fd93 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 801017e:	b910      	cbnz	r0, 8010186 <rmw_destroy_client+0x16>
 8010180:	2401      	movs	r4, #1
 8010182:	4620      	mov	r0, r4
 8010184:	bd70      	pop	{r4, r5, r6, pc}
 8010186:	6863      	ldr	r3, [r4, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d0f9      	beq.n	8010180 <rmw_destroy_client+0x10>
 801018c:	2d00      	cmp	r5, #0
 801018e:	d0f7      	beq.n	8010180 <rmw_destroy_client+0x10>
 8010190:	6828      	ldr	r0, [r5, #0]
 8010192:	f001 fd87 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8010196:	2800      	cmp	r0, #0
 8010198:	d0f2      	beq.n	8010180 <rmw_destroy_client+0x10>
 801019a:	686e      	ldr	r6, [r5, #4]
 801019c:	2e00      	cmp	r6, #0
 801019e:	d0ef      	beq.n	8010180 <rmw_destroy_client+0x10>
 80101a0:	6864      	ldr	r4, [r4, #4]
 80101a2:	6932      	ldr	r2, [r6, #16]
 80101a4:	6920      	ldr	r0, [r4, #16]
 80101a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101ae:	6819      	ldr	r1, [r3, #0]
 80101b0:	f002 fc5c 	bl	8012a6c <uxr_buffer_cancel_data>
 80101b4:	4602      	mov	r2, r0
 80101b6:	6920      	ldr	r0, [r4, #16]
 80101b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101c0:	f001 fcf0 	bl	8011ba4 <run_xrce_session>
 80101c4:	6920      	ldr	r0, [r4, #16]
 80101c6:	6932      	ldr	r2, [r6, #16]
 80101c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101d0:	6819      	ldr	r1, [r3, #0]
 80101d2:	f002 f91d 	bl	8012410 <uxr_buffer_delete_entity>
 80101d6:	4602      	mov	r2, r0
 80101d8:	6920      	ldr	r0, [r4, #16]
 80101da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101e2:	f001 fcdf 	bl	8011ba4 <run_xrce_session>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	4628      	mov	r0, r5
 80101ea:	bf14      	ite	ne
 80101ec:	2400      	movne	r4, #0
 80101ee:	2402      	moveq	r4, #2
 80101f0:	f001 fbc2 	bl	8011978 <rmw_uxrce_fini_client_memory>
 80101f4:	e7c5      	b.n	8010182 <rmw_destroy_client+0x12>
 80101f6:	bf00      	nop

080101f8 <rmw_get_gid_for_client>:
 80101f8:	b1a8      	cbz	r0, 8010226 <rmw_get_gid_for_client+0x2e>
 80101fa:	b538      	push	{r3, r4, r5, lr}
 80101fc:	460c      	mov	r4, r1
 80101fe:	b1a1      	cbz	r1, 801022a <rmw_get_gid_for_client+0x32>
 8010200:	4605      	mov	r5, r0
 8010202:	6800      	ldr	r0, [r0, #0]
 8010204:	b120      	cbz	r0, 8010210 <rmw_get_gid_for_client+0x18>
 8010206:	4b0a      	ldr	r3, [pc, #40]	@ (8010230 <rmw_get_gid_for_client+0x38>)
 8010208:	6819      	ldr	r1, [r3, #0]
 801020a:	f7ef ffe1 	bl	80001d0 <strcmp>
 801020e:	b940      	cbnz	r0, 8010222 <rmw_get_gid_for_client+0x2a>
 8010210:	686b      	ldr	r3, [r5, #4]
 8010212:	2000      	movs	r0, #0
 8010214:	6060      	str	r0, [r4, #4]
 8010216:	60a0      	str	r0, [r4, #8]
 8010218:	60e0      	str	r0, [r4, #12]
 801021a:	6120      	str	r0, [r4, #16]
 801021c:	691b      	ldr	r3, [r3, #16]
 801021e:	6063      	str	r3, [r4, #4]
 8010220:	bd38      	pop	{r3, r4, r5, pc}
 8010222:	200c      	movs	r0, #12
 8010224:	bd38      	pop	{r3, r4, r5, pc}
 8010226:	200b      	movs	r0, #11
 8010228:	4770      	bx	lr
 801022a:	200b      	movs	r0, #11
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	bf00      	nop
 8010230:	0801cc94 	.word	0x0801cc94

08010234 <rmw_get_implementation_identifier>:
 8010234:	4b01      	ldr	r3, [pc, #4]	@ (801023c <rmw_get_implementation_identifier+0x8>)
 8010236:	6818      	ldr	r0, [r3, #0]
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	0801cc94 	.word	0x0801cc94

08010240 <rmw_init_options_init>:
 8010240:	b084      	sub	sp, #16
 8010242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010244:	b083      	sub	sp, #12
 8010246:	ad09      	add	r5, sp, #36	@ 0x24
 8010248:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801024c:	b130      	cbz	r0, 801025c <rmw_init_options_init+0x1c>
 801024e:	4604      	mov	r4, r0
 8010250:	4628      	mov	r0, r5
 8010252:	f7ff fb8b 	bl	800f96c <rcutils_allocator_is_valid>
 8010256:	b108      	cbz	r0, 801025c <rmw_init_options_init+0x1c>
 8010258:	68a6      	ldr	r6, [r4, #8]
 801025a:	b12e      	cbz	r6, 8010268 <rmw_init_options_init+0x28>
 801025c:	200b      	movs	r0, #11
 801025e:	b003      	add	sp, #12
 8010260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010264:	b004      	add	sp, #16
 8010266:	4770      	bx	lr
 8010268:	2200      	movs	r2, #0
 801026a:	2300      	movs	r3, #0
 801026c:	e9c4 2300 	strd	r2, r3, [r4]
 8010270:	4b22      	ldr	r3, [pc, #136]	@ (80102fc <rmw_init_options_init+0xbc>)
 8010272:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801030c <rmw_init_options_init+0xcc>
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	60a3      	str	r3, [r4, #8]
 801027a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801027c:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8010280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010284:	466f      	mov	r7, sp
 8010286:	682b      	ldr	r3, [r5, #0]
 8010288:	f8cc 3000 	str.w	r3, [ip]
 801028c:	4638      	mov	r0, r7
 801028e:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8010292:	60e6      	str	r6, [r4, #12]
 8010294:	f001 fd18 	bl	8011cc8 <rmw_get_default_security_options>
 8010298:	e897 0003 	ldmia.w	r7, {r0, r1}
 801029c:	f104 0310 	add.w	r3, r4, #16
 80102a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80102a4:	2203      	movs	r2, #3
 80102a6:	4816      	ldr	r0, [pc, #88]	@ (8010300 <rmw_init_options_init+0xc0>)
 80102a8:	4916      	ldr	r1, [pc, #88]	@ (8010304 <rmw_init_options_init+0xc4>)
 80102aa:	7626      	strb	r6, [r4, #24]
 80102ac:	f001 faa4 	bl	80117f8 <rmw_uxrce_init_init_options_impl_memory>
 80102b0:	4813      	ldr	r0, [pc, #76]	@ (8010300 <rmw_init_options_init+0xc0>)
 80102b2:	f007 f929 	bl	8017508 <get_memory>
 80102b6:	b1f0      	cbz	r0, 80102f6 <rmw_init_options_init+0xb6>
 80102b8:	4a13      	ldr	r2, [pc, #76]	@ (8010308 <rmw_init_options_init+0xc8>)
 80102ba:	6883      	ldr	r3, [r0, #8]
 80102bc:	6851      	ldr	r1, [r2, #4]
 80102be:	7810      	ldrb	r0, [r2, #0]
 80102c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80102c2:	7418      	strb	r0, [r3, #16]
 80102c4:	6159      	str	r1, [r3, #20]
 80102c6:	68d1      	ldr	r1, [r2, #12]
 80102c8:	61d9      	str	r1, [r3, #28]
 80102ca:	6911      	ldr	r1, [r2, #16]
 80102cc:	6219      	str	r1, [r3, #32]
 80102ce:	6951      	ldr	r1, [r2, #20]
 80102d0:	6892      	ldr	r2, [r2, #8]
 80102d2:	619a      	str	r2, [r3, #24]
 80102d4:	6259      	str	r1, [r3, #36]	@ 0x24
 80102d6:	f004 fb7d 	bl	80149d4 <uxr_nanos>
 80102da:	f008 f9df 	bl	801869c <srand>
 80102de:	f008 fa0b 	bl	80186f8 <rand>
 80102e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80102e4:	6298      	str	r0, [r3, #40]	@ 0x28
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d0f9      	beq.n	80102de <rmw_init_options_init+0x9e>
 80102ea:	2000      	movs	r0, #0
 80102ec:	b003      	add	sp, #12
 80102ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80102f2:	b004      	add	sp, #16
 80102f4:	4770      	bx	lr
 80102f6:	2001      	movs	r0, #1
 80102f8:	e7b1      	b.n	801025e <rmw_init_options_init+0x1e>
 80102fa:	bf00      	nop
 80102fc:	0801cc94 	.word	0x0801cc94
 8010300:	200145a4 	.word	0x200145a4
 8010304:	2000fe40 	.word	0x2000fe40
 8010308:	2000fc90 	.word	0x2000fc90
 801030c:	0801bff0 	.word	0x0801bff0

08010310 <rmw_init_options_copy>:
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	b158      	cbz	r0, 801032c <rmw_init_options_copy+0x1c>
 8010314:	460d      	mov	r5, r1
 8010316:	b149      	cbz	r1, 801032c <rmw_init_options_copy+0x1c>
 8010318:	4604      	mov	r4, r0
 801031a:	6880      	ldr	r0, [r0, #8]
 801031c:	b120      	cbz	r0, 8010328 <rmw_init_options_copy+0x18>
 801031e:	4b14      	ldr	r3, [pc, #80]	@ (8010370 <rmw_init_options_copy+0x60>)
 8010320:	6819      	ldr	r1, [r3, #0]
 8010322:	f7ef ff55 	bl	80001d0 <strcmp>
 8010326:	b9e8      	cbnz	r0, 8010364 <rmw_init_options_copy+0x54>
 8010328:	68ae      	ldr	r6, [r5, #8]
 801032a:	b116      	cbz	r6, 8010332 <rmw_init_options_copy+0x22>
 801032c:	260b      	movs	r6, #11
 801032e:	4630      	mov	r0, r6
 8010330:	bd70      	pop	{r4, r5, r6, pc}
 8010332:	2258      	movs	r2, #88	@ 0x58
 8010334:	4621      	mov	r1, r4
 8010336:	4628      	mov	r0, r5
 8010338:	f009 fb2d 	bl	8019996 <memcpy>
 801033c:	480d      	ldr	r0, [pc, #52]	@ (8010374 <rmw_init_options_copy+0x64>)
 801033e:	f007 f8e3 	bl	8017508 <get_memory>
 8010342:	b190      	cbz	r0, 801036a <rmw_init_options_copy+0x5a>
 8010344:	6883      	ldr	r3, [r0, #8]
 8010346:	656b      	str	r3, [r5, #84]	@ 0x54
 8010348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801034a:	f102 0c10 	add.w	ip, r2, #16
 801034e:	f103 0510 	add.w	r5, r3, #16
 8010352:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010358:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801035c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010360:	4630      	mov	r0, r6
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	260c      	movs	r6, #12
 8010366:	4630      	mov	r0, r6
 8010368:	bd70      	pop	{r4, r5, r6, pc}
 801036a:	2601      	movs	r6, #1
 801036c:	e7df      	b.n	801032e <rmw_init_options_copy+0x1e>
 801036e:	bf00      	nop
 8010370:	0801cc94 	.word	0x0801cc94
 8010374:	200145a4 	.word	0x200145a4

08010378 <rmw_init_options_fini>:
 8010378:	b368      	cbz	r0, 80103d6 <rmw_init_options_fini+0x5e>
 801037a:	b510      	push	{r4, lr}
 801037c:	4604      	mov	r4, r0
 801037e:	b096      	sub	sp, #88	@ 0x58
 8010380:	3040      	adds	r0, #64	@ 0x40
 8010382:	f7ff faf3 	bl	800f96c <rcutils_allocator_is_valid>
 8010386:	b1f0      	cbz	r0, 80103c6 <rmw_init_options_fini+0x4e>
 8010388:	68a0      	ldr	r0, [r4, #8]
 801038a:	b120      	cbz	r0, 8010396 <rmw_init_options_fini+0x1e>
 801038c:	4b13      	ldr	r3, [pc, #76]	@ (80103dc <rmw_init_options_fini+0x64>)
 801038e:	6819      	ldr	r1, [r3, #0]
 8010390:	f7ef ff1e 	bl	80001d0 <strcmp>
 8010394:	b9e8      	cbnz	r0, 80103d2 <rmw_init_options_fini+0x5a>
 8010396:	4b12      	ldr	r3, [pc, #72]	@ (80103e0 <rmw_init_options_fini+0x68>)
 8010398:	6819      	ldr	r1, [r3, #0]
 801039a:	b1b9      	cbz	r1, 80103cc <rmw_init_options_fini+0x54>
 801039c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801039e:	e001      	b.n	80103a4 <rmw_init_options_fini+0x2c>
 80103a0:	6849      	ldr	r1, [r1, #4]
 80103a2:	b199      	cbz	r1, 80103cc <rmw_init_options_fini+0x54>
 80103a4:	688b      	ldr	r3, [r1, #8]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d1fa      	bne.n	80103a0 <rmw_init_options_fini+0x28>
 80103aa:	480d      	ldr	r0, [pc, #52]	@ (80103e0 <rmw_init_options_fini+0x68>)
 80103ac:	f007 f8bc 	bl	8017528 <put_memory>
 80103b0:	4668      	mov	r0, sp
 80103b2:	f7ff feb3 	bl	801011c <rmw_get_zero_initialized_init_options>
 80103b6:	2258      	movs	r2, #88	@ 0x58
 80103b8:	4669      	mov	r1, sp
 80103ba:	4620      	mov	r0, r4
 80103bc:	f009 faeb 	bl	8019996 <memcpy>
 80103c0:	2000      	movs	r0, #0
 80103c2:	b016      	add	sp, #88	@ 0x58
 80103c4:	bd10      	pop	{r4, pc}
 80103c6:	200b      	movs	r0, #11
 80103c8:	b016      	add	sp, #88	@ 0x58
 80103ca:	bd10      	pop	{r4, pc}
 80103cc:	2001      	movs	r0, #1
 80103ce:	b016      	add	sp, #88	@ 0x58
 80103d0:	bd10      	pop	{r4, pc}
 80103d2:	200c      	movs	r0, #12
 80103d4:	e7f5      	b.n	80103c2 <rmw_init_options_fini+0x4a>
 80103d6:	200b      	movs	r0, #11
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	0801cc94 	.word	0x0801cc94
 80103e0:	200145a4 	.word	0x200145a4

080103e4 <rmw_init>:
 80103e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103e8:	b083      	sub	sp, #12
 80103ea:	2800      	cmp	r0, #0
 80103ec:	f000 80d3 	beq.w	8010596 <rmw_init+0x1b2>
 80103f0:	460e      	mov	r6, r1
 80103f2:	2900      	cmp	r1, #0
 80103f4:	f000 80cf 	beq.w	8010596 <rmw_init+0x1b2>
 80103f8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80103fa:	4605      	mov	r5, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f000 80ca 	beq.w	8010596 <rmw_init+0x1b2>
 8010402:	4b78      	ldr	r3, [pc, #480]	@ (80105e4 <rmw_init+0x200>)
 8010404:	6880      	ldr	r0, [r0, #8]
 8010406:	681f      	ldr	r7, [r3, #0]
 8010408:	b128      	cbz	r0, 8010416 <rmw_init+0x32>
 801040a:	4639      	mov	r1, r7
 801040c:	f7ef fee0 	bl	80001d0 <strcmp>
 8010410:	2800      	cmp	r0, #0
 8010412:	f040 80ca 	bne.w	80105aa <rmw_init+0x1c6>
 8010416:	e9d5 2300 	ldrd	r2, r3, [r5]
 801041a:	4c73      	ldr	r4, [pc, #460]	@ (80105e8 <rmw_init+0x204>)
 801041c:	4973      	ldr	r1, [pc, #460]	@ (80105ec <rmw_init+0x208>)
 801041e:	4874      	ldr	r0, [pc, #464]	@ (80105f0 <rmw_init+0x20c>)
 8010420:	60b7      	str	r7, [r6, #8]
 8010422:	e9c6 2300 	strd	r2, r3, [r6]
 8010426:	68eb      	ldr	r3, [r5, #12]
 8010428:	66b3      	str	r3, [r6, #104]	@ 0x68
 801042a:	2201      	movs	r2, #1
 801042c:	f001 f984 	bl	8011738 <rmw_uxrce_init_session_memory>
 8010430:	4620      	mov	r0, r4
 8010432:	4970      	ldr	r1, [pc, #448]	@ (80105f4 <rmw_init+0x210>)
 8010434:	2204      	movs	r2, #4
 8010436:	f001 f9bf 	bl	80117b8 <rmw_uxrce_init_static_input_buffer_memory>
 801043a:	f04f 0800 	mov.w	r8, #0
 801043e:	486c      	ldr	r0, [pc, #432]	@ (80105f0 <rmw_init+0x20c>)
 8010440:	f884 800d 	strb.w	r8, [r4, #13]
 8010444:	f007 f860 	bl	8017508 <get_memory>
 8010448:	2800      	cmp	r0, #0
 801044a:	f000 80a9 	beq.w	80105a0 <rmw_init+0x1bc>
 801044e:	6884      	ldr	r4, [r0, #8]
 8010450:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8010452:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010454:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010458:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801045c:	9101      	str	r1, [sp, #4]
 801045e:	6a00      	ldr	r0, [r0, #32]
 8010460:	9000      	str	r0, [sp, #0]
 8010462:	f104 0910 	add.w	r9, r4, #16
 8010466:	4661      	mov	r1, ip
 8010468:	4648      	mov	r0, r9
 801046a:	f002 fa4f 	bl	801290c <uxr_set_custom_transport_callbacks>
 801046e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8010472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010476:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801047a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801047e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010482:	495d      	ldr	r1, [pc, #372]	@ (80105f8 <rmw_init+0x214>)
 8010484:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010488:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801048c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010490:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010494:	4859      	ldr	r0, [pc, #356]	@ (80105fc <rmw_init+0x218>)
 8010496:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801049a:	2201      	movs	r2, #1
 801049c:	66f4      	str	r4, [r6, #108]	@ 0x6c
 801049e:	f001 f92b 	bl	80116f8 <rmw_uxrce_init_node_memory>
 80104a2:	4957      	ldr	r1, [pc, #348]	@ (8010600 <rmw_init+0x21c>)
 80104a4:	4857      	ldr	r0, [pc, #348]	@ (8010604 <rmw_init+0x220>)
 80104a6:	2205      	movs	r2, #5
 80104a8:	f001 f906 	bl	80116b8 <rmw_uxrce_init_subscription_memory>
 80104ac:	4956      	ldr	r1, [pc, #344]	@ (8010608 <rmw_init+0x224>)
 80104ae:	4857      	ldr	r0, [pc, #348]	@ (801060c <rmw_init+0x228>)
 80104b0:	220a      	movs	r2, #10
 80104b2:	f001 f8e1 	bl	8011678 <rmw_uxrce_init_publisher_memory>
 80104b6:	4956      	ldr	r1, [pc, #344]	@ (8010610 <rmw_init+0x22c>)
 80104b8:	4856      	ldr	r0, [pc, #344]	@ (8010614 <rmw_init+0x230>)
 80104ba:	2201      	movs	r2, #1
 80104bc:	f001 f89c 	bl	80115f8 <rmw_uxrce_init_service_memory>
 80104c0:	4955      	ldr	r1, [pc, #340]	@ (8010618 <rmw_init+0x234>)
 80104c2:	4856      	ldr	r0, [pc, #344]	@ (801061c <rmw_init+0x238>)
 80104c4:	2201      	movs	r2, #1
 80104c6:	f001 f8b7 	bl	8011638 <rmw_uxrce_init_client_memory>
 80104ca:	4955      	ldr	r1, [pc, #340]	@ (8010620 <rmw_init+0x23c>)
 80104cc:	4855      	ldr	r0, [pc, #340]	@ (8010624 <rmw_init+0x240>)
 80104ce:	220f      	movs	r2, #15
 80104d0:	f001 f952 	bl	8011778 <rmw_uxrce_init_topic_memory>
 80104d4:	4954      	ldr	r1, [pc, #336]	@ (8010628 <rmw_init+0x244>)
 80104d6:	4855      	ldr	r0, [pc, #340]	@ (801062c <rmw_init+0x248>)
 80104d8:	2203      	movs	r2, #3
 80104da:	f001 f98d 	bl	80117f8 <rmw_uxrce_init_init_options_impl_memory>
 80104de:	4954      	ldr	r1, [pc, #336]	@ (8010630 <rmw_init+0x24c>)
 80104e0:	4854      	ldr	r0, [pc, #336]	@ (8010634 <rmw_init+0x250>)
 80104e2:	2204      	movs	r2, #4
 80104e4:	f001 f9a8 	bl	8011838 <rmw_uxrce_init_wait_set_memory>
 80104e8:	4953      	ldr	r1, [pc, #332]	@ (8010638 <rmw_init+0x254>)
 80104ea:	4854      	ldr	r0, [pc, #336]	@ (801063c <rmw_init+0x258>)
 80104ec:	2204      	movs	r2, #4
 80104ee:	f001 f9c3 	bl	8011878 <rmw_uxrce_init_guard_condition_memory>
 80104f2:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80104f4:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 80104f6:	4642      	mov	r2, r8
 80104f8:	f000 fed0 	bl	801129c <rmw_uxrce_transport_init>
 80104fc:	4607      	mov	r7, r0
 80104fe:	2800      	cmp	r0, #0
 8010500:	d158      	bne.n	80105b4 <rmw_init+0x1d0>
 8010502:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8010504:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801050a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801050e:	4628      	mov	r0, r5
 8010510:	f002 fc32 	bl	8012d78 <uxr_init_session>
 8010514:	494a      	ldr	r1, [pc, #296]	@ (8010640 <rmw_init+0x25c>)
 8010516:	4622      	mov	r2, r4
 8010518:	4628      	mov	r0, r5
 801051a:	f002 fc51 	bl	8012dc0 <uxr_set_topic_callback>
 801051e:	4949      	ldr	r1, [pc, #292]	@ (8010644 <rmw_init+0x260>)
 8010520:	463a      	mov	r2, r7
 8010522:	4628      	mov	r0, r5
 8010524:	f002 fc48 	bl	8012db8 <uxr_set_status_callback>
 8010528:	4947      	ldr	r1, [pc, #284]	@ (8010648 <rmw_init+0x264>)
 801052a:	463a      	mov	r2, r7
 801052c:	4628      	mov	r0, r5
 801052e:	f002 fc4b 	bl	8012dc8 <uxr_set_request_callback>
 8010532:	4946      	ldr	r1, [pc, #280]	@ (801064c <rmw_init+0x268>)
 8010534:	463a      	mov	r2, r7
 8010536:	4628      	mov	r0, r5
 8010538:	f002 fc4a 	bl	8012dd0 <uxr_set_reply_callback>
 801053c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010540:	2304      	movs	r3, #4
 8010542:	0092      	lsls	r2, r2, #2
 8010544:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010548:	4628      	mov	r0, r5
 801054a:	f002 fc7f 	bl	8012e4c <uxr_create_input_reliable_stream>
 801054e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010552:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010556:	0092      	lsls	r2, r2, #2
 8010558:	2304      	movs	r3, #4
 801055a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801055e:	4628      	mov	r0, r5
 8010560:	f002 fc4c 	bl	8012dfc <uxr_create_output_reliable_stream>
 8010564:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010568:	4628      	mov	r0, r5
 801056a:	f002 fc69 	bl	8012e40 <uxr_create_input_best_effort_stream>
 801056e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010572:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010576:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801057a:	3114      	adds	r1, #20
 801057c:	4628      	mov	r0, r5
 801057e:	f002 fc2b 	bl	8012dd8 <uxr_create_output_best_effort_stream>
 8010582:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010586:	4628      	mov	r0, r5
 8010588:	f003 f9b6 	bl	80138f8 <uxr_create_session>
 801058c:	b1f8      	cbz	r0, 80105ce <rmw_init+0x1ea>
 801058e:	4638      	mov	r0, r7
 8010590:	b003      	add	sp, #12
 8010592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010596:	270b      	movs	r7, #11
 8010598:	4638      	mov	r0, r7
 801059a:	b003      	add	sp, #12
 801059c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105a0:	2701      	movs	r7, #1
 80105a2:	4638      	mov	r0, r7
 80105a4:	b003      	add	sp, #12
 80105a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105aa:	270c      	movs	r7, #12
 80105ac:	4638      	mov	r0, r7
 80105ae:	b003      	add	sp, #12
 80105b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105b4:	4648      	mov	r0, r9
 80105b6:	f002 f9eb 	bl	8012990 <uxr_close_custom_transport>
 80105ba:	480d      	ldr	r0, [pc, #52]	@ (80105f0 <rmw_init+0x20c>)
 80105bc:	4621      	mov	r1, r4
 80105be:	f006 ffb3 	bl	8017528 <put_memory>
 80105c2:	4638      	mov	r0, r7
 80105c4:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80105c8:	b003      	add	sp, #12
 80105ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105ce:	4648      	mov	r0, r9
 80105d0:	f002 f9de 	bl	8012990 <uxr_close_custom_transport>
 80105d4:	4806      	ldr	r0, [pc, #24]	@ (80105f0 <rmw_init+0x20c>)
 80105d6:	4621      	mov	r1, r4
 80105d8:	f006 ffa6 	bl	8017528 <put_memory>
 80105dc:	66f7      	str	r7, [r6, #108]	@ 0x6c
 80105de:	2701      	movs	r7, #1
 80105e0:	e7d5      	b.n	801058e <rmw_init+0x1aa>
 80105e2:	bf00      	nop
 80105e4:	0801cc94 	.word	0x0801cc94
 80105e8:	200145f4 	.word	0x200145f4
 80105ec:	200108a0 	.word	0x200108a0
 80105f0:	200145e4 	.word	0x200145e4
 80105f4:	20011e48 	.word	0x20011e48
 80105f8:	2000fec4 	.word	0x2000fec4
 80105fc:	200145b4 	.word	0x200145b4
 8010600:	20013f48 	.word	0x20013f48
 8010604:	20014604 	.word	0x20014604
 8010608:	2000ff68 	.word	0x2000ff68
 801060c:	200145c4 	.word	0x200145c4
 8010610:	200107d8 	.word	0x200107d8
 8010614:	200145d4 	.word	0x200145d4
 8010618:	2000fcf8 	.word	0x2000fcf8
 801061c:	2000fce8 	.word	0x2000fce8
 8010620:	20014380 	.word	0x20014380
 8010624:	20014614 	.word	0x20014614
 8010628:	2000fe40 	.word	0x2000fe40
 801062c:	200145a4 	.word	0x200145a4
 8010630:	20014524 	.word	0x20014524
 8010634:	20014624 	.word	0x20014624
 8010638:	2000fdc0 	.word	0x2000fdc0
 801063c:	20014594 	.word	0x20014594
 8010640:	08017341 	.word	0x08017341
 8010644:	08017339 	.word	0x08017339
 8010648:	080173d9 	.word	0x080173d9
 801064c:	08017475 	.word	0x08017475

08010650 <rmw_context_fini>:
 8010650:	4b17      	ldr	r3, [pc, #92]	@ (80106b0 <rmw_context_fini+0x60>)
 8010652:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	681c      	ldr	r4, [r3, #0]
 8010658:	4605      	mov	r5, r0
 801065a:	b334      	cbz	r4, 80106aa <rmw_context_fini+0x5a>
 801065c:	2600      	movs	r6, #0
 801065e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010662:	6902      	ldr	r2, [r0, #16]
 8010664:	428a      	cmp	r2, r1
 8010666:	d018      	beq.n	801069a <rmw_context_fini+0x4a>
 8010668:	2c00      	cmp	r4, #0
 801066a:	d1f8      	bne.n	801065e <rmw_context_fini+0xe>
 801066c:	b189      	cbz	r1, 8010692 <rmw_context_fini+0x42>
 801066e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8010672:	789b      	ldrb	r3, [r3, #2]
 8010674:	2b01      	cmp	r3, #1
 8010676:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801067a:	bf14      	ite	ne
 801067c:	210a      	movne	r1, #10
 801067e:	2100      	moveq	r1, #0
 8010680:	f003 f912 	bl	80138a8 <uxr_delete_session_retries>
 8010684:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8010686:	f001 f917 	bl	80118b8 <rmw_uxrce_fini_session_memory>
 801068a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801068c:	3010      	adds	r0, #16
 801068e:	f002 f97f 	bl	8012990 <uxr_close_custom_transport>
 8010692:	2300      	movs	r3, #0
 8010694:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8010696:	4630      	mov	r0, r6
 8010698:	bd70      	pop	{r4, r5, r6, pc}
 801069a:	3018      	adds	r0, #24
 801069c:	f000 f89c 	bl	80107d8 <rmw_destroy_node>
 80106a0:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 80106a2:	4606      	mov	r6, r0
 80106a4:	2c00      	cmp	r4, #0
 80106a6:	d1da      	bne.n	801065e <rmw_context_fini+0xe>
 80106a8:	e7e0      	b.n	801066c <rmw_context_fini+0x1c>
 80106aa:	4626      	mov	r6, r4
 80106ac:	e7de      	b.n	801066c <rmw_context_fini+0x1c>
 80106ae:	bf00      	nop
 80106b0:	200145b4 	.word	0x200145b4

080106b4 <create_node>:
 80106b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106b8:	b083      	sub	sp, #12
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d05f      	beq.n	801077e <create_node+0xca>
 80106be:	4606      	mov	r6, r0
 80106c0:	4835      	ldr	r0, [pc, #212]	@ (8010798 <create_node+0xe4>)
 80106c2:	460f      	mov	r7, r1
 80106c4:	4690      	mov	r8, r2
 80106c6:	461d      	mov	r5, r3
 80106c8:	f006 ff1e 	bl	8017508 <get_memory>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d056      	beq.n	801077e <create_node+0xca>
 80106d0:	6884      	ldr	r4, [r0, #8]
 80106d2:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80106d4:	6123      	str	r3, [r4, #16]
 80106d6:	f7ff fdad 	bl	8010234 <rmw_get_implementation_identifier>
 80106da:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80106de:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80106e2:	f8c4 9020 	str.w	r9, [r4, #32]
 80106e6:	4630      	mov	r0, r6
 80106e8:	f7ef fdd2 	bl	8000290 <strlen>
 80106ec:	1c42      	adds	r2, r0, #1
 80106ee:	2a3c      	cmp	r2, #60	@ 0x3c
 80106f0:	f104 0518 	add.w	r5, r4, #24
 80106f4:	d840      	bhi.n	8010778 <create_node+0xc4>
 80106f6:	4648      	mov	r0, r9
 80106f8:	4631      	mov	r1, r6
 80106fa:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80106fe:	f009 f94a 	bl	8019996 <memcpy>
 8010702:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8010706:	4638      	mov	r0, r7
 8010708:	f7ef fdc2 	bl	8000290 <strlen>
 801070c:	1c42      	adds	r2, r0, #1
 801070e:	2a3c      	cmp	r2, #60	@ 0x3c
 8010710:	d832      	bhi.n	8010778 <create_node+0xc4>
 8010712:	4639      	mov	r1, r7
 8010714:	4648      	mov	r0, r9
 8010716:	f009 f93e 	bl	8019996 <memcpy>
 801071a:	6923      	ldr	r3, [r4, #16]
 801071c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010720:	2101      	movs	r1, #1
 8010722:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8010726:	1842      	adds	r2, r0, r1
 8010728:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801072c:	f002 f934 	bl	8012998 <uxr_object_id>
 8010730:	6160      	str	r0, [r4, #20]
 8010732:	783b      	ldrb	r3, [r7, #0]
 8010734:	2b2f      	cmp	r3, #47	@ 0x2f
 8010736:	d127      	bne.n	8010788 <create_node+0xd4>
 8010738:	787b      	ldrb	r3, [r7, #1]
 801073a:	bb2b      	cbnz	r3, 8010788 <create_node+0xd4>
 801073c:	4a17      	ldr	r2, [pc, #92]	@ (801079c <create_node+0xe8>)
 801073e:	4818      	ldr	r0, [pc, #96]	@ (80107a0 <create_node+0xec>)
 8010740:	4633      	mov	r3, r6
 8010742:	213c      	movs	r1, #60	@ 0x3c
 8010744:	f008 feba 	bl	80194bc <sniprintf>
 8010748:	6920      	ldr	r0, [r4, #16]
 801074a:	4915      	ldr	r1, [pc, #84]	@ (80107a0 <create_node+0xec>)
 801074c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010750:	9100      	str	r1, [sp, #0]
 8010752:	2106      	movs	r1, #6
 8010754:	9101      	str	r1, [sp, #4]
 8010756:	6811      	ldr	r1, [r2, #0]
 8010758:	6962      	ldr	r2, [r4, #20]
 801075a:	fa1f f388 	uxth.w	r3, r8
 801075e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010762:	f001 fea1 	bl	80124a8 <uxr_buffer_create_participant_bin>
 8010766:	4602      	mov	r2, r0
 8010768:	6920      	ldr	r0, [r4, #16]
 801076a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801076e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010772:	f001 fa17 	bl	8011ba4 <run_xrce_session>
 8010776:	b918      	cbnz	r0, 8010780 <create_node+0xcc>
 8010778:	4628      	mov	r0, r5
 801077a:	f001 f8a3 	bl	80118c4 <rmw_uxrce_fini_node_memory>
 801077e:	2500      	movs	r5, #0
 8010780:	4628      	mov	r0, r5
 8010782:	b003      	add	sp, #12
 8010784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010788:	4a06      	ldr	r2, [pc, #24]	@ (80107a4 <create_node+0xf0>)
 801078a:	9600      	str	r6, [sp, #0]
 801078c:	463b      	mov	r3, r7
 801078e:	213c      	movs	r1, #60	@ 0x3c
 8010790:	4803      	ldr	r0, [pc, #12]	@ (80107a0 <create_node+0xec>)
 8010792:	f008 fe93 	bl	80194bc <sniprintf>
 8010796:	e7d7      	b.n	8010748 <create_node+0x94>
 8010798:	200145b4 	.word	0x200145b4
 801079c:	0801c24c 	.word	0x0801c24c
 80107a0:	2000fcac 	.word	0x2000fcac
 80107a4:	0801c000 	.word	0x0801c000

080107a8 <rmw_create_node>:
 80107a8:	b199      	cbz	r1, 80107d2 <rmw_create_node+0x2a>
 80107aa:	780b      	ldrb	r3, [r1, #0]
 80107ac:	468c      	mov	ip, r1
 80107ae:	b183      	cbz	r3, 80107d2 <rmw_create_node+0x2a>
 80107b0:	b410      	push	{r4}
 80107b2:	4614      	mov	r4, r2
 80107b4:	b14a      	cbz	r2, 80107ca <rmw_create_node+0x22>
 80107b6:	7813      	ldrb	r3, [r2, #0]
 80107b8:	b13b      	cbz	r3, 80107ca <rmw_create_node+0x22>
 80107ba:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 80107bc:	4603      	mov	r3, r0
 80107be:	4621      	mov	r1, r4
 80107c0:	4660      	mov	r0, ip
 80107c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107c6:	f7ff bf75 	b.w	80106b4 <create_node>
 80107ca:	2000      	movs	r0, #0
 80107cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107d0:	4770      	bx	lr
 80107d2:	2000      	movs	r0, #0
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop

080107d8 <rmw_destroy_node>:
 80107d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107da:	b328      	cbz	r0, 8010828 <rmw_destroy_node+0x50>
 80107dc:	4607      	mov	r7, r0
 80107de:	6800      	ldr	r0, [r0, #0]
 80107e0:	b120      	cbz	r0, 80107ec <rmw_destroy_node+0x14>
 80107e2:	4b36      	ldr	r3, [pc, #216]	@ (80108bc <rmw_destroy_node+0xe4>)
 80107e4:	6819      	ldr	r1, [r3, #0]
 80107e6:	f7ef fcf3 	bl	80001d0 <strcmp>
 80107ea:	b9e8      	cbnz	r0, 8010828 <rmw_destroy_node+0x50>
 80107ec:	687d      	ldr	r5, [r7, #4]
 80107ee:	b1dd      	cbz	r5, 8010828 <rmw_destroy_node+0x50>
 80107f0:	4b33      	ldr	r3, [pc, #204]	@ (80108c0 <rmw_destroy_node+0xe8>)
 80107f2:	681c      	ldr	r4, [r3, #0]
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	d05f      	beq.n	80108b8 <rmw_destroy_node+0xe0>
 80107f8:	2600      	movs	r6, #0
 80107fa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80107fe:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8010802:	429d      	cmp	r5, r3
 8010804:	d013      	beq.n	801082e <rmw_destroy_node+0x56>
 8010806:	2c00      	cmp	r4, #0
 8010808:	d1f7      	bne.n	80107fa <rmw_destroy_node+0x22>
 801080a:	4b2e      	ldr	r3, [pc, #184]	@ (80108c4 <rmw_destroy_node+0xec>)
 801080c:	681c      	ldr	r4, [r3, #0]
 801080e:	b1c4      	cbz	r4, 8010842 <rmw_destroy_node+0x6a>
 8010810:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010814:	6a0b      	ldr	r3, [r1, #32]
 8010816:	429d      	cmp	r5, r3
 8010818:	d1f9      	bne.n	801080e <rmw_destroy_node+0x36>
 801081a:	317c      	adds	r1, #124	@ 0x7c
 801081c:	4638      	mov	r0, r7
 801081e:	f000 fc89 	bl	8011134 <rmw_destroy_subscription>
 8010822:	2801      	cmp	r0, #1
 8010824:	4606      	mov	r6, r0
 8010826:	d1f2      	bne.n	801080e <rmw_destroy_node+0x36>
 8010828:	2601      	movs	r6, #1
 801082a:	4630      	mov	r0, r6
 801082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801082e:	3184      	adds	r1, #132	@ 0x84
 8010830:	4638      	mov	r0, r7
 8010832:	f000 f9a5 	bl	8010b80 <rmw_destroy_publisher>
 8010836:	2801      	cmp	r0, #1
 8010838:	4606      	mov	r6, r0
 801083a:	d0f5      	beq.n	8010828 <rmw_destroy_node+0x50>
 801083c:	2c00      	cmp	r4, #0
 801083e:	d1dc      	bne.n	80107fa <rmw_destroy_node+0x22>
 8010840:	e7e3      	b.n	801080a <rmw_destroy_node+0x32>
 8010842:	4b21      	ldr	r3, [pc, #132]	@ (80108c8 <rmw_destroy_node+0xf0>)
 8010844:	681c      	ldr	r4, [r3, #0]
 8010846:	b16c      	cbz	r4, 8010864 <rmw_destroy_node+0x8c>
 8010848:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801084c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801084e:	429d      	cmp	r5, r3
 8010850:	d1f9      	bne.n	8010846 <rmw_destroy_node+0x6e>
 8010852:	317c      	adds	r1, #124	@ 0x7c
 8010854:	4638      	mov	r0, r7
 8010856:	f000 fb37 	bl	8010ec8 <rmw_destroy_service>
 801085a:	2801      	cmp	r0, #1
 801085c:	4606      	mov	r6, r0
 801085e:	d0e3      	beq.n	8010828 <rmw_destroy_node+0x50>
 8010860:	2c00      	cmp	r4, #0
 8010862:	d1f1      	bne.n	8010848 <rmw_destroy_node+0x70>
 8010864:	4b19      	ldr	r3, [pc, #100]	@ (80108cc <rmw_destroy_node+0xf4>)
 8010866:	681c      	ldr	r4, [r3, #0]
 8010868:	b16c      	cbz	r4, 8010886 <rmw_destroy_node+0xae>
 801086a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801086e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010870:	429d      	cmp	r5, r3
 8010872:	d1f9      	bne.n	8010868 <rmw_destroy_node+0x90>
 8010874:	317c      	adds	r1, #124	@ 0x7c
 8010876:	4638      	mov	r0, r7
 8010878:	f7ff fc7a 	bl	8010170 <rmw_destroy_client>
 801087c:	2801      	cmp	r0, #1
 801087e:	4606      	mov	r6, r0
 8010880:	d0d2      	beq.n	8010828 <rmw_destroy_node+0x50>
 8010882:	2c00      	cmp	r4, #0
 8010884:	d1f1      	bne.n	801086a <rmw_destroy_node+0x92>
 8010886:	6928      	ldr	r0, [r5, #16]
 8010888:	696a      	ldr	r2, [r5, #20]
 801088a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801088e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010892:	6819      	ldr	r1, [r3, #0]
 8010894:	f001 fdbc 	bl	8012410 <uxr_buffer_delete_entity>
 8010898:	4602      	mov	r2, r0
 801089a:	6928      	ldr	r0, [r5, #16]
 801089c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80108a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80108a4:	f001 f97e 	bl	8011ba4 <run_xrce_session>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	bf08      	it	eq
 80108ac:	2602      	moveq	r6, #2
 80108ae:	4638      	mov	r0, r7
 80108b0:	f001 f808 	bl	80118c4 <rmw_uxrce_fini_node_memory>
 80108b4:	4630      	mov	r0, r6
 80108b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108b8:	4626      	mov	r6, r4
 80108ba:	e7a6      	b.n	801080a <rmw_destroy_node+0x32>
 80108bc:	0801cc94 	.word	0x0801cc94
 80108c0:	200145c4 	.word	0x200145c4
 80108c4:	20014604 	.word	0x20014604
 80108c8:	200145d4 	.word	0x200145d4
 80108cc:	2000fce8 	.word	0x2000fce8

080108d0 <rmw_node_get_graph_guard_condition>:
 80108d0:	6843      	ldr	r3, [r0, #4]
 80108d2:	6918      	ldr	r0, [r3, #16]
 80108d4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop

080108dc <flush_session>:
 80108dc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80108de:	f002 be9b 	b.w	8013618 <uxr_run_session_until_confirm_delivery>
 80108e2:	bf00      	nop

080108e4 <rmw_publish>:
 80108e4:	2800      	cmp	r0, #0
 80108e6:	d053      	beq.n	8010990 <rmw_publish+0xac>
 80108e8:	b570      	push	{r4, r5, r6, lr}
 80108ea:	460d      	mov	r5, r1
 80108ec:	b08e      	sub	sp, #56	@ 0x38
 80108ee:	2900      	cmp	r1, #0
 80108f0:	d04b      	beq.n	801098a <rmw_publish+0xa6>
 80108f2:	4604      	mov	r4, r0
 80108f4:	6800      	ldr	r0, [r0, #0]
 80108f6:	f001 f9d5 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d045      	beq.n	801098a <rmw_publish+0xa6>
 80108fe:	6866      	ldr	r6, [r4, #4]
 8010900:	2e00      	cmp	r6, #0
 8010902:	d042      	beq.n	801098a <rmw_publish+0xa6>
 8010904:	69b4      	ldr	r4, [r6, #24]
 8010906:	4628      	mov	r0, r5
 8010908:	6923      	ldr	r3, [r4, #16]
 801090a:	4798      	blx	r3
 801090c:	69f3      	ldr	r3, [r6, #28]
 801090e:	9005      	str	r0, [sp, #20]
 8010910:	b113      	cbz	r3, 8010918 <rmw_publish+0x34>
 8010912:	a805      	add	r0, sp, #20
 8010914:	4798      	blx	r3
 8010916:	9805      	ldr	r0, [sp, #20]
 8010918:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801091c:	691b      	ldr	r3, [r3, #16]
 801091e:	9000      	str	r0, [sp, #0]
 8010920:	6972      	ldr	r2, [r6, #20]
 8010922:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010924:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010928:	ab06      	add	r3, sp, #24
 801092a:	f004 f8f3 	bl	8014b14 <uxr_prepare_output_stream>
 801092e:	b1d8      	cbz	r0, 8010968 <rmw_publish+0x84>
 8010930:	68a3      	ldr	r3, [r4, #8]
 8010932:	a906      	add	r1, sp, #24
 8010934:	4628      	mov	r0, r5
 8010936:	4798      	blx	r3
 8010938:	6a33      	ldr	r3, [r6, #32]
 801093a:	4604      	mov	r4, r0
 801093c:	b10b      	cbz	r3, 8010942 <rmw_publish+0x5e>
 801093e:	a806      	add	r0, sp, #24
 8010940:	4798      	blx	r3
 8010942:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8010946:	2b01      	cmp	r3, #1
 8010948:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801094c:	d022      	beq.n	8010994 <rmw_publish+0xb0>
 801094e:	6918      	ldr	r0, [r3, #16]
 8010950:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8010952:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010956:	f002 fe5f 	bl	8013618 <uxr_run_session_until_confirm_delivery>
 801095a:	4020      	ands	r0, r4
 801095c:	b2c4      	uxtb	r4, r0
 801095e:	f084 0001 	eor.w	r0, r4, #1
 8010962:	b2c0      	uxtb	r0, r0
 8010964:	b00e      	add	sp, #56	@ 0x38
 8010966:	bd70      	pop	{r4, r5, r6, pc}
 8010968:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801096c:	6918      	ldr	r0, [r3, #16]
 801096e:	9b05      	ldr	r3, [sp, #20]
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	4b0b      	ldr	r3, [pc, #44]	@ (80109a0 <rmw_publish+0xbc>)
 8010974:	9301      	str	r3, [sp, #4]
 8010976:	9602      	str	r6, [sp, #8]
 8010978:	6972      	ldr	r2, [r6, #20]
 801097a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801097c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010980:	ab06      	add	r3, sp, #24
 8010982:	f004 f8f7 	bl	8014b74 <uxr_prepare_output_stream_fragmented>
 8010986:	2800      	cmp	r0, #0
 8010988:	d1d2      	bne.n	8010930 <rmw_publish+0x4c>
 801098a:	2001      	movs	r0, #1
 801098c:	b00e      	add	sp, #56	@ 0x38
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	2001      	movs	r0, #1
 8010992:	4770      	bx	lr
 8010994:	6918      	ldr	r0, [r3, #16]
 8010996:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801099a:	f002 fa7d 	bl	8012e98 <uxr_flash_output_streams>
 801099e:	e7de      	b.n	801095e <rmw_publish+0x7a>
 80109a0:	080108dd 	.word	0x080108dd

080109a4 <rmw_create_publisher>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	b087      	sub	sp, #28
 80109aa:	2800      	cmp	r0, #0
 80109ac:	f000 80cc 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109b0:	460e      	mov	r6, r1
 80109b2:	2900      	cmp	r1, #0
 80109b4:	f000 80c8 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109b8:	4604      	mov	r4, r0
 80109ba:	6800      	ldr	r0, [r0, #0]
 80109bc:	4615      	mov	r5, r2
 80109be:	4698      	mov	r8, r3
 80109c0:	f001 f970 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	f000 80bf 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109ca:	2d00      	cmp	r5, #0
 80109cc:	f000 80bc 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109d0:	782b      	ldrb	r3, [r5, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 80b8 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109d8:	f1b8 0f00 	cmp.w	r8, #0
 80109dc:	f000 80b4 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109e0:	485c      	ldr	r0, [pc, #368]	@ (8010b54 <rmw_create_publisher+0x1b0>)
 80109e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80109e6:	f006 fd8f 	bl	8017508 <get_memory>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	f000 80ac 	beq.w	8010b48 <rmw_create_publisher+0x1a4>
 80109f0:	6884      	ldr	r4, [r0, #8]
 80109f2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80109f6:	f7ff fc1d 	bl	8010234 <rmw_get_implementation_identifier>
 80109fa:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80109fe:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8010a02:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010a06:	4628      	mov	r0, r5
 8010a08:	f7ef fc42 	bl	8000290 <strlen>
 8010a0c:	3001      	adds	r0, #1
 8010a0e:	283c      	cmp	r0, #60	@ 0x3c
 8010a10:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8010a14:	f200 8091 	bhi.w	8010b3a <rmw_create_publisher+0x196>
 8010a18:	4a4f      	ldr	r2, [pc, #316]	@ (8010b58 <rmw_create_publisher+0x1b4>)
 8010a1a:	462b      	mov	r3, r5
 8010a1c:	213c      	movs	r1, #60	@ 0x3c
 8010a1e:	4650      	mov	r0, sl
 8010a20:	f008 fd4c 	bl	80194bc <sniprintf>
 8010a24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a28:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8010a2a:	4641      	mov	r1, r8
 8010a2c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8010a30:	2250      	movs	r2, #80	@ 0x50
 8010a32:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010a36:	f008 ffae 	bl	8019996 <memcpy>
 8010a3a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010a3e:	4947      	ldr	r1, [pc, #284]	@ (8010b5c <rmw_create_publisher+0x1b8>)
 8010a40:	2b02      	cmp	r3, #2
 8010a42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a46:	bf0c      	ite	eq
 8010a48:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8010a4c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8010a50:	67a3      	str	r3, [r4, #120]	@ 0x78
 8010a52:	2300      	movs	r3, #0
 8010a54:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010a58:	4630      	mov	r0, r6
 8010a5a:	f001 fb25 	bl	80120a8 <get_message_typesupport_handle>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d06b      	beq.n	8010b3a <rmw_create_publisher+0x196>
 8010a62:	6842      	ldr	r2, [r0, #4]
 8010a64:	61a2      	str	r2, [r4, #24]
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	d067      	beq.n	8010b3a <rmw_create_publisher+0x196>
 8010a6a:	4629      	mov	r1, r5
 8010a6c:	4643      	mov	r3, r8
 8010a6e:	4648      	mov	r0, r9
 8010a70:	f006 fd96 	bl	80175a0 <create_topic>
 8010a74:	6260      	str	r0, [r4, #36]	@ 0x24
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d063      	beq.n	8010b42 <rmw_create_publisher+0x19e>
 8010a7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a82:	2103      	movs	r1, #3
 8010a84:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8010a88:	1c42      	adds	r2, r0, #1
 8010a8a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8010a8e:	f001 ff83 	bl	8012998 <uxr_object_id>
 8010a92:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010a96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a9a:	6120      	str	r0, [r4, #16]
 8010a9c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8010aa0:	6910      	ldr	r0, [r2, #16]
 8010aa2:	2506      	movs	r5, #6
 8010aa4:	9500      	str	r5, [sp, #0]
 8010aa6:	6819      	ldr	r1, [r3, #0]
 8010aa8:	6922      	ldr	r2, [r4, #16]
 8010aaa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010aae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ab2:	f001 fd61 	bl	8012578 <uxr_buffer_create_publisher_bin>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010abc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010ac0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010ac4:	f001 f86e 	bl	8011ba4 <run_xrce_session>
 8010ac8:	b3b8      	cbz	r0, 8010b3a <rmw_create_publisher+0x196>
 8010aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010ad2:	2105      	movs	r1, #5
 8010ad4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010ad8:	1c42      	adds	r2, r0, #1
 8010ada:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8010ade:	f001 ff5b 	bl	8012998 <uxr_object_id>
 8010ae2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010ae6:	6160      	str	r0, [r4, #20]
 8010ae8:	691e      	ldr	r6, [r3, #16]
 8010aea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010aee:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010af2:	f10d 0a10 	add.w	sl, sp, #16
 8010af6:	4641      	mov	r1, r8
 8010af8:	4650      	mov	r0, sl
 8010afa:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8010afe:	f001 f86d 	bl	8011bdc <convert_qos_profile>
 8010b02:	9503      	str	r5, [sp, #12]
 8010b04:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010b08:	9001      	str	r0, [sp, #4]
 8010b0a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010b0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010b18:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010b1c:	f8d8 1000 	ldr.w	r1, [r8]
 8010b20:	4630      	mov	r0, r6
 8010b22:	f001 fd89 	bl	8012638 <uxr_buffer_create_datawriter_bin>
 8010b26:	4602      	mov	r2, r0
 8010b28:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010b2c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010b30:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010b34:	f001 f836 	bl	8011ba4 <run_xrce_session>
 8010b38:	b938      	cbnz	r0, 8010b4a <rmw_create_publisher+0x1a6>
 8010b3a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010b3c:	b108      	cbz	r0, 8010b42 <rmw_create_publisher+0x19e>
 8010b3e:	f000 ff31 	bl	80119a4 <rmw_uxrce_fini_topic_memory>
 8010b42:	4638      	mov	r0, r7
 8010b44:	f000 fed6 	bl	80118f4 <rmw_uxrce_fini_publisher_memory>
 8010b48:	2700      	movs	r7, #0
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	b007      	add	sp, #28
 8010b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b52:	bf00      	nop
 8010b54:	200145c4 	.word	0x200145c4
 8010b58:	0801c24c 	.word	0x0801c24c
 8010b5c:	0801be38 	.word	0x0801be38

08010b60 <rmw_publisher_get_actual_qos>:
 8010b60:	b150      	cbz	r0, 8010b78 <rmw_publisher_get_actual_qos+0x18>
 8010b62:	b508      	push	{r3, lr}
 8010b64:	460b      	mov	r3, r1
 8010b66:	b149      	cbz	r1, 8010b7c <rmw_publisher_get_actual_qos+0x1c>
 8010b68:	6841      	ldr	r1, [r0, #4]
 8010b6a:	2250      	movs	r2, #80	@ 0x50
 8010b6c:	3128      	adds	r1, #40	@ 0x28
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f008 ff11 	bl	8019996 <memcpy>
 8010b74:	2000      	movs	r0, #0
 8010b76:	bd08      	pop	{r3, pc}
 8010b78:	200b      	movs	r0, #11
 8010b7a:	4770      	bx	lr
 8010b7c:	200b      	movs	r0, #11
 8010b7e:	bd08      	pop	{r3, pc}

08010b80 <rmw_destroy_publisher>:
 8010b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b82:	b128      	cbz	r0, 8010b90 <rmw_destroy_publisher+0x10>
 8010b84:	4604      	mov	r4, r0
 8010b86:	6800      	ldr	r0, [r0, #0]
 8010b88:	460d      	mov	r5, r1
 8010b8a:	f001 f88b 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8010b8e:	b910      	cbnz	r0, 8010b96 <rmw_destroy_publisher+0x16>
 8010b90:	2401      	movs	r4, #1
 8010b92:	4620      	mov	r0, r4
 8010b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b96:	6863      	ldr	r3, [r4, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d0f9      	beq.n	8010b90 <rmw_destroy_publisher+0x10>
 8010b9c:	2d00      	cmp	r5, #0
 8010b9e:	d0f7      	beq.n	8010b90 <rmw_destroy_publisher+0x10>
 8010ba0:	6828      	ldr	r0, [r5, #0]
 8010ba2:	f001 f87f 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d0f2      	beq.n	8010b90 <rmw_destroy_publisher+0x10>
 8010baa:	686c      	ldr	r4, [r5, #4]
 8010bac:	2c00      	cmp	r4, #0
 8010bae:	d0ef      	beq.n	8010b90 <rmw_destroy_publisher+0x10>
 8010bb0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010bb2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8010bb6:	f006 fd43 	bl	8017640 <destroy_topic>
 8010bba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010bbe:	6962      	ldr	r2, [r4, #20]
 8010bc0:	6918      	ldr	r0, [r3, #16]
 8010bc2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010bc6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010bca:	6819      	ldr	r1, [r3, #0]
 8010bcc:	f001 fc20 	bl	8012410 <uxr_buffer_delete_entity>
 8010bd0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010bd4:	6922      	ldr	r2, [r4, #16]
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010bdc:	4604      	mov	r4, r0
 8010bde:	6809      	ldr	r1, [r1, #0]
 8010be0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010be4:	f001 fc14 	bl	8012410 <uxr_buffer_delete_entity>
 8010be8:	693e      	ldr	r6, [r7, #16]
 8010bea:	4622      	mov	r2, r4
 8010bec:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010bf0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	f000 ffd4 	bl	8011ba4 <run_xrce_session>
 8010bfc:	693e      	ldr	r6, [r7, #16]
 8010bfe:	4622      	mov	r2, r4
 8010c00:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010c04:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010c08:	4604      	mov	r4, r0
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f000 ffca 	bl	8011ba4 <run_xrce_session>
 8010c10:	b12c      	cbz	r4, 8010c1e <rmw_destroy_publisher+0x9e>
 8010c12:	b120      	cbz	r0, 8010c1e <rmw_destroy_publisher+0x9e>
 8010c14:	2400      	movs	r4, #0
 8010c16:	4628      	mov	r0, r5
 8010c18:	f000 fe6c 	bl	80118f4 <rmw_uxrce_fini_publisher_memory>
 8010c1c:	e7b9      	b.n	8010b92 <rmw_destroy_publisher+0x12>
 8010c1e:	2402      	movs	r4, #2
 8010c20:	e7f9      	b.n	8010c16 <rmw_destroy_publisher+0x96>
 8010c22:	bf00      	nop

08010c24 <rmw_send_request>:
 8010c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c28:	4604      	mov	r4, r0
 8010c2a:	6800      	ldr	r0, [r0, #0]
 8010c2c:	b08b      	sub	sp, #44	@ 0x2c
 8010c2e:	460e      	mov	r6, r1
 8010c30:	4615      	mov	r5, r2
 8010c32:	b128      	cbz	r0, 8010c40 <rmw_send_request+0x1c>
 8010c34:	4b21      	ldr	r3, [pc, #132]	@ (8010cbc <rmw_send_request+0x98>)
 8010c36:	6819      	ldr	r1, [r3, #0]
 8010c38:	f7ef faca 	bl	80001d0 <strcmp>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	d139      	bne.n	8010cb4 <rmw_send_request+0x90>
 8010c40:	6864      	ldr	r4, [r4, #4]
 8010c42:	6963      	ldr	r3, [r4, #20]
 8010c44:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	4798      	blx	r3
 8010c4c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010c50:	4630      	mov	r0, r6
 8010c52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c56:	4798      	blx	r3
 8010c58:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010c5c:	9000      	str	r0, [sp, #0]
 8010c5e:	6922      	ldr	r2, [r4, #16]
 8010c60:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8010c62:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010c66:	ab02      	add	r3, sp, #8
 8010c68:	f003 ff54 	bl	8014b14 <uxr_prepare_output_stream>
 8010c6c:	2700      	movs	r7, #0
 8010c6e:	6028      	str	r0, [r5, #0]
 8010c70:	606f      	str	r7, [r5, #4]
 8010c72:	b198      	cbz	r0, 8010c9c <rmw_send_request+0x78>
 8010c74:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010c78:	a902      	add	r1, sp, #8
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4798      	blx	r3
 8010c7e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8010c82:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d00c      	beq.n	8010ca4 <rmw_send_request+0x80>
 8010c8a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010c8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010c90:	f002 fcc2 	bl	8013618 <uxr_run_session_until_confirm_delivery>
 8010c94:	4638      	mov	r0, r7
 8010c96:	b00b      	add	sp, #44	@ 0x2c
 8010c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	b00b      	add	sp, #44	@ 0x2c
 8010ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ca4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ca8:	f002 f8f6 	bl	8012e98 <uxr_flash_output_streams>
 8010cac:	4638      	mov	r0, r7
 8010cae:	b00b      	add	sp, #44	@ 0x2c
 8010cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb4:	200c      	movs	r0, #12
 8010cb6:	b00b      	add	sp, #44	@ 0x2c
 8010cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cbc:	0801cc94 	.word	0x0801cc94

08010cc0 <rmw_take_request>:
 8010cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cc4:	4605      	mov	r5, r0
 8010cc6:	6800      	ldr	r0, [r0, #0]
 8010cc8:	b089      	sub	sp, #36	@ 0x24
 8010cca:	460c      	mov	r4, r1
 8010ccc:	4690      	mov	r8, r2
 8010cce:	461e      	mov	r6, r3
 8010cd0:	b128      	cbz	r0, 8010cde <rmw_take_request+0x1e>
 8010cd2:	4b28      	ldr	r3, [pc, #160]	@ (8010d74 <rmw_take_request+0xb4>)
 8010cd4:	6819      	ldr	r1, [r3, #0]
 8010cd6:	f7ef fa7b 	bl	80001d0 <strcmp>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	d146      	bne.n	8010d6c <rmw_take_request+0xac>
 8010cde:	b10e      	cbz	r6, 8010ce4 <rmw_take_request+0x24>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	7033      	strb	r3, [r6, #0]
 8010ce4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010ce8:	f000 fede 	bl	8011aa8 <rmw_uxrce_clean_expired_static_input_buffer>
 8010cec:	4648      	mov	r0, r9
 8010cee:	f000 feb5 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 8010cf2:	4607      	mov	r7, r0
 8010cf4:	b3b0      	cbz	r0, 8010d64 <rmw_take_request+0xa4>
 8010cf6:	6885      	ldr	r5, [r0, #8]
 8010cf8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8010cfc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8010d00:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8010d04:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8010d08:	7423      	strb	r3, [r4, #16]
 8010d0a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8010d0e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8010d12:	74e2      	strb	r2, [r4, #19]
 8010d14:	f8a4 3011 	strh.w	r3, [r4, #17]
 8010d18:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8010d1c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8010d20:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8010d24:	61e1      	str	r1, [r4, #28]
 8010d26:	6162      	str	r2, [r4, #20]
 8010d28:	61a3      	str	r3, [r4, #24]
 8010d2a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010d2e:	689b      	ldr	r3, [r3, #8]
 8010d30:	4798      	blx	r3
 8010d32:	6844      	ldr	r4, [r0, #4]
 8010d34:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8010d38:	f105 0110 	add.w	r1, r5, #16
 8010d3c:	4668      	mov	r0, sp
 8010d3e:	f7fb fbf1 	bl	800c524 <ucdr_init_buffer>
 8010d42:	68e3      	ldr	r3, [r4, #12]
 8010d44:	4641      	mov	r1, r8
 8010d46:	4668      	mov	r0, sp
 8010d48:	4798      	blx	r3
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	480a      	ldr	r0, [pc, #40]	@ (8010d78 <rmw_take_request+0xb8>)
 8010d50:	f006 fbea 	bl	8017528 <put_memory>
 8010d54:	b106      	cbz	r6, 8010d58 <rmw_take_request+0x98>
 8010d56:	7034      	strb	r4, [r6, #0]
 8010d58:	f084 0001 	eor.w	r0, r4, #1
 8010d5c:	b2c0      	uxtb	r0, r0
 8010d5e:	b009      	add	sp, #36	@ 0x24
 8010d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d64:	2001      	movs	r0, #1
 8010d66:	b009      	add	sp, #36	@ 0x24
 8010d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d6c:	200c      	movs	r0, #12
 8010d6e:	b009      	add	sp, #36	@ 0x24
 8010d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d74:	0801cc94 	.word	0x0801cc94
 8010d78:	200145f4 	.word	0x200145f4

08010d7c <rmw_send_response>:
 8010d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d7e:	4605      	mov	r5, r0
 8010d80:	6800      	ldr	r0, [r0, #0]
 8010d82:	b091      	sub	sp, #68	@ 0x44
 8010d84:	460c      	mov	r4, r1
 8010d86:	4616      	mov	r6, r2
 8010d88:	b128      	cbz	r0, 8010d96 <rmw_send_response+0x1a>
 8010d8a:	4b29      	ldr	r3, [pc, #164]	@ (8010e30 <rmw_send_response+0xb4>)
 8010d8c:	6819      	ldr	r1, [r3, #0]
 8010d8e:	f7ef fa1f 	bl	80001d0 <strcmp>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d141      	bne.n	8010e1a <rmw_send_response+0x9e>
 8010d96:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8010d9a:	9306      	str	r3, [sp, #24]
 8010d9c:	4623      	mov	r3, r4
 8010d9e:	9207      	str	r2, [sp, #28]
 8010da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010da4:	686d      	ldr	r5, [r5, #4]
 8010da6:	789b      	ldrb	r3, [r3, #2]
 8010da8:	68a1      	ldr	r1, [r4, #8]
 8010daa:	f88d 2017 	strb.w	r2, [sp, #23]
 8010dae:	f88d 3016 	strb.w	r3, [sp, #22]
 8010db2:	68e2      	ldr	r2, [r4, #12]
 8010db4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8010db8:	6860      	ldr	r0, [r4, #4]
 8010dba:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010dbe:	ab02      	add	r3, sp, #8
 8010dc0:	c307      	stmia	r3!, {r0, r1, r2}
 8010dc2:	696b      	ldr	r3, [r5, #20]
 8010dc4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	4798      	blx	r3
 8010dca:	6844      	ldr	r4, [r0, #4]
 8010dcc:	4630      	mov	r0, r6
 8010dce:	6923      	ldr	r3, [r4, #16]
 8010dd0:	4798      	blx	r3
 8010dd2:	f100 0318 	add.w	r3, r0, #24
 8010dd6:	6938      	ldr	r0, [r7, #16]
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	692a      	ldr	r2, [r5, #16]
 8010ddc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8010dde:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010de2:	ab08      	add	r3, sp, #32
 8010de4:	f003 fe96 	bl	8014b14 <uxr_prepare_output_stream>
 8010de8:	b910      	cbnz	r0, 8010df0 <rmw_send_response+0x74>
 8010dea:	2001      	movs	r0, #1
 8010dec:	b011      	add	sp, #68	@ 0x44
 8010dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010df0:	a902      	add	r1, sp, #8
 8010df2:	a808      	add	r0, sp, #32
 8010df4:	f004 ffc6 	bl	8015d84 <uxr_serialize_SampleIdentity>
 8010df8:	68a3      	ldr	r3, [r4, #8]
 8010dfa:	a908      	add	r1, sp, #32
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	4798      	blx	r3
 8010e00:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8010e04:	6938      	ldr	r0, [r7, #16]
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d00a      	beq.n	8010e20 <rmw_send_response+0xa4>
 8010e0a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8010e0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e10:	f002 fc02 	bl	8013618 <uxr_run_session_until_confirm_delivery>
 8010e14:	2000      	movs	r0, #0
 8010e16:	b011      	add	sp, #68	@ 0x44
 8010e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1a:	200c      	movs	r0, #12
 8010e1c:	b011      	add	sp, #68	@ 0x44
 8010e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e24:	f002 f838 	bl	8012e98 <uxr_flash_output_streams>
 8010e28:	2000      	movs	r0, #0
 8010e2a:	b011      	add	sp, #68	@ 0x44
 8010e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	0801cc94 	.word	0x0801cc94

08010e34 <rmw_take_response>:
 8010e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e38:	4604      	mov	r4, r0
 8010e3a:	6800      	ldr	r0, [r0, #0]
 8010e3c:	b088      	sub	sp, #32
 8010e3e:	4688      	mov	r8, r1
 8010e40:	4617      	mov	r7, r2
 8010e42:	461d      	mov	r5, r3
 8010e44:	b120      	cbz	r0, 8010e50 <rmw_take_response+0x1c>
 8010e46:	4b1e      	ldr	r3, [pc, #120]	@ (8010ec0 <rmw_take_response+0x8c>)
 8010e48:	6819      	ldr	r1, [r3, #0]
 8010e4a:	f7ef f9c1 	bl	80001d0 <strcmp>
 8010e4e:	bb78      	cbnz	r0, 8010eb0 <rmw_take_response+0x7c>
 8010e50:	b10d      	cbz	r5, 8010e56 <rmw_take_response+0x22>
 8010e52:	2300      	movs	r3, #0
 8010e54:	702b      	strb	r3, [r5, #0]
 8010e56:	6864      	ldr	r4, [r4, #4]
 8010e58:	f000 fe26 	bl	8011aa8 <rmw_uxrce_clean_expired_static_input_buffer>
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f000 fdfd 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 8010e62:	4606      	mov	r6, r0
 8010e64:	b340      	cbz	r0, 8010eb8 <rmw_take_response+0x84>
 8010e66:	6963      	ldr	r3, [r4, #20]
 8010e68:	6884      	ldr	r4, [r0, #8]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8010e70:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8010e74:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8010e78:	4798      	blx	r3
 8010e7a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010e7e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8010e82:	f104 0110 	add.w	r1, r4, #16
 8010e86:	4668      	mov	r0, sp
 8010e88:	f7fb fb4c 	bl	800c524 <ucdr_init_buffer>
 8010e8c:	4639      	mov	r1, r7
 8010e8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e92:	4668      	mov	r0, sp
 8010e94:	4798      	blx	r3
 8010e96:	4631      	mov	r1, r6
 8010e98:	4604      	mov	r4, r0
 8010e9a:	480a      	ldr	r0, [pc, #40]	@ (8010ec4 <rmw_take_response+0x90>)
 8010e9c:	f006 fb44 	bl	8017528 <put_memory>
 8010ea0:	b105      	cbz	r5, 8010ea4 <rmw_take_response+0x70>
 8010ea2:	702c      	strb	r4, [r5, #0]
 8010ea4:	f084 0001 	eor.w	r0, r4, #1
 8010ea8:	b2c0      	uxtb	r0, r0
 8010eaa:	b008      	add	sp, #32
 8010eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb0:	200c      	movs	r0, #12
 8010eb2:	b008      	add	sp, #32
 8010eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb8:	2001      	movs	r0, #1
 8010eba:	b008      	add	sp, #32
 8010ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec0:	0801cc94 	.word	0x0801cc94
 8010ec4:	200145f4 	.word	0x200145f4

08010ec8 <rmw_destroy_service>:
 8010ec8:	b570      	push	{r4, r5, r6, lr}
 8010eca:	b128      	cbz	r0, 8010ed8 <rmw_destroy_service+0x10>
 8010ecc:	4604      	mov	r4, r0
 8010ece:	6800      	ldr	r0, [r0, #0]
 8010ed0:	460d      	mov	r5, r1
 8010ed2:	f000 fee7 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8010ed6:	b910      	cbnz	r0, 8010ede <rmw_destroy_service+0x16>
 8010ed8:	2401      	movs	r4, #1
 8010eda:	4620      	mov	r0, r4
 8010edc:	bd70      	pop	{r4, r5, r6, pc}
 8010ede:	6863      	ldr	r3, [r4, #4]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d0f9      	beq.n	8010ed8 <rmw_destroy_service+0x10>
 8010ee4:	2d00      	cmp	r5, #0
 8010ee6:	d0f7      	beq.n	8010ed8 <rmw_destroy_service+0x10>
 8010ee8:	6828      	ldr	r0, [r5, #0]
 8010eea:	f000 fedb 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d0f2      	beq.n	8010ed8 <rmw_destroy_service+0x10>
 8010ef2:	686e      	ldr	r6, [r5, #4]
 8010ef4:	2e00      	cmp	r6, #0
 8010ef6:	d0ef      	beq.n	8010ed8 <rmw_destroy_service+0x10>
 8010ef8:	6864      	ldr	r4, [r4, #4]
 8010efa:	6932      	ldr	r2, [r6, #16]
 8010efc:	6920      	ldr	r0, [r4, #16]
 8010efe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010f02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f06:	6819      	ldr	r1, [r3, #0]
 8010f08:	f001 fdb0 	bl	8012a6c <uxr_buffer_cancel_data>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	6920      	ldr	r0, [r4, #16]
 8010f10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010f14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010f18:	f000 fe44 	bl	8011ba4 <run_xrce_session>
 8010f1c:	6920      	ldr	r0, [r4, #16]
 8010f1e:	6932      	ldr	r2, [r6, #16]
 8010f20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010f24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f28:	6819      	ldr	r1, [r3, #0]
 8010f2a:	f001 fa71 	bl	8012410 <uxr_buffer_delete_entity>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	6920      	ldr	r0, [r4, #16]
 8010f32:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010f36:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010f3a:	f000 fe33 	bl	8011ba4 <run_xrce_session>
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	4628      	mov	r0, r5
 8010f42:	bf14      	ite	ne
 8010f44:	2400      	movne	r4, #0
 8010f46:	2402      	moveq	r4, #2
 8010f48:	f000 fd00 	bl	801194c <rmw_uxrce_fini_service_memory>
 8010f4c:	e7c5      	b.n	8010eda <rmw_destroy_service+0x12>
 8010f4e:	bf00      	nop

08010f50 <rmw_create_subscription>:
 8010f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	b08d      	sub	sp, #52	@ 0x34
 8010f56:	2800      	cmp	r0, #0
 8010f58:	f000 80d1 	beq.w	80110fe <rmw_create_subscription+0x1ae>
 8010f5c:	460e      	mov	r6, r1
 8010f5e:	2900      	cmp	r1, #0
 8010f60:	f000 80cd 	beq.w	80110fe <rmw_create_subscription+0x1ae>
 8010f64:	4604      	mov	r4, r0
 8010f66:	6800      	ldr	r0, [r0, #0]
 8010f68:	4615      	mov	r5, r2
 8010f6a:	4698      	mov	r8, r3
 8010f6c:	f000 fe9a 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	f000 80c4 	beq.w	80110fe <rmw_create_subscription+0x1ae>
 8010f76:	2d00      	cmp	r5, #0
 8010f78:	f000 80c1 	beq.w	80110fe <rmw_create_subscription+0x1ae>
 8010f7c:	782b      	ldrb	r3, [r5, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 80bd 	beq.w	80110fe <rmw_create_subscription+0x1ae>
 8010f84:	f1b8 0f00 	cmp.w	r8, #0
 8010f88:	f000 80b9 	beq.w	80110fe <rmw_create_subscription+0x1ae>
 8010f8c:	485e      	ldr	r0, [pc, #376]	@ (8011108 <rmw_create_subscription+0x1b8>)
 8010f8e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010f92:	f006 fab9 	bl	8017508 <get_memory>
 8010f96:	4604      	mov	r4, r0
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	f000 80b1 	beq.w	8011100 <rmw_create_subscription+0x1b0>
 8010f9e:	6887      	ldr	r7, [r0, #8]
 8010fa0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8010fa4:	f7ff f946 	bl	8010234 <rmw_get_implementation_identifier>
 8010fa8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8010fac:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010fae:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	f7ef f96c 	bl	8000290 <strlen>
 8010fb8:	3001      	adds	r0, #1
 8010fba:	283c      	cmp	r0, #60	@ 0x3c
 8010fbc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8010fc0:	f200 8096 	bhi.w	80110f0 <rmw_create_subscription+0x1a0>
 8010fc4:	4a51      	ldr	r2, [pc, #324]	@ (801110c <rmw_create_subscription+0x1bc>)
 8010fc6:	462b      	mov	r3, r5
 8010fc8:	213c      	movs	r1, #60	@ 0x3c
 8010fca:	4650      	mov	r0, sl
 8010fcc:	f008 fa76 	bl	80194bc <sniprintf>
 8010fd0:	4641      	mov	r1, r8
 8010fd2:	f8c7 9020 	str.w	r9, [r7, #32]
 8010fd6:	2250      	movs	r2, #80	@ 0x50
 8010fd8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8010fdc:	f008 fcdb 	bl	8019996 <memcpy>
 8010fe0:	494b      	ldr	r1, [pc, #300]	@ (8011110 <rmw_create_subscription+0x1c0>)
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f001 f860 	bl	80120a8 <get_message_typesupport_handle>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f000 8081 	beq.w	80110f0 <rmw_create_subscription+0x1a0>
 8010fee:	6842      	ldr	r2, [r0, #4]
 8010ff0:	61ba      	str	r2, [r7, #24]
 8010ff2:	2a00      	cmp	r2, #0
 8010ff4:	d07c      	beq.n	80110f0 <rmw_create_subscription+0x1a0>
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	4643      	mov	r3, r8
 8010ffa:	4648      	mov	r0, r9
 8010ffc:	f006 fad0 	bl	80175a0 <create_topic>
 8011000:	61f8      	str	r0, [r7, #28]
 8011002:	2800      	cmp	r0, #0
 8011004:	d078      	beq.n	80110f8 <rmw_create_subscription+0x1a8>
 8011006:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801100a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801100e:	2104      	movs	r1, #4
 8011010:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8011014:	1c42      	adds	r2, r0, #1
 8011016:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801101a:	f001 fcbd 	bl	8012998 <uxr_object_id>
 801101e:	6138      	str	r0, [r7, #16]
 8011020:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011024:	2506      	movs	r5, #6
 8011026:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801102a:	9500      	str	r5, [sp, #0]
 801102c:	6819      	ldr	r1, [r3, #0]
 801102e:	693a      	ldr	r2, [r7, #16]
 8011030:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011034:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011038:	f001 face 	bl	80125d8 <uxr_buffer_create_subscriber_bin>
 801103c:	4602      	mov	r2, r0
 801103e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011042:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011046:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801104a:	f000 fdab 	bl	8011ba4 <run_xrce_session>
 801104e:	2800      	cmp	r0, #0
 8011050:	d04e      	beq.n	80110f0 <rmw_create_subscription+0x1a0>
 8011052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801105a:	4629      	mov	r1, r5
 801105c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011060:	1c42      	adds	r2, r0, #1
 8011062:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8011066:	f001 fc97 	bl	8012998 <uxr_object_id>
 801106a:	ae08      	add	r6, sp, #32
 801106c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	6178      	str	r0, [r7, #20]
 8011074:	4641      	mov	r1, r8
 8011076:	4630      	mov	r0, r6
 8011078:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801107c:	9305      	str	r3, [sp, #20]
 801107e:	f000 fdad 	bl	8011bdc <convert_qos_profile>
 8011082:	9503      	str	r5, [sp, #12]
 8011084:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011088:	9b05      	ldr	r3, [sp, #20]
 801108a:	9001      	str	r0, [sp, #4]
 801108c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011090:	691b      	ldr	r3, [r3, #16]
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8011098:	f8db 1000 	ldr.w	r1, [fp]
 801109c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80110a0:	f001 fb40 	bl	8012724 <uxr_buffer_create_datareader_bin>
 80110a4:	4602      	mov	r2, r0
 80110a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80110aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80110ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80110b2:	f000 fd77 	bl	8011ba4 <run_xrce_session>
 80110b6:	b1d8      	cbz	r0, 80110f0 <rmw_create_subscription+0x1a0>
 80110b8:	f898 3008 	ldrb.w	r3, [r8, #8]
 80110bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80110c0:	2b02      	cmp	r3, #2
 80110c2:	bf0c      	ite	eq
 80110c4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80110c8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80110cc:	9307      	str	r3, [sp, #28]
 80110ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80110d2:	2200      	movs	r2, #0
 80110d4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80110d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80110da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80110de:	9300      	str	r3, [sp, #0]
 80110e0:	697a      	ldr	r2, [r7, #20]
 80110e2:	9b07      	ldr	r3, [sp, #28]
 80110e4:	6809      	ldr	r1, [r1, #0]
 80110e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110ea:	f001 fc85 	bl	80129f8 <uxr_buffer_request_data>
 80110ee:	e007      	b.n	8011100 <rmw_create_subscription+0x1b0>
 80110f0:	69f8      	ldr	r0, [r7, #28]
 80110f2:	b108      	cbz	r0, 80110f8 <rmw_create_subscription+0x1a8>
 80110f4:	f000 fc56 	bl	80119a4 <rmw_uxrce_fini_topic_memory>
 80110f8:	4620      	mov	r0, r4
 80110fa:	f000 fc11 	bl	8011920 <rmw_uxrce_fini_subscription_memory>
 80110fe:	2400      	movs	r4, #0
 8011100:	4620      	mov	r0, r4
 8011102:	b00d      	add	sp, #52	@ 0x34
 8011104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011108:	20014604 	.word	0x20014604
 801110c:	0801c24c 	.word	0x0801c24c
 8011110:	0801be38 	.word	0x0801be38

08011114 <rmw_subscription_get_actual_qos>:
 8011114:	b150      	cbz	r0, 801112c <rmw_subscription_get_actual_qos+0x18>
 8011116:	b508      	push	{r3, lr}
 8011118:	460b      	mov	r3, r1
 801111a:	b149      	cbz	r1, 8011130 <rmw_subscription_get_actual_qos+0x1c>
 801111c:	6841      	ldr	r1, [r0, #4]
 801111e:	2250      	movs	r2, #80	@ 0x50
 8011120:	3128      	adds	r1, #40	@ 0x28
 8011122:	4618      	mov	r0, r3
 8011124:	f008 fc37 	bl	8019996 <memcpy>
 8011128:	2000      	movs	r0, #0
 801112a:	bd08      	pop	{r3, pc}
 801112c:	200b      	movs	r0, #11
 801112e:	4770      	bx	lr
 8011130:	200b      	movs	r0, #11
 8011132:	bd08      	pop	{r3, pc}

08011134 <rmw_destroy_subscription>:
 8011134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011136:	b128      	cbz	r0, 8011144 <rmw_destroy_subscription+0x10>
 8011138:	4604      	mov	r4, r0
 801113a:	6800      	ldr	r0, [r0, #0]
 801113c:	460d      	mov	r5, r1
 801113e:	f000 fdb1 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 8011142:	b910      	cbnz	r0, 801114a <rmw_destroy_subscription+0x16>
 8011144:	2401      	movs	r4, #1
 8011146:	4620      	mov	r0, r4
 8011148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801114a:	6863      	ldr	r3, [r4, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d0f9      	beq.n	8011144 <rmw_destroy_subscription+0x10>
 8011150:	2d00      	cmp	r5, #0
 8011152:	d0f7      	beq.n	8011144 <rmw_destroy_subscription+0x10>
 8011154:	6828      	ldr	r0, [r5, #0]
 8011156:	f000 fda5 	bl	8011ca4 <is_uxrce_rmw_identifier_valid>
 801115a:	2800      	cmp	r0, #0
 801115c:	d0f2      	beq.n	8011144 <rmw_destroy_subscription+0x10>
 801115e:	686c      	ldr	r4, [r5, #4]
 8011160:	2c00      	cmp	r4, #0
 8011162:	d0ef      	beq.n	8011144 <rmw_destroy_subscription+0x10>
 8011164:	6a26      	ldr	r6, [r4, #32]
 8011166:	6962      	ldr	r2, [r4, #20]
 8011168:	6930      	ldr	r0, [r6, #16]
 801116a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801116e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011172:	6819      	ldr	r1, [r3, #0]
 8011174:	f001 fc7a 	bl	8012a6c <uxr_buffer_cancel_data>
 8011178:	4602      	mov	r2, r0
 801117a:	6930      	ldr	r0, [r6, #16]
 801117c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011180:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011184:	f000 fd0e 	bl	8011ba4 <run_xrce_session>
 8011188:	69e0      	ldr	r0, [r4, #28]
 801118a:	f006 fa59 	bl	8017640 <destroy_topic>
 801118e:	6a23      	ldr	r3, [r4, #32]
 8011190:	6962      	ldr	r2, [r4, #20]
 8011192:	6918      	ldr	r0, [r3, #16]
 8011194:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011198:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801119c:	6819      	ldr	r1, [r3, #0]
 801119e:	f001 f937 	bl	8012410 <uxr_buffer_delete_entity>
 80111a2:	6a23      	ldr	r3, [r4, #32]
 80111a4:	6922      	ldr	r2, [r4, #16]
 80111a6:	691b      	ldr	r3, [r3, #16]
 80111a8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80111ac:	4604      	mov	r4, r0
 80111ae:	6809      	ldr	r1, [r1, #0]
 80111b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80111b4:	f001 f92c 	bl	8012410 <uxr_buffer_delete_entity>
 80111b8:	6937      	ldr	r7, [r6, #16]
 80111ba:	4622      	mov	r2, r4
 80111bc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80111c0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80111c4:	4604      	mov	r4, r0
 80111c6:	4638      	mov	r0, r7
 80111c8:	f000 fcec 	bl	8011ba4 <run_xrce_session>
 80111cc:	6936      	ldr	r6, [r6, #16]
 80111ce:	4622      	mov	r2, r4
 80111d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80111d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80111d8:	4604      	mov	r4, r0
 80111da:	4630      	mov	r0, r6
 80111dc:	f000 fce2 	bl	8011ba4 <run_xrce_session>
 80111e0:	b12c      	cbz	r4, 80111ee <rmw_destroy_subscription+0xba>
 80111e2:	b120      	cbz	r0, 80111ee <rmw_destroy_subscription+0xba>
 80111e4:	2400      	movs	r4, #0
 80111e6:	4628      	mov	r0, r5
 80111e8:	f000 fb9a 	bl	8011920 <rmw_uxrce_fini_subscription_memory>
 80111ec:	e7ab      	b.n	8011146 <rmw_destroy_subscription+0x12>
 80111ee:	2402      	movs	r4, #2
 80111f0:	e7f9      	b.n	80111e6 <rmw_destroy_subscription+0xb2>
 80111f2:	bf00      	nop

080111f4 <rmw_take_with_info>:
 80111f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111f6:	4604      	mov	r4, r0
 80111f8:	6800      	ldr	r0, [r0, #0]
 80111fa:	b089      	sub	sp, #36	@ 0x24
 80111fc:	460f      	mov	r7, r1
 80111fe:	4615      	mov	r5, r2
 8011200:	b128      	cbz	r0, 801120e <rmw_take_with_info+0x1a>
 8011202:	4b24      	ldr	r3, [pc, #144]	@ (8011294 <rmw_take_with_info+0xa0>)
 8011204:	6819      	ldr	r1, [r3, #0]
 8011206:	f7ee ffe3 	bl	80001d0 <strcmp>
 801120a:	2800      	cmp	r0, #0
 801120c:	d13e      	bne.n	801128c <rmw_take_with_info+0x98>
 801120e:	b305      	cbz	r5, 8011252 <rmw_take_with_info+0x5e>
 8011210:	6864      	ldr	r4, [r4, #4]
 8011212:	2300      	movs	r3, #0
 8011214:	702b      	strb	r3, [r5, #0]
 8011216:	f000 fc47 	bl	8011aa8 <rmw_uxrce_clean_expired_static_input_buffer>
 801121a:	4620      	mov	r0, r4
 801121c:	f000 fc1e 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 8011220:	4606      	mov	r6, r0
 8011222:	b1f0      	cbz	r0, 8011262 <rmw_take_with_info+0x6e>
 8011224:	6881      	ldr	r1, [r0, #8]
 8011226:	4668      	mov	r0, sp
 8011228:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801122c:	3110      	adds	r1, #16
 801122e:	f7fb f979 	bl	800c524 <ucdr_init_buffer>
 8011232:	69a3      	ldr	r3, [r4, #24]
 8011234:	4639      	mov	r1, r7
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	4668      	mov	r0, sp
 801123a:	4798      	blx	r3
 801123c:	4631      	mov	r1, r6
 801123e:	4604      	mov	r4, r0
 8011240:	4815      	ldr	r0, [pc, #84]	@ (8011298 <rmw_take_with_info+0xa4>)
 8011242:	f006 f971 	bl	8017528 <put_memory>
 8011246:	702c      	strb	r4, [r5, #0]
 8011248:	f084 0001 	eor.w	r0, r4, #1
 801124c:	b2c0      	uxtb	r0, r0
 801124e:	b009      	add	sp, #36	@ 0x24
 8011250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011252:	6864      	ldr	r4, [r4, #4]
 8011254:	f000 fc28 	bl	8011aa8 <rmw_uxrce_clean_expired_static_input_buffer>
 8011258:	4620      	mov	r0, r4
 801125a:	f000 fbff 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 801125e:	4605      	mov	r5, r0
 8011260:	b910      	cbnz	r0, 8011268 <rmw_take_with_info+0x74>
 8011262:	2001      	movs	r0, #1
 8011264:	b009      	add	sp, #36	@ 0x24
 8011266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011268:	68a9      	ldr	r1, [r5, #8]
 801126a:	4668      	mov	r0, sp
 801126c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011270:	3110      	adds	r1, #16
 8011272:	f7fb f957 	bl	800c524 <ucdr_init_buffer>
 8011276:	69a3      	ldr	r3, [r4, #24]
 8011278:	4639      	mov	r1, r7
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	4668      	mov	r0, sp
 801127e:	4798      	blx	r3
 8011280:	4629      	mov	r1, r5
 8011282:	4604      	mov	r4, r0
 8011284:	4804      	ldr	r0, [pc, #16]	@ (8011298 <rmw_take_with_info+0xa4>)
 8011286:	f006 f94f 	bl	8017528 <put_memory>
 801128a:	e7dd      	b.n	8011248 <rmw_take_with_info+0x54>
 801128c:	200c      	movs	r0, #12
 801128e:	b009      	add	sp, #36	@ 0x24
 8011290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011292:	bf00      	nop
 8011294:	0801cc94 	.word	0x0801cc94
 8011298:	200145f4 	.word	0x200145f4

0801129c <rmw_uxrce_transport_init>:
 801129c:	b508      	push	{r3, lr}
 801129e:	b108      	cbz	r0, 80112a4 <rmw_uxrce_transport_init+0x8>
 80112a0:	f100 0210 	add.w	r2, r0, #16
 80112a4:	b139      	cbz	r1, 80112b6 <rmw_uxrce_transport_init+0x1a>
 80112a6:	6949      	ldr	r1, [r1, #20]
 80112a8:	4610      	mov	r0, r2
 80112aa:	f001 fb3d 	bl	8012928 <uxr_init_custom_transport>
 80112ae:	f080 0001 	eor.w	r0, r0, #1
 80112b2:	b2c0      	uxtb	r0, r0
 80112b4:	bd08      	pop	{r3, pc}
 80112b6:	4b04      	ldr	r3, [pc, #16]	@ (80112c8 <rmw_uxrce_transport_init+0x2c>)
 80112b8:	4610      	mov	r0, r2
 80112ba:	6859      	ldr	r1, [r3, #4]
 80112bc:	f001 fb34 	bl	8012928 <uxr_init_custom_transport>
 80112c0:	f080 0001 	eor.w	r0, r0, #1
 80112c4:	b2c0      	uxtb	r0, r0
 80112c6:	bd08      	pop	{r3, pc}
 80112c8:	2000fc90 	.word	0x2000fc90

080112cc <rmw_wait>:
 80112cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112d0:	b089      	sub	sp, #36	@ 0x24
 80112d2:	4605      	mov	r5, r0
 80112d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80112d6:	460e      	mov	r6, r1
 80112d8:	4698      	mov	r8, r3
 80112da:	4691      	mov	r9, r2
 80112dc:	2a00      	cmp	r2, #0
 80112de:	f000 810a 	beq.w	80114f6 <rmw_wait+0x22a>
 80112e2:	b16c      	cbz	r4, 8011300 <rmw_wait+0x34>
 80112e4:	4bae      	ldr	r3, [pc, #696]	@ (80115a0 <rmw_wait+0x2d4>)
 80112e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80112e8:	af04      	add	r7, sp, #16
 80112ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80112ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80112f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80112f6:	f000 fd0b 	bl	8011d10 <rmw_time_equal>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	f000 8127 	beq.w	801154e <rmw_wait+0x282>
 8011300:	f04f 37ff 	mov.w	r7, #4294967295
 8011304:	f000 fbd0 	bl	8011aa8 <rmw_uxrce_clean_expired_static_input_buffer>
 8011308:	4ba6      	ldr	r3, [pc, #664]	@ (80115a4 <rmw_wait+0x2d8>)
 801130a:	681c      	ldr	r4, [r3, #0]
 801130c:	b14c      	cbz	r4, 8011322 <rmw_wait+0x56>
 801130e:	4623      	mov	r3, r4
 8011310:	2100      	movs	r1, #0
 8011312:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8011316:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801131a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1f7      	bne.n	8011312 <rmw_wait+0x46>
 8011322:	f1b9 0f00 	cmp.w	r9, #0
 8011326:	d011      	beq.n	801134c <rmw_wait+0x80>
 8011328:	f8d9 1000 	ldr.w	r1, [r9]
 801132c:	b171      	cbz	r1, 801134c <rmw_wait+0x80>
 801132e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8011332:	2300      	movs	r3, #0
 8011334:	2001      	movs	r0, #1
 8011336:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801133a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801133c:	6912      	ldr	r2, [r2, #16]
 801133e:	3301      	adds	r3, #1
 8011340:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011344:	4299      	cmp	r1, r3
 8011346:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801134a:	d1f4      	bne.n	8011336 <rmw_wait+0x6a>
 801134c:	f1b8 0f00 	cmp.w	r8, #0
 8011350:	d011      	beq.n	8011376 <rmw_wait+0xaa>
 8011352:	f8d8 1000 	ldr.w	r1, [r8]
 8011356:	b171      	cbz	r1, 8011376 <rmw_wait+0xaa>
 8011358:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801135c:	2300      	movs	r3, #0
 801135e:	2001      	movs	r0, #1
 8011360:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011364:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8011366:	6912      	ldr	r2, [r2, #16]
 8011368:	3301      	adds	r3, #1
 801136a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801136e:	4299      	cmp	r1, r3
 8011370:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8011374:	d1f4      	bne.n	8011360 <rmw_wait+0x94>
 8011376:	b185      	cbz	r5, 801139a <rmw_wait+0xce>
 8011378:	6829      	ldr	r1, [r5, #0]
 801137a:	b171      	cbz	r1, 801139a <rmw_wait+0xce>
 801137c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8011380:	2300      	movs	r3, #0
 8011382:	2001      	movs	r0, #1
 8011384:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011388:	6a12      	ldr	r2, [r2, #32]
 801138a:	6912      	ldr	r2, [r2, #16]
 801138c:	3301      	adds	r3, #1
 801138e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011392:	4299      	cmp	r1, r3
 8011394:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8011398:	d1f4      	bne.n	8011384 <rmw_wait+0xb8>
 801139a:	b34c      	cbz	r4, 80113f0 <rmw_wait+0x124>
 801139c:	4622      	mov	r2, r4
 801139e:	2300      	movs	r3, #0
 80113a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80113a4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80113a8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80113ac:	440b      	add	r3, r1
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	2a00      	cmp	r2, #0
 80113b2:	d1f5      	bne.n	80113a0 <rmw_wait+0xd4>
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	f000 8084 	beq.w	80114c2 <rmw_wait+0x1f6>
 80113ba:	1c7a      	adds	r2, r7, #1
 80113bc:	d00d      	beq.n	80113da <rmw_wait+0x10e>
 80113be:	ee07 7a90 	vmov	s15, r7
 80113c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80113c6:	ee07 3a90 	vmov	s15, r3
 80113ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113d2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80113d6:	ee17 7a90 	vmov	r7, s15
 80113da:	68a0      	ldr	r0, [r4, #8]
 80113dc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80113e0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f040 8090 	bne.w	801150a <rmw_wait+0x23e>
 80113ea:	6864      	ldr	r4, [r4, #4]
 80113ec:	2c00      	cmp	r4, #0
 80113ee:	d1f4      	bne.n	80113da <rmw_wait+0x10e>
 80113f0:	f1b9 0f00 	cmp.w	r9, #0
 80113f4:	f000 80bc 	beq.w	8011570 <rmw_wait+0x2a4>
 80113f8:	f8d9 7000 	ldr.w	r7, [r9]
 80113fc:	2f00      	cmp	r7, #0
 80113fe:	f000 808e 	beq.w	801151e <rmw_wait+0x252>
 8011402:	2400      	movs	r4, #0
 8011404:	4627      	mov	r7, r4
 8011406:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801140a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801140e:	f000 fb25 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 8011412:	2800      	cmp	r0, #0
 8011414:	d05f      	beq.n	80114d6 <rmw_wait+0x20a>
 8011416:	f8d9 3000 	ldr.w	r3, [r9]
 801141a:	3401      	adds	r4, #1
 801141c:	42a3      	cmp	r3, r4
 801141e:	f04f 0701 	mov.w	r7, #1
 8011422:	d8f0      	bhi.n	8011406 <rmw_wait+0x13a>
 8011424:	f1b8 0f00 	cmp.w	r8, #0
 8011428:	d012      	beq.n	8011450 <rmw_wait+0x184>
 801142a:	f8d8 3000 	ldr.w	r3, [r8]
 801142e:	b17b      	cbz	r3, 8011450 <rmw_wait+0x184>
 8011430:	2400      	movs	r4, #0
 8011432:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011436:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801143a:	f000 fb0f 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 801143e:	2800      	cmp	r0, #0
 8011440:	d051      	beq.n	80114e6 <rmw_wait+0x21a>
 8011442:	f8d8 3000 	ldr.w	r3, [r8]
 8011446:	3401      	adds	r4, #1
 8011448:	42a3      	cmp	r3, r4
 801144a:	f04f 0701 	mov.w	r7, #1
 801144e:	d8f0      	bhi.n	8011432 <rmw_wait+0x166>
 8011450:	b1dd      	cbz	r5, 801148a <rmw_wait+0x1be>
 8011452:	682b      	ldr	r3, [r5, #0]
 8011454:	b1cb      	cbz	r3, 801148a <rmw_wait+0x1be>
 8011456:	2400      	movs	r4, #0
 8011458:	686b      	ldr	r3, [r5, #4]
 801145a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801145e:	f000 fafd 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 8011462:	b158      	cbz	r0, 801147c <rmw_wait+0x1b0>
 8011464:	682b      	ldr	r3, [r5, #0]
 8011466:	3401      	adds	r4, #1
 8011468:	42a3      	cmp	r3, r4
 801146a:	d969      	bls.n	8011540 <rmw_wait+0x274>
 801146c:	686b      	ldr	r3, [r5, #4]
 801146e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011472:	2701      	movs	r7, #1
 8011474:	f000 faf2 	bl	8011a5c <rmw_uxrce_find_static_input_buffer_by_owner>
 8011478:	2800      	cmp	r0, #0
 801147a:	d1f3      	bne.n	8011464 <rmw_wait+0x198>
 801147c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8011480:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011484:	3401      	adds	r4, #1
 8011486:	42a3      	cmp	r3, r4
 8011488:	d8e6      	bhi.n	8011458 <rmw_wait+0x18c>
 801148a:	b1a6      	cbz	r6, 80114b6 <rmw_wait+0x1ea>
 801148c:	6834      	ldr	r4, [r6, #0]
 801148e:	b194      	cbz	r4, 80114b6 <rmw_wait+0x1ea>
 8011490:	2300      	movs	r3, #0
 8011492:	461d      	mov	r5, r3
 8011494:	e004      	b.n	80114a0 <rmw_wait+0x1d4>
 8011496:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801149a:	3301      	adds	r3, #1
 801149c:	42a3      	cmp	r3, r4
 801149e:	d00a      	beq.n	80114b6 <rmw_wait+0x1ea>
 80114a0:	6870      	ldr	r0, [r6, #4]
 80114a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80114a6:	7c0a      	ldrb	r2, [r1, #16]
 80114a8:	2a00      	cmp	r2, #0
 80114aa:	d0f4      	beq.n	8011496 <rmw_wait+0x1ca>
 80114ac:	3301      	adds	r3, #1
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	740d      	strb	r5, [r1, #16]
 80114b2:	4617      	mov	r7, r2
 80114b4:	d1f4      	bne.n	80114a0 <rmw_wait+0x1d4>
 80114b6:	2f00      	cmp	r7, #0
 80114b8:	d03e      	beq.n	8011538 <rmw_wait+0x26c>
 80114ba:	2000      	movs	r0, #0
 80114bc:	b009      	add	sp, #36	@ 0x24
 80114be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114c2:	68a0      	ldr	r0, [r4, #8]
 80114c4:	2100      	movs	r1, #0
 80114c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114ca:	f002 f86b 	bl	80135a4 <uxr_run_session_timeout>
 80114ce:	6864      	ldr	r4, [r4, #4]
 80114d0:	2c00      	cmp	r4, #0
 80114d2:	d1f6      	bne.n	80114c2 <rmw_wait+0x1f6>
 80114d4:	e78c      	b.n	80113f0 <rmw_wait+0x124>
 80114d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80114da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80114de:	3401      	adds	r4, #1
 80114e0:	42a3      	cmp	r3, r4
 80114e2:	d890      	bhi.n	8011406 <rmw_wait+0x13a>
 80114e4:	e79e      	b.n	8011424 <rmw_wait+0x158>
 80114e6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80114ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80114ee:	3401      	adds	r4, #1
 80114f0:	429c      	cmp	r4, r3
 80114f2:	d39e      	bcc.n	8011432 <rmw_wait+0x166>
 80114f4:	e7ac      	b.n	8011450 <rmw_wait+0x184>
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f47f aef3 	bne.w	80112e2 <rmw_wait+0x16>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	f47f aef0 	bne.w	80112e2 <rmw_wait+0x16>
 8011502:	2900      	cmp	r1, #0
 8011504:	f47f aeed 	bne.w	80112e2 <rmw_wait+0x16>
 8011508:	e7d7      	b.n	80114ba <rmw_wait+0x1ee>
 801150a:	4639      	mov	r1, r7
 801150c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011510:	f002 f862 	bl	80135d8 <uxr_run_session_until_data>
 8011514:	6864      	ldr	r4, [r4, #4]
 8011516:	2c00      	cmp	r4, #0
 8011518:	f47f af5f 	bne.w	80113da <rmw_wait+0x10e>
 801151c:	e768      	b.n	80113f0 <rmw_wait+0x124>
 801151e:	f1b8 0f00 	cmp.w	r8, #0
 8011522:	d032      	beq.n	801158a <rmw_wait+0x2be>
 8011524:	f8d8 3000 	ldr.w	r3, [r8]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d181      	bne.n	8011430 <rmw_wait+0x164>
 801152c:	461f      	mov	r7, r3
 801152e:	2d00      	cmp	r5, #0
 8011530:	d18f      	bne.n	8011452 <rmw_wait+0x186>
 8011532:	462f      	mov	r7, r5
 8011534:	2e00      	cmp	r6, #0
 8011536:	d1a9      	bne.n	801148c <rmw_wait+0x1c0>
 8011538:	2002      	movs	r0, #2
 801153a:	b009      	add	sp, #36	@ 0x24
 801153c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011540:	2e00      	cmp	r6, #0
 8011542:	d0ba      	beq.n	80114ba <rmw_wait+0x1ee>
 8011544:	6834      	ldr	r4, [r6, #0]
 8011546:	2701      	movs	r7, #1
 8011548:	2c00      	cmp	r4, #0
 801154a:	d1a1      	bne.n	8011490 <rmw_wait+0x1c4>
 801154c:	e7b5      	b.n	80114ba <rmw_wait+0x1ee>
 801154e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011552:	f000 fc31 	bl	8011db8 <rmw_time_total_nsec>
 8011556:	2300      	movs	r3, #0
 8011558:	4a13      	ldr	r2, [pc, #76]	@ (80115a8 <rmw_wait+0x2dc>)
 801155a:	f7ef fbd5 	bl	8000d08 <__aeabi_uldivmod>
 801155e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8011562:	f171 0300 	sbcs.w	r3, r1, #0
 8011566:	4607      	mov	r7, r0
 8011568:	bfa8      	it	ge
 801156a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801156e:	e6c9      	b.n	8011304 <rmw_wait+0x38>
 8011570:	f1b8 0f00 	cmp.w	r8, #0
 8011574:	d009      	beq.n	801158a <rmw_wait+0x2be>
 8011576:	f8d8 3000 	ldr.w	r3, [r8]
 801157a:	464f      	mov	r7, r9
 801157c:	2b00      	cmp	r3, #0
 801157e:	f47f af57 	bne.w	8011430 <rmw_wait+0x164>
 8011582:	2d00      	cmp	r5, #0
 8011584:	f47f af65 	bne.w	8011452 <rmw_wait+0x186>
 8011588:	e7d3      	b.n	8011532 <rmw_wait+0x266>
 801158a:	b17d      	cbz	r5, 80115ac <rmw_wait+0x2e0>
 801158c:	682b      	ldr	r3, [r5, #0]
 801158e:	4647      	mov	r7, r8
 8011590:	2b00      	cmp	r3, #0
 8011592:	f47f af60 	bne.w	8011456 <rmw_wait+0x18a>
 8011596:	2e00      	cmp	r6, #0
 8011598:	f47f af78 	bne.w	801148c <rmw_wait+0x1c0>
 801159c:	e7cc      	b.n	8011538 <rmw_wait+0x26c>
 801159e:	bf00      	nop
 80115a0:	0801ba88 	.word	0x0801ba88
 80115a4:	200145e4 	.word	0x200145e4
 80115a8:	000f4240 	.word	0x000f4240
 80115ac:	2e00      	cmp	r6, #0
 80115ae:	d0c3      	beq.n	8011538 <rmw_wait+0x26c>
 80115b0:	6834      	ldr	r4, [r6, #0]
 80115b2:	462f      	mov	r7, r5
 80115b4:	2c00      	cmp	r4, #0
 80115b6:	f47f af6b 	bne.w	8011490 <rmw_wait+0x1c4>
 80115ba:	e7bd      	b.n	8011538 <rmw_wait+0x26c>

080115bc <rmw_create_wait_set>:
 80115bc:	b508      	push	{r3, lr}
 80115be:	4803      	ldr	r0, [pc, #12]	@ (80115cc <rmw_create_wait_set+0x10>)
 80115c0:	f005 ffa2 	bl	8017508 <get_memory>
 80115c4:	b108      	cbz	r0, 80115ca <rmw_create_wait_set+0xe>
 80115c6:	6880      	ldr	r0, [r0, #8]
 80115c8:	3010      	adds	r0, #16
 80115ca:	bd08      	pop	{r3, pc}
 80115cc:	20014624 	.word	0x20014624

080115d0 <rmw_destroy_wait_set>:
 80115d0:	b508      	push	{r3, lr}
 80115d2:	4b08      	ldr	r3, [pc, #32]	@ (80115f4 <rmw_destroy_wait_set+0x24>)
 80115d4:	6819      	ldr	r1, [r3, #0]
 80115d6:	b911      	cbnz	r1, 80115de <rmw_destroy_wait_set+0xe>
 80115d8:	e00a      	b.n	80115f0 <rmw_destroy_wait_set+0x20>
 80115da:	6849      	ldr	r1, [r1, #4]
 80115dc:	b141      	cbz	r1, 80115f0 <rmw_destroy_wait_set+0x20>
 80115de:	688b      	ldr	r3, [r1, #8]
 80115e0:	3310      	adds	r3, #16
 80115e2:	4298      	cmp	r0, r3
 80115e4:	d1f9      	bne.n	80115da <rmw_destroy_wait_set+0xa>
 80115e6:	4803      	ldr	r0, [pc, #12]	@ (80115f4 <rmw_destroy_wait_set+0x24>)
 80115e8:	f005 ff9e 	bl	8017528 <put_memory>
 80115ec:	2000      	movs	r0, #0
 80115ee:	bd08      	pop	{r3, pc}
 80115f0:	2001      	movs	r0, #1
 80115f2:	bd08      	pop	{r3, pc}
 80115f4:	20014624 	.word	0x20014624

080115f8 <rmw_uxrce_init_service_memory>:
 80115f8:	b1e2      	cbz	r2, 8011634 <rmw_uxrce_init_service_memory+0x3c>
 80115fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115fe:	7b05      	ldrb	r5, [r0, #12]
 8011600:	4606      	mov	r6, r0
 8011602:	b9ad      	cbnz	r5, 8011630 <rmw_uxrce_init_service_memory+0x38>
 8011604:	23c8      	movs	r3, #200	@ 0xc8
 8011606:	e9c0 5500 	strd	r5, r5, [r0]
 801160a:	6083      	str	r3, [r0, #8]
 801160c:	f240 1301 	movw	r3, #257	@ 0x101
 8011610:	4617      	mov	r7, r2
 8011612:	8183      	strh	r3, [r0, #12]
 8011614:	460c      	mov	r4, r1
 8011616:	46a8      	mov	r8, r5
 8011618:	4621      	mov	r1, r4
 801161a:	4630      	mov	r0, r6
 801161c:	3501      	adds	r5, #1
 801161e:	f005 ff83 	bl	8017528 <put_memory>
 8011622:	42af      	cmp	r7, r5
 8011624:	60a4      	str	r4, [r4, #8]
 8011626:	f884 800c 	strb.w	r8, [r4, #12]
 801162a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801162e:	d1f3      	bne.n	8011618 <rmw_uxrce_init_service_memory+0x20>
 8011630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011634:	4770      	bx	lr
 8011636:	bf00      	nop

08011638 <rmw_uxrce_init_client_memory>:
 8011638:	b1e2      	cbz	r2, 8011674 <rmw_uxrce_init_client_memory+0x3c>
 801163a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801163e:	7b05      	ldrb	r5, [r0, #12]
 8011640:	4606      	mov	r6, r0
 8011642:	b9ad      	cbnz	r5, 8011670 <rmw_uxrce_init_client_memory+0x38>
 8011644:	23c8      	movs	r3, #200	@ 0xc8
 8011646:	e9c0 5500 	strd	r5, r5, [r0]
 801164a:	6083      	str	r3, [r0, #8]
 801164c:	f240 1301 	movw	r3, #257	@ 0x101
 8011650:	4617      	mov	r7, r2
 8011652:	8183      	strh	r3, [r0, #12]
 8011654:	460c      	mov	r4, r1
 8011656:	46a8      	mov	r8, r5
 8011658:	4621      	mov	r1, r4
 801165a:	4630      	mov	r0, r6
 801165c:	3501      	adds	r5, #1
 801165e:	f005 ff63 	bl	8017528 <put_memory>
 8011662:	42af      	cmp	r7, r5
 8011664:	60a4      	str	r4, [r4, #8]
 8011666:	f884 800c 	strb.w	r8, [r4, #12]
 801166a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801166e:	d1f3      	bne.n	8011658 <rmw_uxrce_init_client_memory+0x20>
 8011670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop

08011678 <rmw_uxrce_init_publisher_memory>:
 8011678:	b1e2      	cbz	r2, 80116b4 <rmw_uxrce_init_publisher_memory+0x3c>
 801167a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801167e:	7b05      	ldrb	r5, [r0, #12]
 8011680:	4606      	mov	r6, r0
 8011682:	b9ad      	cbnz	r5, 80116b0 <rmw_uxrce_init_publisher_memory+0x38>
 8011684:	23d8      	movs	r3, #216	@ 0xd8
 8011686:	e9c0 5500 	strd	r5, r5, [r0]
 801168a:	6083      	str	r3, [r0, #8]
 801168c:	f240 1301 	movw	r3, #257	@ 0x101
 8011690:	4617      	mov	r7, r2
 8011692:	8183      	strh	r3, [r0, #12]
 8011694:	460c      	mov	r4, r1
 8011696:	46a8      	mov	r8, r5
 8011698:	4621      	mov	r1, r4
 801169a:	4630      	mov	r0, r6
 801169c:	3501      	adds	r5, #1
 801169e:	f005 ff43 	bl	8017528 <put_memory>
 80116a2:	42af      	cmp	r7, r5
 80116a4:	60a4      	str	r4, [r4, #8]
 80116a6:	f884 800c 	strb.w	r8, [r4, #12]
 80116aa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80116ae:	d1f3      	bne.n	8011698 <rmw_uxrce_init_publisher_memory+0x20>
 80116b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b4:	4770      	bx	lr
 80116b6:	bf00      	nop

080116b8 <rmw_uxrce_init_subscription_memory>:
 80116b8:	b1e2      	cbz	r2, 80116f4 <rmw_uxrce_init_subscription_memory+0x3c>
 80116ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116be:	7b05      	ldrb	r5, [r0, #12]
 80116c0:	4606      	mov	r6, r0
 80116c2:	b9ad      	cbnz	r5, 80116f0 <rmw_uxrce_init_subscription_memory+0x38>
 80116c4:	23d8      	movs	r3, #216	@ 0xd8
 80116c6:	e9c0 5500 	strd	r5, r5, [r0]
 80116ca:	6083      	str	r3, [r0, #8]
 80116cc:	f240 1301 	movw	r3, #257	@ 0x101
 80116d0:	4617      	mov	r7, r2
 80116d2:	8183      	strh	r3, [r0, #12]
 80116d4:	460c      	mov	r4, r1
 80116d6:	46a8      	mov	r8, r5
 80116d8:	4621      	mov	r1, r4
 80116da:	4630      	mov	r0, r6
 80116dc:	3501      	adds	r5, #1
 80116de:	f005 ff23 	bl	8017528 <put_memory>
 80116e2:	42af      	cmp	r7, r5
 80116e4:	60a4      	str	r4, [r4, #8]
 80116e6:	f884 800c 	strb.w	r8, [r4, #12]
 80116ea:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80116ee:	d1f3      	bne.n	80116d8 <rmw_uxrce_init_subscription_memory+0x20>
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop

080116f8 <rmw_uxrce_init_node_memory>:
 80116f8:	b1e2      	cbz	r2, 8011734 <rmw_uxrce_init_node_memory+0x3c>
 80116fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116fe:	7b05      	ldrb	r5, [r0, #12]
 8011700:	4606      	mov	r6, r0
 8011702:	b9ad      	cbnz	r5, 8011730 <rmw_uxrce_init_node_memory+0x38>
 8011704:	23a4      	movs	r3, #164	@ 0xa4
 8011706:	e9c0 5500 	strd	r5, r5, [r0]
 801170a:	6083      	str	r3, [r0, #8]
 801170c:	f240 1301 	movw	r3, #257	@ 0x101
 8011710:	4617      	mov	r7, r2
 8011712:	8183      	strh	r3, [r0, #12]
 8011714:	460c      	mov	r4, r1
 8011716:	46a8      	mov	r8, r5
 8011718:	4621      	mov	r1, r4
 801171a:	4630      	mov	r0, r6
 801171c:	3501      	adds	r5, #1
 801171e:	f005 ff03 	bl	8017528 <put_memory>
 8011722:	42af      	cmp	r7, r5
 8011724:	60a4      	str	r4, [r4, #8]
 8011726:	f884 800c 	strb.w	r8, [r4, #12]
 801172a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801172e:	d1f3      	bne.n	8011718 <rmw_uxrce_init_node_memory+0x20>
 8011730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop

08011738 <rmw_uxrce_init_session_memory>:
 8011738:	b1ea      	cbz	r2, 8011776 <rmw_uxrce_init_session_memory+0x3e>
 801173a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801173e:	7b05      	ldrb	r5, [r0, #12]
 8011740:	4606      	mov	r6, r0
 8011742:	b9b5      	cbnz	r5, 8011772 <rmw_uxrce_init_session_memory+0x3a>
 8011744:	e9c0 5500 	strd	r5, r5, [r0]
 8011748:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801174c:	f240 1301 	movw	r3, #257	@ 0x101
 8011750:	4617      	mov	r7, r2
 8011752:	f8c0 8008 	str.w	r8, [r0, #8]
 8011756:	460c      	mov	r4, r1
 8011758:	8183      	strh	r3, [r0, #12]
 801175a:	46a9      	mov	r9, r5
 801175c:	4621      	mov	r1, r4
 801175e:	4630      	mov	r0, r6
 8011760:	3501      	adds	r5, #1
 8011762:	f005 fee1 	bl	8017528 <put_memory>
 8011766:	42af      	cmp	r7, r5
 8011768:	60a4      	str	r4, [r4, #8]
 801176a:	f884 900c 	strb.w	r9, [r4, #12]
 801176e:	4444      	add	r4, r8
 8011770:	d1f4      	bne.n	801175c <rmw_uxrce_init_session_memory+0x24>
 8011772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011776:	4770      	bx	lr

08011778 <rmw_uxrce_init_topic_memory>:
 8011778:	b1e2      	cbz	r2, 80117b4 <rmw_uxrce_init_topic_memory+0x3c>
 801177a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801177e:	7b05      	ldrb	r5, [r0, #12]
 8011780:	4606      	mov	r6, r0
 8011782:	b9ad      	cbnz	r5, 80117b0 <rmw_uxrce_init_topic_memory+0x38>
 8011784:	231c      	movs	r3, #28
 8011786:	e9c0 5500 	strd	r5, r5, [r0]
 801178a:	6083      	str	r3, [r0, #8]
 801178c:	f240 1301 	movw	r3, #257	@ 0x101
 8011790:	4617      	mov	r7, r2
 8011792:	8183      	strh	r3, [r0, #12]
 8011794:	460c      	mov	r4, r1
 8011796:	46a8      	mov	r8, r5
 8011798:	4621      	mov	r1, r4
 801179a:	4630      	mov	r0, r6
 801179c:	3501      	adds	r5, #1
 801179e:	f005 fec3 	bl	8017528 <put_memory>
 80117a2:	42af      	cmp	r7, r5
 80117a4:	60a4      	str	r4, [r4, #8]
 80117a6:	f884 800c 	strb.w	r8, [r4, #12]
 80117aa:	f104 041c 	add.w	r4, r4, #28
 80117ae:	d1f3      	bne.n	8011798 <rmw_uxrce_init_topic_memory+0x20>
 80117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop

080117b8 <rmw_uxrce_init_static_input_buffer_memory>:
 80117b8:	b1ea      	cbz	r2, 80117f6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80117ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117be:	7b05      	ldrb	r5, [r0, #12]
 80117c0:	4606      	mov	r6, r0
 80117c2:	b9b5      	cbnz	r5, 80117f2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80117c4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80117c8:	e9c0 5500 	strd	r5, r5, [r0]
 80117cc:	6083      	str	r3, [r0, #8]
 80117ce:	f240 1301 	movw	r3, #257	@ 0x101
 80117d2:	4617      	mov	r7, r2
 80117d4:	8183      	strh	r3, [r0, #12]
 80117d6:	460c      	mov	r4, r1
 80117d8:	46a8      	mov	r8, r5
 80117da:	4621      	mov	r1, r4
 80117dc:	4630      	mov	r0, r6
 80117de:	3501      	adds	r5, #1
 80117e0:	f005 fea2 	bl	8017528 <put_memory>
 80117e4:	42af      	cmp	r7, r5
 80117e6:	60a4      	str	r4, [r4, #8]
 80117e8:	f884 800c 	strb.w	r8, [r4, #12]
 80117ec:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80117f0:	d1f3      	bne.n	80117da <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80117f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f6:	4770      	bx	lr

080117f8 <rmw_uxrce_init_init_options_impl_memory>:
 80117f8:	b1e2      	cbz	r2, 8011834 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80117fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fe:	7b05      	ldrb	r5, [r0, #12]
 8011800:	4606      	mov	r6, r0
 8011802:	b9ad      	cbnz	r5, 8011830 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011804:	232c      	movs	r3, #44	@ 0x2c
 8011806:	e9c0 5500 	strd	r5, r5, [r0]
 801180a:	6083      	str	r3, [r0, #8]
 801180c:	f240 1301 	movw	r3, #257	@ 0x101
 8011810:	4617      	mov	r7, r2
 8011812:	8183      	strh	r3, [r0, #12]
 8011814:	460c      	mov	r4, r1
 8011816:	46a8      	mov	r8, r5
 8011818:	4621      	mov	r1, r4
 801181a:	4630      	mov	r0, r6
 801181c:	3501      	adds	r5, #1
 801181e:	f005 fe83 	bl	8017528 <put_memory>
 8011822:	42af      	cmp	r7, r5
 8011824:	60a4      	str	r4, [r4, #8]
 8011826:	f884 800c 	strb.w	r8, [r4, #12]
 801182a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801182e:	d1f3      	bne.n	8011818 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop

08011838 <rmw_uxrce_init_wait_set_memory>:
 8011838:	b1e2      	cbz	r2, 8011874 <rmw_uxrce_init_wait_set_memory+0x3c>
 801183a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801183e:	7b05      	ldrb	r5, [r0, #12]
 8011840:	4606      	mov	r6, r0
 8011842:	b9ad      	cbnz	r5, 8011870 <rmw_uxrce_init_wait_set_memory+0x38>
 8011844:	231c      	movs	r3, #28
 8011846:	e9c0 5500 	strd	r5, r5, [r0]
 801184a:	6083      	str	r3, [r0, #8]
 801184c:	f240 1301 	movw	r3, #257	@ 0x101
 8011850:	4617      	mov	r7, r2
 8011852:	8183      	strh	r3, [r0, #12]
 8011854:	460c      	mov	r4, r1
 8011856:	46a8      	mov	r8, r5
 8011858:	4621      	mov	r1, r4
 801185a:	4630      	mov	r0, r6
 801185c:	3501      	adds	r5, #1
 801185e:	f005 fe63 	bl	8017528 <put_memory>
 8011862:	42af      	cmp	r7, r5
 8011864:	60a4      	str	r4, [r4, #8]
 8011866:	f884 800c 	strb.w	r8, [r4, #12]
 801186a:	f104 041c 	add.w	r4, r4, #28
 801186e:	d1f3      	bne.n	8011858 <rmw_uxrce_init_wait_set_memory+0x20>
 8011870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop

08011878 <rmw_uxrce_init_guard_condition_memory>:
 8011878:	b1e2      	cbz	r2, 80118b4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801187a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801187e:	7b05      	ldrb	r5, [r0, #12]
 8011880:	4606      	mov	r6, r0
 8011882:	b9ad      	cbnz	r5, 80118b0 <rmw_uxrce_init_guard_condition_memory+0x38>
 8011884:	2320      	movs	r3, #32
 8011886:	e9c0 5500 	strd	r5, r5, [r0]
 801188a:	6083      	str	r3, [r0, #8]
 801188c:	f240 1301 	movw	r3, #257	@ 0x101
 8011890:	4617      	mov	r7, r2
 8011892:	8183      	strh	r3, [r0, #12]
 8011894:	460c      	mov	r4, r1
 8011896:	46a8      	mov	r8, r5
 8011898:	4621      	mov	r1, r4
 801189a:	4630      	mov	r0, r6
 801189c:	3501      	adds	r5, #1
 801189e:	f005 fe43 	bl	8017528 <put_memory>
 80118a2:	42af      	cmp	r7, r5
 80118a4:	60a4      	str	r4, [r4, #8]
 80118a6:	f884 800c 	strb.w	r8, [r4, #12]
 80118aa:	f104 0420 	add.w	r4, r4, #32
 80118ae:	d1f3      	bne.n	8011898 <rmw_uxrce_init_guard_condition_memory+0x20>
 80118b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop

080118b8 <rmw_uxrce_fini_session_memory>:
 80118b8:	4601      	mov	r1, r0
 80118ba:	4801      	ldr	r0, [pc, #4]	@ (80118c0 <rmw_uxrce_fini_session_memory+0x8>)
 80118bc:	f005 be34 	b.w	8017528 <put_memory>
 80118c0:	200145e4 	.word	0x200145e4

080118c4 <rmw_uxrce_fini_node_memory>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	4604      	mov	r4, r0
 80118c8:	6800      	ldr	r0, [r0, #0]
 80118ca:	b128      	cbz	r0, 80118d8 <rmw_uxrce_fini_node_memory+0x14>
 80118cc:	4b07      	ldr	r3, [pc, #28]	@ (80118ec <rmw_uxrce_fini_node_memory+0x28>)
 80118ce:	6819      	ldr	r1, [r3, #0]
 80118d0:	f7ee fc7e 	bl	80001d0 <strcmp>
 80118d4:	b940      	cbnz	r0, 80118e8 <rmw_uxrce_fini_node_memory+0x24>
 80118d6:	6020      	str	r0, [r4, #0]
 80118d8:	6861      	ldr	r1, [r4, #4]
 80118da:	b129      	cbz	r1, 80118e8 <rmw_uxrce_fini_node_memory+0x24>
 80118dc:	2500      	movs	r5, #0
 80118de:	4804      	ldr	r0, [pc, #16]	@ (80118f0 <rmw_uxrce_fini_node_memory+0x2c>)
 80118e0:	610d      	str	r5, [r1, #16]
 80118e2:	f005 fe21 	bl	8017528 <put_memory>
 80118e6:	6065      	str	r5, [r4, #4]
 80118e8:	bd38      	pop	{r3, r4, r5, pc}
 80118ea:	bf00      	nop
 80118ec:	0801cc94 	.word	0x0801cc94
 80118f0:	200145b4 	.word	0x200145b4

080118f4 <rmw_uxrce_fini_publisher_memory>:
 80118f4:	b510      	push	{r4, lr}
 80118f6:	4604      	mov	r4, r0
 80118f8:	6800      	ldr	r0, [r0, #0]
 80118fa:	b128      	cbz	r0, 8011908 <rmw_uxrce_fini_publisher_memory+0x14>
 80118fc:	4b06      	ldr	r3, [pc, #24]	@ (8011918 <rmw_uxrce_fini_publisher_memory+0x24>)
 80118fe:	6819      	ldr	r1, [r3, #0]
 8011900:	f7ee fc66 	bl	80001d0 <strcmp>
 8011904:	b938      	cbnz	r0, 8011916 <rmw_uxrce_fini_publisher_memory+0x22>
 8011906:	6020      	str	r0, [r4, #0]
 8011908:	6861      	ldr	r1, [r4, #4]
 801190a:	b121      	cbz	r1, 8011916 <rmw_uxrce_fini_publisher_memory+0x22>
 801190c:	4803      	ldr	r0, [pc, #12]	@ (801191c <rmw_uxrce_fini_publisher_memory+0x28>)
 801190e:	f005 fe0b 	bl	8017528 <put_memory>
 8011912:	2300      	movs	r3, #0
 8011914:	6063      	str	r3, [r4, #4]
 8011916:	bd10      	pop	{r4, pc}
 8011918:	0801cc94 	.word	0x0801cc94
 801191c:	200145c4 	.word	0x200145c4

08011920 <rmw_uxrce_fini_subscription_memory>:
 8011920:	b510      	push	{r4, lr}
 8011922:	4604      	mov	r4, r0
 8011924:	6800      	ldr	r0, [r0, #0]
 8011926:	b128      	cbz	r0, 8011934 <rmw_uxrce_fini_subscription_memory+0x14>
 8011928:	4b06      	ldr	r3, [pc, #24]	@ (8011944 <rmw_uxrce_fini_subscription_memory+0x24>)
 801192a:	6819      	ldr	r1, [r3, #0]
 801192c:	f7ee fc50 	bl	80001d0 <strcmp>
 8011930:	b938      	cbnz	r0, 8011942 <rmw_uxrce_fini_subscription_memory+0x22>
 8011932:	6020      	str	r0, [r4, #0]
 8011934:	6861      	ldr	r1, [r4, #4]
 8011936:	b121      	cbz	r1, 8011942 <rmw_uxrce_fini_subscription_memory+0x22>
 8011938:	4803      	ldr	r0, [pc, #12]	@ (8011948 <rmw_uxrce_fini_subscription_memory+0x28>)
 801193a:	f005 fdf5 	bl	8017528 <put_memory>
 801193e:	2300      	movs	r3, #0
 8011940:	6063      	str	r3, [r4, #4]
 8011942:	bd10      	pop	{r4, pc}
 8011944:	0801cc94 	.word	0x0801cc94
 8011948:	20014604 	.word	0x20014604

0801194c <rmw_uxrce_fini_service_memory>:
 801194c:	b510      	push	{r4, lr}
 801194e:	4604      	mov	r4, r0
 8011950:	6800      	ldr	r0, [r0, #0]
 8011952:	b128      	cbz	r0, 8011960 <rmw_uxrce_fini_service_memory+0x14>
 8011954:	4b06      	ldr	r3, [pc, #24]	@ (8011970 <rmw_uxrce_fini_service_memory+0x24>)
 8011956:	6819      	ldr	r1, [r3, #0]
 8011958:	f7ee fc3a 	bl	80001d0 <strcmp>
 801195c:	b938      	cbnz	r0, 801196e <rmw_uxrce_fini_service_memory+0x22>
 801195e:	6020      	str	r0, [r4, #0]
 8011960:	6861      	ldr	r1, [r4, #4]
 8011962:	b121      	cbz	r1, 801196e <rmw_uxrce_fini_service_memory+0x22>
 8011964:	4803      	ldr	r0, [pc, #12]	@ (8011974 <rmw_uxrce_fini_service_memory+0x28>)
 8011966:	f005 fddf 	bl	8017528 <put_memory>
 801196a:	2300      	movs	r3, #0
 801196c:	6063      	str	r3, [r4, #4]
 801196e:	bd10      	pop	{r4, pc}
 8011970:	0801cc94 	.word	0x0801cc94
 8011974:	200145d4 	.word	0x200145d4

08011978 <rmw_uxrce_fini_client_memory>:
 8011978:	b510      	push	{r4, lr}
 801197a:	4604      	mov	r4, r0
 801197c:	6800      	ldr	r0, [r0, #0]
 801197e:	b128      	cbz	r0, 801198c <rmw_uxrce_fini_client_memory+0x14>
 8011980:	4b06      	ldr	r3, [pc, #24]	@ (801199c <rmw_uxrce_fini_client_memory+0x24>)
 8011982:	6819      	ldr	r1, [r3, #0]
 8011984:	f7ee fc24 	bl	80001d0 <strcmp>
 8011988:	b938      	cbnz	r0, 801199a <rmw_uxrce_fini_client_memory+0x22>
 801198a:	6020      	str	r0, [r4, #0]
 801198c:	6861      	ldr	r1, [r4, #4]
 801198e:	b121      	cbz	r1, 801199a <rmw_uxrce_fini_client_memory+0x22>
 8011990:	4803      	ldr	r0, [pc, #12]	@ (80119a0 <rmw_uxrce_fini_client_memory+0x28>)
 8011992:	f005 fdc9 	bl	8017528 <put_memory>
 8011996:	2300      	movs	r3, #0
 8011998:	6063      	str	r3, [r4, #4]
 801199a:	bd10      	pop	{r4, pc}
 801199c:	0801cc94 	.word	0x0801cc94
 80119a0:	2000fce8 	.word	0x2000fce8

080119a4 <rmw_uxrce_fini_topic_memory>:
 80119a4:	b510      	push	{r4, lr}
 80119a6:	4604      	mov	r4, r0
 80119a8:	4621      	mov	r1, r4
 80119aa:	4803      	ldr	r0, [pc, #12]	@ (80119b8 <rmw_uxrce_fini_topic_memory+0x14>)
 80119ac:	f005 fdbc 	bl	8017528 <put_memory>
 80119b0:	2300      	movs	r3, #0
 80119b2:	61a3      	str	r3, [r4, #24]
 80119b4:	bd10      	pop	{r4, pc}
 80119b6:	bf00      	nop
 80119b8:	20014614 	.word	0x20014614

080119bc <rmw_uxrce_get_static_input_buffer_for_entity>:
 80119bc:	b082      	sub	sp, #8
 80119be:	b530      	push	{r4, r5, lr}
 80119c0:	4925      	ldr	r1, [pc, #148]	@ (8011a58 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80119c2:	680d      	ldr	r5, [r1, #0]
 80119c4:	ac03      	add	r4, sp, #12
 80119c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80119ca:	461c      	mov	r4, r3
 80119cc:	2d00      	cmp	r5, #0
 80119ce:	d041      	beq.n	8011a54 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80119d0:	462b      	mov	r3, r5
 80119d2:	2100      	movs	r1, #0
 80119d4:	689a      	ldr	r2, [r3, #8]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80119dc:	4290      	cmp	r0, r2
 80119de:	bf08      	it	eq
 80119e0:	3101      	addeq	r1, #1
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d1f6      	bne.n	80119d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80119e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d029      	beq.n	8011a42 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80119ee:	d907      	bls.n	8011a00 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80119f0:	2b03      	cmp	r3, #3
 80119f2:	d005      	beq.n	8011a00 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80119f4:	2100      	movs	r1, #0
 80119f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119fa:	4608      	mov	r0, r1
 80119fc:	b002      	add	sp, #8
 80119fe:	4770      	bx	lr
 8011a00:	b314      	cbz	r4, 8011a48 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011a02:	428c      	cmp	r4, r1
 8011a04:	d820      	bhi.n	8011a48 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011a06:	2d00      	cmp	r5, #0
 8011a08:	d0f4      	beq.n	80119f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8011a10:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011a14:	e002      	b.n	8011a1c <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8011a16:	686d      	ldr	r5, [r5, #4]
 8011a18:	2d00      	cmp	r5, #0
 8011a1a:	d0ec      	beq.n	80119f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011a1c:	68ab      	ldr	r3, [r5, #8]
 8011a1e:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011a22:	4290      	cmp	r0, r2
 8011a24:	d1f7      	bne.n	8011a16 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011a26:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8011a2a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011a2e:	4562      	cmp	r2, ip
 8011a30:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011a34:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011a38:	daed      	bge.n	8011a16 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011a3a:	4694      	mov	ip, r2
 8011a3c:	461c      	mov	r4, r3
 8011a3e:	4629      	mov	r1, r5
 8011a40:	e7e9      	b.n	8011a16 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011a42:	b10c      	cbz	r4, 8011a48 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011a44:	428c      	cmp	r4, r1
 8011a46:	d9d5      	bls.n	80119f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a4c:	4802      	ldr	r0, [pc, #8]	@ (8011a58 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011a4e:	b002      	add	sp, #8
 8011a50:	f005 bd5a 	b.w	8017508 <get_memory>
 8011a54:	4629      	mov	r1, r5
 8011a56:	e7c6      	b.n	80119e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8011a58:	200145f4 	.word	0x200145f4

08011a5c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8011a5c:	4b11      	ldr	r3, [pc, #68]	@ (8011aa4 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	b530      	push	{r4, r5, lr}
 8011a62:	b1e3      	cbz	r3, 8011a9e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011a64:	f04f 3eff 	mov.w	lr, #4294967295
 8011a68:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011a6c:	2400      	movs	r4, #0
 8011a6e:	e001      	b.n	8011a74 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	b193      	cbz	r3, 8011a9a <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8011a74:	689a      	ldr	r2, [r3, #8]
 8011a76:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8011a7a:	4288      	cmp	r0, r1
 8011a7c:	d1f8      	bne.n	8011a70 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011a7e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8011a82:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8011a86:	4571      	cmp	r1, lr
 8011a88:	eb72 050c 	sbcs.w	r5, r2, ip
 8011a8c:	daf0      	bge.n	8011a70 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011a8e:	461c      	mov	r4, r3
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	468e      	mov	lr, r1
 8011a94:	4694      	mov	ip, r2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d1ec      	bne.n	8011a74 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	bd30      	pop	{r4, r5, pc}
 8011a9e:	461c      	mov	r4, r3
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	bd30      	pop	{r4, r5, pc}
 8011aa4:	200145f4 	.word	0x200145f4

08011aa8 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aac:	4b3c      	ldr	r3, [pc, #240]	@ (8011ba0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011aae:	ed2d 8b06 	vpush	{d8-d10}
 8011ab2:	681f      	ldr	r7, [r3, #0]
 8011ab4:	b08d      	sub	sp, #52	@ 0x34
 8011ab6:	f005 fde5 	bl	8017684 <rmw_uros_epoch_nanos>
 8011aba:	2f00      	cmp	r7, #0
 8011abc:	d05d      	beq.n	8011b7a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011abe:	46b8      	mov	r8, r7
 8011ac0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8011b88 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011ac4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011ac8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011acc:	2b04      	cmp	r3, #4
 8011ace:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8011b90 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011ad2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8011b98 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011ad6:	4681      	mov	r9, r0
 8011ad8:	468a      	mov	sl, r1
 8011ada:	ac04      	add	r4, sp, #16
 8011adc:	d03f      	beq.n	8011b5e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011ade:	2b05      	cmp	r3, #5
 8011ae0:	d044      	beq.n	8011b6c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011ae2:	2b03      	cmp	r3, #3
 8011ae4:	d03b      	beq.n	8011b5e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011ae6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011aea:	ed8d ab06 	vstr	d10, [sp, #24]
 8011aee:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011af2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011af6:	ab08      	add	r3, sp, #32
 8011af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011afa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011afe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011b02:	f000 f905 	bl	8011d10 <rmw_time_equal>
 8011b06:	b118      	cbz	r0, 8011b10 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011b08:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011b0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011b10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011b14:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011b18:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8011b1c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011b20:	f000 f94a 	bl	8011db8 <rmw_time_total_nsec>
 8011b24:	1830      	adds	r0, r6, r0
 8011b26:	eb47 0101 	adc.w	r1, r7, r1
 8011b2a:	4548      	cmp	r0, r9
 8011b2c:	eb71 030a 	sbcs.w	r3, r1, sl
 8011b30:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011b34:	db05      	blt.n	8011b42 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011b36:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8011b3a:	4591      	cmp	r9, r2
 8011b3c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011b40:	da03      	bge.n	8011b4a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8011b42:	4817      	ldr	r0, [pc, #92]	@ (8011ba0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011b44:	4641      	mov	r1, r8
 8011b46:	f005 fcef 	bl	8017528 <put_memory>
 8011b4a:	f1bb 0f00 	cmp.w	fp, #0
 8011b4e:	d014      	beq.n	8011b7a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011b50:	46d8      	mov	r8, fp
 8011b52:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011b56:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011b5a:	2b04      	cmp	r3, #4
 8011b5c:	d1bf      	bne.n	8011ade <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8011b5e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011b62:	3340      	adds	r3, #64	@ 0x40
 8011b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011b6a:	e7c0      	b.n	8011aee <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8011b6c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011b70:	3348      	adds	r3, #72	@ 0x48
 8011b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011b78:	e7b9      	b.n	8011aee <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8011b7a:	b00d      	add	sp, #52	@ 0x34
 8011b7c:	ecbd 8b06 	vpop	{d8-d10}
 8011b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b84:	f3af 8000 	nop.w
	...
 8011b90:	00000001 	.word	0x00000001
 8011b94:	00000000 	.word	0x00000000
 8011b98:	0000001e 	.word	0x0000001e
 8011b9c:	00000000 	.word	0x00000000
 8011ba0:	200145f4 	.word	0x200145f4

08011ba4 <run_xrce_session>:
 8011ba4:	b510      	push	{r4, lr}
 8011ba6:	788c      	ldrb	r4, [r1, #2]
 8011ba8:	b086      	sub	sp, #24
 8011baa:	2c01      	cmp	r4, #1
 8011bac:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011bb0:	d00c      	beq.n	8011bcc <run_xrce_session+0x28>
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	f10d 020e 	add.w	r2, sp, #14
 8011bbc:	f10d 0317 	add.w	r3, sp, #23
 8011bc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011bc4:	f001 fd4e 	bl	8013664 <uxr_run_session_until_all_status>
 8011bc8:	b006      	add	sp, #24
 8011bca:	bd10      	pop	{r4, pc}
 8011bcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011bd0:	f001 f962 	bl	8012e98 <uxr_flash_output_streams>
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	b006      	add	sp, #24
 8011bd8:	bd10      	pop	{r4, pc}
 8011bda:	bf00      	nop

08011bdc <convert_qos_profile>:
 8011bdc:	7a4a      	ldrb	r2, [r1, #9]
 8011bde:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011be2:	2a02      	cmp	r2, #2
 8011be4:	bf18      	it	ne
 8011be6:	2200      	movne	r2, #0
 8011be8:	7002      	strb	r2, [r0, #0]
 8011bea:	780a      	ldrb	r2, [r1, #0]
 8011bec:	8889      	ldrh	r1, [r1, #4]
 8011bee:	8081      	strh	r1, [r0, #4]
 8011bf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8011bf4:	f1a2 0202 	sub.w	r2, r2, #2
 8011bf8:	fabc fc8c 	clz	ip, ip
 8011bfc:	fab2 f282 	clz	r2, r2
 8011c00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8011c04:	0952      	lsrs	r2, r2, #5
 8011c06:	f880 c001 	strb.w	ip, [r0, #1]
 8011c0a:	7082      	strb	r2, [r0, #2]
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop

08011c10 <generate_type_name>:
 8011c10:	b530      	push	{r4, r5, lr}
 8011c12:	2300      	movs	r3, #0
 8011c14:	700b      	strb	r3, [r1, #0]
 8011c16:	6803      	ldr	r3, [r0, #0]
 8011c18:	b087      	sub	sp, #28
 8011c1a:	4614      	mov	r4, r2
 8011c1c:	b1d3      	cbz	r3, 8011c54 <generate_type_name+0x44>
 8011c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8011c5c <generate_type_name+0x4c>)
 8011c20:	4615      	mov	r5, r2
 8011c22:	9203      	str	r2, [sp, #12]
 8011c24:	9500      	str	r5, [sp, #0]
 8011c26:	6842      	ldr	r2, [r0, #4]
 8011c28:	480d      	ldr	r0, [pc, #52]	@ (8011c60 <generate_type_name+0x50>)
 8011c2a:	9001      	str	r0, [sp, #4]
 8011c2c:	4608      	mov	r0, r1
 8011c2e:	490d      	ldr	r1, [pc, #52]	@ (8011c64 <generate_type_name+0x54>)
 8011c30:	9204      	str	r2, [sp, #16]
 8011c32:	9105      	str	r1, [sp, #20]
 8011c34:	9102      	str	r1, [sp, #8]
 8011c36:	4a0c      	ldr	r2, [pc, #48]	@ (8011c68 <generate_type_name+0x58>)
 8011c38:	4621      	mov	r1, r4
 8011c3a:	f007 fc3f 	bl	80194bc <sniprintf>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	db05      	blt.n	8011c4e <generate_type_name+0x3e>
 8011c42:	4284      	cmp	r4, r0
 8011c44:	bfd4      	ite	le
 8011c46:	2000      	movle	r0, #0
 8011c48:	2001      	movgt	r0, #1
 8011c4a:	b007      	add	sp, #28
 8011c4c:	bd30      	pop	{r4, r5, pc}
 8011c4e:	2000      	movs	r0, #0
 8011c50:	b007      	add	sp, #28
 8011c52:	bd30      	pop	{r4, r5, pc}
 8011c54:	4b05      	ldr	r3, [pc, #20]	@ (8011c6c <generate_type_name+0x5c>)
 8011c56:	4a01      	ldr	r2, [pc, #4]	@ (8011c5c <generate_type_name+0x4c>)
 8011c58:	461d      	mov	r5, r3
 8011c5a:	e7e2      	b.n	8011c22 <generate_type_name+0x12>
 8011c5c:	0801c23c 	.word	0x0801c23c
 8011c60:	0801c254 	.word	0x0801c254
 8011c64:	0801c250 	.word	0x0801c250
 8011c68:	0801c240 	.word	0x0801c240
 8011c6c:	0801c5c0 	.word	0x0801c5c0

08011c70 <generate_topic_name>:
 8011c70:	b510      	push	{r4, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	4614      	mov	r4, r2
 8011c76:	9000      	str	r0, [sp, #0]
 8011c78:	4b08      	ldr	r3, [pc, #32]	@ (8011c9c <generate_topic_name+0x2c>)
 8011c7a:	4a09      	ldr	r2, [pc, #36]	@ (8011ca0 <generate_topic_name+0x30>)
 8011c7c:	4608      	mov	r0, r1
 8011c7e:	4621      	mov	r1, r4
 8011c80:	f007 fc1c 	bl	80194bc <sniprintf>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	db05      	blt.n	8011c94 <generate_topic_name+0x24>
 8011c88:	4284      	cmp	r4, r0
 8011c8a:	bfd4      	ite	le
 8011c8c:	2000      	movle	r0, #0
 8011c8e:	2001      	movgt	r0, #1
 8011c90:	b002      	add	sp, #8
 8011c92:	bd10      	pop	{r4, pc}
 8011c94:	2000      	movs	r0, #0
 8011c96:	b002      	add	sp, #8
 8011c98:	bd10      	pop	{r4, pc}
 8011c9a:	bf00      	nop
 8011c9c:	0801c258 	.word	0x0801c258
 8011ca0:	0801bff8 	.word	0x0801bff8

08011ca4 <is_uxrce_rmw_identifier_valid>:
 8011ca4:	b510      	push	{r4, lr}
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	b140      	cbz	r0, 8011cbc <is_uxrce_rmw_identifier_valid+0x18>
 8011caa:	f7fe fac3 	bl	8010234 <rmw_get_implementation_identifier>
 8011cae:	4601      	mov	r1, r0
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f7ee fa8d 	bl	80001d0 <strcmp>
 8011cb6:	fab0 f080 	clz	r0, r0
 8011cba:	0940      	lsrs	r0, r0, #5
 8011cbc:	bd10      	pop	{r4, pc}
 8011cbe:	bf00      	nop

08011cc0 <rmw_get_default_publisher_options>:
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	6002      	str	r2, [r0, #0]
 8011cc4:	7102      	strb	r2, [r0, #4]
 8011cc6:	4770      	bx	lr

08011cc8 <rmw_get_default_security_options>:
 8011cc8:	2200      	movs	r2, #0
 8011cca:	7002      	strb	r2, [r0, #0]
 8011ccc:	6042      	str	r2, [r0, #4]
 8011cce:	4770      	bx	lr

08011cd0 <rmw_subscription_content_filter_options_fini>:
 8011cd0:	b1b0      	cbz	r0, 8011d00 <rmw_subscription_content_filter_options_fini+0x30>
 8011cd2:	b538      	push	{r3, r4, r5, lr}
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	460d      	mov	r5, r1
 8011cda:	f7fd fe47 	bl	800f96c <rcutils_allocator_is_valid>
 8011cde:	b168      	cbz	r0, 8011cfc <rmw_subscription_content_filter_options_fini+0x2c>
 8011ce0:	6820      	ldr	r0, [r4, #0]
 8011ce2:	b120      	cbz	r0, 8011cee <rmw_subscription_content_filter_options_fini+0x1e>
 8011ce4:	686b      	ldr	r3, [r5, #4]
 8011ce6:	6929      	ldr	r1, [r5, #16]
 8011ce8:	4798      	blx	r3
 8011cea:	2300      	movs	r3, #0
 8011cec:	6023      	str	r3, [r4, #0]
 8011cee:	1d20      	adds	r0, r4, #4
 8011cf0:	f005 fac4 	bl	801727c <rcutils_string_array_fini>
 8011cf4:	3800      	subs	r0, #0
 8011cf6:	bf18      	it	ne
 8011cf8:	2001      	movne	r0, #1
 8011cfa:	bd38      	pop	{r3, r4, r5, pc}
 8011cfc:	200b      	movs	r0, #11
 8011cfe:	bd38      	pop	{r3, r4, r5, pc}
 8011d00:	200b      	movs	r0, #11
 8011d02:	4770      	bx	lr

08011d04 <rmw_get_default_subscription_options>:
 8011d04:	2200      	movs	r2, #0
 8011d06:	e9c0 2200 	strd	r2, r2, [r0]
 8011d0a:	6082      	str	r2, [r0, #8]
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop

08011d10 <rmw_time_equal>:
 8011d10:	b4f0      	push	{r4, r5, r6, r7}
 8011d12:	b084      	sub	sp, #16
 8011d14:	ac04      	add	r4, sp, #16
 8011d16:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	4924      	ldr	r1, [pc, #144]	@ (8011db0 <rmw_time_equal+0xa0>)
 8011d1e:	9e03      	ldr	r6, [sp, #12]
 8011d20:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011d24:	2202      	movs	r2, #2
 8011d26:	4299      	cmp	r1, r3
 8011d28:	41aa      	sbcs	r2, r5
 8011d2a:	d330      	bcc.n	8011d8e <rmw_time_equal+0x7e>
 8011d2c:	4c21      	ldr	r4, [pc, #132]	@ (8011db4 <rmw_time_equal+0xa4>)
 8011d2e:	fba3 3204 	umull	r3, r2, r3, r4
 8011d32:	fb04 2205 	mla	r2, r4, r5, r2
 8011d36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d3a:	43dd      	mvns	r5, r3
 8011d3c:	1a8c      	subs	r4, r1, r2
 8011d3e:	4285      	cmp	r5, r0
 8011d40:	41b4      	sbcs	r4, r6
 8011d42:	d332      	bcc.n	8011daa <rmw_time_equal+0x9a>
 8011d44:	eb10 0c03 	adds.w	ip, r0, r3
 8011d48:	eb42 0106 	adc.w	r1, r2, r6
 8011d4c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011d50:	4817      	ldr	r0, [pc, #92]	@ (8011db0 <rmw_time_equal+0xa0>)
 8011d52:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011d54:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011d56:	2202      	movs	r2, #2
 8011d58:	4298      	cmp	r0, r3
 8011d5a:	41b2      	sbcs	r2, r6
 8011d5c:	d31c      	bcc.n	8011d98 <rmw_time_equal+0x88>
 8011d5e:	4c15      	ldr	r4, [pc, #84]	@ (8011db4 <rmw_time_equal+0xa4>)
 8011d60:	fba3 3204 	umull	r3, r2, r3, r4
 8011d64:	fb04 2206 	mla	r2, r4, r6, r2
 8011d68:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011d6c:	43de      	mvns	r6, r3
 8011d6e:	1a84      	subs	r4, r0, r2
 8011d70:	42ae      	cmp	r6, r5
 8011d72:	41bc      	sbcs	r4, r7
 8011d74:	d315      	bcc.n	8011da2 <rmw_time_equal+0x92>
 8011d76:	195b      	adds	r3, r3, r5
 8011d78:	eb42 0207 	adc.w	r2, r2, r7
 8011d7c:	428a      	cmp	r2, r1
 8011d7e:	bf08      	it	eq
 8011d80:	4563      	cmpeq	r3, ip
 8011d82:	bf0c      	ite	eq
 8011d84:	2001      	moveq	r0, #1
 8011d86:	2000      	movne	r0, #0
 8011d88:	b004      	add	sp, #16
 8011d8a:	bcf0      	pop	{r4, r5, r6, r7}
 8011d8c:	4770      	bx	lr
 8011d8e:	f04f 3cff 	mov.w	ip, #4294967295
 8011d92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d96:	e7d9      	b.n	8011d4c <rmw_time_equal+0x3c>
 8011d98:	f04f 33ff 	mov.w	r3, #4294967295
 8011d9c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011da0:	e7ec      	b.n	8011d7c <rmw_time_equal+0x6c>
 8011da2:	f04f 33ff 	mov.w	r3, #4294967295
 8011da6:	4602      	mov	r2, r0
 8011da8:	e7e8      	b.n	8011d7c <rmw_time_equal+0x6c>
 8011daa:	f04f 3cff 	mov.w	ip, #4294967295
 8011dae:	e7cd      	b.n	8011d4c <rmw_time_equal+0x3c>
 8011db0:	25c17d04 	.word	0x25c17d04
 8011db4:	3b9aca00 	.word	0x3b9aca00

08011db8 <rmw_time_total_nsec>:
 8011db8:	b470      	push	{r4, r5, r6}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	ac04      	add	r4, sp, #16
 8011dbe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	4912      	ldr	r1, [pc, #72]	@ (8011e10 <rmw_time_total_nsec+0x58>)
 8011dc6:	9e03      	ldr	r6, [sp, #12]
 8011dc8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011dcc:	2202      	movs	r2, #2
 8011dce:	4299      	cmp	r1, r3
 8011dd0:	41aa      	sbcs	r2, r5
 8011dd2:	d311      	bcc.n	8011df8 <rmw_time_total_nsec+0x40>
 8011dd4:	4c0f      	ldr	r4, [pc, #60]	@ (8011e14 <rmw_time_total_nsec+0x5c>)
 8011dd6:	fba3 3204 	umull	r3, r2, r3, r4
 8011dda:	fb04 2205 	mla	r2, r4, r5, r2
 8011dde:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011de2:	43dd      	mvns	r5, r3
 8011de4:	1a8c      	subs	r4, r1, r2
 8011de6:	4285      	cmp	r5, r0
 8011de8:	41b4      	sbcs	r4, r6
 8011dea:	d30c      	bcc.n	8011e06 <rmw_time_total_nsec+0x4e>
 8011dec:	1818      	adds	r0, r3, r0
 8011dee:	eb42 0106 	adc.w	r1, r2, r6
 8011df2:	b005      	add	sp, #20
 8011df4:	bc70      	pop	{r4, r5, r6}
 8011df6:	4770      	bx	lr
 8011df8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011e00:	b005      	add	sp, #20
 8011e02:	bc70      	pop	{r4, r5, r6}
 8011e04:	4770      	bx	lr
 8011e06:	f04f 30ff 	mov.w	r0, #4294967295
 8011e0a:	b005      	add	sp, #20
 8011e0c:	bc70      	pop	{r4, r5, r6}
 8011e0e:	4770      	bx	lr
 8011e10:	25c17d04 	.word	0x25c17d04
 8011e14:	3b9aca00 	.word	0x3b9aca00

08011e18 <rmw_get_zero_initialized_message_info>:
 8011e18:	b510      	push	{r4, lr}
 8011e1a:	2238      	movs	r2, #56	@ 0x38
 8011e1c:	4604      	mov	r4, r0
 8011e1e:	2100      	movs	r1, #0
 8011e20:	f007 fcda 	bl	80197d8 <memset>
 8011e24:	4620      	mov	r0, r4
 8011e26:	bd10      	pop	{r4, pc}

08011e28 <rmw_validate_full_topic_name>:
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d057      	beq.n	8011edc <rmw_validate_full_topic_name+0xb4>
 8011e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e30:	460d      	mov	r5, r1
 8011e32:	2900      	cmp	r1, #0
 8011e34:	d054      	beq.n	8011ee0 <rmw_validate_full_topic_name+0xb8>
 8011e36:	4616      	mov	r6, r2
 8011e38:	4604      	mov	r4, r0
 8011e3a:	f7ee fa29 	bl	8000290 <strlen>
 8011e3e:	b148      	cbz	r0, 8011e54 <rmw_validate_full_topic_name+0x2c>
 8011e40:	7823      	ldrb	r3, [r4, #0]
 8011e42:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e44:	d00d      	beq.n	8011e62 <rmw_validate_full_topic_name+0x3a>
 8011e46:	2302      	movs	r3, #2
 8011e48:	602b      	str	r3, [r5, #0]
 8011e4a:	b13e      	cbz	r6, 8011e5c <rmw_validate_full_topic_name+0x34>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	6030      	str	r0, [r6, #0]
 8011e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e54:	2301      	movs	r3, #1
 8011e56:	602b      	str	r3, [r5, #0]
 8011e58:	2e00      	cmp	r6, #0
 8011e5a:	d1f7      	bne.n	8011e4c <rmw_validate_full_topic_name+0x24>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e62:	1e43      	subs	r3, r0, #1
 8011e64:	5ce2      	ldrb	r2, [r4, r3]
 8011e66:	2a2f      	cmp	r2, #47	@ 0x2f
 8011e68:	d03c      	beq.n	8011ee4 <rmw_validate_full_topic_name+0xbc>
 8011e6a:	1e63      	subs	r3, r4, #1
 8011e6c:	eb03 0800 	add.w	r8, r3, r0
 8011e70:	f1c4 0e01 	rsb	lr, r4, #1
 8011e74:	eb0e 0703 	add.w	r7, lr, r3
 8011e78:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011e7c:	f021 0220 	bic.w	r2, r1, #32
 8011e80:	3a41      	subs	r2, #65	@ 0x41
 8011e82:	2a19      	cmp	r2, #25
 8011e84:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8011e88:	d90b      	bls.n	8011ea2 <rmw_validate_full_topic_name+0x7a>
 8011e8a:	295f      	cmp	r1, #95	@ 0x5f
 8011e8c:	d009      	beq.n	8011ea2 <rmw_validate_full_topic_name+0x7a>
 8011e8e:	f1bc 0f0a 	cmp.w	ip, #10
 8011e92:	d906      	bls.n	8011ea2 <rmw_validate_full_topic_name+0x7a>
 8011e94:	2304      	movs	r3, #4
 8011e96:	602b      	str	r3, [r5, #0]
 8011e98:	2e00      	cmp	r6, #0
 8011e9a:	d0df      	beq.n	8011e5c <rmw_validate_full_topic_name+0x34>
 8011e9c:	6037      	str	r7, [r6, #0]
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	e7d6      	b.n	8011e50 <rmw_validate_full_topic_name+0x28>
 8011ea2:	4543      	cmp	r3, r8
 8011ea4:	d1e6      	bne.n	8011e74 <rmw_validate_full_topic_name+0x4c>
 8011ea6:	4f1a      	ldr	r7, [pc, #104]	@ (8011f10 <rmw_validate_full_topic_name+0xe8>)
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e004      	b.n	8011eb6 <rmw_validate_full_topic_name+0x8e>
 8011eac:	4298      	cmp	r0, r3
 8011eae:	f104 0401 	add.w	r4, r4, #1
 8011eb2:	d91c      	bls.n	8011eee <rmw_validate_full_topic_name+0xc6>
 8011eb4:	4613      	mov	r3, r2
 8011eb6:	4298      	cmp	r0, r3
 8011eb8:	f103 0201 	add.w	r2, r3, #1
 8011ebc:	d0f6      	beq.n	8011eac <rmw_validate_full_topic_name+0x84>
 8011ebe:	7821      	ldrb	r1, [r4, #0]
 8011ec0:	292f      	cmp	r1, #47	@ 0x2f
 8011ec2:	d1f3      	bne.n	8011eac <rmw_validate_full_topic_name+0x84>
 8011ec4:	7861      	ldrb	r1, [r4, #1]
 8011ec6:	292f      	cmp	r1, #47	@ 0x2f
 8011ec8:	d01c      	beq.n	8011f04 <rmw_validate_full_topic_name+0xdc>
 8011eca:	5dc9      	ldrb	r1, [r1, r7]
 8011ecc:	0749      	lsls	r1, r1, #29
 8011ece:	d5ed      	bpl.n	8011eac <rmw_validate_full_topic_name+0x84>
 8011ed0:	2206      	movs	r2, #6
 8011ed2:	602a      	str	r2, [r5, #0]
 8011ed4:	2e00      	cmp	r6, #0
 8011ed6:	d0c1      	beq.n	8011e5c <rmw_validate_full_topic_name+0x34>
 8011ed8:	6033      	str	r3, [r6, #0]
 8011eda:	e7bf      	b.n	8011e5c <rmw_validate_full_topic_name+0x34>
 8011edc:	200b      	movs	r0, #11
 8011ede:	4770      	bx	lr
 8011ee0:	200b      	movs	r0, #11
 8011ee2:	e7b5      	b.n	8011e50 <rmw_validate_full_topic_name+0x28>
 8011ee4:	2203      	movs	r2, #3
 8011ee6:	602a      	str	r2, [r5, #0]
 8011ee8:	2e00      	cmp	r6, #0
 8011eea:	d1f5      	bne.n	8011ed8 <rmw_validate_full_topic_name+0xb0>
 8011eec:	e7b6      	b.n	8011e5c <rmw_validate_full_topic_name+0x34>
 8011eee:	28f7      	cmp	r0, #247	@ 0xf7
 8011ef0:	d802      	bhi.n	8011ef8 <rmw_validate_full_topic_name+0xd0>
 8011ef2:	2000      	movs	r0, #0
 8011ef4:	6028      	str	r0, [r5, #0]
 8011ef6:	e7ab      	b.n	8011e50 <rmw_validate_full_topic_name+0x28>
 8011ef8:	2307      	movs	r3, #7
 8011efa:	602b      	str	r3, [r5, #0]
 8011efc:	2e00      	cmp	r6, #0
 8011efe:	d0ad      	beq.n	8011e5c <rmw_validate_full_topic_name+0x34>
 8011f00:	23f6      	movs	r3, #246	@ 0xf6
 8011f02:	e7e9      	b.n	8011ed8 <rmw_validate_full_topic_name+0xb0>
 8011f04:	2205      	movs	r2, #5
 8011f06:	602a      	str	r2, [r5, #0]
 8011f08:	2e00      	cmp	r6, #0
 8011f0a:	d1e5      	bne.n	8011ed8 <rmw_validate_full_topic_name+0xb0>
 8011f0c:	e7a6      	b.n	8011e5c <rmw_validate_full_topic_name+0x34>
 8011f0e:	bf00      	nop
 8011f10:	0801cd44 	.word	0x0801cd44

08011f14 <rmw_validate_namespace_with_size>:
 8011f14:	b340      	cbz	r0, 8011f68 <rmw_validate_namespace_with_size+0x54>
 8011f16:	b570      	push	{r4, r5, r6, lr}
 8011f18:	4614      	mov	r4, r2
 8011f1a:	b0c2      	sub	sp, #264	@ 0x108
 8011f1c:	b332      	cbz	r2, 8011f6c <rmw_validate_namespace_with_size+0x58>
 8011f1e:	2901      	cmp	r1, #1
 8011f20:	460d      	mov	r5, r1
 8011f22:	461e      	mov	r6, r3
 8011f24:	d102      	bne.n	8011f2c <rmw_validate_namespace_with_size+0x18>
 8011f26:	7803      	ldrb	r3, [r0, #0]
 8011f28:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f2a:	d012      	beq.n	8011f52 <rmw_validate_namespace_with_size+0x3e>
 8011f2c:	aa01      	add	r2, sp, #4
 8011f2e:	4669      	mov	r1, sp
 8011f30:	f7ff ff7a 	bl	8011e28 <rmw_validate_full_topic_name>
 8011f34:	b978      	cbnz	r0, 8011f56 <rmw_validate_namespace_with_size+0x42>
 8011f36:	9b00      	ldr	r3, [sp, #0]
 8011f38:	b14b      	cbz	r3, 8011f4e <rmw_validate_namespace_with_size+0x3a>
 8011f3a:	2b07      	cmp	r3, #7
 8011f3c:	d007      	beq.n	8011f4e <rmw_validate_namespace_with_size+0x3a>
 8011f3e:	1e5a      	subs	r2, r3, #1
 8011f40:	2a05      	cmp	r2, #5
 8011f42:	d82b      	bhi.n	8011f9c <rmw_validate_namespace_with_size+0x88>
 8011f44:	e8df f002 	tbb	[pc, r2]
 8011f48:	1e212427 	.word	0x1e212427
 8011f4c:	141b      	.short	0x141b
 8011f4e:	2df5      	cmp	r5, #245	@ 0xf5
 8011f50:	d803      	bhi.n	8011f5a <rmw_validate_namespace_with_size+0x46>
 8011f52:	2000      	movs	r0, #0
 8011f54:	6020      	str	r0, [r4, #0]
 8011f56:	b042      	add	sp, #264	@ 0x108
 8011f58:	bd70      	pop	{r4, r5, r6, pc}
 8011f5a:	2307      	movs	r3, #7
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	2e00      	cmp	r6, #0
 8011f60:	d0f9      	beq.n	8011f56 <rmw_validate_namespace_with_size+0x42>
 8011f62:	23f4      	movs	r3, #244	@ 0xf4
 8011f64:	6033      	str	r3, [r6, #0]
 8011f66:	e7f6      	b.n	8011f56 <rmw_validate_namespace_with_size+0x42>
 8011f68:	200b      	movs	r0, #11
 8011f6a:	4770      	bx	lr
 8011f6c:	200b      	movs	r0, #11
 8011f6e:	e7f2      	b.n	8011f56 <rmw_validate_namespace_with_size+0x42>
 8011f70:	2306      	movs	r3, #6
 8011f72:	6023      	str	r3, [r4, #0]
 8011f74:	2e00      	cmp	r6, #0
 8011f76:	d0ee      	beq.n	8011f56 <rmw_validate_namespace_with_size+0x42>
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	6033      	str	r3, [r6, #0]
 8011f7c:	e7eb      	b.n	8011f56 <rmw_validate_namespace_with_size+0x42>
 8011f7e:	2305      	movs	r3, #5
 8011f80:	6023      	str	r3, [r4, #0]
 8011f82:	e7f7      	b.n	8011f74 <rmw_validate_namespace_with_size+0x60>
 8011f84:	2304      	movs	r3, #4
 8011f86:	6023      	str	r3, [r4, #0]
 8011f88:	e7f4      	b.n	8011f74 <rmw_validate_namespace_with_size+0x60>
 8011f8a:	2303      	movs	r3, #3
 8011f8c:	6023      	str	r3, [r4, #0]
 8011f8e:	e7f1      	b.n	8011f74 <rmw_validate_namespace_with_size+0x60>
 8011f90:	2302      	movs	r3, #2
 8011f92:	6023      	str	r3, [r4, #0]
 8011f94:	e7ee      	b.n	8011f74 <rmw_validate_namespace_with_size+0x60>
 8011f96:	2301      	movs	r3, #1
 8011f98:	6023      	str	r3, [r4, #0]
 8011f9a:	e7eb      	b.n	8011f74 <rmw_validate_namespace_with_size+0x60>
 8011f9c:	4a03      	ldr	r2, [pc, #12]	@ (8011fac <rmw_validate_namespace_with_size+0x98>)
 8011f9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fa2:	a802      	add	r0, sp, #8
 8011fa4:	f7fd fede 	bl	800fd64 <rcutils_snprintf>
 8011fa8:	2001      	movs	r0, #1
 8011faa:	e7d4      	b.n	8011f56 <rmw_validate_namespace_with_size+0x42>
 8011fac:	0801c25c 	.word	0x0801c25c

08011fb0 <rmw_validate_namespace>:
 8011fb0:	b168      	cbz	r0, 8011fce <rmw_validate_namespace+0x1e>
 8011fb2:	b570      	push	{r4, r5, r6, lr}
 8011fb4:	460d      	mov	r5, r1
 8011fb6:	4616      	mov	r6, r2
 8011fb8:	4604      	mov	r4, r0
 8011fba:	f7ee f969 	bl	8000290 <strlen>
 8011fbe:	4633      	mov	r3, r6
 8011fc0:	4601      	mov	r1, r0
 8011fc2:	462a      	mov	r2, r5
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fca:	f7ff bfa3 	b.w	8011f14 <rmw_validate_namespace_with_size>
 8011fce:	200b      	movs	r0, #11
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop

08011fd4 <rmw_namespace_validation_result_string>:
 8011fd4:	2807      	cmp	r0, #7
 8011fd6:	bf9a      	itte	ls
 8011fd8:	4b02      	ldrls	r3, [pc, #8]	@ (8011fe4 <rmw_namespace_validation_result_string+0x10>)
 8011fda:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011fde:	4802      	ldrhi	r0, [pc, #8]	@ (8011fe8 <rmw_namespace_validation_result_string+0x14>)
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop
 8011fe4:	0801c454 	.word	0x0801c454
 8011fe8:	0801c2ac 	.word	0x0801c2ac

08011fec <rmw_validate_node_name>:
 8011fec:	2800      	cmp	r0, #0
 8011fee:	d03b      	beq.n	8012068 <rmw_validate_node_name+0x7c>
 8011ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff4:	460d      	mov	r5, r1
 8011ff6:	2900      	cmp	r1, #0
 8011ff8:	d038      	beq.n	801206c <rmw_validate_node_name+0x80>
 8011ffa:	4616      	mov	r6, r2
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	f7ee f947 	bl	8000290 <strlen>
 8012002:	b1e0      	cbz	r0, 801203e <rmw_validate_node_name+0x52>
 8012004:	1e63      	subs	r3, r4, #1
 8012006:	eb03 0800 	add.w	r8, r3, r0
 801200a:	f1c4 0101 	rsb	r1, r4, #1
 801200e:	18cf      	adds	r7, r1, r3
 8012010:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012014:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012018:	f02e 0c20 	bic.w	ip, lr, #32
 801201c:	2a09      	cmp	r2, #9
 801201e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012022:	d914      	bls.n	801204e <rmw_validate_node_name+0x62>
 8012024:	f1bc 0f19 	cmp.w	ip, #25
 8012028:	d911      	bls.n	801204e <rmw_validate_node_name+0x62>
 801202a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801202e:	d00e      	beq.n	801204e <rmw_validate_node_name+0x62>
 8012030:	2302      	movs	r3, #2
 8012032:	602b      	str	r3, [r5, #0]
 8012034:	b106      	cbz	r6, 8012038 <rmw_validate_node_name+0x4c>
 8012036:	6037      	str	r7, [r6, #0]
 8012038:	2000      	movs	r0, #0
 801203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801203e:	2301      	movs	r3, #1
 8012040:	602b      	str	r3, [r5, #0]
 8012042:	2e00      	cmp	r6, #0
 8012044:	d0f8      	beq.n	8012038 <rmw_validate_node_name+0x4c>
 8012046:	2000      	movs	r0, #0
 8012048:	6030      	str	r0, [r6, #0]
 801204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204e:	4543      	cmp	r3, r8
 8012050:	d1dd      	bne.n	801200e <rmw_validate_node_name+0x22>
 8012052:	7822      	ldrb	r2, [r4, #0]
 8012054:	4b0d      	ldr	r3, [pc, #52]	@ (801208c <rmw_validate_node_name+0xa0>)
 8012056:	5cd3      	ldrb	r3, [r2, r3]
 8012058:	f013 0304 	ands.w	r3, r3, #4
 801205c:	d110      	bne.n	8012080 <rmw_validate_node_name+0x94>
 801205e:	28ff      	cmp	r0, #255	@ 0xff
 8012060:	d806      	bhi.n	8012070 <rmw_validate_node_name+0x84>
 8012062:	602b      	str	r3, [r5, #0]
 8012064:	4618      	mov	r0, r3
 8012066:	e7e8      	b.n	801203a <rmw_validate_node_name+0x4e>
 8012068:	200b      	movs	r0, #11
 801206a:	4770      	bx	lr
 801206c:	200b      	movs	r0, #11
 801206e:	e7e4      	b.n	801203a <rmw_validate_node_name+0x4e>
 8012070:	2204      	movs	r2, #4
 8012072:	602a      	str	r2, [r5, #0]
 8012074:	2e00      	cmp	r6, #0
 8012076:	d0df      	beq.n	8012038 <rmw_validate_node_name+0x4c>
 8012078:	22fe      	movs	r2, #254	@ 0xfe
 801207a:	6032      	str	r2, [r6, #0]
 801207c:	4618      	mov	r0, r3
 801207e:	e7dc      	b.n	801203a <rmw_validate_node_name+0x4e>
 8012080:	2303      	movs	r3, #3
 8012082:	602b      	str	r3, [r5, #0]
 8012084:	2e00      	cmp	r6, #0
 8012086:	d1de      	bne.n	8012046 <rmw_validate_node_name+0x5a>
 8012088:	e7d6      	b.n	8012038 <rmw_validate_node_name+0x4c>
 801208a:	bf00      	nop
 801208c:	0801cd44 	.word	0x0801cd44

08012090 <rmw_node_name_validation_result_string>:
 8012090:	2804      	cmp	r0, #4
 8012092:	bf9a      	itte	ls
 8012094:	4b02      	ldrls	r3, [pc, #8]	@ (80120a0 <rmw_node_name_validation_result_string+0x10>)
 8012096:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801209a:	4802      	ldrhi	r0, [pc, #8]	@ (80120a4 <rmw_node_name_validation_result_string+0x14>)
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	0801c560 	.word	0x0801c560
 80120a4:	0801c474 	.word	0x0801c474

080120a8 <get_message_typesupport_handle>:
 80120a8:	6883      	ldr	r3, [r0, #8]
 80120aa:	4718      	bx	r3

080120ac <get_message_typesupport_handle_function>:
 80120ac:	b510      	push	{r4, lr}
 80120ae:	4604      	mov	r4, r0
 80120b0:	6800      	ldr	r0, [r0, #0]
 80120b2:	f7ee f88d 	bl	80001d0 <strcmp>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	bf0c      	ite	eq
 80120ba:	4620      	moveq	r0, r4
 80120bc:	2000      	movne	r0, #0
 80120be:	bd10      	pop	{r4, pc}

080120c0 <rosidl_runtime_c__String__init>:
 80120c0:	b510      	push	{r4, lr}
 80120c2:	4604      	mov	r4, r0
 80120c4:	b086      	sub	sp, #24
 80120c6:	b170      	cbz	r0, 80120e6 <rosidl_runtime_c__String__init+0x26>
 80120c8:	a801      	add	r0, sp, #4
 80120ca:	f7fd fc41 	bl	800f950 <rcutils_get_default_allocator>
 80120ce:	9b01      	ldr	r3, [sp, #4]
 80120d0:	9905      	ldr	r1, [sp, #20]
 80120d2:	2001      	movs	r0, #1
 80120d4:	4798      	blx	r3
 80120d6:	6020      	str	r0, [r4, #0]
 80120d8:	b128      	cbz	r0, 80120e6 <rosidl_runtime_c__String__init+0x26>
 80120da:	2100      	movs	r1, #0
 80120dc:	2201      	movs	r2, #1
 80120de:	7001      	strb	r1, [r0, #0]
 80120e0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80120e4:	4610      	mov	r0, r2
 80120e6:	b006      	add	sp, #24
 80120e8:	bd10      	pop	{r4, pc}
 80120ea:	bf00      	nop

080120ec <rosidl_runtime_c__String__fini>:
 80120ec:	b320      	cbz	r0, 8012138 <rosidl_runtime_c__String__fini+0x4c>
 80120ee:	b510      	push	{r4, lr}
 80120f0:	6803      	ldr	r3, [r0, #0]
 80120f2:	b086      	sub	sp, #24
 80120f4:	4604      	mov	r4, r0
 80120f6:	b173      	cbz	r3, 8012116 <rosidl_runtime_c__String__fini+0x2a>
 80120f8:	6883      	ldr	r3, [r0, #8]
 80120fa:	b1f3      	cbz	r3, 801213a <rosidl_runtime_c__String__fini+0x4e>
 80120fc:	a801      	add	r0, sp, #4
 80120fe:	f7fd fc27 	bl	800f950 <rcutils_get_default_allocator>
 8012102:	9b02      	ldr	r3, [sp, #8]
 8012104:	9905      	ldr	r1, [sp, #20]
 8012106:	6820      	ldr	r0, [r4, #0]
 8012108:	4798      	blx	r3
 801210a:	2300      	movs	r3, #0
 801210c:	e9c4 3300 	strd	r3, r3, [r4]
 8012110:	60a3      	str	r3, [r4, #8]
 8012112:	b006      	add	sp, #24
 8012114:	bd10      	pop	{r4, pc}
 8012116:	6843      	ldr	r3, [r0, #4]
 8012118:	b9db      	cbnz	r3, 8012152 <rosidl_runtime_c__String__fini+0x66>
 801211a:	6883      	ldr	r3, [r0, #8]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d0f8      	beq.n	8012112 <rosidl_runtime_c__String__fini+0x26>
 8012120:	4b12      	ldr	r3, [pc, #72]	@ (801216c <rosidl_runtime_c__String__fini+0x80>)
 8012122:	4813      	ldr	r0, [pc, #76]	@ (8012170 <rosidl_runtime_c__String__fini+0x84>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2251      	movs	r2, #81	@ 0x51
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	2101      	movs	r1, #1
 801212c:	f007 f948 	bl	80193c0 <fwrite>
 8012130:	f04f 30ff 	mov.w	r0, #4294967295
 8012134:	f006 f99a 	bl	801846c <exit>
 8012138:	4770      	bx	lr
 801213a:	4b0c      	ldr	r3, [pc, #48]	@ (801216c <rosidl_runtime_c__String__fini+0x80>)
 801213c:	480d      	ldr	r0, [pc, #52]	@ (8012174 <rosidl_runtime_c__String__fini+0x88>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	224c      	movs	r2, #76	@ 0x4c
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	2101      	movs	r1, #1
 8012146:	f007 f93b 	bl	80193c0 <fwrite>
 801214a:	f04f 30ff 	mov.w	r0, #4294967295
 801214e:	f006 f98d 	bl	801846c <exit>
 8012152:	4b06      	ldr	r3, [pc, #24]	@ (801216c <rosidl_runtime_c__String__fini+0x80>)
 8012154:	4808      	ldr	r0, [pc, #32]	@ (8012178 <rosidl_runtime_c__String__fini+0x8c>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	224e      	movs	r2, #78	@ 0x4e
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	2101      	movs	r1, #1
 801215e:	f007 f92f 	bl	80193c0 <fwrite>
 8012162:	f04f 30ff 	mov.w	r0, #4294967295
 8012166:	f006 f981 	bl	801846c <exit>
 801216a:	bf00      	nop
 801216c:	20000a6c 	.word	0x20000a6c
 8012170:	0801c614 	.word	0x0801c614
 8012174:	0801c574 	.word	0x0801c574
 8012178:	0801c5c4 	.word	0x0801c5c4

0801217c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012180:	6805      	ldr	r5, [r0, #0]
 8012182:	4604      	mov	r4, r0
 8012184:	4628      	mov	r0, r5
 8012186:	460e      	mov	r6, r1
 8012188:	f7ee f822 	bl	80001d0 <strcmp>
 801218c:	b1c8      	cbz	r0, 80121c2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801218e:	4b11      	ldr	r3, [pc, #68]	@ (80121d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	429d      	cmp	r5, r3
 8012194:	d112      	bne.n	80121bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012196:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801219a:	f8d8 4000 	ldr.w	r4, [r8]
 801219e:	b16c      	cbz	r4, 80121bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80121a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80121a4:	2700      	movs	r7, #0
 80121a6:	3d04      	subs	r5, #4
 80121a8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80121ac:	4631      	mov	r1, r6
 80121ae:	f7ee f80f 	bl	80001d0 <strcmp>
 80121b2:	00bb      	lsls	r3, r7, #2
 80121b4:	b140      	cbz	r0, 80121c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80121b6:	3701      	adds	r7, #1
 80121b8:	42bc      	cmp	r4, r7
 80121ba:	d1f5      	bne.n	80121a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80121bc:	2000      	movs	r0, #0
 80121be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c2:	4620      	mov	r0, r4
 80121c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80121cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121d0:	58d3      	ldr	r3, [r2, r3]
 80121d2:	4718      	bx	r3
 80121d4:	200009b0 	.word	0x200009b0

080121d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80121d8:	4b04      	ldr	r3, [pc, #16]	@ (80121ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	b10a      	cbz	r2, 80121e2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80121de:	4803      	ldr	r0, [pc, #12]	@ (80121ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80121e0:	4770      	bx	lr
 80121e2:	4a03      	ldr	r2, [pc, #12]	@ (80121f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80121e4:	4801      	ldr	r0, [pc, #4]	@ (80121ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80121e6:	6812      	ldr	r2, [r2, #0]
 80121e8:	601a      	str	r2, [r3, #0]
 80121ea:	4770      	bx	lr
 80121ec:	200009c0 	.word	0x200009c0
 80121f0:	200009b0 	.word	0x200009b0

080121f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80121f4:	4a02      	ldr	r2, [pc, #8]	@ (8012200 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 80121f6:	4b03      	ldr	r3, [pc, #12]	@ (8012204 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 80121f8:	6812      	ldr	r2, [r2, #0]
 80121fa:	601a      	str	r2, [r3, #0]
 80121fc:	4770      	bx	lr
 80121fe:	bf00      	nop
 8012200:	200009b0 	.word	0x200009b0
 8012204:	200009c0 	.word	0x200009c0

08012208 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012208:	4b04      	ldr	r3, [pc, #16]	@ (801221c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	b10a      	cbz	r2, 8012212 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801220e:	4803      	ldr	r0, [pc, #12]	@ (801221c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012210:	4770      	bx	lr
 8012212:	4a03      	ldr	r2, [pc, #12]	@ (8012220 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8012214:	4801      	ldr	r0, [pc, #4]	@ (801221c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012216:	6812      	ldr	r2, [r2, #0]
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	4770      	bx	lr
 801221c:	200009e0 	.word	0x200009e0
 8012220:	200009b0 	.word	0x200009b0

08012224 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012224:	4a02      	ldr	r2, [pc, #8]	@ (8012230 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8012226:	4b03      	ldr	r3, [pc, #12]	@ (8012234 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8012228:	6812      	ldr	r2, [r2, #0]
 801222a:	601a      	str	r2, [r3, #0]
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	200009b0 	.word	0x200009b0
 8012234:	200009e0 	.word	0x200009e0

08012238 <_Int32__max_serialized_size>:
 8012238:	b508      	push	{r3, lr}
 801223a:	2104      	movs	r1, #4
 801223c:	2000      	movs	r0, #0
 801223e:	f7fa f975 	bl	800c52c <ucdr_alignment>
 8012242:	3004      	adds	r0, #4
 8012244:	bd08      	pop	{r3, pc}
 8012246:	bf00      	nop

08012248 <_Int32__cdr_deserialize>:
 8012248:	b109      	cbz	r1, 801224e <_Int32__cdr_deserialize+0x6>
 801224a:	f7f9 bef1 	b.w	800c030 <ucdr_deserialize_int32_t>
 801224e:	4608      	mov	r0, r1
 8012250:	4770      	bx	lr
 8012252:	bf00      	nop

08012254 <get_serialized_size_std_msgs__msg__Int32>:
 8012254:	b138      	cbz	r0, 8012266 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8012256:	b508      	push	{r3, lr}
 8012258:	460b      	mov	r3, r1
 801225a:	4618      	mov	r0, r3
 801225c:	2104      	movs	r1, #4
 801225e:	f7fa f965 	bl	800c52c <ucdr_alignment>
 8012262:	3004      	adds	r0, #4
 8012264:	bd08      	pop	{r3, pc}
 8012266:	4770      	bx	lr

08012268 <_Int32__cdr_serialize>:
 8012268:	460a      	mov	r2, r1
 801226a:	b118      	cbz	r0, 8012274 <_Int32__cdr_serialize+0xc>
 801226c:	6801      	ldr	r1, [r0, #0]
 801226e:	4610      	mov	r0, r2
 8012270:	f7f9 be46 	b.w	800bf00 <ucdr_serialize_int32_t>
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop

08012278 <_Int32__get_serialized_size>:
 8012278:	b130      	cbz	r0, 8012288 <_Int32__get_serialized_size+0x10>
 801227a:	b508      	push	{r3, lr}
 801227c:	2104      	movs	r1, #4
 801227e:	2000      	movs	r0, #0
 8012280:	f7fa f954 	bl	800c52c <ucdr_alignment>
 8012284:	3004      	adds	r0, #4
 8012286:	bd08      	pop	{r3, pc}
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop

0801228c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801228c:	4800      	ldr	r0, [pc, #0]	@ (8012290 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801228e:	4770      	bx	lr
 8012290:	200009f8 	.word	0x200009f8

08012294 <_String__max_serialized_size>:
 8012294:	2000      	movs	r0, #0
 8012296:	4770      	bx	lr

08012298 <_String__cdr_serialize>:
 8012298:	b1c0      	cbz	r0, 80122cc <_String__cdr_serialize+0x34>
 801229a:	b570      	push	{r4, r5, r6, lr}
 801229c:	6806      	ldr	r6, [r0, #0]
 801229e:	460d      	mov	r5, r1
 80122a0:	4604      	mov	r4, r0
 80122a2:	b156      	cbz	r6, 80122ba <_String__cdr_serialize+0x22>
 80122a4:	4630      	mov	r0, r6
 80122a6:	f7ed fff3 	bl	8000290 <strlen>
 80122aa:	4631      	mov	r1, r6
 80122ac:	6060      	str	r0, [r4, #4]
 80122ae:	1c42      	adds	r2, r0, #1
 80122b0:	4628      	mov	r0, r5
 80122b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122b6:	f000 b853 	b.w	8012360 <ucdr_serialize_sequence_char>
 80122ba:	4630      	mov	r0, r6
 80122bc:	6060      	str	r0, [r4, #4]
 80122be:	4632      	mov	r2, r6
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122c8:	f000 b84a 	b.w	8012360 <ucdr_serialize_sequence_char>
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop

080122d0 <get_serialized_size_std_msgs__msg__String>:
 80122d0:	b510      	push	{r4, lr}
 80122d2:	4604      	mov	r4, r0
 80122d4:	b138      	cbz	r0, 80122e6 <get_serialized_size_std_msgs__msg__String+0x16>
 80122d6:	460b      	mov	r3, r1
 80122d8:	4618      	mov	r0, r3
 80122da:	2104      	movs	r1, #4
 80122dc:	f7fa f926 	bl	800c52c <ucdr_alignment>
 80122e0:	6863      	ldr	r3, [r4, #4]
 80122e2:	3305      	adds	r3, #5
 80122e4:	4418      	add	r0, r3
 80122e6:	bd10      	pop	{r4, pc}

080122e8 <_String__cdr_deserialize>:
 80122e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ea:	460c      	mov	r4, r1
 80122ec:	b083      	sub	sp, #12
 80122ee:	b1a1      	cbz	r1, 801231a <_String__cdr_deserialize+0x32>
 80122f0:	688f      	ldr	r7, [r1, #8]
 80122f2:	6809      	ldr	r1, [r1, #0]
 80122f4:	ab01      	add	r3, sp, #4
 80122f6:	463a      	mov	r2, r7
 80122f8:	4606      	mov	r6, r0
 80122fa:	f000 f843 	bl	8012384 <ucdr_deserialize_sequence_char>
 80122fe:	9b01      	ldr	r3, [sp, #4]
 8012300:	4605      	mov	r5, r0
 8012302:	b920      	cbnz	r0, 801230e <_String__cdr_deserialize+0x26>
 8012304:	429f      	cmp	r7, r3
 8012306:	d30c      	bcc.n	8012322 <_String__cdr_deserialize+0x3a>
 8012308:	4628      	mov	r0, r5
 801230a:	b003      	add	sp, #12
 801230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801230e:	b103      	cbz	r3, 8012312 <_String__cdr_deserialize+0x2a>
 8012310:	3b01      	subs	r3, #1
 8012312:	4628      	mov	r0, r5
 8012314:	6063      	str	r3, [r4, #4]
 8012316:	b003      	add	sp, #12
 8012318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801231a:	460d      	mov	r5, r1
 801231c:	4628      	mov	r0, r5
 801231e:	b003      	add	sp, #12
 8012320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012322:	2101      	movs	r1, #1
 8012324:	75b0      	strb	r0, [r6, #22]
 8012326:	7571      	strb	r1, [r6, #21]
 8012328:	4630      	mov	r0, r6
 801232a:	6065      	str	r5, [r4, #4]
 801232c:	f7fa f914 	bl	800c558 <ucdr_align_to>
 8012330:	4630      	mov	r0, r6
 8012332:	9901      	ldr	r1, [sp, #4]
 8012334:	f7fa f946 	bl	800c5c4 <ucdr_advance_buffer>
 8012338:	4628      	mov	r0, r5
 801233a:	b003      	add	sp, #12
 801233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801233e:	bf00      	nop

08012340 <_String__get_serialized_size>:
 8012340:	b510      	push	{r4, lr}
 8012342:	4604      	mov	r4, r0
 8012344:	b130      	cbz	r0, 8012354 <_String__get_serialized_size+0x14>
 8012346:	2104      	movs	r1, #4
 8012348:	2000      	movs	r0, #0
 801234a:	f7fa f8ef 	bl	800c52c <ucdr_alignment>
 801234e:	6863      	ldr	r3, [r4, #4]
 8012350:	3305      	adds	r3, #5
 8012352:	4418      	add	r0, r3
 8012354:	bd10      	pop	{r4, pc}
 8012356:	bf00      	nop

08012358 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012358:	4800      	ldr	r0, [pc, #0]	@ (801235c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 801235a:	4770      	bx	lr
 801235c:	20000a2c 	.word	0x20000a2c

08012360 <ucdr_serialize_sequence_char>:
 8012360:	b570      	push	{r4, r5, r6, lr}
 8012362:	4615      	mov	r5, r2
 8012364:	460e      	mov	r6, r1
 8012366:	7d01      	ldrb	r1, [r0, #20]
 8012368:	4604      	mov	r4, r0
 801236a:	f7f9 fa47 	bl	800b7fc <ucdr_serialize_endian_uint32_t>
 801236e:	b90d      	cbnz	r5, 8012374 <ucdr_serialize_sequence_char+0x14>
 8012370:	2001      	movs	r0, #1
 8012372:	bd70      	pop	{r4, r5, r6, pc}
 8012374:	7d21      	ldrb	r1, [r4, #20]
 8012376:	462b      	mov	r3, r5
 8012378:	4632      	mov	r2, r6
 801237a:	4620      	mov	r0, r4
 801237c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012380:	f005 b98e 	b.w	80176a0 <ucdr_serialize_endian_array_char>

08012384 <ucdr_deserialize_sequence_char>:
 8012384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012388:	461d      	mov	r5, r3
 801238a:	4616      	mov	r6, r2
 801238c:	460f      	mov	r7, r1
 801238e:	461a      	mov	r2, r3
 8012390:	7d01      	ldrb	r1, [r0, #20]
 8012392:	4604      	mov	r4, r0
 8012394:	f7f9 fb5a 	bl	800ba4c <ucdr_deserialize_endian_uint32_t>
 8012398:	682b      	ldr	r3, [r5, #0]
 801239a:	429e      	cmp	r6, r3
 801239c:	bf3c      	itt	cc
 801239e:	2201      	movcc	r2, #1
 80123a0:	75a2      	strbcc	r2, [r4, #22]
 80123a2:	b913      	cbnz	r3, 80123aa <ucdr_deserialize_sequence_char+0x26>
 80123a4:	2001      	movs	r0, #1
 80123a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123aa:	7d21      	ldrb	r1, [r4, #20]
 80123ac:	463a      	mov	r2, r7
 80123ae:	4620      	mov	r0, r4
 80123b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123b4:	f005 b9a6 	b.w	8017704 <ucdr_deserialize_endian_array_char>

080123b8 <ucdr_serialize_sequence_uint8_t>:
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	4615      	mov	r5, r2
 80123bc:	460e      	mov	r6, r1
 80123be:	7d01      	ldrb	r1, [r0, #20]
 80123c0:	4604      	mov	r4, r0
 80123c2:	f7f9 fa1b 	bl	800b7fc <ucdr_serialize_endian_uint32_t>
 80123c6:	b90d      	cbnz	r5, 80123cc <ucdr_serialize_sequence_uint8_t+0x14>
 80123c8:	2001      	movs	r0, #1
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	7d21      	ldrb	r1, [r4, #20]
 80123ce:	462b      	mov	r3, r5
 80123d0:	4632      	mov	r2, r6
 80123d2:	4620      	mov	r0, r4
 80123d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123d8:	f005 b9f8 	b.w	80177cc <ucdr_serialize_endian_array_uint8_t>

080123dc <ucdr_deserialize_sequence_uint8_t>:
 80123dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e0:	461d      	mov	r5, r3
 80123e2:	4616      	mov	r6, r2
 80123e4:	460f      	mov	r7, r1
 80123e6:	461a      	mov	r2, r3
 80123e8:	7d01      	ldrb	r1, [r0, #20]
 80123ea:	4604      	mov	r4, r0
 80123ec:	f7f9 fb2e 	bl	800ba4c <ucdr_deserialize_endian_uint32_t>
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	429e      	cmp	r6, r3
 80123f4:	bf3c      	itt	cc
 80123f6:	2201      	movcc	r2, #1
 80123f8:	75a2      	strbcc	r2, [r4, #22]
 80123fa:	b913      	cbnz	r3, 8012402 <ucdr_deserialize_sequence_uint8_t+0x26>
 80123fc:	2001      	movs	r0, #1
 80123fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012402:	7d21      	ldrb	r1, [r4, #20]
 8012404:	463a      	mov	r2, r7
 8012406:	4620      	mov	r0, r4
 8012408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801240c:	f005 ba42 	b.w	8017894 <ucdr_deserialize_endian_array_uint8_t>

08012410 <uxr_buffer_delete_entity>:
 8012410:	b510      	push	{r4, lr}
 8012412:	2300      	movs	r3, #0
 8012414:	b08e      	sub	sp, #56	@ 0x38
 8012416:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801241a:	2303      	movs	r3, #3
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	2204      	movs	r2, #4
 8012420:	ab06      	add	r3, sp, #24
 8012422:	4604      	mov	r4, r0
 8012424:	9103      	str	r1, [sp, #12]
 8012426:	f001 fb45 	bl	8013ab4 <uxr_prepare_stream_to_write_submessage>
 801242a:	b918      	cbnz	r0, 8012434 <uxr_buffer_delete_entity+0x24>
 801242c:	4604      	mov	r4, r0
 801242e:	4620      	mov	r0, r4
 8012430:	b00e      	add	sp, #56	@ 0x38
 8012432:	bd10      	pop	{r4, pc}
 8012434:	9902      	ldr	r1, [sp, #8]
 8012436:	aa05      	add	r2, sp, #20
 8012438:	4620      	mov	r0, r4
 801243a:	f001 fc71 	bl	8013d20 <uxr_init_base_object_request>
 801243e:	a905      	add	r1, sp, #20
 8012440:	4604      	mov	r4, r0
 8012442:	a806      	add	r0, sp, #24
 8012444:	f003 fb54 	bl	8015af0 <uxr_serialize_DELETE_Payload>
 8012448:	4620      	mov	r0, r4
 801244a:	b00e      	add	sp, #56	@ 0x38
 801244c:	bd10      	pop	{r4, pc}
 801244e:	bf00      	nop

08012450 <uxr_common_create_entity>:
 8012450:	b510      	push	{r4, lr}
 8012452:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012456:	b08c      	sub	sp, #48	@ 0x30
 8012458:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801245c:	f1bc 0f01 	cmp.w	ip, #1
 8012460:	bf0c      	ite	eq
 8012462:	f003 0201 	andeq.w	r2, r3, #1
 8012466:	2200      	movne	r2, #0
 8012468:	330e      	adds	r3, #14
 801246a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801246e:	9101      	str	r1, [sp, #4]
 8012470:	441a      	add	r2, r3
 8012472:	2301      	movs	r3, #1
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	9903      	ldr	r1, [sp, #12]
 8012478:	ab04      	add	r3, sp, #16
 801247a:	b292      	uxth	r2, r2
 801247c:	4604      	mov	r4, r0
 801247e:	f001 fb19 	bl	8013ab4 <uxr_prepare_stream_to_write_submessage>
 8012482:	b918      	cbnz	r0, 801248c <uxr_common_create_entity+0x3c>
 8012484:	4604      	mov	r4, r0
 8012486:	4620      	mov	r0, r4
 8012488:	b00c      	add	sp, #48	@ 0x30
 801248a:	bd10      	pop	{r4, pc}
 801248c:	9902      	ldr	r1, [sp, #8]
 801248e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012490:	4620      	mov	r0, r4
 8012492:	f001 fc45 	bl	8013d20 <uxr_init_base_object_request>
 8012496:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012498:	4604      	mov	r4, r0
 801249a:	a804      	add	r0, sp, #16
 801249c:	f003 fa84 	bl	80159a8 <uxr_serialize_CREATE_Payload>
 80124a0:	4620      	mov	r0, r4
 80124a2:	b00c      	add	sp, #48	@ 0x30
 80124a4:	bd10      	pop	{r4, pc}
 80124a6:	bf00      	nop

080124a8 <uxr_buffer_create_participant_bin>:
 80124a8:	b570      	push	{r4, r5, r6, lr}
 80124aa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80124ae:	ac11      	add	r4, sp, #68	@ 0x44
 80124b0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80124b4:	2303      	movs	r3, #3
 80124b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80124ba:	7223      	strb	r3, [r4, #8]
 80124bc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80124be:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80124c2:	2201      	movs	r2, #1
 80124c4:	2100      	movs	r1, #0
 80124c6:	4605      	mov	r5, r0
 80124c8:	7122      	strb	r2, [r4, #4]
 80124ca:	f88d 1014 	strb.w	r1, [sp, #20]
 80124ce:	b1cb      	cbz	r3, 8012504 <uxr_buffer_create_participant_bin+0x5c>
 80124d0:	f88d 201c 	strb.w	r2, [sp, #28]
 80124d4:	9308      	str	r3, [sp, #32]
 80124d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124da:	a915      	add	r1, sp, #84	@ 0x54
 80124dc:	a809      	add	r0, sp, #36	@ 0x24
 80124de:	f7fa f821 	bl	800c524 <ucdr_init_buffer>
 80124e2:	a905      	add	r1, sp, #20
 80124e4:	a809      	add	r0, sp, #36	@ 0x24
 80124e6:	f002 fe41 	bl	801516c <uxr_serialize_OBJK_DomainParticipant_Binary>
 80124ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80124ec:	9600      	str	r6, [sp, #0]
 80124ee:	9401      	str	r4, [sp, #4]
 80124f0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80124f4:	60e3      	str	r3, [r4, #12]
 80124f6:	4628      	mov	r0, r5
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	f7ff ffa9 	bl	8012450 <uxr_common_create_entity>
 80124fe:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012502:	bd70      	pop	{r4, r5, r6, pc}
 8012504:	f88d 301c 	strb.w	r3, [sp, #28]
 8012508:	e7e5      	b.n	80124d6 <uxr_buffer_create_participant_bin+0x2e>
 801250a:	bf00      	nop

0801250c <uxr_buffer_create_topic_bin>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012512:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012516:	9105      	str	r1, [sp, #20]
 8012518:	4605      	mov	r5, r0
 801251a:	a997      	add	r1, sp, #604	@ 0x25c
 801251c:	4618      	mov	r0, r3
 801251e:	2302      	movs	r3, #2
 8012520:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012524:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012528:	f000 fa58 	bl	80129dc <uxr_object_id_to_raw>
 801252c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801252e:	9306      	str	r3, [sp, #24]
 8012530:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012532:	930a      	str	r3, [sp, #40]	@ 0x28
 8012534:	2303      	movs	r3, #3
 8012536:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801253a:	2301      	movs	r3, #1
 801253c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012540:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012544:	a917      	add	r1, sp, #92	@ 0x5c
 8012546:	2300      	movs	r3, #0
 8012548:	a80b      	add	r0, sp, #44	@ 0x2c
 801254a:	f88d 301c 	strb.w	r3, [sp, #28]
 801254e:	f7f9 ffe9 	bl	800c524 <ucdr_init_buffer>
 8012552:	a906      	add	r1, sp, #24
 8012554:	a80b      	add	r0, sp, #44	@ 0x2c
 8012556:	f002 fe2b 	bl	80151b0 <uxr_serialize_OBJK_Topic_Binary>
 801255a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801255c:	9316      	str	r3, [sp, #88]	@ 0x58
 801255e:	ac13      	add	r4, sp, #76	@ 0x4c
 8012560:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012564:	9600      	str	r6, [sp, #0]
 8012566:	9401      	str	r4, [sp, #4]
 8012568:	b29b      	uxth	r3, r3
 801256a:	4628      	mov	r0, r5
 801256c:	f7ff ff70 	bl	8012450 <uxr_common_create_entity>
 8012570:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012574:	bd70      	pop	{r4, r5, r6, pc}
 8012576:	bf00      	nop

08012578 <uxr_buffer_create_publisher_bin>:
 8012578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801257a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801257e:	4605      	mov	r5, r0
 8012580:	9105      	str	r1, [sp, #20]
 8012582:	4618      	mov	r0, r3
 8012584:	2603      	movs	r6, #3
 8012586:	a992      	add	r1, sp, #584	@ 0x248
 8012588:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801258c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012590:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012594:	f000 fa22 	bl	80129dc <uxr_object_id_to_raw>
 8012598:	2300      	movs	r3, #0
 801259a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801259e:	a912      	add	r1, sp, #72	@ 0x48
 80125a0:	a806      	add	r0, sp, #24
 80125a2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80125a6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80125aa:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80125ae:	f7f9 ffb9 	bl	800c524 <ucdr_init_buffer>
 80125b2:	a993      	add	r1, sp, #588	@ 0x24c
 80125b4:	a806      	add	r0, sp, #24
 80125b6:	f002 feaf 	bl	8015318 <uxr_serialize_OBJK_Publisher_Binary>
 80125ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80125be:	ac0e      	add	r4, sp, #56	@ 0x38
 80125c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80125c4:	9700      	str	r7, [sp, #0]
 80125c6:	9401      	str	r4, [sp, #4]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4628      	mov	r0, r5
 80125cc:	f7ff ff40 	bl	8012450 <uxr_common_create_entity>
 80125d0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80125d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125d6:	bf00      	nop

080125d8 <uxr_buffer_create_subscriber_bin>:
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80125de:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80125e2:	9105      	str	r1, [sp, #20]
 80125e4:	4605      	mov	r5, r0
 80125e6:	a992      	add	r1, sp, #584	@ 0x248
 80125e8:	4618      	mov	r0, r3
 80125ea:	2304      	movs	r3, #4
 80125ec:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80125f0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80125f4:	f000 f9f2 	bl	80129dc <uxr_object_id_to_raw>
 80125f8:	2300      	movs	r3, #0
 80125fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125fe:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012602:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012606:	a912      	add	r1, sp, #72	@ 0x48
 8012608:	2303      	movs	r3, #3
 801260a:	a806      	add	r0, sp, #24
 801260c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012610:	f7f9 ff88 	bl	800c524 <ucdr_init_buffer>
 8012614:	a993      	add	r1, sp, #588	@ 0x24c
 8012616:	a806      	add	r0, sp, #24
 8012618:	f002 ff2e 	bl	8015478 <uxr_serialize_OBJK_Subscriber_Binary>
 801261c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801261e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012620:	ac0e      	add	r4, sp, #56	@ 0x38
 8012622:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012626:	9600      	str	r6, [sp, #0]
 8012628:	9401      	str	r4, [sp, #4]
 801262a:	b29b      	uxth	r3, r3
 801262c:	4628      	mov	r0, r5
 801262e:	f7ff ff0f 	bl	8012450 <uxr_common_create_entity>
 8012632:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8012636:	bd70      	pop	{r4, r5, r6, pc}

08012638 <uxr_buffer_create_datawriter_bin>:
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012640:	ac1d      	add	r4, sp, #116	@ 0x74
 8012642:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012646:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801264a:	9105      	str	r1, [sp, #20]
 801264c:	4606      	mov	r6, r0
 801264e:	a9a1      	add	r1, sp, #644	@ 0x284
 8012650:	4618      	mov	r0, r3
 8012652:	2305      	movs	r3, #5
 8012654:	7123      	strb	r3, [r4, #4]
 8012656:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801265a:	2703      	movs	r7, #3
 801265c:	f000 f9be 	bl	80129dc <uxr_object_id_to_raw>
 8012660:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012662:	7227      	strb	r7, [r4, #8]
 8012664:	a90e      	add	r1, sp, #56	@ 0x38
 8012666:	f000 f9b9 	bl	80129dc <uxr_object_id_to_raw>
 801266a:	2300      	movs	r3, #0
 801266c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012670:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012674:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012678:	3d00      	subs	r5, #0
 801267a:	bf18      	it	ne
 801267c:	2501      	movne	r5, #1
 801267e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012682:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012686:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801268a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801268e:	2301      	movs	r3, #1
 8012690:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012694:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012698:	bb8a      	cbnz	r2, 80126fe <uxr_buffer_create_datawriter_bin+0xc6>
 801269a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801269e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80126a2:	f04f 0c13 	mov.w	ip, #19
 80126a6:	250b      	movs	r5, #11
 80126a8:	2221      	movs	r2, #33	@ 0x21
 80126aa:	2111      	movs	r1, #17
 80126ac:	2009      	movs	r0, #9
 80126ae:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80126b2:	b923      	cbnz	r3, 80126be <uxr_buffer_create_datawriter_bin+0x86>
 80126b4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80126b8:	4672      	mov	r2, lr
 80126ba:	4661      	mov	r1, ip
 80126bc:	4628      	mov	r0, r5
 80126be:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d025      	beq.n	8012712 <uxr_buffer_create_datawriter_bin+0xda>
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	d029      	beq.n	801271e <uxr_buffer_create_datawriter_bin+0xe6>
 80126ca:	b32b      	cbz	r3, 8012718 <uxr_buffer_create_datawriter_bin+0xe0>
 80126cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126d0:	a921      	add	r1, sp, #132	@ 0x84
 80126d2:	a806      	add	r0, sp, #24
 80126d4:	f7f9 ff26 	bl	800c524 <ucdr_init_buffer>
 80126d8:	a90e      	add	r1, sp, #56	@ 0x38
 80126da:	a806      	add	r0, sp, #24
 80126dc:	f002 ff7e 	bl	80155dc <uxr_serialize_OBJK_DataWriter_Binary>
 80126e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126e2:	f8cd 8000 	str.w	r8, [sp]
 80126e6:	9401      	str	r4, [sp, #4]
 80126e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80126ec:	60e3      	str	r3, [r4, #12]
 80126ee:	4630      	mov	r0, r6
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	f7ff fead 	bl	8012450 <uxr_common_create_entity>
 80126f6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80126fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126fe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012702:	f04f 0c12 	mov.w	ip, #18
 8012706:	250a      	movs	r5, #10
 8012708:	2220      	movs	r2, #32
 801270a:	2110      	movs	r1, #16
 801270c:	2008      	movs	r0, #8
 801270e:	2702      	movs	r7, #2
 8012710:	e7cd      	b.n	80126ae <uxr_buffer_create_datawriter_bin+0x76>
 8012712:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012716:	e7d9      	b.n	80126cc <uxr_buffer_create_datawriter_bin+0x94>
 8012718:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801271c:	e7d6      	b.n	80126cc <uxr_buffer_create_datawriter_bin+0x94>
 801271e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012722:	e7d3      	b.n	80126cc <uxr_buffer_create_datawriter_bin+0x94>

08012724 <uxr_buffer_create_datareader_bin>:
 8012724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012728:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801272c:	ac1f      	add	r4, sp, #124	@ 0x7c
 801272e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012732:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8012736:	9105      	str	r1, [sp, #20]
 8012738:	4606      	mov	r6, r0
 801273a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801273c:	4618      	mov	r0, r3
 801273e:	2306      	movs	r3, #6
 8012740:	7123      	strb	r3, [r4, #4]
 8012742:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012746:	2703      	movs	r7, #3
 8012748:	f000 f948 	bl	80129dc <uxr_object_id_to_raw>
 801274c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801274e:	7227      	strb	r7, [r4, #8]
 8012750:	a90e      	add	r1, sp, #56	@ 0x38
 8012752:	f000 f943 	bl	80129dc <uxr_object_id_to_raw>
 8012756:	2300      	movs	r3, #0
 8012758:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801275c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8012760:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8012764:	3d00      	subs	r5, #0
 8012766:	bf18      	it	ne
 8012768:	2501      	movne	r5, #1
 801276a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801276e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012772:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012776:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801277a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801277e:	2301      	movs	r3, #1
 8012780:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012784:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012788:	bb8a      	cbnz	r2, 80127ee <uxr_buffer_create_datareader_bin+0xca>
 801278a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801278e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012792:	f04f 0c13 	mov.w	ip, #19
 8012796:	250b      	movs	r5, #11
 8012798:	2221      	movs	r2, #33	@ 0x21
 801279a:	2111      	movs	r1, #17
 801279c:	2009      	movs	r0, #9
 801279e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80127a2:	b923      	cbnz	r3, 80127ae <uxr_buffer_create_datareader_bin+0x8a>
 80127a4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80127a8:	4672      	mov	r2, lr
 80127aa:	4661      	mov	r1, ip
 80127ac:	4628      	mov	r0, r5
 80127ae:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	d025      	beq.n	8012802 <uxr_buffer_create_datareader_bin+0xde>
 80127b6:	2b03      	cmp	r3, #3
 80127b8:	d029      	beq.n	801280e <uxr_buffer_create_datareader_bin+0xea>
 80127ba:	b32b      	cbz	r3, 8012808 <uxr_buffer_create_datareader_bin+0xe4>
 80127bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127c0:	a923      	add	r1, sp, #140	@ 0x8c
 80127c2:	a806      	add	r0, sp, #24
 80127c4:	f7f9 feae 	bl	800c524 <ucdr_init_buffer>
 80127c8:	a90e      	add	r1, sp, #56	@ 0x38
 80127ca:	a806      	add	r0, sp, #24
 80127cc:	f002 feca 	bl	8015564 <uxr_serialize_OBJK_DataReader_Binary>
 80127d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127d2:	f8cd 8000 	str.w	r8, [sp]
 80127d6:	9401      	str	r4, [sp, #4]
 80127d8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80127dc:	60e3      	str	r3, [r4, #12]
 80127de:	4630      	mov	r0, r6
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	f7ff fe35 	bl	8012450 <uxr_common_create_entity>
 80127e6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80127ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80127f2:	f04f 0c12 	mov.w	ip, #18
 80127f6:	250a      	movs	r5, #10
 80127f8:	2220      	movs	r2, #32
 80127fa:	2110      	movs	r1, #16
 80127fc:	2008      	movs	r0, #8
 80127fe:	2702      	movs	r7, #2
 8012800:	e7cd      	b.n	801279e <uxr_buffer_create_datareader_bin+0x7a>
 8012802:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012806:	e7d9      	b.n	80127bc <uxr_buffer_create_datareader_bin+0x98>
 8012808:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801280c:	e7d6      	b.n	80127bc <uxr_buffer_create_datareader_bin+0x98>
 801280e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012812:	e7d3      	b.n	80127bc <uxr_buffer_create_datareader_bin+0x98>

08012814 <get_custom_error>:
 8012814:	4b01      	ldr	r3, [pc, #4]	@ (801281c <get_custom_error+0x8>)
 8012816:	7818      	ldrb	r0, [r3, #0]
 8012818:	4770      	bx	lr
 801281a:	bf00      	nop
 801281c:	20014634 	.word	0x20014634

08012820 <recv_custom_msg>:
 8012820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012824:	4693      	mov	fp, r2
 8012826:	b089      	sub	sp, #36	@ 0x24
 8012828:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801282c:	9305      	str	r3, [sp, #20]
 801282e:	468a      	mov	sl, r1
 8012830:	2100      	movs	r1, #0
 8012832:	4604      	mov	r4, r0
 8012834:	f88d 101e 	strb.w	r1, [sp, #30]
 8012838:	b322      	cbz	r2, 8012884 <recv_custom_msg+0x64>
 801283a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801283e:	f10d 081f 	add.w	r8, sp, #31
 8012842:	af05      	add	r7, sp, #20
 8012844:	f10d 061e 	add.w	r6, sp, #30
 8012848:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801284c:	e002      	b.n	8012854 <recv_custom_msg+0x34>
 801284e:	9b05      	ldr	r3, [sp, #20]
 8012850:	2b00      	cmp	r3, #0
 8012852:	dd0f      	ble.n	8012874 <recv_custom_msg+0x54>
 8012854:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8012858:	4623      	mov	r3, r4
 801285a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801285e:	e9cd 5600 	strd	r5, r6, [sp]
 8012862:	4622      	mov	r2, r4
 8012864:	4648      	mov	r0, r9
 8012866:	f001 fc89 	bl	801417c <uxr_read_framed_msg>
 801286a:	2800      	cmp	r0, #0
 801286c:	d0ef      	beq.n	801284e <recv_custom_msg+0x2e>
 801286e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012872:	b1b3      	cbz	r3, 80128a2 <recv_custom_msg+0x82>
 8012874:	4b0f      	ldr	r3, [pc, #60]	@ (80128b4 <recv_custom_msg+0x94>)
 8012876:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	2000      	movs	r0, #0
 801287e:	b009      	add	sp, #36	@ 0x24
 8012880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012884:	f10d 021f 	add.w	r2, sp, #31
 8012888:	9200      	str	r2, [sp, #0]
 801288a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801288e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012892:	4601      	mov	r1, r0
 8012894:	47a8      	blx	r5
 8012896:	2800      	cmp	r0, #0
 8012898:	d0ec      	beq.n	8012874 <recv_custom_msg+0x54>
 801289a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1e8      	bne.n	8012874 <recv_custom_msg+0x54>
 80128a2:	f8cb 0000 	str.w	r0, [fp]
 80128a6:	2001      	movs	r0, #1
 80128a8:	f8ca 4000 	str.w	r4, [sl]
 80128ac:	b009      	add	sp, #36	@ 0x24
 80128ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b2:	bf00      	nop
 80128b4:	20014634 	.word	0x20014634

080128b8 <send_custom_msg>:
 80128b8:	b530      	push	{r4, r5, lr}
 80128ba:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80128be:	b087      	sub	sp, #28
 80128c0:	4615      	mov	r5, r2
 80128c2:	b974      	cbnz	r4, 80128e2 <send_custom_msg+0x2a>
 80128c4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80128c8:	f10d 0317 	add.w	r3, sp, #23
 80128cc:	47a0      	blx	r4
 80128ce:	b108      	cbz	r0, 80128d4 <send_custom_msg+0x1c>
 80128d0:	42a8      	cmp	r0, r5
 80128d2:	d015      	beq.n	8012900 <send_custom_msg+0x48>
 80128d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012908 <send_custom_msg+0x50>)
 80128d6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80128da:	701a      	strb	r2, [r3, #0]
 80128dc:	2000      	movs	r0, #0
 80128de:	b007      	add	sp, #28
 80128e0:	bd30      	pop	{r4, r5, pc}
 80128e2:	460b      	mov	r3, r1
 80128e4:	2200      	movs	r2, #0
 80128e6:	f10d 0117 	add.w	r1, sp, #23
 80128ea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80128ee:	4602      	mov	r2, r0
 80128f0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80128f4:	9500      	str	r5, [sp, #0]
 80128f6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80128fa:	f001 fa47 	bl	8013d8c <uxr_write_framed_msg>
 80128fe:	e7e6      	b.n	80128ce <send_custom_msg+0x16>
 8012900:	2001      	movs	r0, #1
 8012902:	b007      	add	sp, #28
 8012904:	bd30      	pop	{r4, r5, pc}
 8012906:	bf00      	nop
 8012908:	20014634 	.word	0x20014634

0801290c <uxr_set_custom_transport_callbacks>:
 801290c:	b410      	push	{r4}
 801290e:	9c01      	ldr	r4, [sp, #4]
 8012910:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8012914:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8012918:	9b02      	ldr	r3, [sp, #8]
 801291a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801291e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012922:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8012926:	4770      	bx	lr

08012928 <uxr_init_custom_transport>:
 8012928:	b538      	push	{r3, r4, r5, lr}
 801292a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801292e:	b303      	cbz	r3, 8012972 <uxr_init_custom_transport+0x4a>
 8012930:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8012934:	4604      	mov	r4, r0
 8012936:	b1e2      	cbz	r2, 8012972 <uxr_init_custom_transport+0x4a>
 8012938:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801293c:	b1ca      	cbz	r2, 8012972 <uxr_init_custom_transport+0x4a>
 801293e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8012942:	b1b2      	cbz	r2, 8012972 <uxr_init_custom_transport+0x4a>
 8012944:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012948:	4798      	blx	r3
 801294a:	4605      	mov	r5, r0
 801294c:	b188      	cbz	r0, 8012972 <uxr_init_custom_transport+0x4a>
 801294e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8012952:	b98b      	cbnz	r3, 8012978 <uxr_init_custom_transport+0x50>
 8012954:	490b      	ldr	r1, [pc, #44]	@ (8012984 <uxr_init_custom_transport+0x5c>)
 8012956:	4b0c      	ldr	r3, [pc, #48]	@ (8012988 <uxr_init_custom_transport+0x60>)
 8012958:	4a0c      	ldr	r2, [pc, #48]	@ (801298c <uxr_init_custom_transport+0x64>)
 801295a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801295e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012962:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012966:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801296a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801296e:	4628      	mov	r0, r5
 8012970:	bd38      	pop	{r3, r4, r5, pc}
 8012972:	2500      	movs	r5, #0
 8012974:	4628      	mov	r0, r5
 8012976:	bd38      	pop	{r3, r4, r5, pc}
 8012978:	2100      	movs	r1, #0
 801297a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801297e:	f001 f9ff 	bl	8013d80 <uxr_init_framing_io>
 8012982:	e7e7      	b.n	8012954 <uxr_init_custom_transport+0x2c>
 8012984:	080128b9 	.word	0x080128b9
 8012988:	08012821 	.word	0x08012821
 801298c:	08012815 	.word	0x08012815

08012990 <uxr_close_custom_transport>:
 8012990:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8012994:	4718      	bx	r3
 8012996:	bf00      	nop

08012998 <uxr_object_id>:
 8012998:	b082      	sub	sp, #8
 801299a:	2300      	movs	r3, #0
 801299c:	f88d 1006 	strb.w	r1, [sp, #6]
 80129a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80129a4:	f360 030f 	bfi	r3, r0, #0, #16
 80129a8:	f362 431f 	bfi	r3, r2, #16, #16
 80129ac:	4618      	mov	r0, r3
 80129ae:	b002      	add	sp, #8
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop

080129b4 <uxr_object_id_from_raw>:
 80129b4:	7843      	ldrb	r3, [r0, #1]
 80129b6:	7801      	ldrb	r1, [r0, #0]
 80129b8:	b082      	sub	sp, #8
 80129ba:	f003 020f 	and.w	r2, r3, #15
 80129be:	f88d 2006 	strb.w	r2, [sp, #6]
 80129c2:	091b      	lsrs	r3, r3, #4
 80129c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80129c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80129cc:	2000      	movs	r0, #0
 80129ce:	f363 000f 	bfi	r0, r3, #0, #16
 80129d2:	f362 401f 	bfi	r0, r2, #16, #16
 80129d6:	b002      	add	sp, #8
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop

080129dc <uxr_object_id_to_raw>:
 80129dc:	4602      	mov	r2, r0
 80129de:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80129e2:	b082      	sub	sp, #8
 80129e4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80129e8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80129ec:	f881 c000 	strb.w	ip, [r1]
 80129f0:	7048      	strb	r0, [r1, #1]
 80129f2:	b002      	add	sp, #8
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop

080129f8 <uxr_buffer_request_data>:
 80129f8:	b530      	push	{r4, r5, lr}
 80129fa:	b095      	sub	sp, #84	@ 0x54
 80129fc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012a00:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8012a02:	9303      	str	r3, [sp, #12]
 8012a04:	2200      	movs	r2, #0
 8012a06:	2d00      	cmp	r5, #0
 8012a08:	bf14      	ite	ne
 8012a0a:	2101      	movne	r1, #1
 8012a0c:	4611      	moveq	r1, r2
 8012a0e:	4604      	mov	r4, r0
 8012a10:	f88d 301c 	strb.w	r3, [sp, #28]
 8012a14:	f88d 201d 	strb.w	r2, [sp, #29]
 8012a18:	f88d 201e 	strb.w	r2, [sp, #30]
 8012a1c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8012a20:	d021      	beq.n	8012a66 <uxr_buffer_request_data+0x6e>
 8012a22:	682a      	ldr	r2, [r5, #0]
 8012a24:	686b      	ldr	r3, [r5, #4]
 8012a26:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8012a2a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012a2e:	2210      	movs	r2, #16
 8012a30:	2308      	movs	r3, #8
 8012a32:	2100      	movs	r1, #0
 8012a34:	e9cd 3100 	strd	r3, r1, [sp]
 8012a38:	4620      	mov	r0, r4
 8012a3a:	9905      	ldr	r1, [sp, #20]
 8012a3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8012a3e:	f001 f839 	bl	8013ab4 <uxr_prepare_stream_to_write_submessage>
 8012a42:	b918      	cbnz	r0, 8012a4c <uxr_buffer_request_data+0x54>
 8012a44:	4604      	mov	r4, r0
 8012a46:	4620      	mov	r0, r4
 8012a48:	b015      	add	sp, #84	@ 0x54
 8012a4a:	bd30      	pop	{r4, r5, pc}
 8012a4c:	9904      	ldr	r1, [sp, #16]
 8012a4e:	aa06      	add	r2, sp, #24
 8012a50:	4620      	mov	r0, r4
 8012a52:	f001 f965 	bl	8013d20 <uxr_init_base_object_request>
 8012a56:	a906      	add	r1, sp, #24
 8012a58:	4604      	mov	r4, r0
 8012a5a:	a80c      	add	r0, sp, #48	@ 0x30
 8012a5c:	f003 f8f2 	bl	8015c44 <uxr_serialize_READ_DATA_Payload>
 8012a60:	4620      	mov	r0, r4
 8012a62:	b015      	add	sp, #84	@ 0x54
 8012a64:	bd30      	pop	{r4, r5, pc}
 8012a66:	2208      	movs	r2, #8
 8012a68:	e7e2      	b.n	8012a30 <uxr_buffer_request_data+0x38>
 8012a6a:	bf00      	nop

08012a6c <uxr_buffer_cancel_data>:
 8012a6c:	b510      	push	{r4, lr}
 8012a6e:	b094      	sub	sp, #80	@ 0x50
 8012a70:	2300      	movs	r3, #0
 8012a72:	9202      	str	r2, [sp, #8]
 8012a74:	9205      	str	r2, [sp, #20]
 8012a76:	9301      	str	r3, [sp, #4]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012a7e:	f88d 301e 	strb.w	r3, [sp, #30]
 8012a82:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8012a86:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012a8a:	2308      	movs	r3, #8
 8012a8c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	2210      	movs	r2, #16
 8012a94:	ab0c      	add	r3, sp, #48	@ 0x30
 8012a96:	4604      	mov	r4, r0
 8012a98:	9103      	str	r1, [sp, #12]
 8012a9a:	f001 f80b 	bl	8013ab4 <uxr_prepare_stream_to_write_submessage>
 8012a9e:	b918      	cbnz	r0, 8012aa8 <uxr_buffer_cancel_data+0x3c>
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	b014      	add	sp, #80	@ 0x50
 8012aa6:	bd10      	pop	{r4, pc}
 8012aa8:	9905      	ldr	r1, [sp, #20]
 8012aaa:	aa06      	add	r2, sp, #24
 8012aac:	4620      	mov	r0, r4
 8012aae:	f001 f937 	bl	8013d20 <uxr_init_base_object_request>
 8012ab2:	a906      	add	r1, sp, #24
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	a80c      	add	r0, sp, #48	@ 0x30
 8012ab8:	f003 f8c4 	bl	8015c44 <uxr_serialize_READ_DATA_Payload>
 8012abc:	4620      	mov	r0, r4
 8012abe:	b014      	add	sp, #80	@ 0x50
 8012ac0:	bd10      	pop	{r4, pc}
 8012ac2:	bf00      	nop

08012ac4 <read_submessage_format>:
 8012ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ac8:	b095      	sub	sp, #84	@ 0x54
 8012aca:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8012ace:	b113      	cbz	r3, 8012ad6 <read_submessage_format+0x12>
 8012ad0:	b015      	add	sp, #84	@ 0x54
 8012ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad6:	460c      	mov	r4, r1
 8012ad8:	4615      	mov	r5, r2
 8012ada:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8012ade:	4607      	mov	r7, r0
 8012ae0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012ae2:	9004      	str	r0, [sp, #16]
 8012ae4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012ae6:	9005      	str	r0, [sp, #20]
 8012ae8:	1a52      	subs	r2, r2, r1
 8012aea:	a80c      	add	r0, sp, #48	@ 0x30
 8012aec:	4699      	mov	r9, r3
 8012aee:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8012af2:	f7f9 fd17 	bl	800c524 <ucdr_init_buffer>
 8012af6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012afa:	a80c      	add	r0, sp, #48	@ 0x30
 8012afc:	f7f9 fce6 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8012b00:	69e2      	ldr	r2, [r4, #28]
 8012b02:	b19a      	cbz	r2, 8012b2c <read_submessage_format+0x68>
 8012b04:	f1b8 0f07 	cmp.w	r8, #7
 8012b08:	f882 9014 	strb.w	r9, [r2, #20]
 8012b0c:	d040      	beq.n	8012b90 <read_submessage_format+0xcc>
 8012b0e:	f1b8 0f08 	cmp.w	r8, #8
 8012b12:	d02e      	beq.n	8012b72 <read_submessage_format+0xae>
 8012b14:	f1b8 0f06 	cmp.w	r8, #6
 8012b18:	d011      	beq.n	8012b3e <read_submessage_format+0x7a>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	7513      	strb	r3, [r2, #20]
 8012b1e:	4629      	mov	r1, r5
 8012b20:	4620      	mov	r0, r4
 8012b22:	f7f9 fd4f 	bl	800c5c4 <ucdr_advance_buffer>
 8012b26:	b015      	add	sp, #84	@ 0x54
 8012b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b2c:	f1b8 0f07 	cmp.w	r8, #7
 8012b30:	d02e      	beq.n	8012b90 <read_submessage_format+0xcc>
 8012b32:	f1b8 0f08 	cmp.w	r8, #8
 8012b36:	d01c      	beq.n	8012b72 <read_submessage_format+0xae>
 8012b38:	f1b8 0f06 	cmp.w	r8, #6
 8012b3c:	d1ef      	bne.n	8012b1e <read_submessage_format+0x5a>
 8012b3e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8012b42:	f1b8 0f00 	cmp.w	r8, #0
 8012b46:	d011      	beq.n	8012b6c <read_submessage_format+0xa8>
 8012b48:	ab0c      	add	r3, sp, #48	@ 0x30
 8012b4a:	e9cd 3500 	strd	r3, r5, [sp]
 8012b4e:	2306      	movs	r3, #6
 8012b50:	f88d 3016 	strb.w	r3, [sp, #22]
 8012b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b58:	9302      	str	r3, [sp, #8]
 8012b5a:	4632      	mov	r2, r6
 8012b5c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012b60:	4638      	mov	r0, r7
 8012b62:	47c0      	blx	r8
 8012b64:	2301      	movs	r3, #1
 8012b66:	69e2      	ldr	r2, [r4, #28]
 8012b68:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012b6c:	2a00      	cmp	r2, #0
 8012b6e:	d1d4      	bne.n	8012b1a <read_submessage_format+0x56>
 8012b70:	e7d5      	b.n	8012b1e <read_submessage_format+0x5a>
 8012b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d0f8      	beq.n	8012b6c <read_submessage_format+0xa8>
 8012b7a:	a906      	add	r1, sp, #24
 8012b7c:	a80c      	add	r0, sp, #48	@ 0x30
 8012b7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012b82:	f003 f925 	bl	8015dd0 <uxr_deserialize_SampleIdentity>
 8012b86:	b9a0      	cbnz	r0, 8012bb2 <read_submessage_format+0xee>
 8012b88:	69e2      	ldr	r2, [r4, #28]
 8012b8a:	2a00      	cmp	r2, #0
 8012b8c:	d1c5      	bne.n	8012b1a <read_submessage_format+0x56>
 8012b8e:	e7c6      	b.n	8012b1e <read_submessage_format+0x5a>
 8012b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012b94:	b13b      	cbz	r3, 8012ba6 <read_submessage_format+0xe2>
 8012b96:	a906      	add	r1, sp, #24
 8012b98:	a80c      	add	r0, sp, #48	@ 0x30
 8012b9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012b9e:	f002 fdeb 	bl	8015778 <uxr_deserialize_BaseObjectRequest>
 8012ba2:	bb60      	cbnz	r0, 8012bfe <read_submessage_format+0x13a>
 8012ba4:	69e2      	ldr	r2, [r4, #28]
 8012ba6:	68a3      	ldr	r3, [r4, #8]
 8012ba8:	442b      	add	r3, r5
 8012baa:	60a3      	str	r3, [r4, #8]
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	d1b4      	bne.n	8012b1a <read_submessage_format+0x56>
 8012bb0:	e7b5      	b.n	8012b1e <read_submessage_format+0x5a>
 8012bb2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012bb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012bb8:	1a52      	subs	r2, r2, r1
 8012bba:	eba8 0803 	sub.w	r8, r8, r3
 8012bbe:	a80c      	add	r0, sp, #48	@ 0x30
 8012bc0:	f7f9 fcb0 	bl	800c524 <ucdr_init_buffer>
 8012bc4:	44a8      	add	r8, r5
 8012bc6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012bca:	a80c      	add	r0, sp, #48	@ 0x30
 8012bcc:	f7f9 fc7e 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8012bd0:	fa1f f888 	uxth.w	r8, r8
 8012bd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8012bd6:	9300      	str	r3, [sp, #0]
 8012bd8:	f8cd 8004 	str.w	r8, [sp, #4]
 8012bdc:	2108      	movs	r1, #8
 8012bde:	f88d 1016 	strb.w	r1, [sp, #22]
 8012be2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012be6:	9102      	str	r1, [sp, #8]
 8012be8:	ab06      	add	r3, sp, #24
 8012bea:	4632      	mov	r2, r6
 8012bec:	9905      	ldr	r1, [sp, #20]
 8012bee:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	47b0      	blx	r6
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012bfc:	e7c4      	b.n	8012b88 <read_submessage_format+0xc4>
 8012bfe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012c02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012c04:	1a52      	subs	r2, r2, r1
 8012c06:	a80c      	add	r0, sp, #48	@ 0x30
 8012c08:	eba8 0803 	sub.w	r8, r8, r3
 8012c0c:	f7f9 fc8a 	bl	800c524 <ucdr_init_buffer>
 8012c10:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012c14:	a80c      	add	r0, sp, #48	@ 0x30
 8012c16:	f7f9 fc59 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8012c1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012c22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012c26:	44a8      	add	r8, r5
 8012c28:	fa1f f888 	uxth.w	r8, r8
 8012c2c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012c30:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012c34:	2107      	movs	r1, #7
 8012c36:	f88d 1016 	strb.w	r1, [sp, #22]
 8012c3a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8012c3e:	9102      	str	r1, [sp, #8]
 8012c40:	4632      	mov	r2, r6
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8012c48:	9905      	ldr	r1, [sp, #20]
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	47b0      	blx	r6
 8012c4e:	2301      	movs	r3, #1
 8012c50:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012c54:	e7a6      	b.n	8012ba4 <read_submessage_format+0xe0>
 8012c56:	bf00      	nop

08012c58 <on_get_fragmentation_info>:
 8012c58:	b500      	push	{lr}
 8012c5a:	b08b      	sub	sp, #44	@ 0x2c
 8012c5c:	4601      	mov	r1, r0
 8012c5e:	2204      	movs	r2, #4
 8012c60:	a802      	add	r0, sp, #8
 8012c62:	f7f9 fc5f 	bl	800c524 <ucdr_init_buffer>
 8012c66:	f10d 0305 	add.w	r3, sp, #5
 8012c6a:	f10d 0206 	add.w	r2, sp, #6
 8012c6e:	a901      	add	r1, sp, #4
 8012c70:	a802      	add	r0, sp, #8
 8012c72:	f001 fe69 	bl	8014948 <uxr_read_submessage_header>
 8012c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c7a:	2b0d      	cmp	r3, #13
 8012c7c:	d003      	beq.n	8012c86 <on_get_fragmentation_info+0x2e>
 8012c7e:	2000      	movs	r0, #0
 8012c80:	b00b      	add	sp, #44	@ 0x2c
 8012c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c8a:	f013 0f02 	tst.w	r3, #2
 8012c8e:	bf14      	ite	ne
 8012c90:	2002      	movne	r0, #2
 8012c92:	2001      	moveq	r0, #1
 8012c94:	b00b      	add	sp, #44	@ 0x2c
 8012c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c9a:	bf00      	nop

08012c9c <read_submessage_get_info>:
 8012c9c:	b570      	push	{r4, r5, r6, lr}
 8012c9e:	2500      	movs	r5, #0
 8012ca0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8012caa:	460e      	mov	r6, r1
 8012cac:	a810      	add	r0, sp, #64	@ 0x40
 8012cae:	4629      	mov	r1, r5
 8012cb0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8012cb4:	f006 fd90 	bl	80197d8 <memset>
 8012cb8:	a903      	add	r1, sp, #12
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f002 ff04 	bl	8015ac8 <uxr_deserialize_GET_INFO_Payload>
 8012cc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012cc4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f001 f821 	bl	8013d10 <uxr_session_header_offset>
 8012cce:	462b      	mov	r3, r5
 8012cd0:	9000      	str	r0, [sp, #0]
 8012cd2:	220c      	movs	r2, #12
 8012cd4:	a905      	add	r1, sp, #20
 8012cd6:	a808      	add	r0, sp, #32
 8012cd8:	f7f9 fc12 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8012cdc:	a910      	add	r1, sp, #64	@ 0x40
 8012cde:	a808      	add	r0, sp, #32
 8012ce0:	f002 ff64 	bl	8015bac <uxr_serialize_INFO_Payload>
 8012ce4:	9b08      	ldr	r3, [sp, #32]
 8012ce6:	462a      	mov	r2, r5
 8012ce8:	4629      	mov	r1, r5
 8012cea:	4620      	mov	r0, r4
 8012cec:	f000 ffba 	bl	8013c64 <uxr_stamp_session_header>
 8012cf0:	a808      	add	r0, sp, #32
 8012cf2:	f7f9 fc43 	bl	800c57c <ucdr_buffer_length>
 8012cf6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	a905      	add	r1, sp, #20
 8012cfc:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012d00:	47a0      	blx	r4
 8012d02:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8012d06:	bd70      	pop	{r4, r5, r6, pc}

08012d08 <write_submessage_acknack.isra.0>:
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	b092      	sub	sp, #72	@ 0x48
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	460e      	mov	r6, r1
 8012d10:	4614      	mov	r4, r2
 8012d12:	f000 fffd 	bl	8013d10 <uxr_session_header_offset>
 8012d16:	a905      	add	r1, sp, #20
 8012d18:	9000      	str	r0, [sp, #0]
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	a80a      	add	r0, sp, #40	@ 0x28
 8012d1e:	2211      	movs	r2, #17
 8012d20:	f7f9 fbee 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8012d24:	2218      	movs	r2, #24
 8012d26:	fb02 5404 	mla	r4, r2, r4, r5
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	2205      	movs	r2, #5
 8012d2e:	3450      	adds	r4, #80	@ 0x50
 8012d30:	210a      	movs	r1, #10
 8012d32:	a80a      	add	r0, sp, #40	@ 0x28
 8012d34:	f001 fdee 	bl	8014914 <uxr_buffer_submessage_header>
 8012d38:	a903      	add	r1, sp, #12
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f004 ff96 	bl	8017c6c <uxr_compute_acknack>
 8012d40:	ba40      	rev16	r0, r0
 8012d42:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012d46:	a903      	add	r1, sp, #12
 8012d48:	a80a      	add	r0, sp, #40	@ 0x28
 8012d4a:	f88d 6010 	strb.w	r6, [sp, #16]
 8012d4e:	f002 ff9d 	bl	8015c8c <uxr_serialize_ACKNACK_Payload>
 8012d52:	2200      	movs	r2, #0
 8012d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d56:	4611      	mov	r1, r2
 8012d58:	4628      	mov	r0, r5
 8012d5a:	f000 ff83 	bl	8013c64 <uxr_stamp_session_header>
 8012d5e:	a80a      	add	r0, sp, #40	@ 0x28
 8012d60:	f7f9 fc0c 	bl	800c57c <ucdr_buffer_length>
 8012d64:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012d66:	4602      	mov	r2, r0
 8012d68:	a905      	add	r1, sp, #20
 8012d6a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012d6e:	47a0      	blx	r4
 8012d70:	b012      	add	sp, #72	@ 0x48
 8012d72:	bd70      	pop	{r4, r5, r6, pc}
 8012d74:	0000      	movs	r0, r0
	...

08012d78 <uxr_init_session>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012db0 <uxr_init_session+0x38>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012d84:	4604      	mov	r4, r0
 8012d86:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012d8a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012d8e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8012d92:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012d96:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012d9a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012d9e:	2181      	movs	r1, #129	@ 0x81
 8012da0:	f000 fecc 	bl	8013b3c <uxr_init_session_info>
 8012da4:	f104 0008 	add.w	r0, r4, #8
 8012da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dac:	f001 bcce 	b.w	801474c <uxr_init_stream_storage>
	...

08012db8 <uxr_set_status_callback>:
 8012db8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop

08012dc0 <uxr_set_topic_callback>:
 8012dc0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012dc4:	4770      	bx	lr
 8012dc6:	bf00      	nop

08012dc8 <uxr_set_request_callback>:
 8012dc8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop

08012dd0 <uxr_set_reply_callback>:
 8012dd0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012dd4:	4770      	bx	lr
 8012dd6:	bf00      	nop

08012dd8 <uxr_create_output_best_effort_stream>:
 8012dd8:	b510      	push	{r4, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	e9cd 2100 	strd	r2, r1, [sp]
 8012de0:	4604      	mov	r4, r0
 8012de2:	f000 ff95 	bl	8013d10 <uxr_session_header_offset>
 8012de6:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012dea:	4603      	mov	r3, r0
 8012dec:	f104 0008 	add.w	r0, r4, #8
 8012df0:	b004      	add	sp, #16
 8012df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012df6:	f001 bcf3 	b.w	80147e0 <uxr_add_output_best_effort_buffer>
 8012dfa:	bf00      	nop

08012dfc <uxr_create_output_reliable_stream>:
 8012dfc:	b510      	push	{r4, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012e04:	4604      	mov	r4, r0
 8012e06:	9303      	str	r3, [sp, #12]
 8012e08:	f000 ff82 	bl	8013d10 <uxr_session_header_offset>
 8012e0c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012e10:	9000      	str	r0, [sp, #0]
 8012e12:	9905      	ldr	r1, [sp, #20]
 8012e14:	f104 0008 	add.w	r0, r4, #8
 8012e18:	f001 fcf6 	bl	8014808 <uxr_add_output_reliable_buffer>
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	b2c3      	uxtb	r3, r0
 8012e20:	f363 0207 	bfi	r2, r3, #0, #8
 8012e24:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012e28:	f363 220f 	bfi	r2, r3, #8, #8
 8012e2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012e30:	f363 4217 	bfi	r2, r3, #16, #8
 8012e34:	0e03      	lsrs	r3, r0, #24
 8012e36:	f363 621f 	bfi	r2, r3, #24, #8
 8012e3a:	4610      	mov	r0, r2
 8012e3c:	b008      	add	sp, #32
 8012e3e:	bd10      	pop	{r4, pc}

08012e40 <uxr_create_input_best_effort_stream>:
 8012e40:	b082      	sub	sp, #8
 8012e42:	3008      	adds	r0, #8
 8012e44:	b002      	add	sp, #8
 8012e46:	f001 bcf9 	b.w	801483c <uxr_add_input_best_effort_buffer>
 8012e4a:	bf00      	nop

08012e4c <uxr_create_input_reliable_stream>:
 8012e4c:	b510      	push	{r4, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	4c0b      	ldr	r4, [pc, #44]	@ (8012e80 <uxr_create_input_reliable_stream+0x34>)
 8012e52:	9400      	str	r4, [sp, #0]
 8012e54:	3008      	adds	r0, #8
 8012e56:	f001 fd07 	bl	8014868 <uxr_add_input_reliable_buffer>
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	b2c3      	uxtb	r3, r0
 8012e5e:	f363 0207 	bfi	r2, r3, #0, #8
 8012e62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012e66:	f363 220f 	bfi	r2, r3, #8, #8
 8012e6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012e6e:	f363 4217 	bfi	r2, r3, #16, #8
 8012e72:	0e03      	lsrs	r3, r0, #24
 8012e74:	f363 621f 	bfi	r2, r3, #24, #8
 8012e78:	4610      	mov	r0, r2
 8012e7a:	b004      	add	sp, #16
 8012e7c:	bd10      	pop	{r4, pc}
 8012e7e:	bf00      	nop
 8012e80:	08012c59 	.word	0x08012c59

08012e84 <uxr_epoch_nanos>:
 8012e84:	b510      	push	{r4, lr}
 8012e86:	4604      	mov	r4, r0
 8012e88:	f001 fda4 	bl	80149d4 <uxr_nanos>
 8012e8c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012e90:	1ac0      	subs	r0, r0, r3
 8012e92:	eb61 0102 	sbc.w	r1, r1, r2
 8012e96:	bd10      	pop	{r4, pc}

08012e98 <uxr_flash_output_streams>:
 8012e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9c:	7e03      	ldrb	r3, [r0, #24]
 8012e9e:	b084      	sub	sp, #16
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d035      	beq.n	8012f12 <uxr_flash_output_streams+0x7a>
 8012ea6:	f04f 0900 	mov.w	r9, #0
 8012eaa:	4648      	mov	r0, r9
 8012eac:	f10d 0802 	add.w	r8, sp, #2
 8012eb0:	af03      	add	r7, sp, #12
 8012eb2:	ae02      	add	r6, sp, #8
 8012eb4:	e006      	b.n	8012ec4 <uxr_flash_output_streams+0x2c>
 8012eb6:	7e23      	ldrb	r3, [r4, #24]
 8012eb8:	f109 0901 	add.w	r9, r9, #1
 8012ebc:	fa5f f089 	uxtb.w	r0, r9
 8012ec0:	4283      	cmp	r3, r0
 8012ec2:	d926      	bls.n	8012f12 <uxr_flash_output_streams+0x7a>
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012ecc:	f001 fbea 	bl	80146a4 <uxr_stream_id>
 8012ed0:	3508      	adds	r5, #8
 8012ed2:	4684      	mov	ip, r0
 8012ed4:	4643      	mov	r3, r8
 8012ed6:	463a      	mov	r2, r7
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4628      	mov	r0, r5
 8012edc:	f8cd c004 	str.w	ip, [sp, #4]
 8012ee0:	f004 ff4a 	bl	8017d78 <uxr_prepare_best_effort_buffer_to_send>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d0e6      	beq.n	8012eb6 <uxr_flash_output_streams+0x1e>
 8012ee8:	9b02      	ldr	r3, [sp, #8]
 8012eea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012eee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f000 feb6 	bl	8013c64 <uxr_stamp_session_header>
 8012ef8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012efa:	9a03      	ldr	r2, [sp, #12]
 8012efc:	685d      	ldr	r5, [r3, #4]
 8012efe:	6818      	ldr	r0, [r3, #0]
 8012f00:	9902      	ldr	r1, [sp, #8]
 8012f02:	47a8      	blx	r5
 8012f04:	f109 0901 	add.w	r9, r9, #1
 8012f08:	7e23      	ldrb	r3, [r4, #24]
 8012f0a:	fa5f f089 	uxtb.w	r0, r9
 8012f0e:	4283      	cmp	r3, r0
 8012f10:	d8d8      	bhi.n	8012ec4 <uxr_flash_output_streams+0x2c>
 8012f12:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012f16:	b38b      	cbz	r3, 8012f7c <uxr_flash_output_streams+0xe4>
 8012f18:	f04f 0900 	mov.w	r9, #0
 8012f1c:	f10d 0802 	add.w	r8, sp, #2
 8012f20:	af03      	add	r7, sp, #12
 8012f22:	ae02      	add	r6, sp, #8
 8012f24:	4648      	mov	r0, r9
 8012f26:	2201      	movs	r2, #1
 8012f28:	2102      	movs	r1, #2
 8012f2a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012f2e:	f001 fbb9 	bl	80146a4 <uxr_stream_id>
 8012f32:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012f36:	3520      	adds	r5, #32
 8012f38:	9001      	str	r0, [sp, #4]
 8012f3a:	e00d      	b.n	8012f58 <uxr_flash_output_streams+0xc0>
 8012f3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012f40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012f44:	9b02      	ldr	r3, [sp, #8]
 8012f46:	f000 fe8d 	bl	8013c64 <uxr_stamp_session_header>
 8012f4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012f4c:	9a03      	ldr	r2, [sp, #12]
 8012f4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8012f52:	9902      	ldr	r1, [sp, #8]
 8012f54:	6818      	ldr	r0, [r3, #0]
 8012f56:	47d0      	blx	sl
 8012f58:	4643      	mov	r3, r8
 8012f5a:	463a      	mov	r2, r7
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4628      	mov	r0, r5
 8012f60:	f005 f928 	bl	80181b4 <uxr_prepare_next_reliable_buffer_to_send>
 8012f64:	4603      	mov	r3, r0
 8012f66:	4620      	mov	r0, r4
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d1e7      	bne.n	8012f3c <uxr_flash_output_streams+0xa4>
 8012f6c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012f70:	f109 0901 	add.w	r9, r9, #1
 8012f74:	fa5f f089 	uxtb.w	r0, r9
 8012f78:	4283      	cmp	r3, r0
 8012f7a:	d8d4      	bhi.n	8012f26 <uxr_flash_output_streams+0x8e>
 8012f7c:	b004      	add	sp, #16
 8012f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f82:	bf00      	nop

08012f84 <read_submessage_info>:
 8012f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f88:	460d      	mov	r5, r1
 8012f8a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012f8e:	4669      	mov	r1, sp
 8012f90:	4607      	mov	r7, r0
 8012f92:	4628      	mov	r0, r5
 8012f94:	f002 fca6 	bl	80158e4 <uxr_deserialize_BaseObjectReply>
 8012f98:	a902      	add	r1, sp, #8
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012fa2:	f7f8 f965 	bl	800b270 <ucdr_deserialize_bool>
 8012fa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012faa:	4004      	ands	r4, r0
 8012fac:	b2e4      	uxtb	r4, r4
 8012fae:	b95b      	cbnz	r3, 8012fc8 <read_submessage_info+0x44>
 8012fb0:	a987      	add	r1, sp, #540	@ 0x21c
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f7f8 f95c 	bl	800b270 <ucdr_deserialize_bool>
 8012fb8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	b94b      	cbnz	r3, 8012fd4 <read_submessage_info+0x50>
 8012fc0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc8:	a903      	add	r1, sp, #12
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f002 fb32 	bl	8015634 <uxr_deserialize_ObjectVariant>
 8012fd0:	4004      	ands	r4, r0
 8012fd2:	e7ed      	b.n	8012fb0 <read_submessage_info+0x2c>
 8012fd4:	a988      	add	r1, sp, #544	@ 0x220
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f7f8 f978 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8012fdc:	4234      	tst	r4, r6
 8012fde:	d0ef      	beq.n	8012fc0 <read_submessage_info+0x3c>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	d0ed      	beq.n	8012fc0 <read_submessage_info+0x3c>
 8012fe4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012fe8:	2b0d      	cmp	r3, #13
 8012fea:	d1e9      	bne.n	8012fc0 <read_submessage_info+0x3c>
 8012fec:	a98a      	add	r1, sp, #552	@ 0x228
 8012fee:	4628      	mov	r0, r5
 8012ff0:	f7f8 ff12 	bl	800be18 <ucdr_deserialize_int16_t>
 8012ff4:	b140      	cbz	r0, 8013008 <read_submessage_info+0x84>
 8012ff6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	dd07      	ble.n	801300e <read_submessage_info+0x8a>
 8012ffe:	f1b8 0f00 	cmp.w	r8, #0
 8013002:	bf14      	ite	ne
 8013004:	2001      	movne	r0, #1
 8013006:	2002      	moveq	r0, #2
 8013008:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801300c:	e7d8      	b.n	8012fc0 <read_submessage_info+0x3c>
 801300e:	2000      	movs	r0, #0
 8013010:	e7fa      	b.n	8013008 <read_submessage_info+0x84>
 8013012:	bf00      	nop

08013014 <read_submessage_list>:
 8013014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013018:	b097      	sub	sp, #92	@ 0x5c
 801301a:	4ec1      	ldr	r6, [pc, #772]	@ (8013320 <read_submessage_list+0x30c>)
 801301c:	9209      	str	r2, [sp, #36]	@ 0x24
 801301e:	4604      	mov	r4, r0
 8013020:	460d      	mov	r5, r1
 8013022:	f04f 0801 	mov.w	r8, #1
 8013026:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801302a:	aa0c      	add	r2, sp, #48	@ 0x30
 801302c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8013030:	4628      	mov	r0, r5
 8013032:	f001 fc89 	bl	8014948 <uxr_read_submessage_header>
 8013036:	2800      	cmp	r0, #0
 8013038:	f000 813e 	beq.w	80132b8 <read_submessage_list+0x2a4>
 801303c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8013040:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013044:	3b02      	subs	r3, #2
 8013046:	2b0d      	cmp	r3, #13
 8013048:	d8ed      	bhi.n	8013026 <read_submessage_list+0x12>
 801304a:	a101      	add	r1, pc, #4	@ (adr r1, 8013050 <read_submessage_list+0x3c>)
 801304c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013050:	080132af 	.word	0x080132af
 8013054:	08013027 	.word	0x08013027
 8013058:	0801329f 	.word	0x0801329f
 801305c:	0801323d 	.word	0x0801323d
 8013060:	08013233 	.word	0x08013233
 8013064:	08013027 	.word	0x08013027
 8013068:	08013027 	.word	0x08013027
 801306c:	08013193 	.word	0x08013193
 8013070:	08013123 	.word	0x08013123
 8013074:	080130e3 	.word	0x080130e3
 8013078:	08013027 	.word	0x08013027
 801307c:	08013027 	.word	0x08013027
 8013080:	08013027 	.word	0x08013027
 8013084:	08013089 	.word	0x08013089
 8013088:	a910      	add	r1, sp, #64	@ 0x40
 801308a:	4628      	mov	r0, r5
 801308c:	f002 fe4e 	bl	8015d2c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013090:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013094:	f1b9 0f00 	cmp.w	r9, #0
 8013098:	f000 8116 	beq.w	80132c8 <read_submessage_list+0x2b4>
 801309c:	f001 fc9a 	bl	80149d4 <uxr_nanos>
 80130a0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80130a2:	4602      	mov	r2, r0
 80130a4:	460b      	mov	r3, r1
 80130a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80130a8:	2100      	movs	r1, #0
 80130aa:	468c      	mov	ip, r1
 80130ac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80130b0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80130b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80130b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80130b8:	468c      	mov	ip, r1
 80130ba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80130be:	46e2      	mov	sl, ip
 80130c0:	46bc      	mov	ip, r7
 80130c2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80130c6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80130ca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80130ce:	e9cd 7100 	strd	r7, r1, [sp]
 80130d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80130d6:	9106      	str	r1, [sp, #24]
 80130d8:	4620      	mov	r0, r4
 80130da:	47c8      	blx	r9
 80130dc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80130e0:	e7a1      	b.n	8013026 <read_submessage_list+0x12>
 80130e2:	a910      	add	r1, sp, #64	@ 0x40
 80130e4:	4628      	mov	r0, r5
 80130e6:	f002 fe0f 	bl	8015d08 <uxr_deserialize_HEARTBEAT_Payload>
 80130ea:	2100      	movs	r1, #0
 80130ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80130f0:	f001 fb02 	bl	80146f8 <uxr_stream_id_from_raw>
 80130f4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80130f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80130fa:	4639      	mov	r1, r7
 80130fc:	f104 0008 	add.w	r0, r4, #8
 8013100:	f001 fbe8 	bl	80148d4 <uxr_get_input_reliable_stream>
 8013104:	2800      	cmp	r0, #0
 8013106:	d08e      	beq.n	8013026 <read_submessage_list+0x12>
 8013108:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801310c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013110:	f004 fda0 	bl	8017c54 <uxr_process_heartbeat>
 8013114:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013118:	463a      	mov	r2, r7
 801311a:	4620      	mov	r0, r4
 801311c:	f7ff fdf4 	bl	8012d08 <write_submessage_acknack.isra.0>
 8013120:	e781      	b.n	8013026 <read_submessage_list+0x12>
 8013122:	a910      	add	r1, sp, #64	@ 0x40
 8013124:	4628      	mov	r0, r5
 8013126:	f002 fdc7 	bl	8015cb8 <uxr_deserialize_ACKNACK_Payload>
 801312a:	2100      	movs	r1, #0
 801312c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013130:	f001 fae2 	bl	80146f8 <uxr_stream_id_from_raw>
 8013134:	900d      	str	r0, [sp, #52]	@ 0x34
 8013136:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801313a:	f104 0008 	add.w	r0, r4, #8
 801313e:	f001 fbb5 	bl	80148ac <uxr_get_output_reliable_stream>
 8013142:	4607      	mov	r7, r0
 8013144:	2800      	cmp	r0, #0
 8013146:	f43f af6e 	beq.w	8013026 <read_submessage_list+0x12>
 801314a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801314e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8013152:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013156:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801315a:	b289      	uxth	r1, r1
 801315c:	f005 f8d4 	bl	8018308 <uxr_process_acknack>
 8013160:	4638      	mov	r0, r7
 8013162:	f005 f891 	bl	8018288 <uxr_begin_output_nack_buffer_it>
 8013166:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801316a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801316e:	e006      	b.n	801317e <read_submessage_list+0x16a>
 8013170:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013174:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801317a:	6818      	ldr	r0, [r3, #0]
 801317c:	47c8      	blx	r9
 801317e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8013182:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013184:	4651      	mov	r1, sl
 8013186:	4638      	mov	r0, r7
 8013188:	f005 f880 	bl	801828c <uxr_next_reliable_nack_buffer_to_send>
 801318c:	2800      	cmp	r0, #0
 801318e:	d1ef      	bne.n	8013170 <read_submessage_list+0x15c>
 8013190:	e749      	b.n	8013026 <read_submessage_list+0x12>
 8013192:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013196:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801319a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801319e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80131a2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80131a6:	4651      	mov	r1, sl
 80131a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80131ac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80131b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80131b4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80131b8:	4628      	mov	r0, r5
 80131ba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80131be:	f002 fadb 	bl	8015778 <uxr_deserialize_BaseObjectRequest>
 80131c2:	4650      	mov	r0, sl
 80131c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80131c6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80131ca:	f000 fdc7 	bl	8013d5c <uxr_parse_base_object_request>
 80131ce:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80131d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80131d4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80131d8:	9110      	str	r1, [sp, #64]	@ 0x40
 80131da:	3f04      	subs	r7, #4
 80131dc:	f009 090e 	and.w	r9, r9, #14
 80131e0:	b2bf      	uxth	r7, r7
 80131e2:	f1bb 0f00 	cmp.w	fp, #0
 80131e6:	d006      	beq.n	80131f6 <read_submessage_list+0x1e2>
 80131e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80131ec:	9300      	str	r3, [sp, #0]
 80131ee:	4652      	mov	r2, sl
 80131f0:	2300      	movs	r3, #0
 80131f2:	4620      	mov	r0, r4
 80131f4:	47d8      	blx	fp
 80131f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80131f8:	b16a      	cbz	r2, 8013216 <read_submessage_list+0x202>
 80131fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80131fc:	2100      	movs	r1, #0
 80131fe:	3802      	subs	r0, #2
 8013200:	e002      	b.n	8013208 <read_submessage_list+0x1f4>
 8013202:	3101      	adds	r1, #1
 8013204:	4291      	cmp	r1, r2
 8013206:	d006      	beq.n	8013216 <read_submessage_list+0x202>
 8013208:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801320c:	4553      	cmp	r3, sl
 801320e:	d1f8      	bne.n	8013202 <read_submessage_list+0x1ee>
 8013210:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013212:	2200      	movs	r2, #0
 8013214:	545a      	strb	r2, [r3, r1]
 8013216:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801321a:	9102      	str	r1, [sp, #8]
 801321c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801321e:	9101      	str	r1, [sp, #4]
 8013220:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013222:	9100      	str	r1, [sp, #0]
 8013224:	464b      	mov	r3, r9
 8013226:	463a      	mov	r2, r7
 8013228:	4629      	mov	r1, r5
 801322a:	4620      	mov	r0, r4
 801322c:	f7ff fc4a 	bl	8012ac4 <read_submessage_format>
 8013230:	e6f9      	b.n	8013026 <read_submessage_list+0x12>
 8013232:	4629      	mov	r1, r5
 8013234:	4620      	mov	r0, r4
 8013236:	f7ff fea5 	bl	8012f84 <read_submessage_info>
 801323a:	e6f4      	b.n	8013026 <read_submessage_list+0x12>
 801323c:	2a00      	cmp	r2, #0
 801323e:	d03e      	beq.n	80132be <read_submessage_list+0x2aa>
 8013240:	a910      	add	r1, sp, #64	@ 0x40
 8013242:	4628      	mov	r0, r5
 8013244:	f002 fc94 	bl	8015b70 <uxr_deserialize_STATUS_Payload>
 8013248:	a90e      	add	r1, sp, #56	@ 0x38
 801324a:	aa0d      	add	r2, sp, #52	@ 0x34
 801324c:	a810      	add	r0, sp, #64	@ 0x40
 801324e:	f000 fd85 	bl	8013d5c <uxr_parse_base_object_request>
 8013252:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8013256:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013258:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801325c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013260:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013262:	f1ba 0f00 	cmp.w	sl, #0
 8013266:	d006      	beq.n	8013276 <read_submessage_list+0x262>
 8013268:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801326c:	9300      	str	r3, [sp, #0]
 801326e:	463a      	mov	r2, r7
 8013270:	464b      	mov	r3, r9
 8013272:	4620      	mov	r0, r4
 8013274:	47d0      	blx	sl
 8013276:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013278:	2a00      	cmp	r2, #0
 801327a:	f43f aed4 	beq.w	8013026 <read_submessage_list+0x12>
 801327e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013280:	2100      	movs	r1, #0
 8013282:	3802      	subs	r0, #2
 8013284:	e003      	b.n	801328e <read_submessage_list+0x27a>
 8013286:	3101      	adds	r1, #1
 8013288:	4291      	cmp	r1, r2
 801328a:	f43f aecc 	beq.w	8013026 <read_submessage_list+0x12>
 801328e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013292:	42bb      	cmp	r3, r7
 8013294:	d1f7      	bne.n	8013286 <read_submessage_list+0x272>
 8013296:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013298:	f803 9001 	strb.w	r9, [r3, r1]
 801329c:	e6c3      	b.n	8013026 <read_submessage_list+0x12>
 801329e:	2a00      	cmp	r2, #0
 80132a0:	f47f aec1 	bne.w	8013026 <read_submessage_list+0x12>
 80132a4:	4629      	mov	r1, r5
 80132a6:	4620      	mov	r0, r4
 80132a8:	f000 fc9e 	bl	8013be8 <uxr_read_create_session_status>
 80132ac:	e6bb      	b.n	8013026 <read_submessage_list+0x12>
 80132ae:	4629      	mov	r1, r5
 80132b0:	4620      	mov	r0, r4
 80132b2:	f7ff fcf3 	bl	8012c9c <read_submessage_get_info>
 80132b6:	e6b6      	b.n	8013026 <read_submessage_list+0x12>
 80132b8:	b017      	add	sp, #92	@ 0x5c
 80132ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132be:	4629      	mov	r1, r5
 80132c0:	4620      	mov	r0, r4
 80132c2:	f000 fc9d 	bl	8013c00 <uxr_read_delete_session_status>
 80132c6:	e6ae      	b.n	8013026 <read_submessage_list+0x12>
 80132c8:	f001 fb84 	bl	80149d4 <uxr_nanos>
 80132cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80132ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80132d0:	464f      	mov	r7, r9
 80132d2:	fbc3 2706 	smlal	r2, r7, r3, r6
 80132d6:	1812      	adds	r2, r2, r0
 80132d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80132da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80132dc:	eb47 0101 	adc.w	r1, r7, r1
 80132e0:	464f      	mov	r7, r9
 80132e2:	fbc3 0706 	smlal	r0, r7, r3, r6
 80132e6:	463b      	mov	r3, r7
 80132e8:	4684      	mov	ip, r0
 80132ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80132ee:	fbc7 0906 	smlal	r0, r9, r7, r6
 80132f2:	eb1c 0c00 	adds.w	ip, ip, r0
 80132f6:	464f      	mov	r7, r9
 80132f8:	eb43 0307 	adc.w	r3, r3, r7
 80132fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013300:	eb61 0303 	sbc.w	r3, r1, r3
 8013304:	0fda      	lsrs	r2, r3, #31
 8013306:	eb12 020c 	adds.w	r2, r2, ip
 801330a:	f143 0300 	adc.w	r3, r3, #0
 801330e:	0852      	lsrs	r2, r2, #1
 8013310:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013314:	105b      	asrs	r3, r3, #1
 8013316:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801331a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801331e:	e6dd      	b.n	80130dc <read_submessage_list+0xc8>
 8013320:	3b9aca00 	.word	0x3b9aca00

08013324 <listen_message_reliably>:
 8013324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013328:	1e0b      	subs	r3, r1, #0
 801332a:	b09d      	sub	sp, #116	@ 0x74
 801332c:	bfb8      	it	lt
 801332e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8013332:	4680      	mov	r8, r0
 8013334:	9305      	str	r3, [sp, #20]
 8013336:	f001 fb33 	bl	80149a0 <uxr_millis>
 801333a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801333e:	4681      	mov	r9, r0
 8013340:	2a00      	cmp	r2, #0
 8013342:	f000 80a1 	beq.w	8013488 <listen_message_reliably+0x164>
 8013346:	2600      	movs	r6, #0
 8013348:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801334c:	f04f 3bff 	mov.w	fp, #4294967295
 8013350:	9303      	str	r3, [sp, #12]
 8013352:	4630      	mov	r0, r6
 8013354:	460f      	mov	r7, r1
 8013356:	e00f      	b.n	8013378 <listen_message_reliably+0x54>
 8013358:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801335c:	9903      	ldr	r1, [sp, #12]
 801335e:	455a      	cmp	r2, fp
 8013360:	f106 0601 	add.w	r6, r6, #1
 8013364:	eb73 0101 	sbcs.w	r1, r3, r1
 8013368:	b2f0      	uxtb	r0, r6
 801336a:	da01      	bge.n	8013370 <listen_message_reliably+0x4c>
 801336c:	4693      	mov	fp, r2
 801336e:	9303      	str	r3, [sp, #12]
 8013370:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013374:	4283      	cmp	r3, r0
 8013376:	d960      	bls.n	801343a <listen_message_reliably+0x116>
 8013378:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801337c:	2102      	movs	r1, #2
 801337e:	2201      	movs	r2, #1
 8013380:	f001 f990 	bl	80146a4 <uxr_stream_id>
 8013384:	00e4      	lsls	r4, r4, #3
 8013386:	f104 0520 	add.w	r5, r4, #32
 801338a:	4445      	add	r5, r8
 801338c:	4601      	mov	r1, r0
 801338e:	463b      	mov	r3, r7
 8013390:	464a      	mov	r2, r9
 8013392:	4628      	mov	r0, r5
 8013394:	9109      	str	r1, [sp, #36]	@ 0x24
 8013396:	f004 ff4d 	bl	8018234 <uxr_update_output_stream_heartbeat_timestamp>
 801339a:	eb08 0304 	add.w	r3, r8, r4
 801339e:	2800      	cmp	r0, #0
 80133a0:	d0da      	beq.n	8013358 <listen_message_reliably+0x34>
 80133a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80133a6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80133aa:	9304      	str	r3, [sp, #16]
 80133ac:	4640      	mov	r0, r8
 80133ae:	f000 fcaf 	bl	8013d10 <uxr_session_header_offset>
 80133b2:	3501      	adds	r5, #1
 80133b4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80133b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80133bc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80133c0:	2300      	movs	r3, #0
 80133c2:	2211      	movs	r2, #17
 80133c4:	9000      	str	r0, [sp, #0]
 80133c6:	a90c      	add	r1, sp, #48	@ 0x30
 80133c8:	4650      	mov	r0, sl
 80133ca:	f7f9 f899 	bl	800c500 <ucdr_init_buffer_origin_offset>
 80133ce:	2300      	movs	r3, #0
 80133d0:	2205      	movs	r2, #5
 80133d2:	210b      	movs	r1, #11
 80133d4:	4650      	mov	r0, sl
 80133d6:	f001 fa9d 	bl	8014914 <uxr_buffer_submessage_header>
 80133da:	8968      	ldrh	r0, [r5, #10]
 80133dc:	2101      	movs	r1, #1
 80133de:	f004 ffeb 	bl	80183b8 <uxr_seq_num_add>
 80133e2:	892b      	ldrh	r3, [r5, #8]
 80133e4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80133e8:	4602      	mov	r2, r0
 80133ea:	9b04      	ldr	r3, [sp, #16]
 80133ec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80133f0:	a90a      	add	r1, sp, #40	@ 0x28
 80133f2:	4650      	mov	r0, sl
 80133f4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80133f8:	f002 fc72 	bl	8015ce0 <uxr_serialize_HEARTBEAT_Payload>
 80133fc:	2200      	movs	r2, #0
 80133fe:	4611      	mov	r1, r2
 8013400:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013402:	4640      	mov	r0, r8
 8013404:	f000 fc2e 	bl	8013c64 <uxr_stamp_session_header>
 8013408:	4650      	mov	r0, sl
 801340a:	f7f9 f8b7 	bl	800c57c <ucdr_buffer_length>
 801340e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013412:	4602      	mov	r2, r0
 8013414:	a90c      	add	r1, sp, #48	@ 0x30
 8013416:	e9d3 0500 	ldrd	r0, r5, [r3]
 801341a:	4444      	add	r4, r8
 801341c:	47a8      	blx	r5
 801341e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8013422:	9903      	ldr	r1, [sp, #12]
 8013424:	455a      	cmp	r2, fp
 8013426:	f106 0601 	add.w	r6, r6, #1
 801342a:	eb73 0101 	sbcs.w	r1, r3, r1
 801342e:	b2f0      	uxtb	r0, r6
 8013430:	db9c      	blt.n	801336c <listen_message_reliably+0x48>
 8013432:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013436:	4283      	cmp	r3, r0
 8013438:	d89e      	bhi.n	8013378 <listen_message_reliably+0x54>
 801343a:	9a03      	ldr	r2, [sp, #12]
 801343c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013440:	429a      	cmp	r2, r3
 8013442:	bf08      	it	eq
 8013444:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 8013448:	d01e      	beq.n	8013488 <listen_message_reliably+0x164>
 801344a:	ebab 0309 	sub.w	r3, fp, r9
 801344e:	9905      	ldr	r1, [sp, #20]
 8013450:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8013454:	2b00      	cmp	r3, #0
 8013456:	bf08      	it	eq
 8013458:	2301      	moveq	r3, #1
 801345a:	4299      	cmp	r1, r3
 801345c:	bfa8      	it	ge
 801345e:	4619      	movge	r1, r3
 8013460:	6894      	ldr	r4, [r2, #8]
 8013462:	6810      	ldr	r0, [r2, #0]
 8013464:	4689      	mov	r9, r1
 8013466:	460b      	mov	r3, r1
 8013468:	aa08      	add	r2, sp, #32
 801346a:	a907      	add	r1, sp, #28
 801346c:	47a0      	blx	r4
 801346e:	b968      	cbnz	r0, 801348c <listen_message_reliably+0x168>
 8013470:	9b05      	ldr	r3, [sp, #20]
 8013472:	eba3 0309 	sub.w	r3, r3, r9
 8013476:	2b00      	cmp	r3, #0
 8013478:	9305      	str	r3, [sp, #20]
 801347a:	f73f af5c 	bgt.w	8013336 <listen_message_reliably+0x12>
 801347e:	4604      	mov	r4, r0
 8013480:	4620      	mov	r0, r4
 8013482:	b01d      	add	sp, #116	@ 0x74
 8013484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013488:	9b05      	ldr	r3, [sp, #20]
 801348a:	e7e0      	b.n	801344e <listen_message_reliably+0x12a>
 801348c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013490:	4604      	mov	r4, r0
 8013492:	a80c      	add	r0, sp, #48	@ 0x30
 8013494:	f7f9 f846 	bl	800c524 <ucdr_init_buffer>
 8013498:	2500      	movs	r5, #0
 801349a:	f10d 031a 	add.w	r3, sp, #26
 801349e:	aa06      	add	r2, sp, #24
 80134a0:	a90c      	add	r1, sp, #48	@ 0x30
 80134a2:	4640      	mov	r0, r8
 80134a4:	f88d 5018 	strb.w	r5, [sp, #24]
 80134a8:	f000 fbf0 	bl	8013c8c <uxr_read_session_header>
 80134ac:	b918      	cbnz	r0, 80134b6 <listen_message_reliably+0x192>
 80134ae:	4620      	mov	r0, r4
 80134b0:	b01d      	add	sp, #116	@ 0x74
 80134b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b6:	4629      	mov	r1, r5
 80134b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80134bc:	f001 f91c 	bl	80146f8 <uxr_stream_id_from_raw>
 80134c0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80134c4:	2d01      	cmp	r5, #1
 80134c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80134ca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80134ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80134d2:	d04b      	beq.n	801356c <listen_message_reliably+0x248>
 80134d4:	2d02      	cmp	r5, #2
 80134d6:	d00f      	beq.n	80134f8 <listen_message_reliably+0x1d4>
 80134d8:	2d00      	cmp	r5, #0
 80134da:	d1e8      	bne.n	80134ae <listen_message_reliably+0x18a>
 80134dc:	4629      	mov	r1, r5
 80134de:	4628      	mov	r0, r5
 80134e0:	f001 f90a 	bl	80146f8 <uxr_stream_id_from_raw>
 80134e4:	a90c      	add	r1, sp, #48	@ 0x30
 80134e6:	4602      	mov	r2, r0
 80134e8:	4640      	mov	r0, r8
 80134ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80134ec:	f7ff fd92 	bl	8013014 <read_submessage_list>
 80134f0:	4620      	mov	r0, r4
 80134f2:	b01d      	add	sp, #116	@ 0x74
 80134f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f8:	4631      	mov	r1, r6
 80134fa:	f108 0008 	add.w	r0, r8, #8
 80134fe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013502:	f001 f9e7 	bl	80148d4 <uxr_get_input_reliable_stream>
 8013506:	4607      	mov	r7, r0
 8013508:	b338      	cbz	r0, 801355a <listen_message_reliably+0x236>
 801350a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801350c:	9203      	str	r2, [sp, #12]
 801350e:	a80c      	add	r0, sp, #48	@ 0x30
 8013510:	f7f9 f838 	bl	800c584 <ucdr_buffer_remaining>
 8013514:	4603      	mov	r3, r0
 8013516:	f10d 0019 	add.w	r0, sp, #25
 801351a:	9000      	str	r0, [sp, #0]
 801351c:	9a03      	ldr	r2, [sp, #12]
 801351e:	4651      	mov	r1, sl
 8013520:	4638      	mov	r0, r7
 8013522:	f004 fa9d 	bl	8017a60 <uxr_receive_reliable_message>
 8013526:	b1c0      	cbz	r0, 801355a <listen_message_reliably+0x236>
 8013528:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801352c:	b393      	cbz	r3, 8013594 <listen_message_reliably+0x270>
 801352e:	ad14      	add	r5, sp, #80	@ 0x50
 8013530:	f04f 0a02 	mov.w	sl, #2
 8013534:	e00a      	b.n	801354c <listen_message_reliably+0x228>
 8013536:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801353a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801353e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013544:	4629      	mov	r1, r5
 8013546:	4640      	mov	r0, r8
 8013548:	f7ff fd64 	bl	8013014 <read_submessage_list>
 801354c:	2204      	movs	r2, #4
 801354e:	4629      	mov	r1, r5
 8013550:	4638      	mov	r0, r7
 8013552:	f004 fb05 	bl	8017b60 <uxr_next_input_reliable_buffer_available>
 8013556:	2800      	cmp	r0, #0
 8013558:	d1ed      	bne.n	8013536 <listen_message_reliably+0x212>
 801355a:	4640      	mov	r0, r8
 801355c:	4632      	mov	r2, r6
 801355e:	4649      	mov	r1, r9
 8013560:	f7ff fbd2 	bl	8012d08 <write_submessage_acknack.isra.0>
 8013564:	4620      	mov	r0, r4
 8013566:	b01d      	add	sp, #116	@ 0x74
 8013568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356c:	4631      	mov	r1, r6
 801356e:	f108 0008 	add.w	r0, r8, #8
 8013572:	f001 f9a5 	bl	80148c0 <uxr_get_input_best_effort_stream>
 8013576:	2800      	cmp	r0, #0
 8013578:	d099      	beq.n	80134ae <listen_message_reliably+0x18a>
 801357a:	4651      	mov	r1, sl
 801357c:	f004 f9dc 	bl	8017938 <uxr_receive_best_effort_message>
 8013580:	2800      	cmp	r0, #0
 8013582:	d094      	beq.n	80134ae <listen_message_reliably+0x18a>
 8013584:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013588:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801358a:	a90c      	add	r1, sp, #48	@ 0x30
 801358c:	4640      	mov	r0, r8
 801358e:	f7ff fd41 	bl	8013014 <read_submessage_list>
 8013592:	e78c      	b.n	80134ae <listen_message_reliably+0x18a>
 8013594:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013598:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801359a:	a90c      	add	r1, sp, #48	@ 0x30
 801359c:	4640      	mov	r0, r8
 801359e:	f7ff fd39 	bl	8013014 <read_submessage_list>
 80135a2:	e7c4      	b.n	801352e <listen_message_reliably+0x20a>

080135a4 <uxr_run_session_timeout>:
 80135a4:	b570      	push	{r4, r5, r6, lr}
 80135a6:	4604      	mov	r4, r0
 80135a8:	460d      	mov	r5, r1
 80135aa:	f001 f9f9 	bl	80149a0 <uxr_millis>
 80135ae:	4606      	mov	r6, r0
 80135b0:	4620      	mov	r0, r4
 80135b2:	f7ff fc71 	bl	8012e98 <uxr_flash_output_streams>
 80135b6:	4629      	mov	r1, r5
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7ff feb3 	bl	8013324 <listen_message_reliably>
 80135be:	f001 f9ef 	bl	80149a0 <uxr_millis>
 80135c2:	1b83      	subs	r3, r0, r6
 80135c4:	1ae9      	subs	r1, r5, r3
 80135c6:	2900      	cmp	r1, #0
 80135c8:	dcf6      	bgt.n	80135b8 <uxr_run_session_timeout+0x14>
 80135ca:	f104 0008 	add.w	r0, r4, #8
 80135ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135d2:	f001 b989 	b.w	80148e8 <uxr_output_streams_confirmed>
 80135d6:	bf00      	nop

080135d8 <uxr_run_session_until_data>:
 80135d8:	b570      	push	{r4, r5, r6, lr}
 80135da:	4604      	mov	r4, r0
 80135dc:	460d      	mov	r5, r1
 80135de:	f001 f9df 	bl	80149a0 <uxr_millis>
 80135e2:	4606      	mov	r6, r0
 80135e4:	4620      	mov	r0, r4
 80135e6:	f7ff fc57 	bl	8012e98 <uxr_flash_output_streams>
 80135ea:	2300      	movs	r3, #0
 80135ec:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80135f0:	4629      	mov	r1, r5
 80135f2:	e005      	b.n	8013600 <uxr_run_session_until_data+0x28>
 80135f4:	f001 f9d4 	bl	80149a0 <uxr_millis>
 80135f8:	1b83      	subs	r3, r0, r6
 80135fa:	1ae9      	subs	r1, r5, r3
 80135fc:	2900      	cmp	r1, #0
 80135fe:	dd07      	ble.n	8013610 <uxr_run_session_until_data+0x38>
 8013600:	4620      	mov	r0, r4
 8013602:	f7ff fe8f 	bl	8013324 <listen_message_reliably>
 8013606:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801360a:	2800      	cmp	r0, #0
 801360c:	d0f2      	beq.n	80135f4 <uxr_run_session_until_data+0x1c>
 801360e:	bd70      	pop	{r4, r5, r6, pc}
 8013610:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013614:	bd70      	pop	{r4, r5, r6, pc}
 8013616:	bf00      	nop

08013618 <uxr_run_session_until_confirm_delivery>:
 8013618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801361c:	4606      	mov	r6, r0
 801361e:	460d      	mov	r5, r1
 8013620:	f001 f9be 	bl	80149a0 <uxr_millis>
 8013624:	4607      	mov	r7, r0
 8013626:	4630      	mov	r0, r6
 8013628:	f7ff fc36 	bl	8012e98 <uxr_flash_output_streams>
 801362c:	2d00      	cmp	r5, #0
 801362e:	f106 0808 	add.w	r8, r6, #8
 8013632:	bfa8      	it	ge
 8013634:	462c      	movge	r4, r5
 8013636:	da07      	bge.n	8013648 <uxr_run_session_until_confirm_delivery+0x30>
 8013638:	e00e      	b.n	8013658 <uxr_run_session_until_confirm_delivery+0x40>
 801363a:	f7ff fe73 	bl	8013324 <listen_message_reliably>
 801363e:	f001 f9af 	bl	80149a0 <uxr_millis>
 8013642:	1bc3      	subs	r3, r0, r7
 8013644:	1aec      	subs	r4, r5, r3
 8013646:	d407      	bmi.n	8013658 <uxr_run_session_until_confirm_delivery+0x40>
 8013648:	4640      	mov	r0, r8
 801364a:	f001 f94d 	bl	80148e8 <uxr_output_streams_confirmed>
 801364e:	4603      	mov	r3, r0
 8013650:	4621      	mov	r1, r4
 8013652:	4630      	mov	r0, r6
 8013654:	2b00      	cmp	r3, #0
 8013656:	d0f0      	beq.n	801363a <uxr_run_session_until_confirm_delivery+0x22>
 8013658:	4640      	mov	r0, r8
 801365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801365e:	f001 b943 	b.w	80148e8 <uxr_output_streams_confirmed>
 8013662:	bf00      	nop

08013664 <uxr_run_session_until_all_status>:
 8013664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013668:	9c08      	ldr	r4, [sp, #32]
 801366a:	4606      	mov	r6, r0
 801366c:	460f      	mov	r7, r1
 801366e:	4691      	mov	r9, r2
 8013670:	461d      	mov	r5, r3
 8013672:	f7ff fc11 	bl	8012e98 <uxr_flash_output_streams>
 8013676:	b124      	cbz	r4, 8013682 <uxr_run_session_until_all_status+0x1e>
 8013678:	4622      	mov	r2, r4
 801367a:	21ff      	movs	r1, #255	@ 0xff
 801367c:	4628      	mov	r0, r5
 801367e:	f006 f8ab 	bl	80197d8 <memset>
 8013682:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8013686:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013688:	f001 f98a 	bl	80149a0 <uxr_millis>
 801368c:	3d01      	subs	r5, #1
 801368e:	f1a9 0902 	sub.w	r9, r9, #2
 8013692:	4680      	mov	r8, r0
 8013694:	4639      	mov	r1, r7
 8013696:	4630      	mov	r0, r6
 8013698:	f7ff fe44 	bl	8013324 <listen_message_reliably>
 801369c:	f001 f980 	bl	80149a0 <uxr_millis>
 80136a0:	eba0 0008 	sub.w	r0, r0, r8
 80136a4:	1a39      	subs	r1, r7, r0
 80136a6:	b344      	cbz	r4, 80136fa <uxr_run_session_until_all_status+0x96>
 80136a8:	4628      	mov	r0, r5
 80136aa:	46ac      	mov	ip, r5
 80136ac:	2301      	movs	r3, #1
 80136ae:	e002      	b.n	80136b6 <uxr_run_session_until_all_status+0x52>
 80136b0:	42a3      	cmp	r3, r4
 80136b2:	d20d      	bcs.n	80136d0 <uxr_run_session_until_all_status+0x6c>
 80136b4:	3301      	adds	r3, #1
 80136b6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80136ba:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80136be:	d1f7      	bne.n	80136b0 <uxr_run_session_until_all_status+0x4c>
 80136c0:	42a3      	cmp	r3, r4
 80136c2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80136c6:	d213      	bcs.n	80136f0 <uxr_run_session_until_all_status+0x8c>
 80136c8:	2a00      	cmp	r2, #0
 80136ca:	d0f3      	beq.n	80136b4 <uxr_run_session_until_all_status+0x50>
 80136cc:	2900      	cmp	r1, #0
 80136ce:	dce2      	bgt.n	8013696 <uxr_run_session_until_all_status+0x32>
 80136d0:	2300      	movs	r3, #0
 80136d2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80136d4:	442c      	add	r4, r5
 80136d6:	e001      	b.n	80136dc <uxr_run_session_until_all_status+0x78>
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d812      	bhi.n	8013702 <uxr_run_session_until_all_status+0x9e>
 80136dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80136e0:	4284      	cmp	r4, r0
 80136e2:	d1f9      	bne.n	80136d8 <uxr_run_session_until_all_status+0x74>
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	bf8c      	ite	hi
 80136e8:	2000      	movhi	r0, #0
 80136ea:	2001      	movls	r0, #1
 80136ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136f0:	2900      	cmp	r1, #0
 80136f2:	dded      	ble.n	80136d0 <uxr_run_session_until_all_status+0x6c>
 80136f4:	2a00      	cmp	r2, #0
 80136f6:	d1ce      	bne.n	8013696 <uxr_run_session_until_all_status+0x32>
 80136f8:	e7ea      	b.n	80136d0 <uxr_run_session_until_all_status+0x6c>
 80136fa:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80136fc:	2001      	movs	r0, #1
 80136fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013702:	2000      	movs	r0, #0
 8013704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013708 <wait_session_status>:
 8013708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801370c:	4604      	mov	r4, r0
 801370e:	b09d      	sub	sp, #116	@ 0x74
 8013710:	20ff      	movs	r0, #255	@ 0xff
 8013712:	7160      	strb	r0, [r4, #5]
 8013714:	9303      	str	r3, [sp, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	f000 80b6 	beq.w	8013888 <wait_session_status+0x180>
 801371c:	468a      	mov	sl, r1
 801371e:	4691      	mov	r9, r2
 8013720:	f04f 0b00 	mov.w	fp, #0
 8013724:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013726:	464a      	mov	r2, r9
 8013728:	e9d3 0500 	ldrd	r0, r5, [r3]
 801372c:	4651      	mov	r1, sl
 801372e:	47a8      	blx	r5
 8013730:	f001 f936 	bl	80149a0 <uxr_millis>
 8013734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013738:	4605      	mov	r5, r0
 801373a:	e009      	b.n	8013750 <wait_session_status+0x48>
 801373c:	f001 f930 	bl	80149a0 <uxr_millis>
 8013740:	1b40      	subs	r0, r0, r5
 8013742:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013746:	2b00      	cmp	r3, #0
 8013748:	dd40      	ble.n	80137cc <wait_session_status+0xc4>
 801374a:	7960      	ldrb	r0, [r4, #5]
 801374c:	28ff      	cmp	r0, #255	@ 0xff
 801374e:	d145      	bne.n	80137dc <wait_session_status+0xd4>
 8013750:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013752:	a908      	add	r1, sp, #32
 8013754:	6896      	ldr	r6, [r2, #8]
 8013756:	6810      	ldr	r0, [r2, #0]
 8013758:	aa09      	add	r2, sp, #36	@ 0x24
 801375a:	47b0      	blx	r6
 801375c:	2800      	cmp	r0, #0
 801375e:	d0ed      	beq.n	801373c <wait_session_status+0x34>
 8013760:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8013764:	a80c      	add	r0, sp, #48	@ 0x30
 8013766:	f7f8 fedd 	bl	800c524 <ucdr_init_buffer>
 801376a:	2600      	movs	r6, #0
 801376c:	f10d 031e 	add.w	r3, sp, #30
 8013770:	aa07      	add	r2, sp, #28
 8013772:	a90c      	add	r1, sp, #48	@ 0x30
 8013774:	4620      	mov	r0, r4
 8013776:	f88d 601c 	strb.w	r6, [sp, #28]
 801377a:	f000 fa87 	bl	8013c8c <uxr_read_session_header>
 801377e:	2800      	cmp	r0, #0
 8013780:	d0dc      	beq.n	801373c <wait_session_status+0x34>
 8013782:	4631      	mov	r1, r6
 8013784:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013788:	f000 ffb6 	bl	80146f8 <uxr_stream_id_from_raw>
 801378c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013790:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013794:	9302      	str	r3, [sp, #8]
 8013796:	2f01      	cmp	r7, #1
 8013798:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801379c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80137a0:	d05c      	beq.n	801385c <wait_session_status+0x154>
 80137a2:	2f02      	cmp	r7, #2
 80137a4:	d020      	beq.n	80137e8 <wait_session_status+0xe0>
 80137a6:	2f00      	cmp	r7, #0
 80137a8:	d1c8      	bne.n	801373c <wait_session_status+0x34>
 80137aa:	4639      	mov	r1, r7
 80137ac:	4638      	mov	r0, r7
 80137ae:	f000 ffa3 	bl	80146f8 <uxr_stream_id_from_raw>
 80137b2:	a90c      	add	r1, sp, #48	@ 0x30
 80137b4:	4602      	mov	r2, r0
 80137b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80137b8:	4620      	mov	r0, r4
 80137ba:	f7ff fc2b 	bl	8013014 <read_submessage_list>
 80137be:	f001 f8ef 	bl	80149a0 <uxr_millis>
 80137c2:	1b40      	subs	r0, r0, r5
 80137c4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	dcbe      	bgt.n	801374a <wait_session_status+0x42>
 80137cc:	9b03      	ldr	r3, [sp, #12]
 80137ce:	7960      	ldrb	r0, [r4, #5]
 80137d0:	f10b 0b01 	add.w	fp, fp, #1
 80137d4:	455b      	cmp	r3, fp
 80137d6:	d001      	beq.n	80137dc <wait_session_status+0xd4>
 80137d8:	28ff      	cmp	r0, #255	@ 0xff
 80137da:	d0a3      	beq.n	8013724 <wait_session_status+0x1c>
 80137dc:	38ff      	subs	r0, #255	@ 0xff
 80137de:	bf18      	it	ne
 80137e0:	2001      	movne	r0, #1
 80137e2:	b01d      	add	sp, #116	@ 0x74
 80137e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80137ec:	9304      	str	r3, [sp, #16]
 80137ee:	4631      	mov	r1, r6
 80137f0:	f104 0008 	add.w	r0, r4, #8
 80137f4:	f001 f86e 	bl	80148d4 <uxr_get_input_reliable_stream>
 80137f8:	4680      	mov	r8, r0
 80137fa:	b348      	cbz	r0, 8013850 <wait_session_status+0x148>
 80137fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137fe:	9205      	str	r2, [sp, #20]
 8013800:	a80c      	add	r0, sp, #48	@ 0x30
 8013802:	f7f8 febf 	bl	800c584 <ucdr_buffer_remaining>
 8013806:	4603      	mov	r3, r0
 8013808:	f10d 001d 	add.w	r0, sp, #29
 801380c:	9000      	str	r0, [sp, #0]
 801380e:	9a05      	ldr	r2, [sp, #20]
 8013810:	9902      	ldr	r1, [sp, #8]
 8013812:	4640      	mov	r0, r8
 8013814:	f004 f924 	bl	8017a60 <uxr_receive_reliable_message>
 8013818:	b1d0      	cbz	r0, 8013850 <wait_session_status+0x148>
 801381a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d03a      	beq.n	8013898 <wait_session_status+0x190>
 8013822:	9f04      	ldr	r7, [sp, #16]
 8013824:	e00a      	b.n	801383c <wait_session_status+0x134>
 8013826:	f04f 0302 	mov.w	r3, #2
 801382a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801382e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8013832:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8013836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013838:	f7ff fbec 	bl	8013014 <read_submessage_list>
 801383c:	a914      	add	r1, sp, #80	@ 0x50
 801383e:	2204      	movs	r2, #4
 8013840:	4640      	mov	r0, r8
 8013842:	f004 f98d 	bl	8017b60 <uxr_next_input_reliable_buffer_available>
 8013846:	4603      	mov	r3, r0
 8013848:	a914      	add	r1, sp, #80	@ 0x50
 801384a:	4620      	mov	r0, r4
 801384c:	2b00      	cmp	r3, #0
 801384e:	d1ea      	bne.n	8013826 <wait_session_status+0x11e>
 8013850:	9904      	ldr	r1, [sp, #16]
 8013852:	4632      	mov	r2, r6
 8013854:	4620      	mov	r0, r4
 8013856:	f7ff fa57 	bl	8012d08 <write_submessage_acknack.isra.0>
 801385a:	e76f      	b.n	801373c <wait_session_status+0x34>
 801385c:	4631      	mov	r1, r6
 801385e:	f104 0008 	add.w	r0, r4, #8
 8013862:	f001 f82d 	bl	80148c0 <uxr_get_input_best_effort_stream>
 8013866:	2800      	cmp	r0, #0
 8013868:	f43f af68 	beq.w	801373c <wait_session_status+0x34>
 801386c:	9902      	ldr	r1, [sp, #8]
 801386e:	f004 f863 	bl	8017938 <uxr_receive_best_effort_message>
 8013872:	2800      	cmp	r0, #0
 8013874:	f43f af62 	beq.w	801373c <wait_session_status+0x34>
 8013878:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801387c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801387e:	a90c      	add	r1, sp, #48	@ 0x30
 8013880:	4620      	mov	r0, r4
 8013882:	f7ff fbc7 	bl	8013014 <read_submessage_list>
 8013886:	e759      	b.n	801373c <wait_session_status+0x34>
 8013888:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801388a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801388e:	47a0      	blx	r4
 8013890:	2001      	movs	r0, #1
 8013892:	b01d      	add	sp, #116	@ 0x74
 8013894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013898:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801389c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801389e:	a90c      	add	r1, sp, #48	@ 0x30
 80138a0:	4620      	mov	r0, r4
 80138a2:	f7ff fbb7 	bl	8013014 <read_submessage_list>
 80138a6:	e7bc      	b.n	8013822 <wait_session_status+0x11a>

080138a8 <uxr_delete_session_retries>:
 80138a8:	b530      	push	{r4, r5, lr}
 80138aa:	b08f      	sub	sp, #60	@ 0x3c
 80138ac:	4604      	mov	r4, r0
 80138ae:	460d      	mov	r5, r1
 80138b0:	f000 fa2e 	bl	8013d10 <uxr_session_header_offset>
 80138b4:	2300      	movs	r3, #0
 80138b6:	2210      	movs	r2, #16
 80138b8:	9000      	str	r0, [sp, #0]
 80138ba:	a902      	add	r1, sp, #8
 80138bc:	a806      	add	r0, sp, #24
 80138be:	f7f8 fe1f 	bl	800c500 <ucdr_init_buffer_origin_offset>
 80138c2:	a906      	add	r1, sp, #24
 80138c4:	4620      	mov	r0, r4
 80138c6:	f000 f973 	bl	8013bb0 <uxr_buffer_delete_session>
 80138ca:	2200      	movs	r2, #0
 80138cc:	4611      	mov	r1, r2
 80138ce:	9b06      	ldr	r3, [sp, #24]
 80138d0:	4620      	mov	r0, r4
 80138d2:	f000 f9c7 	bl	8013c64 <uxr_stamp_session_header>
 80138d6:	a806      	add	r0, sp, #24
 80138d8:	f7f8 fe50 	bl	800c57c <ucdr_buffer_length>
 80138dc:	462b      	mov	r3, r5
 80138de:	4602      	mov	r2, r0
 80138e0:	a902      	add	r1, sp, #8
 80138e2:	4620      	mov	r0, r4
 80138e4:	f7ff ff10 	bl	8013708 <wait_session_status>
 80138e8:	b118      	cbz	r0, 80138f2 <uxr_delete_session_retries+0x4a>
 80138ea:	7960      	ldrb	r0, [r4, #5]
 80138ec:	fab0 f080 	clz	r0, r0
 80138f0:	0940      	lsrs	r0, r0, #5
 80138f2:	b00f      	add	sp, #60	@ 0x3c
 80138f4:	bd30      	pop	{r4, r5, pc}
 80138f6:	bf00      	nop

080138f8 <uxr_create_session>:
 80138f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fc:	f100 0b08 	add.w	fp, r0, #8
 8013900:	b0ab      	sub	sp, #172	@ 0xac
 8013902:	4604      	mov	r4, r0
 8013904:	4658      	mov	r0, fp
 8013906:	f000 ff2b 	bl	8014760 <uxr_reset_stream_storage>
 801390a:	4620      	mov	r0, r4
 801390c:	f000 fa00 	bl	8013d10 <uxr_session_header_offset>
 8013910:	2300      	movs	r3, #0
 8013912:	9000      	str	r0, [sp, #0]
 8013914:	221c      	movs	r2, #28
 8013916:	a90b      	add	r1, sp, #44	@ 0x2c
 8013918:	a812      	add	r0, sp, #72	@ 0x48
 801391a:	f7f8 fdf1 	bl	800c500 <ucdr_init_buffer_origin_offset>
 801391e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013920:	8a1a      	ldrh	r2, [r3, #16]
 8013922:	3a04      	subs	r2, #4
 8013924:	b292      	uxth	r2, r2
 8013926:	a912      	add	r1, sp, #72	@ 0x48
 8013928:	4620      	mov	r0, r4
 801392a:	f000 f917 	bl	8013b5c <uxr_buffer_create_session>
 801392e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013930:	4620      	mov	r0, r4
 8013932:	f000 f983 	bl	8013c3c <uxr_stamp_create_session_header>
 8013936:	a812      	add	r0, sp, #72	@ 0x48
 8013938:	f7f8 fe20 	bl	800c57c <ucdr_buffer_length>
 801393c:	23ff      	movs	r3, #255	@ 0xff
 801393e:	7163      	strb	r3, [r4, #5]
 8013940:	230a      	movs	r3, #10
 8013942:	46da      	mov	sl, fp
 8013944:	9303      	str	r3, [sp, #12]
 8013946:	4683      	mov	fp, r0
 8013948:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801394a:	465a      	mov	r2, fp
 801394c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013950:	a90b      	add	r1, sp, #44	@ 0x2c
 8013952:	47a8      	blx	r5
 8013954:	f001 f824 	bl	80149a0 <uxr_millis>
 8013958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801395c:	4605      	mov	r5, r0
 801395e:	e009      	b.n	8013974 <uxr_create_session+0x7c>
 8013960:	f001 f81e 	bl	80149a0 <uxr_millis>
 8013964:	1b40      	subs	r0, r0, r5
 8013966:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801396a:	2b00      	cmp	r3, #0
 801396c:	7962      	ldrb	r2, [r4, #5]
 801396e:	dd38      	ble.n	80139e2 <uxr_create_session+0xea>
 8013970:	2aff      	cmp	r2, #255	@ 0xff
 8013972:	d13c      	bne.n	80139ee <uxr_create_session+0xf6>
 8013974:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013976:	a907      	add	r1, sp, #28
 8013978:	6896      	ldr	r6, [r2, #8]
 801397a:	6810      	ldr	r0, [r2, #0]
 801397c:	aa08      	add	r2, sp, #32
 801397e:	47b0      	blx	r6
 8013980:	2800      	cmp	r0, #0
 8013982:	d0ed      	beq.n	8013960 <uxr_create_session+0x68>
 8013984:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013988:	a81a      	add	r0, sp, #104	@ 0x68
 801398a:	f7f8 fdcb 	bl	800c524 <ucdr_init_buffer>
 801398e:	2600      	movs	r6, #0
 8013990:	f10d 031a 	add.w	r3, sp, #26
 8013994:	aa06      	add	r2, sp, #24
 8013996:	a91a      	add	r1, sp, #104	@ 0x68
 8013998:	4620      	mov	r0, r4
 801399a:	f88d 6018 	strb.w	r6, [sp, #24]
 801399e:	f000 f975 	bl	8013c8c <uxr_read_session_header>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d0dc      	beq.n	8013960 <uxr_create_session+0x68>
 80139a6:	4631      	mov	r1, r6
 80139a8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80139ac:	f000 fea4 	bl	80146f8 <uxr_stream_id_from_raw>
 80139b0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80139b4:	2e01      	cmp	r6, #1
 80139b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80139ba:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80139be:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80139c2:	d053      	beq.n	8013a6c <uxr_create_session+0x174>
 80139c4:	2e02      	cmp	r6, #2
 80139c6:	d018      	beq.n	80139fa <uxr_create_session+0x102>
 80139c8:	2e00      	cmp	r6, #0
 80139ca:	d1c9      	bne.n	8013960 <uxr_create_session+0x68>
 80139cc:	4631      	mov	r1, r6
 80139ce:	4630      	mov	r0, r6
 80139d0:	f000 fe92 	bl	80146f8 <uxr_stream_id_from_raw>
 80139d4:	a91a      	add	r1, sp, #104	@ 0x68
 80139d6:	4602      	mov	r2, r0
 80139d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80139da:	4620      	mov	r0, r4
 80139dc:	f7ff fb1a 	bl	8013014 <read_submessage_list>
 80139e0:	e7be      	b.n	8013960 <uxr_create_session+0x68>
 80139e2:	9b03      	ldr	r3, [sp, #12]
 80139e4:	3b01      	subs	r3, #1
 80139e6:	9303      	str	r3, [sp, #12]
 80139e8:	d001      	beq.n	80139ee <uxr_create_session+0xf6>
 80139ea:	2aff      	cmp	r2, #255	@ 0xff
 80139ec:	d0ac      	beq.n	8013948 <uxr_create_session+0x50>
 80139ee:	2a00      	cmp	r2, #0
 80139f0:	d051      	beq.n	8013a96 <uxr_create_session+0x19e>
 80139f2:	2000      	movs	r0, #0
 80139f4:	b02b      	add	sp, #172	@ 0xac
 80139f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80139fe:	9304      	str	r3, [sp, #16]
 8013a00:	4639      	mov	r1, r7
 8013a02:	4650      	mov	r0, sl
 8013a04:	f000 ff66 	bl	80148d4 <uxr_get_input_reliable_stream>
 8013a08:	4680      	mov	r8, r0
 8013a0a:	b348      	cbz	r0, 8013a60 <uxr_create_session+0x168>
 8013a0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013a0e:	9205      	str	r2, [sp, #20]
 8013a10:	a81a      	add	r0, sp, #104	@ 0x68
 8013a12:	f7f8 fdb7 	bl	800c584 <ucdr_buffer_remaining>
 8013a16:	4603      	mov	r3, r0
 8013a18:	f10d 0019 	add.w	r0, sp, #25
 8013a1c:	9000      	str	r0, [sp, #0]
 8013a1e:	9a05      	ldr	r2, [sp, #20]
 8013a20:	4649      	mov	r1, r9
 8013a22:	4640      	mov	r0, r8
 8013a24:	f004 f81c 	bl	8017a60 <uxr_receive_reliable_message>
 8013a28:	b1d0      	cbz	r0, 8013a60 <uxr_create_session+0x168>
 8013a2a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d038      	beq.n	8013aa4 <uxr_create_session+0x1ac>
 8013a32:	9e04      	ldr	r6, [sp, #16]
 8013a34:	e00a      	b.n	8013a4c <uxr_create_session+0x154>
 8013a36:	f04f 0302 	mov.w	r3, #2
 8013a3a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8013a3e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8013a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013a48:	f7ff fae4 	bl	8013014 <read_submessage_list>
 8013a4c:	a922      	add	r1, sp, #136	@ 0x88
 8013a4e:	2204      	movs	r2, #4
 8013a50:	4640      	mov	r0, r8
 8013a52:	f004 f885 	bl	8017b60 <uxr_next_input_reliable_buffer_available>
 8013a56:	4603      	mov	r3, r0
 8013a58:	a922      	add	r1, sp, #136	@ 0x88
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1ea      	bne.n	8013a36 <uxr_create_session+0x13e>
 8013a60:	9904      	ldr	r1, [sp, #16]
 8013a62:	463a      	mov	r2, r7
 8013a64:	4620      	mov	r0, r4
 8013a66:	f7ff f94f 	bl	8012d08 <write_submessage_acknack.isra.0>
 8013a6a:	e779      	b.n	8013960 <uxr_create_session+0x68>
 8013a6c:	4639      	mov	r1, r7
 8013a6e:	4650      	mov	r0, sl
 8013a70:	f000 ff26 	bl	80148c0 <uxr_get_input_best_effort_stream>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	f43f af73 	beq.w	8013960 <uxr_create_session+0x68>
 8013a7a:	4649      	mov	r1, r9
 8013a7c:	f003 ff5c 	bl	8017938 <uxr_receive_best_effort_message>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	f43f af6d 	beq.w	8013960 <uxr_create_session+0x68>
 8013a86:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013a8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013a8c:	a91a      	add	r1, sp, #104	@ 0x68
 8013a8e:	4620      	mov	r0, r4
 8013a90:	f7ff fac0 	bl	8013014 <read_submessage_list>
 8013a94:	e764      	b.n	8013960 <uxr_create_session+0x68>
 8013a96:	4650      	mov	r0, sl
 8013a98:	f000 fe62 	bl	8014760 <uxr_reset_stream_storage>
 8013a9c:	2001      	movs	r0, #1
 8013a9e:	b02b      	add	sp, #172	@ 0xac
 8013aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013aa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013aaa:	a91a      	add	r1, sp, #104	@ 0x68
 8013aac:	4620      	mov	r0, r4
 8013aae:	f7ff fab1 	bl	8013014 <read_submessage_list>
 8013ab2:	e7be      	b.n	8013a32 <uxr_create_session+0x13a>

08013ab4 <uxr_prepare_stream_to_write_submessage>:
 8013ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ab8:	b082      	sub	sp, #8
 8013aba:	4682      	mov	sl, r0
 8013abc:	4610      	mov	r0, r2
 8013abe:	4615      	mov	r5, r2
 8013ac0:	461e      	mov	r6, r3
 8013ac2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8013ac6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8013aca:	9101      	str	r1, [sp, #4]
 8013acc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8013ad0:	f000 ff60 	bl	8014994 <uxr_submessage_padding>
 8013ad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013ad8:	f105 0904 	add.w	r9, r5, #4
 8013adc:	2b01      	cmp	r3, #1
 8013ade:	4481      	add	r9, r0
 8013ae0:	d01d      	beq.n	8013b1e <uxr_prepare_stream_to_write_submessage+0x6a>
 8013ae2:	2b02      	cmp	r3, #2
 8013ae4:	d116      	bne.n	8013b14 <uxr_prepare_stream_to_write_submessage+0x60>
 8013ae6:	4621      	mov	r1, r4
 8013ae8:	f10a 0008 	add.w	r0, sl, #8
 8013aec:	f000 fede 	bl	80148ac <uxr_get_output_reliable_stream>
 8013af0:	4604      	mov	r4, r0
 8013af2:	b158      	cbz	r0, 8013b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8013af4:	4649      	mov	r1, r9
 8013af6:	4632      	mov	r2, r6
 8013af8:	f004 f9ee 	bl	8017ed8 <uxr_prepare_reliable_buffer_to_write>
 8013afc:	4604      	mov	r4, r0
 8013afe:	b12c      	cbz	r4, 8013b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8013b00:	4643      	mov	r3, r8
 8013b02:	b2aa      	uxth	r2, r5
 8013b04:	4639      	mov	r1, r7
 8013b06:	4630      	mov	r0, r6
 8013b08:	f000 ff04 	bl	8014914 <uxr_buffer_submessage_header>
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	b002      	add	sp, #8
 8013b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b14:	2400      	movs	r4, #0
 8013b16:	4620      	mov	r0, r4
 8013b18:	b002      	add	sp, #8
 8013b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b1e:	4621      	mov	r1, r4
 8013b20:	f10a 0008 	add.w	r0, sl, #8
 8013b24:	f000 feba 	bl	801489c <uxr_get_output_best_effort_stream>
 8013b28:	4604      	mov	r4, r0
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	d0ee      	beq.n	8013b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8013b2e:	4649      	mov	r1, r9
 8013b30:	4632      	mov	r2, r6
 8013b32:	f004 f901 	bl	8017d38 <uxr_prepare_best_effort_buffer_to_write>
 8013b36:	4604      	mov	r4, r0
 8013b38:	e7e1      	b.n	8013afe <uxr_prepare_stream_to_write_submessage+0x4a>
 8013b3a:	bf00      	nop

08013b3c <uxr_init_session_info>:
 8013b3c:	0e13      	lsrs	r3, r2, #24
 8013b3e:	7043      	strb	r3, [r0, #1]
 8013b40:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8013b44:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013b48:	7001      	strb	r1, [r0, #0]
 8013b4a:	70c3      	strb	r3, [r0, #3]
 8013b4c:	2109      	movs	r1, #9
 8013b4e:	23ff      	movs	r3, #255	@ 0xff
 8013b50:	f880 c002 	strb.w	ip, [r0, #2]
 8013b54:	7102      	strb	r2, [r0, #4]
 8013b56:	80c1      	strh	r1, [r0, #6]
 8013b58:	7143      	strb	r3, [r0, #5]
 8013b5a:	4770      	bx	lr

08013b5c <uxr_buffer_create_session>:
 8013b5c:	b530      	push	{r4, r5, lr}
 8013b5e:	b089      	sub	sp, #36	@ 0x24
 8013b60:	2300      	movs	r3, #0
 8013b62:	4d12      	ldr	r5, [pc, #72]	@ (8013bac <uxr_buffer_create_session+0x50>)
 8013b64:	9307      	str	r3, [sp, #28]
 8013b66:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	80c2      	strh	r2, [r0, #6]
 8013b70:	f88d 2004 	strb.w	r2, [sp, #4]
 8013b74:	682a      	ldr	r2, [r5, #0]
 8013b76:	9200      	str	r2, [sp, #0]
 8013b78:	88aa      	ldrh	r2, [r5, #4]
 8013b7a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013b7e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8013b82:	9202      	str	r2, [sp, #8]
 8013b84:	460c      	mov	r4, r1
 8013b86:	7802      	ldrb	r2, [r0, #0]
 8013b88:	9303      	str	r3, [sp, #12]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013b90:	4620      	mov	r0, r4
 8013b92:	2210      	movs	r2, #16
 8013b94:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013b98:	9306      	str	r3, [sp, #24]
 8013b9a:	f000 febb 	bl	8014914 <uxr_buffer_submessage_header>
 8013b9e:	4669      	mov	r1, sp
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f001 feff 	bl	80159a4 <uxr_serialize_CREATE_CLIENT_Payload>
 8013ba6:	b009      	add	sp, #36	@ 0x24
 8013ba8:	bd30      	pop	{r4, r5, pc}
 8013baa:	bf00      	nop
 8013bac:	0801ba98 	.word	0x0801ba98

08013bb0 <uxr_buffer_delete_session>:
 8013bb0:	b510      	push	{r4, lr}
 8013bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8013be4 <uxr_buffer_delete_session+0x34>)
 8013bb4:	b082      	sub	sp, #8
 8013bb6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8013bba:	f8ad c006 	strh.w	ip, [sp, #6]
 8013bbe:	460c      	mov	r4, r1
 8013bc0:	2202      	movs	r2, #2
 8013bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013bc6:	80c2      	strh	r2, [r0, #6]
 8013bc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013bcc:	2204      	movs	r2, #4
 8013bce:	2300      	movs	r3, #0
 8013bd0:	2103      	movs	r1, #3
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 fe9e 	bl	8014914 <uxr_buffer_submessage_header>
 8013bd8:	a901      	add	r1, sp, #4
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f001 ff88 	bl	8015af0 <uxr_serialize_DELETE_Payload>
 8013be0:	b002      	add	sp, #8
 8013be2:	bd10      	pop	{r4, pc}
 8013be4:	0801ba98 	.word	0x0801ba98

08013be8 <uxr_read_create_session_status>:
 8013be8:	b510      	push	{r4, lr}
 8013bea:	b088      	sub	sp, #32
 8013bec:	4604      	mov	r4, r0
 8013bee:	4608      	mov	r0, r1
 8013bf0:	a901      	add	r1, sp, #4
 8013bf2:	f001 ff8d 	bl	8015b10 <uxr_deserialize_STATUS_AGENT_Payload>
 8013bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bfa:	7163      	strb	r3, [r4, #5]
 8013bfc:	b008      	add	sp, #32
 8013bfe:	bd10      	pop	{r4, pc}

08013c00 <uxr_read_delete_session_status>:
 8013c00:	b510      	push	{r4, lr}
 8013c02:	4604      	mov	r4, r0
 8013c04:	b084      	sub	sp, #16
 8013c06:	4608      	mov	r0, r1
 8013c08:	a902      	add	r1, sp, #8
 8013c0a:	f001 ffb1 	bl	8015b70 <uxr_deserialize_STATUS_Payload>
 8013c0e:	88e3      	ldrh	r3, [r4, #6]
 8013c10:	2b02      	cmp	r3, #2
 8013c12:	d001      	beq.n	8013c18 <uxr_read_delete_session_status+0x18>
 8013c14:	b004      	add	sp, #16
 8013c16:	bd10      	pop	{r4, pc}
 8013c18:	f10d 000a 	add.w	r0, sp, #10
 8013c1c:	f7fe feca 	bl	80129b4 <uxr_object_id_from_raw>
 8013c20:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013c24:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013c28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	2b02      	cmp	r3, #2
 8013c30:	bf04      	itt	eq
 8013c32:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8013c36:	7163      	strbeq	r3, [r4, #5]
 8013c38:	b004      	add	sp, #16
 8013c3a:	bd10      	pop	{r4, pc}

08013c3c <uxr_stamp_create_session_header>:
 8013c3c:	b510      	push	{r4, lr}
 8013c3e:	2208      	movs	r2, #8
 8013c40:	b08a      	sub	sp, #40	@ 0x28
 8013c42:	4604      	mov	r4, r0
 8013c44:	eb0d 0002 	add.w	r0, sp, r2
 8013c48:	f7f8 fc6c 	bl	800c524 <ucdr_init_buffer>
 8013c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c50:	9400      	str	r4, [sp, #0]
 8013c52:	2300      	movs	r3, #0
 8013c54:	461a      	mov	r2, r3
 8013c56:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8013c5a:	a802      	add	r0, sp, #8
 8013c5c:	f001 f854 	bl	8014d08 <uxr_serialize_message_header>
 8013c60:	b00a      	add	sp, #40	@ 0x28
 8013c62:	bd10      	pop	{r4, pc}

08013c64 <uxr_stamp_session_header>:
 8013c64:	b530      	push	{r4, r5, lr}
 8013c66:	b08d      	sub	sp, #52	@ 0x34
 8013c68:	4604      	mov	r4, r0
 8013c6a:	460d      	mov	r5, r1
 8013c6c:	9203      	str	r2, [sp, #12]
 8013c6e:	4619      	mov	r1, r3
 8013c70:	a804      	add	r0, sp, #16
 8013c72:	2208      	movs	r2, #8
 8013c74:	f7f8 fc56 	bl	800c524 <ucdr_init_buffer>
 8013c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c7c:	9b03      	ldr	r3, [sp, #12]
 8013c7e:	9400      	str	r4, [sp, #0]
 8013c80:	462a      	mov	r2, r5
 8013c82:	a804      	add	r0, sp, #16
 8013c84:	f001 f840 	bl	8014d08 <uxr_serialize_message_header>
 8013c88:	b00d      	add	sp, #52	@ 0x34
 8013c8a:	bd30      	pop	{r4, r5, pc}

08013c8c <uxr_read_session_header>:
 8013c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c90:	4607      	mov	r7, r0
 8013c92:	b084      	sub	sp, #16
 8013c94:	4608      	mov	r0, r1
 8013c96:	460c      	mov	r4, r1
 8013c98:	4615      	mov	r5, r2
 8013c9a:	461e      	mov	r6, r3
 8013c9c:	f7f8 fc72 	bl	800c584 <ucdr_buffer_remaining>
 8013ca0:	2808      	cmp	r0, #8
 8013ca2:	d803      	bhi.n	8013cac <uxr_read_session_header+0x20>
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	b004      	add	sp, #16
 8013ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cac:	f10d 080c 	add.w	r8, sp, #12
 8013cb0:	4633      	mov	r3, r6
 8013cb2:	462a      	mov	r2, r5
 8013cb4:	f8cd 8000 	str.w	r8, [sp]
 8013cb8:	4620      	mov	r0, r4
 8013cba:	f10d 010b 	add.w	r1, sp, #11
 8013cbe:	f001 f841 	bl	8014d44 <uxr_deserialize_message_header>
 8013cc2:	783a      	ldrb	r2, [r7, #0]
 8013cc4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d1eb      	bne.n	8013ca4 <uxr_read_session_header+0x18>
 8013ccc:	061b      	lsls	r3, r3, #24
 8013cce:	d41c      	bmi.n	8013d0a <uxr_read_session_header+0x7e>
 8013cd0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013cd4:	787b      	ldrb	r3, [r7, #1]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d003      	beq.n	8013ce2 <uxr_read_session_header+0x56>
 8013cda:	2001      	movs	r0, #1
 8013cdc:	f080 0001 	eor.w	r0, r0, #1
 8013ce0:	e7e1      	b.n	8013ca6 <uxr_read_session_header+0x1a>
 8013ce2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013ce6:	78bb      	ldrb	r3, [r7, #2]
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	f107 0102 	add.w	r1, r7, #2
 8013cee:	d1f4      	bne.n	8013cda <uxr_read_session_header+0x4e>
 8013cf0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013cf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d1ee      	bne.n	8013cda <uxr_read_session_header+0x4e>
 8013cfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013d00:	784b      	ldrb	r3, [r1, #1]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d1e9      	bne.n	8013cda <uxr_read_session_header+0x4e>
 8013d06:	2000      	movs	r0, #0
 8013d08:	e7e8      	b.n	8013cdc <uxr_read_session_header+0x50>
 8013d0a:	2001      	movs	r0, #1
 8013d0c:	e7cb      	b.n	8013ca6 <uxr_read_session_header+0x1a>
 8013d0e:	bf00      	nop

08013d10 <uxr_session_header_offset>:
 8013d10:	f990 3000 	ldrsb.w	r3, [r0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	bfac      	ite	ge
 8013d18:	2008      	movge	r0, #8
 8013d1a:	2004      	movlt	r0, #4
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop

08013d20 <uxr_init_base_object_request>:
 8013d20:	b510      	push	{r4, lr}
 8013d22:	88c3      	ldrh	r3, [r0, #6]
 8013d24:	b082      	sub	sp, #8
 8013d26:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013d2a:	9101      	str	r1, [sp, #4]
 8013d2c:	f1a3 010a 	sub.w	r1, r3, #10
 8013d30:	b289      	uxth	r1, r1
 8013d32:	42a1      	cmp	r1, r4
 8013d34:	d80e      	bhi.n	8013d54 <uxr_init_base_object_request+0x34>
 8013d36:	3301      	adds	r3, #1
 8013d38:	b29c      	uxth	r4, r3
 8013d3a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	80c4      	strh	r4, [r0, #6]
 8013d42:	9801      	ldr	r0, [sp, #4]
 8013d44:	7011      	strb	r1, [r2, #0]
 8013d46:	7053      	strb	r3, [r2, #1]
 8013d48:	1c91      	adds	r1, r2, #2
 8013d4a:	f7fe fe47 	bl	80129dc <uxr_object_id_to_raw>
 8013d4e:	4620      	mov	r0, r4
 8013d50:	b002      	add	sp, #8
 8013d52:	bd10      	pop	{r4, pc}
 8013d54:	230a      	movs	r3, #10
 8013d56:	2100      	movs	r1, #0
 8013d58:	461c      	mov	r4, r3
 8013d5a:	e7f1      	b.n	8013d40 <uxr_init_base_object_request+0x20>

08013d5c <uxr_parse_base_object_request>:
 8013d5c:	b570      	push	{r4, r5, r6, lr}
 8013d5e:	4604      	mov	r4, r0
 8013d60:	3002      	adds	r0, #2
 8013d62:	460d      	mov	r5, r1
 8013d64:	4616      	mov	r6, r2
 8013d66:	f7fe fe25 	bl	80129b4 <uxr_object_id_from_raw>
 8013d6a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013d6e:	8028      	strh	r0, [r5, #0]
 8013d70:	806b      	strh	r3, [r5, #2]
 8013d72:	7822      	ldrb	r2, [r4, #0]
 8013d74:	7863      	ldrb	r3, [r4, #1]
 8013d76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013d7a:	8033      	strh	r3, [r6, #0]
 8013d7c:	bd70      	pop	{r4, r5, r6, pc}
 8013d7e:	bf00      	nop

08013d80 <uxr_init_framing_io>:
 8013d80:	2300      	movs	r3, #0
 8013d82:	7041      	strb	r1, [r0, #1]
 8013d84:	7003      	strb	r3, [r0, #0]
 8013d86:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop

08013d8c <uxr_write_framed_msg>:
 8013d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d90:	4617      	mov	r7, r2
 8013d92:	7842      	ldrb	r2, [r0, #1]
 8013d94:	b083      	sub	sp, #12
 8013d96:	460e      	mov	r6, r1
 8013d98:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013d9c:	469a      	mov	sl, r3
 8013d9e:	2901      	cmp	r1, #1
 8013da0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8013da4:	4604      	mov	r4, r0
 8013da6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013daa:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8013dae:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8013db2:	f240 8137 	bls.w	8014024 <uxr_write_framed_msg+0x298>
 8013db6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013dba:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8013dbe:	2901      	cmp	r1, #1
 8013dc0:	f04f 0202 	mov.w	r2, #2
 8013dc4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013dc8:	f240 808f 	bls.w	8013eea <uxr_write_framed_msg+0x15e>
 8013dcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013dce:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8013dd2:	b2dd      	uxtb	r5, r3
 8013dd4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013dd8:	2203      	movs	r2, #3
 8013dda:	2901      	cmp	r1, #1
 8013ddc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013de0:	f240 809a 	bls.w	8013f18 <uxr_write_framed_msg+0x18c>
 8013de4:	18a1      	adds	r1, r4, r2
 8013de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013de8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8013dec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013df0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013df4:	3201      	adds	r2, #1
 8013df6:	2801      	cmp	r0, #1
 8013df8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013dfc:	f240 80a0 	bls.w	8013f40 <uxr_write_framed_msg+0x1b4>
 8013e00:	18a0      	adds	r0, r4, r2
 8013e02:	3201      	adds	r2, #1
 8013e04:	b2d2      	uxtb	r2, r2
 8013e06:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013e0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	f000 80a9 	beq.w	8013f66 <uxr_write_framed_msg+0x1da>
 8013e14:	f04f 0900 	mov.w	r9, #0
 8013e18:	46c8      	mov	r8, r9
 8013e1a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013e1e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013e22:	2901      	cmp	r1, #1
 8013e24:	f240 80c3 	bls.w	8013fae <uxr_write_framed_msg+0x222>
 8013e28:	2a29      	cmp	r2, #41	@ 0x29
 8013e2a:	f200 809f 	bhi.w	8013f6c <uxr_write_framed_msg+0x1e0>
 8013e2e:	18a1      	adds	r1, r4, r2
 8013e30:	3201      	adds	r2, #1
 8013e32:	b2d2      	uxtb	r2, r2
 8013e34:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8013e38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e3c:	ea89 0303 	eor.w	r3, r9, r3
 8013e40:	498c      	ldr	r1, [pc, #560]	@ (8014074 <uxr_write_framed_msg+0x2e8>)
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	f108 0801 	add.w	r8, r8, #1
 8013e48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013e4c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013e50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e52:	4543      	cmp	r3, r8
 8013e54:	d8e1      	bhi.n	8013e1a <uxr_write_framed_msg+0x8e>
 8013e56:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013e5a:	fa5f f889 	uxtb.w	r8, r9
 8013e5e:	9301      	str	r3, [sp, #4]
 8013e60:	f04f 0900 	mov.w	r9, #0
 8013e64:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8013e68:	fa5f f18a 	uxtb.w	r1, sl
 8013e6c:	2901      	cmp	r1, #1
 8013e6e:	d921      	bls.n	8013eb4 <uxr_write_framed_msg+0x128>
 8013e70:	2a29      	cmp	r2, #41	@ 0x29
 8013e72:	f240 80af 	bls.w	8013fd4 <uxr_write_framed_msg+0x248>
 8013e76:	2500      	movs	r5, #0
 8013e78:	e000      	b.n	8013e7c <uxr_write_framed_msg+0xf0>
 8013e7a:	b160      	cbz	r0, 8013e96 <uxr_write_framed_msg+0x10a>
 8013e7c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013e80:	1b52      	subs	r2, r2, r5
 8013e82:	465b      	mov	r3, fp
 8013e84:	4421      	add	r1, r4
 8013e86:	4638      	mov	r0, r7
 8013e88:	47b0      	blx	r6
 8013e8a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013e8e:	4405      	add	r5, r0
 8013e90:	4295      	cmp	r5, r2
 8013e92:	d3f2      	bcc.n	8013e7a <uxr_write_framed_msg+0xee>
 8013e94:	d003      	beq.n	8013e9e <uxr_write_framed_msg+0x112>
 8013e96:	2000      	movs	r0, #0
 8013e98:	b003      	add	sp, #12
 8013e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e9e:	fa5f f18a 	uxtb.w	r1, sl
 8013ea2:	f04f 0300 	mov.w	r3, #0
 8013ea6:	2901      	cmp	r1, #1
 8013ea8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013eac:	f04f 0200 	mov.w	r2, #0
 8013eb0:	f200 8090 	bhi.w	8013fd4 <uxr_write_framed_msg+0x248>
 8013eb4:	1c51      	adds	r1, r2, #1
 8013eb6:	b2c9      	uxtb	r1, r1
 8013eb8:	2929      	cmp	r1, #41	@ 0x29
 8013eba:	d8dc      	bhi.n	8013e76 <uxr_write_framed_msg+0xea>
 8013ebc:	18a5      	adds	r5, r4, r2
 8013ebe:	4421      	add	r1, r4
 8013ec0:	3202      	adds	r2, #2
 8013ec2:	f088 0820 	eor.w	r8, r8, #32
 8013ec6:	4648      	mov	r0, r9
 8013ec8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013ecc:	b2d2      	uxtb	r2, r2
 8013ece:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8013ed2:	f04f 0901 	mov.w	r9, #1
 8013ed6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013eda:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	f040 8085 	bne.w	8013fee <uxr_write_framed_msg+0x262>
 8013ee4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ee8:	e7bc      	b.n	8013e64 <uxr_write_framed_msg+0xd8>
 8013eea:	4611      	mov	r1, r2
 8013eec:	f04f 0c03 	mov.w	ip, #3
 8013ef0:	2204      	movs	r2, #4
 8013ef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ef4:	4421      	add	r1, r4
 8013ef6:	b2dd      	uxtb	r5, r3
 8013ef8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013efc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8013f00:	44a4      	add	ip, r4
 8013f02:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013f06:	f080 0020 	eor.w	r0, r0, #32
 8013f0a:	2901      	cmp	r1, #1
 8013f0c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013f10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f14:	f63f af66 	bhi.w	8013de4 <uxr_write_framed_msg+0x58>
 8013f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f1a:	18a0      	adds	r0, r4, r2
 8013f1c:	f085 0520 	eor.w	r5, r5, #32
 8013f20:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013f24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013f28:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8013f2c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013f30:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013f34:	3202      	adds	r2, #2
 8013f36:	2801      	cmp	r0, #1
 8013f38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f3c:	f63f af60 	bhi.w	8013e00 <uxr_write_framed_msg+0x74>
 8013f40:	1c50      	adds	r0, r2, #1
 8013f42:	18a5      	adds	r5, r4, r2
 8013f44:	fa54 f080 	uxtab	r0, r4, r0
 8013f48:	3202      	adds	r2, #2
 8013f4a:	f081 0120 	eor.w	r1, r1, #32
 8013f4e:	b2d2      	uxtb	r2, r2
 8013f50:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013f54:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8013f58:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013f5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f47f af57 	bne.w	8013e14 <uxr_write_framed_msg+0x88>
 8013f66:	9301      	str	r3, [sp, #4]
 8013f68:	4698      	mov	r8, r3
 8013f6a:	e779      	b.n	8013e60 <uxr_write_framed_msg+0xd4>
 8013f6c:	2500      	movs	r5, #0
 8013f6e:	e001      	b.n	8013f74 <uxr_write_framed_msg+0x1e8>
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d090      	beq.n	8013e96 <uxr_write_framed_msg+0x10a>
 8013f74:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013f78:	1b52      	subs	r2, r2, r5
 8013f7a:	465b      	mov	r3, fp
 8013f7c:	4421      	add	r1, r4
 8013f7e:	4638      	mov	r0, r7
 8013f80:	47b0      	blx	r6
 8013f82:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013f86:	4405      	add	r5, r0
 8013f88:	4295      	cmp	r5, r2
 8013f8a:	d3f1      	bcc.n	8013f70 <uxr_write_framed_msg+0x1e4>
 8013f8c:	d183      	bne.n	8013e96 <uxr_write_framed_msg+0x10a>
 8013f8e:	f04f 0300 	mov.w	r3, #0
 8013f92:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f98:	4543      	cmp	r3, r8
 8013f9a:	d964      	bls.n	8014066 <uxr_write_framed_msg+0x2da>
 8013f9c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013fa0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013fa4:	2901      	cmp	r1, #1
 8013fa6:	f04f 0200 	mov.w	r2, #0
 8013faa:	f63f af3d 	bhi.w	8013e28 <uxr_write_framed_msg+0x9c>
 8013fae:	1c51      	adds	r1, r2, #1
 8013fb0:	b2c9      	uxtb	r1, r1
 8013fb2:	2929      	cmp	r1, #41	@ 0x29
 8013fb4:	d8da      	bhi.n	8013f6c <uxr_write_framed_msg+0x1e0>
 8013fb6:	18a0      	adds	r0, r4, r2
 8013fb8:	4421      	add	r1, r4
 8013fba:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8013fbe:	3202      	adds	r2, #2
 8013fc0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8013fc4:	b2d2      	uxtb	r2, r2
 8013fc6:	f083 0020 	eor.w	r0, r3, #32
 8013fca:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8013fce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013fd2:	e733      	b.n	8013e3c <uxr_write_framed_msg+0xb0>
 8013fd4:	18a1      	adds	r1, r4, r2
 8013fd6:	3201      	adds	r2, #1
 8013fd8:	4648      	mov	r0, r9
 8013fda:	b2d2      	uxtb	r2, r2
 8013fdc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013fe0:	f04f 0901 	mov.w	r9, #1
 8013fe4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	f43f af7b 	beq.w	8013ee4 <uxr_write_framed_msg+0x158>
 8013fee:	2500      	movs	r5, #0
 8013ff0:	e002      	b.n	8013ff8 <uxr_write_framed_msg+0x26c>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	f43f af4f 	beq.w	8013e96 <uxr_write_framed_msg+0x10a>
 8013ff8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013ffc:	1b52      	subs	r2, r2, r5
 8013ffe:	465b      	mov	r3, fp
 8014000:	4421      	add	r1, r4
 8014002:	4638      	mov	r0, r7
 8014004:	47b0      	blx	r6
 8014006:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801400a:	4405      	add	r5, r0
 801400c:	4295      	cmp	r5, r2
 801400e:	d3f0      	bcc.n	8013ff2 <uxr_write_framed_msg+0x266>
 8014010:	f47f af41 	bne.w	8013e96 <uxr_write_framed_msg+0x10a>
 8014014:	2300      	movs	r3, #0
 8014016:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801401a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801401c:	b298      	uxth	r0, r3
 801401e:	b003      	add	sp, #12
 8014020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014024:	217d      	movs	r1, #125	@ 0x7d
 8014026:	f082 0220 	eor.w	r2, r2, #32
 801402a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801402e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014032:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014036:	2901      	cmp	r1, #1
 8014038:	f04f 0203 	mov.w	r2, #3
 801403c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014040:	d804      	bhi.n	801404c <uxr_write_framed_msg+0x2c0>
 8014042:	4611      	mov	r1, r2
 8014044:	f04f 0c04 	mov.w	ip, #4
 8014048:	2205      	movs	r2, #5
 801404a:	e752      	b.n	8013ef2 <uxr_write_framed_msg+0x166>
 801404c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801404e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014052:	b2dd      	uxtb	r5, r3
 8014054:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014058:	2204      	movs	r2, #4
 801405a:	2901      	cmp	r1, #1
 801405c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014060:	f63f aec0 	bhi.w	8013de4 <uxr_write_framed_msg+0x58>
 8014064:	e758      	b.n	8013f18 <uxr_write_framed_msg+0x18c>
 8014066:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801406a:	fa5f f889 	uxtb.w	r8, r9
 801406e:	9301      	str	r3, [sp, #4]
 8014070:	2200      	movs	r2, #0
 8014072:	e6f5      	b.n	8013e60 <uxr_write_framed_msg+0xd4>
 8014074:	0801c854 	.word	0x0801c854

08014078 <uxr_framing_read_transport>:
 8014078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407c:	4604      	mov	r4, r0
 801407e:	b083      	sub	sp, #12
 8014080:	461f      	mov	r7, r3
 8014082:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014086:	4689      	mov	r9, r1
 8014088:	4692      	mov	sl, r2
 801408a:	f000 fc89 	bl	80149a0 <uxr_millis>
 801408e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014092:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014096:	42b3      	cmp	r3, r6
 8014098:	4680      	mov	r8, r0
 801409a:	d061      	beq.n	8014160 <uxr_framing_read_transport+0xe8>
 801409c:	d81c      	bhi.n	80140d8 <uxr_framing_read_transport+0x60>
 801409e:	1e75      	subs	r5, r6, #1
 80140a0:	1aed      	subs	r5, r5, r3
 80140a2:	b2ed      	uxtb	r5, r5
 80140a4:	2600      	movs	r6, #0
 80140a6:	455d      	cmp	r5, fp
 80140a8:	d81f      	bhi.n	80140ea <uxr_framing_read_transport+0x72>
 80140aa:	19ab      	adds	r3, r5, r6
 80140ac:	455b      	cmp	r3, fp
 80140ae:	bf84      	itt	hi
 80140b0:	ebab 0605 	subhi.w	r6, fp, r5
 80140b4:	b2f6      	uxtbhi	r6, r6
 80140b6:	b9ed      	cbnz	r5, 80140f4 <uxr_framing_read_transport+0x7c>
 80140b8:	f04f 0b00 	mov.w	fp, #0
 80140bc:	f000 fc70 	bl	80149a0 <uxr_millis>
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	eba0 0808 	sub.w	r8, r0, r8
 80140c6:	eba3 0308 	sub.w	r3, r3, r8
 80140ca:	4658      	mov	r0, fp
 80140cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140d0:	603b      	str	r3, [r7, #0]
 80140d2:	b003      	add	sp, #12
 80140d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d8:	2e00      	cmp	r6, #0
 80140da:	d049      	beq.n	8014170 <uxr_framing_read_transport+0xf8>
 80140dc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80140e0:	b2ed      	uxtb	r5, r5
 80140e2:	3e01      	subs	r6, #1
 80140e4:	455d      	cmp	r5, fp
 80140e6:	b2f6      	uxtb	r6, r6
 80140e8:	d9df      	bls.n	80140aa <uxr_framing_read_transport+0x32>
 80140ea:	fa5f f58b 	uxtb.w	r5, fp
 80140ee:	2600      	movs	r6, #0
 80140f0:	2d00      	cmp	r5, #0
 80140f2:	d0e1      	beq.n	80140b8 <uxr_framing_read_transport+0x40>
 80140f4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80140f8:	3102      	adds	r1, #2
 80140fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140fc:	9300      	str	r3, [sp, #0]
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	4421      	add	r1, r4
 8014102:	462a      	mov	r2, r5
 8014104:	4650      	mov	r0, sl
 8014106:	47c8      	blx	r9
 8014108:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801410c:	4a1a      	ldr	r2, [pc, #104]	@ (8014178 <uxr_framing_read_transport+0x100>)
 801410e:	4403      	add	r3, r0
 8014110:	0859      	lsrs	r1, r3, #1
 8014112:	fba2 2101 	umull	r2, r1, r2, r1
 8014116:	0889      	lsrs	r1, r1, #2
 8014118:	222a      	movs	r2, #42	@ 0x2a
 801411a:	fb02 3111 	mls	r1, r2, r1, r3
 801411e:	4683      	mov	fp, r0
 8014120:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014124:	2800      	cmp	r0, #0
 8014126:	d0c7      	beq.n	80140b8 <uxr_framing_read_transport+0x40>
 8014128:	42a8      	cmp	r0, r5
 801412a:	d1c7      	bne.n	80140bc <uxr_framing_read_transport+0x44>
 801412c:	2e00      	cmp	r6, #0
 801412e:	d0c5      	beq.n	80140bc <uxr_framing_read_transport+0x44>
 8014130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	3102      	adds	r1, #2
 8014136:	4632      	mov	r2, r6
 8014138:	4421      	add	r1, r4
 801413a:	2300      	movs	r3, #0
 801413c:	4650      	mov	r0, sl
 801413e:	47c8      	blx	r9
 8014140:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014144:	4a0c      	ldr	r2, [pc, #48]	@ (8014178 <uxr_framing_read_transport+0x100>)
 8014146:	180b      	adds	r3, r1, r0
 8014148:	0859      	lsrs	r1, r3, #1
 801414a:	fba2 1201 	umull	r1, r2, r2, r1
 801414e:	0892      	lsrs	r2, r2, #2
 8014150:	212a      	movs	r1, #42	@ 0x2a
 8014152:	fb01 3312 	mls	r3, r1, r2, r3
 8014156:	eb00 0b05 	add.w	fp, r0, r5
 801415a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801415e:	e7ad      	b.n	80140bc <uxr_framing_read_transport+0x44>
 8014160:	2600      	movs	r6, #0
 8014162:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8014166:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8014168:	d9bf      	bls.n	80140ea <uxr_framing_read_transport+0x72>
 801416a:	2102      	movs	r1, #2
 801416c:	2529      	movs	r5, #41	@ 0x29
 801416e:	e7c4      	b.n	80140fa <uxr_framing_read_transport+0x82>
 8014170:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8014174:	b2ed      	uxtb	r5, r5
 8014176:	e796      	b.n	80140a6 <uxr_framing_read_transport+0x2e>
 8014178:	30c30c31 	.word	0x30c30c31

0801417c <uxr_read_framed_msg>:
 801417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014180:	461e      	mov	r6, r3
 8014182:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014186:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801418a:	429d      	cmp	r5, r3
 801418c:	b083      	sub	sp, #12
 801418e:	4604      	mov	r4, r0
 8014190:	4688      	mov	r8, r1
 8014192:	4691      	mov	r9, r2
 8014194:	f000 8188 	beq.w	80144a8 <uxr_read_framed_msg+0x32c>
 8014198:	7823      	ldrb	r3, [r4, #0]
 801419a:	4dc1      	ldr	r5, [pc, #772]	@ (80144a0 <uxr_read_framed_msg+0x324>)
 801419c:	4fc1      	ldr	r7, [pc, #772]	@ (80144a4 <uxr_read_framed_msg+0x328>)
 801419e:	2b07      	cmp	r3, #7
 80141a0:	d8fd      	bhi.n	801419e <uxr_read_framed_msg+0x22>
 80141a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80141a6:	0115      	.short	0x0115
 80141a8:	00d600f6 	.word	0x00d600f6
 80141ac:	009000b9 	.word	0x009000b9
 80141b0:	0030004d 	.word	0x0030004d
 80141b4:	0008      	.short	0x0008
 80141b6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80141ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80141be:	4299      	cmp	r1, r3
 80141c0:	f000 814a 	beq.w	8014458 <uxr_read_framed_msg+0x2dc>
 80141c4:	18e2      	adds	r2, r4, r3
 80141c6:	7892      	ldrb	r2, [r2, #2]
 80141c8:	2a7d      	cmp	r2, #125	@ 0x7d
 80141ca:	f000 8199 	beq.w	8014500 <uxr_read_framed_msg+0x384>
 80141ce:	3301      	adds	r3, #1
 80141d0:	0858      	lsrs	r0, r3, #1
 80141d2:	fba5 1000 	umull	r1, r0, r5, r0
 80141d6:	0880      	lsrs	r0, r0, #2
 80141d8:	212a      	movs	r1, #42	@ 0x2a
 80141da:	fb01 3310 	mls	r3, r1, r0, r3
 80141de:	2a7e      	cmp	r2, #126	@ 0x7e
 80141e0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80141e4:	f000 8252 	beq.w	801468c <uxr_read_framed_msg+0x510>
 80141e8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80141ea:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80141ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	2200      	movs	r2, #0
 80141f4:	4299      	cmp	r1, r3
 80141f6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80141f8:	7022      	strb	r2, [r4, #0]
 80141fa:	f000 8179 	beq.w	80144f0 <uxr_read_framed_msg+0x374>
 80141fe:	2000      	movs	r0, #0
 8014200:	b003      	add	sp, #12
 8014202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014206:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801420a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801420e:	4299      	cmp	r1, r3
 8014210:	f000 8131 	beq.w	8014476 <uxr_read_framed_msg+0x2fa>
 8014214:	18e2      	adds	r2, r4, r3
 8014216:	7890      	ldrb	r0, [r2, #2]
 8014218:	287d      	cmp	r0, #125	@ 0x7d
 801421a:	f000 8190 	beq.w	801453e <uxr_read_framed_msg+0x3c2>
 801421e:	3301      	adds	r3, #1
 8014220:	085a      	lsrs	r2, r3, #1
 8014222:	fba5 1202 	umull	r1, r2, r5, r2
 8014226:	0892      	lsrs	r2, r2, #2
 8014228:	212a      	movs	r1, #42	@ 0x2a
 801422a:	fb01 3312 	mls	r3, r1, r2, r3
 801422e:	287e      	cmp	r0, #126	@ 0x7e
 8014230:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014234:	f000 821a 	beq.w	801466c <uxr_read_framed_msg+0x4f0>
 8014238:	2307      	movs	r3, #7
 801423a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801423c:	7023      	strb	r3, [r4, #0]
 801423e:	e7ae      	b.n	801419e <uxr_read_framed_msg+0x22>
 8014240:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014242:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014246:	459e      	cmp	lr, r3
 8014248:	d938      	bls.n	80142bc <uxr_read_framed_msg+0x140>
 801424a:	ee07 8a90 	vmov	s15, r8
 801424e:	212a      	movs	r1, #42	@ 0x2a
 8014250:	e020      	b.n	8014294 <uxr_read_framed_msg+0x118>
 8014252:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014256:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801425a:	f000 80d4 	beq.w	8014406 <uxr_read_framed_msg+0x28a>
 801425e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014262:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014266:	f000 8219 	beq.w	801469c <uxr_read_framed_msg+0x520>
 801426a:	f806 c003 	strb.w	ip, [r6, r3]
 801426e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8014272:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014274:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014278:	ea8a 000c 	eor.w	r0, sl, ip
 801427c:	b2c0      	uxtb	r0, r0
 801427e:	3301      	adds	r3, #1
 8014280:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014284:	b29b      	uxth	r3, r3
 8014286:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801428a:	4573      	cmp	r3, lr
 801428c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801428e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014290:	f080 8120 	bcs.w	80144d4 <uxr_read_framed_msg+0x358>
 8014294:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014298:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801429c:	f100 0c01 	add.w	ip, r0, #1
 80142a0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80142a4:	fba5 8202 	umull	r8, r2, r5, r2
 80142a8:	0892      	lsrs	r2, r2, #2
 80142aa:	4582      	cmp	sl, r0
 80142ac:	eb04 0b00 	add.w	fp, r4, r0
 80142b0:	fb01 c212 	mls	r2, r1, r2, ip
 80142b4:	d1cd      	bne.n	8014252 <uxr_read_framed_msg+0xd6>
 80142b6:	ee17 8a90 	vmov	r8, s15
 80142ba:	459e      	cmp	lr, r3
 80142bc:	f040 8111 	bne.w	80144e2 <uxr_read_framed_msg+0x366>
 80142c0:	2306      	movs	r3, #6
 80142c2:	7023      	strb	r3, [r4, #0]
 80142c4:	e76b      	b.n	801419e <uxr_read_framed_msg+0x22>
 80142c6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80142ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80142ce:	4298      	cmp	r0, r3
 80142d0:	f000 80c2 	beq.w	8014458 <uxr_read_framed_msg+0x2dc>
 80142d4:	18e2      	adds	r2, r4, r3
 80142d6:	7891      	ldrb	r1, [r2, #2]
 80142d8:	297d      	cmp	r1, #125	@ 0x7d
 80142da:	f000 814c 	beq.w	8014576 <uxr_read_framed_msg+0x3fa>
 80142de:	3301      	adds	r3, #1
 80142e0:	085a      	lsrs	r2, r3, #1
 80142e2:	fba5 0202 	umull	r0, r2, r5, r2
 80142e6:	0892      	lsrs	r2, r2, #2
 80142e8:	202a      	movs	r0, #42	@ 0x2a
 80142ea:	fb00 3312 	mls	r3, r0, r2, r3
 80142ee:	297e      	cmp	r1, #126	@ 0x7e
 80142f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80142f4:	f000 81ca 	beq.w	801468c <uxr_read_framed_msg+0x510>
 80142f8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80142fa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80142fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014300:	b29b      	uxth	r3, r3
 8014302:	2000      	movs	r0, #0
 8014304:	428b      	cmp	r3, r1
 8014306:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014308:	8660      	strh	r0, [r4, #50]	@ 0x32
 801430a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801430c:	f240 80df 	bls.w	80144ce <uxr_read_framed_msg+0x352>
 8014310:	7020      	strb	r0, [r4, #0]
 8014312:	b003      	add	sp, #12
 8014314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014318:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801431c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014320:	4299      	cmp	r1, r3
 8014322:	f000 80a8 	beq.w	8014476 <uxr_read_framed_msg+0x2fa>
 8014326:	18e2      	adds	r2, r4, r3
 8014328:	7890      	ldrb	r0, [r2, #2]
 801432a:	287d      	cmp	r0, #125	@ 0x7d
 801432c:	f000 8164 	beq.w	80145f8 <uxr_read_framed_msg+0x47c>
 8014330:	3301      	adds	r3, #1
 8014332:	085a      	lsrs	r2, r3, #1
 8014334:	fba5 1202 	umull	r1, r2, r5, r2
 8014338:	0892      	lsrs	r2, r2, #2
 801433a:	212a      	movs	r1, #42	@ 0x2a
 801433c:	fb01 3312 	mls	r3, r1, r2, r3
 8014340:	287e      	cmp	r0, #126	@ 0x7e
 8014342:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014346:	f000 8191 	beq.w	801466c <uxr_read_framed_msg+0x4f0>
 801434a:	2304      	movs	r3, #4
 801434c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801434e:	7023      	strb	r3, [r4, #0]
 8014350:	e725      	b.n	801419e <uxr_read_framed_msg+0x22>
 8014352:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014356:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801435a:	4290      	cmp	r0, r2
 801435c:	f000 80b3 	beq.w	80144c6 <uxr_read_framed_msg+0x34a>
 8014360:	18a3      	adds	r3, r4, r2
 8014362:	7899      	ldrb	r1, [r3, #2]
 8014364:	297d      	cmp	r1, #125	@ 0x7d
 8014366:	f000 8164 	beq.w	8014632 <uxr_read_framed_msg+0x4b6>
 801436a:	3201      	adds	r2, #1
 801436c:	0850      	lsrs	r0, r2, #1
 801436e:	fba5 3000 	umull	r3, r0, r5, r0
 8014372:	0880      	lsrs	r0, r0, #2
 8014374:	232a      	movs	r3, #42	@ 0x2a
 8014376:	fb03 2210 	mls	r2, r3, r0, r2
 801437a:	297e      	cmp	r1, #126	@ 0x7e
 801437c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014380:	f000 8188 	beq.w	8014694 <uxr_read_framed_msg+0x518>
 8014384:	7863      	ldrb	r3, [r4, #1]
 8014386:	428b      	cmp	r3, r1
 8014388:	bf0c      	ite	eq
 801438a:	2303      	moveq	r3, #3
 801438c:	2300      	movne	r3, #0
 801438e:	7023      	strb	r3, [r4, #0]
 8014390:	e705      	b.n	801419e <uxr_read_framed_msg+0x22>
 8014392:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014396:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801439a:	2200      	movs	r2, #0
 801439c:	4299      	cmp	r1, r3
 801439e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80143a2:	d06c      	beq.n	801447e <uxr_read_framed_msg+0x302>
 80143a4:	18e2      	adds	r2, r4, r3
 80143a6:	7890      	ldrb	r0, [r2, #2]
 80143a8:	287d      	cmp	r0, #125	@ 0x7d
 80143aa:	f000 8101 	beq.w	80145b0 <uxr_read_framed_msg+0x434>
 80143ae:	3301      	adds	r3, #1
 80143b0:	085a      	lsrs	r2, r3, #1
 80143b2:	fba5 1202 	umull	r1, r2, r5, r2
 80143b6:	0892      	lsrs	r2, r2, #2
 80143b8:	212a      	movs	r1, #42	@ 0x2a
 80143ba:	fb01 3312 	mls	r3, r1, r2, r3
 80143be:	287e      	cmp	r0, #126	@ 0x7e
 80143c0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80143c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80143c8:	d059      	beq.n	801447e <uxr_read_framed_msg+0x302>
 80143ca:	2302      	movs	r3, #2
 80143cc:	7023      	strb	r3, [r4, #0]
 80143ce:	e6e6      	b.n	801419e <uxr_read_framed_msg+0x22>
 80143d0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80143d4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80143d8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80143dc:	1c51      	adds	r1, r2, #1
 80143de:	084b      	lsrs	r3, r1, #1
 80143e0:	fba5 c303 	umull	ip, r3, r5, r3
 80143e4:	089b      	lsrs	r3, r3, #2
 80143e6:	fb0e 1313 	mls	r3, lr, r3, r1
 80143ea:	4592      	cmp	sl, r2
 80143ec:	eb04 0002 	add.w	r0, r4, r2
 80143f0:	b2da      	uxtb	r2, r3
 80143f2:	f43f af04 	beq.w	80141fe <uxr_read_framed_msg+0x82>
 80143f6:	7883      	ldrb	r3, [r0, #2]
 80143f8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80143fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80143fe:	d1ed      	bne.n	80143dc <uxr_read_framed_msg+0x260>
 8014400:	2301      	movs	r3, #1
 8014402:	7023      	strb	r3, [r4, #0]
 8014404:	e6cb      	b.n	801419e <uxr_read_framed_msg+0x22>
 8014406:	f100 0c01 	add.w	ip, r0, #1
 801440a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801440e:	fba5 8202 	umull	r8, r2, r5, r2
 8014412:	0892      	lsrs	r2, r2, #2
 8014414:	fb01 c212 	mls	r2, r1, r2, ip
 8014418:	eb04 0c02 	add.w	ip, r4, r2
 801441c:	b2d2      	uxtb	r2, r2
 801441e:	4592      	cmp	sl, r2
 8014420:	f100 0002 	add.w	r0, r0, #2
 8014424:	f43f af47 	beq.w	80142b6 <uxr_read_framed_msg+0x13a>
 8014428:	0842      	lsrs	r2, r0, #1
 801442a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801442e:	fba5 8202 	umull	r8, r2, r5, r2
 8014432:	0892      	lsrs	r2, r2, #2
 8014434:	fb01 0012 	mls	r0, r1, r2, r0
 8014438:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801443c:	f08a 0c20 	eor.w	ip, sl, #32
 8014440:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014444:	f47f af11 	bne.w	801426a <uxr_read_framed_msg+0xee>
 8014448:	459e      	cmp	lr, r3
 801444a:	ee17 8a90 	vmov	r8, s15
 801444e:	f43f af37 	beq.w	80142c0 <uxr_read_framed_msg+0x144>
 8014452:	2301      	movs	r3, #1
 8014454:	7023      	strb	r3, [r4, #0]
 8014456:	e6a2      	b.n	801419e <uxr_read_framed_msg+0x22>
 8014458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	2301      	movs	r3, #1
 801445e:	9301      	str	r3, [sp, #4]
 8014460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014462:	464a      	mov	r2, r9
 8014464:	4641      	mov	r1, r8
 8014466:	4620      	mov	r0, r4
 8014468:	f7ff fe06 	bl	8014078 <uxr_framing_read_transport>
 801446c:	2800      	cmp	r0, #0
 801446e:	f43f aec6 	beq.w	80141fe <uxr_read_framed_msg+0x82>
 8014472:	7823      	ldrb	r3, [r4, #0]
 8014474:	e693      	b.n	801419e <uxr_read_framed_msg+0x22>
 8014476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	2302      	movs	r3, #2
 801447c:	e7ef      	b.n	801445e <uxr_read_framed_msg+0x2e2>
 801447e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014480:	9300      	str	r3, [sp, #0]
 8014482:	2304      	movs	r3, #4
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	464a      	mov	r2, r9
 8014488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801448a:	4641      	mov	r1, r8
 801448c:	4620      	mov	r0, r4
 801448e:	f7ff fdf3 	bl	8014078 <uxr_framing_read_transport>
 8014492:	2800      	cmp	r0, #0
 8014494:	d1ed      	bne.n	8014472 <uxr_read_framed_msg+0x2f6>
 8014496:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801449a:	2b7e      	cmp	r3, #126	@ 0x7e
 801449c:	d0e9      	beq.n	8014472 <uxr_read_framed_msg+0x2f6>
 801449e:	e6ae      	b.n	80141fe <uxr_read_framed_msg+0x82>
 80144a0:	30c30c31 	.word	0x30c30c31
 80144a4:	0801c854 	.word	0x0801c854
 80144a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144aa:	9300      	str	r3, [sp, #0]
 80144ac:	2305      	movs	r3, #5
 80144ae:	9301      	str	r3, [sp, #4]
 80144b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144b2:	f7ff fde1 	bl	8014078 <uxr_framing_read_transport>
 80144b6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80144ba:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80144be:	429a      	cmp	r2, r3
 80144c0:	f43f ae9d 	beq.w	80141fe <uxr_read_framed_msg+0x82>
 80144c4:	e668      	b.n	8014198 <uxr_read_framed_msg+0x1c>
 80144c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	2303      	movs	r3, #3
 80144cc:	e7c7      	b.n	801445e <uxr_read_framed_msg+0x2e2>
 80144ce:	2305      	movs	r3, #5
 80144d0:	7023      	strb	r3, [r4, #0]
 80144d2:	e664      	b.n	801419e <uxr_read_framed_msg+0x22>
 80144d4:	ee17 8a90 	vmov	r8, s15
 80144d8:	f43f aef2 	beq.w	80142c0 <uxr_read_framed_msg+0x144>
 80144dc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80144e0:	d08e      	beq.n	8014400 <uxr_read_framed_msg+0x284>
 80144e2:	ebae 0303 	sub.w	r3, lr, r3
 80144e6:	3302      	adds	r3, #2
 80144e8:	9301      	str	r3, [sp, #4]
 80144ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144ec:	9300      	str	r3, [sp, #0]
 80144ee:	e7b7      	b.n	8014460 <uxr_read_framed_msg+0x2e4>
 80144f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80144f2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80144f6:	7013      	strb	r3, [r2, #0]
 80144f8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80144fa:	b003      	add	sp, #12
 80144fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014500:	f103 0c01 	add.w	ip, r3, #1
 8014504:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014508:	fba5 0202 	umull	r0, r2, r5, r2
 801450c:	0892      	lsrs	r2, r2, #2
 801450e:	202a      	movs	r0, #42	@ 0x2a
 8014510:	fb00 c212 	mls	r2, r0, r2, ip
 8014514:	fa5f fc82 	uxtb.w	ip, r2
 8014518:	4561      	cmp	r1, ip
 801451a:	d09d      	beq.n	8014458 <uxr_read_framed_msg+0x2dc>
 801451c:	3302      	adds	r3, #2
 801451e:	4422      	add	r2, r4
 8014520:	0859      	lsrs	r1, r3, #1
 8014522:	7892      	ldrb	r2, [r2, #2]
 8014524:	fba5 c101 	umull	ip, r1, r5, r1
 8014528:	0889      	lsrs	r1, r1, #2
 801452a:	fb00 3311 	mls	r3, r0, r1, r3
 801452e:	2a7e      	cmp	r2, #126	@ 0x7e
 8014530:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014534:	f000 80aa 	beq.w	801468c <uxr_read_framed_msg+0x510>
 8014538:	f082 0220 	eor.w	r2, r2, #32
 801453c:	e654      	b.n	80141e8 <uxr_read_framed_msg+0x6c>
 801453e:	1c58      	adds	r0, r3, #1
 8014540:	0842      	lsrs	r2, r0, #1
 8014542:	fba5 c202 	umull	ip, r2, r5, r2
 8014546:	0892      	lsrs	r2, r2, #2
 8014548:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801454c:	fb0c 0212 	mls	r2, ip, r2, r0
 8014550:	b2d0      	uxtb	r0, r2
 8014552:	4281      	cmp	r1, r0
 8014554:	d08f      	beq.n	8014476 <uxr_read_framed_msg+0x2fa>
 8014556:	4422      	add	r2, r4
 8014558:	3302      	adds	r3, #2
 801455a:	7890      	ldrb	r0, [r2, #2]
 801455c:	085a      	lsrs	r2, r3, #1
 801455e:	fba5 1202 	umull	r1, r2, r5, r2
 8014562:	0892      	lsrs	r2, r2, #2
 8014564:	fb0c 3312 	mls	r3, ip, r2, r3
 8014568:	287e      	cmp	r0, #126	@ 0x7e
 801456a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801456e:	d07d      	beq.n	801466c <uxr_read_framed_msg+0x4f0>
 8014570:	f080 0020 	eor.w	r0, r0, #32
 8014574:	e660      	b.n	8014238 <uxr_read_framed_msg+0xbc>
 8014576:	1c59      	adds	r1, r3, #1
 8014578:	084a      	lsrs	r2, r1, #1
 801457a:	fba5 c202 	umull	ip, r2, r5, r2
 801457e:	0892      	lsrs	r2, r2, #2
 8014580:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014584:	fb0c 1212 	mls	r2, ip, r2, r1
 8014588:	b2d1      	uxtb	r1, r2
 801458a:	4288      	cmp	r0, r1
 801458c:	f43f af64 	beq.w	8014458 <uxr_read_framed_msg+0x2dc>
 8014590:	4422      	add	r2, r4
 8014592:	3302      	adds	r3, #2
 8014594:	7891      	ldrb	r1, [r2, #2]
 8014596:	085a      	lsrs	r2, r3, #1
 8014598:	fba5 0202 	umull	r0, r2, r5, r2
 801459c:	0892      	lsrs	r2, r2, #2
 801459e:	fb0c 3312 	mls	r3, ip, r2, r3
 80145a2:	297e      	cmp	r1, #126	@ 0x7e
 80145a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145a8:	d070      	beq.n	801468c <uxr_read_framed_msg+0x510>
 80145aa:	f081 0120 	eor.w	r1, r1, #32
 80145ae:	e6a3      	b.n	80142f8 <uxr_read_framed_msg+0x17c>
 80145b0:	f103 0c01 	add.w	ip, r3, #1
 80145b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80145b8:	fba5 0202 	umull	r0, r2, r5, r2
 80145bc:	0892      	lsrs	r2, r2, #2
 80145be:	202a      	movs	r0, #42	@ 0x2a
 80145c0:	fb00 c212 	mls	r2, r0, r2, ip
 80145c4:	fa5f fc82 	uxtb.w	ip, r2
 80145c8:	4561      	cmp	r1, ip
 80145ca:	f43f af58 	beq.w	801447e <uxr_read_framed_msg+0x302>
 80145ce:	4422      	add	r2, r4
 80145d0:	3302      	adds	r3, #2
 80145d2:	7891      	ldrb	r1, [r2, #2]
 80145d4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80145d8:	085a      	lsrs	r2, r3, #1
 80145da:	fba5 c202 	umull	ip, r2, r5, r2
 80145de:	0892      	lsrs	r2, r2, #2
 80145e0:	fb00 3312 	mls	r3, r0, r2, r3
 80145e4:	297e      	cmp	r1, #126	@ 0x7e
 80145e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145ea:	f43f af48 	beq.w	801447e <uxr_read_framed_msg+0x302>
 80145ee:	f081 0120 	eor.w	r1, r1, #32
 80145f2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80145f6:	e6e8      	b.n	80143ca <uxr_read_framed_msg+0x24e>
 80145f8:	1c58      	adds	r0, r3, #1
 80145fa:	0842      	lsrs	r2, r0, #1
 80145fc:	fba5 c202 	umull	ip, r2, r5, r2
 8014600:	0892      	lsrs	r2, r2, #2
 8014602:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014606:	fb0c 0212 	mls	r2, ip, r2, r0
 801460a:	b2d0      	uxtb	r0, r2
 801460c:	4281      	cmp	r1, r0
 801460e:	f43f af32 	beq.w	8014476 <uxr_read_framed_msg+0x2fa>
 8014612:	4422      	add	r2, r4
 8014614:	3302      	adds	r3, #2
 8014616:	7890      	ldrb	r0, [r2, #2]
 8014618:	085a      	lsrs	r2, r3, #1
 801461a:	fba5 1202 	umull	r1, r2, r5, r2
 801461e:	0892      	lsrs	r2, r2, #2
 8014620:	fb0c 3312 	mls	r3, ip, r2, r3
 8014624:	287e      	cmp	r0, #126	@ 0x7e
 8014626:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801462a:	d01f      	beq.n	801466c <uxr_read_framed_msg+0x4f0>
 801462c:	f080 0020 	eor.w	r0, r0, #32
 8014630:	e68b      	b.n	801434a <uxr_read_framed_msg+0x1ce>
 8014632:	1c51      	adds	r1, r2, #1
 8014634:	084b      	lsrs	r3, r1, #1
 8014636:	fba5 c303 	umull	ip, r3, r5, r3
 801463a:	089b      	lsrs	r3, r3, #2
 801463c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014640:	fb0c 1313 	mls	r3, ip, r3, r1
 8014644:	b2d9      	uxtb	r1, r3
 8014646:	4288      	cmp	r0, r1
 8014648:	f43f af3d 	beq.w	80144c6 <uxr_read_framed_msg+0x34a>
 801464c:	3202      	adds	r2, #2
 801464e:	4423      	add	r3, r4
 8014650:	0850      	lsrs	r0, r2, #1
 8014652:	789b      	ldrb	r3, [r3, #2]
 8014654:	fba5 1000 	umull	r1, r0, r5, r0
 8014658:	0880      	lsrs	r0, r0, #2
 801465a:	fb0c 2210 	mls	r2, ip, r0, r2
 801465e:	2b7e      	cmp	r3, #126	@ 0x7e
 8014660:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014664:	d016      	beq.n	8014694 <uxr_read_framed_msg+0x518>
 8014666:	f083 0120 	eor.w	r1, r3, #32
 801466a:	e68b      	b.n	8014384 <uxr_read_framed_msg+0x208>
 801466c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	2302      	movs	r3, #2
 8014672:	9301      	str	r3, [sp, #4]
 8014674:	464a      	mov	r2, r9
 8014676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014678:	4641      	mov	r1, r8
 801467a:	4620      	mov	r0, r4
 801467c:	f7ff fcfc 	bl	8014078 <uxr_framing_read_transport>
 8014680:	2800      	cmp	r0, #0
 8014682:	f47f aef6 	bne.w	8014472 <uxr_read_framed_msg+0x2f6>
 8014686:	2301      	movs	r3, #1
 8014688:	7023      	strb	r3, [r4, #0]
 801468a:	e588      	b.n	801419e <uxr_read_framed_msg+0x22>
 801468c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801468e:	9300      	str	r3, [sp, #0]
 8014690:	2301      	movs	r3, #1
 8014692:	e7ee      	b.n	8014672 <uxr_read_framed_msg+0x4f6>
 8014694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	2303      	movs	r3, #3
 801469a:	e7ea      	b.n	8014672 <uxr_read_framed_msg+0x4f6>
 801469c:	ee17 8a90 	vmov	r8, s15
 80146a0:	e6ae      	b.n	8014400 <uxr_read_framed_msg+0x284>
 80146a2:	bf00      	nop

080146a4 <uxr_stream_id>:
 80146a4:	2901      	cmp	r1, #1
 80146a6:	b082      	sub	sp, #8
 80146a8:	d01d      	beq.n	80146e6 <uxr_stream_id+0x42>
 80146aa:	2902      	cmp	r1, #2
 80146ac:	f04f 0c00 	mov.w	ip, #0
 80146b0:	d01e      	beq.n	80146f0 <uxr_stream_id+0x4c>
 80146b2:	2300      	movs	r3, #0
 80146b4:	f36c 0307 	bfi	r3, ip, #0, #8
 80146b8:	f360 230f 	bfi	r3, r0, #8, #8
 80146bc:	f361 4317 	bfi	r3, r1, #16, #8
 80146c0:	f362 631f 	bfi	r3, r2, #24, #8
 80146c4:	b2da      	uxtb	r2, r3
 80146c6:	2000      	movs	r0, #0
 80146c8:	f362 0007 	bfi	r0, r2, #0, #8
 80146cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80146d0:	f362 200f 	bfi	r0, r2, #8, #8
 80146d4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80146d8:	f362 4017 	bfi	r0, r2, #16, #8
 80146dc:	0e1b      	lsrs	r3, r3, #24
 80146de:	f363 601f 	bfi	r0, r3, #24, #8
 80146e2:	b002      	add	sp, #8
 80146e4:	4770      	bx	lr
 80146e6:	f100 0c01 	add.w	ip, r0, #1
 80146ea:	fa5f fc8c 	uxtb.w	ip, ip
 80146ee:	e7e0      	b.n	80146b2 <uxr_stream_id+0xe>
 80146f0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80146f4:	e7dd      	b.n	80146b2 <uxr_stream_id+0xe>
 80146f6:	bf00      	nop

080146f8 <uxr_stream_id_from_raw>:
 80146f8:	b082      	sub	sp, #8
 80146fa:	b130      	cbz	r0, 801470a <uxr_stream_id_from_raw+0x12>
 80146fc:	0603      	lsls	r3, r0, #24
 80146fe:	d420      	bmi.n	8014742 <uxr_stream_id_from_raw+0x4a>
 8014700:	1e42      	subs	r2, r0, #1
 8014702:	b2d2      	uxtb	r2, r2
 8014704:	f04f 0c01 	mov.w	ip, #1
 8014708:	e001      	b.n	801470e <uxr_stream_id_from_raw+0x16>
 801470a:	4684      	mov	ip, r0
 801470c:	4602      	mov	r2, r0
 801470e:	2300      	movs	r3, #0
 8014710:	f360 0307 	bfi	r3, r0, #0, #8
 8014714:	f362 230f 	bfi	r3, r2, #8, #8
 8014718:	f36c 4317 	bfi	r3, ip, #16, #8
 801471c:	f361 631f 	bfi	r3, r1, #24, #8
 8014720:	b2da      	uxtb	r2, r3
 8014722:	2000      	movs	r0, #0
 8014724:	f362 0007 	bfi	r0, r2, #0, #8
 8014728:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801472c:	f362 200f 	bfi	r0, r2, #8, #8
 8014730:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014734:	f362 4017 	bfi	r0, r2, #16, #8
 8014738:	0e1b      	lsrs	r3, r3, #24
 801473a:	f363 601f 	bfi	r0, r3, #24, #8
 801473e:	b002      	add	sp, #8
 8014740:	4770      	bx	lr
 8014742:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8014746:	f04f 0c02 	mov.w	ip, #2
 801474a:	e7e0      	b.n	801470e <uxr_stream_id_from_raw+0x16>

0801474c <uxr_init_stream_storage>:
 801474c:	2300      	movs	r3, #0
 801474e:	7403      	strb	r3, [r0, #16]
 8014750:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8014754:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8014758:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop

08014760 <uxr_reset_stream_storage>:
 8014760:	b570      	push	{r4, r5, r6, lr}
 8014762:	7c03      	ldrb	r3, [r0, #16]
 8014764:	4604      	mov	r4, r0
 8014766:	b153      	cbz	r3, 801477e <uxr_reset_stream_storage+0x1e>
 8014768:	4606      	mov	r6, r0
 801476a:	2500      	movs	r5, #0
 801476c:	4630      	mov	r0, r6
 801476e:	f003 fadd 	bl	8017d2c <uxr_reset_output_best_effort_stream>
 8014772:	7c23      	ldrb	r3, [r4, #16]
 8014774:	3501      	adds	r5, #1
 8014776:	42ab      	cmp	r3, r5
 8014778:	f106 0610 	add.w	r6, r6, #16
 801477c:	d8f6      	bhi.n	801476c <uxr_reset_stream_storage+0xc>
 801477e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014782:	b163      	cbz	r3, 801479e <uxr_reset_stream_storage+0x3e>
 8014784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014788:	2500      	movs	r5, #0
 801478a:	4630      	mov	r0, r6
 801478c:	f003 f8d0 	bl	8017930 <uxr_reset_input_best_effort_stream>
 8014790:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014794:	3501      	adds	r5, #1
 8014796:	42ab      	cmp	r3, r5
 8014798:	f106 0602 	add.w	r6, r6, #2
 801479c:	d8f5      	bhi.n	801478a <uxr_reset_stream_storage+0x2a>
 801479e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80147a2:	b163      	cbz	r3, 80147be <uxr_reset_stream_storage+0x5e>
 80147a4:	f104 0618 	add.w	r6, r4, #24
 80147a8:	2500      	movs	r5, #0
 80147aa:	4630      	mov	r0, r6
 80147ac:	f003 fb6a 	bl	8017e84 <uxr_reset_output_reliable_stream>
 80147b0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80147b4:	3501      	adds	r5, #1
 80147b6:	42ab      	cmp	r3, r5
 80147b8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80147bc:	d8f5      	bhi.n	80147aa <uxr_reset_stream_storage+0x4a>
 80147be:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80147c2:	b163      	cbz	r3, 80147de <uxr_reset_stream_storage+0x7e>
 80147c4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80147c8:	2500      	movs	r5, #0
 80147ca:	4630      	mov	r0, r6
 80147cc:	f003 f924 	bl	8017a18 <uxr_reset_input_reliable_stream>
 80147d0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80147d4:	3501      	adds	r5, #1
 80147d6:	42ab      	cmp	r3, r5
 80147d8:	f106 0618 	add.w	r6, r6, #24
 80147dc:	d8f5      	bhi.n	80147ca <uxr_reset_stream_storage+0x6a>
 80147de:	bd70      	pop	{r4, r5, r6, pc}

080147e0 <uxr_add_output_best_effort_buffer>:
 80147e0:	b510      	push	{r4, lr}
 80147e2:	7c04      	ldrb	r4, [r0, #16]
 80147e4:	f104 0c01 	add.w	ip, r4, #1
 80147e8:	b082      	sub	sp, #8
 80147ea:	f880 c010 	strb.w	ip, [r0, #16]
 80147ee:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80147f2:	f003 fa91 	bl	8017d18 <uxr_init_output_best_effort_stream>
 80147f6:	2201      	movs	r2, #1
 80147f8:	4611      	mov	r1, r2
 80147fa:	4620      	mov	r0, r4
 80147fc:	b002      	add	sp, #8
 80147fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014802:	f7ff bf4f 	b.w	80146a4 <uxr_stream_id>
 8014806:	bf00      	nop

08014808 <uxr_add_output_reliable_buffer>:
 8014808:	b510      	push	{r4, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	4684      	mov	ip, r0
 801480e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014812:	9000      	str	r0, [sp, #0]
 8014814:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8014818:	2028      	movs	r0, #40	@ 0x28
 801481a:	fb00 c004 	mla	r0, r0, r4, ip
 801481e:	f104 0e01 	add.w	lr, r4, #1
 8014822:	3018      	adds	r0, #24
 8014824:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014828:	f003 faf4 	bl	8017e14 <uxr_init_output_reliable_stream>
 801482c:	2201      	movs	r2, #1
 801482e:	2102      	movs	r1, #2
 8014830:	4620      	mov	r0, r4
 8014832:	b004      	add	sp, #16
 8014834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014838:	f7ff bf34 	b.w	80146a4 <uxr_stream_id>

0801483c <uxr_add_input_best_effort_buffer>:
 801483c:	b510      	push	{r4, lr}
 801483e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8014842:	4603      	mov	r3, r0
 8014844:	1c62      	adds	r2, r4, #1
 8014846:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801484a:	b082      	sub	sp, #8
 801484c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014854:	f003 f868 	bl	8017928 <uxr_init_input_best_effort_stream>
 8014858:	2200      	movs	r2, #0
 801485a:	2101      	movs	r1, #1
 801485c:	4620      	mov	r0, r4
 801485e:	b002      	add	sp, #8
 8014860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014864:	f7ff bf1e 	b.w	80146a4 <uxr_stream_id>

08014868 <uxr_add_input_reliable_buffer>:
 8014868:	b510      	push	{r4, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	4684      	mov	ip, r0
 801486e:	9806      	ldr	r0, [sp, #24]
 8014870:	9000      	str	r0, [sp, #0]
 8014872:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014876:	2018      	movs	r0, #24
 8014878:	fb00 c004 	mla	r0, r0, r4, ip
 801487c:	f104 0e01 	add.w	lr, r4, #1
 8014880:	3048      	adds	r0, #72	@ 0x48
 8014882:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014886:	f003 f89b 	bl	80179c0 <uxr_init_input_reliable_stream>
 801488a:	2200      	movs	r2, #0
 801488c:	2102      	movs	r1, #2
 801488e:	4620      	mov	r0, r4
 8014890:	b004      	add	sp, #16
 8014892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014896:	f7ff bf05 	b.w	80146a4 <uxr_stream_id>
 801489a:	bf00      	nop

0801489c <uxr_get_output_best_effort_stream>:
 801489c:	7c03      	ldrb	r3, [r0, #16]
 801489e:	428b      	cmp	r3, r1
 80148a0:	bf8c      	ite	hi
 80148a2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80148a6:	2000      	movls	r0, #0
 80148a8:	4770      	bx	lr
 80148aa:	bf00      	nop

080148ac <uxr_get_output_reliable_stream>:
 80148ac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80148b0:	428b      	cmp	r3, r1
 80148b2:	bf83      	ittte	hi
 80148b4:	2328      	movhi	r3, #40	@ 0x28
 80148b6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80148ba:	3018      	addhi	r0, #24
 80148bc:	2000      	movls	r0, #0
 80148be:	4770      	bx	lr

080148c0 <uxr_get_input_best_effort_stream>:
 80148c0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80148c4:	428b      	cmp	r3, r1
 80148c6:	bf86      	itte	hi
 80148c8:	3121      	addhi	r1, #33	@ 0x21
 80148ca:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80148ce:	2000      	movls	r0, #0
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop

080148d4 <uxr_get_input_reliable_stream>:
 80148d4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80148d8:	428b      	cmp	r3, r1
 80148da:	bf83      	ittte	hi
 80148dc:	2318      	movhi	r3, #24
 80148de:	fb03 0001 	mlahi	r0, r3, r1, r0
 80148e2:	3048      	addhi	r0, #72	@ 0x48
 80148e4:	2000      	movls	r0, #0
 80148e6:	4770      	bx	lr

080148e8 <uxr_output_streams_confirmed>:
 80148e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80148ec:	b183      	cbz	r3, 8014910 <uxr_output_streams_confirmed+0x28>
 80148ee:	b570      	push	{r4, r5, r6, lr}
 80148f0:	4606      	mov	r6, r0
 80148f2:	f100 0518 	add.w	r5, r0, #24
 80148f6:	2400      	movs	r4, #0
 80148f8:	e001      	b.n	80148fe <uxr_output_streams_confirmed+0x16>
 80148fa:	3528      	adds	r5, #40	@ 0x28
 80148fc:	b138      	cbz	r0, 801490e <uxr_output_streams_confirmed+0x26>
 80148fe:	4628      	mov	r0, r5
 8014900:	f003 fd30 	bl	8018364 <uxr_is_output_up_to_date>
 8014904:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014908:	3401      	adds	r4, #1
 801490a:	42a3      	cmp	r3, r4
 801490c:	d8f5      	bhi.n	80148fa <uxr_output_streams_confirmed+0x12>
 801490e:	bd70      	pop	{r4, r5, r6, pc}
 8014910:	2001      	movs	r0, #1
 8014912:	4770      	bx	lr

08014914 <uxr_buffer_submessage_header>:
 8014914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014916:	4604      	mov	r4, r0
 8014918:	460e      	mov	r6, r1
 801491a:	2104      	movs	r1, #4
 801491c:	4615      	mov	r5, r2
 801491e:	461f      	mov	r7, r3
 8014920:	f7f7 fe1a 	bl	800c558 <ucdr_align_to>
 8014924:	2301      	movs	r3, #1
 8014926:	ea47 0203 	orr.w	r2, r7, r3
 801492a:	4631      	mov	r1, r6
 801492c:	7523      	strb	r3, [r4, #20]
 801492e:	4620      	mov	r0, r4
 8014930:	462b      	mov	r3, r5
 8014932:	f000 fa27 	bl	8014d84 <uxr_serialize_submessage_header>
 8014936:	4620      	mov	r0, r4
 8014938:	f7f7 fe24 	bl	800c584 <ucdr_buffer_remaining>
 801493c:	42a8      	cmp	r0, r5
 801493e:	bf34      	ite	cc
 8014940:	2000      	movcc	r0, #0
 8014942:	2001      	movcs	r0, #1
 8014944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014946:	bf00      	nop

08014948 <uxr_read_submessage_header>:
 8014948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801494c:	4604      	mov	r4, r0
 801494e:	460d      	mov	r5, r1
 8014950:	2104      	movs	r1, #4
 8014952:	4616      	mov	r6, r2
 8014954:	4698      	mov	r8, r3
 8014956:	f7f7 fdff 	bl	800c558 <ucdr_align_to>
 801495a:	4620      	mov	r0, r4
 801495c:	f7f7 fe12 	bl	800c584 <ucdr_buffer_remaining>
 8014960:	2803      	cmp	r0, #3
 8014962:	bf8c      	ite	hi
 8014964:	2701      	movhi	r7, #1
 8014966:	2700      	movls	r7, #0
 8014968:	d802      	bhi.n	8014970 <uxr_read_submessage_header+0x28>
 801496a:	4638      	mov	r0, r7
 801496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014970:	4633      	mov	r3, r6
 8014972:	4642      	mov	r2, r8
 8014974:	4620      	mov	r0, r4
 8014976:	4629      	mov	r1, r5
 8014978:	f000 fa18 	bl	8014dac <uxr_deserialize_submessage_header>
 801497c:	f898 3000 	ldrb.w	r3, [r8]
 8014980:	f003 0201 	and.w	r2, r3, #1
 8014984:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014988:	f888 3000 	strb.w	r3, [r8]
 801498c:	7522      	strb	r2, [r4, #20]
 801498e:	4638      	mov	r0, r7
 8014990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014994 <uxr_submessage_padding>:
 8014994:	f010 0003 	ands.w	r0, r0, #3
 8014998:	bf18      	it	ne
 801499a:	f1c0 0004 	rsbne	r0, r0, #4
 801499e:	4770      	bx	lr

080149a0 <uxr_millis>:
 80149a0:	b510      	push	{r4, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	4669      	mov	r1, sp
 80149a6:	2001      	movs	r0, #1
 80149a8:	f7ef f96a 	bl	8003c80 <clock_gettime>
 80149ac:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80149b0:	4906      	ldr	r1, [pc, #24]	@ (80149cc <uxr_millis+0x2c>)
 80149b2:	fba0 0301 	umull	r0, r3, r0, r1
 80149b6:	1900      	adds	r0, r0, r4
 80149b8:	fb01 3102 	mla	r1, r1, r2, r3
 80149bc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80149c0:	4a03      	ldr	r2, [pc, #12]	@ (80149d0 <uxr_millis+0x30>)
 80149c2:	2300      	movs	r3, #0
 80149c4:	f7ec f950 	bl	8000c68 <__aeabi_ldivmod>
 80149c8:	b004      	add	sp, #16
 80149ca:	bd10      	pop	{r4, pc}
 80149cc:	3b9aca00 	.word	0x3b9aca00
 80149d0:	000f4240 	.word	0x000f4240

080149d4 <uxr_nanos>:
 80149d4:	b510      	push	{r4, lr}
 80149d6:	b084      	sub	sp, #16
 80149d8:	4669      	mov	r1, sp
 80149da:	2001      	movs	r0, #1
 80149dc:	f7ef f950 	bl	8003c80 <clock_gettime>
 80149e0:	4a06      	ldr	r2, [pc, #24]	@ (80149fc <uxr_nanos+0x28>)
 80149e2:	9800      	ldr	r0, [sp, #0]
 80149e4:	9902      	ldr	r1, [sp, #8]
 80149e6:	9c01      	ldr	r4, [sp, #4]
 80149e8:	fba0 0302 	umull	r0, r3, r0, r2
 80149ec:	1840      	adds	r0, r0, r1
 80149ee:	fb02 3304 	mla	r3, r2, r4, r3
 80149f2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80149f6:	b004      	add	sp, #16
 80149f8:	bd10      	pop	{r4, pc}
 80149fa:	bf00      	nop
 80149fc:	3b9aca00 	.word	0x3b9aca00

08014a00 <on_full_output_buffer_fragmented>:
 8014a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a04:	460c      	mov	r4, r1
 8014a06:	b08a      	sub	sp, #40	@ 0x28
 8014a08:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8014a0c:	4606      	mov	r6, r0
 8014a0e:	f104 0008 	add.w	r0, r4, #8
 8014a12:	f7ff ff4b 	bl	80148ac <uxr_get_output_reliable_stream>
 8014a16:	4605      	mov	r5, r0
 8014a18:	f003 fcae 	bl	8018378 <get_available_free_slots>
 8014a1c:	b968      	cbnz	r0, 8014a3a <on_full_output_buffer_fragmented+0x3a>
 8014a1e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014a22:	4620      	mov	r0, r4
 8014a24:	4798      	blx	r3
 8014a26:	b918      	cbnz	r0, 8014a30 <on_full_output_buffer_fragmented+0x30>
 8014a28:	2001      	movs	r0, #1
 8014a2a:	b00a      	add	sp, #40	@ 0x28
 8014a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a30:	4628      	mov	r0, r5
 8014a32:	f003 fca1 	bl	8018378 <get_available_free_slots>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d0f6      	beq.n	8014a28 <on_full_output_buffer_fragmented+0x28>
 8014a3a:	8929      	ldrh	r1, [r5, #8]
 8014a3c:	89eb      	ldrh	r3, [r5, #14]
 8014a3e:	7b28      	ldrb	r0, [r5, #12]
 8014a40:	686a      	ldr	r2, [r5, #4]
 8014a42:	fbb2 f8f1 	udiv	r8, r2, r1
 8014a46:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a4a:	fb01 3112 	mls	r1, r1, r2, r3
 8014a4e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8014a52:	b289      	uxth	r1, r1
 8014a54:	fb08 f101 	mul.w	r1, r8, r1
 8014a58:	30fc      	adds	r0, #252	@ 0xfc
 8014a5a:	f1a8 0804 	sub.w	r8, r8, #4
 8014a5e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014a62:	4440      	add	r0, r8
 8014a64:	b287      	uxth	r7, r0
 8014a66:	1bdb      	subs	r3, r3, r7
 8014a68:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8014a6c:	682b      	ldr	r3, [r5, #0]
 8014a6e:	3104      	adds	r1, #4
 8014a70:	4419      	add	r1, r3
 8014a72:	4642      	mov	r2, r8
 8014a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a78:	9300      	str	r3, [sp, #0]
 8014a7a:	a802      	add	r0, sp, #8
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	f7f7 fd3f 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8014a82:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014a86:	f102 0308 	add.w	r3, r2, #8
 8014a8a:	4543      	cmp	r3, r8
 8014a8c:	d928      	bls.n	8014ae0 <on_full_output_buffer_fragmented+0xe0>
 8014a8e:	463a      	mov	r2, r7
 8014a90:	2300      	movs	r3, #0
 8014a92:	210d      	movs	r1, #13
 8014a94:	a802      	add	r0, sp, #8
 8014a96:	f7ff ff3d 	bl	8014914 <uxr_buffer_submessage_header>
 8014a9a:	8929      	ldrh	r1, [r5, #8]
 8014a9c:	89eb      	ldrh	r3, [r5, #14]
 8014a9e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014aa2:	fb01 3312 	mls	r3, r1, r2, r3
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	686a      	ldr	r2, [r5, #4]
 8014aaa:	fbb2 f2f1 	udiv	r2, r2, r1
 8014aae:	fb02 f303 	mul.w	r3, r2, r3
 8014ab2:	682a      	ldr	r2, [r5, #0]
 8014ab4:	f842 8003 	str.w	r8, [r2, r3]
 8014ab8:	89e8      	ldrh	r0, [r5, #14]
 8014aba:	2101      	movs	r1, #1
 8014abc:	f003 fc7c 	bl	80183b8 <uxr_seq_num_add>
 8014ac0:	9904      	ldr	r1, [sp, #16]
 8014ac2:	9a03      	ldr	r2, [sp, #12]
 8014ac4:	81e8      	strh	r0, [r5, #14]
 8014ac6:	1a52      	subs	r2, r2, r1
 8014ac8:	4630      	mov	r0, r6
 8014aca:	f7f7 fd2b 	bl	800c524 <ucdr_init_buffer>
 8014ace:	4630      	mov	r0, r6
 8014ad0:	490f      	ldr	r1, [pc, #60]	@ (8014b10 <on_full_output_buffer_fragmented+0x110>)
 8014ad2:	4622      	mov	r2, r4
 8014ad4:	f7f7 fcfa 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8014ad8:	2000      	movs	r0, #0
 8014ada:	b00a      	add	sp, #40	@ 0x28
 8014adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae0:	b292      	uxth	r2, r2
 8014ae2:	2302      	movs	r3, #2
 8014ae4:	210d      	movs	r1, #13
 8014ae6:	a802      	add	r0, sp, #8
 8014ae8:	f7ff ff14 	bl	8014914 <uxr_buffer_submessage_header>
 8014aec:	8928      	ldrh	r0, [r5, #8]
 8014aee:	89eb      	ldrh	r3, [r5, #14]
 8014af0:	fbb3 f1f0 	udiv	r1, r3, r0
 8014af4:	fb00 3311 	mls	r3, r0, r1, r3
 8014af8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014afc:	6869      	ldr	r1, [r5, #4]
 8014afe:	fbb1 f1f0 	udiv	r1, r1, r0
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	fb01 f303 	mul.w	r3, r1, r3
 8014b08:	6829      	ldr	r1, [r5, #0]
 8014b0a:	3208      	adds	r2, #8
 8014b0c:	50ca      	str	r2, [r1, r3]
 8014b0e:	e7d3      	b.n	8014ab8 <on_full_output_buffer_fragmented+0xb8>
 8014b10:	08014a01 	.word	0x08014a01

08014b14 <uxr_prepare_output_stream>:
 8014b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b16:	b087      	sub	sp, #28
 8014b18:	2707      	movs	r7, #7
 8014b1a:	9202      	str	r2, [sp, #8]
 8014b1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014b1e:	9103      	str	r1, [sp, #12]
 8014b20:	2500      	movs	r5, #0
 8014b22:	3204      	adds	r2, #4
 8014b24:	e9cd 7500 	strd	r7, r5, [sp]
 8014b28:	461c      	mov	r4, r3
 8014b2a:	4606      	mov	r6, r0
 8014b2c:	f7fe ffc2 	bl	8013ab4 <uxr_prepare_stream_to_write_submessage>
 8014b30:	f080 0201 	eor.w	r2, r0, #1
 8014b34:	b2d2      	uxtb	r2, r2
 8014b36:	75a2      	strb	r2, [r4, #22]
 8014b38:	b112      	cbz	r2, 8014b40 <uxr_prepare_output_stream+0x2c>
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	b007      	add	sp, #28
 8014b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b40:	aa05      	add	r2, sp, #20
 8014b42:	9902      	ldr	r1, [sp, #8]
 8014b44:	4630      	mov	r0, r6
 8014b46:	f7ff f8eb 	bl	8013d20 <uxr_init_base_object_request>
 8014b4a:	a905      	add	r1, sp, #20
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f001 f88c 	bl	8015c6c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014b54:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014b58:	69a6      	ldr	r6, [r4, #24]
 8014b5a:	69e7      	ldr	r7, [r4, #28]
 8014b5c:	1a52      	subs	r2, r2, r1
 8014b5e:	4620      	mov	r0, r4
 8014b60:	f7f7 fce0 	bl	800c524 <ucdr_init_buffer>
 8014b64:	4620      	mov	r0, r4
 8014b66:	463a      	mov	r2, r7
 8014b68:	4631      	mov	r1, r6
 8014b6a:	f7f7 fcaf 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8014b6e:	4628      	mov	r0, r5
 8014b70:	b007      	add	sp, #28
 8014b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b74 <uxr_prepare_output_stream_fragmented>:
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	b091      	sub	sp, #68	@ 0x44
 8014b7a:	4605      	mov	r5, r0
 8014b7c:	9105      	str	r1, [sp, #20]
 8014b7e:	3008      	adds	r0, #8
 8014b80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014b84:	461e      	mov	r6, r3
 8014b86:	9204      	str	r2, [sp, #16]
 8014b88:	f7ff fe90 	bl	80148ac <uxr_get_output_reliable_stream>
 8014b8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	f000 8091 	beq.w	8014cb8 <uxr_prepare_output_stream_fragmented+0x144>
 8014b96:	4604      	mov	r4, r0
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	f000 808d 	beq.w	8014cb8 <uxr_prepare_output_stream_fragmented+0x144>
 8014b9e:	f003 fbeb 	bl	8018378 <get_available_free_slots>
 8014ba2:	2800      	cmp	r0, #0
 8014ba4:	f000 8083 	beq.w	8014cae <uxr_prepare_output_stream_fragmented+0x13a>
 8014ba8:	8922      	ldrh	r2, [r4, #8]
 8014baa:	89e7      	ldrh	r7, [r4, #14]
 8014bac:	fbb7 f9f2 	udiv	r9, r7, r2
 8014bb0:	fb02 7919 	mls	r9, r2, r9, r7
 8014bb4:	fa1f f989 	uxth.w	r9, r9
 8014bb8:	6863      	ldr	r3, [r4, #4]
 8014bba:	fbb3 f2f2 	udiv	r2, r3, r2
 8014bbe:	6823      	ldr	r3, [r4, #0]
 8014bc0:	9203      	str	r2, [sp, #12]
 8014bc2:	fb02 f909 	mul.w	r9, r2, r9
 8014bc6:	f109 0904 	add.w	r9, r9, #4
 8014bca:	4499      	add	r9, r3
 8014bcc:	7b23      	ldrb	r3, [r4, #12]
 8014bce:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014bd2:	4543      	cmp	r3, r8
 8014bd4:	f1a2 0b04 	sub.w	fp, r2, #4
 8014bd8:	d37a      	bcc.n	8014cd0 <uxr_prepare_output_stream_fragmented+0x15c>
 8014bda:	f1ab 0a04 	sub.w	sl, fp, #4
 8014bde:	ebaa 0a03 	sub.w	sl, sl, r3
 8014be2:	465a      	mov	r2, fp
 8014be4:	2300      	movs	r3, #0
 8014be6:	4649      	mov	r1, r9
 8014be8:	a808      	add	r0, sp, #32
 8014bea:	f8cd 8000 	str.w	r8, [sp]
 8014bee:	f7f7 fc87 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8014bf2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014bf4:	fa1f fa8a 	uxth.w	sl, sl
 8014bf8:	4652      	mov	r2, sl
 8014bfa:	f103 0a08 	add.w	sl, r3, #8
 8014bfe:	45da      	cmp	sl, fp
 8014c00:	bf34      	ite	cc
 8014c02:	2302      	movcc	r3, #2
 8014c04:	2300      	movcs	r3, #0
 8014c06:	210d      	movs	r1, #13
 8014c08:	a808      	add	r0, sp, #32
 8014c0a:	f7ff fe83 	bl	8014914 <uxr_buffer_submessage_header>
 8014c0e:	8921      	ldrh	r1, [r4, #8]
 8014c10:	fbb7 f2f1 	udiv	r2, r7, r1
 8014c14:	fb01 7212 	mls	r2, r1, r2, r7
 8014c18:	b292      	uxth	r2, r2
 8014c1a:	6863      	ldr	r3, [r4, #4]
 8014c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c20:	fb02 f303 	mul.w	r3, r2, r3
 8014c24:	6822      	ldr	r2, [r4, #0]
 8014c26:	4638      	mov	r0, r7
 8014c28:	f842 b003 	str.w	fp, [r2, r3]
 8014c2c:	2101      	movs	r1, #1
 8014c2e:	f003 fbc3 	bl	80183b8 <uxr_seq_num_add>
 8014c32:	9b03      	ldr	r3, [sp, #12]
 8014c34:	f108 0104 	add.w	r1, r8, #4
 8014c38:	f1a3 0208 	sub.w	r2, r3, #8
 8014c3c:	eba2 0208 	sub.w	r2, r2, r8
 8014c40:	4449      	add	r1, r9
 8014c42:	4607      	mov	r7, r0
 8014c44:	4630      	mov	r0, r6
 8014c46:	f7f7 fc6d 	bl	800c524 <ucdr_init_buffer>
 8014c4a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014c4c:	81e7      	strh	r7, [r4, #14]
 8014c4e:	1d1a      	adds	r2, r3, #4
 8014c50:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014c54:	bf28      	it	cs
 8014c56:	2200      	movcs	r2, #0
 8014c58:	2300      	movs	r3, #0
 8014c5a:	b292      	uxth	r2, r2
 8014c5c:	2107      	movs	r1, #7
 8014c5e:	4630      	mov	r0, r6
 8014c60:	f7ff fe58 	bl	8014914 <uxr_buffer_submessage_header>
 8014c64:	9904      	ldr	r1, [sp, #16]
 8014c66:	aa07      	add	r2, sp, #28
 8014c68:	4628      	mov	r0, r5
 8014c6a:	f7ff f859 	bl	8013d20 <uxr_init_base_object_request>
 8014c6e:	4604      	mov	r4, r0
 8014c70:	b318      	cbz	r0, 8014cba <uxr_prepare_output_stream_fragmented+0x146>
 8014c72:	a907      	add	r1, sp, #28
 8014c74:	4630      	mov	r0, r6
 8014c76:	f000 fff9 	bl	8015c6c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014c7a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014c7e:	4630      	mov	r0, r6
 8014c80:	1a52      	subs	r2, r2, r1
 8014c82:	f7f7 fc4f 	bl	800c524 <ucdr_init_buffer>
 8014c86:	9b05      	ldr	r3, [sp, #20]
 8014c88:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014c8c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014c8e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014c92:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014c94:	491b      	ldr	r1, [pc, #108]	@ (8014d04 <uxr_prepare_output_stream_fragmented+0x190>)
 8014c96:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8014ca0:	462a      	mov	r2, r5
 8014ca2:	f7f7 fc13 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	b011      	add	sp, #68	@ 0x44
 8014caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8014cb0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	4798      	blx	r3
 8014cb6:	b920      	cbnz	r0, 8014cc2 <uxr_prepare_output_stream_fragmented+0x14e>
 8014cb8:	2400      	movs	r4, #0
 8014cba:	4620      	mov	r0, r4
 8014cbc:	b011      	add	sp, #68	@ 0x44
 8014cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f003 fb58 	bl	8018378 <get_available_free_slots>
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	f47f af6d 	bne.w	8014ba8 <uxr_prepare_output_stream_fragmented+0x34>
 8014cce:	e7f3      	b.n	8014cb8 <uxr_prepare_output_stream_fragmented+0x144>
 8014cd0:	4638      	mov	r0, r7
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	f003 fb70 	bl	80183b8 <uxr_seq_num_add>
 8014cd8:	8921      	ldrh	r1, [r4, #8]
 8014cda:	fbb0 f2f1 	udiv	r2, r0, r1
 8014cde:	fb01 0912 	mls	r9, r1, r2, r0
 8014ce2:	fa1f f289 	uxth.w	r2, r9
 8014ce6:	6863      	ldr	r3, [r4, #4]
 8014ce8:	fbb3 f9f1 	udiv	r9, r3, r1
 8014cec:	6823      	ldr	r3, [r4, #0]
 8014cee:	fb02 f909 	mul.w	r9, r2, r9
 8014cf2:	f109 0904 	add.w	r9, r9, #4
 8014cf6:	4499      	add	r9, r3
 8014cf8:	4607      	mov	r7, r0
 8014cfa:	7b23      	ldrb	r3, [r4, #12]
 8014cfc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014d00:	e76b      	b.n	8014bda <uxr_prepare_output_stream_fragmented+0x66>
 8014d02:	bf00      	nop
 8014d04:	08014a01 	.word	0x08014a01

08014d08 <uxr_serialize_message_header>:
 8014d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	4616      	mov	r6, r2
 8014d0e:	4604      	mov	r4, r0
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	460d      	mov	r5, r1
 8014d14:	9f08      	ldr	r7, [sp, #32]
 8014d16:	f7f6 fac3 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8014d1a:	4631      	mov	r1, r6
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	f7f6 fabf 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8014d22:	9a01      	ldr	r2, [sp, #4]
 8014d24:	2101      	movs	r1, #1
 8014d26:	4620      	mov	r0, r4
 8014d28:	f7f6 fb66 	bl	800b3f8 <ucdr_serialize_endian_uint16_t>
 8014d2c:	062b      	lsls	r3, r5, #24
 8014d2e:	d501      	bpl.n	8014d34 <uxr_serialize_message_header+0x2c>
 8014d30:	b003      	add	sp, #12
 8014d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d34:	2204      	movs	r2, #4
 8014d36:	4639      	mov	r1, r7
 8014d38:	4620      	mov	r0, r4
 8014d3a:	b003      	add	sp, #12
 8014d3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d40:	f002 bd12 	b.w	8017768 <ucdr_serialize_array_uint8_t>

08014d44 <uxr_deserialize_message_header>:
 8014d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d46:	b083      	sub	sp, #12
 8014d48:	4616      	mov	r6, r2
 8014d4a:	4604      	mov	r4, r0
 8014d4c:	9301      	str	r3, [sp, #4]
 8014d4e:	460d      	mov	r5, r1
 8014d50:	9f08      	ldr	r7, [sp, #32]
 8014d52:	f7f6 fabb 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8014d56:	4631      	mov	r1, r6
 8014d58:	4620      	mov	r0, r4
 8014d5a:	f7f6 fab7 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8014d5e:	9a01      	ldr	r2, [sp, #4]
 8014d60:	2101      	movs	r1, #1
 8014d62:	4620      	mov	r0, r4
 8014d64:	f7f6 fc3c 	bl	800b5e0 <ucdr_deserialize_endian_uint16_t>
 8014d68:	f995 3000 	ldrsb.w	r3, [r5]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	da01      	bge.n	8014d74 <uxr_deserialize_message_header+0x30>
 8014d70:	b003      	add	sp, #12
 8014d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d74:	2204      	movs	r2, #4
 8014d76:	4639      	mov	r1, r7
 8014d78:	4620      	mov	r0, r4
 8014d7a:	b003      	add	sp, #12
 8014d7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d80:	f002 bd56 	b.w	8017830 <ucdr_deserialize_array_uint8_t>

08014d84 <uxr_serialize_submessage_header>:
 8014d84:	b530      	push	{r4, r5, lr}
 8014d86:	b083      	sub	sp, #12
 8014d88:	4615      	mov	r5, r2
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	9301      	str	r3, [sp, #4]
 8014d8e:	f7f6 fa87 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8014d92:	4629      	mov	r1, r5
 8014d94:	4620      	mov	r0, r4
 8014d96:	f7f6 fa83 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8014d9a:	9a01      	ldr	r2, [sp, #4]
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	4620      	mov	r0, r4
 8014da0:	b003      	add	sp, #12
 8014da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014da6:	f7f6 bb27 	b.w	800b3f8 <ucdr_serialize_endian_uint16_t>
 8014daa:	bf00      	nop

08014dac <uxr_deserialize_submessage_header>:
 8014dac:	b530      	push	{r4, r5, lr}
 8014dae:	b083      	sub	sp, #12
 8014db0:	4615      	mov	r5, r2
 8014db2:	4604      	mov	r4, r0
 8014db4:	9301      	str	r3, [sp, #4]
 8014db6:	f7f6 fa89 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8014dba:	4629      	mov	r1, r5
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	f7f6 fa85 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8014dc2:	9a01      	ldr	r2, [sp, #4]
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	b003      	add	sp, #12
 8014dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dce:	f7f6 bc07 	b.w	800b5e0 <ucdr_deserialize_endian_uint16_t>
 8014dd2:	bf00      	nop

08014dd4 <uxr_serialize_CLIENT_Representation>:
 8014dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dd8:	2204      	movs	r2, #4
 8014dda:	460e      	mov	r6, r1
 8014ddc:	4605      	mov	r5, r0
 8014dde:	f002 fcc3 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014de2:	2202      	movs	r2, #2
 8014de4:	4607      	mov	r7, r0
 8014de6:	1d31      	adds	r1, r6, #4
 8014de8:	4628      	mov	r0, r5
 8014dea:	f002 fcbd 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014dee:	4038      	ands	r0, r7
 8014df0:	2202      	movs	r2, #2
 8014df2:	1db1      	adds	r1, r6, #6
 8014df4:	b2c7      	uxtb	r7, r0
 8014df6:	4628      	mov	r0, r5
 8014df8:	f002 fcb6 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014dfc:	2204      	movs	r2, #4
 8014dfe:	4007      	ands	r7, r0
 8014e00:	f106 0108 	add.w	r1, r6, #8
 8014e04:	4628      	mov	r0, r5
 8014e06:	f002 fcaf 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014e0a:	7b31      	ldrb	r1, [r6, #12]
 8014e0c:	4007      	ands	r7, r0
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f7f6 fa46 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8014e14:	7b71      	ldrb	r1, [r6, #13]
 8014e16:	4007      	ands	r7, r0
 8014e18:	4628      	mov	r0, r5
 8014e1a:	f7f6 fa13 	bl	800b244 <ucdr_serialize_bool>
 8014e1e:	7b73      	ldrb	r3, [r6, #13]
 8014e20:	ea07 0800 	and.w	r8, r7, r0
 8014e24:	b93b      	cbnz	r3, 8014e36 <uxr_serialize_CLIENT_Representation+0x62>
 8014e26:	8bb1      	ldrh	r1, [r6, #28]
 8014e28:	4628      	mov	r0, r5
 8014e2a:	f7f6 fa65 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8014e2e:	ea08 0000 	and.w	r0, r8, r0
 8014e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e36:	6931      	ldr	r1, [r6, #16]
 8014e38:	4628      	mov	r0, r5
 8014e3a:	f7f6 fc47 	bl	800b6cc <ucdr_serialize_uint32_t>
 8014e3e:	6933      	ldr	r3, [r6, #16]
 8014e40:	b1e3      	cbz	r3, 8014e7c <uxr_serialize_CLIENT_Representation+0xa8>
 8014e42:	b1c0      	cbz	r0, 8014e76 <uxr_serialize_CLIENT_Representation+0xa2>
 8014e44:	4637      	mov	r7, r6
 8014e46:	f04f 0900 	mov.w	r9, #0
 8014e4a:	e001      	b.n	8014e50 <uxr_serialize_CLIENT_Representation+0x7c>
 8014e4c:	3708      	adds	r7, #8
 8014e4e:	b194      	cbz	r4, 8014e76 <uxr_serialize_CLIENT_Representation+0xa2>
 8014e50:	6979      	ldr	r1, [r7, #20]
 8014e52:	4628      	mov	r0, r5
 8014e54:	f002 fd50 	bl	80178f8 <ucdr_serialize_string>
 8014e58:	69b9      	ldr	r1, [r7, #24]
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	4628      	mov	r0, r5
 8014e5e:	f002 fd4b 	bl	80178f8 <ucdr_serialize_string>
 8014e62:	6933      	ldr	r3, [r6, #16]
 8014e64:	f109 0901 	add.w	r9, r9, #1
 8014e68:	4004      	ands	r4, r0
 8014e6a:	4599      	cmp	r9, r3
 8014e6c:	b2e4      	uxtb	r4, r4
 8014e6e:	d3ed      	bcc.n	8014e4c <uxr_serialize_CLIENT_Representation+0x78>
 8014e70:	ea08 0804 	and.w	r8, r8, r4
 8014e74:	e7d7      	b.n	8014e26 <uxr_serialize_CLIENT_Representation+0x52>
 8014e76:	f04f 0800 	mov.w	r8, #0
 8014e7a:	e7d4      	b.n	8014e26 <uxr_serialize_CLIENT_Representation+0x52>
 8014e7c:	ea08 0800 	and.w	r8, r8, r0
 8014e80:	e7d1      	b.n	8014e26 <uxr_serialize_CLIENT_Representation+0x52>
 8014e82:	bf00      	nop

08014e84 <uxr_deserialize_CLIENT_Representation>:
 8014e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e88:	2204      	movs	r2, #4
 8014e8a:	460c      	mov	r4, r1
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	f002 fccf 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8014e92:	2202      	movs	r2, #2
 8014e94:	4607      	mov	r7, r0
 8014e96:	1d21      	adds	r1, r4, #4
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f002 fcc9 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8014e9e:	4038      	ands	r0, r7
 8014ea0:	2202      	movs	r2, #2
 8014ea2:	1da1      	adds	r1, r4, #6
 8014ea4:	b2c6      	uxtb	r6, r0
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f002 fcc2 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8014eac:	2204      	movs	r2, #4
 8014eae:	4006      	ands	r6, r0
 8014eb0:	f104 0108 	add.w	r1, r4, #8
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	f002 fcbb 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8014eba:	f104 010c 	add.w	r1, r4, #12
 8014ebe:	4006      	ands	r6, r0
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	f7f6 fa03 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8014ec6:	f104 010d 	add.w	r1, r4, #13
 8014eca:	ea06 0700 	and.w	r7, r6, r0
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f7f6 f9ce 	bl	800b270 <ucdr_deserialize_bool>
 8014ed4:	7b63      	ldrb	r3, [r4, #13]
 8014ed6:	4007      	ands	r7, r0
 8014ed8:	b93b      	cbnz	r3, 8014eea <uxr_deserialize_CLIENT_Representation+0x66>
 8014eda:	f104 011c 	add.w	r1, r4, #28
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f7f6 fb0a 	bl	800b4f8 <ucdr_deserialize_uint16_t>
 8014ee4:	4038      	ands	r0, r7
 8014ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eea:	f104 0110 	add.w	r1, r4, #16
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7f6 fd1c 	bl	800b92c <ucdr_deserialize_uint32_t>
 8014ef4:	6923      	ldr	r3, [r4, #16]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d903      	bls.n	8014f02 <uxr_deserialize_CLIENT_Representation+0x7e>
 8014efa:	2301      	movs	r3, #1
 8014efc:	75ab      	strb	r3, [r5, #22]
 8014efe:	2700      	movs	r7, #0
 8014f00:	e7eb      	b.n	8014eda <uxr_deserialize_CLIENT_Representation+0x56>
 8014f02:	b30b      	cbz	r3, 8014f48 <uxr_deserialize_CLIENT_Representation+0xc4>
 8014f04:	2800      	cmp	r0, #0
 8014f06:	d0fa      	beq.n	8014efe <uxr_deserialize_CLIENT_Representation+0x7a>
 8014f08:	46a0      	mov	r8, r4
 8014f0a:	f04f 0900 	mov.w	r9, #0
 8014f0e:	e001      	b.n	8014f14 <uxr_deserialize_CLIENT_Representation+0x90>
 8014f10:	2e00      	cmp	r6, #0
 8014f12:	d0f4      	beq.n	8014efe <uxr_deserialize_CLIENT_Representation+0x7a>
 8014f14:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	f002 fcfb 	bl	8017918 <ucdr_deserialize_string>
 8014f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f26:	4606      	mov	r6, r0
 8014f28:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	f002 fcf3 	bl	8017918 <ucdr_deserialize_string>
 8014f32:	6923      	ldr	r3, [r4, #16]
 8014f34:	f109 0901 	add.w	r9, r9, #1
 8014f38:	4006      	ands	r6, r0
 8014f3a:	4599      	cmp	r9, r3
 8014f3c:	f108 0808 	add.w	r8, r8, #8
 8014f40:	b2f6      	uxtb	r6, r6
 8014f42:	d3e5      	bcc.n	8014f10 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014f44:	4037      	ands	r7, r6
 8014f46:	e7c8      	b.n	8014eda <uxr_deserialize_CLIENT_Representation+0x56>
 8014f48:	4007      	ands	r7, r0
 8014f4a:	e7c6      	b.n	8014eda <uxr_deserialize_CLIENT_Representation+0x56>

08014f4c <uxr_serialize_AGENT_Representation>:
 8014f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f50:	2204      	movs	r2, #4
 8014f52:	460f      	mov	r7, r1
 8014f54:	4605      	mov	r5, r0
 8014f56:	f002 fc07 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014f5a:	2202      	movs	r2, #2
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	1d39      	adds	r1, r7, #4
 8014f60:	4628      	mov	r0, r5
 8014f62:	f002 fc01 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014f66:	4020      	ands	r0, r4
 8014f68:	2202      	movs	r2, #2
 8014f6a:	1db9      	adds	r1, r7, #6
 8014f6c:	b2c4      	uxtb	r4, r0
 8014f6e:	4628      	mov	r0, r5
 8014f70:	f002 fbfa 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8014f74:	7a39      	ldrb	r1, [r7, #8]
 8014f76:	4004      	ands	r4, r0
 8014f78:	4628      	mov	r0, r5
 8014f7a:	f7f6 f963 	bl	800b244 <ucdr_serialize_bool>
 8014f7e:	7a3b      	ldrb	r3, [r7, #8]
 8014f80:	ea00 0804 	and.w	r8, r0, r4
 8014f84:	b913      	cbnz	r3, 8014f8c <uxr_serialize_AGENT_Representation+0x40>
 8014f86:	4640      	mov	r0, r8
 8014f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f8c:	68f9      	ldr	r1, [r7, #12]
 8014f8e:	4628      	mov	r0, r5
 8014f90:	f7f6 fb9c 	bl	800b6cc <ucdr_serialize_uint32_t>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	b303      	cbz	r3, 8014fda <uxr_serialize_AGENT_Representation+0x8e>
 8014f98:	b1d0      	cbz	r0, 8014fd0 <uxr_serialize_AGENT_Representation+0x84>
 8014f9a:	463e      	mov	r6, r7
 8014f9c:	f04f 0900 	mov.w	r9, #0
 8014fa0:	e001      	b.n	8014fa6 <uxr_serialize_AGENT_Representation+0x5a>
 8014fa2:	3608      	adds	r6, #8
 8014fa4:	b1a4      	cbz	r4, 8014fd0 <uxr_serialize_AGENT_Representation+0x84>
 8014fa6:	6931      	ldr	r1, [r6, #16]
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f002 fca5 	bl	80178f8 <ucdr_serialize_string>
 8014fae:	6971      	ldr	r1, [r6, #20]
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	4628      	mov	r0, r5
 8014fb4:	f002 fca0 	bl	80178f8 <ucdr_serialize_string>
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f109 0901 	add.w	r9, r9, #1
 8014fbe:	4004      	ands	r4, r0
 8014fc0:	4599      	cmp	r9, r3
 8014fc2:	b2e4      	uxtb	r4, r4
 8014fc4:	d3ed      	bcc.n	8014fa2 <uxr_serialize_AGENT_Representation+0x56>
 8014fc6:	ea08 0804 	and.w	r8, r8, r4
 8014fca:	4640      	mov	r0, r8
 8014fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fd0:	f04f 0800 	mov.w	r8, #0
 8014fd4:	4640      	mov	r0, r8
 8014fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fda:	ea08 0800 	and.w	r8, r8, r0
 8014fde:	e7d2      	b.n	8014f86 <uxr_serialize_AGENT_Representation+0x3a>

08014fe0 <uxr_serialize_DATAWRITER_Representation>:
 8014fe0:	b570      	push	{r4, r5, r6, lr}
 8014fe2:	460d      	mov	r5, r1
 8014fe4:	7809      	ldrb	r1, [r1, #0]
 8014fe6:	4606      	mov	r6, r0
 8014fe8:	f7f6 f95a 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8014fec:	4604      	mov	r4, r0
 8014fee:	b130      	cbz	r0, 8014ffe <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014ff0:	782b      	ldrb	r3, [r5, #0]
 8014ff2:	2b02      	cmp	r3, #2
 8014ff4:	d00c      	beq.n	8015010 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014ff6:	2b03      	cmp	r3, #3
 8014ff8:	d010      	beq.n	801501c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d008      	beq.n	8015010 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014ffe:	2202      	movs	r2, #2
 8015000:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015004:	4630      	mov	r0, r6
 8015006:	f002 fbaf 	bl	8017768 <ucdr_serialize_array_uint8_t>
 801500a:	4020      	ands	r0, r4
 801500c:	b2c0      	uxtb	r0, r0
 801500e:	bd70      	pop	{r4, r5, r6, pc}
 8015010:	6869      	ldr	r1, [r5, #4]
 8015012:	4630      	mov	r0, r6
 8015014:	f002 fc70 	bl	80178f8 <ucdr_serialize_string>
 8015018:	4604      	mov	r4, r0
 801501a:	e7f0      	b.n	8014ffe <uxr_serialize_DATAWRITER_Representation+0x1e>
 801501c:	4629      	mov	r1, r5
 801501e:	4630      	mov	r0, r6
 8015020:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015024:	3104      	adds	r1, #4
 8015026:	f7fd f9c7 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 801502a:	4604      	mov	r4, r0
 801502c:	e7e7      	b.n	8014ffe <uxr_serialize_DATAWRITER_Representation+0x1e>
 801502e:	bf00      	nop

08015030 <uxr_serialize_ObjectVariant.part.0>:
 8015030:	b570      	push	{r4, r5, r6, lr}
 8015032:	780b      	ldrb	r3, [r1, #0]
 8015034:	3b01      	subs	r3, #1
 8015036:	460c      	mov	r4, r1
 8015038:	4605      	mov	r5, r0
 801503a:	2b0d      	cmp	r3, #13
 801503c:	d854      	bhi.n	80150e8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801503e:	e8df f003 	tbb	[pc, r3]
 8015042:	0730      	.short	0x0730
 8015044:	07071b1b 	.word	0x07071b1b
 8015048:	0c530707 	.word	0x0c530707
 801504c:	494e0c0c 	.word	0x494e0c0c
 8015050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015054:	3104      	adds	r1, #4
 8015056:	f7ff bfc3 	b.w	8014fe0 <uxr_serialize_DATAWRITER_Representation>
 801505a:	7909      	ldrb	r1, [r1, #4]
 801505c:	f7f6 f920 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015060:	b1e8      	cbz	r0, 801509e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015062:	7923      	ldrb	r3, [r4, #4]
 8015064:	2b01      	cmp	r3, #1
 8015066:	d001      	beq.n	801506c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015068:	2b02      	cmp	r3, #2
 801506a:	d13d      	bne.n	80150e8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801506c:	68a1      	ldr	r1, [r4, #8]
 801506e:	4628      	mov	r0, r5
 8015070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015074:	f002 bc40 	b.w	80178f8 <ucdr_serialize_string>
 8015078:	7909      	ldrb	r1, [r1, #4]
 801507a:	f7f6 f911 	bl	800b2a0 <ucdr_serialize_uint8_t>
 801507e:	4606      	mov	r6, r0
 8015080:	b120      	cbz	r0, 801508c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015082:	7923      	ldrb	r3, [r4, #4]
 8015084:	2b02      	cmp	r3, #2
 8015086:	d039      	beq.n	80150fc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015088:	2b03      	cmp	r3, #3
 801508a:	d02f      	beq.n	80150ec <uxr_serialize_ObjectVariant.part.0+0xbc>
 801508c:	2202      	movs	r2, #2
 801508e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8015092:	4628      	mov	r0, r5
 8015094:	f002 fb68 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015098:	4030      	ands	r0, r6
 801509a:	b2c0      	uxtb	r0, r0
 801509c:	bd70      	pop	{r4, r5, r6, pc}
 801509e:	2000      	movs	r0, #0
 80150a0:	bd70      	pop	{r4, r5, r6, pc}
 80150a2:	7909      	ldrb	r1, [r1, #4]
 80150a4:	f7f6 f8fc 	bl	800b2a0 <ucdr_serialize_uint8_t>
 80150a8:	4606      	mov	r6, r0
 80150aa:	b158      	cbz	r0, 80150c4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80150ac:	7923      	ldrb	r3, [r4, #4]
 80150ae:	2b02      	cmp	r3, #2
 80150b0:	d003      	beq.n	80150ba <uxr_serialize_ObjectVariant.part.0+0x8a>
 80150b2:	2b03      	cmp	r3, #3
 80150b4:	d028      	beq.n	8015108 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80150b6:	2b01      	cmp	r3, #1
 80150b8:	d104      	bne.n	80150c4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80150ba:	68a1      	ldr	r1, [r4, #8]
 80150bc:	4628      	mov	r0, r5
 80150be:	f002 fc1b 	bl	80178f8 <ucdr_serialize_string>
 80150c2:	4606      	mov	r6, r0
 80150c4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80150c8:	4628      	mov	r0, r5
 80150ca:	f7f6 fe25 	bl	800bd18 <ucdr_serialize_int16_t>
 80150ce:	4030      	ands	r0, r6
 80150d0:	b2c0      	uxtb	r0, r0
 80150d2:	bd70      	pop	{r4, r5, r6, pc}
 80150d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d8:	3104      	adds	r1, #4
 80150da:	f7ff be7b 	b.w	8014dd4 <uxr_serialize_CLIENT_Representation>
 80150de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150e2:	3104      	adds	r1, #4
 80150e4:	f7ff bf32 	b.w	8014f4c <uxr_serialize_AGENT_Representation>
 80150e8:	2001      	movs	r0, #1
 80150ea:	bd70      	pop	{r4, r5, r6, pc}
 80150ec:	68a2      	ldr	r2, [r4, #8]
 80150ee:	f104 010c 	add.w	r1, r4, #12
 80150f2:	4628      	mov	r0, r5
 80150f4:	f7fd f960 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 80150f8:	4606      	mov	r6, r0
 80150fa:	e7c7      	b.n	801508c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80150fc:	68a1      	ldr	r1, [r4, #8]
 80150fe:	4628      	mov	r0, r5
 8015100:	f002 fbfa 	bl	80178f8 <ucdr_serialize_string>
 8015104:	4606      	mov	r6, r0
 8015106:	e7c1      	b.n	801508c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015108:	68a2      	ldr	r2, [r4, #8]
 801510a:	f104 010c 	add.w	r1, r4, #12
 801510e:	4628      	mov	r0, r5
 8015110:	f7fd f952 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 8015114:	4606      	mov	r6, r0
 8015116:	e7d5      	b.n	80150c4 <uxr_serialize_ObjectVariant.part.0+0x94>

08015118 <uxr_deserialize_DATAWRITER_Representation>:
 8015118:	b570      	push	{r4, r5, r6, lr}
 801511a:	4606      	mov	r6, r0
 801511c:	460d      	mov	r5, r1
 801511e:	f7f6 f8d5 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015122:	4604      	mov	r4, r0
 8015124:	b130      	cbz	r0, 8015134 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015126:	782b      	ldrb	r3, [r5, #0]
 8015128:	2b02      	cmp	r3, #2
 801512a:	d00c      	beq.n	8015146 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801512c:	2b03      	cmp	r3, #3
 801512e:	d012      	beq.n	8015156 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015130:	2b01      	cmp	r3, #1
 8015132:	d008      	beq.n	8015146 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015134:	2202      	movs	r2, #2
 8015136:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801513a:	4630      	mov	r0, r6
 801513c:	f002 fb78 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015140:	4020      	ands	r0, r4
 8015142:	b2c0      	uxtb	r0, r0
 8015144:	bd70      	pop	{r4, r5, r6, pc}
 8015146:	6869      	ldr	r1, [r5, #4]
 8015148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801514c:	4630      	mov	r0, r6
 801514e:	f002 fbe3 	bl	8017918 <ucdr_deserialize_string>
 8015152:	4604      	mov	r4, r0
 8015154:	e7ee      	b.n	8015134 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015156:	1d2b      	adds	r3, r5, #4
 8015158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801515c:	f105 0108 	add.w	r1, r5, #8
 8015160:	4630      	mov	r0, r6
 8015162:	f7fd f93b 	bl	80123dc <ucdr_deserialize_sequence_uint8_t>
 8015166:	4604      	mov	r4, r0
 8015168:	e7e4      	b.n	8015134 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801516a:	bf00      	nop

0801516c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801516c:	b570      	push	{r4, r5, r6, lr}
 801516e:	460d      	mov	r5, r1
 8015170:	7809      	ldrb	r1, [r1, #0]
 8015172:	4606      	mov	r6, r0
 8015174:	f7f6 f866 	bl	800b244 <ucdr_serialize_bool>
 8015178:	782b      	ldrb	r3, [r5, #0]
 801517a:	4604      	mov	r4, r0
 801517c:	b94b      	cbnz	r3, 8015192 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801517e:	7a29      	ldrb	r1, [r5, #8]
 8015180:	4630      	mov	r0, r6
 8015182:	f7f6 f85f 	bl	800b244 <ucdr_serialize_bool>
 8015186:	7a2b      	ldrb	r3, [r5, #8]
 8015188:	4004      	ands	r4, r0
 801518a:	b2e4      	uxtb	r4, r4
 801518c:	b943      	cbnz	r3, 80151a0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801518e:	4620      	mov	r0, r4
 8015190:	bd70      	pop	{r4, r5, r6, pc}
 8015192:	6869      	ldr	r1, [r5, #4]
 8015194:	4630      	mov	r0, r6
 8015196:	f002 fbaf 	bl	80178f8 <ucdr_serialize_string>
 801519a:	4004      	ands	r4, r0
 801519c:	b2e4      	uxtb	r4, r4
 801519e:	e7ee      	b.n	801517e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80151a0:	68e9      	ldr	r1, [r5, #12]
 80151a2:	4630      	mov	r0, r6
 80151a4:	f002 fba8 	bl	80178f8 <ucdr_serialize_string>
 80151a8:	4004      	ands	r4, r0
 80151aa:	4620      	mov	r0, r4
 80151ac:	bd70      	pop	{r4, r5, r6, pc}
 80151ae:	bf00      	nop

080151b0 <uxr_serialize_OBJK_Topic_Binary>:
 80151b0:	b570      	push	{r4, r5, r6, lr}
 80151b2:	460d      	mov	r5, r1
 80151b4:	6809      	ldr	r1, [r1, #0]
 80151b6:	4606      	mov	r6, r0
 80151b8:	f002 fb9e 	bl	80178f8 <ucdr_serialize_string>
 80151bc:	7929      	ldrb	r1, [r5, #4]
 80151be:	4604      	mov	r4, r0
 80151c0:	4630      	mov	r0, r6
 80151c2:	f7f6 f83f 	bl	800b244 <ucdr_serialize_bool>
 80151c6:	792b      	ldrb	r3, [r5, #4]
 80151c8:	4004      	ands	r4, r0
 80151ca:	b2e4      	uxtb	r4, r4
 80151cc:	b943      	cbnz	r3, 80151e0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80151ce:	7b29      	ldrb	r1, [r5, #12]
 80151d0:	4630      	mov	r0, r6
 80151d2:	f7f6 f837 	bl	800b244 <ucdr_serialize_bool>
 80151d6:	7b2b      	ldrb	r3, [r5, #12]
 80151d8:	4004      	ands	r4, r0
 80151da:	b93b      	cbnz	r3, 80151ec <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80151dc:	4620      	mov	r0, r4
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	68a9      	ldr	r1, [r5, #8]
 80151e2:	4630      	mov	r0, r6
 80151e4:	f002 fb88 	bl	80178f8 <ucdr_serialize_string>
 80151e8:	4004      	ands	r4, r0
 80151ea:	e7f0      	b.n	80151ce <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80151ec:	6929      	ldr	r1, [r5, #16]
 80151ee:	4630      	mov	r0, r6
 80151f0:	f002 fb82 	bl	80178f8 <ucdr_serialize_string>
 80151f4:	4004      	ands	r4, r0
 80151f6:	b2e4      	uxtb	r4, r4
 80151f8:	4620      	mov	r0, r4
 80151fa:	bd70      	pop	{r4, r5, r6, pc}

080151fc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80151fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015200:	460c      	mov	r4, r1
 8015202:	7809      	ldrb	r1, [r1, #0]
 8015204:	4606      	mov	r6, r0
 8015206:	f7f6 f81d 	bl	800b244 <ucdr_serialize_bool>
 801520a:	7823      	ldrb	r3, [r4, #0]
 801520c:	4605      	mov	r5, r0
 801520e:	b96b      	cbnz	r3, 801522c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015210:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015214:	4630      	mov	r0, r6
 8015216:	f7f6 f815 	bl	800b244 <ucdr_serialize_bool>
 801521a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801521e:	4005      	ands	r5, r0
 8015220:	b2ed      	uxtb	r5, r5
 8015222:	2b00      	cmp	r3, #0
 8015224:	d169      	bne.n	80152fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015226:	4628      	mov	r0, r5
 8015228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801522c:	6861      	ldr	r1, [r4, #4]
 801522e:	4630      	mov	r0, r6
 8015230:	f7f6 fa4c 	bl	800b6cc <ucdr_serialize_uint32_t>
 8015234:	6863      	ldr	r3, [r4, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d06b      	beq.n	8015312 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801523a:	2800      	cmp	r0, #0
 801523c:	d067      	beq.n	801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801523e:	68a1      	ldr	r1, [r4, #8]
 8015240:	4630      	mov	r0, r6
 8015242:	f002 fb59 	bl	80178f8 <ucdr_serialize_string>
 8015246:	6863      	ldr	r3, [r4, #4]
 8015248:	2b01      	cmp	r3, #1
 801524a:	d953      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801524c:	2800      	cmp	r0, #0
 801524e:	d05e      	beq.n	801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015250:	68e1      	ldr	r1, [r4, #12]
 8015252:	4630      	mov	r0, r6
 8015254:	f002 fb50 	bl	80178f8 <ucdr_serialize_string>
 8015258:	6863      	ldr	r3, [r4, #4]
 801525a:	2b02      	cmp	r3, #2
 801525c:	d94a      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801525e:	2800      	cmp	r0, #0
 8015260:	d055      	beq.n	801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015262:	6921      	ldr	r1, [r4, #16]
 8015264:	4630      	mov	r0, r6
 8015266:	f002 fb47 	bl	80178f8 <ucdr_serialize_string>
 801526a:	6863      	ldr	r3, [r4, #4]
 801526c:	2b03      	cmp	r3, #3
 801526e:	d941      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015270:	2800      	cmp	r0, #0
 8015272:	d04c      	beq.n	801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015274:	6961      	ldr	r1, [r4, #20]
 8015276:	4630      	mov	r0, r6
 8015278:	f002 fb3e 	bl	80178f8 <ucdr_serialize_string>
 801527c:	6863      	ldr	r3, [r4, #4]
 801527e:	2b04      	cmp	r3, #4
 8015280:	d938      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015282:	2800      	cmp	r0, #0
 8015284:	d043      	beq.n	801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015286:	69a1      	ldr	r1, [r4, #24]
 8015288:	4630      	mov	r0, r6
 801528a:	f002 fb35 	bl	80178f8 <ucdr_serialize_string>
 801528e:	6863      	ldr	r3, [r4, #4]
 8015290:	2b05      	cmp	r3, #5
 8015292:	d92f      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015294:	2800      	cmp	r0, #0
 8015296:	d03a      	beq.n	801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015298:	69e1      	ldr	r1, [r4, #28]
 801529a:	4630      	mov	r0, r6
 801529c:	f002 fb2c 	bl	80178f8 <ucdr_serialize_string>
 80152a0:	6863      	ldr	r3, [r4, #4]
 80152a2:	2b06      	cmp	r3, #6
 80152a4:	d926      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152a6:	b390      	cbz	r0, 801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152a8:	6a21      	ldr	r1, [r4, #32]
 80152aa:	4630      	mov	r0, r6
 80152ac:	f002 fb24 	bl	80178f8 <ucdr_serialize_string>
 80152b0:	6863      	ldr	r3, [r4, #4]
 80152b2:	2b07      	cmp	r3, #7
 80152b4:	d91e      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152b6:	b350      	cbz	r0, 801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80152ba:	4630      	mov	r0, r6
 80152bc:	f002 fb1c 	bl	80178f8 <ucdr_serialize_string>
 80152c0:	6863      	ldr	r3, [r4, #4]
 80152c2:	2b08      	cmp	r3, #8
 80152c4:	d916      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152c6:	b310      	cbz	r0, 801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80152ca:	4630      	mov	r0, r6
 80152cc:	f002 fb14 	bl	80178f8 <ucdr_serialize_string>
 80152d0:	6863      	ldr	r3, [r4, #4]
 80152d2:	2b09      	cmp	r3, #9
 80152d4:	d90e      	bls.n	80152f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152d6:	b1d0      	cbz	r0, 801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152d8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80152dc:	2709      	movs	r7, #9
 80152de:	e000      	b.n	80152e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80152e0:	b1a8      	cbz	r0, 801530e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152e2:	f858 1b04 	ldr.w	r1, [r8], #4
 80152e6:	4630      	mov	r0, r6
 80152e8:	f002 fb06 	bl	80178f8 <ucdr_serialize_string>
 80152ec:	6862      	ldr	r2, [r4, #4]
 80152ee:	3701      	adds	r7, #1
 80152f0:	4297      	cmp	r7, r2
 80152f2:	d3f5      	bcc.n	80152e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80152f4:	4005      	ands	r5, r0
 80152f6:	b2ed      	uxtb	r5, r5
 80152f8:	e78a      	b.n	8015210 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80152fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80152fc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015300:	4630      	mov	r0, r6
 8015302:	f7fd f859 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 8015306:	4005      	ands	r5, r0
 8015308:	4628      	mov	r0, r5
 801530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530e:	2500      	movs	r5, #0
 8015310:	e77e      	b.n	8015210 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015312:	4028      	ands	r0, r5
 8015314:	b2c5      	uxtb	r5, r0
 8015316:	e77b      	b.n	8015210 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015318 <uxr_serialize_OBJK_Publisher_Binary>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	460d      	mov	r5, r1
 801531c:	7809      	ldrb	r1, [r1, #0]
 801531e:	4606      	mov	r6, r0
 8015320:	f7f5 ff90 	bl	800b244 <ucdr_serialize_bool>
 8015324:	782b      	ldrb	r3, [r5, #0]
 8015326:	4604      	mov	r4, r0
 8015328:	b94b      	cbnz	r3, 801533e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801532a:	7a29      	ldrb	r1, [r5, #8]
 801532c:	4630      	mov	r0, r6
 801532e:	f7f5 ff89 	bl	800b244 <ucdr_serialize_bool>
 8015332:	7a2b      	ldrb	r3, [r5, #8]
 8015334:	4004      	ands	r4, r0
 8015336:	b2e4      	uxtb	r4, r4
 8015338:	b943      	cbnz	r3, 801534c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801533a:	4620      	mov	r0, r4
 801533c:	bd70      	pop	{r4, r5, r6, pc}
 801533e:	6869      	ldr	r1, [r5, #4]
 8015340:	4630      	mov	r0, r6
 8015342:	f002 fad9 	bl	80178f8 <ucdr_serialize_string>
 8015346:	4004      	ands	r4, r0
 8015348:	b2e4      	uxtb	r4, r4
 801534a:	e7ee      	b.n	801532a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801534c:	f105 010c 	add.w	r1, r5, #12
 8015350:	4630      	mov	r0, r6
 8015352:	f7ff ff53 	bl	80151fc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015356:	4004      	ands	r4, r0
 8015358:	4620      	mov	r0, r4
 801535a:	bd70      	pop	{r4, r5, r6, pc}

0801535c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015360:	460c      	mov	r4, r1
 8015362:	7809      	ldrb	r1, [r1, #0]
 8015364:	4606      	mov	r6, r0
 8015366:	f7f5 ff6d 	bl	800b244 <ucdr_serialize_bool>
 801536a:	7823      	ldrb	r3, [r4, #0]
 801536c:	4605      	mov	r5, r0
 801536e:	b96b      	cbnz	r3, 801538c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8015370:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015374:	4630      	mov	r0, r6
 8015376:	f7f5 ff65 	bl	800b244 <ucdr_serialize_bool>
 801537a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801537e:	4005      	ands	r5, r0
 8015380:	b2ed      	uxtb	r5, r5
 8015382:	2b00      	cmp	r3, #0
 8015384:	d169      	bne.n	801545a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8015386:	4628      	mov	r0, r5
 8015388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801538c:	6861      	ldr	r1, [r4, #4]
 801538e:	4630      	mov	r0, r6
 8015390:	f7f6 f99c 	bl	800b6cc <ucdr_serialize_uint32_t>
 8015394:	6863      	ldr	r3, [r4, #4]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d06b      	beq.n	8015472 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801539a:	2800      	cmp	r0, #0
 801539c:	d067      	beq.n	801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801539e:	68a1      	ldr	r1, [r4, #8]
 80153a0:	4630      	mov	r0, r6
 80153a2:	f002 faa9 	bl	80178f8 <ucdr_serialize_string>
 80153a6:	6863      	ldr	r3, [r4, #4]
 80153a8:	2b01      	cmp	r3, #1
 80153aa:	d953      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80153ac:	2800      	cmp	r0, #0
 80153ae:	d05e      	beq.n	801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80153b0:	68e1      	ldr	r1, [r4, #12]
 80153b2:	4630      	mov	r0, r6
 80153b4:	f002 faa0 	bl	80178f8 <ucdr_serialize_string>
 80153b8:	6863      	ldr	r3, [r4, #4]
 80153ba:	2b02      	cmp	r3, #2
 80153bc:	d94a      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80153be:	2800      	cmp	r0, #0
 80153c0:	d055      	beq.n	801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80153c2:	6921      	ldr	r1, [r4, #16]
 80153c4:	4630      	mov	r0, r6
 80153c6:	f002 fa97 	bl	80178f8 <ucdr_serialize_string>
 80153ca:	6863      	ldr	r3, [r4, #4]
 80153cc:	2b03      	cmp	r3, #3
 80153ce:	d941      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	d04c      	beq.n	801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80153d4:	6961      	ldr	r1, [r4, #20]
 80153d6:	4630      	mov	r0, r6
 80153d8:	f002 fa8e 	bl	80178f8 <ucdr_serialize_string>
 80153dc:	6863      	ldr	r3, [r4, #4]
 80153de:	2b04      	cmp	r3, #4
 80153e0:	d938      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d043      	beq.n	801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80153e6:	69a1      	ldr	r1, [r4, #24]
 80153e8:	4630      	mov	r0, r6
 80153ea:	f002 fa85 	bl	80178f8 <ucdr_serialize_string>
 80153ee:	6863      	ldr	r3, [r4, #4]
 80153f0:	2b05      	cmp	r3, #5
 80153f2:	d92f      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80153f4:	2800      	cmp	r0, #0
 80153f6:	d03a      	beq.n	801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80153f8:	69e1      	ldr	r1, [r4, #28]
 80153fa:	4630      	mov	r0, r6
 80153fc:	f002 fa7c 	bl	80178f8 <ucdr_serialize_string>
 8015400:	6863      	ldr	r3, [r4, #4]
 8015402:	2b06      	cmp	r3, #6
 8015404:	d926      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015406:	b390      	cbz	r0, 801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015408:	6a21      	ldr	r1, [r4, #32]
 801540a:	4630      	mov	r0, r6
 801540c:	f002 fa74 	bl	80178f8 <ucdr_serialize_string>
 8015410:	6863      	ldr	r3, [r4, #4]
 8015412:	2b07      	cmp	r3, #7
 8015414:	d91e      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015416:	b350      	cbz	r0, 801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015418:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801541a:	4630      	mov	r0, r6
 801541c:	f002 fa6c 	bl	80178f8 <ucdr_serialize_string>
 8015420:	6863      	ldr	r3, [r4, #4]
 8015422:	2b08      	cmp	r3, #8
 8015424:	d916      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015426:	b310      	cbz	r0, 801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015428:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801542a:	4630      	mov	r0, r6
 801542c:	f002 fa64 	bl	80178f8 <ucdr_serialize_string>
 8015430:	6863      	ldr	r3, [r4, #4]
 8015432:	2b09      	cmp	r3, #9
 8015434:	d90e      	bls.n	8015454 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015436:	b1d0      	cbz	r0, 801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015438:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801543c:	2709      	movs	r7, #9
 801543e:	e000      	b.n	8015442 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8015440:	b1a8      	cbz	r0, 801546e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015442:	f858 1b04 	ldr.w	r1, [r8], #4
 8015446:	4630      	mov	r0, r6
 8015448:	f002 fa56 	bl	80178f8 <ucdr_serialize_string>
 801544c:	6862      	ldr	r2, [r4, #4]
 801544e:	3701      	adds	r7, #1
 8015450:	4297      	cmp	r7, r2
 8015452:	d3f5      	bcc.n	8015440 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8015454:	4005      	ands	r5, r0
 8015456:	b2ed      	uxtb	r5, r5
 8015458:	e78a      	b.n	8015370 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801545a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801545c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015460:	4630      	mov	r0, r6
 8015462:	f7fc ffa9 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 8015466:	4005      	ands	r5, r0
 8015468:	4628      	mov	r0, r5
 801546a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801546e:	2500      	movs	r5, #0
 8015470:	e77e      	b.n	8015370 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015472:	4028      	ands	r0, r5
 8015474:	b2c5      	uxtb	r5, r0
 8015476:	e77b      	b.n	8015370 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015478 <uxr_serialize_OBJK_Subscriber_Binary>:
 8015478:	b570      	push	{r4, r5, r6, lr}
 801547a:	460d      	mov	r5, r1
 801547c:	7809      	ldrb	r1, [r1, #0]
 801547e:	4606      	mov	r6, r0
 8015480:	f7f5 fee0 	bl	800b244 <ucdr_serialize_bool>
 8015484:	782b      	ldrb	r3, [r5, #0]
 8015486:	4604      	mov	r4, r0
 8015488:	b94b      	cbnz	r3, 801549e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801548a:	7a29      	ldrb	r1, [r5, #8]
 801548c:	4630      	mov	r0, r6
 801548e:	f7f5 fed9 	bl	800b244 <ucdr_serialize_bool>
 8015492:	7a2b      	ldrb	r3, [r5, #8]
 8015494:	4004      	ands	r4, r0
 8015496:	b2e4      	uxtb	r4, r4
 8015498:	b943      	cbnz	r3, 80154ac <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801549a:	4620      	mov	r0, r4
 801549c:	bd70      	pop	{r4, r5, r6, pc}
 801549e:	6869      	ldr	r1, [r5, #4]
 80154a0:	4630      	mov	r0, r6
 80154a2:	f002 fa29 	bl	80178f8 <ucdr_serialize_string>
 80154a6:	4004      	ands	r4, r0
 80154a8:	b2e4      	uxtb	r4, r4
 80154aa:	e7ee      	b.n	801548a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80154ac:	f105 010c 	add.w	r1, r5, #12
 80154b0:	4630      	mov	r0, r6
 80154b2:	f7ff ff53 	bl	801535c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80154b6:	4004      	ands	r4, r0
 80154b8:	4620      	mov	r0, r4
 80154ba:	bd70      	pop	{r4, r5, r6, pc}

080154bc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80154bc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80154c0:	4688      	mov	r8, r1
 80154c2:	8809      	ldrh	r1, [r1, #0]
 80154c4:	4681      	mov	r9, r0
 80154c6:	f7f5 ff17 	bl	800b2f8 <ucdr_serialize_uint16_t>
 80154ca:	f898 1002 	ldrb.w	r1, [r8, #2]
 80154ce:	4606      	mov	r6, r0
 80154d0:	4648      	mov	r0, r9
 80154d2:	f7f5 feb7 	bl	800b244 <ucdr_serialize_bool>
 80154d6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80154da:	4006      	ands	r6, r0
 80154dc:	b2f5      	uxtb	r5, r6
 80154de:	b9eb      	cbnz	r3, 801551c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80154e0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80154e4:	4648      	mov	r0, r9
 80154e6:	f7f5 fead 	bl	800b244 <ucdr_serialize_bool>
 80154ea:	f898 3006 	ldrb.w	r3, [r8, #6]
 80154ee:	4005      	ands	r5, r0
 80154f0:	bb7b      	cbnz	r3, 8015552 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80154f2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80154f6:	4648      	mov	r0, r9
 80154f8:	f7f5 fea4 	bl	800b244 <ucdr_serialize_bool>
 80154fc:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015500:	4005      	ands	r5, r0
 8015502:	b9f3      	cbnz	r3, 8015542 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015504:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015508:	4648      	mov	r0, r9
 801550a:	f7f5 fe9b 	bl	800b244 <ucdr_serialize_bool>
 801550e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015512:	4005      	ands	r5, r0
 8015514:	b94b      	cbnz	r3, 801552a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8015516:	4628      	mov	r0, r5
 8015518:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801551c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015520:	4648      	mov	r0, r9
 8015522:	f7f5 fee9 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015526:	4005      	ands	r5, r0
 8015528:	e7da      	b.n	80154e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801552a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801552e:	f108 011c 	add.w	r1, r8, #28
 8015532:	4648      	mov	r0, r9
 8015534:	f7fc ff40 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 8015538:	4028      	ands	r0, r5
 801553a:	b2c5      	uxtb	r5, r0
 801553c:	4628      	mov	r0, r5
 801553e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015542:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015546:	4648      	mov	r0, r9
 8015548:	f7f6 f8c0 	bl	800b6cc <ucdr_serialize_uint32_t>
 801554c:	4028      	ands	r0, r5
 801554e:	b2c5      	uxtb	r5, r0
 8015550:	e7d8      	b.n	8015504 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015552:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015556:	4648      	mov	r0, r9
 8015558:	f7f6 f8b8 	bl	800b6cc <ucdr_serialize_uint32_t>
 801555c:	4028      	ands	r0, r5
 801555e:	b2c5      	uxtb	r5, r0
 8015560:	e7c7      	b.n	80154f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015562:	bf00      	nop

08015564 <uxr_serialize_OBJK_DataReader_Binary>:
 8015564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015566:	2202      	movs	r2, #2
 8015568:	460c      	mov	r4, r1
 801556a:	4606      	mov	r6, r0
 801556c:	f002 f8fc 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015570:	78a1      	ldrb	r1, [r4, #2]
 8015572:	4605      	mov	r5, r0
 8015574:	4630      	mov	r0, r6
 8015576:	f7f5 fe65 	bl	800b244 <ucdr_serialize_bool>
 801557a:	78a3      	ldrb	r3, [r4, #2]
 801557c:	4005      	ands	r5, r0
 801557e:	b2ed      	uxtb	r5, r5
 8015580:	b90b      	cbnz	r3, 8015586 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8015582:	4628      	mov	r0, r5
 8015584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015586:	f104 0108 	add.w	r1, r4, #8
 801558a:	4630      	mov	r0, r6
 801558c:	f7ff ff96 	bl	80154bc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015590:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015594:	4607      	mov	r7, r0
 8015596:	4630      	mov	r0, r6
 8015598:	f7f5 fe54 	bl	800b244 <ucdr_serialize_bool>
 801559c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80155a0:	4038      	ands	r0, r7
 80155a2:	b2c7      	uxtb	r7, r0
 80155a4:	b95b      	cbnz	r3, 80155be <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80155a6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80155aa:	4630      	mov	r0, r6
 80155ac:	f7f5 fe4a 	bl	800b244 <ucdr_serialize_bool>
 80155b0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80155b4:	4007      	ands	r7, r0
 80155b6:	b94b      	cbnz	r3, 80155cc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80155b8:	403d      	ands	r5, r7
 80155ba:	4628      	mov	r0, r5
 80155bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155be:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80155c2:	4630      	mov	r0, r6
 80155c4:	f7f6 fad8 	bl	800bb78 <ucdr_serialize_uint64_t>
 80155c8:	4007      	ands	r7, r0
 80155ca:	e7ec      	b.n	80155a6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80155cc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80155ce:	4630      	mov	r0, r6
 80155d0:	f002 f992 	bl	80178f8 <ucdr_serialize_string>
 80155d4:	4007      	ands	r7, r0
 80155d6:	b2ff      	uxtb	r7, r7
 80155d8:	e7ee      	b.n	80155b8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80155da:	bf00      	nop

080155dc <uxr_serialize_OBJK_DataWriter_Binary>:
 80155dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155de:	2202      	movs	r2, #2
 80155e0:	460d      	mov	r5, r1
 80155e2:	4606      	mov	r6, r0
 80155e4:	f002 f8c0 	bl	8017768 <ucdr_serialize_array_uint8_t>
 80155e8:	78a9      	ldrb	r1, [r5, #2]
 80155ea:	4604      	mov	r4, r0
 80155ec:	4630      	mov	r0, r6
 80155ee:	f7f5 fe29 	bl	800b244 <ucdr_serialize_bool>
 80155f2:	78ab      	ldrb	r3, [r5, #2]
 80155f4:	4004      	ands	r4, r0
 80155f6:	b2e4      	uxtb	r4, r4
 80155f8:	b90b      	cbnz	r3, 80155fe <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80155fa:	4620      	mov	r0, r4
 80155fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155fe:	f105 0108 	add.w	r1, r5, #8
 8015602:	4630      	mov	r0, r6
 8015604:	f7ff ff5a 	bl	80154bc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015608:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801560c:	4607      	mov	r7, r0
 801560e:	4630      	mov	r0, r6
 8015610:	f7f5 fe18 	bl	800b244 <ucdr_serialize_bool>
 8015614:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015618:	4038      	ands	r0, r7
 801561a:	b2c7      	uxtb	r7, r0
 801561c:	b913      	cbnz	r3, 8015624 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801561e:	403c      	ands	r4, r7
 8015620:	4620      	mov	r0, r4
 8015622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015624:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8015628:	4630      	mov	r0, r6
 801562a:	f7f6 faa5 	bl	800bb78 <ucdr_serialize_uint64_t>
 801562e:	4007      	ands	r7, r0
 8015630:	e7f5      	b.n	801561e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015632:	bf00      	nop

08015634 <uxr_deserialize_ObjectVariant>:
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	4605      	mov	r5, r0
 8015638:	460e      	mov	r6, r1
 801563a:	f7f5 fe47 	bl	800b2cc <ucdr_deserialize_uint8_t>
 801563e:	b168      	cbz	r0, 801565c <uxr_deserialize_ObjectVariant+0x28>
 8015640:	7833      	ldrb	r3, [r6, #0]
 8015642:	3b01      	subs	r3, #1
 8015644:	4604      	mov	r4, r0
 8015646:	2b0d      	cmp	r3, #13
 8015648:	d809      	bhi.n	801565e <uxr_deserialize_ObjectVariant+0x2a>
 801564a:	e8df f003 	tbb	[pc, r3]
 801564e:	0a41      	.short	0x0a41
 8015650:	0a0a2323 	.word	0x0a0a2323
 8015654:	10080a0a 	.word	0x10080a0a
 8015658:	565c1010 	.word	0x565c1010
 801565c:	2400      	movs	r4, #0
 801565e:	4620      	mov	r0, r4
 8015660:	bd70      	pop	{r4, r5, r6, pc}
 8015662:	1d31      	adds	r1, r6, #4
 8015664:	4628      	mov	r0, r5
 8015666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801566a:	f7ff bd55 	b.w	8015118 <uxr_deserialize_DATAWRITER_Representation>
 801566e:	1d31      	adds	r1, r6, #4
 8015670:	4628      	mov	r0, r5
 8015672:	f7f5 fe2b 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015676:	2800      	cmp	r0, #0
 8015678:	d0f0      	beq.n	801565c <uxr_deserialize_ObjectVariant+0x28>
 801567a:	7933      	ldrb	r3, [r6, #4]
 801567c:	2b01      	cmp	r3, #1
 801567e:	d001      	beq.n	8015684 <uxr_deserialize_ObjectVariant+0x50>
 8015680:	2b02      	cmp	r3, #2
 8015682:	d1ec      	bne.n	801565e <uxr_deserialize_ObjectVariant+0x2a>
 8015684:	68b1      	ldr	r1, [r6, #8]
 8015686:	4628      	mov	r0, r5
 8015688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801568c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015690:	f002 b942 	b.w	8017918 <ucdr_deserialize_string>
 8015694:	1d31      	adds	r1, r6, #4
 8015696:	4628      	mov	r0, r5
 8015698:	f7f5 fe18 	bl	800b2cc <ucdr_deserialize_uint8_t>
 801569c:	4604      	mov	r4, r0
 801569e:	b170      	cbz	r0, 80156be <uxr_deserialize_ObjectVariant+0x8a>
 80156a0:	7933      	ldrb	r3, [r6, #4]
 80156a2:	2b02      	cmp	r3, #2
 80156a4:	d04c      	beq.n	8015740 <uxr_deserialize_ObjectVariant+0x10c>
 80156a6:	2b03      	cmp	r3, #3
 80156a8:	d109      	bne.n	80156be <uxr_deserialize_ObjectVariant+0x8a>
 80156aa:	f106 0308 	add.w	r3, r6, #8
 80156ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80156b2:	f106 010c 	add.w	r1, r6, #12
 80156b6:	4628      	mov	r0, r5
 80156b8:	f7fc fe90 	bl	80123dc <ucdr_deserialize_sequence_uint8_t>
 80156bc:	4604      	mov	r4, r0
 80156be:	2202      	movs	r2, #2
 80156c0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80156c4:	4628      	mov	r0, r5
 80156c6:	f002 f8b3 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 80156ca:	4020      	ands	r0, r4
 80156cc:	b2c4      	uxtb	r4, r0
 80156ce:	e7c6      	b.n	801565e <uxr_deserialize_ObjectVariant+0x2a>
 80156d0:	1d31      	adds	r1, r6, #4
 80156d2:	4628      	mov	r0, r5
 80156d4:	f7f5 fdfa 	bl	800b2cc <ucdr_deserialize_uint8_t>
 80156d8:	4604      	mov	r4, r0
 80156da:	b130      	cbz	r0, 80156ea <uxr_deserialize_ObjectVariant+0xb6>
 80156dc:	7933      	ldrb	r3, [r6, #4]
 80156de:	2b02      	cmp	r3, #2
 80156e0:	d036      	beq.n	8015750 <uxr_deserialize_ObjectVariant+0x11c>
 80156e2:	2b03      	cmp	r3, #3
 80156e4:	d03c      	beq.n	8015760 <uxr_deserialize_ObjectVariant+0x12c>
 80156e6:	2b01      	cmp	r3, #1
 80156e8:	d032      	beq.n	8015750 <uxr_deserialize_ObjectVariant+0x11c>
 80156ea:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80156ee:	4628      	mov	r0, r5
 80156f0:	f7f6 fb92 	bl	800be18 <ucdr_deserialize_int16_t>
 80156f4:	4020      	ands	r0, r4
 80156f6:	b2c4      	uxtb	r4, r0
 80156f8:	e7b1      	b.n	801565e <uxr_deserialize_ObjectVariant+0x2a>
 80156fa:	1d31      	adds	r1, r6, #4
 80156fc:	4628      	mov	r0, r5
 80156fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015702:	f7ff bbbf 	b.w	8014e84 <uxr_deserialize_CLIENT_Representation>
 8015706:	2204      	movs	r2, #4
 8015708:	18b1      	adds	r1, r6, r2
 801570a:	4628      	mov	r0, r5
 801570c:	f002 f890 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015710:	2202      	movs	r2, #2
 8015712:	f106 0108 	add.w	r1, r6, #8
 8015716:	4604      	mov	r4, r0
 8015718:	4628      	mov	r0, r5
 801571a:	f002 f889 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 801571e:	2202      	movs	r2, #2
 8015720:	4004      	ands	r4, r0
 8015722:	f106 010a 	add.w	r1, r6, #10
 8015726:	4628      	mov	r0, r5
 8015728:	f002 f882 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 801572c:	b2e4      	uxtb	r4, r4
 801572e:	4603      	mov	r3, r0
 8015730:	f106 010c 	add.w	r1, r6, #12
 8015734:	4628      	mov	r0, r5
 8015736:	401c      	ands	r4, r3
 8015738:	f7f5 fd9a 	bl	800b270 <ucdr_deserialize_bool>
 801573c:	4004      	ands	r4, r0
 801573e:	e78e      	b.n	801565e <uxr_deserialize_ObjectVariant+0x2a>
 8015740:	68b1      	ldr	r1, [r6, #8]
 8015742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015746:	4628      	mov	r0, r5
 8015748:	f002 f8e6 	bl	8017918 <ucdr_deserialize_string>
 801574c:	4604      	mov	r4, r0
 801574e:	e7b6      	b.n	80156be <uxr_deserialize_ObjectVariant+0x8a>
 8015750:	68b1      	ldr	r1, [r6, #8]
 8015752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015756:	4628      	mov	r0, r5
 8015758:	f002 f8de 	bl	8017918 <ucdr_deserialize_string>
 801575c:	4604      	mov	r4, r0
 801575e:	e7c4      	b.n	80156ea <uxr_deserialize_ObjectVariant+0xb6>
 8015760:	f106 0308 	add.w	r3, r6, #8
 8015764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015768:	f106 010c 	add.w	r1, r6, #12
 801576c:	4628      	mov	r0, r5
 801576e:	f7fc fe35 	bl	80123dc <ucdr_deserialize_sequence_uint8_t>
 8015772:	4604      	mov	r4, r0
 8015774:	e7b9      	b.n	80156ea <uxr_deserialize_ObjectVariant+0xb6>
 8015776:	bf00      	nop

08015778 <uxr_deserialize_BaseObjectRequest>:
 8015778:	b570      	push	{r4, r5, r6, lr}
 801577a:	2202      	movs	r2, #2
 801577c:	4605      	mov	r5, r0
 801577e:	460e      	mov	r6, r1
 8015780:	f002 f856 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015784:	2202      	movs	r2, #2
 8015786:	4604      	mov	r4, r0
 8015788:	18b1      	adds	r1, r6, r2
 801578a:	4628      	mov	r0, r5
 801578c:	f002 f850 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015790:	4020      	ands	r0, r4
 8015792:	b2c0      	uxtb	r0, r0
 8015794:	bd70      	pop	{r4, r5, r6, pc}
 8015796:	bf00      	nop

08015798 <uxr_serialize_ActivityInfoVariant>:
 8015798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801579c:	460d      	mov	r5, r1
 801579e:	7809      	ldrb	r1, [r1, #0]
 80157a0:	4607      	mov	r7, r0
 80157a2:	f7f5 fd7d 	bl	800b2a0 <ucdr_serialize_uint8_t>
 80157a6:	4681      	mov	r9, r0
 80157a8:	b138      	cbz	r0, 80157ba <uxr_serialize_ActivityInfoVariant+0x22>
 80157aa:	782b      	ldrb	r3, [r5, #0]
 80157ac:	2b06      	cmp	r3, #6
 80157ae:	f000 8082 	beq.w	80158b6 <uxr_serialize_ActivityInfoVariant+0x11e>
 80157b2:	2b0d      	cmp	r3, #13
 80157b4:	d016      	beq.n	80157e4 <uxr_serialize_ActivityInfoVariant+0x4c>
 80157b6:	2b05      	cmp	r3, #5
 80157b8:	d002      	beq.n	80157c0 <uxr_serialize_ActivityInfoVariant+0x28>
 80157ba:	4648      	mov	r0, r9
 80157bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157c0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80157c4:	4638      	mov	r0, r7
 80157c6:	f7f6 faa7 	bl	800bd18 <ucdr_serialize_int16_t>
 80157ca:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80157ce:	4681      	mov	r9, r0
 80157d0:	4638      	mov	r0, r7
 80157d2:	f7f6 f9d1 	bl	800bb78 <ucdr_serialize_uint64_t>
 80157d6:	ea09 0000 	and.w	r0, r9, r0
 80157da:	fa5f f980 	uxtb.w	r9, r0
 80157de:	4648      	mov	r0, r9
 80157e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157e4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80157e8:	4638      	mov	r0, r7
 80157ea:	f7f6 fa95 	bl	800bd18 <ucdr_serialize_int16_t>
 80157ee:	68e9      	ldr	r1, [r5, #12]
 80157f0:	4681      	mov	r9, r0
 80157f2:	4638      	mov	r0, r7
 80157f4:	f7f5 ff6a 	bl	800b6cc <ucdr_serialize_uint32_t>
 80157f8:	68eb      	ldr	r3, [r5, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d0eb      	beq.n	80157d6 <uxr_serialize_ActivityInfoVariant+0x3e>
 80157fe:	b320      	cbz	r0, 801584a <uxr_serialize_ActivityInfoVariant+0xb2>
 8015800:	f105 080c 	add.w	r8, r5, #12
 8015804:	2600      	movs	r6, #0
 8015806:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801580a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801580e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8015812:	4638      	mov	r0, r7
 8015814:	f7f5 fd44 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015818:	2800      	cmp	r0, #0
 801581a:	d053      	beq.n	80158c4 <uxr_serialize_ActivityInfoVariant+0x12c>
 801581c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015820:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015824:	0074      	lsls	r4, r6, #1
 8015826:	00c9      	lsls	r1, r1, #3
 8015828:	2b03      	cmp	r3, #3
 801582a:	d854      	bhi.n	80158d6 <uxr_serialize_ActivityInfoVariant+0x13e>
 801582c:	e8df f003 	tbb	[pc, r3]
 8015830:	02102132 	.word	0x02102132
 8015834:	4441      	add	r1, r8
 8015836:	4638      	mov	r0, r7
 8015838:	6889      	ldr	r1, [r1, #8]
 801583a:	f002 f85d 	bl	80178f8 <ucdr_serialize_string>
 801583e:	68ea      	ldr	r2, [r5, #12]
 8015840:	3601      	adds	r6, #1
 8015842:	4296      	cmp	r6, r2
 8015844:	d242      	bcs.n	80158cc <uxr_serialize_ActivityInfoVariant+0x134>
 8015846:	2800      	cmp	r0, #0
 8015848:	d1dd      	bne.n	8015806 <uxr_serialize_ActivityInfoVariant+0x6e>
 801584a:	f04f 0900 	mov.w	r9, #0
 801584e:	e7b4      	b.n	80157ba <uxr_serialize_ActivityInfoVariant+0x22>
 8015850:	3108      	adds	r1, #8
 8015852:	4441      	add	r1, r8
 8015854:	2210      	movs	r2, #16
 8015856:	4638      	mov	r0, r7
 8015858:	f001 ff86 	bl	8017768 <ucdr_serialize_array_uint8_t>
 801585c:	4434      	add	r4, r6
 801585e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015862:	4604      	mov	r4, r0
 8015864:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015866:	4638      	mov	r0, r7
 8015868:	f7f5 ff30 	bl	800b6cc <ucdr_serialize_uint32_t>
 801586c:	4020      	ands	r0, r4
 801586e:	b2c0      	uxtb	r0, r0
 8015870:	e7e5      	b.n	801583e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015872:	3108      	adds	r1, #8
 8015874:	4441      	add	r1, r8
 8015876:	2204      	movs	r2, #4
 8015878:	4638      	mov	r0, r7
 801587a:	f001 ff75 	bl	8017768 <ucdr_serialize_array_uint8_t>
 801587e:	4434      	add	r4, r6
 8015880:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015884:	4604      	mov	r4, r0
 8015886:	8b19      	ldrh	r1, [r3, #24]
 8015888:	4638      	mov	r0, r7
 801588a:	f7f5 fd35 	bl	800b2f8 <ucdr_serialize_uint16_t>
 801588e:	4020      	ands	r0, r4
 8015890:	b2c0      	uxtb	r0, r0
 8015892:	e7d4      	b.n	801583e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015894:	3108      	adds	r1, #8
 8015896:	4441      	add	r1, r8
 8015898:	2202      	movs	r2, #2
 801589a:	4638      	mov	r0, r7
 801589c:	f001 ff64 	bl	8017768 <ucdr_serialize_array_uint8_t>
 80158a0:	4434      	add	r4, r6
 80158a2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80158a6:	4604      	mov	r4, r0
 80158a8:	7d99      	ldrb	r1, [r3, #22]
 80158aa:	4638      	mov	r0, r7
 80158ac:	f7f5 fcf8 	bl	800b2a0 <ucdr_serialize_uint8_t>
 80158b0:	4020      	ands	r0, r4
 80158b2:	b2c0      	uxtb	r0, r0
 80158b4:	e7c3      	b.n	801583e <uxr_serialize_ActivityInfoVariant+0xa6>
 80158b6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80158ba:	4638      	mov	r0, r7
 80158bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158c0:	f7f6 ba2a 	b.w	800bd18 <ucdr_serialize_int16_t>
 80158c4:	68ea      	ldr	r2, [r5, #12]
 80158c6:	3601      	adds	r6, #1
 80158c8:	42b2      	cmp	r2, r6
 80158ca:	d8be      	bhi.n	801584a <uxr_serialize_ActivityInfoVariant+0xb2>
 80158cc:	ea09 0900 	and.w	r9, r9, r0
 80158d0:	fa5f f989 	uxtb.w	r9, r9
 80158d4:	e771      	b.n	80157ba <uxr_serialize_ActivityInfoVariant+0x22>
 80158d6:	68eb      	ldr	r3, [r5, #12]
 80158d8:	3601      	adds	r6, #1
 80158da:	429e      	cmp	r6, r3
 80158dc:	f10a 0a18 	add.w	sl, sl, #24
 80158e0:	d395      	bcc.n	801580e <uxr_serialize_ActivityInfoVariant+0x76>
 80158e2:	e76a      	b.n	80157ba <uxr_serialize_ActivityInfoVariant+0x22>

080158e4 <uxr_deserialize_BaseObjectReply>:
 80158e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158e8:	2202      	movs	r2, #2
 80158ea:	4606      	mov	r6, r0
 80158ec:	460f      	mov	r7, r1
 80158ee:	f001 ff9f 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 80158f2:	2202      	movs	r2, #2
 80158f4:	18b9      	adds	r1, r7, r2
 80158f6:	4605      	mov	r5, r0
 80158f8:	4630      	mov	r0, r6
 80158fa:	f001 ff99 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 80158fe:	1d39      	adds	r1, r7, #4
 8015900:	4680      	mov	r8, r0
 8015902:	4630      	mov	r0, r6
 8015904:	f7f5 fce2 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015908:	1d79      	adds	r1, r7, #5
 801590a:	4604      	mov	r4, r0
 801590c:	4630      	mov	r0, r6
 801590e:	f7f5 fcdd 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015912:	ea05 0508 	and.w	r5, r5, r8
 8015916:	402c      	ands	r4, r5
 8015918:	4020      	ands	r0, r4
 801591a:	b2c0      	uxtb	r0, r0
 801591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015920 <uxr_serialize_ReadSpecification>:
 8015920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015924:	460e      	mov	r6, r1
 8015926:	7809      	ldrb	r1, [r1, #0]
 8015928:	4607      	mov	r7, r0
 801592a:	f7f5 fcb9 	bl	800b2a0 <ucdr_serialize_uint8_t>
 801592e:	7871      	ldrb	r1, [r6, #1]
 8015930:	4604      	mov	r4, r0
 8015932:	4638      	mov	r0, r7
 8015934:	f7f5 fcb4 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015938:	78b1      	ldrb	r1, [r6, #2]
 801593a:	4004      	ands	r4, r0
 801593c:	4638      	mov	r0, r7
 801593e:	f7f5 fc81 	bl	800b244 <ucdr_serialize_bool>
 8015942:	78b3      	ldrb	r3, [r6, #2]
 8015944:	b2e4      	uxtb	r4, r4
 8015946:	4004      	ands	r4, r0
 8015948:	b94b      	cbnz	r3, 801595e <uxr_serialize_ReadSpecification+0x3e>
 801594a:	7a31      	ldrb	r1, [r6, #8]
 801594c:	4638      	mov	r0, r7
 801594e:	f7f5 fc79 	bl	800b244 <ucdr_serialize_bool>
 8015952:	7a33      	ldrb	r3, [r6, #8]
 8015954:	4004      	ands	r4, r0
 8015956:	b943      	cbnz	r3, 801596a <uxr_serialize_ReadSpecification+0x4a>
 8015958:	4620      	mov	r0, r4
 801595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801595e:	6871      	ldr	r1, [r6, #4]
 8015960:	4638      	mov	r0, r7
 8015962:	f001 ffc9 	bl	80178f8 <ucdr_serialize_string>
 8015966:	4004      	ands	r4, r0
 8015968:	e7ef      	b.n	801594a <uxr_serialize_ReadSpecification+0x2a>
 801596a:	8971      	ldrh	r1, [r6, #10]
 801596c:	4638      	mov	r0, r7
 801596e:	f7f5 fcc3 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015972:	89b1      	ldrh	r1, [r6, #12]
 8015974:	4605      	mov	r5, r0
 8015976:	4638      	mov	r0, r7
 8015978:	f7f5 fcbe 	bl	800b2f8 <ucdr_serialize_uint16_t>
 801597c:	89f1      	ldrh	r1, [r6, #14]
 801597e:	4005      	ands	r5, r0
 8015980:	4638      	mov	r0, r7
 8015982:	f7f5 fcb9 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015986:	8a31      	ldrh	r1, [r6, #16]
 8015988:	4680      	mov	r8, r0
 801598a:	4638      	mov	r0, r7
 801598c:	f7f5 fcb4 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015990:	b2ed      	uxtb	r5, r5
 8015992:	4025      	ands	r5, r4
 8015994:	ea08 0505 	and.w	r5, r8, r5
 8015998:	ea00 0405 	and.w	r4, r0, r5
 801599c:	4620      	mov	r0, r4
 801599e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a2:	bf00      	nop

080159a4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80159a4:	f7ff ba16 	b.w	8014dd4 <uxr_serialize_CLIENT_Representation>

080159a8 <uxr_serialize_CREATE_Payload>:
 80159a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159aa:	2202      	movs	r2, #2
 80159ac:	4607      	mov	r7, r0
 80159ae:	460e      	mov	r6, r1
 80159b0:	f001 feda 	bl	8017768 <ucdr_serialize_array_uint8_t>
 80159b4:	2202      	movs	r2, #2
 80159b6:	18b1      	adds	r1, r6, r2
 80159b8:	4605      	mov	r5, r0
 80159ba:	4638      	mov	r0, r7
 80159bc:	f001 fed4 	bl	8017768 <ucdr_serialize_array_uint8_t>
 80159c0:	7931      	ldrb	r1, [r6, #4]
 80159c2:	4604      	mov	r4, r0
 80159c4:	4638      	mov	r0, r7
 80159c6:	f7f5 fc6b 	bl	800b2a0 <ucdr_serialize_uint8_t>
 80159ca:	b170      	cbz	r0, 80159ea <uxr_serialize_CREATE_Payload+0x42>
 80159cc:	7933      	ldrb	r3, [r6, #4]
 80159ce:	402c      	ands	r4, r5
 80159d0:	3b01      	subs	r3, #1
 80159d2:	b2e4      	uxtb	r4, r4
 80159d4:	2b0d      	cmp	r3, #13
 80159d6:	d809      	bhi.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 80159d8:	e8df f003 	tbb	[pc, r3]
 80159dc:	23230a4c 	.word	0x23230a4c
 80159e0:	0a0a0a0a 	.word	0x0a0a0a0a
 80159e4:	12121208 	.word	0x12121208
 80159e8:	3e45      	.short	0x3e45
 80159ea:	2400      	movs	r4, #0
 80159ec:	4620      	mov	r0, r4
 80159ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f0:	f106 0108 	add.w	r1, r6, #8
 80159f4:	4638      	mov	r0, r7
 80159f6:	f7ff faf3 	bl	8014fe0 <uxr_serialize_DATAWRITER_Representation>
 80159fa:	4004      	ands	r4, r0
 80159fc:	4620      	mov	r0, r4
 80159fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a00:	7a31      	ldrb	r1, [r6, #8]
 8015a02:	4638      	mov	r0, r7
 8015a04:	f7f5 fc4c 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d0ee      	beq.n	80159ea <uxr_serialize_CREATE_Payload+0x42>
 8015a0c:	7a33      	ldrb	r3, [r6, #8]
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	d001      	beq.n	8015a16 <uxr_serialize_CREATE_Payload+0x6e>
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	d1ea      	bne.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 8015a16:	68f1      	ldr	r1, [r6, #12]
 8015a18:	4638      	mov	r0, r7
 8015a1a:	f001 ff6d 	bl	80178f8 <ucdr_serialize_string>
 8015a1e:	4004      	ands	r4, r0
 8015a20:	e7e4      	b.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 8015a22:	7a31      	ldrb	r1, [r6, #8]
 8015a24:	4638      	mov	r0, r7
 8015a26:	f7f5 fc3b 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015a2a:	4605      	mov	r5, r0
 8015a2c:	b158      	cbz	r0, 8015a46 <uxr_serialize_CREATE_Payload+0x9e>
 8015a2e:	7a33      	ldrb	r3, [r6, #8]
 8015a30:	2b02      	cmp	r3, #2
 8015a32:	d034      	beq.n	8015a9e <uxr_serialize_CREATE_Payload+0xf6>
 8015a34:	2b03      	cmp	r3, #3
 8015a36:	d106      	bne.n	8015a46 <uxr_serialize_CREATE_Payload+0x9e>
 8015a38:	68f2      	ldr	r2, [r6, #12]
 8015a3a:	f106 0110 	add.w	r1, r6, #16
 8015a3e:	4638      	mov	r0, r7
 8015a40:	f7fc fcba 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 8015a44:	4605      	mov	r5, r0
 8015a46:	2202      	movs	r2, #2
 8015a48:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8015a4c:	4638      	mov	r0, r7
 8015a4e:	f001 fe8b 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015a52:	4028      	ands	r0, r5
 8015a54:	4004      	ands	r4, r0
 8015a56:	e7c9      	b.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 8015a58:	f106 0108 	add.w	r1, r6, #8
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	f7ff f9b9 	bl	8014dd4 <uxr_serialize_CLIENT_Representation>
 8015a62:	4004      	ands	r4, r0
 8015a64:	e7c2      	b.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 8015a66:	f106 0108 	add.w	r1, r6, #8
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f7ff fa6e 	bl	8014f4c <uxr_serialize_AGENT_Representation>
 8015a70:	4004      	ands	r4, r0
 8015a72:	e7bb      	b.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 8015a74:	7a31      	ldrb	r1, [r6, #8]
 8015a76:	4638      	mov	r0, r7
 8015a78:	f7f5 fc12 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015a7c:	4605      	mov	r5, r0
 8015a7e:	b130      	cbz	r0, 8015a8e <uxr_serialize_CREATE_Payload+0xe6>
 8015a80:	7a33      	ldrb	r3, [r6, #8]
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d011      	beq.n	8015aaa <uxr_serialize_CREATE_Payload+0x102>
 8015a86:	2b03      	cmp	r3, #3
 8015a88:	d015      	beq.n	8015ab6 <uxr_serialize_CREATE_Payload+0x10e>
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d00d      	beq.n	8015aaa <uxr_serialize_CREATE_Payload+0x102>
 8015a8e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8015a92:	4638      	mov	r0, r7
 8015a94:	f7f6 f940 	bl	800bd18 <ucdr_serialize_int16_t>
 8015a98:	4028      	ands	r0, r5
 8015a9a:	4004      	ands	r4, r0
 8015a9c:	e7a6      	b.n	80159ec <uxr_serialize_CREATE_Payload+0x44>
 8015a9e:	68f1      	ldr	r1, [r6, #12]
 8015aa0:	4638      	mov	r0, r7
 8015aa2:	f001 ff29 	bl	80178f8 <ucdr_serialize_string>
 8015aa6:	4605      	mov	r5, r0
 8015aa8:	e7cd      	b.n	8015a46 <uxr_serialize_CREATE_Payload+0x9e>
 8015aaa:	68f1      	ldr	r1, [r6, #12]
 8015aac:	4638      	mov	r0, r7
 8015aae:	f001 ff23 	bl	80178f8 <ucdr_serialize_string>
 8015ab2:	4605      	mov	r5, r0
 8015ab4:	e7eb      	b.n	8015a8e <uxr_serialize_CREATE_Payload+0xe6>
 8015ab6:	68f2      	ldr	r2, [r6, #12]
 8015ab8:	f106 0110 	add.w	r1, r6, #16
 8015abc:	4638      	mov	r0, r7
 8015abe:	f7fc fc7b 	bl	80123b8 <ucdr_serialize_sequence_uint8_t>
 8015ac2:	4605      	mov	r5, r0
 8015ac4:	e7e3      	b.n	8015a8e <uxr_serialize_CREATE_Payload+0xe6>
 8015ac6:	bf00      	nop

08015ac8 <uxr_deserialize_GET_INFO_Payload>:
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	2202      	movs	r2, #2
 8015acc:	4605      	mov	r5, r0
 8015ace:	460e      	mov	r6, r1
 8015ad0:	f001 feae 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015ad4:	2202      	movs	r2, #2
 8015ad6:	18b1      	adds	r1, r6, r2
 8015ad8:	4604      	mov	r4, r0
 8015ada:	4628      	mov	r0, r5
 8015adc:	f001 fea8 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015ae0:	1d31      	adds	r1, r6, #4
 8015ae2:	4004      	ands	r4, r0
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	f7f5 ff21 	bl	800b92c <ucdr_deserialize_uint32_t>
 8015aea:	b2e4      	uxtb	r4, r4
 8015aec:	4020      	ands	r0, r4
 8015aee:	bd70      	pop	{r4, r5, r6, pc}

08015af0 <uxr_serialize_DELETE_Payload>:
 8015af0:	b570      	push	{r4, r5, r6, lr}
 8015af2:	2202      	movs	r2, #2
 8015af4:	4605      	mov	r5, r0
 8015af6:	460e      	mov	r6, r1
 8015af8:	f001 fe36 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015afc:	2202      	movs	r2, #2
 8015afe:	4604      	mov	r4, r0
 8015b00:	18b1      	adds	r1, r6, r2
 8015b02:	4628      	mov	r0, r5
 8015b04:	f001 fe30 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015b08:	4020      	ands	r0, r4
 8015b0a:	b2c0      	uxtb	r0, r0
 8015b0c:	bd70      	pop	{r4, r5, r6, pc}
 8015b0e:	bf00      	nop

08015b10 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b14:	4605      	mov	r5, r0
 8015b16:	460e      	mov	r6, r1
 8015b18:	f7f5 fbd8 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015b1c:	1c71      	adds	r1, r6, #1
 8015b1e:	4604      	mov	r4, r0
 8015b20:	4628      	mov	r0, r5
 8015b22:	f7f5 fbd3 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015b26:	2204      	movs	r2, #4
 8015b28:	18b1      	adds	r1, r6, r2
 8015b2a:	4680      	mov	r8, r0
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	f001 fe7f 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015b32:	f106 0108 	add.w	r1, r6, #8
 8015b36:	4607      	mov	r7, r0
 8015b38:	2202      	movs	r2, #2
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	f001 fe78 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015b40:	ea04 0308 	and.w	r3, r4, r8
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	ea03 0407 	and.w	r4, r3, r7
 8015b4a:	2202      	movs	r2, #2
 8015b4c:	4607      	mov	r7, r0
 8015b4e:	f106 010a 	add.w	r1, r6, #10
 8015b52:	4628      	mov	r0, r5
 8015b54:	f001 fe6c 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015b58:	f106 010c 	add.w	r1, r6, #12
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	4628      	mov	r0, r5
 8015b60:	461d      	mov	r5, r3
 8015b62:	f7f5 fb85 	bl	800b270 <ucdr_deserialize_bool>
 8015b66:	403c      	ands	r4, r7
 8015b68:	4025      	ands	r5, r4
 8015b6a:	4028      	ands	r0, r5
 8015b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b70 <uxr_deserialize_STATUS_Payload>:
 8015b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b74:	2202      	movs	r2, #2
 8015b76:	4606      	mov	r6, r0
 8015b78:	460f      	mov	r7, r1
 8015b7a:	f001 fe59 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015b7e:	2202      	movs	r2, #2
 8015b80:	18b9      	adds	r1, r7, r2
 8015b82:	4605      	mov	r5, r0
 8015b84:	4630      	mov	r0, r6
 8015b86:	f001 fe53 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015b8a:	1d39      	adds	r1, r7, #4
 8015b8c:	4680      	mov	r8, r0
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f7f5 fb9c 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015b94:	1d79      	adds	r1, r7, #5
 8015b96:	4604      	mov	r4, r0
 8015b98:	4630      	mov	r0, r6
 8015b9a:	f7f5 fb97 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015b9e:	ea05 0508 	and.w	r5, r5, r8
 8015ba2:	402c      	ands	r4, r5
 8015ba4:	4020      	ands	r0, r4
 8015ba6:	b2c0      	uxtb	r0, r0
 8015ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bac <uxr_serialize_INFO_Payload>:
 8015bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb0:	2202      	movs	r2, #2
 8015bb2:	460c      	mov	r4, r1
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	f001 fdd7 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015bba:	2202      	movs	r2, #2
 8015bbc:	18a1      	adds	r1, r4, r2
 8015bbe:	4680      	mov	r8, r0
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f001 fdd1 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015bc6:	7921      	ldrb	r1, [r4, #4]
 8015bc8:	4607      	mov	r7, r0
 8015bca:	4628      	mov	r0, r5
 8015bcc:	f7f5 fb68 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015bd0:	7961      	ldrb	r1, [r4, #5]
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	4628      	mov	r0, r5
 8015bd6:	f7f5 fb63 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015bda:	ea08 0807 	and.w	r8, r8, r7
 8015bde:	ea06 0608 	and.w	r6, r6, r8
 8015be2:	4006      	ands	r6, r0
 8015be4:	7a21      	ldrb	r1, [r4, #8]
 8015be6:	4628      	mov	r0, r5
 8015be8:	f7f5 fb2c 	bl	800b244 <ucdr_serialize_bool>
 8015bec:	7a23      	ldrb	r3, [r4, #8]
 8015bee:	b2f7      	uxtb	r7, r6
 8015bf0:	4606      	mov	r6, r0
 8015bf2:	b96b      	cbnz	r3, 8015c10 <uxr_serialize_INFO_Payload+0x64>
 8015bf4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	f7f5 fb23 	bl	800b244 <ucdr_serialize_bool>
 8015bfe:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015c02:	4030      	ands	r0, r6
 8015c04:	b2c6      	uxtb	r6, r0
 8015c06:	b983      	cbnz	r3, 8015c2a <uxr_serialize_INFO_Payload+0x7e>
 8015c08:	ea06 0007 	and.w	r0, r6, r7
 8015c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c10:	7b21      	ldrb	r1, [r4, #12]
 8015c12:	4628      	mov	r0, r5
 8015c14:	f7f5 fb44 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015c18:	b188      	cbz	r0, 8015c3e <uxr_serialize_INFO_Payload+0x92>
 8015c1a:	f104 010c 	add.w	r1, r4, #12
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f7ff fa06 	bl	8015030 <uxr_serialize_ObjectVariant.part.0>
 8015c24:	4030      	ands	r0, r6
 8015c26:	b2c6      	uxtb	r6, r0
 8015c28:	e7e4      	b.n	8015bf4 <uxr_serialize_INFO_Payload+0x48>
 8015c2a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015c2e:	4628      	mov	r0, r5
 8015c30:	f7ff fdb2 	bl	8015798 <uxr_serialize_ActivityInfoVariant>
 8015c34:	4006      	ands	r6, r0
 8015c36:	ea06 0007 	and.w	r0, r6, r7
 8015c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c3e:	4606      	mov	r6, r0
 8015c40:	e7d8      	b.n	8015bf4 <uxr_serialize_INFO_Payload+0x48>
 8015c42:	bf00      	nop

08015c44 <uxr_serialize_READ_DATA_Payload>:
 8015c44:	b570      	push	{r4, r5, r6, lr}
 8015c46:	2202      	movs	r2, #2
 8015c48:	4605      	mov	r5, r0
 8015c4a:	460e      	mov	r6, r1
 8015c4c:	f001 fd8c 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015c50:	2202      	movs	r2, #2
 8015c52:	18b1      	adds	r1, r6, r2
 8015c54:	4604      	mov	r4, r0
 8015c56:	4628      	mov	r0, r5
 8015c58:	f001 fd86 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015c5c:	1d31      	adds	r1, r6, #4
 8015c5e:	4004      	ands	r4, r0
 8015c60:	4628      	mov	r0, r5
 8015c62:	f7ff fe5d 	bl	8015920 <uxr_serialize_ReadSpecification>
 8015c66:	b2e4      	uxtb	r4, r4
 8015c68:	4020      	ands	r0, r4
 8015c6a:	bd70      	pop	{r4, r5, r6, pc}

08015c6c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015c6c:	b570      	push	{r4, r5, r6, lr}
 8015c6e:	2202      	movs	r2, #2
 8015c70:	4605      	mov	r5, r0
 8015c72:	460e      	mov	r6, r1
 8015c74:	f001 fd78 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015c78:	2202      	movs	r2, #2
 8015c7a:	4604      	mov	r4, r0
 8015c7c:	18b1      	adds	r1, r6, r2
 8015c7e:	4628      	mov	r0, r5
 8015c80:	f001 fd72 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015c84:	4020      	ands	r0, r4
 8015c86:	b2c0      	uxtb	r0, r0
 8015c88:	bd70      	pop	{r4, r5, r6, pc}
 8015c8a:	bf00      	nop

08015c8c <uxr_serialize_ACKNACK_Payload>:
 8015c8c:	b570      	push	{r4, r5, r6, lr}
 8015c8e:	460c      	mov	r4, r1
 8015c90:	460e      	mov	r6, r1
 8015c92:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015c96:	4605      	mov	r5, r0
 8015c98:	f7f5 fb2e 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015c9c:	2202      	movs	r2, #2
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4604      	mov	r4, r0
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	f001 fd60 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015ca8:	7931      	ldrb	r1, [r6, #4]
 8015caa:	4004      	ands	r4, r0
 8015cac:	4628      	mov	r0, r5
 8015cae:	f7f5 faf7 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015cb2:	b2e4      	uxtb	r4, r4
 8015cb4:	4020      	ands	r0, r4
 8015cb6:	bd70      	pop	{r4, r5, r6, pc}

08015cb8 <uxr_deserialize_ACKNACK_Payload>:
 8015cb8:	b570      	push	{r4, r5, r6, lr}
 8015cba:	4605      	mov	r5, r0
 8015cbc:	460e      	mov	r6, r1
 8015cbe:	f7f5 fc1b 	bl	800b4f8 <ucdr_deserialize_uint16_t>
 8015cc2:	2202      	movs	r2, #2
 8015cc4:	18b1      	adds	r1, r6, r2
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	4628      	mov	r0, r5
 8015cca:	f001 fdb1 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015cce:	1d31      	adds	r1, r6, #4
 8015cd0:	4004      	ands	r4, r0
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	f7f5 fafa 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015cd8:	b2e4      	uxtb	r4, r4
 8015cda:	4020      	ands	r0, r4
 8015cdc:	bd70      	pop	{r4, r5, r6, pc}
 8015cde:	bf00      	nop

08015ce0 <uxr_serialize_HEARTBEAT_Payload>:
 8015ce0:	b570      	push	{r4, r5, r6, lr}
 8015ce2:	460d      	mov	r5, r1
 8015ce4:	8809      	ldrh	r1, [r1, #0]
 8015ce6:	4606      	mov	r6, r0
 8015ce8:	f7f5 fb06 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015cec:	8869      	ldrh	r1, [r5, #2]
 8015cee:	4604      	mov	r4, r0
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f7f5 fb01 	bl	800b2f8 <ucdr_serialize_uint16_t>
 8015cf6:	7929      	ldrb	r1, [r5, #4]
 8015cf8:	4004      	ands	r4, r0
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	f7f5 fad0 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015d00:	b2e4      	uxtb	r4, r4
 8015d02:	4020      	ands	r0, r4
 8015d04:	bd70      	pop	{r4, r5, r6, pc}
 8015d06:	bf00      	nop

08015d08 <uxr_deserialize_HEARTBEAT_Payload>:
 8015d08:	b570      	push	{r4, r5, r6, lr}
 8015d0a:	4605      	mov	r5, r0
 8015d0c:	460e      	mov	r6, r1
 8015d0e:	f7f5 fbf3 	bl	800b4f8 <ucdr_deserialize_uint16_t>
 8015d12:	1cb1      	adds	r1, r6, #2
 8015d14:	4604      	mov	r4, r0
 8015d16:	4628      	mov	r0, r5
 8015d18:	f7f5 fbee 	bl	800b4f8 <ucdr_deserialize_uint16_t>
 8015d1c:	1d31      	adds	r1, r6, #4
 8015d1e:	4004      	ands	r4, r0
 8015d20:	4628      	mov	r0, r5
 8015d22:	f7f5 fad3 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015d26:	b2e4      	uxtb	r4, r4
 8015d28:	4020      	ands	r0, r4
 8015d2a:	bd70      	pop	{r4, r5, r6, pc}

08015d2c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d30:	4605      	mov	r5, r0
 8015d32:	460e      	mov	r6, r1
 8015d34:	f7f6 f97c 	bl	800c030 <ucdr_deserialize_int32_t>
 8015d38:	1d31      	adds	r1, r6, #4
 8015d3a:	4607      	mov	r7, r0
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	f7f5 fdf5 	bl	800b92c <ucdr_deserialize_uint32_t>
 8015d42:	f106 0108 	add.w	r1, r6, #8
 8015d46:	4680      	mov	r8, r0
 8015d48:	4628      	mov	r0, r5
 8015d4a:	f7f6 f971 	bl	800c030 <ucdr_deserialize_int32_t>
 8015d4e:	f106 010c 	add.w	r1, r6, #12
 8015d52:	4604      	mov	r4, r0
 8015d54:	4628      	mov	r0, r5
 8015d56:	f7f5 fde9 	bl	800b92c <ucdr_deserialize_uint32_t>
 8015d5a:	ea07 0708 	and.w	r7, r7, r8
 8015d5e:	403c      	ands	r4, r7
 8015d60:	f106 0110 	add.w	r1, r6, #16
 8015d64:	4004      	ands	r4, r0
 8015d66:	4628      	mov	r0, r5
 8015d68:	f7f6 f962 	bl	800c030 <ucdr_deserialize_int32_t>
 8015d6c:	f106 0114 	add.w	r1, r6, #20
 8015d70:	4607      	mov	r7, r0
 8015d72:	4628      	mov	r0, r5
 8015d74:	f7f5 fdda 	bl	800b92c <ucdr_deserialize_uint32_t>
 8015d78:	b2e4      	uxtb	r4, r4
 8015d7a:	403c      	ands	r4, r7
 8015d7c:	4020      	ands	r0, r4
 8015d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d82:	bf00      	nop

08015d84 <uxr_serialize_SampleIdentity>:
 8015d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d88:	220c      	movs	r2, #12
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	460d      	mov	r5, r1
 8015d8e:	f001 fceb 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015d92:	2203      	movs	r2, #3
 8015d94:	f105 010c 	add.w	r1, r5, #12
 8015d98:	4607      	mov	r7, r0
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f001 fce4 	bl	8017768 <ucdr_serialize_array_uint8_t>
 8015da0:	7be9      	ldrb	r1, [r5, #15]
 8015da2:	4680      	mov	r8, r0
 8015da4:	4620      	mov	r0, r4
 8015da6:	f7f5 fa7b 	bl	800b2a0 <ucdr_serialize_uint8_t>
 8015daa:	6929      	ldr	r1, [r5, #16]
 8015dac:	4606      	mov	r6, r0
 8015dae:	4620      	mov	r0, r4
 8015db0:	f7f6 f8a6 	bl	800bf00 <ucdr_serialize_int32_t>
 8015db4:	6969      	ldr	r1, [r5, #20]
 8015db6:	4603      	mov	r3, r0
 8015db8:	4620      	mov	r0, r4
 8015dba:	ea07 0708 	and.w	r7, r7, r8
 8015dbe:	461c      	mov	r4, r3
 8015dc0:	f7f5 fc84 	bl	800b6cc <ucdr_serialize_uint32_t>
 8015dc4:	403e      	ands	r6, r7
 8015dc6:	4034      	ands	r4, r6
 8015dc8:	4020      	ands	r0, r4
 8015dca:	b2c0      	uxtb	r0, r0
 8015dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015dd0 <uxr_deserialize_SampleIdentity>:
 8015dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd4:	220c      	movs	r2, #12
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	460d      	mov	r5, r1
 8015dda:	f001 fd29 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015dde:	2203      	movs	r2, #3
 8015de0:	f105 010c 	add.w	r1, r5, #12
 8015de4:	4607      	mov	r7, r0
 8015de6:	4620      	mov	r0, r4
 8015de8:	f001 fd22 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 8015dec:	f105 010f 	add.w	r1, r5, #15
 8015df0:	4680      	mov	r8, r0
 8015df2:	4620      	mov	r0, r4
 8015df4:	f7f5 fa6a 	bl	800b2cc <ucdr_deserialize_uint8_t>
 8015df8:	f105 0110 	add.w	r1, r5, #16
 8015dfc:	4606      	mov	r6, r0
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f7f6 f916 	bl	800c030 <ucdr_deserialize_int32_t>
 8015e04:	f105 0114 	add.w	r1, r5, #20
 8015e08:	4603      	mov	r3, r0
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	ea07 0708 	and.w	r7, r7, r8
 8015e10:	461c      	mov	r4, r3
 8015e12:	f7f5 fd8b 	bl	800b92c <ucdr_deserialize_uint32_t>
 8015e16:	403e      	ands	r6, r7
 8015e18:	4034      	ands	r4, r6
 8015e1a:	4020      	ands	r0, r4
 8015e1c:	b2c0      	uxtb	r0, r0
 8015e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e22:	bf00      	nop

08015e24 <rcl_action_take_goal_response>:
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d039      	beq.n	8015e9c <rcl_action_take_goal_response+0x78>
 8015e28:	b570      	push	{r4, r5, r6, lr}
 8015e2a:	4604      	mov	r4, r0
 8015e2c:	6800      	ldr	r0, [r0, #0]
 8015e2e:	b380      	cbz	r0, 8015e92 <rcl_action_take_goal_response+0x6e>
 8015e30:	460d      	mov	r5, r1
 8015e32:	4616      	mov	r6, r2
 8015e34:	f7f7 fb04 	bl	800d440 <rcl_client_is_valid>
 8015e38:	b330      	cbz	r0, 8015e88 <rcl_action_take_goal_response+0x64>
 8015e3a:	6820      	ldr	r0, [r4, #0]
 8015e3c:	3004      	adds	r0, #4
 8015e3e:	f7f7 faff 	bl	800d440 <rcl_client_is_valid>
 8015e42:	b308      	cbz	r0, 8015e88 <rcl_action_take_goal_response+0x64>
 8015e44:	6820      	ldr	r0, [r4, #0]
 8015e46:	3008      	adds	r0, #8
 8015e48:	f7f7 fafa 	bl	800d440 <rcl_client_is_valid>
 8015e4c:	b1e0      	cbz	r0, 8015e88 <rcl_action_take_goal_response+0x64>
 8015e4e:	6820      	ldr	r0, [r4, #0]
 8015e50:	300c      	adds	r0, #12
 8015e52:	f7f8 fd57 	bl	800e904 <rcl_subscription_is_valid>
 8015e56:	b1b8      	cbz	r0, 8015e88 <rcl_action_take_goal_response+0x64>
 8015e58:	6820      	ldr	r0, [r4, #0]
 8015e5a:	3010      	adds	r0, #16
 8015e5c:	f7f8 fd52 	bl	800e904 <rcl_subscription_is_valid>
 8015e60:	b190      	cbz	r0, 8015e88 <rcl_action_take_goal_response+0x64>
 8015e62:	b1cd      	cbz	r5, 8015e98 <rcl_action_take_goal_response+0x74>
 8015e64:	b1c6      	cbz	r6, 8015e98 <rcl_action_take_goal_response+0x74>
 8015e66:	6820      	ldr	r0, [r4, #0]
 8015e68:	4632      	mov	r2, r6
 8015e6a:	4629      	mov	r1, r5
 8015e6c:	f7f7 fa80 	bl	800d370 <rcl_take_response>
 8015e70:	b148      	cbz	r0, 8015e86 <rcl_action_take_goal_response+0x62>
 8015e72:	280a      	cmp	r0, #10
 8015e74:	d007      	beq.n	8015e86 <rcl_action_take_goal_response+0x62>
 8015e76:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015e7a:	f640 0337 	movw	r3, #2103	@ 0x837
 8015e7e:	4290      	cmp	r0, r2
 8015e80:	bf0c      	ite	eq
 8015e82:	4618      	moveq	r0, r3
 8015e84:	2001      	movne	r0, #1
 8015e86:	bd70      	pop	{r4, r5, r6, pc}
 8015e88:	f7f9 fe52 	bl	800fb30 <rcutils_reset_error>
 8015e8c:	f640 0036 	movw	r0, #2102	@ 0x836
 8015e90:	bd70      	pop	{r4, r5, r6, pc}
 8015e92:	f640 0036 	movw	r0, #2102	@ 0x836
 8015e96:	bd70      	pop	{r4, r5, r6, pc}
 8015e98:	200b      	movs	r0, #11
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}
 8015e9c:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ea0:	4770      	bx	lr
 8015ea2:	bf00      	nop

08015ea4 <rcl_action_send_result_request>:
 8015ea4:	b390      	cbz	r0, 8015f0c <rcl_action_send_result_request+0x68>
 8015ea6:	b570      	push	{r4, r5, r6, lr}
 8015ea8:	4604      	mov	r4, r0
 8015eaa:	6800      	ldr	r0, [r0, #0]
 8015eac:	b348      	cbz	r0, 8015f02 <rcl_action_send_result_request+0x5e>
 8015eae:	460d      	mov	r5, r1
 8015eb0:	4616      	mov	r6, r2
 8015eb2:	f7f7 fac5 	bl	800d440 <rcl_client_is_valid>
 8015eb6:	b1f8      	cbz	r0, 8015ef8 <rcl_action_send_result_request+0x54>
 8015eb8:	6820      	ldr	r0, [r4, #0]
 8015eba:	3004      	adds	r0, #4
 8015ebc:	f7f7 fac0 	bl	800d440 <rcl_client_is_valid>
 8015ec0:	b1d0      	cbz	r0, 8015ef8 <rcl_action_send_result_request+0x54>
 8015ec2:	6820      	ldr	r0, [r4, #0]
 8015ec4:	3008      	adds	r0, #8
 8015ec6:	f7f7 fabb 	bl	800d440 <rcl_client_is_valid>
 8015eca:	b1a8      	cbz	r0, 8015ef8 <rcl_action_send_result_request+0x54>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	300c      	adds	r0, #12
 8015ed0:	f7f8 fd18 	bl	800e904 <rcl_subscription_is_valid>
 8015ed4:	b180      	cbz	r0, 8015ef8 <rcl_action_send_result_request+0x54>
 8015ed6:	6820      	ldr	r0, [r4, #0]
 8015ed8:	3010      	adds	r0, #16
 8015eda:	f7f8 fd13 	bl	800e904 <rcl_subscription_is_valid>
 8015ede:	b158      	cbz	r0, 8015ef8 <rcl_action_send_result_request+0x54>
 8015ee0:	b195      	cbz	r5, 8015f08 <rcl_action_send_result_request+0x64>
 8015ee2:	b18e      	cbz	r6, 8015f08 <rcl_action_send_result_request+0x64>
 8015ee4:	6820      	ldr	r0, [r4, #0]
 8015ee6:	4632      	mov	r2, r6
 8015ee8:	4629      	mov	r1, r5
 8015eea:	3008      	adds	r0, #8
 8015eec:	f7f7 f9ec 	bl	800d2c8 <rcl_send_request>
 8015ef0:	3800      	subs	r0, #0
 8015ef2:	bf18      	it	ne
 8015ef4:	2001      	movne	r0, #1
 8015ef6:	bd70      	pop	{r4, r5, r6, pc}
 8015ef8:	f7f9 fe1a 	bl	800fb30 <rcutils_reset_error>
 8015efc:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f00:	bd70      	pop	{r4, r5, r6, pc}
 8015f02:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f06:	bd70      	pop	{r4, r5, r6, pc}
 8015f08:	200b      	movs	r0, #11
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f10:	4770      	bx	lr
 8015f12:	bf00      	nop

08015f14 <rcl_action_take_result_response>:
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d03a      	beq.n	8015f8e <rcl_action_take_result_response+0x7a>
 8015f18:	b570      	push	{r4, r5, r6, lr}
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	6800      	ldr	r0, [r0, #0]
 8015f1e:	b388      	cbz	r0, 8015f84 <rcl_action_take_result_response+0x70>
 8015f20:	460d      	mov	r5, r1
 8015f22:	4616      	mov	r6, r2
 8015f24:	f7f7 fa8c 	bl	800d440 <rcl_client_is_valid>
 8015f28:	b338      	cbz	r0, 8015f7a <rcl_action_take_result_response+0x66>
 8015f2a:	6820      	ldr	r0, [r4, #0]
 8015f2c:	3004      	adds	r0, #4
 8015f2e:	f7f7 fa87 	bl	800d440 <rcl_client_is_valid>
 8015f32:	b310      	cbz	r0, 8015f7a <rcl_action_take_result_response+0x66>
 8015f34:	6820      	ldr	r0, [r4, #0]
 8015f36:	3008      	adds	r0, #8
 8015f38:	f7f7 fa82 	bl	800d440 <rcl_client_is_valid>
 8015f3c:	b1e8      	cbz	r0, 8015f7a <rcl_action_take_result_response+0x66>
 8015f3e:	6820      	ldr	r0, [r4, #0]
 8015f40:	300c      	adds	r0, #12
 8015f42:	f7f8 fcdf 	bl	800e904 <rcl_subscription_is_valid>
 8015f46:	b1c0      	cbz	r0, 8015f7a <rcl_action_take_result_response+0x66>
 8015f48:	6820      	ldr	r0, [r4, #0]
 8015f4a:	3010      	adds	r0, #16
 8015f4c:	f7f8 fcda 	bl	800e904 <rcl_subscription_is_valid>
 8015f50:	b198      	cbz	r0, 8015f7a <rcl_action_take_result_response+0x66>
 8015f52:	b1d5      	cbz	r5, 8015f8a <rcl_action_take_result_response+0x76>
 8015f54:	b1ce      	cbz	r6, 8015f8a <rcl_action_take_result_response+0x76>
 8015f56:	6820      	ldr	r0, [r4, #0]
 8015f58:	4632      	mov	r2, r6
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	3008      	adds	r0, #8
 8015f5e:	f7f7 fa07 	bl	800d370 <rcl_take_response>
 8015f62:	b148      	cbz	r0, 8015f78 <rcl_action_take_result_response+0x64>
 8015f64:	280a      	cmp	r0, #10
 8015f66:	d007      	beq.n	8015f78 <rcl_action_take_result_response+0x64>
 8015f68:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015f6c:	f640 0337 	movw	r3, #2103	@ 0x837
 8015f70:	4290      	cmp	r0, r2
 8015f72:	bf0c      	ite	eq
 8015f74:	4618      	moveq	r0, r3
 8015f76:	2001      	movne	r0, #1
 8015f78:	bd70      	pop	{r4, r5, r6, pc}
 8015f7a:	f7f9 fdd9 	bl	800fb30 <rcutils_reset_error>
 8015f7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f82:	bd70      	pop	{r4, r5, r6, pc}
 8015f84:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f88:	bd70      	pop	{r4, r5, r6, pc}
 8015f8a:	200b      	movs	r0, #11
 8015f8c:	bd70      	pop	{r4, r5, r6, pc}
 8015f8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f92:	4770      	bx	lr

08015f94 <rcl_action_take_cancel_response>:
 8015f94:	2800      	cmp	r0, #0
 8015f96:	d03a      	beq.n	801600e <rcl_action_take_cancel_response+0x7a>
 8015f98:	b570      	push	{r4, r5, r6, lr}
 8015f9a:	4604      	mov	r4, r0
 8015f9c:	6800      	ldr	r0, [r0, #0]
 8015f9e:	b388      	cbz	r0, 8016004 <rcl_action_take_cancel_response+0x70>
 8015fa0:	460d      	mov	r5, r1
 8015fa2:	4616      	mov	r6, r2
 8015fa4:	f7f7 fa4c 	bl	800d440 <rcl_client_is_valid>
 8015fa8:	b338      	cbz	r0, 8015ffa <rcl_action_take_cancel_response+0x66>
 8015faa:	6820      	ldr	r0, [r4, #0]
 8015fac:	3004      	adds	r0, #4
 8015fae:	f7f7 fa47 	bl	800d440 <rcl_client_is_valid>
 8015fb2:	b310      	cbz	r0, 8015ffa <rcl_action_take_cancel_response+0x66>
 8015fb4:	6820      	ldr	r0, [r4, #0]
 8015fb6:	3008      	adds	r0, #8
 8015fb8:	f7f7 fa42 	bl	800d440 <rcl_client_is_valid>
 8015fbc:	b1e8      	cbz	r0, 8015ffa <rcl_action_take_cancel_response+0x66>
 8015fbe:	6820      	ldr	r0, [r4, #0]
 8015fc0:	300c      	adds	r0, #12
 8015fc2:	f7f8 fc9f 	bl	800e904 <rcl_subscription_is_valid>
 8015fc6:	b1c0      	cbz	r0, 8015ffa <rcl_action_take_cancel_response+0x66>
 8015fc8:	6820      	ldr	r0, [r4, #0]
 8015fca:	3010      	adds	r0, #16
 8015fcc:	f7f8 fc9a 	bl	800e904 <rcl_subscription_is_valid>
 8015fd0:	b198      	cbz	r0, 8015ffa <rcl_action_take_cancel_response+0x66>
 8015fd2:	b1d5      	cbz	r5, 801600a <rcl_action_take_cancel_response+0x76>
 8015fd4:	b1ce      	cbz	r6, 801600a <rcl_action_take_cancel_response+0x76>
 8015fd6:	6820      	ldr	r0, [r4, #0]
 8015fd8:	4632      	mov	r2, r6
 8015fda:	4629      	mov	r1, r5
 8015fdc:	3004      	adds	r0, #4
 8015fde:	f7f7 f9c7 	bl	800d370 <rcl_take_response>
 8015fe2:	b148      	cbz	r0, 8015ff8 <rcl_action_take_cancel_response+0x64>
 8015fe4:	280a      	cmp	r0, #10
 8015fe6:	d007      	beq.n	8015ff8 <rcl_action_take_cancel_response+0x64>
 8015fe8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015fec:	f640 0337 	movw	r3, #2103	@ 0x837
 8015ff0:	4290      	cmp	r0, r2
 8015ff2:	bf0c      	ite	eq
 8015ff4:	4618      	moveq	r0, r3
 8015ff6:	2001      	movne	r0, #1
 8015ff8:	bd70      	pop	{r4, r5, r6, pc}
 8015ffa:	f7f9 fd99 	bl	800fb30 <rcutils_reset_error>
 8015ffe:	f640 0036 	movw	r0, #2102	@ 0x836
 8016002:	bd70      	pop	{r4, r5, r6, pc}
 8016004:	f640 0036 	movw	r0, #2102	@ 0x836
 8016008:	bd70      	pop	{r4, r5, r6, pc}
 801600a:	200b      	movs	r0, #11
 801600c:	bd70      	pop	{r4, r5, r6, pc}
 801600e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016012:	4770      	bx	lr

08016014 <rcl_action_take_feedback>:
 8016014:	2800      	cmp	r0, #0
 8016016:	d038      	beq.n	801608a <rcl_action_take_feedback+0x76>
 8016018:	b530      	push	{r4, r5, lr}
 801601a:	4604      	mov	r4, r0
 801601c:	6800      	ldr	r0, [r0, #0]
 801601e:	b08f      	sub	sp, #60	@ 0x3c
 8016020:	b378      	cbz	r0, 8016082 <rcl_action_take_feedback+0x6e>
 8016022:	460d      	mov	r5, r1
 8016024:	f7f7 fa0c 	bl	800d440 <rcl_client_is_valid>
 8016028:	b328      	cbz	r0, 8016076 <rcl_action_take_feedback+0x62>
 801602a:	6820      	ldr	r0, [r4, #0]
 801602c:	3004      	adds	r0, #4
 801602e:	f7f7 fa07 	bl	800d440 <rcl_client_is_valid>
 8016032:	b300      	cbz	r0, 8016076 <rcl_action_take_feedback+0x62>
 8016034:	6820      	ldr	r0, [r4, #0]
 8016036:	3008      	adds	r0, #8
 8016038:	f7f7 fa02 	bl	800d440 <rcl_client_is_valid>
 801603c:	b1d8      	cbz	r0, 8016076 <rcl_action_take_feedback+0x62>
 801603e:	6820      	ldr	r0, [r4, #0]
 8016040:	300c      	adds	r0, #12
 8016042:	f7f8 fc5f 	bl	800e904 <rcl_subscription_is_valid>
 8016046:	b1b0      	cbz	r0, 8016076 <rcl_action_take_feedback+0x62>
 8016048:	6820      	ldr	r0, [r4, #0]
 801604a:	3010      	adds	r0, #16
 801604c:	f7f8 fc5a 	bl	800e904 <rcl_subscription_is_valid>
 8016050:	b188      	cbz	r0, 8016076 <rcl_action_take_feedback+0x62>
 8016052:	b1ed      	cbz	r5, 8016090 <rcl_action_take_feedback+0x7c>
 8016054:	6820      	ldr	r0, [r4, #0]
 8016056:	2300      	movs	r3, #0
 8016058:	466a      	mov	r2, sp
 801605a:	4629      	mov	r1, r5
 801605c:	300c      	adds	r0, #12
 801605e:	f7f8 fbf3 	bl	800e848 <rcl_take>
 8016062:	b160      	cbz	r0, 801607e <rcl_action_take_feedback+0x6a>
 8016064:	f240 1391 	movw	r3, #401	@ 0x191
 8016068:	4298      	cmp	r0, r3
 801606a:	d014      	beq.n	8016096 <rcl_action_take_feedback+0x82>
 801606c:	280a      	cmp	r0, #10
 801606e:	bf18      	it	ne
 8016070:	2001      	movne	r0, #1
 8016072:	b00f      	add	sp, #60	@ 0x3c
 8016074:	bd30      	pop	{r4, r5, pc}
 8016076:	f7f9 fd5b 	bl	800fb30 <rcutils_reset_error>
 801607a:	f640 0036 	movw	r0, #2102	@ 0x836
 801607e:	b00f      	add	sp, #60	@ 0x3c
 8016080:	bd30      	pop	{r4, r5, pc}
 8016082:	f640 0036 	movw	r0, #2102	@ 0x836
 8016086:	b00f      	add	sp, #60	@ 0x3c
 8016088:	bd30      	pop	{r4, r5, pc}
 801608a:	f640 0036 	movw	r0, #2102	@ 0x836
 801608e:	4770      	bx	lr
 8016090:	200b      	movs	r0, #11
 8016092:	b00f      	add	sp, #60	@ 0x3c
 8016094:	bd30      	pop	{r4, r5, pc}
 8016096:	f640 0037 	movw	r0, #2103	@ 0x837
 801609a:	e7f0      	b.n	801607e <rcl_action_take_feedback+0x6a>

0801609c <rcl_action_wait_set_add_action_client>:
 801609c:	2800      	cmp	r0, #0
 801609e:	d048      	beq.n	8016132 <rcl_action_wait_set_add_action_client+0x96>
 80160a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a2:	460c      	mov	r4, r1
 80160a4:	2900      	cmp	r1, #0
 80160a6:	d03c      	beq.n	8016122 <rcl_action_wait_set_add_action_client+0x86>
 80160a8:	4605      	mov	r5, r0
 80160aa:	6808      	ldr	r0, [r1, #0]
 80160ac:	2800      	cmp	r0, #0
 80160ae:	d038      	beq.n	8016122 <rcl_action_wait_set_add_action_client+0x86>
 80160b0:	4617      	mov	r7, r2
 80160b2:	461e      	mov	r6, r3
 80160b4:	f7f7 f9c4 	bl	800d440 <rcl_client_is_valid>
 80160b8:	b3b0      	cbz	r0, 8016128 <rcl_action_wait_set_add_action_client+0x8c>
 80160ba:	6820      	ldr	r0, [r4, #0]
 80160bc:	3004      	adds	r0, #4
 80160be:	f7f7 f9bf 	bl	800d440 <rcl_client_is_valid>
 80160c2:	b388      	cbz	r0, 8016128 <rcl_action_wait_set_add_action_client+0x8c>
 80160c4:	6820      	ldr	r0, [r4, #0]
 80160c6:	3008      	adds	r0, #8
 80160c8:	f7f7 f9ba 	bl	800d440 <rcl_client_is_valid>
 80160cc:	b360      	cbz	r0, 8016128 <rcl_action_wait_set_add_action_client+0x8c>
 80160ce:	6820      	ldr	r0, [r4, #0]
 80160d0:	300c      	adds	r0, #12
 80160d2:	f7f8 fc17 	bl	800e904 <rcl_subscription_is_valid>
 80160d6:	b338      	cbz	r0, 8016128 <rcl_action_wait_set_add_action_client+0x8c>
 80160d8:	6820      	ldr	r0, [r4, #0]
 80160da:	3010      	adds	r0, #16
 80160dc:	f7f8 fc12 	bl	800e904 <rcl_subscription_is_valid>
 80160e0:	b310      	cbz	r0, 8016128 <rcl_action_wait_set_add_action_client+0x8c>
 80160e2:	6821      	ldr	r1, [r4, #0]
 80160e4:	4628      	mov	r0, r5
 80160e6:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80160ea:	f7f9 fa2f 	bl	800f54c <rcl_wait_set_add_client>
 80160ee:	b9b8      	cbnz	r0, 8016120 <rcl_action_wait_set_add_action_client+0x84>
 80160f0:	6821      	ldr	r1, [r4, #0]
 80160f2:	4628      	mov	r0, r5
 80160f4:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80160f8:	3104      	adds	r1, #4
 80160fa:	f7f9 fa27 	bl	800f54c <rcl_wait_set_add_client>
 80160fe:	b978      	cbnz	r0, 8016120 <rcl_action_wait_set_add_action_client+0x84>
 8016100:	6821      	ldr	r1, [r4, #0]
 8016102:	4628      	mov	r0, r5
 8016104:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016108:	3108      	adds	r1, #8
 801610a:	f7f9 fa1f 	bl	800f54c <rcl_wait_set_add_client>
 801610e:	b938      	cbnz	r0, 8016120 <rcl_action_wait_set_add_action_client+0x84>
 8016110:	6821      	ldr	r1, [r4, #0]
 8016112:	4628      	mov	r0, r5
 8016114:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016118:	310c      	adds	r1, #12
 801611a:	f7f8 fecf 	bl	800eebc <rcl_wait_set_add_subscription>
 801611e:	b158      	cbz	r0, 8016138 <rcl_action_wait_set_add_action_client+0x9c>
 8016120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016122:	f640 0036 	movw	r0, #2102	@ 0x836
 8016126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016128:	f7f9 fd02 	bl	800fb30 <rcutils_reset_error>
 801612c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016132:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016136:	4770      	bx	lr
 8016138:	6821      	ldr	r1, [r4, #0]
 801613a:	4628      	mov	r0, r5
 801613c:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016140:	3110      	adds	r1, #16
 8016142:	f7f8 febb 	bl	800eebc <rcl_wait_set_add_subscription>
 8016146:	2800      	cmp	r0, #0
 8016148:	d1ea      	bne.n	8016120 <rcl_action_wait_set_add_action_client+0x84>
 801614a:	b11f      	cbz	r7, 8016154 <rcl_action_wait_set_add_action_client+0xb8>
 801614c:	6823      	ldr	r3, [r4, #0]
 801614e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016152:	603b      	str	r3, [r7, #0]
 8016154:	2e00      	cmp	r6, #0
 8016156:	d0e3      	beq.n	8016120 <rcl_action_wait_set_add_action_client+0x84>
 8016158:	6823      	ldr	r3, [r4, #0]
 801615a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801615e:	6033      	str	r3, [r6, #0]
 8016160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016162:	bf00      	nop

08016164 <rcl_action_client_wait_set_get_entities_ready>:
 8016164:	2800      	cmp	r0, #0
 8016166:	f000 808d 	beq.w	8016284 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801616e:	460c      	mov	r4, r1
 8016170:	2900      	cmp	r1, #0
 8016172:	d077      	beq.n	8016264 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016174:	4605      	mov	r5, r0
 8016176:	6808      	ldr	r0, [r1, #0]
 8016178:	2800      	cmp	r0, #0
 801617a:	d073      	beq.n	8016264 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801617c:	4616      	mov	r6, r2
 801617e:	461f      	mov	r7, r3
 8016180:	f7f7 f95e 	bl	800d440 <rcl_client_is_valid>
 8016184:	2800      	cmp	r0, #0
 8016186:	d071      	beq.n	801626c <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016188:	6820      	ldr	r0, [r4, #0]
 801618a:	3004      	adds	r0, #4
 801618c:	f7f7 f958 	bl	800d440 <rcl_client_is_valid>
 8016190:	2800      	cmp	r0, #0
 8016192:	d06b      	beq.n	801626c <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016194:	6820      	ldr	r0, [r4, #0]
 8016196:	3008      	adds	r0, #8
 8016198:	f7f7 f952 	bl	800d440 <rcl_client_is_valid>
 801619c:	2800      	cmp	r0, #0
 801619e:	d065      	beq.n	801626c <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161a0:	6820      	ldr	r0, [r4, #0]
 80161a2:	300c      	adds	r0, #12
 80161a4:	f7f8 fbae 	bl	800e904 <rcl_subscription_is_valid>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d05f      	beq.n	801626c <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161ac:	6820      	ldr	r0, [r4, #0]
 80161ae:	3010      	adds	r0, #16
 80161b0:	f7f8 fba8 	bl	800e904 <rcl_subscription_is_valid>
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d059      	beq.n	801626c <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161b8:	2e00      	cmp	r6, #0
 80161ba:	d060      	beq.n	801627e <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161bc:	2f00      	cmp	r7, #0
 80161be:	d05e      	beq.n	801627e <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161c0:	9b06      	ldr	r3, [sp, #24]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d05b      	beq.n	801627e <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161c6:	9b07      	ldr	r3, [sp, #28]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d058      	beq.n	801627e <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161cc:	9b08      	ldr	r3, [sp, #32]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d055      	beq.n	801627e <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161d2:	6823      	ldr	r3, [r4, #0]
 80161d4:	686a      	ldr	r2, [r5, #4]
 80161d6:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80161da:	428a      	cmp	r2, r1
 80161dc:	d94c      	bls.n	8016278 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161de:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80161e2:	4282      	cmp	r2, r0
 80161e4:	d948      	bls.n	8016278 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161e6:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80161ea:	69ea      	ldr	r2, [r5, #28]
 80161ec:	42a2      	cmp	r2, r4
 80161ee:	d943      	bls.n	8016278 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161f0:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80161f4:	4562      	cmp	r2, ip
 80161f6:	d93f      	bls.n	8016278 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161f8:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80161fc:	4572      	cmp	r2, lr
 80161fe:	d93b      	bls.n	8016278 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016200:	69aa      	ldr	r2, [r5, #24]
 8016202:	682d      	ldr	r5, [r5, #0]
 8016204:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016208:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801620c:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016210:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016214:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016218:	f103 0c0c 	add.w	ip, r3, #12
 801621c:	eba5 050c 	sub.w	r5, r5, ip
 8016220:	fab5 f585 	clz	r5, r5
 8016224:	096d      	lsrs	r5, r5, #5
 8016226:	7035      	strb	r5, [r6, #0]
 8016228:	f103 0510 	add.w	r5, r3, #16
 801622c:	1b64      	subs	r4, r4, r5
 801622e:	fab4 f484 	clz	r4, r4
 8016232:	0964      	lsrs	r4, r4, #5
 8016234:	703c      	strb	r4, [r7, #0]
 8016236:	eba3 0008 	sub.w	r0, r3, r8
 801623a:	1d1c      	adds	r4, r3, #4
 801623c:	3308      	adds	r3, #8
 801623e:	1ad3      	subs	r3, r2, r3
 8016240:	fab0 f080 	clz	r0, r0
 8016244:	9a06      	ldr	r2, [sp, #24]
 8016246:	0940      	lsrs	r0, r0, #5
 8016248:	1b09      	subs	r1, r1, r4
 801624a:	7010      	strb	r0, [r2, #0]
 801624c:	fab1 f181 	clz	r1, r1
 8016250:	9a07      	ldr	r2, [sp, #28]
 8016252:	0949      	lsrs	r1, r1, #5
 8016254:	7011      	strb	r1, [r2, #0]
 8016256:	fab3 f383 	clz	r3, r3
 801625a:	9a08      	ldr	r2, [sp, #32]
 801625c:	095b      	lsrs	r3, r3, #5
 801625e:	2000      	movs	r0, #0
 8016260:	7013      	strb	r3, [r2, #0]
 8016262:	e001      	b.n	8016268 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016264:	f640 0036 	movw	r0, #2102	@ 0x836
 8016268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801626c:	f7f9 fc60 	bl	800fb30 <rcutils_reset_error>
 8016270:	f640 0036 	movw	r0, #2102	@ 0x836
 8016274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016278:	2001      	movs	r0, #1
 801627a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801627e:	200b      	movs	r0, #11
 8016280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016284:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016288:	4770      	bx	lr
 801628a:	bf00      	nop

0801628c <rcl_action_take_goal_request>:
 801628c:	2800      	cmp	r0, #0
 801628e:	d039      	beq.n	8016304 <rcl_action_take_goal_request+0x78>
 8016290:	b570      	push	{r4, r5, r6, lr}
 8016292:	4604      	mov	r4, r0
 8016294:	6800      	ldr	r0, [r0, #0]
 8016296:	b380      	cbz	r0, 80162fa <rcl_action_take_goal_request+0x6e>
 8016298:	460d      	mov	r5, r1
 801629a:	4616      	mov	r6, r2
 801629c:	f7f8 f952 	bl	800e544 <rcl_service_is_valid>
 80162a0:	b330      	cbz	r0, 80162f0 <rcl_action_take_goal_request+0x64>
 80162a2:	6820      	ldr	r0, [r4, #0]
 80162a4:	3004      	adds	r0, #4
 80162a6:	f7f8 f94d 	bl	800e544 <rcl_service_is_valid>
 80162aa:	b308      	cbz	r0, 80162f0 <rcl_action_take_goal_request+0x64>
 80162ac:	6820      	ldr	r0, [r4, #0]
 80162ae:	3008      	adds	r0, #8
 80162b0:	f7f8 f948 	bl	800e544 <rcl_service_is_valid>
 80162b4:	b1e0      	cbz	r0, 80162f0 <rcl_action_take_goal_request+0x64>
 80162b6:	6820      	ldr	r0, [r4, #0]
 80162b8:	300c      	adds	r0, #12
 80162ba:	f7f7 ff9f 	bl	800e1fc <rcl_publisher_is_valid>
 80162be:	b1b8      	cbz	r0, 80162f0 <rcl_action_take_goal_request+0x64>
 80162c0:	6820      	ldr	r0, [r4, #0]
 80162c2:	3010      	adds	r0, #16
 80162c4:	f7f7 ff9a 	bl	800e1fc <rcl_publisher_is_valid>
 80162c8:	b190      	cbz	r0, 80162f0 <rcl_action_take_goal_request+0x64>
 80162ca:	b1cd      	cbz	r5, 8016300 <rcl_action_take_goal_request+0x74>
 80162cc:	b1c6      	cbz	r6, 8016300 <rcl_action_take_goal_request+0x74>
 80162ce:	6820      	ldr	r0, [r4, #0]
 80162d0:	4632      	mov	r2, r6
 80162d2:	4629      	mov	r1, r5
 80162d4:	f7f8 f8b6 	bl	800e444 <rcl_take_request>
 80162d8:	b148      	cbz	r0, 80162ee <rcl_action_take_goal_request+0x62>
 80162da:	280a      	cmp	r0, #10
 80162dc:	d007      	beq.n	80162ee <rcl_action_take_goal_request+0x62>
 80162de:	f240 2259 	movw	r2, #601	@ 0x259
 80162e2:	f640 0399 	movw	r3, #2201	@ 0x899
 80162e6:	4290      	cmp	r0, r2
 80162e8:	bf0c      	ite	eq
 80162ea:	4618      	moveq	r0, r3
 80162ec:	2001      	movne	r0, #1
 80162ee:	bd70      	pop	{r4, r5, r6, pc}
 80162f0:	f7f9 fc1e 	bl	800fb30 <rcutils_reset_error>
 80162f4:	f640 0098 	movw	r0, #2200	@ 0x898
 80162f8:	bd70      	pop	{r4, r5, r6, pc}
 80162fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80162fe:	bd70      	pop	{r4, r5, r6, pc}
 8016300:	200b      	movs	r0, #11
 8016302:	bd70      	pop	{r4, r5, r6, pc}
 8016304:	f640 0098 	movw	r0, #2200	@ 0x898
 8016308:	4770      	bx	lr
 801630a:	bf00      	nop

0801630c <rcl_action_send_goal_response>:
 801630c:	b390      	cbz	r0, 8016374 <rcl_action_send_goal_response+0x68>
 801630e:	b570      	push	{r4, r5, r6, lr}
 8016310:	4604      	mov	r4, r0
 8016312:	6800      	ldr	r0, [r0, #0]
 8016314:	b348      	cbz	r0, 801636a <rcl_action_send_goal_response+0x5e>
 8016316:	460d      	mov	r5, r1
 8016318:	4616      	mov	r6, r2
 801631a:	f7f8 f913 	bl	800e544 <rcl_service_is_valid>
 801631e:	b1f8      	cbz	r0, 8016360 <rcl_action_send_goal_response+0x54>
 8016320:	6820      	ldr	r0, [r4, #0]
 8016322:	3004      	adds	r0, #4
 8016324:	f7f8 f90e 	bl	800e544 <rcl_service_is_valid>
 8016328:	b1d0      	cbz	r0, 8016360 <rcl_action_send_goal_response+0x54>
 801632a:	6820      	ldr	r0, [r4, #0]
 801632c:	3008      	adds	r0, #8
 801632e:	f7f8 f909 	bl	800e544 <rcl_service_is_valid>
 8016332:	b1a8      	cbz	r0, 8016360 <rcl_action_send_goal_response+0x54>
 8016334:	6820      	ldr	r0, [r4, #0]
 8016336:	300c      	adds	r0, #12
 8016338:	f7f7 ff60 	bl	800e1fc <rcl_publisher_is_valid>
 801633c:	b180      	cbz	r0, 8016360 <rcl_action_send_goal_response+0x54>
 801633e:	6820      	ldr	r0, [r4, #0]
 8016340:	3010      	adds	r0, #16
 8016342:	f7f7 ff5b 	bl	800e1fc <rcl_publisher_is_valid>
 8016346:	b158      	cbz	r0, 8016360 <rcl_action_send_goal_response+0x54>
 8016348:	b195      	cbz	r5, 8016370 <rcl_action_send_goal_response+0x64>
 801634a:	b18e      	cbz	r6, 8016370 <rcl_action_send_goal_response+0x64>
 801634c:	6820      	ldr	r0, [r4, #0]
 801634e:	4632      	mov	r2, r6
 8016350:	4629      	mov	r1, r5
 8016352:	f7f8 f8c7 	bl	800e4e4 <rcl_send_response>
 8016356:	b110      	cbz	r0, 801635e <rcl_action_send_goal_response+0x52>
 8016358:	2802      	cmp	r0, #2
 801635a:	bf18      	it	ne
 801635c:	2001      	movne	r0, #1
 801635e:	bd70      	pop	{r4, r5, r6, pc}
 8016360:	f7f9 fbe6 	bl	800fb30 <rcutils_reset_error>
 8016364:	f640 0098 	movw	r0, #2200	@ 0x898
 8016368:	bd70      	pop	{r4, r5, r6, pc}
 801636a:	f640 0098 	movw	r0, #2200	@ 0x898
 801636e:	bd70      	pop	{r4, r5, r6, pc}
 8016370:	200b      	movs	r0, #11
 8016372:	bd70      	pop	{r4, r5, r6, pc}
 8016374:	f640 0098 	movw	r0, #2200	@ 0x898
 8016378:	4770      	bx	lr
 801637a:	bf00      	nop

0801637c <rcl_action_take_result_request>:
 801637c:	2800      	cmp	r0, #0
 801637e:	d03a      	beq.n	80163f6 <rcl_action_take_result_request+0x7a>
 8016380:	b570      	push	{r4, r5, r6, lr}
 8016382:	4604      	mov	r4, r0
 8016384:	6800      	ldr	r0, [r0, #0]
 8016386:	b388      	cbz	r0, 80163ec <rcl_action_take_result_request+0x70>
 8016388:	460d      	mov	r5, r1
 801638a:	4616      	mov	r6, r2
 801638c:	f7f8 f8da 	bl	800e544 <rcl_service_is_valid>
 8016390:	b338      	cbz	r0, 80163e2 <rcl_action_take_result_request+0x66>
 8016392:	6820      	ldr	r0, [r4, #0]
 8016394:	3004      	adds	r0, #4
 8016396:	f7f8 f8d5 	bl	800e544 <rcl_service_is_valid>
 801639a:	b310      	cbz	r0, 80163e2 <rcl_action_take_result_request+0x66>
 801639c:	6820      	ldr	r0, [r4, #0]
 801639e:	3008      	adds	r0, #8
 80163a0:	f7f8 f8d0 	bl	800e544 <rcl_service_is_valid>
 80163a4:	b1e8      	cbz	r0, 80163e2 <rcl_action_take_result_request+0x66>
 80163a6:	6820      	ldr	r0, [r4, #0]
 80163a8:	300c      	adds	r0, #12
 80163aa:	f7f7 ff27 	bl	800e1fc <rcl_publisher_is_valid>
 80163ae:	b1c0      	cbz	r0, 80163e2 <rcl_action_take_result_request+0x66>
 80163b0:	6820      	ldr	r0, [r4, #0]
 80163b2:	3010      	adds	r0, #16
 80163b4:	f7f7 ff22 	bl	800e1fc <rcl_publisher_is_valid>
 80163b8:	b198      	cbz	r0, 80163e2 <rcl_action_take_result_request+0x66>
 80163ba:	b1d5      	cbz	r5, 80163f2 <rcl_action_take_result_request+0x76>
 80163bc:	b1ce      	cbz	r6, 80163f2 <rcl_action_take_result_request+0x76>
 80163be:	6820      	ldr	r0, [r4, #0]
 80163c0:	4632      	mov	r2, r6
 80163c2:	4629      	mov	r1, r5
 80163c4:	3008      	adds	r0, #8
 80163c6:	f7f8 f83d 	bl	800e444 <rcl_take_request>
 80163ca:	b148      	cbz	r0, 80163e0 <rcl_action_take_result_request+0x64>
 80163cc:	280a      	cmp	r0, #10
 80163ce:	d007      	beq.n	80163e0 <rcl_action_take_result_request+0x64>
 80163d0:	f240 2259 	movw	r2, #601	@ 0x259
 80163d4:	f640 0399 	movw	r3, #2201	@ 0x899
 80163d8:	4290      	cmp	r0, r2
 80163da:	bf0c      	ite	eq
 80163dc:	4618      	moveq	r0, r3
 80163de:	2001      	movne	r0, #1
 80163e0:	bd70      	pop	{r4, r5, r6, pc}
 80163e2:	f7f9 fba5 	bl	800fb30 <rcutils_reset_error>
 80163e6:	f640 0098 	movw	r0, #2200	@ 0x898
 80163ea:	bd70      	pop	{r4, r5, r6, pc}
 80163ec:	f640 0098 	movw	r0, #2200	@ 0x898
 80163f0:	bd70      	pop	{r4, r5, r6, pc}
 80163f2:	200b      	movs	r0, #11
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80163fa:	4770      	bx	lr

080163fc <rcl_action_take_cancel_request>:
 80163fc:	2800      	cmp	r0, #0
 80163fe:	d03a      	beq.n	8016476 <rcl_action_take_cancel_request+0x7a>
 8016400:	b570      	push	{r4, r5, r6, lr}
 8016402:	4604      	mov	r4, r0
 8016404:	6800      	ldr	r0, [r0, #0]
 8016406:	b388      	cbz	r0, 801646c <rcl_action_take_cancel_request+0x70>
 8016408:	460d      	mov	r5, r1
 801640a:	4616      	mov	r6, r2
 801640c:	f7f8 f89a 	bl	800e544 <rcl_service_is_valid>
 8016410:	b338      	cbz	r0, 8016462 <rcl_action_take_cancel_request+0x66>
 8016412:	6820      	ldr	r0, [r4, #0]
 8016414:	3004      	adds	r0, #4
 8016416:	f7f8 f895 	bl	800e544 <rcl_service_is_valid>
 801641a:	b310      	cbz	r0, 8016462 <rcl_action_take_cancel_request+0x66>
 801641c:	6820      	ldr	r0, [r4, #0]
 801641e:	3008      	adds	r0, #8
 8016420:	f7f8 f890 	bl	800e544 <rcl_service_is_valid>
 8016424:	b1e8      	cbz	r0, 8016462 <rcl_action_take_cancel_request+0x66>
 8016426:	6820      	ldr	r0, [r4, #0]
 8016428:	300c      	adds	r0, #12
 801642a:	f7f7 fee7 	bl	800e1fc <rcl_publisher_is_valid>
 801642e:	b1c0      	cbz	r0, 8016462 <rcl_action_take_cancel_request+0x66>
 8016430:	6820      	ldr	r0, [r4, #0]
 8016432:	3010      	adds	r0, #16
 8016434:	f7f7 fee2 	bl	800e1fc <rcl_publisher_is_valid>
 8016438:	b198      	cbz	r0, 8016462 <rcl_action_take_cancel_request+0x66>
 801643a:	b1d5      	cbz	r5, 8016472 <rcl_action_take_cancel_request+0x76>
 801643c:	b1ce      	cbz	r6, 8016472 <rcl_action_take_cancel_request+0x76>
 801643e:	6820      	ldr	r0, [r4, #0]
 8016440:	4632      	mov	r2, r6
 8016442:	4629      	mov	r1, r5
 8016444:	3004      	adds	r0, #4
 8016446:	f7f7 fffd 	bl	800e444 <rcl_take_request>
 801644a:	b148      	cbz	r0, 8016460 <rcl_action_take_cancel_request+0x64>
 801644c:	280a      	cmp	r0, #10
 801644e:	d007      	beq.n	8016460 <rcl_action_take_cancel_request+0x64>
 8016450:	f240 2259 	movw	r2, #601	@ 0x259
 8016454:	f640 0399 	movw	r3, #2201	@ 0x899
 8016458:	4290      	cmp	r0, r2
 801645a:	bf0c      	ite	eq
 801645c:	4618      	moveq	r0, r3
 801645e:	2001      	movne	r0, #1
 8016460:	bd70      	pop	{r4, r5, r6, pc}
 8016462:	f7f9 fb65 	bl	800fb30 <rcutils_reset_error>
 8016466:	f640 0098 	movw	r0, #2200	@ 0x898
 801646a:	bd70      	pop	{r4, r5, r6, pc}
 801646c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016470:	bd70      	pop	{r4, r5, r6, pc}
 8016472:	200b      	movs	r0, #11
 8016474:	bd70      	pop	{r4, r5, r6, pc}
 8016476:	f640 0098 	movw	r0, #2200	@ 0x898
 801647a:	4770      	bx	lr

0801647c <rcl_action_send_cancel_response>:
 801647c:	b398      	cbz	r0, 80164e6 <rcl_action_send_cancel_response+0x6a>
 801647e:	b570      	push	{r4, r5, r6, lr}
 8016480:	4604      	mov	r4, r0
 8016482:	6800      	ldr	r0, [r0, #0]
 8016484:	b350      	cbz	r0, 80164dc <rcl_action_send_cancel_response+0x60>
 8016486:	460d      	mov	r5, r1
 8016488:	4616      	mov	r6, r2
 801648a:	f7f8 f85b 	bl	800e544 <rcl_service_is_valid>
 801648e:	b300      	cbz	r0, 80164d2 <rcl_action_send_cancel_response+0x56>
 8016490:	6820      	ldr	r0, [r4, #0]
 8016492:	3004      	adds	r0, #4
 8016494:	f7f8 f856 	bl	800e544 <rcl_service_is_valid>
 8016498:	b1d8      	cbz	r0, 80164d2 <rcl_action_send_cancel_response+0x56>
 801649a:	6820      	ldr	r0, [r4, #0]
 801649c:	3008      	adds	r0, #8
 801649e:	f7f8 f851 	bl	800e544 <rcl_service_is_valid>
 80164a2:	b1b0      	cbz	r0, 80164d2 <rcl_action_send_cancel_response+0x56>
 80164a4:	6820      	ldr	r0, [r4, #0]
 80164a6:	300c      	adds	r0, #12
 80164a8:	f7f7 fea8 	bl	800e1fc <rcl_publisher_is_valid>
 80164ac:	b188      	cbz	r0, 80164d2 <rcl_action_send_cancel_response+0x56>
 80164ae:	6820      	ldr	r0, [r4, #0]
 80164b0:	3010      	adds	r0, #16
 80164b2:	f7f7 fea3 	bl	800e1fc <rcl_publisher_is_valid>
 80164b6:	b160      	cbz	r0, 80164d2 <rcl_action_send_cancel_response+0x56>
 80164b8:	b19d      	cbz	r5, 80164e2 <rcl_action_send_cancel_response+0x66>
 80164ba:	b196      	cbz	r6, 80164e2 <rcl_action_send_cancel_response+0x66>
 80164bc:	6820      	ldr	r0, [r4, #0]
 80164be:	4632      	mov	r2, r6
 80164c0:	4629      	mov	r1, r5
 80164c2:	3004      	adds	r0, #4
 80164c4:	f7f8 f80e 	bl	800e4e4 <rcl_send_response>
 80164c8:	b110      	cbz	r0, 80164d0 <rcl_action_send_cancel_response+0x54>
 80164ca:	2802      	cmp	r0, #2
 80164cc:	bf18      	it	ne
 80164ce:	2001      	movne	r0, #1
 80164d0:	bd70      	pop	{r4, r5, r6, pc}
 80164d2:	f7f9 fb2d 	bl	800fb30 <rcutils_reset_error>
 80164d6:	f640 0098 	movw	r0, #2200	@ 0x898
 80164da:	bd70      	pop	{r4, r5, r6, pc}
 80164dc:	f640 0098 	movw	r0, #2200	@ 0x898
 80164e0:	bd70      	pop	{r4, r5, r6, pc}
 80164e2:	200b      	movs	r0, #11
 80164e4:	bd70      	pop	{r4, r5, r6, pc}
 80164e6:	f640 0098 	movw	r0, #2200	@ 0x898
 80164ea:	4770      	bx	lr

080164ec <rcl_action_wait_set_add_action_server>:
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d04d      	beq.n	801658c <rcl_action_wait_set_add_action_server+0xa0>
 80164f0:	b570      	push	{r4, r5, r6, lr}
 80164f2:	460c      	mov	r4, r1
 80164f4:	b159      	cbz	r1, 801650e <rcl_action_wait_set_add_action_server+0x22>
 80164f6:	4605      	mov	r5, r0
 80164f8:	6808      	ldr	r0, [r1, #0]
 80164fa:	b140      	cbz	r0, 801650e <rcl_action_wait_set_add_action_server+0x22>
 80164fc:	4616      	mov	r6, r2
 80164fe:	f7f8 f821 	bl	800e544 <rcl_service_is_valid>
 8016502:	b120      	cbz	r0, 801650e <rcl_action_wait_set_add_action_server+0x22>
 8016504:	6820      	ldr	r0, [r4, #0]
 8016506:	3004      	adds	r0, #4
 8016508:	f7f8 f81c 	bl	800e544 <rcl_service_is_valid>
 801650c:	b910      	cbnz	r0, 8016514 <rcl_action_wait_set_add_action_server+0x28>
 801650e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016512:	bd70      	pop	{r4, r5, r6, pc}
 8016514:	6820      	ldr	r0, [r4, #0]
 8016516:	3008      	adds	r0, #8
 8016518:	f7f8 f814 	bl	800e544 <rcl_service_is_valid>
 801651c:	2800      	cmp	r0, #0
 801651e:	d0f6      	beq.n	801650e <rcl_action_wait_set_add_action_server+0x22>
 8016520:	6820      	ldr	r0, [r4, #0]
 8016522:	300c      	adds	r0, #12
 8016524:	f7f7 fe82 	bl	800e22c <rcl_publisher_is_valid_except_context>
 8016528:	2800      	cmp	r0, #0
 801652a:	d0f0      	beq.n	801650e <rcl_action_wait_set_add_action_server+0x22>
 801652c:	6820      	ldr	r0, [r4, #0]
 801652e:	3010      	adds	r0, #16
 8016530:	f7f7 fe7c 	bl	800e22c <rcl_publisher_is_valid_except_context>
 8016534:	2800      	cmp	r0, #0
 8016536:	d0ea      	beq.n	801650e <rcl_action_wait_set_add_action_server+0x22>
 8016538:	6821      	ldr	r1, [r4, #0]
 801653a:	4628      	mov	r0, r5
 801653c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016540:	f7f9 f830 	bl	800f5a4 <rcl_wait_set_add_service>
 8016544:	2800      	cmp	r0, #0
 8016546:	d1e4      	bne.n	8016512 <rcl_action_wait_set_add_action_server+0x26>
 8016548:	6821      	ldr	r1, [r4, #0]
 801654a:	4628      	mov	r0, r5
 801654c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016550:	3104      	adds	r1, #4
 8016552:	f7f9 f827 	bl	800f5a4 <rcl_wait_set_add_service>
 8016556:	2800      	cmp	r0, #0
 8016558:	d1db      	bne.n	8016512 <rcl_action_wait_set_add_action_server+0x26>
 801655a:	6821      	ldr	r1, [r4, #0]
 801655c:	4628      	mov	r0, r5
 801655e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016562:	3108      	adds	r1, #8
 8016564:	f7f9 f81e 	bl	800f5a4 <rcl_wait_set_add_service>
 8016568:	2800      	cmp	r0, #0
 801656a:	d1d2      	bne.n	8016512 <rcl_action_wait_set_add_action_server+0x26>
 801656c:	6821      	ldr	r1, [r4, #0]
 801656e:	4628      	mov	r0, r5
 8016570:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016574:	3114      	adds	r1, #20
 8016576:	f7f8 ffb9 	bl	800f4ec <rcl_wait_set_add_timer>
 801657a:	2800      	cmp	r0, #0
 801657c:	d1c9      	bne.n	8016512 <rcl_action_wait_set_add_action_server+0x26>
 801657e:	2e00      	cmp	r6, #0
 8016580:	d0c7      	beq.n	8016512 <rcl_action_wait_set_add_action_server+0x26>
 8016582:	6823      	ldr	r3, [r4, #0]
 8016584:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016588:	6033      	str	r3, [r6, #0]
 801658a:	bd70      	pop	{r4, r5, r6, pc}
 801658c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016590:	4770      	bx	lr
 8016592:	bf00      	nop

08016594 <rcl_action_server_wait_set_get_entities_ready>:
 8016594:	2800      	cmp	r0, #0
 8016596:	d05a      	beq.n	801664e <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801659a:	460c      	mov	r4, r1
 801659c:	b161      	cbz	r1, 80165b8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801659e:	4605      	mov	r5, r0
 80165a0:	6808      	ldr	r0, [r1, #0]
 80165a2:	b148      	cbz	r0, 80165b8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165a4:	4616      	mov	r6, r2
 80165a6:	461f      	mov	r7, r3
 80165a8:	f7f7 ffcc 	bl	800e544 <rcl_service_is_valid>
 80165ac:	b120      	cbz	r0, 80165b8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	3004      	adds	r0, #4
 80165b2:	f7f7 ffc7 	bl	800e544 <rcl_service_is_valid>
 80165b6:	b910      	cbnz	r0, 80165be <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80165b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80165bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165be:	6820      	ldr	r0, [r4, #0]
 80165c0:	3008      	adds	r0, #8
 80165c2:	f7f7 ffbf 	bl	800e544 <rcl_service_is_valid>
 80165c6:	2800      	cmp	r0, #0
 80165c8:	d0f6      	beq.n	80165b8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165ca:	6820      	ldr	r0, [r4, #0]
 80165cc:	300c      	adds	r0, #12
 80165ce:	f7f7 fe2d 	bl	800e22c <rcl_publisher_is_valid_except_context>
 80165d2:	2800      	cmp	r0, #0
 80165d4:	d0f0      	beq.n	80165b8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165d6:	6820      	ldr	r0, [r4, #0]
 80165d8:	3010      	adds	r0, #16
 80165da:	f7f7 fe27 	bl	800e22c <rcl_publisher_is_valid_except_context>
 80165de:	2800      	cmp	r0, #0
 80165e0:	d0ea      	beq.n	80165b8 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165e2:	b3be      	cbz	r6, 8016654 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165e4:	b3b7      	cbz	r7, 8016654 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165e6:	9b06      	ldr	r3, [sp, #24]
 80165e8:	b3a3      	cbz	r3, 8016654 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165ea:	9b07      	ldr	r3, [sp, #28]
 80165ec:	b393      	cbz	r3, 8016654 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165ee:	6821      	ldr	r1, [r4, #0]
 80165f0:	692a      	ldr	r2, [r5, #16]
 80165f2:	6a2c      	ldr	r4, [r5, #32]
 80165f4:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80165f8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80165fc:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016600:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016604:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016608:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801660c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016610:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016614:	1a64      	subs	r4, r4, r1
 8016616:	fab4 f484 	clz	r4, r4
 801661a:	0964      	lsrs	r4, r4, #5
 801661c:	7034      	strb	r4, [r6, #0]
 801661e:	1d0c      	adds	r4, r1, #4
 8016620:	1b1b      	subs	r3, r3, r4
 8016622:	fab3 f383 	clz	r3, r3
 8016626:	095b      	lsrs	r3, r3, #5
 8016628:	f101 0408 	add.w	r4, r1, #8
 801662c:	703b      	strb	r3, [r7, #0]
 801662e:	f101 0314 	add.w	r3, r1, #20
 8016632:	1b01      	subs	r1, r0, r4
 8016634:	1ad3      	subs	r3, r2, r3
 8016636:	fab1 f181 	clz	r1, r1
 801663a:	9a06      	ldr	r2, [sp, #24]
 801663c:	0949      	lsrs	r1, r1, #5
 801663e:	7011      	strb	r1, [r2, #0]
 8016640:	fab3 f383 	clz	r3, r3
 8016644:	9a07      	ldr	r2, [sp, #28]
 8016646:	095b      	lsrs	r3, r3, #5
 8016648:	2000      	movs	r0, #0
 801664a:	7013      	strb	r3, [r2, #0]
 801664c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801664e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016652:	4770      	bx	lr
 8016654:	200b      	movs	r0, #11
 8016656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016658 <_execute_event_handler>:
 8016658:	2002      	movs	r0, #2
 801665a:	4770      	bx	lr

0801665c <_cancel_goal_event_handler>:
 801665c:	2003      	movs	r0, #3
 801665e:	4770      	bx	lr

08016660 <_succeed_event_handler>:
 8016660:	2004      	movs	r0, #4
 8016662:	4770      	bx	lr

08016664 <_abort_event_handler>:
 8016664:	2006      	movs	r0, #6
 8016666:	4770      	bx	lr

08016668 <_canceled_event_handler>:
 8016668:	2005      	movs	r0, #5
 801666a:	4770      	bx	lr

0801666c <rcl_action_transition_goal_state>:
 801666c:	b2c2      	uxtb	r2, r0
 801666e:	2a06      	cmp	r2, #6
 8016670:	d80c      	bhi.n	801668c <rcl_action_transition_goal_state+0x20>
 8016672:	2904      	cmp	r1, #4
 8016674:	d80a      	bhi.n	801668c <rcl_action_transition_goal_state+0x20>
 8016676:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801667a:	b410      	push	{r4}
 801667c:	1853      	adds	r3, r2, r1
 801667e:	4c06      	ldr	r4, [pc, #24]	@ (8016698 <rcl_action_transition_goal_state+0x2c>)
 8016680:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016684:	b123      	cbz	r3, 8016690 <rcl_action_transition_goal_state+0x24>
 8016686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801668a:	4718      	bx	r3
 801668c:	2000      	movs	r0, #0
 801668e:	4770      	bx	lr
 8016690:	2000      	movs	r0, #0
 8016692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016696:	4770      	bx	lr
 8016698:	0801ca54 	.word	0x0801ca54

0801669c <rcl_action_get_zero_initialized_cancel_response>:
 801669c:	b510      	push	{r4, lr}
 801669e:	4c07      	ldr	r4, [pc, #28]	@ (80166bc <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80166a0:	4686      	mov	lr, r0
 80166a2:	4684      	mov	ip, r0
 80166a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166b0:	6823      	ldr	r3, [r4, #0]
 80166b2:	f8cc 3000 	str.w	r3, [ip]
 80166b6:	4670      	mov	r0, lr
 80166b8:	bd10      	pop	{r4, pc}
 80166ba:	bf00      	nop
 80166bc:	0801cae0 	.word	0x0801cae0

080166c0 <rclc_action_send_result_request>:
 80166c0:	b1d0      	cbz	r0, 80166f8 <rclc_action_send_result_request+0x38>
 80166c2:	b500      	push	{lr}
 80166c4:	4684      	mov	ip, r0
 80166c6:	b087      	sub	sp, #28
 80166c8:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80166cc:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80166d0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80166d4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80166d8:	f10d 0e08 	add.w	lr, sp, #8
 80166dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80166e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80166e4:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80166e8:	a902      	add	r1, sp, #8
 80166ea:	3010      	adds	r0, #16
 80166ec:	f7ff fbda 	bl	8015ea4 <rcl_action_send_result_request>
 80166f0:	b920      	cbnz	r0, 80166fc <rclc_action_send_result_request+0x3c>
 80166f2:	b007      	add	sp, #28
 80166f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80166f8:	200b      	movs	r0, #11
 80166fa:	4770      	bx	lr
 80166fc:	9001      	str	r0, [sp, #4]
 80166fe:	f7f9 fa17 	bl	800fb30 <rcutils_reset_error>
 8016702:	9801      	ldr	r0, [sp, #4]
 8016704:	b007      	add	sp, #28
 8016706:	f85d fb04 	ldr.w	pc, [sp], #4
 801670a:	bf00      	nop

0801670c <rclc_action_take_goal_handle>:
 801670c:	b160      	cbz	r0, 8016728 <rclc_action_take_goal_handle+0x1c>
 801670e:	6883      	ldr	r3, [r0, #8]
 8016710:	b143      	cbz	r3, 8016724 <rclc_action_take_goal_handle+0x18>
 8016712:	6819      	ldr	r1, [r3, #0]
 8016714:	6081      	str	r1, [r0, #8]
 8016716:	2200      	movs	r2, #0
 8016718:	721a      	strb	r2, [r3, #8]
 801671a:	68c1      	ldr	r1, [r0, #12]
 801671c:	6019      	str	r1, [r3, #0]
 801671e:	621a      	str	r2, [r3, #32]
 8016720:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016722:	60c3      	str	r3, [r0, #12]
 8016724:	4618      	mov	r0, r3
 8016726:	4770      	bx	lr
 8016728:	4603      	mov	r3, r0
 801672a:	e7fb      	b.n	8016724 <rclc_action_take_goal_handle+0x18>

0801672c <rclc_action_remove_used_goal_handle>:
 801672c:	b180      	cbz	r0, 8016750 <rclc_action_remove_used_goal_handle+0x24>
 801672e:	b179      	cbz	r1, 8016750 <rclc_action_remove_used_goal_handle+0x24>
 8016730:	68c3      	ldr	r3, [r0, #12]
 8016732:	4299      	cmp	r1, r3
 8016734:	d00d      	beq.n	8016752 <rclc_action_remove_used_goal_handle+0x26>
 8016736:	b12b      	cbz	r3, 8016744 <rclc_action_remove_used_goal_handle+0x18>
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	4291      	cmp	r1, r2
 801673c:	d003      	beq.n	8016746 <rclc_action_remove_used_goal_handle+0x1a>
 801673e:	4613      	mov	r3, r2
 8016740:	2b00      	cmp	r3, #0
 8016742:	d1f9      	bne.n	8016738 <rclc_action_remove_used_goal_handle+0xc>
 8016744:	4770      	bx	lr
 8016746:	680a      	ldr	r2, [r1, #0]
 8016748:	601a      	str	r2, [r3, #0]
 801674a:	6883      	ldr	r3, [r0, #8]
 801674c:	600b      	str	r3, [r1, #0]
 801674e:	6081      	str	r1, [r0, #8]
 8016750:	4770      	bx	lr
 8016752:	680b      	ldr	r3, [r1, #0]
 8016754:	60c3      	str	r3, [r0, #12]
 8016756:	e7f8      	b.n	801674a <rclc_action_remove_used_goal_handle+0x1e>

08016758 <rclc_action_find_goal_handle_by_uuid>:
 8016758:	b538      	push	{r3, r4, r5, lr}
 801675a:	b180      	cbz	r0, 801677e <rclc_action_find_goal_handle_by_uuid+0x26>
 801675c:	460d      	mov	r5, r1
 801675e:	b181      	cbz	r1, 8016782 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016760:	68c4      	ldr	r4, [r0, #12]
 8016762:	b914      	cbnz	r4, 801676a <rclc_action_find_goal_handle_by_uuid+0x12>
 8016764:	e009      	b.n	801677a <rclc_action_find_goal_handle_by_uuid+0x22>
 8016766:	6824      	ldr	r4, [r4, #0]
 8016768:	b13c      	cbz	r4, 801677a <rclc_action_find_goal_handle_by_uuid+0x22>
 801676a:	f104 0009 	add.w	r0, r4, #9
 801676e:	2210      	movs	r2, #16
 8016770:	4629      	mov	r1, r5
 8016772:	f003 f807 	bl	8019784 <memcmp>
 8016776:	2800      	cmp	r0, #0
 8016778:	d1f5      	bne.n	8016766 <rclc_action_find_goal_handle_by_uuid+0xe>
 801677a:	4620      	mov	r0, r4
 801677c:	bd38      	pop	{r3, r4, r5, pc}
 801677e:	4604      	mov	r4, r0
 8016780:	e7fb      	b.n	801677a <rclc_action_find_goal_handle_by_uuid+0x22>
 8016782:	460c      	mov	r4, r1
 8016784:	e7f9      	b.n	801677a <rclc_action_find_goal_handle_by_uuid+0x22>
 8016786:	bf00      	nop

08016788 <rclc_action_find_first_handle_by_status>:
 8016788:	b140      	cbz	r0, 801679c <rclc_action_find_first_handle_by_status+0x14>
 801678a:	68c0      	ldr	r0, [r0, #12]
 801678c:	b910      	cbnz	r0, 8016794 <rclc_action_find_first_handle_by_status+0xc>
 801678e:	e005      	b.n	801679c <rclc_action_find_first_handle_by_status+0x14>
 8016790:	6800      	ldr	r0, [r0, #0]
 8016792:	b118      	cbz	r0, 801679c <rclc_action_find_first_handle_by_status+0x14>
 8016794:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016798:	428b      	cmp	r3, r1
 801679a:	d1f9      	bne.n	8016790 <rclc_action_find_first_handle_by_status+0x8>
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop

080167a0 <rclc_action_find_first_terminated_handle>:
 80167a0:	b140      	cbz	r0, 80167b4 <rclc_action_find_first_terminated_handle+0x14>
 80167a2:	68c0      	ldr	r0, [r0, #12]
 80167a4:	b910      	cbnz	r0, 80167ac <rclc_action_find_first_terminated_handle+0xc>
 80167a6:	e005      	b.n	80167b4 <rclc_action_find_first_terminated_handle+0x14>
 80167a8:	6800      	ldr	r0, [r0, #0]
 80167aa:	b118      	cbz	r0, 80167b4 <rclc_action_find_first_terminated_handle+0x14>
 80167ac:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80167b0:	2b03      	cmp	r3, #3
 80167b2:	ddf9      	ble.n	80167a8 <rclc_action_find_first_terminated_handle+0x8>
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop

080167b8 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80167b8:	b170      	cbz	r0, 80167d8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80167ba:	68c0      	ldr	r0, [r0, #12]
 80167bc:	b160      	cbz	r0, 80167d8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80167be:	b410      	push	{r4}
 80167c0:	e001      	b.n	80167c6 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80167c2:	6800      	ldr	r0, [r0, #0]
 80167c4:	b128      	cbz	r0, 80167d2 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80167c6:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80167ca:	4299      	cmp	r1, r3
 80167cc:	bf08      	it	eq
 80167ce:	4294      	cmpeq	r4, r2
 80167d0:	d1f7      	bne.n	80167c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80167d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167d6:	4770      	bx	lr
 80167d8:	4770      	bx	lr
 80167da:	bf00      	nop

080167dc <rclc_action_find_handle_by_result_request_sequence_number>:
 80167dc:	b170      	cbz	r0, 80167fc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80167de:	68c0      	ldr	r0, [r0, #12]
 80167e0:	b160      	cbz	r0, 80167fc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80167e2:	b410      	push	{r4}
 80167e4:	e001      	b.n	80167ea <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80167e6:	6800      	ldr	r0, [r0, #0]
 80167e8:	b128      	cbz	r0, 80167f6 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80167ea:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80167ee:	4299      	cmp	r1, r3
 80167f0:	bf08      	it	eq
 80167f2:	4294      	cmpeq	r4, r2
 80167f4:	d1f7      	bne.n	80167e6 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80167f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop

08016800 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016800:	b170      	cbz	r0, 8016820 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016802:	68c0      	ldr	r0, [r0, #12]
 8016804:	b160      	cbz	r0, 8016820 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016806:	b410      	push	{r4}
 8016808:	e001      	b.n	801680e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801680a:	6800      	ldr	r0, [r0, #0]
 801680c:	b128      	cbz	r0, 801681a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801680e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016812:	4299      	cmp	r1, r3
 8016814:	bf08      	it	eq
 8016816:	4294      	cmpeq	r4, r2
 8016818:	d1f7      	bne.n	801680a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801681a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801681e:	4770      	bx	lr
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop

08016824 <rclc_action_find_first_handle_with_goal_response>:
 8016824:	b140      	cbz	r0, 8016838 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016826:	68c0      	ldr	r0, [r0, #12]
 8016828:	b910      	cbnz	r0, 8016830 <rclc_action_find_first_handle_with_goal_response+0xc>
 801682a:	e005      	b.n	8016838 <rclc_action_find_first_handle_with_goal_response+0x14>
 801682c:	6800      	ldr	r0, [r0, #0]
 801682e:	b118      	cbz	r0, 8016838 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016830:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d0f9      	beq.n	801682c <rclc_action_find_first_handle_with_goal_response+0x8>
 8016838:	4770      	bx	lr
 801683a:	bf00      	nop

0801683c <rclc_action_find_first_handle_with_result_response>:
 801683c:	b140      	cbz	r0, 8016850 <rclc_action_find_first_handle_with_result_response+0x14>
 801683e:	68c0      	ldr	r0, [r0, #12]
 8016840:	b910      	cbnz	r0, 8016848 <rclc_action_find_first_handle_with_result_response+0xc>
 8016842:	e005      	b.n	8016850 <rclc_action_find_first_handle_with_result_response+0x14>
 8016844:	6800      	ldr	r0, [r0, #0]
 8016846:	b118      	cbz	r0, 8016850 <rclc_action_find_first_handle_with_result_response+0x14>
 8016848:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801684c:	2b00      	cmp	r3, #0
 801684e:	d0f9      	beq.n	8016844 <rclc_action_find_first_handle_with_result_response+0x8>
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop

08016854 <rclc_action_server_response_goal_request>:
 8016854:	b198      	cbz	r0, 801687e <rclc_action_server_response_goal_request+0x2a>
 8016856:	b510      	push	{r4, lr}
 8016858:	6844      	ldr	r4, [r0, #4]
 801685a:	b086      	sub	sp, #24
 801685c:	2200      	movs	r2, #0
 801685e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016862:	460b      	mov	r3, r1
 8016864:	9205      	str	r2, [sp, #20]
 8016866:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801686a:	aa03      	add	r2, sp, #12
 801686c:	f104 0010 	add.w	r0, r4, #16
 8016870:	f88d 300c 	strb.w	r3, [sp, #12]
 8016874:	f7ff fd4a 	bl	801630c <rcl_action_send_goal_response>
 8016878:	b918      	cbnz	r0, 8016882 <rclc_action_server_response_goal_request+0x2e>
 801687a:	b006      	add	sp, #24
 801687c:	bd10      	pop	{r4, pc}
 801687e:	200b      	movs	r0, #11
 8016880:	4770      	bx	lr
 8016882:	9001      	str	r0, [sp, #4]
 8016884:	f7f9 f954 	bl	800fb30 <rcutils_reset_error>
 8016888:	9801      	ldr	r0, [sp, #4]
 801688a:	b006      	add	sp, #24
 801688c:	bd10      	pop	{r4, pc}
 801688e:	bf00      	nop

08016890 <rclc_action_server_goal_cancel_accept>:
 8016890:	b310      	cbz	r0, 80168d8 <rclc_action_server_goal_cancel_accept+0x48>
 8016892:	b510      	push	{r4, lr}
 8016894:	b090      	sub	sp, #64	@ 0x40
 8016896:	4604      	mov	r4, r0
 8016898:	a806      	add	r0, sp, #24
 801689a:	f7ff feff 	bl	801669c <rcl_action_get_zero_initialized_cancel_response>
 801689e:	2300      	movs	r3, #0
 80168a0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80168a4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80168a8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80168ac:	f88d 3018 	strb.w	r3, [sp, #24]
 80168b0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80168b4:	f8cd d01c 	str.w	sp, [sp, #28]
 80168b8:	46ec      	mov	ip, sp
 80168ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168be:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80168e0 <rclc_action_server_goal_cancel_accept+0x50>
 80168c2:	6860      	ldr	r0, [r4, #4]
 80168c4:	aa06      	add	r2, sp, #24
 80168c6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80168ca:	3010      	adds	r0, #16
 80168cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80168d0:	f7ff fdd4 	bl	801647c <rcl_action_send_cancel_response>
 80168d4:	b010      	add	sp, #64	@ 0x40
 80168d6:	bd10      	pop	{r4, pc}
 80168d8:	200b      	movs	r0, #11
 80168da:	4770      	bx	lr
 80168dc:	f3af 8000 	nop.w
 80168e0:	00000001 	.word	0x00000001
 80168e4:	00000001 	.word	0x00000001

080168e8 <rclc_action_server_goal_cancel_reject>:
 80168e8:	b082      	sub	sp, #8
 80168ea:	b530      	push	{r4, r5, lr}
 80168ec:	b08b      	sub	sp, #44	@ 0x2c
 80168ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80168f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80168f4:	b188      	cbz	r0, 801691a <rclc_action_server_goal_cancel_reject+0x32>
 80168f6:	4604      	mov	r4, r0
 80168f8:	a801      	add	r0, sp, #4
 80168fa:	460d      	mov	r5, r1
 80168fc:	f7ff fece 	bl	801669c <rcl_action_get_zero_initialized_cancel_response>
 8016900:	aa01      	add	r2, sp, #4
 8016902:	a90e      	add	r1, sp, #56	@ 0x38
 8016904:	f104 0010 	add.w	r0, r4, #16
 8016908:	f88d 5004 	strb.w	r5, [sp, #4]
 801690c:	f7ff fdb6 	bl	801647c <rcl_action_send_cancel_response>
 8016910:	b00b      	add	sp, #44	@ 0x2c
 8016912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016916:	b002      	add	sp, #8
 8016918:	4770      	bx	lr
 801691a:	200b      	movs	r0, #11
 801691c:	b00b      	add	sp, #44	@ 0x2c
 801691e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016922:	b002      	add	sp, #8
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop

08016928 <rcl_get_automatic_discovery_range>:
 8016928:	b530      	push	{r4, r5, lr}
 801692a:	b083      	sub	sp, #12
 801692c:	2300      	movs	r3, #0
 801692e:	9301      	str	r3, [sp, #4]
 8016930:	b1c0      	cbz	r0, 8016964 <rcl_get_automatic_discovery_range+0x3c>
 8016932:	4604      	mov	r4, r0
 8016934:	a901      	add	r1, sp, #4
 8016936:	4818      	ldr	r0, [pc, #96]	@ (8016998 <rcl_get_automatic_discovery_range+0x70>)
 8016938:	f7f9 f8ca 	bl	800fad0 <rcutils_get_env>
 801693c:	b110      	cbz	r0, 8016944 <rcl_get_automatic_discovery_range+0x1c>
 801693e:	2001      	movs	r0, #1
 8016940:	b003      	add	sp, #12
 8016942:	bd30      	pop	{r4, r5, pc}
 8016944:	9d01      	ldr	r5, [sp, #4]
 8016946:	782b      	ldrb	r3, [r5, #0]
 8016948:	b13b      	cbz	r3, 801695a <rcl_get_automatic_discovery_range+0x32>
 801694a:	4914      	ldr	r1, [pc, #80]	@ (801699c <rcl_get_automatic_discovery_range+0x74>)
 801694c:	4628      	mov	r0, r5
 801694e:	f7e9 fc3f 	bl	80001d0 <strcmp>
 8016952:	b950      	cbnz	r0, 801696a <rcl_get_automatic_discovery_range+0x42>
 8016954:	2301      	movs	r3, #1
 8016956:	7023      	strb	r3, [r4, #0]
 8016958:	e7f2      	b.n	8016940 <rcl_get_automatic_discovery_range+0x18>
 801695a:	2303      	movs	r3, #3
 801695c:	2000      	movs	r0, #0
 801695e:	7023      	strb	r3, [r4, #0]
 8016960:	b003      	add	sp, #12
 8016962:	bd30      	pop	{r4, r5, pc}
 8016964:	200b      	movs	r0, #11
 8016966:	b003      	add	sp, #12
 8016968:	bd30      	pop	{r4, r5, pc}
 801696a:	490d      	ldr	r1, [pc, #52]	@ (80169a0 <rcl_get_automatic_discovery_range+0x78>)
 801696c:	4628      	mov	r0, r5
 801696e:	f7e9 fc2f 	bl	80001d0 <strcmp>
 8016972:	b168      	cbz	r0, 8016990 <rcl_get_automatic_discovery_range+0x68>
 8016974:	490b      	ldr	r1, [pc, #44]	@ (80169a4 <rcl_get_automatic_discovery_range+0x7c>)
 8016976:	4628      	mov	r0, r5
 8016978:	f7e9 fc2a 	bl	80001d0 <strcmp>
 801697c:	2800      	cmp	r0, #0
 801697e:	d0ec      	beq.n	801695a <rcl_get_automatic_discovery_range+0x32>
 8016980:	4909      	ldr	r1, [pc, #36]	@ (80169a8 <rcl_get_automatic_discovery_range+0x80>)
 8016982:	4628      	mov	r0, r5
 8016984:	f7e9 fc24 	bl	80001d0 <strcmp>
 8016988:	b910      	cbnz	r0, 8016990 <rcl_get_automatic_discovery_range+0x68>
 801698a:	2304      	movs	r3, #4
 801698c:	7023      	strb	r3, [r4, #0]
 801698e:	e7d7      	b.n	8016940 <rcl_get_automatic_discovery_range+0x18>
 8016990:	2302      	movs	r3, #2
 8016992:	7023      	strb	r3, [r4, #0]
 8016994:	2000      	movs	r0, #0
 8016996:	e7d3      	b.n	8016940 <rcl_get_automatic_discovery_range+0x18>
 8016998:	0801cb04 	.word	0x0801cb04
 801699c:	0801cb24 	.word	0x0801cb24
 80169a0:	0801cb28 	.word	0x0801cb28
 80169a4:	0801cb34 	.word	0x0801cb34
 80169a8:	0801cb3c 	.word	0x0801cb3c

080169ac <rcl_automatic_discovery_range_to_string>:
 80169ac:	2804      	cmp	r0, #4
 80169ae:	bf9a      	itte	ls
 80169b0:	4b02      	ldrls	r3, [pc, #8]	@ (80169bc <rcl_automatic_discovery_range_to_string+0x10>)
 80169b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80169b6:	2000      	movhi	r0, #0
 80169b8:	4770      	bx	lr
 80169ba:	bf00      	nop
 80169bc:	0801cc2c 	.word	0x0801cc2c

080169c0 <rcl_get_discovery_static_peers>:
 80169c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169c4:	b08e      	sub	sp, #56	@ 0x38
 80169c6:	2300      	movs	r3, #0
 80169c8:	9306      	str	r3, [sp, #24]
 80169ca:	2800      	cmp	r0, #0
 80169cc:	d04b      	beq.n	8016a66 <rcl_get_discovery_static_peers+0xa6>
 80169ce:	460d      	mov	r5, r1
 80169d0:	2900      	cmp	r1, #0
 80169d2:	d048      	beq.n	8016a66 <rcl_get_discovery_static_peers+0xa6>
 80169d4:	4604      	mov	r4, r0
 80169d6:	a906      	add	r1, sp, #24
 80169d8:	482b      	ldr	r0, [pc, #172]	@ (8016a88 <rcl_get_discovery_static_peers+0xc8>)
 80169da:	f7f9 f879 	bl	800fad0 <rcutils_get_env>
 80169de:	b118      	cbz	r0, 80169e8 <rcl_get_discovery_static_peers+0x28>
 80169e0:	2001      	movs	r0, #1
 80169e2:	b00e      	add	sp, #56	@ 0x38
 80169e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169e8:	9b06      	ldr	r3, [sp, #24]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d0f8      	beq.n	80169e0 <rcl_get_discovery_static_peers+0x20>
 80169ee:	af07      	add	r7, sp, #28
 80169f0:	4638      	mov	r0, r7
 80169f2:	f000 fc25 	bl	8017240 <rcutils_get_zero_initialized_string_array>
 80169f6:	f105 0308 	add.w	r3, r5, #8
 80169fa:	9703      	str	r7, [sp, #12]
 80169fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a04:	9806      	ldr	r0, [sp, #24]
 8016a06:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016a0a:	213b      	movs	r1, #59	@ 0x3b
 8016a0c:	f000 fb5a 	bl	80170c4 <rcutils_split>
 8016a10:	2800      	cmp	r0, #0
 8016a12:	d1e5      	bne.n	80169e0 <rcl_get_discovery_static_peers+0x20>
 8016a14:	462a      	mov	r2, r5
 8016a16:	9907      	ldr	r1, [sp, #28]
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f000 fc5f 	bl	80172dc <rmw_discovery_options_init>
 8016a1e:	4605      	mov	r5, r0
 8016a20:	bb78      	cbnz	r0, 8016a82 <rcl_get_discovery_static_peers+0xc2>
 8016a22:	9e07      	ldr	r6, [sp, #28]
 8016a24:	b336      	cbz	r6, 8016a74 <rcl_get_discovery_static_peers+0xb4>
 8016a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016a2a:	4680      	mov	r8, r0
 8016a2c:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8016a30:	9105      	str	r1, [sp, #20]
 8016a32:	4608      	mov	r0, r1
 8016a34:	f7e9 fc2c 	bl	8000290 <strlen>
 8016a38:	28ff      	cmp	r0, #255	@ 0xff
 8016a3a:	9905      	ldr	r1, [sp, #20]
 8016a3c:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8016a40:	d815      	bhi.n	8016a6e <rcl_get_discovery_static_peers+0xae>
 8016a42:	6860      	ldr	r0, [r4, #4]
 8016a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016a48:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8016a4c:	f002 feeb 	bl	8019826 <strncpy>
 8016a50:	6863      	ldr	r3, [r4, #4]
 8016a52:	9e07      	ldr	r6, [sp, #28]
 8016a54:	3501      	adds	r5, #1
 8016a56:	444b      	add	r3, r9
 8016a58:	42b5      	cmp	r5, r6
 8016a5a:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8016a5e:	d209      	bcs.n	8016a74 <rcl_get_discovery_static_peers+0xb4>
 8016a60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016a64:	e7e2      	b.n	8016a2c <rcl_get_discovery_static_peers+0x6c>
 8016a66:	200b      	movs	r0, #11
 8016a68:	b00e      	add	sp, #56	@ 0x38
 8016a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a6e:	3501      	adds	r5, #1
 8016a70:	42b5      	cmp	r5, r6
 8016a72:	d3db      	bcc.n	8016a2c <rcl_get_discovery_static_peers+0x6c>
 8016a74:	4638      	mov	r0, r7
 8016a76:	f000 fc01 	bl	801727c <rcutils_string_array_fini>
 8016a7a:	3800      	subs	r0, #0
 8016a7c:	bf18      	it	ne
 8016a7e:	2001      	movne	r0, #1
 8016a80:	e7af      	b.n	80169e2 <rcl_get_discovery_static_peers+0x22>
 8016a82:	f7f6 fd23 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 8016a86:	e7ac      	b.n	80169e2 <rcl_get_discovery_static_peers+0x22>
 8016a88:	0801cb4c 	.word	0x0801cb4c

08016a8c <rcl_get_default_domain_id>:
 8016a8c:	b530      	push	{r4, r5, lr}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	2300      	movs	r3, #0
 8016a92:	9300      	str	r3, [sp, #0]
 8016a94:	b1d0      	cbz	r0, 8016acc <rcl_get_default_domain_id+0x40>
 8016a96:	4604      	mov	r4, r0
 8016a98:	4669      	mov	r1, sp
 8016a9a:	4815      	ldr	r0, [pc, #84]	@ (8016af0 <rcl_get_default_domain_id+0x64>)
 8016a9c:	f7f9 f818 	bl	800fad0 <rcutils_get_env>
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	b110      	cbz	r0, 8016aaa <rcl_get_default_domain_id+0x1e>
 8016aa4:	2001      	movs	r0, #1
 8016aa6:	b003      	add	sp, #12
 8016aa8:	bd30      	pop	{r4, r5, pc}
 8016aaa:	9b00      	ldr	r3, [sp, #0]
 8016aac:	b18b      	cbz	r3, 8016ad2 <rcl_get_default_domain_id+0x46>
 8016aae:	7818      	ldrb	r0, [r3, #0]
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d0f8      	beq.n	8016aa6 <rcl_get_default_domain_id+0x1a>
 8016ab4:	a901      	add	r1, sp, #4
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	9201      	str	r2, [sp, #4]
 8016aba:	f001 feff 	bl	80188bc <strtoul>
 8016abe:	4605      	mov	r5, r0
 8016ac0:	b150      	cbz	r0, 8016ad8 <rcl_get_default_domain_id+0x4c>
 8016ac2:	1c43      	adds	r3, r0, #1
 8016ac4:	d00d      	beq.n	8016ae2 <rcl_get_default_domain_id+0x56>
 8016ac6:	6025      	str	r5, [r4, #0]
 8016ac8:	2000      	movs	r0, #0
 8016aca:	e7ec      	b.n	8016aa6 <rcl_get_default_domain_id+0x1a>
 8016acc:	200b      	movs	r0, #11
 8016ace:	b003      	add	sp, #12
 8016ad0:	bd30      	pop	{r4, r5, pc}
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	b003      	add	sp, #12
 8016ad6:	bd30      	pop	{r4, r5, pc}
 8016ad8:	9b01      	ldr	r3, [sp, #4]
 8016ada:	781b      	ldrb	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d0f2      	beq.n	8016ac6 <rcl_get_default_domain_id+0x3a>
 8016ae0:	e7e0      	b.n	8016aa4 <rcl_get_default_domain_id+0x18>
 8016ae2:	f002 ff23 	bl	801992c <__errno>
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	2b22      	cmp	r3, #34	@ 0x22
 8016aea:	d1ec      	bne.n	8016ac6 <rcl_get_default_domain_id+0x3a>
 8016aec:	e7da      	b.n	8016aa4 <rcl_get_default_domain_id+0x18>
 8016aee:	bf00      	nop
 8016af0:	0801cc40 	.word	0x0801cc40

08016af4 <rcl_expand_topic_name>:
 8016af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af8:	b08b      	sub	sp, #44	@ 0x2c
 8016afa:	9306      	str	r3, [sp, #24]
 8016afc:	2800      	cmp	r0, #0
 8016afe:	f000 80ad 	beq.w	8016c5c <rcl_expand_topic_name+0x168>
 8016b02:	460e      	mov	r6, r1
 8016b04:	2900      	cmp	r1, #0
 8016b06:	f000 80a9 	beq.w	8016c5c <rcl_expand_topic_name+0x168>
 8016b0a:	4617      	mov	r7, r2
 8016b0c:	2a00      	cmp	r2, #0
 8016b0e:	f000 80a5 	beq.w	8016c5c <rcl_expand_topic_name+0x168>
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	f000 80a2 	beq.w	8016c5c <rcl_expand_topic_name+0x168>
 8016b18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	f000 809e 	beq.w	8016c5c <rcl_expand_topic_name+0x168>
 8016b20:	2200      	movs	r2, #0
 8016b22:	a909      	add	r1, sp, #36	@ 0x24
 8016b24:	4680      	mov	r8, r0
 8016b26:	f000 f9fb 	bl	8016f20 <rcl_validate_topic_name>
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	f040 8096 	bne.w	8016c5e <rcl_expand_topic_name+0x16a>
 8016b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	f040 809a 	bne.w	8016c6e <rcl_expand_topic_name+0x17a>
 8016b3a:	4602      	mov	r2, r0
 8016b3c:	a909      	add	r1, sp, #36	@ 0x24
 8016b3e:	4630      	mov	r0, r6
 8016b40:	f7fb fa54 	bl	8011fec <rmw_validate_node_name>
 8016b44:	2800      	cmp	r0, #0
 8016b46:	f040 808e 	bne.w	8016c66 <rcl_expand_topic_name+0x172>
 8016b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b4c:	2a00      	cmp	r2, #0
 8016b4e:	f040 8093 	bne.w	8016c78 <rcl_expand_topic_name+0x184>
 8016b52:	a909      	add	r1, sp, #36	@ 0x24
 8016b54:	4638      	mov	r0, r7
 8016b56:	f7fb fa2b 	bl	8011fb0 <rmw_validate_namespace>
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	f040 8083 	bne.w	8016c66 <rcl_expand_topic_name+0x172>
 8016b60:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016b62:	2c00      	cmp	r4, #0
 8016b64:	f040 80ed 	bne.w	8016d42 <rcl_expand_topic_name+0x24e>
 8016b68:	217b      	movs	r1, #123	@ 0x7b
 8016b6a:	4640      	mov	r0, r8
 8016b6c:	f002 fe3c 	bl	80197e8 <strchr>
 8016b70:	f898 3000 	ldrb.w	r3, [r8]
 8016b74:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b76:	4605      	mov	r5, r0
 8016b78:	f000 809e 	beq.w	8016cb8 <rcl_expand_topic_name+0x1c4>
 8016b7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8016b7e:	f040 80a2 	bne.w	8016cc6 <rcl_expand_topic_name+0x1d2>
 8016b82:	4638      	mov	r0, r7
 8016b84:	f7e9 fb84 	bl	8000290 <strlen>
 8016b88:	4a82      	ldr	r2, [pc, #520]	@ (8016d94 <rcl_expand_topic_name+0x2a0>)
 8016b8a:	4b83      	ldr	r3, [pc, #524]	@ (8016d98 <rcl_expand_topic_name+0x2a4>)
 8016b8c:	2801      	cmp	r0, #1
 8016b8e:	bf18      	it	ne
 8016b90:	4613      	movne	r3, r2
 8016b92:	9302      	str	r3, [sp, #8]
 8016b94:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016b96:	9300      	str	r3, [sp, #0]
 8016b98:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016b9c:	f108 0301 	add.w	r3, r8, #1
 8016ba0:	9305      	str	r3, [sp, #20]
 8016ba2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016ba6:	9301      	str	r3, [sp, #4]
 8016ba8:	ab14      	add	r3, sp, #80	@ 0x50
 8016baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016bac:	f7f8 ffec 	bl	800fb88 <rcutils_format_string_limit>
 8016bb0:	4682      	mov	sl, r0
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	f000 80c7 	beq.w	8016d46 <rcl_expand_topic_name+0x252>
 8016bb8:	2d00      	cmp	r5, #0
 8016bba:	f000 80a2 	beq.w	8016d02 <rcl_expand_topic_name+0x20e>
 8016bbe:	217b      	movs	r1, #123	@ 0x7b
 8016bc0:	f002 fe12 	bl	80197e8 <strchr>
 8016bc4:	46d1      	mov	r9, sl
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	9407      	str	r4, [sp, #28]
 8016bca:	46d3      	mov	fp, sl
 8016bcc:	464c      	mov	r4, r9
 8016bce:	2d00      	cmp	r5, #0
 8016bd0:	f000 80be 	beq.w	8016d50 <rcl_expand_topic_name+0x25c>
 8016bd4:	217d      	movs	r1, #125	@ 0x7d
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f002 fe06 	bl	80197e8 <strchr>
 8016bdc:	eba0 0905 	sub.w	r9, r0, r5
 8016be0:	f109 0a01 	add.w	sl, r9, #1
 8016be4:	486d      	ldr	r0, [pc, #436]	@ (8016d9c <rcl_expand_topic_name+0x2a8>)
 8016be6:	4652      	mov	r2, sl
 8016be8:	4629      	mov	r1, r5
 8016bea:	f002 fe0a 	bl	8019802 <strncmp>
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	d067      	beq.n	8016cc2 <rcl_expand_topic_name+0x1ce>
 8016bf2:	486b      	ldr	r0, [pc, #428]	@ (8016da0 <rcl_expand_topic_name+0x2ac>)
 8016bf4:	4652      	mov	r2, sl
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	f002 fe03 	bl	8019802 <strncmp>
 8016bfc:	b130      	cbz	r0, 8016c0c <rcl_expand_topic_name+0x118>
 8016bfe:	4869      	ldr	r0, [pc, #420]	@ (8016da4 <rcl_expand_topic_name+0x2b0>)
 8016c00:	4652      	mov	r2, sl
 8016c02:	4629      	mov	r1, r5
 8016c04:	f002 fdfd 	bl	8019802 <strncmp>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	d137      	bne.n	8016c7c <rcl_expand_topic_name+0x188>
 8016c0c:	46b9      	mov	r9, r7
 8016c0e:	ab16      	add	r3, sp, #88	@ 0x58
 8016c10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016c18:	ab14      	add	r3, sp, #80	@ 0x50
 8016c1a:	4628      	mov	r0, r5
 8016c1c:	cb0c      	ldmia	r3, {r2, r3}
 8016c1e:	4651      	mov	r1, sl
 8016c20:	f7f9 f8f2 	bl	800fe08 <rcutils_strndup>
 8016c24:	4605      	mov	r5, r0
 8016c26:	2800      	cmp	r0, #0
 8016c28:	f000 809c 	beq.w	8016d64 <rcl_expand_topic_name+0x270>
 8016c2c:	464a      	mov	r2, r9
 8016c2e:	4620      	mov	r0, r4
 8016c30:	ab14      	add	r3, sp, #80	@ 0x50
 8016c32:	4629      	mov	r1, r5
 8016c34:	f7f8 ffe2 	bl	800fbfc <rcutils_repl_str>
 8016c38:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016c3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	4628      	mov	r0, r5
 8016c40:	4798      	blx	r3
 8016c42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016c44:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016c46:	4658      	mov	r0, fp
 8016c48:	4798      	blx	r3
 8016c4a:	2c00      	cmp	r4, #0
 8016c4c:	d07b      	beq.n	8016d46 <rcl_expand_topic_name+0x252>
 8016c4e:	217b      	movs	r1, #123	@ 0x7b
 8016c50:	4620      	mov	r0, r4
 8016c52:	f002 fdc9 	bl	80197e8 <strchr>
 8016c56:	46a3      	mov	fp, r4
 8016c58:	4605      	mov	r5, r0
 8016c5a:	e7b8      	b.n	8016bce <rcl_expand_topic_name+0xda>
 8016c5c:	240b      	movs	r4, #11
 8016c5e:	4620      	mov	r0, r4
 8016c60:	b00b      	add	sp, #44	@ 0x2c
 8016c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c66:	f7f6 fc31 	bl	800d4cc <rcl_convert_rmw_ret_to_rcl_ret>
 8016c6a:	4604      	mov	r4, r0
 8016c6c:	e7f7      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016c6e:	2467      	movs	r4, #103	@ 0x67
 8016c70:	4620      	mov	r0, r4
 8016c72:	b00b      	add	sp, #44	@ 0x2c
 8016c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c78:	24c9      	movs	r4, #201	@ 0xc9
 8016c7a:	e7f0      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016c7c:	f109 32ff 	add.w	r2, r9, #4294967295
 8016c80:	9806      	ldr	r0, [sp, #24]
 8016c82:	1c69      	adds	r1, r5, #1
 8016c84:	f7f9 f9bc 	bl	8010000 <rcutils_string_map_getn>
 8016c88:	4681      	mov	r9, r0
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	d1bf      	bne.n	8016c0e <rcl_expand_topic_name+0x11a>
 8016c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c90:	aa16      	add	r2, sp, #88	@ 0x58
 8016c92:	6018      	str	r0, [r3, #0]
 8016c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016c9a:	ab14      	add	r3, sp, #80	@ 0x50
 8016c9c:	cb0c      	ldmia	r3, {r2, r3}
 8016c9e:	4651      	mov	r1, sl
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f7f9 f8b1 	bl	800fe08 <rcutils_strndup>
 8016ca6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016ca8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016caa:	4798      	blx	r3
 8016cac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016cae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016cb0:	4658      	mov	r0, fp
 8016cb2:	2469      	movs	r4, #105	@ 0x69
 8016cb4:	4798      	blx	r3
 8016cb6:	e7d2      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	d05b      	beq.n	8016d74 <rcl_expand_topic_name+0x280>
 8016cbc:	46c1      	mov	r9, r8
 8016cbe:	46a2      	mov	sl, r4
 8016cc0:	e782      	b.n	8016bc8 <rcl_expand_topic_name+0xd4>
 8016cc2:	46b1      	mov	r9, r6
 8016cc4:	e7a3      	b.n	8016c0e <rcl_expand_topic_name+0x11a>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	d1f8      	bne.n	8016cbc <rcl_expand_topic_name+0x1c8>
 8016cca:	4638      	mov	r0, r7
 8016ccc:	f7e9 fae0 	bl	8000290 <strlen>
 8016cd0:	4a35      	ldr	r2, [pc, #212]	@ (8016da8 <rcl_expand_topic_name+0x2b4>)
 8016cd2:	4b36      	ldr	r3, [pc, #216]	@ (8016dac <rcl_expand_topic_name+0x2b8>)
 8016cd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8016cd8:	2801      	cmp	r0, #1
 8016cda:	bf18      	it	ne
 8016cdc:	4613      	movne	r3, r2
 8016cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016ce2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016ce6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016ce8:	9703      	str	r7, [sp, #12]
 8016cea:	9200      	str	r2, [sp, #0]
 8016cec:	ab14      	add	r3, sp, #80	@ 0x50
 8016cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016cf0:	f7f8 ff4a 	bl	800fb88 <rcutils_format_string_limit>
 8016cf4:	4682      	mov	sl, r0
 8016cf6:	4653      	mov	r3, sl
 8016cf8:	b32b      	cbz	r3, 8016d46 <rcl_expand_topic_name+0x252>
 8016cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cfc:	f8c3 a000 	str.w	sl, [r3]
 8016d00:	e7ad      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016d02:	f89a 3000 	ldrb.w	r3, [sl]
 8016d06:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d08:	d0f7      	beq.n	8016cfa <rcl_expand_topic_name+0x206>
 8016d0a:	4638      	mov	r0, r7
 8016d0c:	f7e9 fac0 	bl	8000290 <strlen>
 8016d10:	4a25      	ldr	r2, [pc, #148]	@ (8016da8 <rcl_expand_topic_name+0x2b4>)
 8016d12:	4b26      	ldr	r3, [pc, #152]	@ (8016dac <rcl_expand_topic_name+0x2b8>)
 8016d14:	f8cd a010 	str.w	sl, [sp, #16]
 8016d18:	2801      	cmp	r0, #1
 8016d1a:	bf18      	it	ne
 8016d1c:	4613      	movne	r3, r2
 8016d1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016d22:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016d26:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016d28:	9703      	str	r7, [sp, #12]
 8016d2a:	9200      	str	r2, [sp, #0]
 8016d2c:	ab14      	add	r3, sp, #80	@ 0x50
 8016d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d30:	f7f8 ff2a 	bl	800fb88 <rcutils_format_string_limit>
 8016d34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d36:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d38:	4605      	mov	r5, r0
 8016d3a:	4650      	mov	r0, sl
 8016d3c:	4798      	blx	r3
 8016d3e:	46aa      	mov	sl, r5
 8016d40:	e7d9      	b.n	8016cf6 <rcl_expand_topic_name+0x202>
 8016d42:	24ca      	movs	r4, #202	@ 0xca
 8016d44:	e78b      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016d46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016d48:	2300      	movs	r3, #0
 8016d4a:	6013      	str	r3, [r2, #0]
 8016d4c:	240a      	movs	r4, #10
 8016d4e:	e786      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016d50:	465b      	mov	r3, fp
 8016d52:	9c07      	ldr	r4, [sp, #28]
 8016d54:	46da      	mov	sl, fp
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d1d3      	bne.n	8016d02 <rcl_expand_topic_name+0x20e>
 8016d5a:	f898 3000 	ldrb.w	r3, [r8]
 8016d5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d60:	d0cb      	beq.n	8016cfa <rcl_expand_topic_name+0x206>
 8016d62:	e7b2      	b.n	8016cca <rcl_expand_topic_name+0x1d6>
 8016d64:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016d68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d6a:	6015      	str	r5, [r2, #0]
 8016d6c:	4658      	mov	r0, fp
 8016d6e:	4798      	blx	r3
 8016d70:	240a      	movs	r4, #10
 8016d72:	e774      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016d74:	ab17      	add	r3, sp, #92	@ 0x5c
 8016d76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d7a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016d7e:	ab14      	add	r3, sp, #80	@ 0x50
 8016d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016d82:	4640      	mov	r0, r8
 8016d84:	f7f9 f81a 	bl	800fdbc <rcutils_strdup>
 8016d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d8a:	2800      	cmp	r0, #0
 8016d8c:	6018      	str	r0, [r3, #0]
 8016d8e:	bf08      	it	eq
 8016d90:	240a      	moveq	r4, #10
 8016d92:	e764      	b.n	8016c5e <rcl_expand_topic_name+0x16a>
 8016d94:	0801cc50 	.word	0x0801cc50
 8016d98:	0801c248 	.word	0x0801c248
 8016d9c:	0801cc58 	.word	0x0801cc58
 8016da0:	0801cc60 	.word	0x0801cc60
 8016da4:	0801cc68 	.word	0x0801cc68
 8016da8:	0801c000 	.word	0x0801c000
 8016dac:	0801bff8 	.word	0x0801bff8

08016db0 <rcl_get_default_topic_name_substitutions>:
 8016db0:	2800      	cmp	r0, #0
 8016db2:	bf0c      	ite	eq
 8016db4:	200b      	moveq	r0, #11
 8016db6:	2000      	movne	r0, #0
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop

08016dbc <rcl_get_zero_initialized_guard_condition>:
 8016dbc:	4a03      	ldr	r2, [pc, #12]	@ (8016dcc <rcl_get_zero_initialized_guard_condition+0x10>)
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	4770      	bx	lr
 8016dcc:	0801cc74 	.word	0x0801cc74

08016dd0 <rcl_guard_condition_init_from_rmw>:
 8016dd0:	b082      	sub	sp, #8
 8016dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd6:	b086      	sub	sp, #24
 8016dd8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016ddc:	4604      	mov	r4, r0
 8016dde:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016de2:	460e      	mov	r6, r1
 8016de4:	4617      	mov	r7, r2
 8016de6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016dea:	f10d 0e04 	add.w	lr, sp, #4
 8016dee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016df2:	f8dc 3000 	ldr.w	r3, [ip]
 8016df6:	f8ce 3000 	str.w	r3, [lr]
 8016dfa:	a801      	add	r0, sp, #4
 8016dfc:	f7f8 fdb6 	bl	800f96c <rcutils_allocator_is_valid>
 8016e00:	b350      	cbz	r0, 8016e58 <rcl_guard_condition_init_from_rmw+0x88>
 8016e02:	b34c      	cbz	r4, 8016e58 <rcl_guard_condition_init_from_rmw+0x88>
 8016e04:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016e08:	f1b8 0f00 	cmp.w	r8, #0
 8016e0c:	d11e      	bne.n	8016e4c <rcl_guard_condition_init_from_rmw+0x7c>
 8016e0e:	b31f      	cbz	r7, 8016e58 <rcl_guard_condition_init_from_rmw+0x88>
 8016e10:	4638      	mov	r0, r7
 8016e12:	f7f6 fb79 	bl	800d508 <rcl_context_is_valid>
 8016e16:	b328      	cbz	r0, 8016e64 <rcl_guard_condition_init_from_rmw+0x94>
 8016e18:	9b01      	ldr	r3, [sp, #4]
 8016e1a:	9905      	ldr	r1, [sp, #20]
 8016e1c:	201c      	movs	r0, #28
 8016e1e:	4798      	blx	r3
 8016e20:	4605      	mov	r5, r0
 8016e22:	6060      	str	r0, [r4, #4]
 8016e24:	b358      	cbz	r0, 8016e7e <rcl_guard_condition_init_from_rmw+0xae>
 8016e26:	b1fe      	cbz	r6, 8016e68 <rcl_guard_condition_init_from_rmw+0x98>
 8016e28:	6006      	str	r6, [r0, #0]
 8016e2a:	f880 8004 	strb.w	r8, [r0, #4]
 8016e2e:	ac01      	add	r4, sp, #4
 8016e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e32:	f105 0c08 	add.w	ip, r5, #8
 8016e36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e3a:	6823      	ldr	r3, [r4, #0]
 8016e3c:	f8cc 3000 	str.w	r3, [ip]
 8016e40:	2000      	movs	r0, #0
 8016e42:	b006      	add	sp, #24
 8016e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e48:	b002      	add	sp, #8
 8016e4a:	4770      	bx	lr
 8016e4c:	2064      	movs	r0, #100	@ 0x64
 8016e4e:	b006      	add	sp, #24
 8016e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e54:	b002      	add	sp, #8
 8016e56:	4770      	bx	lr
 8016e58:	200b      	movs	r0, #11
 8016e5a:	b006      	add	sp, #24
 8016e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e60:	b002      	add	sp, #8
 8016e62:	4770      	bx	lr
 8016e64:	2065      	movs	r0, #101	@ 0x65
 8016e66:	e7f2      	b.n	8016e4e <rcl_guard_condition_init_from_rmw+0x7e>
 8016e68:	6838      	ldr	r0, [r7, #0]
 8016e6a:	3028      	adds	r0, #40	@ 0x28
 8016e6c:	f000 fb70 	bl	8017550 <rmw_create_guard_condition>
 8016e70:	6028      	str	r0, [r5, #0]
 8016e72:	6865      	ldr	r5, [r4, #4]
 8016e74:	682e      	ldr	r6, [r5, #0]
 8016e76:	b126      	cbz	r6, 8016e82 <rcl_guard_condition_init_from_rmw+0xb2>
 8016e78:	2301      	movs	r3, #1
 8016e7a:	712b      	strb	r3, [r5, #4]
 8016e7c:	e7d7      	b.n	8016e2e <rcl_guard_condition_init_from_rmw+0x5e>
 8016e7e:	200a      	movs	r0, #10
 8016e80:	e7e5      	b.n	8016e4e <rcl_guard_condition_init_from_rmw+0x7e>
 8016e82:	4628      	mov	r0, r5
 8016e84:	9b02      	ldr	r3, [sp, #8]
 8016e86:	9905      	ldr	r1, [sp, #20]
 8016e88:	4798      	blx	r3
 8016e8a:	6066      	str	r6, [r4, #4]
 8016e8c:	2001      	movs	r0, #1
 8016e8e:	e7de      	b.n	8016e4e <rcl_guard_condition_init_from_rmw+0x7e>

08016e90 <rcl_guard_condition_fini>:
 8016e90:	b570      	push	{r4, r5, r6, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	b1f0      	cbz	r0, 8016ed4 <rcl_guard_condition_fini+0x44>
 8016e96:	6843      	ldr	r3, [r0, #4]
 8016e98:	4604      	mov	r4, r0
 8016e9a:	b163      	cbz	r3, 8016eb6 <rcl_guard_condition_fini+0x26>
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	68de      	ldr	r6, [r3, #12]
 8016ea0:	6999      	ldr	r1, [r3, #24]
 8016ea2:	b160      	cbz	r0, 8016ebe <rcl_guard_condition_fini+0x2e>
 8016ea4:	791d      	ldrb	r5, [r3, #4]
 8016ea6:	b965      	cbnz	r5, 8016ec2 <rcl_guard_condition_fini+0x32>
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	47b0      	blx	r6
 8016eac:	2300      	movs	r3, #0
 8016eae:	4628      	mov	r0, r5
 8016eb0:	6063      	str	r3, [r4, #4]
 8016eb2:	b002      	add	sp, #8
 8016eb4:	bd70      	pop	{r4, r5, r6, pc}
 8016eb6:	461d      	mov	r5, r3
 8016eb8:	4628      	mov	r0, r5
 8016eba:	b002      	add	sp, #8
 8016ebc:	bd70      	pop	{r4, r5, r6, pc}
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	e7f2      	b.n	8016ea8 <rcl_guard_condition_fini+0x18>
 8016ec2:	9101      	str	r1, [sp, #4]
 8016ec4:	f000 fb58 	bl	8017578 <rmw_destroy_guard_condition>
 8016ec8:	1e05      	subs	r5, r0, #0
 8016eca:	6863      	ldr	r3, [r4, #4]
 8016ecc:	9901      	ldr	r1, [sp, #4]
 8016ece:	bf18      	it	ne
 8016ed0:	2501      	movne	r5, #1
 8016ed2:	e7e9      	b.n	8016ea8 <rcl_guard_condition_fini+0x18>
 8016ed4:	250b      	movs	r5, #11
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	b002      	add	sp, #8
 8016eda:	bd70      	pop	{r4, r5, r6, pc}

08016edc <rcl_guard_condition_get_default_options>:
 8016edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ede:	b087      	sub	sp, #28
 8016ee0:	4606      	mov	r6, r0
 8016ee2:	4668      	mov	r0, sp
 8016ee4:	f7f8 fd34 	bl	800f950 <rcutils_get_default_allocator>
 8016ee8:	4b09      	ldr	r3, [pc, #36]	@ (8016f10 <rcl_guard_condition_get_default_options+0x34>)
 8016eea:	46ee      	mov	lr, sp
 8016eec:	469c      	mov	ip, r3
 8016eee:	461d      	mov	r5, r3
 8016ef0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ef4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016efa:	4634      	mov	r4, r6
 8016efc:	f8de 7000 	ldr.w	r7, [lr]
 8016f00:	f8cc 7000 	str.w	r7, [ip]
 8016f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f06:	4630      	mov	r0, r6
 8016f08:	6027      	str	r7, [r4, #0]
 8016f0a:	b007      	add	sp, #28
 8016f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	20014638 	.word	0x20014638

08016f14 <rcl_guard_condition_get_rmw_handle>:
 8016f14:	b110      	cbz	r0, 8016f1c <rcl_guard_condition_get_rmw_handle+0x8>
 8016f16:	6840      	ldr	r0, [r0, #4]
 8016f18:	b100      	cbz	r0, 8016f1c <rcl_guard_condition_get_rmw_handle+0x8>
 8016f1a:	6800      	ldr	r0, [r0, #0]
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop

08016f20 <rcl_validate_topic_name>:
 8016f20:	2800      	cmp	r0, #0
 8016f22:	d07a      	beq.n	801701a <rcl_validate_topic_name+0xfa>
 8016f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f28:	460e      	mov	r6, r1
 8016f2a:	2900      	cmp	r1, #0
 8016f2c:	d07c      	beq.n	8017028 <rcl_validate_topic_name+0x108>
 8016f2e:	4617      	mov	r7, r2
 8016f30:	4605      	mov	r5, r0
 8016f32:	f7e9 f9ad 	bl	8000290 <strlen>
 8016f36:	b1b0      	cbz	r0, 8016f66 <rcl_validate_topic_name+0x46>
 8016f38:	f895 9000 	ldrb.w	r9, [r5]
 8016f3c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80170c0 <rcl_validate_topic_name+0x1a0>
 8016f40:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016f44:	f013 0304 	ands.w	r3, r3, #4
 8016f48:	d169      	bne.n	801701e <rcl_validate_topic_name+0xfe>
 8016f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8016f4e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016f52:	2a2f      	cmp	r2, #47	@ 0x2f
 8016f54:	d10e      	bne.n	8016f74 <rcl_validate_topic_name+0x54>
 8016f56:	2202      	movs	r2, #2
 8016f58:	6032      	str	r2, [r6, #0]
 8016f5a:	b36f      	cbz	r7, 8016fb8 <rcl_validate_topic_name+0x98>
 8016f5c:	f8c7 8000 	str.w	r8, [r7]
 8016f60:	4618      	mov	r0, r3
 8016f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f66:	2301      	movs	r3, #1
 8016f68:	6033      	str	r3, [r6, #0]
 8016f6a:	b32f      	cbz	r7, 8016fb8 <rcl_validate_topic_name+0x98>
 8016f6c:	2000      	movs	r0, #0
 8016f6e:	6038      	str	r0, [r7, #0]
 8016f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f74:	f105 3aff 	add.w	sl, r5, #4294967295
 8016f78:	461c      	mov	r4, r3
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016f80:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016f84:	f1be 0f09 	cmp.w	lr, #9
 8016f88:	d919      	bls.n	8016fbe <rcl_validate_topic_name+0x9e>
 8016f8a:	f022 0e20 	bic.w	lr, r2, #32
 8016f8e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016f92:	f1be 0f19 	cmp.w	lr, #25
 8016f96:	d912      	bls.n	8016fbe <rcl_validate_topic_name+0x9e>
 8016f98:	2a5f      	cmp	r2, #95	@ 0x5f
 8016f9a:	d019      	beq.n	8016fd0 <rcl_validate_topic_name+0xb0>
 8016f9c:	2a2f      	cmp	r2, #47	@ 0x2f
 8016f9e:	d051      	beq.n	8017044 <rcl_validate_topic_name+0x124>
 8016fa0:	2a7e      	cmp	r2, #126	@ 0x7e
 8016fa2:	d048      	beq.n	8017036 <rcl_validate_topic_name+0x116>
 8016fa4:	2a7b      	cmp	r2, #123	@ 0x7b
 8016fa6:	d054      	beq.n	8017052 <rcl_validate_topic_name+0x132>
 8016fa8:	2a7d      	cmp	r2, #125	@ 0x7d
 8016faa:	d161      	bne.n	8017070 <rcl_validate_topic_name+0x150>
 8016fac:	2c00      	cmp	r4, #0
 8016fae:	d155      	bne.n	801705c <rcl_validate_topic_name+0x13c>
 8016fb0:	2305      	movs	r3, #5
 8016fb2:	6033      	str	r3, [r6, #0]
 8016fb4:	b107      	cbz	r7, 8016fb8 <rcl_validate_topic_name+0x98>
 8016fb6:	6039      	str	r1, [r7, #0]
 8016fb8:	2000      	movs	r0, #0
 8016fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fbe:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016fc2:	0752      	lsls	r2, r2, #29
 8016fc4:	d504      	bpl.n	8016fd0 <rcl_validate_topic_name+0xb0>
 8016fc6:	b11c      	cbz	r4, 8016fd0 <rcl_validate_topic_name+0xb0>
 8016fc8:	b111      	cbz	r1, 8016fd0 <rcl_validate_topic_name+0xb0>
 8016fca:	1e4a      	subs	r2, r1, #1
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d02d      	beq.n	801702c <rcl_validate_topic_name+0x10c>
 8016fd0:	3101      	adds	r1, #1
 8016fd2:	4288      	cmp	r0, r1
 8016fd4:	d1d2      	bne.n	8016f7c <rcl_validate_topic_name+0x5c>
 8016fd6:	2c00      	cmp	r4, #0
 8016fd8:	d145      	bne.n	8017066 <rcl_validate_topic_name+0x146>
 8016fda:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016fde:	d04f      	beq.n	8017080 <rcl_validate_topic_name+0x160>
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	e006      	b.n	8016ff4 <rcl_validate_topic_name+0xd4>
 8016fe6:	428b      	cmp	r3, r1
 8016fe8:	f105 0501 	add.w	r5, r5, #1
 8016fec:	f103 0201 	add.w	r2, r3, #1
 8016ff0:	d236      	bcs.n	8017060 <rcl_validate_topic_name+0x140>
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	4580      	cmp	r8, r0
 8016ff6:	f100 0001 	add.w	r0, r0, #1
 8016ffa:	d0f4      	beq.n	8016fe6 <rcl_validate_topic_name+0xc6>
 8016ffc:	782a      	ldrb	r2, [r5, #0]
 8016ffe:	2a2f      	cmp	r2, #47	@ 0x2f
 8017000:	d1f1      	bne.n	8016fe6 <rcl_validate_topic_name+0xc6>
 8017002:	786a      	ldrb	r2, [r5, #1]
 8017004:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017008:	0754      	lsls	r4, r2, #29
 801700a:	d5ec      	bpl.n	8016fe6 <rcl_validate_topic_name+0xc6>
 801700c:	2204      	movs	r2, #4
 801700e:	6032      	str	r2, [r6, #0]
 8017010:	2f00      	cmp	r7, #0
 8017012:	d0d1      	beq.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017014:	603b      	str	r3, [r7, #0]
 8017016:	2000      	movs	r0, #0
 8017018:	e7aa      	b.n	8016f70 <rcl_validate_topic_name+0x50>
 801701a:	200b      	movs	r0, #11
 801701c:	4770      	bx	lr
 801701e:	2304      	movs	r3, #4
 8017020:	6033      	str	r3, [r6, #0]
 8017022:	2f00      	cmp	r7, #0
 8017024:	d1a2      	bne.n	8016f6c <rcl_validate_topic_name+0x4c>
 8017026:	e7c7      	b.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017028:	200b      	movs	r0, #11
 801702a:	e7a1      	b.n	8016f70 <rcl_validate_topic_name+0x50>
 801702c:	2309      	movs	r3, #9
 801702e:	6033      	str	r3, [r6, #0]
 8017030:	2f00      	cmp	r7, #0
 8017032:	d1c0      	bne.n	8016fb6 <rcl_validate_topic_name+0x96>
 8017034:	e7c0      	b.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017036:	2900      	cmp	r1, #0
 8017038:	d0ca      	beq.n	8016fd0 <rcl_validate_topic_name+0xb0>
 801703a:	2306      	movs	r3, #6
 801703c:	6033      	str	r3, [r6, #0]
 801703e:	2f00      	cmp	r7, #0
 8017040:	d1b9      	bne.n	8016fb6 <rcl_validate_topic_name+0x96>
 8017042:	e7b9      	b.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017044:	2c00      	cmp	r4, #0
 8017046:	d0c3      	beq.n	8016fd0 <rcl_validate_topic_name+0xb0>
 8017048:	2308      	movs	r3, #8
 801704a:	6033      	str	r3, [r6, #0]
 801704c:	2f00      	cmp	r7, #0
 801704e:	d1b2      	bne.n	8016fb6 <rcl_validate_topic_name+0x96>
 8017050:	e7b2      	b.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017052:	2c00      	cmp	r4, #0
 8017054:	d1f8      	bne.n	8017048 <rcl_validate_topic_name+0x128>
 8017056:	460b      	mov	r3, r1
 8017058:	2401      	movs	r4, #1
 801705a:	e7b9      	b.n	8016fd0 <rcl_validate_topic_name+0xb0>
 801705c:	2400      	movs	r4, #0
 801705e:	e7b7      	b.n	8016fd0 <rcl_validate_topic_name+0xb0>
 8017060:	2000      	movs	r0, #0
 8017062:	6030      	str	r0, [r6, #0]
 8017064:	e784      	b.n	8016f70 <rcl_validate_topic_name+0x50>
 8017066:	2205      	movs	r2, #5
 8017068:	6032      	str	r2, [r6, #0]
 801706a:	2f00      	cmp	r7, #0
 801706c:	d1d2      	bne.n	8017014 <rcl_validate_topic_name+0xf4>
 801706e:	e7a3      	b.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017070:	2c00      	cmp	r4, #0
 8017072:	bf14      	ite	ne
 8017074:	2308      	movne	r3, #8
 8017076:	2303      	moveq	r3, #3
 8017078:	6033      	str	r3, [r6, #0]
 801707a:	2f00      	cmp	r7, #0
 801707c:	d19b      	bne.n	8016fb6 <rcl_validate_topic_name+0x96>
 801707e:	e79b      	b.n	8016fb8 <rcl_validate_topic_name+0x98>
 8017080:	2301      	movs	r3, #1
 8017082:	e00a      	b.n	801709a <rcl_validate_topic_name+0x17a>
 8017084:	2c01      	cmp	r4, #1
 8017086:	d013      	beq.n	80170b0 <rcl_validate_topic_name+0x190>
 8017088:	4299      	cmp	r1, r3
 801708a:	f104 0401 	add.w	r4, r4, #1
 801708e:	f105 0501 	add.w	r5, r5, #1
 8017092:	f103 0201 	add.w	r2, r3, #1
 8017096:	d9e3      	bls.n	8017060 <rcl_validate_topic_name+0x140>
 8017098:	4613      	mov	r3, r2
 801709a:	45a0      	cmp	r8, r4
 801709c:	d0f4      	beq.n	8017088 <rcl_validate_topic_name+0x168>
 801709e:	782a      	ldrb	r2, [r5, #0]
 80170a0:	2a2f      	cmp	r2, #47	@ 0x2f
 80170a2:	d1ef      	bne.n	8017084 <rcl_validate_topic_name+0x164>
 80170a4:	786a      	ldrb	r2, [r5, #1]
 80170a6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80170aa:	0752      	lsls	r2, r2, #29
 80170ac:	d5ec      	bpl.n	8017088 <rcl_validate_topic_name+0x168>
 80170ae:	e7ad      	b.n	801700c <rcl_validate_topic_name+0xec>
 80170b0:	2307      	movs	r3, #7
 80170b2:	6033      	str	r3, [r6, #0]
 80170b4:	2f00      	cmp	r7, #0
 80170b6:	f43f af7f 	beq.w	8016fb8 <rcl_validate_topic_name+0x98>
 80170ba:	603c      	str	r4, [r7, #0]
 80170bc:	2000      	movs	r0, #0
 80170be:	e757      	b.n	8016f70 <rcl_validate_topic_name+0x50>
 80170c0:	0801cd44 	.word	0x0801cd44

080170c4 <rcutils_split>:
 80170c4:	b082      	sub	sp, #8
 80170c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ca:	b08d      	sub	sp, #52	@ 0x34
 80170cc:	ac16      	add	r4, sp, #88	@ 0x58
 80170ce:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80170d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80170d4:	2f00      	cmp	r7, #0
 80170d6:	f000 80a8 	beq.w	801722a <rcutils_split+0x166>
 80170da:	4605      	mov	r5, r0
 80170dc:	2800      	cmp	r0, #0
 80170de:	d07e      	beq.n	80171de <rcutils_split+0x11a>
 80170e0:	7803      	ldrb	r3, [r0, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d07b      	beq.n	80171de <rcutils_split+0x11a>
 80170e6:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 80170ea:	460e      	mov	r6, r1
 80170ec:	9203      	str	r2, [sp, #12]
 80170ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80170f2:	f107 0408 	add.w	r4, r7, #8
 80170f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170f8:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 80170fc:	f8c4 b000 	str.w	fp, [r4]
 8017100:	4628      	mov	r0, r5
 8017102:	f7e9 f8c5 	bl	8000290 <strlen>
 8017106:	782c      	ldrb	r4, [r5, #0]
 8017108:	182b      	adds	r3, r5, r0
 801710a:	1ba4      	subs	r4, r4, r6
 801710c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017110:	fab4 f484 	clz	r4, r4
 8017114:	42b3      	cmp	r3, r6
 8017116:	bf14      	ite	ne
 8017118:	4680      	movne	r8, r0
 801711a:	f1a0 0801 	subeq.w	r8, r0, #1
 801711e:	0964      	lsrs	r4, r4, #5
 8017120:	2001      	movs	r0, #1
 8017122:	4544      	cmp	r4, r8
 8017124:	6038      	str	r0, [r7, #0]
 8017126:	d26b      	bcs.n	8017200 <rcutils_split+0x13c>
 8017128:	192b      	adds	r3, r5, r4
 801712a:	eb05 0108 	add.w	r1, r5, r8
 801712e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017132:	42b2      	cmp	r2, r6
 8017134:	bf04      	itt	eq
 8017136:	3001      	addeq	r0, #1
 8017138:	6038      	streq	r0, [r7, #0]
 801713a:	4299      	cmp	r1, r3
 801713c:	d1f7      	bne.n	801712e <rcutils_split+0x6a>
 801713e:	9b03      	ldr	r3, [sp, #12]
 8017140:	0080      	lsls	r0, r0, #2
 8017142:	4659      	mov	r1, fp
 8017144:	4798      	blx	r3
 8017146:	4603      	mov	r3, r0
 8017148:	6078      	str	r0, [r7, #4]
 801714a:	2800      	cmp	r0, #0
 801714c:	d05f      	beq.n	801720e <rcutils_split+0x14a>
 801714e:	f04f 0a00 	mov.w	sl, #0
 8017152:	46a1      	mov	r9, r4
 8017154:	e002      	b.n	801715c <rcutils_split+0x98>
 8017156:	3401      	adds	r4, #1
 8017158:	45a0      	cmp	r8, r4
 801715a:	d922      	bls.n	80171a2 <rcutils_split+0xde>
 801715c:	5d2a      	ldrb	r2, [r5, r4]
 801715e:	42b2      	cmp	r2, r6
 8017160:	d1f9      	bne.n	8017156 <rcutils_split+0x92>
 8017162:	45a1      	cmp	r9, r4
 8017164:	eba4 0209 	sub.w	r2, r4, r9
 8017168:	d032      	beq.n	80171d0 <rcutils_split+0x10c>
 801716a:	9302      	str	r3, [sp, #8]
 801716c:	4659      	mov	r1, fp
 801716e:	9b03      	ldr	r3, [sp, #12]
 8017170:	9201      	str	r2, [sp, #4]
 8017172:	1c90      	adds	r0, r2, #2
 8017174:	4798      	blx	r3
 8017176:	9b02      	ldr	r3, [sp, #8]
 8017178:	9a01      	ldr	r2, [sp, #4]
 801717a:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801717e:	1c51      	adds	r1, r2, #1
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8017186:	eb05 0309 	add.w	r3, r5, r9
 801718a:	2800      	cmp	r0, #0
 801718c:	d04f      	beq.n	801722e <rcutils_split+0x16a>
 801718e:	4a2b      	ldr	r2, [pc, #172]	@ (801723c <rcutils_split+0x178>)
 8017190:	f002 f994 	bl	80194bc <sniprintf>
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f10a 0a01 	add.w	sl, sl, #1
 801719a:	3401      	adds	r4, #1
 801719c:	45a0      	cmp	r8, r4
 801719e:	46a1      	mov	r9, r4
 80171a0:	d8dc      	bhi.n	801715c <rcutils_split+0x98>
 80171a2:	45a1      	cmp	r9, r4
 80171a4:	d039      	beq.n	801721a <rcutils_split+0x156>
 80171a6:	eba4 0409 	sub.w	r4, r4, r9
 80171aa:	9301      	str	r3, [sp, #4]
 80171ac:	4659      	mov	r1, fp
 80171ae:	9b03      	ldr	r3, [sp, #12]
 80171b0:	1ca0      	adds	r0, r4, #2
 80171b2:	4798      	blx	r3
 80171b4:	9b01      	ldr	r3, [sp, #4]
 80171b6:	6879      	ldr	r1, [r7, #4]
 80171b8:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80171bc:	4a1f      	ldr	r2, [pc, #124]	@ (801723c <rcutils_split+0x178>)
 80171be:	f851 002a 	ldr.w	r0, [r1, sl, lsl #2]
 80171c2:	eb05 0309 	add.w	r3, r5, r9
 80171c6:	1c61      	adds	r1, r4, #1
 80171c8:	f002 f978 	bl	80194bc <sniprintf>
 80171cc:	2400      	movs	r4, #0
 80171ce:	e011      	b.n	80171f4 <rcutils_split+0x130>
 80171d0:	683a      	ldr	r2, [r7, #0]
 80171d2:	3a01      	subs	r2, #1
 80171d4:	2100      	movs	r1, #0
 80171d6:	603a      	str	r2, [r7, #0]
 80171d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80171dc:	e7dd      	b.n	801719a <rcutils_split+0xd6>
 80171de:	a804      	add	r0, sp, #16
 80171e0:	ac04      	add	r4, sp, #16
 80171e2:	f000 f82d 	bl	8017240 <rcutils_get_zero_initialized_string_array>
 80171e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80171ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80171ee:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80171f2:	2400      	movs	r4, #0
 80171f4:	4620      	mov	r0, r4
 80171f6:	b00d      	add	sp, #52	@ 0x34
 80171f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171fc:	b002      	add	sp, #8
 80171fe:	4770      	bx	lr
 8017200:	9b03      	ldr	r3, [sp, #12]
 8017202:	4659      	mov	r1, fp
 8017204:	2004      	movs	r0, #4
 8017206:	4798      	blx	r3
 8017208:	4603      	mov	r3, r0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	b928      	cbnz	r0, 801721a <rcutils_split+0x156>
 801720e:	4638      	mov	r0, r7
 8017210:	f000 f834 	bl	801727c <rcutils_string_array_fini>
 8017214:	b970      	cbnz	r0, 8017234 <rcutils_split+0x170>
 8017216:	2402      	movs	r4, #2
 8017218:	e7ec      	b.n	80171f4 <rcutils_split+0x130>
 801721a:	683a      	ldr	r2, [r7, #0]
 801721c:	3a01      	subs	r2, #1
 801721e:	2100      	movs	r1, #0
 8017220:	603a      	str	r2, [r7, #0]
 8017222:	460c      	mov	r4, r1
 8017224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017228:	e7e4      	b.n	80171f4 <rcutils_split+0x130>
 801722a:	240b      	movs	r4, #11
 801722c:	e7e2      	b.n	80171f4 <rcutils_split+0x130>
 801722e:	f8c7 a000 	str.w	sl, [r7]
 8017232:	e7ec      	b.n	801720e <rcutils_split+0x14a>
 8017234:	f7f8 fc7c 	bl	800fb30 <rcutils_reset_error>
 8017238:	2402      	movs	r4, #2
 801723a:	e7db      	b.n	80171f4 <rcutils_split+0x130>
 801723c:	0801c24c 	.word	0x0801c24c

08017240 <rcutils_get_zero_initialized_string_array>:
 8017240:	b570      	push	{r4, r5, r6, lr}
 8017242:	b086      	sub	sp, #24
 8017244:	4606      	mov	r6, r0
 8017246:	4668      	mov	r0, sp
 8017248:	f7f8 fb56 	bl	800f8f8 <rcutils_get_zero_initialized_allocator>
 801724c:	4b0a      	ldr	r3, [pc, #40]	@ (8017278 <rcutils_get_zero_initialized_string_array+0x38>)
 801724e:	46ee      	mov	lr, sp
 8017250:	f103 0508 	add.w	r5, r3, #8
 8017254:	469c      	mov	ip, r3
 8017256:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801725a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801725c:	f8de 3000 	ldr.w	r3, [lr]
 8017260:	602b      	str	r3, [r5, #0]
 8017262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017266:	4634      	mov	r4, r6
 8017268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801726a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801726e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017272:	4630      	mov	r0, r6
 8017274:	b006      	add	sp, #24
 8017276:	bd70      	pop	{r4, r5, r6, pc}
 8017278:	2001464c 	.word	0x2001464c

0801727c <rcutils_string_array_fini>:
 801727c:	b320      	cbz	r0, 80172c8 <rcutils_string_array_fini+0x4c>
 801727e:	b570      	push	{r4, r5, r6, lr}
 8017280:	4604      	mov	r4, r0
 8017282:	6840      	ldr	r0, [r0, #4]
 8017284:	b1d8      	cbz	r0, 80172be <rcutils_string_array_fini+0x42>
 8017286:	f104 0008 	add.w	r0, r4, #8
 801728a:	f7f8 fb6f 	bl	800f96c <rcutils_allocator_is_valid>
 801728e:	b1b8      	cbz	r0, 80172c0 <rcutils_string_array_fini+0x44>
 8017290:	6823      	ldr	r3, [r4, #0]
 8017292:	b1bb      	cbz	r3, 80172c4 <rcutils_string_array_fini+0x48>
 8017294:	2500      	movs	r5, #0
 8017296:	6860      	ldr	r0, [r4, #4]
 8017298:	462e      	mov	r6, r5
 801729a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801729e:	68e3      	ldr	r3, [r4, #12]
 80172a0:	69a1      	ldr	r1, [r4, #24]
 80172a2:	4798      	blx	r3
 80172a4:	e9d4 3000 	ldrd	r3, r0, [r4]
 80172a8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80172ac:	3501      	adds	r5, #1
 80172ae:	429d      	cmp	r5, r3
 80172b0:	d3f3      	bcc.n	801729a <rcutils_string_array_fini+0x1e>
 80172b2:	68e3      	ldr	r3, [r4, #12]
 80172b4:	69a1      	ldr	r1, [r4, #24]
 80172b6:	4798      	blx	r3
 80172b8:	2000      	movs	r0, #0
 80172ba:	e9c4 0000 	strd	r0, r0, [r4]
 80172be:	bd70      	pop	{r4, r5, r6, pc}
 80172c0:	200b      	movs	r0, #11
 80172c2:	bd70      	pop	{r4, r5, r6, pc}
 80172c4:	6860      	ldr	r0, [r4, #4]
 80172c6:	e7f4      	b.n	80172b2 <rcutils_string_array_fini+0x36>
 80172c8:	200b      	movs	r0, #11
 80172ca:	4770      	bx	lr

080172cc <rmw_get_zero_initialized_discovery_options>:
 80172cc:	b510      	push	{r4, lr}
 80172ce:	2220      	movs	r2, #32
 80172d0:	4604      	mov	r4, r0
 80172d2:	2100      	movs	r1, #0
 80172d4:	f002 fa80 	bl	80197d8 <memset>
 80172d8:	4620      	mov	r0, r4
 80172da:	bd10      	pop	{r4, pc}

080172dc <rmw_discovery_options_init>:
 80172dc:	b338      	cbz	r0, 801732e <rmw_discovery_options_init+0x52>
 80172de:	b570      	push	{r4, r5, r6, lr}
 80172e0:	4604      	mov	r4, r0
 80172e2:	4610      	mov	r0, r2
 80172e4:	460e      	mov	r6, r1
 80172e6:	4615      	mov	r5, r2
 80172e8:	f7f8 fb40 	bl	800f96c <rcutils_allocator_is_valid>
 80172ec:	b1d8      	cbz	r0, 8017326 <rmw_discovery_options_init+0x4a>
 80172ee:	68a3      	ldr	r3, [r4, #8]
 80172f0:	b9cb      	cbnz	r3, 8017326 <rmw_discovery_options_init+0x4a>
 80172f2:	6863      	ldr	r3, [r4, #4]
 80172f4:	b9bb      	cbnz	r3, 8017326 <rmw_discovery_options_init+0x4a>
 80172f6:	7823      	ldrb	r3, [r4, #0]
 80172f8:	b90b      	cbnz	r3, 80172fe <rmw_discovery_options_init+0x22>
 80172fa:	2302      	movs	r3, #2
 80172fc:	7023      	strb	r3, [r4, #0]
 80172fe:	b1a6      	cbz	r6, 801732a <rmw_discovery_options_init+0x4e>
 8017300:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8017304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017308:	4630      	mov	r0, r6
 801730a:	4798      	blx	r3
 801730c:	6060      	str	r0, [r4, #4]
 801730e:	b180      	cbz	r0, 8017332 <rmw_discovery_options_init+0x56>
 8017310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017312:	f104 0c0c 	add.w	ip, r4, #12
 8017316:	60a6      	str	r6, [r4, #8]
 8017318:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801731c:	682b      	ldr	r3, [r5, #0]
 801731e:	f8cc 3000 	str.w	r3, [ip]
 8017322:	2000      	movs	r0, #0
 8017324:	bd70      	pop	{r4, r5, r6, pc}
 8017326:	200b      	movs	r0, #11
 8017328:	bd70      	pop	{r4, r5, r6, pc}
 801732a:	4630      	mov	r0, r6
 801732c:	bd70      	pop	{r4, r5, r6, pc}
 801732e:	200b      	movs	r0, #11
 8017330:	4770      	bx	lr
 8017332:	200a      	movs	r0, #10
 8017334:	bd70      	pop	{r4, r5, r6, pc}
 8017336:	bf00      	nop

08017338 <on_status>:
 8017338:	b082      	sub	sp, #8
 801733a:	b002      	add	sp, #8
 801733c:	4770      	bx	lr
 801733e:	bf00      	nop

08017340 <on_topic>:
 8017340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017344:	4a22      	ldr	r2, [pc, #136]	@ (80173d0 <on_topic+0x90>)
 8017346:	b094      	sub	sp, #80	@ 0x50
 8017348:	6812      	ldr	r2, [r2, #0]
 801734a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801734c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017350:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017354:	b3c2      	cbz	r2, 80173c8 <on_topic+0x88>
 8017356:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801735a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801735e:	e001      	b.n	8017364 <on_topic+0x24>
 8017360:	6852      	ldr	r2, [r2, #4]
 8017362:	b38a      	cbz	r2, 80173c8 <on_topic+0x88>
 8017364:	6894      	ldr	r4, [r2, #8]
 8017366:	8aa3      	ldrh	r3, [r4, #20]
 8017368:	428b      	cmp	r3, r1
 801736a:	d1f9      	bne.n	8017360 <on_topic+0x20>
 801736c:	7da3      	ldrb	r3, [r4, #22]
 801736e:	4283      	cmp	r3, r0
 8017370:	d1f6      	bne.n	8017360 <on_topic+0x20>
 8017372:	2248      	movs	r2, #72	@ 0x48
 8017374:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017378:	4668      	mov	r0, sp
 801737a:	f002 fb0c 	bl	8019996 <memcpy>
 801737e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017382:	cb0c      	ldmia	r3, {r2, r3}
 8017384:	4620      	mov	r0, r4
 8017386:	f7fa fb19 	bl	80119bc <rmw_uxrce_get_static_input_buffer_for_entity>
 801738a:	4607      	mov	r7, r0
 801738c:	b1e0      	cbz	r0, 80173c8 <on_topic+0x88>
 801738e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017392:	4632      	mov	r2, r6
 8017394:	4628      	mov	r0, r5
 8017396:	f108 0110 	add.w	r1, r8, #16
 801739a:	f000 fa49 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 801739e:	b930      	cbnz	r0, 80173ae <on_topic+0x6e>
 80173a0:	480c      	ldr	r0, [pc, #48]	@ (80173d4 <on_topic+0x94>)
 80173a2:	4639      	mov	r1, r7
 80173a4:	b014      	add	sp, #80	@ 0x50
 80173a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173aa:	f000 b8bd 	b.w	8017528 <put_memory>
 80173ae:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80173b2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80173b6:	f000 f965 	bl	8017684 <rmw_uros_epoch_nanos>
 80173ba:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80173be:	2305      	movs	r3, #5
 80173c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80173c4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80173c8:	b014      	add	sp, #80	@ 0x50
 80173ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ce:	bf00      	nop
 80173d0:	20014604 	.word	0x20014604
 80173d4:	200145f4 	.word	0x200145f4

080173d8 <on_request>:
 80173d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173dc:	4823      	ldr	r0, [pc, #140]	@ (801746c <on_request+0x94>)
 80173de:	b094      	sub	sp, #80	@ 0x50
 80173e0:	6800      	ldr	r0, [r0, #0]
 80173e2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80173e4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80173e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d03b      	beq.n	8017466 <on_request+0x8e>
 80173ee:	461d      	mov	r5, r3
 80173f0:	e001      	b.n	80173f6 <on_request+0x1e>
 80173f2:	6840      	ldr	r0, [r0, #4]
 80173f4:	b3b8      	cbz	r0, 8017466 <on_request+0x8e>
 80173f6:	6884      	ldr	r4, [r0, #8]
 80173f8:	8b21      	ldrh	r1, [r4, #24]
 80173fa:	4291      	cmp	r1, r2
 80173fc:	d1f9      	bne.n	80173f2 <on_request+0x1a>
 80173fe:	2248      	movs	r2, #72	@ 0x48
 8017400:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017404:	4668      	mov	r0, sp
 8017406:	f002 fac6 	bl	8019996 <memcpy>
 801740a:	f104 0320 	add.w	r3, r4, #32
 801740e:	cb0c      	ldmia	r3, {r2, r3}
 8017410:	4620      	mov	r0, r4
 8017412:	f7fa fad3 	bl	80119bc <rmw_uxrce_get_static_input_buffer_for_entity>
 8017416:	4680      	mov	r8, r0
 8017418:	b328      	cbz	r0, 8017466 <on_request+0x8e>
 801741a:	4638      	mov	r0, r7
 801741c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017420:	4632      	mov	r2, r6
 8017422:	f107 0110 	add.w	r1, r7, #16
 8017426:	f000 fa03 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 801742a:	b930      	cbnz	r0, 801743a <on_request+0x62>
 801742c:	4810      	ldr	r0, [pc, #64]	@ (8017470 <on_request+0x98>)
 801742e:	4641      	mov	r1, r8
 8017430:	b014      	add	sp, #80	@ 0x50
 8017432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017436:	f000 b877 	b.w	8017528 <put_memory>
 801743a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801743c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017440:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017444:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801744c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017450:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017454:	f000 f916 	bl	8017684 <rmw_uros_epoch_nanos>
 8017458:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801745c:	2303      	movs	r3, #3
 801745e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017462:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017466:	b014      	add	sp, #80	@ 0x50
 8017468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801746c:	200145d4 	.word	0x200145d4
 8017470:	200145f4 	.word	0x200145f4

08017474 <on_reply>:
 8017474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017478:	4821      	ldr	r0, [pc, #132]	@ (8017500 <on_reply+0x8c>)
 801747a:	b094      	sub	sp, #80	@ 0x50
 801747c:	6800      	ldr	r0, [r0, #0]
 801747e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017480:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017484:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017486:	b3b8      	cbz	r0, 80174f8 <on_reply+0x84>
 8017488:	461d      	mov	r5, r3
 801748a:	e001      	b.n	8017490 <on_reply+0x1c>
 801748c:	6840      	ldr	r0, [r0, #4]
 801748e:	b398      	cbz	r0, 80174f8 <on_reply+0x84>
 8017490:	6884      	ldr	r4, [r0, #8]
 8017492:	8b21      	ldrh	r1, [r4, #24]
 8017494:	4291      	cmp	r1, r2
 8017496:	d1f9      	bne.n	801748c <on_reply+0x18>
 8017498:	2248      	movs	r2, #72	@ 0x48
 801749a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801749e:	4668      	mov	r0, sp
 80174a0:	f002 fa79 	bl	8019996 <memcpy>
 80174a4:	f104 0320 	add.w	r3, r4, #32
 80174a8:	cb0c      	ldmia	r3, {r2, r3}
 80174aa:	4620      	mov	r0, r4
 80174ac:	f7fa fa86 	bl	80119bc <rmw_uxrce_get_static_input_buffer_for_entity>
 80174b0:	4680      	mov	r8, r0
 80174b2:	b308      	cbz	r0, 80174f8 <on_reply+0x84>
 80174b4:	4638      	mov	r0, r7
 80174b6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80174ba:	4632      	mov	r2, r6
 80174bc:	f107 0110 	add.w	r1, r7, #16
 80174c0:	f000 f9b6 	bl	8017830 <ucdr_deserialize_array_uint8_t>
 80174c4:	b930      	cbnz	r0, 80174d4 <on_reply+0x60>
 80174c6:	480f      	ldr	r0, [pc, #60]	@ (8017504 <on_reply+0x90>)
 80174c8:	4641      	mov	r1, r8
 80174ca:	b014      	add	sp, #80	@ 0x50
 80174cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174d0:	f000 b82a 	b.w	8017528 <put_memory>
 80174d4:	2200      	movs	r2, #0
 80174d6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80174da:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80174de:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80174e2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80174e6:	f000 f8cd 	bl	8017684 <rmw_uros_epoch_nanos>
 80174ea:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80174ee:	2304      	movs	r3, #4
 80174f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80174f4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80174f8:	b014      	add	sp, #80	@ 0x50
 80174fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174fe:	bf00      	nop
 8017500:	2000fce8 	.word	0x2000fce8
 8017504:	200145f4 	.word	0x200145f4

08017508 <get_memory>:
 8017508:	4603      	mov	r3, r0
 801750a:	6840      	ldr	r0, [r0, #4]
 801750c:	b158      	cbz	r0, 8017526 <get_memory+0x1e>
 801750e:	6842      	ldr	r2, [r0, #4]
 8017510:	605a      	str	r2, [r3, #4]
 8017512:	b10a      	cbz	r2, 8017518 <get_memory+0x10>
 8017514:	2100      	movs	r1, #0
 8017516:	6011      	str	r1, [r2, #0]
 8017518:	681a      	ldr	r2, [r3, #0]
 801751a:	6042      	str	r2, [r0, #4]
 801751c:	b102      	cbz	r2, 8017520 <get_memory+0x18>
 801751e:	6010      	str	r0, [r2, #0]
 8017520:	2200      	movs	r2, #0
 8017522:	6002      	str	r2, [r0, #0]
 8017524:	6018      	str	r0, [r3, #0]
 8017526:	4770      	bx	lr

08017528 <put_memory>:
 8017528:	680b      	ldr	r3, [r1, #0]
 801752a:	b10b      	cbz	r3, 8017530 <put_memory+0x8>
 801752c:	684a      	ldr	r2, [r1, #4]
 801752e:	605a      	str	r2, [r3, #4]
 8017530:	684a      	ldr	r2, [r1, #4]
 8017532:	b102      	cbz	r2, 8017536 <put_memory+0xe>
 8017534:	6013      	str	r3, [r2, #0]
 8017536:	6803      	ldr	r3, [r0, #0]
 8017538:	428b      	cmp	r3, r1
 801753a:	6843      	ldr	r3, [r0, #4]
 801753c:	bf08      	it	eq
 801753e:	6002      	streq	r2, [r0, #0]
 8017540:	604b      	str	r3, [r1, #4]
 8017542:	b103      	cbz	r3, 8017546 <put_memory+0x1e>
 8017544:	6019      	str	r1, [r3, #0]
 8017546:	2300      	movs	r3, #0
 8017548:	600b      	str	r3, [r1, #0]
 801754a:	6041      	str	r1, [r0, #4]
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop

08017550 <rmw_create_guard_condition>:
 8017550:	b538      	push	{r3, r4, r5, lr}
 8017552:	4605      	mov	r5, r0
 8017554:	4807      	ldr	r0, [pc, #28]	@ (8017574 <rmw_create_guard_condition+0x24>)
 8017556:	f7ff ffd7 	bl	8017508 <get_memory>
 801755a:	b148      	cbz	r0, 8017570 <rmw_create_guard_condition+0x20>
 801755c:	6884      	ldr	r4, [r0, #8]
 801755e:	2300      	movs	r3, #0
 8017560:	7423      	strb	r3, [r4, #16]
 8017562:	61e5      	str	r5, [r4, #28]
 8017564:	f7f8 fe66 	bl	8010234 <rmw_get_implementation_identifier>
 8017568:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801756c:	f104 0014 	add.w	r0, r4, #20
 8017570:	bd38      	pop	{r3, r4, r5, pc}
 8017572:	bf00      	nop
 8017574:	20014594 	.word	0x20014594

08017578 <rmw_destroy_guard_condition>:
 8017578:	b508      	push	{r3, lr}
 801757a:	4b08      	ldr	r3, [pc, #32]	@ (801759c <rmw_destroy_guard_condition+0x24>)
 801757c:	6819      	ldr	r1, [r3, #0]
 801757e:	b911      	cbnz	r1, 8017586 <rmw_destroy_guard_condition+0xe>
 8017580:	e00a      	b.n	8017598 <rmw_destroy_guard_condition+0x20>
 8017582:	6849      	ldr	r1, [r1, #4]
 8017584:	b141      	cbz	r1, 8017598 <rmw_destroy_guard_condition+0x20>
 8017586:	688b      	ldr	r3, [r1, #8]
 8017588:	3314      	adds	r3, #20
 801758a:	4298      	cmp	r0, r3
 801758c:	d1f9      	bne.n	8017582 <rmw_destroy_guard_condition+0xa>
 801758e:	4803      	ldr	r0, [pc, #12]	@ (801759c <rmw_destroy_guard_condition+0x24>)
 8017590:	f7ff ffca 	bl	8017528 <put_memory>
 8017594:	2000      	movs	r0, #0
 8017596:	bd08      	pop	{r3, pc}
 8017598:	2001      	movs	r0, #1
 801759a:	bd08      	pop	{r3, pc}
 801759c:	20014594 	.word	0x20014594

080175a0 <create_topic>:
 80175a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175a4:	4605      	mov	r5, r0
 80175a6:	b084      	sub	sp, #16
 80175a8:	4822      	ldr	r0, [pc, #136]	@ (8017634 <create_topic+0x94>)
 80175aa:	460f      	mov	r7, r1
 80175ac:	4616      	mov	r6, r2
 80175ae:	f7ff ffab 	bl	8017508 <get_memory>
 80175b2:	4604      	mov	r4, r0
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d039      	beq.n	801762c <create_topic+0x8c>
 80175b8:	692b      	ldr	r3, [r5, #16]
 80175ba:	6884      	ldr	r4, [r0, #8]
 80175bc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801763c <create_topic+0x9c>
 80175c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80175c4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80175c8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80175cc:	1c42      	adds	r2, r0, #1
 80175ce:	2102      	movs	r1, #2
 80175d0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80175d4:	f7fb f9e0 	bl	8012998 <uxr_object_id>
 80175d8:	223c      	movs	r2, #60	@ 0x3c
 80175da:	6120      	str	r0, [r4, #16]
 80175dc:	4641      	mov	r1, r8
 80175de:	4638      	mov	r0, r7
 80175e0:	f7fa fb46 	bl	8011c70 <generate_topic_name>
 80175e4:	b1f0      	cbz	r0, 8017624 <create_topic+0x84>
 80175e6:	4f14      	ldr	r7, [pc, #80]	@ (8017638 <create_topic+0x98>)
 80175e8:	4630      	mov	r0, r6
 80175ea:	2264      	movs	r2, #100	@ 0x64
 80175ec:	4639      	mov	r1, r7
 80175ee:	f7fa fb0f 	bl	8011c10 <generate_type_name>
 80175f2:	b1b8      	cbz	r0, 8017624 <create_topic+0x84>
 80175f4:	6928      	ldr	r0, [r5, #16]
 80175f6:	2306      	movs	r3, #6
 80175f8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80175fc:	f8cd 8000 	str.w	r8, [sp]
 8017600:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017604:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017608:	6811      	ldr	r1, [r2, #0]
 801760a:	696b      	ldr	r3, [r5, #20]
 801760c:	6922      	ldr	r2, [r4, #16]
 801760e:	f7fa ff7d 	bl	801250c <uxr_buffer_create_topic_bin>
 8017612:	4602      	mov	r2, r0
 8017614:	6928      	ldr	r0, [r5, #16]
 8017616:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801761a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801761e:	f7fa fac1 	bl	8011ba4 <run_xrce_session>
 8017622:	b918      	cbnz	r0, 801762c <create_topic+0x8c>
 8017624:	4620      	mov	r0, r4
 8017626:	f7fa f9bd 	bl	80119a4 <rmw_uxrce_fini_topic_memory>
 801762a:	2400      	movs	r4, #0
 801762c:	4620      	mov	r0, r4
 801762e:	b004      	add	sp, #16
 8017630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017634:	20014614 	.word	0x20014614
 8017638:	200146a4 	.word	0x200146a4
 801763c:	20014668 	.word	0x20014668

08017640 <destroy_topic>:
 8017640:	b538      	push	{r3, r4, r5, lr}
 8017642:	6985      	ldr	r5, [r0, #24]
 8017644:	b1d5      	cbz	r5, 801767c <destroy_topic+0x3c>
 8017646:	4604      	mov	r4, r0
 8017648:	6928      	ldr	r0, [r5, #16]
 801764a:	6922      	ldr	r2, [r4, #16]
 801764c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017650:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017654:	6819      	ldr	r1, [r3, #0]
 8017656:	f7fa fedb 	bl	8012410 <uxr_buffer_delete_entity>
 801765a:	4602      	mov	r2, r0
 801765c:	6928      	ldr	r0, [r5, #16]
 801765e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017662:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017666:	f7fa fa9d 	bl	8011ba4 <run_xrce_session>
 801766a:	2800      	cmp	r0, #0
 801766c:	4620      	mov	r0, r4
 801766e:	bf14      	ite	ne
 8017670:	2400      	movne	r4, #0
 8017672:	2402      	moveq	r4, #2
 8017674:	f7fa f996 	bl	80119a4 <rmw_uxrce_fini_topic_memory>
 8017678:	4620      	mov	r0, r4
 801767a:	bd38      	pop	{r3, r4, r5, pc}
 801767c:	2401      	movs	r4, #1
 801767e:	4620      	mov	r0, r4
 8017680:	bd38      	pop	{r3, r4, r5, pc}
 8017682:	bf00      	nop

08017684 <rmw_uros_epoch_nanos>:
 8017684:	4b05      	ldr	r3, [pc, #20]	@ (801769c <rmw_uros_epoch_nanos+0x18>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	b123      	cbz	r3, 8017694 <rmw_uros_epoch_nanos+0x10>
 801768a:	6898      	ldr	r0, [r3, #8]
 801768c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017690:	f7fb bbf8 	b.w	8012e84 <uxr_epoch_nanos>
 8017694:	2000      	movs	r0, #0
 8017696:	2100      	movs	r1, #0
 8017698:	4770      	bx	lr
 801769a:	bf00      	nop
 801769c:	200145e4 	.word	0x200145e4

080176a0 <ucdr_serialize_endian_array_char>:
 80176a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a4:	4619      	mov	r1, r3
 80176a6:	461f      	mov	r7, r3
 80176a8:	4605      	mov	r5, r0
 80176aa:	4690      	mov	r8, r2
 80176ac:	f7f4 fee6 	bl	800c47c <ucdr_check_buffer_available_for>
 80176b0:	b9e0      	cbnz	r0, 80176ec <ucdr_serialize_endian_array_char+0x4c>
 80176b2:	463e      	mov	r6, r7
 80176b4:	e009      	b.n	80176ca <ucdr_serialize_endian_array_char+0x2a>
 80176b6:	68a8      	ldr	r0, [r5, #8]
 80176b8:	f002 f96d 	bl	8019996 <memcpy>
 80176bc:	68ab      	ldr	r3, [r5, #8]
 80176be:	6928      	ldr	r0, [r5, #16]
 80176c0:	4423      	add	r3, r4
 80176c2:	4420      	add	r0, r4
 80176c4:	1b36      	subs	r6, r6, r4
 80176c6:	60ab      	str	r3, [r5, #8]
 80176c8:	6128      	str	r0, [r5, #16]
 80176ca:	4631      	mov	r1, r6
 80176cc:	2201      	movs	r2, #1
 80176ce:	4628      	mov	r0, r5
 80176d0:	f7f4 ff5c 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 80176d4:	1bb9      	subs	r1, r7, r6
 80176d6:	4441      	add	r1, r8
 80176d8:	4604      	mov	r4, r0
 80176da:	4602      	mov	r2, r0
 80176dc:	2800      	cmp	r0, #0
 80176de:	d1ea      	bne.n	80176b6 <ucdr_serialize_endian_array_char+0x16>
 80176e0:	2301      	movs	r3, #1
 80176e2:	7da8      	ldrb	r0, [r5, #22]
 80176e4:	756b      	strb	r3, [r5, #21]
 80176e6:	4058      	eors	r0, r3
 80176e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ec:	463a      	mov	r2, r7
 80176ee:	68a8      	ldr	r0, [r5, #8]
 80176f0:	4641      	mov	r1, r8
 80176f2:	f002 f950 	bl	8019996 <memcpy>
 80176f6:	68aa      	ldr	r2, [r5, #8]
 80176f8:	692b      	ldr	r3, [r5, #16]
 80176fa:	443a      	add	r2, r7
 80176fc:	443b      	add	r3, r7
 80176fe:	60aa      	str	r2, [r5, #8]
 8017700:	612b      	str	r3, [r5, #16]
 8017702:	e7ed      	b.n	80176e0 <ucdr_serialize_endian_array_char+0x40>

08017704 <ucdr_deserialize_endian_array_char>:
 8017704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017708:	4619      	mov	r1, r3
 801770a:	461f      	mov	r7, r3
 801770c:	4605      	mov	r5, r0
 801770e:	4690      	mov	r8, r2
 8017710:	f7f4 feb4 	bl	800c47c <ucdr_check_buffer_available_for>
 8017714:	b9e0      	cbnz	r0, 8017750 <ucdr_deserialize_endian_array_char+0x4c>
 8017716:	463e      	mov	r6, r7
 8017718:	e009      	b.n	801772e <ucdr_deserialize_endian_array_char+0x2a>
 801771a:	68a9      	ldr	r1, [r5, #8]
 801771c:	f002 f93b 	bl	8019996 <memcpy>
 8017720:	68ab      	ldr	r3, [r5, #8]
 8017722:	6928      	ldr	r0, [r5, #16]
 8017724:	4423      	add	r3, r4
 8017726:	4420      	add	r0, r4
 8017728:	1b36      	subs	r6, r6, r4
 801772a:	60ab      	str	r3, [r5, #8]
 801772c:	6128      	str	r0, [r5, #16]
 801772e:	2201      	movs	r2, #1
 8017730:	4631      	mov	r1, r6
 8017732:	4628      	mov	r0, r5
 8017734:	f7f4 ff2a 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8017738:	4604      	mov	r4, r0
 801773a:	1bb8      	subs	r0, r7, r6
 801773c:	4440      	add	r0, r8
 801773e:	4622      	mov	r2, r4
 8017740:	2c00      	cmp	r4, #0
 8017742:	d1ea      	bne.n	801771a <ucdr_deserialize_endian_array_char+0x16>
 8017744:	2301      	movs	r3, #1
 8017746:	7da8      	ldrb	r0, [r5, #22]
 8017748:	756b      	strb	r3, [r5, #21]
 801774a:	4058      	eors	r0, r3
 801774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017750:	463a      	mov	r2, r7
 8017752:	68a9      	ldr	r1, [r5, #8]
 8017754:	4640      	mov	r0, r8
 8017756:	f002 f91e 	bl	8019996 <memcpy>
 801775a:	68aa      	ldr	r2, [r5, #8]
 801775c:	692b      	ldr	r3, [r5, #16]
 801775e:	443a      	add	r2, r7
 8017760:	443b      	add	r3, r7
 8017762:	60aa      	str	r2, [r5, #8]
 8017764:	612b      	str	r3, [r5, #16]
 8017766:	e7ed      	b.n	8017744 <ucdr_deserialize_endian_array_char+0x40>

08017768 <ucdr_serialize_array_uint8_t>:
 8017768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801776c:	4688      	mov	r8, r1
 801776e:	4611      	mov	r1, r2
 8017770:	4617      	mov	r7, r2
 8017772:	4605      	mov	r5, r0
 8017774:	f7f4 fe82 	bl	800c47c <ucdr_check_buffer_available_for>
 8017778:	b9e0      	cbnz	r0, 80177b4 <ucdr_serialize_array_uint8_t+0x4c>
 801777a:	463e      	mov	r6, r7
 801777c:	e009      	b.n	8017792 <ucdr_serialize_array_uint8_t+0x2a>
 801777e:	68a8      	ldr	r0, [r5, #8]
 8017780:	f002 f909 	bl	8019996 <memcpy>
 8017784:	68aa      	ldr	r2, [r5, #8]
 8017786:	692b      	ldr	r3, [r5, #16]
 8017788:	4422      	add	r2, r4
 801778a:	4423      	add	r3, r4
 801778c:	1b36      	subs	r6, r6, r4
 801778e:	60aa      	str	r2, [r5, #8]
 8017790:	612b      	str	r3, [r5, #16]
 8017792:	4631      	mov	r1, r6
 8017794:	2201      	movs	r2, #1
 8017796:	4628      	mov	r0, r5
 8017798:	f7f4 fef8 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 801779c:	1bb9      	subs	r1, r7, r6
 801779e:	4441      	add	r1, r8
 80177a0:	4604      	mov	r4, r0
 80177a2:	4602      	mov	r2, r0
 80177a4:	2800      	cmp	r0, #0
 80177a6:	d1ea      	bne.n	801777e <ucdr_serialize_array_uint8_t+0x16>
 80177a8:	2301      	movs	r3, #1
 80177aa:	7da8      	ldrb	r0, [r5, #22]
 80177ac:	756b      	strb	r3, [r5, #21]
 80177ae:	4058      	eors	r0, r3
 80177b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b4:	463a      	mov	r2, r7
 80177b6:	68a8      	ldr	r0, [r5, #8]
 80177b8:	4641      	mov	r1, r8
 80177ba:	f002 f8ec 	bl	8019996 <memcpy>
 80177be:	68aa      	ldr	r2, [r5, #8]
 80177c0:	692b      	ldr	r3, [r5, #16]
 80177c2:	443a      	add	r2, r7
 80177c4:	443b      	add	r3, r7
 80177c6:	60aa      	str	r2, [r5, #8]
 80177c8:	612b      	str	r3, [r5, #16]
 80177ca:	e7ed      	b.n	80177a8 <ucdr_serialize_array_uint8_t+0x40>

080177cc <ucdr_serialize_endian_array_uint8_t>:
 80177cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d0:	4619      	mov	r1, r3
 80177d2:	461f      	mov	r7, r3
 80177d4:	4605      	mov	r5, r0
 80177d6:	4690      	mov	r8, r2
 80177d8:	f7f4 fe50 	bl	800c47c <ucdr_check_buffer_available_for>
 80177dc:	b9e0      	cbnz	r0, 8017818 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80177de:	463e      	mov	r6, r7
 80177e0:	e009      	b.n	80177f6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80177e2:	68a8      	ldr	r0, [r5, #8]
 80177e4:	f002 f8d7 	bl	8019996 <memcpy>
 80177e8:	68ab      	ldr	r3, [r5, #8]
 80177ea:	6928      	ldr	r0, [r5, #16]
 80177ec:	4423      	add	r3, r4
 80177ee:	4420      	add	r0, r4
 80177f0:	1b36      	subs	r6, r6, r4
 80177f2:	60ab      	str	r3, [r5, #8]
 80177f4:	6128      	str	r0, [r5, #16]
 80177f6:	4631      	mov	r1, r6
 80177f8:	2201      	movs	r2, #1
 80177fa:	4628      	mov	r0, r5
 80177fc:	f7f4 fec6 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8017800:	1bb9      	subs	r1, r7, r6
 8017802:	4441      	add	r1, r8
 8017804:	4604      	mov	r4, r0
 8017806:	4602      	mov	r2, r0
 8017808:	2800      	cmp	r0, #0
 801780a:	d1ea      	bne.n	80177e2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801780c:	2301      	movs	r3, #1
 801780e:	7da8      	ldrb	r0, [r5, #22]
 8017810:	756b      	strb	r3, [r5, #21]
 8017812:	4058      	eors	r0, r3
 8017814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017818:	463a      	mov	r2, r7
 801781a:	68a8      	ldr	r0, [r5, #8]
 801781c:	4641      	mov	r1, r8
 801781e:	f002 f8ba 	bl	8019996 <memcpy>
 8017822:	68aa      	ldr	r2, [r5, #8]
 8017824:	692b      	ldr	r3, [r5, #16]
 8017826:	443a      	add	r2, r7
 8017828:	443b      	add	r3, r7
 801782a:	60aa      	str	r2, [r5, #8]
 801782c:	612b      	str	r3, [r5, #16]
 801782e:	e7ed      	b.n	801780c <ucdr_serialize_endian_array_uint8_t+0x40>

08017830 <ucdr_deserialize_array_uint8_t>:
 8017830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017834:	4688      	mov	r8, r1
 8017836:	4611      	mov	r1, r2
 8017838:	4617      	mov	r7, r2
 801783a:	4605      	mov	r5, r0
 801783c:	f7f4 fe1e 	bl	800c47c <ucdr_check_buffer_available_for>
 8017840:	b9e0      	cbnz	r0, 801787c <ucdr_deserialize_array_uint8_t+0x4c>
 8017842:	463e      	mov	r6, r7
 8017844:	e009      	b.n	801785a <ucdr_deserialize_array_uint8_t+0x2a>
 8017846:	68a9      	ldr	r1, [r5, #8]
 8017848:	f002 f8a5 	bl	8019996 <memcpy>
 801784c:	68aa      	ldr	r2, [r5, #8]
 801784e:	692b      	ldr	r3, [r5, #16]
 8017850:	4422      	add	r2, r4
 8017852:	4423      	add	r3, r4
 8017854:	1b36      	subs	r6, r6, r4
 8017856:	60aa      	str	r2, [r5, #8]
 8017858:	612b      	str	r3, [r5, #16]
 801785a:	2201      	movs	r2, #1
 801785c:	4631      	mov	r1, r6
 801785e:	4628      	mov	r0, r5
 8017860:	f7f4 fe94 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 8017864:	4604      	mov	r4, r0
 8017866:	1bb8      	subs	r0, r7, r6
 8017868:	4440      	add	r0, r8
 801786a:	4622      	mov	r2, r4
 801786c:	2c00      	cmp	r4, #0
 801786e:	d1ea      	bne.n	8017846 <ucdr_deserialize_array_uint8_t+0x16>
 8017870:	2301      	movs	r3, #1
 8017872:	7da8      	ldrb	r0, [r5, #22]
 8017874:	756b      	strb	r3, [r5, #21]
 8017876:	4058      	eors	r0, r3
 8017878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801787c:	463a      	mov	r2, r7
 801787e:	68a9      	ldr	r1, [r5, #8]
 8017880:	4640      	mov	r0, r8
 8017882:	f002 f888 	bl	8019996 <memcpy>
 8017886:	68aa      	ldr	r2, [r5, #8]
 8017888:	692b      	ldr	r3, [r5, #16]
 801788a:	443a      	add	r2, r7
 801788c:	443b      	add	r3, r7
 801788e:	60aa      	str	r2, [r5, #8]
 8017890:	612b      	str	r3, [r5, #16]
 8017892:	e7ed      	b.n	8017870 <ucdr_deserialize_array_uint8_t+0x40>

08017894 <ucdr_deserialize_endian_array_uint8_t>:
 8017894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017898:	4619      	mov	r1, r3
 801789a:	461f      	mov	r7, r3
 801789c:	4605      	mov	r5, r0
 801789e:	4690      	mov	r8, r2
 80178a0:	f7f4 fdec 	bl	800c47c <ucdr_check_buffer_available_for>
 80178a4:	b9e0      	cbnz	r0, 80178e0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80178a6:	463e      	mov	r6, r7
 80178a8:	e009      	b.n	80178be <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80178aa:	68a9      	ldr	r1, [r5, #8]
 80178ac:	f002 f873 	bl	8019996 <memcpy>
 80178b0:	68ab      	ldr	r3, [r5, #8]
 80178b2:	6928      	ldr	r0, [r5, #16]
 80178b4:	4423      	add	r3, r4
 80178b6:	4420      	add	r0, r4
 80178b8:	1b36      	subs	r6, r6, r4
 80178ba:	60ab      	str	r3, [r5, #8]
 80178bc:	6128      	str	r0, [r5, #16]
 80178be:	2201      	movs	r2, #1
 80178c0:	4631      	mov	r1, r6
 80178c2:	4628      	mov	r0, r5
 80178c4:	f7f4 fe62 	bl	800c58c <ucdr_check_final_buffer_behavior_array>
 80178c8:	4604      	mov	r4, r0
 80178ca:	1bb8      	subs	r0, r7, r6
 80178cc:	4440      	add	r0, r8
 80178ce:	4622      	mov	r2, r4
 80178d0:	2c00      	cmp	r4, #0
 80178d2:	d1ea      	bne.n	80178aa <ucdr_deserialize_endian_array_uint8_t+0x16>
 80178d4:	2301      	movs	r3, #1
 80178d6:	7da8      	ldrb	r0, [r5, #22]
 80178d8:	756b      	strb	r3, [r5, #21]
 80178da:	4058      	eors	r0, r3
 80178dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178e0:	463a      	mov	r2, r7
 80178e2:	68a9      	ldr	r1, [r5, #8]
 80178e4:	4640      	mov	r0, r8
 80178e6:	f002 f856 	bl	8019996 <memcpy>
 80178ea:	68aa      	ldr	r2, [r5, #8]
 80178ec:	692b      	ldr	r3, [r5, #16]
 80178ee:	443a      	add	r2, r7
 80178f0:	443b      	add	r3, r7
 80178f2:	60aa      	str	r2, [r5, #8]
 80178f4:	612b      	str	r3, [r5, #16]
 80178f6:	e7ed      	b.n	80178d4 <ucdr_deserialize_endian_array_uint8_t+0x40>

080178f8 <ucdr_serialize_string>:
 80178f8:	b510      	push	{r4, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	4604      	mov	r4, r0
 80178fe:	4608      	mov	r0, r1
 8017900:	9101      	str	r1, [sp, #4]
 8017902:	f7e8 fcc5 	bl	8000290 <strlen>
 8017906:	9901      	ldr	r1, [sp, #4]
 8017908:	1c42      	adds	r2, r0, #1
 801790a:	4620      	mov	r0, r4
 801790c:	b002      	add	sp, #8
 801790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017912:	f7fa bd25 	b.w	8012360 <ucdr_serialize_sequence_char>
 8017916:	bf00      	nop

08017918 <ucdr_deserialize_string>:
 8017918:	b500      	push	{lr}
 801791a:	b083      	sub	sp, #12
 801791c:	ab01      	add	r3, sp, #4
 801791e:	f7fa fd31 	bl	8012384 <ucdr_deserialize_sequence_char>
 8017922:	b003      	add	sp, #12
 8017924:	f85d fb04 	ldr.w	pc, [sp], #4

08017928 <uxr_init_input_best_effort_stream>:
 8017928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801792c:	8003      	strh	r3, [r0, #0]
 801792e:	4770      	bx	lr

08017930 <uxr_reset_input_best_effort_stream>:
 8017930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017934:	8003      	strh	r3, [r0, #0]
 8017936:	4770      	bx	lr

08017938 <uxr_receive_best_effort_message>:
 8017938:	b538      	push	{r3, r4, r5, lr}
 801793a:	4604      	mov	r4, r0
 801793c:	8800      	ldrh	r0, [r0, #0]
 801793e:	460d      	mov	r5, r1
 8017940:	f000 fd42 	bl	80183c8 <uxr_seq_num_cmp>
 8017944:	4603      	mov	r3, r0
 8017946:	2b00      	cmp	r3, #0
 8017948:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801794c:	bfb8      	it	lt
 801794e:	8025      	strhlt	r5, [r4, #0]
 8017950:	bd38      	pop	{r3, r4, r5, pc}
 8017952:	bf00      	nop

08017954 <on_full_input_buffer>:
 8017954:	b570      	push	{r4, r5, r6, lr}
 8017956:	4605      	mov	r5, r0
 8017958:	460c      	mov	r4, r1
 801795a:	682b      	ldr	r3, [r5, #0]
 801795c:	6809      	ldr	r1, [r1, #0]
 801795e:	8920      	ldrh	r0, [r4, #8]
 8017960:	6862      	ldr	r2, [r4, #4]
 8017962:	fbb2 f2f0 	udiv	r2, r2, r0
 8017966:	eba3 0c01 	sub.w	ip, r3, r1
 801796a:	fbbc fcf2 	udiv	ip, ip, r2
 801796e:	f10c 0c01 	add.w	ip, ip, #1
 8017972:	fa1f f38c 	uxth.w	r3, ip
 8017976:	fbb3 f6f0 	udiv	r6, r3, r0
 801797a:	fb00 3316 	mls	r3, r0, r6, r3
 801797e:	b29b      	uxth	r3, r3
 8017980:	fb02 f303 	mul.w	r3, r2, r3
 8017984:	1d18      	adds	r0, r3, #4
 8017986:	4408      	add	r0, r1
 8017988:	7d26      	ldrb	r6, [r4, #20]
 801798a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801798e:	b116      	cbz	r6, 8017996 <on_full_input_buffer+0x42>
 8017990:	2600      	movs	r6, #0
 8017992:	f840 6c04 	str.w	r6, [r0, #-4]
 8017996:	2a03      	cmp	r2, #3
 8017998:	d801      	bhi.n	801799e <on_full_input_buffer+0x4a>
 801799a:	2001      	movs	r0, #1
 801799c:	bd70      	pop	{r4, r5, r6, pc}
 801799e:	3308      	adds	r3, #8
 80179a0:	4419      	add	r1, r3
 80179a2:	4628      	mov	r0, r5
 80179a4:	692b      	ldr	r3, [r5, #16]
 80179a6:	3a04      	subs	r2, #4
 80179a8:	f7f4 fdb4 	bl	800c514 <ucdr_init_buffer_origin>
 80179ac:	4628      	mov	r0, r5
 80179ae:	4903      	ldr	r1, [pc, #12]	@ (80179bc <on_full_input_buffer+0x68>)
 80179b0:	4622      	mov	r2, r4
 80179b2:	f7f4 fd8b 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 80179b6:	2000      	movs	r0, #0
 80179b8:	bd70      	pop	{r4, r5, r6, pc}
 80179ba:	bf00      	nop
 80179bc:	08017955 	.word	0x08017955

080179c0 <uxr_init_input_reliable_stream>:
 80179c0:	b500      	push	{lr}
 80179c2:	e9c0 1200 	strd	r1, r2, [r0]
 80179c6:	f04f 0e00 	mov.w	lr, #0
 80179ca:	9a01      	ldr	r2, [sp, #4]
 80179cc:	8103      	strh	r3, [r0, #8]
 80179ce:	6102      	str	r2, [r0, #16]
 80179d0:	f880 e014 	strb.w	lr, [r0, #20]
 80179d4:	b1d3      	cbz	r3, 8017a0c <uxr_init_input_reliable_stream+0x4c>
 80179d6:	f8c1 e000 	str.w	lr, [r1]
 80179da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80179de:	f1bc 0f01 	cmp.w	ip, #1
 80179e2:	d913      	bls.n	8017a0c <uxr_init_input_reliable_stream+0x4c>
 80179e4:	2301      	movs	r3, #1
 80179e6:	fbb3 f1fc 	udiv	r1, r3, ip
 80179ea:	fb0c 3111 	mls	r1, ip, r1, r3
 80179ee:	b289      	uxth	r1, r1
 80179f0:	6842      	ldr	r2, [r0, #4]
 80179f2:	fbb2 f2fc 	udiv	r2, r2, ip
 80179f6:	fb01 f202 	mul.w	r2, r1, r2
 80179fa:	6801      	ldr	r1, [r0, #0]
 80179fc:	f841 e002 	str.w	lr, [r1, r2]
 8017a00:	3301      	adds	r3, #1
 8017a02:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	459c      	cmp	ip, r3
 8017a0a:	d8ec      	bhi.n	80179e6 <uxr_init_input_reliable_stream+0x26>
 8017a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a10:	60c3      	str	r3, [r0, #12]
 8017a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a16:	bf00      	nop

08017a18 <uxr_reset_input_reliable_stream>:
 8017a18:	8901      	ldrh	r1, [r0, #8]
 8017a1a:	b1e9      	cbz	r1, 8017a58 <uxr_reset_input_reliable_stream+0x40>
 8017a1c:	f04f 0c00 	mov.w	ip, #0
 8017a20:	b500      	push	{lr}
 8017a22:	4663      	mov	r3, ip
 8017a24:	46e6      	mov	lr, ip
 8017a26:	fbb3 f2f1 	udiv	r2, r3, r1
 8017a2a:	fb01 3312 	mls	r3, r1, r2, r3
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	6842      	ldr	r2, [r0, #4]
 8017a32:	fbb2 f2f1 	udiv	r2, r2, r1
 8017a36:	fb02 f303 	mul.w	r3, r2, r3
 8017a3a:	6802      	ldr	r2, [r0, #0]
 8017a3c:	f842 e003 	str.w	lr, [r2, r3]
 8017a40:	f10c 0c01 	add.w	ip, ip, #1
 8017a44:	8901      	ldrh	r1, [r0, #8]
 8017a46:	fa1f f38c 	uxth.w	r3, ip
 8017a4a:	4299      	cmp	r1, r3
 8017a4c:	d8eb      	bhi.n	8017a26 <uxr_reset_input_reliable_stream+0xe>
 8017a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a52:	60c3      	str	r3, [r0, #12]
 8017a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a58:	f04f 33ff 	mov.w	r3, #4294967295
 8017a5c:	60c3      	str	r3, [r0, #12]
 8017a5e:	4770      	bx	lr

08017a60 <uxr_receive_reliable_message>:
 8017a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a64:	4604      	mov	r4, r0
 8017a66:	460d      	mov	r5, r1
 8017a68:	8901      	ldrh	r1, [r0, #8]
 8017a6a:	8980      	ldrh	r0, [r0, #12]
 8017a6c:	4690      	mov	r8, r2
 8017a6e:	461f      	mov	r7, r3
 8017a70:	f000 fca2 	bl	80183b8 <uxr_seq_num_add>
 8017a74:	4629      	mov	r1, r5
 8017a76:	4606      	mov	r6, r0
 8017a78:	89a0      	ldrh	r0, [r4, #12]
 8017a7a:	f000 fca5 	bl	80183c8 <uxr_seq_num_cmp>
 8017a7e:	2800      	cmp	r0, #0
 8017a80:	db0a      	blt.n	8017a98 <uxr_receive_reliable_message+0x38>
 8017a82:	2600      	movs	r6, #0
 8017a84:	89e0      	ldrh	r0, [r4, #14]
 8017a86:	4629      	mov	r1, r5
 8017a88:	f000 fc9e 	bl	80183c8 <uxr_seq_num_cmp>
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	da00      	bge.n	8017a92 <uxr_receive_reliable_message+0x32>
 8017a90:	81e5      	strh	r5, [r4, #14]
 8017a92:	4630      	mov	r0, r6
 8017a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a98:	4630      	mov	r0, r6
 8017a9a:	4629      	mov	r1, r5
 8017a9c:	f000 fc94 	bl	80183c8 <uxr_seq_num_cmp>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	dbee      	blt.n	8017a82 <uxr_receive_reliable_message+0x22>
 8017aa4:	6923      	ldr	r3, [r4, #16]
 8017aa6:	4640      	mov	r0, r8
 8017aa8:	4798      	blx	r3
 8017aaa:	2101      	movs	r1, #1
 8017aac:	4681      	mov	r9, r0
 8017aae:	89a0      	ldrh	r0, [r4, #12]
 8017ab0:	f000 fc82 	bl	80183b8 <uxr_seq_num_add>
 8017ab4:	f1b9 0f00 	cmp.w	r9, #0
 8017ab8:	d101      	bne.n	8017abe <uxr_receive_reliable_message+0x5e>
 8017aba:	4285      	cmp	r5, r0
 8017abc:	d047      	beq.n	8017b4e <uxr_receive_reliable_message+0xee>
 8017abe:	8922      	ldrh	r2, [r4, #8]
 8017ac0:	fbb5 f0f2 	udiv	r0, r5, r2
 8017ac4:	fb02 5010 	mls	r0, r2, r0, r5
 8017ac8:	b280      	uxth	r0, r0
 8017aca:	6863      	ldr	r3, [r4, #4]
 8017acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ad0:	fb00 f303 	mul.w	r3, r0, r3
 8017ad4:	6820      	ldr	r0, [r4, #0]
 8017ad6:	3304      	adds	r3, #4
 8017ad8:	4418      	add	r0, r3
 8017ada:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d1cf      	bne.n	8017a82 <uxr_receive_reliable_message+0x22>
 8017ae2:	4641      	mov	r1, r8
 8017ae4:	463a      	mov	r2, r7
 8017ae6:	f001 ff56 	bl	8019996 <memcpy>
 8017aea:	8921      	ldrh	r1, [r4, #8]
 8017aec:	fbb5 f2f1 	udiv	r2, r5, r1
 8017af0:	fb01 5212 	mls	r2, r1, r2, r5
 8017af4:	b292      	uxth	r2, r2
 8017af6:	6863      	ldr	r3, [r4, #4]
 8017af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017afc:	fb02 f303 	mul.w	r3, r2, r3
 8017b00:	6822      	ldr	r2, [r4, #0]
 8017b02:	50d7      	str	r7, [r2, r3]
 8017b04:	9a08      	ldr	r2, [sp, #32]
 8017b06:	2301      	movs	r3, #1
 8017b08:	7013      	strb	r3, [r2, #0]
 8017b0a:	f1b9 0f00 	cmp.w	r9, #0
 8017b0e:	d0b8      	beq.n	8017a82 <uxr_receive_reliable_message+0x22>
 8017b10:	89a6      	ldrh	r6, [r4, #12]
 8017b12:	4630      	mov	r0, r6
 8017b14:	2101      	movs	r1, #1
 8017b16:	f000 fc4f 	bl	80183b8 <uxr_seq_num_add>
 8017b1a:	8922      	ldrh	r2, [r4, #8]
 8017b1c:	6863      	ldr	r3, [r4, #4]
 8017b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b22:	4606      	mov	r6, r0
 8017b24:	fbb0 f0f2 	udiv	r0, r0, r2
 8017b28:	fb02 6010 	mls	r0, r2, r0, r6
 8017b2c:	b280      	uxth	r0, r0
 8017b2e:	fb00 f303 	mul.w	r3, r0, r3
 8017b32:	6820      	ldr	r0, [r4, #0]
 8017b34:	3304      	adds	r3, #4
 8017b36:	4418      	add	r0, r3
 8017b38:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d0a0      	beq.n	8017a82 <uxr_receive_reliable_message+0x22>
 8017b40:	6923      	ldr	r3, [r4, #16]
 8017b42:	4798      	blx	r3
 8017b44:	2802      	cmp	r0, #2
 8017b46:	d008      	beq.n	8017b5a <uxr_receive_reliable_message+0xfa>
 8017b48:	2801      	cmp	r0, #1
 8017b4a:	d0e2      	beq.n	8017b12 <uxr_receive_reliable_message+0xb2>
 8017b4c:	e799      	b.n	8017a82 <uxr_receive_reliable_message+0x22>
 8017b4e:	9b08      	ldr	r3, [sp, #32]
 8017b50:	81a5      	strh	r5, [r4, #12]
 8017b52:	2601      	movs	r6, #1
 8017b54:	f883 9000 	strb.w	r9, [r3]
 8017b58:	e794      	b.n	8017a84 <uxr_receive_reliable_message+0x24>
 8017b5a:	2601      	movs	r6, #1
 8017b5c:	e792      	b.n	8017a84 <uxr_receive_reliable_message+0x24>
 8017b5e:	bf00      	nop

08017b60 <uxr_next_input_reliable_buffer_available>:
 8017b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b64:	4604      	mov	r4, r0
 8017b66:	460f      	mov	r7, r1
 8017b68:	8980      	ldrh	r0, [r0, #12]
 8017b6a:	2101      	movs	r1, #1
 8017b6c:	4690      	mov	r8, r2
 8017b6e:	f000 fc23 	bl	80183b8 <uxr_seq_num_add>
 8017b72:	8922      	ldrh	r2, [r4, #8]
 8017b74:	fbb0 f6f2 	udiv	r6, r0, r2
 8017b78:	fb02 0616 	mls	r6, r2, r6, r0
 8017b7c:	b2b6      	uxth	r6, r6
 8017b7e:	6863      	ldr	r3, [r4, #4]
 8017b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b84:	fb06 f303 	mul.w	r3, r6, r3
 8017b88:	6826      	ldr	r6, [r4, #0]
 8017b8a:	3304      	adds	r3, #4
 8017b8c:	441e      	add	r6, r3
 8017b8e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017b92:	f1b9 0f00 	cmp.w	r9, #0
 8017b96:	d023      	beq.n	8017be0 <uxr_next_input_reliable_buffer_available+0x80>
 8017b98:	6923      	ldr	r3, [r4, #16]
 8017b9a:	4605      	mov	r5, r0
 8017b9c:	4630      	mov	r0, r6
 8017b9e:	4798      	blx	r3
 8017ba0:	4682      	mov	sl, r0
 8017ba2:	b300      	cbz	r0, 8017be6 <uxr_next_input_reliable_buffer_available+0x86>
 8017ba4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017ba8:	2101      	movs	r1, #1
 8017baa:	4650      	mov	r0, sl
 8017bac:	f000 fc04 	bl	80183b8 <uxr_seq_num_add>
 8017bb0:	8921      	ldrh	r1, [r4, #8]
 8017bb2:	fbb0 f2f1 	udiv	r2, r0, r1
 8017bb6:	4682      	mov	sl, r0
 8017bb8:	fb01 0212 	mls	r2, r1, r2, r0
 8017bbc:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017bc0:	b292      	uxth	r2, r2
 8017bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017bc6:	fb02 f303 	mul.w	r3, r2, r3
 8017bca:	3304      	adds	r3, #4
 8017bcc:	4418      	add	r0, r3
 8017bce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017bd2:	b12b      	cbz	r3, 8017be0 <uxr_next_input_reliable_buffer_available+0x80>
 8017bd4:	6923      	ldr	r3, [r4, #16]
 8017bd6:	4798      	blx	r3
 8017bd8:	2802      	cmp	r0, #2
 8017bda:	d01b      	beq.n	8017c14 <uxr_next_input_reliable_buffer_available+0xb4>
 8017bdc:	2801      	cmp	r0, #1
 8017bde:	d0e3      	beq.n	8017ba8 <uxr_next_input_reliable_buffer_available+0x48>
 8017be0:	2000      	movs	r0, #0
 8017be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017be6:	464a      	mov	r2, r9
 8017be8:	4631      	mov	r1, r6
 8017bea:	4638      	mov	r0, r7
 8017bec:	f7f4 fc9a 	bl	800c524 <ucdr_init_buffer>
 8017bf0:	8921      	ldrh	r1, [r4, #8]
 8017bf2:	fbb5 f2f1 	udiv	r2, r5, r1
 8017bf6:	fb01 5212 	mls	r2, r1, r2, r5
 8017bfa:	b292      	uxth	r2, r2
 8017bfc:	6863      	ldr	r3, [r4, #4]
 8017bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c02:	fb02 f303 	mul.w	r3, r2, r3
 8017c06:	6822      	ldr	r2, [r4, #0]
 8017c08:	f842 a003 	str.w	sl, [r2, r3]
 8017c0c:	2001      	movs	r0, #1
 8017c0e:	81a5      	strh	r5, [r4, #12]
 8017c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c14:	8920      	ldrh	r0, [r4, #8]
 8017c16:	fbb5 f3f0 	udiv	r3, r5, r0
 8017c1a:	fb00 5513 	mls	r5, r0, r3, r5
 8017c1e:	b2ad      	uxth	r5, r5
 8017c20:	6863      	ldr	r3, [r4, #4]
 8017c22:	fbb3 f3f0 	udiv	r3, r3, r0
 8017c26:	fb03 f505 	mul.w	r5, r3, r5
 8017c2a:	6823      	ldr	r3, [r4, #0]
 8017c2c:	2000      	movs	r0, #0
 8017c2e:	5158      	str	r0, [r3, r5]
 8017c30:	eb06 0108 	add.w	r1, r6, r8
 8017c34:	eba9 0208 	sub.w	r2, r9, r8
 8017c38:	4638      	mov	r0, r7
 8017c3a:	f7f4 fc73 	bl	800c524 <ucdr_init_buffer>
 8017c3e:	4638      	mov	r0, r7
 8017c40:	4903      	ldr	r1, [pc, #12]	@ (8017c50 <uxr_next_input_reliable_buffer_available+0xf0>)
 8017c42:	4622      	mov	r2, r4
 8017c44:	f7f4 fc42 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8017c48:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017c4c:	2001      	movs	r0, #1
 8017c4e:	e7c8      	b.n	8017be2 <uxr_next_input_reliable_buffer_available+0x82>
 8017c50:	08017955 	.word	0x08017955

08017c54 <uxr_process_heartbeat>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4611      	mov	r1, r2
 8017c58:	4604      	mov	r4, r0
 8017c5a:	89c0      	ldrh	r0, [r0, #14]
 8017c5c:	4615      	mov	r5, r2
 8017c5e:	f000 fbb3 	bl	80183c8 <uxr_seq_num_cmp>
 8017c62:	2800      	cmp	r0, #0
 8017c64:	bfb8      	it	lt
 8017c66:	81e5      	strhlt	r5, [r4, #14]
 8017c68:	bd38      	pop	{r3, r4, r5, pc}
 8017c6a:	bf00      	nop

08017c6c <uxr_compute_acknack>:
 8017c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c70:	8903      	ldrh	r3, [r0, #8]
 8017c72:	8985      	ldrh	r5, [r0, #12]
 8017c74:	4604      	mov	r4, r0
 8017c76:	460e      	mov	r6, r1
 8017c78:	b1d3      	cbz	r3, 8017cb0 <uxr_compute_acknack+0x44>
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	2701      	movs	r7, #1
 8017c7e:	e003      	b.n	8017c88 <uxr_compute_acknack+0x1c>
 8017c80:	4567      	cmp	r7, ip
 8017c82:	d215      	bcs.n	8017cb0 <uxr_compute_acknack+0x44>
 8017c84:	89a0      	ldrh	r0, [r4, #12]
 8017c86:	3701      	adds	r7, #1
 8017c88:	b2b9      	uxth	r1, r7
 8017c8a:	f000 fb95 	bl	80183b8 <uxr_seq_num_add>
 8017c8e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017c92:	fbb0 f3fc 	udiv	r3, r0, ip
 8017c96:	fb0c 0313 	mls	r3, ip, r3, r0
 8017c9a:	b29a      	uxth	r2, r3
 8017c9c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017ca0:	fbb3 f3fc 	udiv	r3, r3, ip
 8017ca4:	fb02 f303 	mul.w	r3, r2, r3
 8017ca8:	58cb      	ldr	r3, [r1, r3]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d1e8      	bne.n	8017c80 <uxr_compute_acknack+0x14>
 8017cae:	4605      	mov	r5, r0
 8017cb0:	8035      	strh	r5, [r6, #0]
 8017cb2:	2101      	movs	r1, #1
 8017cb4:	4628      	mov	r0, r5
 8017cb6:	89e7      	ldrh	r7, [r4, #14]
 8017cb8:	f000 fb82 	bl	80183c0 <uxr_seq_num_sub>
 8017cbc:	4601      	mov	r1, r0
 8017cbe:	4638      	mov	r0, r7
 8017cc0:	f000 fb7e 	bl	80183c0 <uxr_seq_num_sub>
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	b318      	cbz	r0, 8017d10 <uxr_compute_acknack+0xa4>
 8017cc8:	f04f 0900 	mov.w	r9, #0
 8017ccc:	464f      	mov	r7, r9
 8017cce:	f04f 0801 	mov.w	r8, #1
 8017cd2:	fa1f f189 	uxth.w	r1, r9
 8017cd6:	8830      	ldrh	r0, [r6, #0]
 8017cd8:	f000 fb6e 	bl	80183b8 <uxr_seq_num_add>
 8017cdc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017ce0:	fbb0 f3fc 	udiv	r3, r0, ip
 8017ce4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017ce8:	fb03 001c 	mls	r0, r3, ip, r0
 8017cec:	b283      	uxth	r3, r0
 8017cee:	fbb2 f2fc 	udiv	r2, r2, ip
 8017cf2:	fb02 f303 	mul.w	r3, r2, r3
 8017cf6:	fa08 f209 	lsl.w	r2, r8, r9
 8017cfa:	58cb      	ldr	r3, [r1, r3]
 8017cfc:	f109 0901 	add.w	r9, r9, #1
 8017d00:	b90b      	cbnz	r3, 8017d06 <uxr_compute_acknack+0x9a>
 8017d02:	4317      	orrs	r7, r2
 8017d04:	b2bf      	uxth	r7, r7
 8017d06:	454d      	cmp	r5, r9
 8017d08:	d1e3      	bne.n	8017cd2 <uxr_compute_acknack+0x66>
 8017d0a:	4638      	mov	r0, r7
 8017d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d10:	4607      	mov	r7, r0
 8017d12:	4638      	mov	r0, r7
 8017d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017d18 <uxr_init_output_best_effort_stream>:
 8017d18:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017d1c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017d20:	6001      	str	r1, [r0, #0]
 8017d22:	7303      	strb	r3, [r0, #12]
 8017d24:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017d28:	4770      	bx	lr
 8017d2a:	bf00      	nop

08017d2c <uxr_reset_output_best_effort_stream>:
 8017d2c:	7b02      	ldrb	r2, [r0, #12]
 8017d2e:	6042      	str	r2, [r0, #4]
 8017d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d34:	81c3      	strh	r3, [r0, #14]
 8017d36:	4770      	bx	lr

08017d38 <uxr_prepare_best_effort_buffer_to_write>:
 8017d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d3a:	4604      	mov	r4, r0
 8017d3c:	b083      	sub	sp, #12
 8017d3e:	6840      	ldr	r0, [r0, #4]
 8017d40:	460d      	mov	r5, r1
 8017d42:	4616      	mov	r6, r2
 8017d44:	f7fc fe26 	bl	8014994 <uxr_submessage_padding>
 8017d48:	6863      	ldr	r3, [r4, #4]
 8017d4a:	4418      	add	r0, r3
 8017d4c:	68a3      	ldr	r3, [r4, #8]
 8017d4e:	1942      	adds	r2, r0, r5
 8017d50:	4293      	cmp	r3, r2
 8017d52:	bf2c      	ite	cs
 8017d54:	2701      	movcs	r7, #1
 8017d56:	2700      	movcc	r7, #0
 8017d58:	d202      	bcs.n	8017d60 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017d5a:	4638      	mov	r0, r7
 8017d5c:	b003      	add	sp, #12
 8017d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d60:	9000      	str	r0, [sp, #0]
 8017d62:	6821      	ldr	r1, [r4, #0]
 8017d64:	4630      	mov	r0, r6
 8017d66:	2300      	movs	r3, #0
 8017d68:	f7f4 fbca 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8017d6c:	6861      	ldr	r1, [r4, #4]
 8017d6e:	4638      	mov	r0, r7
 8017d70:	4429      	add	r1, r5
 8017d72:	6061      	str	r1, [r4, #4]
 8017d74:	b003      	add	sp, #12
 8017d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d78 <uxr_prepare_best_effort_buffer_to_send>:
 8017d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	461d      	mov	r5, r3
 8017d80:	6840      	ldr	r0, [r0, #4]
 8017d82:	7b23      	ldrb	r3, [r4, #12]
 8017d84:	4298      	cmp	r0, r3
 8017d86:	bf8c      	ite	hi
 8017d88:	2601      	movhi	r6, #1
 8017d8a:	2600      	movls	r6, #0
 8017d8c:	d802      	bhi.n	8017d94 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017d8e:	4630      	mov	r0, r6
 8017d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d94:	4688      	mov	r8, r1
 8017d96:	89e0      	ldrh	r0, [r4, #14]
 8017d98:	2101      	movs	r1, #1
 8017d9a:	4617      	mov	r7, r2
 8017d9c:	f000 fb0c 	bl	80183b8 <uxr_seq_num_add>
 8017da0:	6823      	ldr	r3, [r4, #0]
 8017da2:	81e0      	strh	r0, [r4, #14]
 8017da4:	8028      	strh	r0, [r5, #0]
 8017da6:	f8c8 3000 	str.w	r3, [r8]
 8017daa:	6863      	ldr	r3, [r4, #4]
 8017dac:	603b      	str	r3, [r7, #0]
 8017dae:	7b23      	ldrb	r3, [r4, #12]
 8017db0:	6063      	str	r3, [r4, #4]
 8017db2:	4630      	mov	r0, r6
 8017db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017db8 <on_full_output_buffer>:
 8017db8:	b538      	push	{r3, r4, r5, lr}
 8017dba:	6802      	ldr	r2, [r0, #0]
 8017dbc:	460c      	mov	r4, r1
 8017dbe:	6809      	ldr	r1, [r1, #0]
 8017dc0:	8923      	ldrh	r3, [r4, #8]
 8017dc2:	eba2 0c01 	sub.w	ip, r2, r1
 8017dc6:	6862      	ldr	r2, [r4, #4]
 8017dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8017dcc:	fbbc fcf2 	udiv	ip, ip, r2
 8017dd0:	f10c 0c01 	add.w	ip, ip, #1
 8017dd4:	fa1f fc8c 	uxth.w	ip, ip
 8017dd8:	fbbc fef3 	udiv	lr, ip, r3
 8017ddc:	fb03 c31e 	mls	r3, r3, lr, ip
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	fb02 f303 	mul.w	r3, r2, r3
 8017de6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017dea:	58ca      	ldr	r2, [r1, r3]
 8017dec:	4463      	add	r3, ip
 8017dee:	eba2 020c 	sub.w	r2, r2, ip
 8017df2:	3308      	adds	r3, #8
 8017df4:	4605      	mov	r5, r0
 8017df6:	4419      	add	r1, r3
 8017df8:	3a04      	subs	r2, #4
 8017dfa:	6903      	ldr	r3, [r0, #16]
 8017dfc:	f7f4 fb8a 	bl	800c514 <ucdr_init_buffer_origin>
 8017e00:	4628      	mov	r0, r5
 8017e02:	4903      	ldr	r1, [pc, #12]	@ (8017e10 <on_full_output_buffer+0x58>)
 8017e04:	4622      	mov	r2, r4
 8017e06:	f7f4 fb61 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 8017e0a:	2000      	movs	r0, #0
 8017e0c:	bd38      	pop	{r3, r4, r5, pc}
 8017e0e:	bf00      	nop
 8017e10:	08017db9 	.word	0x08017db9

08017e14 <uxr_init_output_reliable_stream>:
 8017e14:	b410      	push	{r4}
 8017e16:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017e1a:	8103      	strh	r3, [r0, #8]
 8017e1c:	e9c0 1200 	strd	r1, r2, [r0]
 8017e20:	f880 c00c 	strb.w	ip, [r0, #12]
 8017e24:	b1d3      	cbz	r3, 8017e5c <uxr_init_output_reliable_stream+0x48>
 8017e26:	f8c1 c000 	str.w	ip, [r1]
 8017e2a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e2e:	f1bc 0f01 	cmp.w	ip, #1
 8017e32:	d913      	bls.n	8017e5c <uxr_init_output_reliable_stream+0x48>
 8017e34:	2301      	movs	r3, #1
 8017e36:	fbb3 f1fc 	udiv	r1, r3, ip
 8017e3a:	fb0c 3111 	mls	r1, ip, r1, r3
 8017e3e:	b289      	uxth	r1, r1
 8017e40:	6842      	ldr	r2, [r0, #4]
 8017e42:	6804      	ldr	r4, [r0, #0]
 8017e44:	fbb2 f2fc 	udiv	r2, r2, ip
 8017e48:	fb01 f202 	mul.w	r2, r1, r2
 8017e4c:	7b01      	ldrb	r1, [r0, #12]
 8017e4e:	50a1      	str	r1, [r4, r2]
 8017e50:	3301      	adds	r3, #1
 8017e52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	459c      	cmp	ip, r3
 8017e5a:	d8ec      	bhi.n	8017e36 <uxr_init_output_reliable_stream+0x22>
 8017e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017e60:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e64:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e68:	4905      	ldr	r1, [pc, #20]	@ (8017e80 <uxr_init_output_reliable_stream+0x6c>)
 8017e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e6e:	f8c0 100e 	str.w	r1, [r0, #14]
 8017e72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e76:	2300      	movs	r3, #0
 8017e78:	8242      	strh	r2, [r0, #18]
 8017e7a:	8403      	strh	r3, [r0, #32]
 8017e7c:	4770      	bx	lr
 8017e7e:	bf00      	nop
 8017e80:	ffff0000 	.word	0xffff0000

08017e84 <uxr_reset_output_reliable_stream>:
 8017e84:	8901      	ldrh	r1, [r0, #8]
 8017e86:	b1b1      	cbz	r1, 8017eb6 <uxr_reset_output_reliable_stream+0x32>
 8017e88:	f04f 0c00 	mov.w	ip, #0
 8017e8c:	4663      	mov	r3, ip
 8017e8e:	fbb3 f2f1 	udiv	r2, r3, r1
 8017e92:	fb01 3312 	mls	r3, r1, r2, r3
 8017e96:	b29b      	uxth	r3, r3
 8017e98:	6842      	ldr	r2, [r0, #4]
 8017e9a:	fbb2 f2f1 	udiv	r2, r2, r1
 8017e9e:	6801      	ldr	r1, [r0, #0]
 8017ea0:	fb02 f303 	mul.w	r3, r2, r3
 8017ea4:	7b02      	ldrb	r2, [r0, #12]
 8017ea6:	50ca      	str	r2, [r1, r3]
 8017ea8:	f10c 0c01 	add.w	ip, ip, #1
 8017eac:	8901      	ldrh	r1, [r0, #8]
 8017eae:	fa1f f38c 	uxth.w	r3, ip
 8017eb2:	4299      	cmp	r1, r3
 8017eb4:	d8eb      	bhi.n	8017e8e <uxr_reset_output_reliable_stream+0xa>
 8017eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8017eba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ebe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017ec2:	4904      	ldr	r1, [pc, #16]	@ (8017ed4 <uxr_reset_output_reliable_stream+0x50>)
 8017ec4:	f8c0 100e 	str.w	r1, [r0, #14]
 8017ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ecc:	2300      	movs	r3, #0
 8017ece:	8242      	strh	r2, [r0, #18]
 8017ed0:	8403      	strh	r3, [r0, #32]
 8017ed2:	4770      	bx	lr
 8017ed4:	ffff0000 	.word	0xffff0000

08017ed8 <uxr_prepare_reliable_buffer_to_write>:
 8017ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017edc:	4604      	mov	r4, r0
 8017ede:	b091      	sub	sp, #68	@ 0x44
 8017ee0:	8900      	ldrh	r0, [r0, #8]
 8017ee2:	89e6      	ldrh	r6, [r4, #14]
 8017ee4:	6823      	ldr	r3, [r4, #0]
 8017ee6:	9204      	str	r2, [sp, #16]
 8017ee8:	fbb6 f2f0 	udiv	r2, r6, r0
 8017eec:	fb00 6212 	mls	r2, r0, r2, r6
 8017ef0:	b292      	uxth	r2, r2
 8017ef2:	6865      	ldr	r5, [r4, #4]
 8017ef4:	fbb5 f5f0 	udiv	r5, r5, r0
 8017ef8:	fb05 3202 	mla	r2, r5, r2, r3
 8017efc:	3204      	adds	r2, #4
 8017efe:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017f02:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017f06:	9203      	str	r2, [sp, #12]
 8017f08:	468b      	mov	fp, r1
 8017f0a:	1f2f      	subs	r7, r5, #4
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	f000 814c 	beq.w	80181aa <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017f12:	f04f 0c00 	mov.w	ip, #0
 8017f16:	46e2      	mov	sl, ip
 8017f18:	4661      	mov	r1, ip
 8017f1a:	fbb1 f2f0 	udiv	r2, r1, r0
 8017f1e:	fb00 1212 	mls	r2, r0, r2, r1
 8017f22:	b292      	uxth	r2, r2
 8017f24:	fb05 f202 	mul.w	r2, r5, r2
 8017f28:	f10c 0c01 	add.w	ip, ip, #1
 8017f2c:	589a      	ldr	r2, [r3, r2]
 8017f2e:	454a      	cmp	r2, r9
 8017f30:	bf08      	it	eq
 8017f32:	f10a 0a01 	addeq.w	sl, sl, #1
 8017f36:	fa1f f18c 	uxth.w	r1, ip
 8017f3a:	bf08      	it	eq
 8017f3c:	fa1f fa8a 	uxtheq.w	sl, sl
 8017f40:	4281      	cmp	r1, r0
 8017f42:	d3ea      	bcc.n	8017f1a <uxr_prepare_reliable_buffer_to_write+0x42>
 8017f44:	4640      	mov	r0, r8
 8017f46:	2104      	movs	r1, #4
 8017f48:	f8cd a014 	str.w	sl, [sp, #20]
 8017f4c:	f7f4 faee 	bl	800c52c <ucdr_alignment>
 8017f50:	4480      	add	r8, r0
 8017f52:	eb08 020b 	add.w	r2, r8, fp
 8017f56:	42ba      	cmp	r2, r7
 8017f58:	f240 80cd 	bls.w	80180f6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017f5c:	7b22      	ldrb	r2, [r4, #12]
 8017f5e:	445a      	add	r2, fp
 8017f60:	42ba      	cmp	r2, r7
 8017f62:	f240 80b5 	bls.w	80180d0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017f66:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017f6a:	33fc      	adds	r3, #252	@ 0xfc
 8017f6c:	b2ba      	uxth	r2, r7
 8017f6e:	4413      	add	r3, r2
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	fb0a f903 	mul.w	r9, sl, r3
 8017f76:	45d9      	cmp	r9, fp
 8017f78:	9305      	str	r3, [sp, #20]
 8017f7a:	9306      	str	r3, [sp, #24]
 8017f7c:	f0c0 80b7 	bcc.w	80180ee <uxr_prepare_reliable_buffer_to_write+0x216>
 8017f80:	f108 0304 	add.w	r3, r8, #4
 8017f84:	42bb      	cmp	r3, r7
 8017f86:	f080 80db 	bcs.w	8018140 <uxr_prepare_reliable_buffer_to_write+0x268>
 8017f8a:	f1a2 0904 	sub.w	r9, r2, #4
 8017f8e:	eba9 0908 	sub.w	r9, r9, r8
 8017f92:	9b05      	ldr	r3, [sp, #20]
 8017f94:	fa1f f989 	uxth.w	r9, r9
 8017f98:	ebab 0b09 	sub.w	fp, fp, r9
 8017f9c:	fbbb f2f3 	udiv	r2, fp, r3
 8017fa0:	fb03 b312 	mls	r3, r3, r2, fp
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	f000 80c8 	beq.w	801813a <uxr_prepare_reliable_buffer_to_write+0x262>
 8017faa:	3201      	adds	r2, #1
 8017fac:	b292      	uxth	r2, r2
 8017fae:	9306      	str	r3, [sp, #24]
 8017fb0:	4552      	cmp	r2, sl
 8017fb2:	f200 809c 	bhi.w	80180ee <uxr_prepare_reliable_buffer_to_write+0x216>
 8017fb6:	f10d 0b20 	add.w	fp, sp, #32
 8017fba:	2a00      	cmp	r2, #0
 8017fbc:	d042      	beq.n	8018044 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017fbe:	f8cd 801c 	str.w	r8, [sp, #28]
 8017fc2:	f04f 0a00 	mov.w	sl, #0
 8017fc6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017fca:	9505      	str	r5, [sp, #20]
 8017fcc:	f10d 0b20 	add.w	fp, sp, #32
 8017fd0:	4615      	mov	r5, r2
 8017fd2:	e000      	b.n	8017fd6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017fd4:	46c1      	mov	r9, r8
 8017fd6:	8920      	ldrh	r0, [r4, #8]
 8017fd8:	fbb6 f2f0 	udiv	r2, r6, r0
 8017fdc:	fb00 6112 	mls	r1, r0, r2, r6
 8017fe0:	b28a      	uxth	r2, r1
 8017fe2:	6863      	ldr	r3, [r4, #4]
 8017fe4:	fbb3 f1f0 	udiv	r1, r3, r0
 8017fe8:	6823      	ldr	r3, [r4, #0]
 8017fea:	fb02 f101 	mul.w	r1, r2, r1
 8017fee:	3104      	adds	r1, #4
 8017ff0:	4419      	add	r1, r3
 8017ff2:	4658      	mov	r0, fp
 8017ff4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017ff8:	9200      	str	r2, [sp, #0]
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	463a      	mov	r2, r7
 8017ffe:	f7f4 fa7f 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8018002:	464a      	mov	r2, r9
 8018004:	2300      	movs	r3, #0
 8018006:	210d      	movs	r1, #13
 8018008:	4658      	mov	r0, fp
 801800a:	f7fc fc83 	bl	8014914 <uxr_buffer_submessage_header>
 801800e:	8921      	ldrh	r1, [r4, #8]
 8018010:	fbb6 f2f1 	udiv	r2, r6, r1
 8018014:	fb01 6212 	mls	r2, r1, r2, r6
 8018018:	b292      	uxth	r2, r2
 801801a:	6863      	ldr	r3, [r4, #4]
 801801c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018020:	fb02 f303 	mul.w	r3, r2, r3
 8018024:	6822      	ldr	r2, [r4, #0]
 8018026:	4630      	mov	r0, r6
 8018028:	50d7      	str	r7, [r2, r3]
 801802a:	2101      	movs	r1, #1
 801802c:	f000 f9c4 	bl	80183b8 <uxr_seq_num_add>
 8018030:	f10a 0a01 	add.w	sl, sl, #1
 8018034:	fa1f f38a 	uxth.w	r3, sl
 8018038:	429d      	cmp	r5, r3
 801803a:	4606      	mov	r6, r0
 801803c:	d8ca      	bhi.n	8017fd4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801803e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018042:	9d05      	ldr	r5, [sp, #20]
 8018044:	8920      	ldrh	r0, [r4, #8]
 8018046:	fbb6 f3f0 	udiv	r3, r6, r0
 801804a:	fb00 6313 	mls	r3, r0, r3, r6
 801804e:	b299      	uxth	r1, r3
 8018050:	6863      	ldr	r3, [r4, #4]
 8018052:	fbb3 f3f0 	udiv	r3, r3, r0
 8018056:	fb01 f303 	mul.w	r3, r1, r3
 801805a:	6821      	ldr	r1, [r4, #0]
 801805c:	3304      	adds	r3, #4
 801805e:	4419      	add	r1, r3
 8018060:	463a      	mov	r2, r7
 8018062:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018066:	9000      	str	r0, [sp, #0]
 8018068:	2300      	movs	r3, #0
 801806a:	4658      	mov	r0, fp
 801806c:	f7f4 fa48 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8018070:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018074:	4658      	mov	r0, fp
 8018076:	fa1f f289 	uxth.w	r2, r9
 801807a:	2302      	movs	r3, #2
 801807c:	210d      	movs	r1, #13
 801807e:	f7fc fc49 	bl	8014914 <uxr_buffer_submessage_header>
 8018082:	9b03      	ldr	r3, [sp, #12]
 8018084:	8927      	ldrh	r7, [r4, #8]
 8018086:	7b20      	ldrb	r0, [r4, #12]
 8018088:	f108 0104 	add.w	r1, r8, #4
 801808c:	440b      	add	r3, r1
 801808e:	4619      	mov	r1, r3
 8018090:	fbb6 f3f7 	udiv	r3, r6, r7
 8018094:	fb07 6313 	mls	r3, r7, r3, r6
 8018098:	f1a5 0208 	sub.w	r2, r5, #8
 801809c:	b29d      	uxth	r5, r3
 801809e:	3004      	adds	r0, #4
 80180a0:	6863      	ldr	r3, [r4, #4]
 80180a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80180a6:	fb05 f303 	mul.w	r3, r5, r3
 80180aa:	6825      	ldr	r5, [r4, #0]
 80180ac:	4448      	add	r0, r9
 80180ae:	50e8      	str	r0, [r5, r3]
 80180b0:	9d04      	ldr	r5, [sp, #16]
 80180b2:	eba2 0208 	sub.w	r2, r2, r8
 80180b6:	4628      	mov	r0, r5
 80180b8:	f7f4 fa34 	bl	800c524 <ucdr_init_buffer>
 80180bc:	4628      	mov	r0, r5
 80180be:	493c      	ldr	r1, [pc, #240]	@ (80181b0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80180c0:	4622      	mov	r2, r4
 80180c2:	f7f4 fa03 	bl	800c4cc <ucdr_set_on_full_buffer_callback>
 80180c6:	2001      	movs	r0, #1
 80180c8:	81e6      	strh	r6, [r4, #14]
 80180ca:	b011      	add	sp, #68	@ 0x44
 80180cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180d0:	2101      	movs	r1, #1
 80180d2:	89e0      	ldrh	r0, [r4, #14]
 80180d4:	f000 f970 	bl	80183b8 <uxr_seq_num_add>
 80180d8:	8921      	ldrh	r1, [r4, #8]
 80180da:	4605      	mov	r5, r0
 80180dc:	8a60      	ldrh	r0, [r4, #18]
 80180de:	f000 f96b 	bl	80183b8 <uxr_seq_num_add>
 80180e2:	4601      	mov	r1, r0
 80180e4:	4628      	mov	r0, r5
 80180e6:	f000 f96f 	bl	80183c8 <uxr_seq_num_cmp>
 80180ea:	2800      	cmp	r0, #0
 80180ec:	dd42      	ble.n	8018174 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80180ee:	2000      	movs	r0, #0
 80180f0:	b011      	add	sp, #68	@ 0x44
 80180f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f6:	8921      	ldrh	r1, [r4, #8]
 80180f8:	8a60      	ldrh	r0, [r4, #18]
 80180fa:	9205      	str	r2, [sp, #20]
 80180fc:	f000 f95c 	bl	80183b8 <uxr_seq_num_add>
 8018100:	4601      	mov	r1, r0
 8018102:	4630      	mov	r0, r6
 8018104:	f000 f960 	bl	80183c8 <uxr_seq_num_cmp>
 8018108:	2800      	cmp	r0, #0
 801810a:	9a05      	ldr	r2, [sp, #20]
 801810c:	dcef      	bgt.n	80180ee <uxr_prepare_reliable_buffer_to_write+0x216>
 801810e:	8927      	ldrh	r7, [r4, #8]
 8018110:	fbb6 f3f7 	udiv	r3, r6, r7
 8018114:	fb07 6313 	mls	r3, r7, r3, r6
 8018118:	b29d      	uxth	r5, r3
 801811a:	6863      	ldr	r3, [r4, #4]
 801811c:	6824      	ldr	r4, [r4, #0]
 801811e:	fbb3 f3f7 	udiv	r3, r3, r7
 8018122:	fb05 f303 	mul.w	r3, r5, r3
 8018126:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801812a:	50e2      	str	r2, [r4, r3]
 801812c:	2300      	movs	r3, #0
 801812e:	f8cd 8000 	str.w	r8, [sp]
 8018132:	f7f4 f9e5 	bl	800c500 <ucdr_init_buffer_origin_offset>
 8018136:	2001      	movs	r0, #1
 8018138:	e7da      	b.n	80180f0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801813a:	b293      	uxth	r3, r2
 801813c:	461a      	mov	r2, r3
 801813e:	e737      	b.n	8017fb0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8018140:	4630      	mov	r0, r6
 8018142:	2101      	movs	r1, #1
 8018144:	9207      	str	r2, [sp, #28]
 8018146:	f000 f937 	bl	80183b8 <uxr_seq_num_add>
 801814a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801814e:	fbb0 f1fc 	udiv	r1, r0, ip
 8018152:	fb0c 0111 	mls	r1, ip, r1, r0
 8018156:	4606      	mov	r6, r0
 8018158:	b288      	uxth	r0, r1
 801815a:	6863      	ldr	r3, [r4, #4]
 801815c:	fbb3 f1fc 	udiv	r1, r3, ip
 8018160:	6823      	ldr	r3, [r4, #0]
 8018162:	9a07      	ldr	r2, [sp, #28]
 8018164:	fb00 f101 	mul.w	r1, r0, r1
 8018168:	3104      	adds	r1, #4
 801816a:	440b      	add	r3, r1
 801816c:	9303      	str	r3, [sp, #12]
 801816e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018172:	e70a      	b.n	8017f8a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018174:	8921      	ldrh	r1, [r4, #8]
 8018176:	fbb5 f3f1 	udiv	r3, r5, r1
 801817a:	fb01 5313 	mls	r3, r1, r3, r5
 801817e:	b29a      	uxth	r2, r3
 8018180:	6863      	ldr	r3, [r4, #4]
 8018182:	fbb3 f3f1 	udiv	r3, r3, r1
 8018186:	6821      	ldr	r1, [r4, #0]
 8018188:	9804      	ldr	r0, [sp, #16]
 801818a:	fb02 f303 	mul.w	r3, r2, r3
 801818e:	3304      	adds	r3, #4
 8018190:	7b22      	ldrb	r2, [r4, #12]
 8018192:	4419      	add	r1, r3
 8018194:	445a      	add	r2, fp
 8018196:	f841 2c04 	str.w	r2, [r1, #-4]
 801819a:	7b23      	ldrb	r3, [r4, #12]
 801819c:	9300      	str	r3, [sp, #0]
 801819e:	2300      	movs	r3, #0
 80181a0:	f7f4 f9ae 	bl	800c500 <ucdr_init_buffer_origin_offset>
 80181a4:	81e5      	strh	r5, [r4, #14]
 80181a6:	2001      	movs	r0, #1
 80181a8:	e7a2      	b.n	80180f0 <uxr_prepare_reliable_buffer_to_write+0x218>
 80181aa:	4682      	mov	sl, r0
 80181ac:	e6ca      	b.n	8017f44 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80181ae:	bf00      	nop
 80181b0:	08017db9 	.word	0x08017db9

080181b4 <uxr_prepare_next_reliable_buffer_to_send>:
 80181b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181b6:	4604      	mov	r4, r0
 80181b8:	460f      	mov	r7, r1
 80181ba:	8a00      	ldrh	r0, [r0, #16]
 80181bc:	2101      	movs	r1, #1
 80181be:	4616      	mov	r6, r2
 80181c0:	461d      	mov	r5, r3
 80181c2:	f000 f8f9 	bl	80183b8 <uxr_seq_num_add>
 80181c6:	8028      	strh	r0, [r5, #0]
 80181c8:	8922      	ldrh	r2, [r4, #8]
 80181ca:	fbb0 f3f2 	udiv	r3, r0, r2
 80181ce:	fb02 0c13 	mls	ip, r2, r3, r0
 80181d2:	fa1f fc8c 	uxth.w	ip, ip
 80181d6:	6863      	ldr	r3, [r4, #4]
 80181d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80181dc:	fb0c fc03 	mul.w	ip, ip, r3
 80181e0:	6823      	ldr	r3, [r4, #0]
 80181e2:	89e1      	ldrh	r1, [r4, #14]
 80181e4:	f10c 0c04 	add.w	ip, ip, #4
 80181e8:	4463      	add	r3, ip
 80181ea:	603b      	str	r3, [r7, #0]
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	449c      	add	ip, r3
 80181f0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80181f4:	6033      	str	r3, [r6, #0]
 80181f6:	f000 f8e7 	bl	80183c8 <uxr_seq_num_cmp>
 80181fa:	2800      	cmp	r0, #0
 80181fc:	dd01      	ble.n	8018202 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80181fe:	2000      	movs	r0, #0
 8018200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018202:	7b23      	ldrb	r3, [r4, #12]
 8018204:	6832      	ldr	r2, [r6, #0]
 8018206:	429a      	cmp	r2, r3
 8018208:	d9f9      	bls.n	80181fe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801820a:	8a61      	ldrh	r1, [r4, #18]
 801820c:	8a20      	ldrh	r0, [r4, #16]
 801820e:	f000 f8d7 	bl	80183c0 <uxr_seq_num_sub>
 8018212:	8923      	ldrh	r3, [r4, #8]
 8018214:	4283      	cmp	r3, r0
 8018216:	d0f2      	beq.n	80181fe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018218:	8828      	ldrh	r0, [r5, #0]
 801821a:	89e3      	ldrh	r3, [r4, #14]
 801821c:	8220      	strh	r0, [r4, #16]
 801821e:	4298      	cmp	r0, r3
 8018220:	d001      	beq.n	8018226 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018222:	2001      	movs	r0, #1
 8018224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018226:	2101      	movs	r1, #1
 8018228:	f000 f8c6 	bl	80183b8 <uxr_seq_num_add>
 801822c:	81e0      	strh	r0, [r4, #14]
 801822e:	2001      	movs	r0, #1
 8018230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018232:	bf00      	nop

08018234 <uxr_update_output_stream_heartbeat_timestamp>:
 8018234:	b570      	push	{r4, r5, r6, lr}
 8018236:	8a01      	ldrh	r1, [r0, #16]
 8018238:	4604      	mov	r4, r0
 801823a:	8a40      	ldrh	r0, [r0, #18]
 801823c:	4615      	mov	r5, r2
 801823e:	461e      	mov	r6, r3
 8018240:	f000 f8c2 	bl	80183c8 <uxr_seq_num_cmp>
 8018244:	2800      	cmp	r0, #0
 8018246:	db07      	blt.n	8018258 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018248:	f04f 32ff 	mov.w	r2, #4294967295
 801824c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018250:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018254:	2000      	movs	r0, #0
 8018256:	bd70      	pop	{r4, r5, r6, pc}
 8018258:	f894 0020 	ldrb.w	r0, [r4, #32]
 801825c:	b940      	cbnz	r0, 8018270 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801825e:	2301      	movs	r3, #1
 8018260:	f884 3020 	strb.w	r3, [r4, #32]
 8018264:	3564      	adds	r5, #100	@ 0x64
 8018266:	f146 0600 	adc.w	r6, r6, #0
 801826a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801826e:	bd70      	pop	{r4, r5, r6, pc}
 8018270:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018274:	4295      	cmp	r5, r2
 8018276:	eb76 0303 	sbcs.w	r3, r6, r3
 801827a:	bfa5      	ittet	ge
 801827c:	3001      	addge	r0, #1
 801827e:	f884 0020 	strbge.w	r0, [r4, #32]
 8018282:	2000      	movlt	r0, #0
 8018284:	2001      	movge	r0, #1
 8018286:	e7ed      	b.n	8018264 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018288 <uxr_begin_output_nack_buffer_it>:
 8018288:	8a40      	ldrh	r0, [r0, #18]
 801828a:	4770      	bx	lr

0801828c <uxr_next_reliable_nack_buffer_to_send>:
 801828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018290:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018294:	b082      	sub	sp, #8
 8018296:	f1b8 0f00 	cmp.w	r8, #0
 801829a:	d011      	beq.n	80182c0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801829c:	4604      	mov	r4, r0
 801829e:	8818      	ldrh	r0, [r3, #0]
 80182a0:	460e      	mov	r6, r1
 80182a2:	4617      	mov	r7, r2
 80182a4:	461d      	mov	r5, r3
 80182a6:	2101      	movs	r1, #1
 80182a8:	f000 f886 	bl	80183b8 <uxr_seq_num_add>
 80182ac:	8028      	strh	r0, [r5, #0]
 80182ae:	8a21      	ldrh	r1, [r4, #16]
 80182b0:	f000 f88a 	bl	80183c8 <uxr_seq_num_cmp>
 80182b4:	2800      	cmp	r0, #0
 80182b6:	dd07      	ble.n	80182c8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80182b8:	f04f 0800 	mov.w	r8, #0
 80182bc:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80182c0:	4640      	mov	r0, r8
 80182c2:	b002      	add	sp, #8
 80182c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c8:	8921      	ldrh	r1, [r4, #8]
 80182ca:	8828      	ldrh	r0, [r5, #0]
 80182cc:	6823      	ldr	r3, [r4, #0]
 80182ce:	fbb0 f2f1 	udiv	r2, r0, r1
 80182d2:	fb01 0c12 	mls	ip, r1, r2, r0
 80182d6:	fa1f f28c 	uxth.w	r2, ip
 80182da:	9301      	str	r3, [sp, #4]
 80182dc:	6863      	ldr	r3, [r4, #4]
 80182de:	fbb3 fcf1 	udiv	ip, r3, r1
 80182e2:	9b01      	ldr	r3, [sp, #4]
 80182e4:	fb02 fc0c 	mul.w	ip, r2, ip
 80182e8:	f10c 0c04 	add.w	ip, ip, #4
 80182ec:	4463      	add	r3, ip
 80182ee:	6033      	str	r3, [r6, #0]
 80182f0:	6823      	ldr	r3, [r4, #0]
 80182f2:	4463      	add	r3, ip
 80182f4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80182f8:	603b      	str	r3, [r7, #0]
 80182fa:	7b22      	ldrb	r2, [r4, #12]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d0d2      	beq.n	80182a6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018300:	4640      	mov	r0, r8
 8018302:	b002      	add	sp, #8
 8018304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018308 <uxr_process_acknack>:
 8018308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801830a:	4604      	mov	r4, r0
 801830c:	460e      	mov	r6, r1
 801830e:	4610      	mov	r0, r2
 8018310:	2101      	movs	r1, #1
 8018312:	f000 f855 	bl	80183c0 <uxr_seq_num_sub>
 8018316:	8a61      	ldrh	r1, [r4, #18]
 8018318:	f000 f852 	bl	80183c0 <uxr_seq_num_sub>
 801831c:	b1c0      	cbz	r0, 8018350 <uxr_process_acknack+0x48>
 801831e:	4605      	mov	r5, r0
 8018320:	2700      	movs	r7, #0
 8018322:	2101      	movs	r1, #1
 8018324:	8a60      	ldrh	r0, [r4, #18]
 8018326:	f000 f847 	bl	80183b8 <uxr_seq_num_add>
 801832a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801832e:	fbb0 f1fc 	udiv	r1, r0, ip
 8018332:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018336:	fb0c 0111 	mls	r1, ip, r1, r0
 801833a:	b289      	uxth	r1, r1
 801833c:	3701      	adds	r7, #1
 801833e:	fbb3 f3fc 	udiv	r3, r3, ip
 8018342:	fb01 f303 	mul.w	r3, r1, r3
 8018346:	42bd      	cmp	r5, r7
 8018348:	7b21      	ldrb	r1, [r4, #12]
 801834a:	8260      	strh	r0, [r4, #18]
 801834c:	50d1      	str	r1, [r2, r3]
 801834e:	d1e8      	bne.n	8018322 <uxr_process_acknack+0x1a>
 8018350:	3e00      	subs	r6, #0
 8018352:	f04f 0300 	mov.w	r3, #0
 8018356:	bf18      	it	ne
 8018358:	2601      	movne	r6, #1
 801835a:	f884 3020 	strb.w	r3, [r4, #32]
 801835e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018364 <uxr_is_output_up_to_date>:
 8018364:	8a01      	ldrh	r1, [r0, #16]
 8018366:	8a40      	ldrh	r0, [r0, #18]
 8018368:	b508      	push	{r3, lr}
 801836a:	f000 f82d 	bl	80183c8 <uxr_seq_num_cmp>
 801836e:	fab0 f080 	clz	r0, r0
 8018372:	0940      	lsrs	r0, r0, #5
 8018374:	bd08      	pop	{r3, pc}
 8018376:	bf00      	nop

08018378 <get_available_free_slots>:
 8018378:	8902      	ldrh	r2, [r0, #8]
 801837a:	b1da      	cbz	r2, 80183b4 <get_available_free_slots+0x3c>
 801837c:	b530      	push	{r4, r5, lr}
 801837e:	2100      	movs	r1, #0
 8018380:	6843      	ldr	r3, [r0, #4]
 8018382:	6805      	ldr	r5, [r0, #0]
 8018384:	7b04      	ldrb	r4, [r0, #12]
 8018386:	fbb3 fef2 	udiv	lr, r3, r2
 801838a:	4608      	mov	r0, r1
 801838c:	460b      	mov	r3, r1
 801838e:	fbb3 fcf2 	udiv	ip, r3, r2
 8018392:	fb02 331c 	mls	r3, r2, ip, r3
 8018396:	b29b      	uxth	r3, r3
 8018398:	fb0e f303 	mul.w	r3, lr, r3
 801839c:	3101      	adds	r1, #1
 801839e:	f855 c003 	ldr.w	ip, [r5, r3]
 80183a2:	4564      	cmp	r4, ip
 80183a4:	bf08      	it	eq
 80183a6:	3001      	addeq	r0, #1
 80183a8:	b28b      	uxth	r3, r1
 80183aa:	bf08      	it	eq
 80183ac:	b280      	uxtheq	r0, r0
 80183ae:	4293      	cmp	r3, r2
 80183b0:	d3ed      	bcc.n	801838e <get_available_free_slots+0x16>
 80183b2:	bd30      	pop	{r4, r5, pc}
 80183b4:	4610      	mov	r0, r2
 80183b6:	4770      	bx	lr

080183b8 <uxr_seq_num_add>:
 80183b8:	4408      	add	r0, r1
 80183ba:	b280      	uxth	r0, r0
 80183bc:	4770      	bx	lr
 80183be:	bf00      	nop

080183c0 <uxr_seq_num_sub>:
 80183c0:	1a40      	subs	r0, r0, r1
 80183c2:	b280      	uxth	r0, r0
 80183c4:	4770      	bx	lr
 80183c6:	bf00      	nop

080183c8 <uxr_seq_num_cmp>:
 80183c8:	4288      	cmp	r0, r1
 80183ca:	d011      	beq.n	80183f0 <uxr_seq_num_cmp+0x28>
 80183cc:	d309      	bcc.n	80183e2 <uxr_seq_num_cmp+0x1a>
 80183ce:	4288      	cmp	r0, r1
 80183d0:	d910      	bls.n	80183f4 <uxr_seq_num_cmp+0x2c>
 80183d2:	1a40      	subs	r0, r0, r1
 80183d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80183d8:	bfd4      	ite	le
 80183da:	2001      	movle	r0, #1
 80183dc:	f04f 30ff 	movgt.w	r0, #4294967295
 80183e0:	4770      	bx	lr
 80183e2:	1a0b      	subs	r3, r1, r0
 80183e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80183e8:	daf1      	bge.n	80183ce <uxr_seq_num_cmp+0x6>
 80183ea:	f04f 30ff 	mov.w	r0, #4294967295
 80183ee:	4770      	bx	lr
 80183f0:	2000      	movs	r0, #0
 80183f2:	4770      	bx	lr
 80183f4:	2001      	movs	r0, #1
 80183f6:	4770      	bx	lr

080183f8 <__assert_func>:
 80183f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80183fa:	4614      	mov	r4, r2
 80183fc:	461a      	mov	r2, r3
 80183fe:	4b09      	ldr	r3, [pc, #36]	@ (8018424 <__assert_func+0x2c>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	4605      	mov	r5, r0
 8018404:	68d8      	ldr	r0, [r3, #12]
 8018406:	b954      	cbnz	r4, 801841e <__assert_func+0x26>
 8018408:	4b07      	ldr	r3, [pc, #28]	@ (8018428 <__assert_func+0x30>)
 801840a:	461c      	mov	r4, r3
 801840c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018410:	9100      	str	r1, [sp, #0]
 8018412:	462b      	mov	r3, r5
 8018414:	4905      	ldr	r1, [pc, #20]	@ (801842c <__assert_func+0x34>)
 8018416:	f000 ff57 	bl	80192c8 <fiprintf>
 801841a:	f001 faca 	bl	80199b2 <abort>
 801841e:	4b04      	ldr	r3, [pc, #16]	@ (8018430 <__assert_func+0x38>)
 8018420:	e7f4      	b.n	801840c <__assert_func+0x14>
 8018422:	bf00      	nop
 8018424:	20000a6c 	.word	0x20000a6c
 8018428:	0801ccd3 	.word	0x0801ccd3
 801842c:	0801cca5 	.word	0x0801cca5
 8018430:	0801cc98 	.word	0x0801cc98

08018434 <calloc>:
 8018434:	4b02      	ldr	r3, [pc, #8]	@ (8018440 <calloc+0xc>)
 8018436:	460a      	mov	r2, r1
 8018438:	4601      	mov	r1, r0
 801843a:	6818      	ldr	r0, [r3, #0]
 801843c:	f000 b802 	b.w	8018444 <_calloc_r>
 8018440:	20000a6c 	.word	0x20000a6c

08018444 <_calloc_r>:
 8018444:	b570      	push	{r4, r5, r6, lr}
 8018446:	fba1 5402 	umull	r5, r4, r1, r2
 801844a:	b93c      	cbnz	r4, 801845c <_calloc_r+0x18>
 801844c:	4629      	mov	r1, r5
 801844e:	f000 f899 	bl	8018584 <_malloc_r>
 8018452:	4606      	mov	r6, r0
 8018454:	b928      	cbnz	r0, 8018462 <_calloc_r+0x1e>
 8018456:	2600      	movs	r6, #0
 8018458:	4630      	mov	r0, r6
 801845a:	bd70      	pop	{r4, r5, r6, pc}
 801845c:	220c      	movs	r2, #12
 801845e:	6002      	str	r2, [r0, #0]
 8018460:	e7f9      	b.n	8018456 <_calloc_r+0x12>
 8018462:	462a      	mov	r2, r5
 8018464:	4621      	mov	r1, r4
 8018466:	f001 f9b7 	bl	80197d8 <memset>
 801846a:	e7f5      	b.n	8018458 <_calloc_r+0x14>

0801846c <exit>:
 801846c:	b508      	push	{r3, lr}
 801846e:	4b06      	ldr	r3, [pc, #24]	@ (8018488 <exit+0x1c>)
 8018470:	4604      	mov	r4, r0
 8018472:	b113      	cbz	r3, 801847a <exit+0xe>
 8018474:	2100      	movs	r1, #0
 8018476:	f3af 8000 	nop.w
 801847a:	4b04      	ldr	r3, [pc, #16]	@ (801848c <exit+0x20>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	b103      	cbz	r3, 8018482 <exit+0x16>
 8018480:	4798      	blx	r3
 8018482:	4620      	mov	r0, r4
 8018484:	f7ea fb14 	bl	8002ab0 <_exit>
 8018488:	00000000 	.word	0x00000000
 801848c:	20014848 	.word	0x20014848

08018490 <getenv>:
 8018490:	b507      	push	{r0, r1, r2, lr}
 8018492:	4b04      	ldr	r3, [pc, #16]	@ (80184a4 <getenv+0x14>)
 8018494:	4601      	mov	r1, r0
 8018496:	aa01      	add	r2, sp, #4
 8018498:	6818      	ldr	r0, [r3, #0]
 801849a:	f000 f805 	bl	80184a8 <_findenv_r>
 801849e:	b003      	add	sp, #12
 80184a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80184a4:	20000a6c 	.word	0x20000a6c

080184a8 <_findenv_r>:
 80184a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801851c <_findenv_r+0x74>
 80184b0:	4606      	mov	r6, r0
 80184b2:	4689      	mov	r9, r1
 80184b4:	4617      	mov	r7, r2
 80184b6:	f002 f8cf 	bl	801a658 <__env_lock>
 80184ba:	f8da 4000 	ldr.w	r4, [sl]
 80184be:	b134      	cbz	r4, 80184ce <_findenv_r+0x26>
 80184c0:	464b      	mov	r3, r9
 80184c2:	4698      	mov	r8, r3
 80184c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184c8:	b13a      	cbz	r2, 80184da <_findenv_r+0x32>
 80184ca:	2a3d      	cmp	r2, #61	@ 0x3d
 80184cc:	d1f9      	bne.n	80184c2 <_findenv_r+0x1a>
 80184ce:	4630      	mov	r0, r6
 80184d0:	f002 f8c8 	bl	801a664 <__env_unlock>
 80184d4:	2000      	movs	r0, #0
 80184d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184da:	eba8 0809 	sub.w	r8, r8, r9
 80184de:	46a3      	mov	fp, r4
 80184e0:	f854 0b04 	ldr.w	r0, [r4], #4
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d0f2      	beq.n	80184ce <_findenv_r+0x26>
 80184e8:	4642      	mov	r2, r8
 80184ea:	4649      	mov	r1, r9
 80184ec:	f001 f989 	bl	8019802 <strncmp>
 80184f0:	2800      	cmp	r0, #0
 80184f2:	d1f4      	bne.n	80184de <_findenv_r+0x36>
 80184f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80184f8:	eb03 0508 	add.w	r5, r3, r8
 80184fc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018500:	2b3d      	cmp	r3, #61	@ 0x3d
 8018502:	d1ec      	bne.n	80184de <_findenv_r+0x36>
 8018504:	f8da 3000 	ldr.w	r3, [sl]
 8018508:	ebab 0303 	sub.w	r3, fp, r3
 801850c:	109b      	asrs	r3, r3, #2
 801850e:	4630      	mov	r0, r6
 8018510:	603b      	str	r3, [r7, #0]
 8018512:	f002 f8a7 	bl	801a664 <__env_unlock>
 8018516:	1c68      	adds	r0, r5, #1
 8018518:	e7dd      	b.n	80184d6 <_findenv_r+0x2e>
 801851a:	bf00      	nop
 801851c:	20000900 	.word	0x20000900

08018520 <malloc>:
 8018520:	4b02      	ldr	r3, [pc, #8]	@ (801852c <malloc+0xc>)
 8018522:	4601      	mov	r1, r0
 8018524:	6818      	ldr	r0, [r3, #0]
 8018526:	f000 b82d 	b.w	8018584 <_malloc_r>
 801852a:	bf00      	nop
 801852c:	20000a6c 	.word	0x20000a6c

08018530 <free>:
 8018530:	4b02      	ldr	r3, [pc, #8]	@ (801853c <free+0xc>)
 8018532:	4601      	mov	r1, r0
 8018534:	6818      	ldr	r0, [r3, #0]
 8018536:	f002 b89b 	b.w	801a670 <_free_r>
 801853a:	bf00      	nop
 801853c:	20000a6c 	.word	0x20000a6c

08018540 <sbrk_aligned>:
 8018540:	b570      	push	{r4, r5, r6, lr}
 8018542:	4e0f      	ldr	r6, [pc, #60]	@ (8018580 <sbrk_aligned+0x40>)
 8018544:	460c      	mov	r4, r1
 8018546:	6831      	ldr	r1, [r6, #0]
 8018548:	4605      	mov	r5, r0
 801854a:	b911      	cbnz	r1, 8018552 <sbrk_aligned+0x12>
 801854c:	f001 f9cc 	bl	80198e8 <_sbrk_r>
 8018550:	6030      	str	r0, [r6, #0]
 8018552:	4621      	mov	r1, r4
 8018554:	4628      	mov	r0, r5
 8018556:	f001 f9c7 	bl	80198e8 <_sbrk_r>
 801855a:	1c43      	adds	r3, r0, #1
 801855c:	d103      	bne.n	8018566 <sbrk_aligned+0x26>
 801855e:	f04f 34ff 	mov.w	r4, #4294967295
 8018562:	4620      	mov	r0, r4
 8018564:	bd70      	pop	{r4, r5, r6, pc}
 8018566:	1cc4      	adds	r4, r0, #3
 8018568:	f024 0403 	bic.w	r4, r4, #3
 801856c:	42a0      	cmp	r0, r4
 801856e:	d0f8      	beq.n	8018562 <sbrk_aligned+0x22>
 8018570:	1a21      	subs	r1, r4, r0
 8018572:	4628      	mov	r0, r5
 8018574:	f001 f9b8 	bl	80198e8 <_sbrk_r>
 8018578:	3001      	adds	r0, #1
 801857a:	d1f2      	bne.n	8018562 <sbrk_aligned+0x22>
 801857c:	e7ef      	b.n	801855e <sbrk_aligned+0x1e>
 801857e:	bf00      	nop
 8018580:	20014708 	.word	0x20014708

08018584 <_malloc_r>:
 8018584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018588:	1ccd      	adds	r5, r1, #3
 801858a:	f025 0503 	bic.w	r5, r5, #3
 801858e:	3508      	adds	r5, #8
 8018590:	2d0c      	cmp	r5, #12
 8018592:	bf38      	it	cc
 8018594:	250c      	movcc	r5, #12
 8018596:	2d00      	cmp	r5, #0
 8018598:	4606      	mov	r6, r0
 801859a:	db01      	blt.n	80185a0 <_malloc_r+0x1c>
 801859c:	42a9      	cmp	r1, r5
 801859e:	d904      	bls.n	80185aa <_malloc_r+0x26>
 80185a0:	230c      	movs	r3, #12
 80185a2:	6033      	str	r3, [r6, #0]
 80185a4:	2000      	movs	r0, #0
 80185a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018680 <_malloc_r+0xfc>
 80185ae:	f000 f869 	bl	8018684 <__malloc_lock>
 80185b2:	f8d8 3000 	ldr.w	r3, [r8]
 80185b6:	461c      	mov	r4, r3
 80185b8:	bb44      	cbnz	r4, 801860c <_malloc_r+0x88>
 80185ba:	4629      	mov	r1, r5
 80185bc:	4630      	mov	r0, r6
 80185be:	f7ff ffbf 	bl	8018540 <sbrk_aligned>
 80185c2:	1c43      	adds	r3, r0, #1
 80185c4:	4604      	mov	r4, r0
 80185c6:	d158      	bne.n	801867a <_malloc_r+0xf6>
 80185c8:	f8d8 4000 	ldr.w	r4, [r8]
 80185cc:	4627      	mov	r7, r4
 80185ce:	2f00      	cmp	r7, #0
 80185d0:	d143      	bne.n	801865a <_malloc_r+0xd6>
 80185d2:	2c00      	cmp	r4, #0
 80185d4:	d04b      	beq.n	801866e <_malloc_r+0xea>
 80185d6:	6823      	ldr	r3, [r4, #0]
 80185d8:	4639      	mov	r1, r7
 80185da:	4630      	mov	r0, r6
 80185dc:	eb04 0903 	add.w	r9, r4, r3
 80185e0:	f001 f982 	bl	80198e8 <_sbrk_r>
 80185e4:	4581      	cmp	r9, r0
 80185e6:	d142      	bne.n	801866e <_malloc_r+0xea>
 80185e8:	6821      	ldr	r1, [r4, #0]
 80185ea:	1a6d      	subs	r5, r5, r1
 80185ec:	4629      	mov	r1, r5
 80185ee:	4630      	mov	r0, r6
 80185f0:	f7ff ffa6 	bl	8018540 <sbrk_aligned>
 80185f4:	3001      	adds	r0, #1
 80185f6:	d03a      	beq.n	801866e <_malloc_r+0xea>
 80185f8:	6823      	ldr	r3, [r4, #0]
 80185fa:	442b      	add	r3, r5
 80185fc:	6023      	str	r3, [r4, #0]
 80185fe:	f8d8 3000 	ldr.w	r3, [r8]
 8018602:	685a      	ldr	r2, [r3, #4]
 8018604:	bb62      	cbnz	r2, 8018660 <_malloc_r+0xdc>
 8018606:	f8c8 7000 	str.w	r7, [r8]
 801860a:	e00f      	b.n	801862c <_malloc_r+0xa8>
 801860c:	6822      	ldr	r2, [r4, #0]
 801860e:	1b52      	subs	r2, r2, r5
 8018610:	d420      	bmi.n	8018654 <_malloc_r+0xd0>
 8018612:	2a0b      	cmp	r2, #11
 8018614:	d917      	bls.n	8018646 <_malloc_r+0xc2>
 8018616:	1961      	adds	r1, r4, r5
 8018618:	42a3      	cmp	r3, r4
 801861a:	6025      	str	r5, [r4, #0]
 801861c:	bf18      	it	ne
 801861e:	6059      	strne	r1, [r3, #4]
 8018620:	6863      	ldr	r3, [r4, #4]
 8018622:	bf08      	it	eq
 8018624:	f8c8 1000 	streq.w	r1, [r8]
 8018628:	5162      	str	r2, [r4, r5]
 801862a:	604b      	str	r3, [r1, #4]
 801862c:	4630      	mov	r0, r6
 801862e:	f000 f82f 	bl	8018690 <__malloc_unlock>
 8018632:	f104 000b 	add.w	r0, r4, #11
 8018636:	1d23      	adds	r3, r4, #4
 8018638:	f020 0007 	bic.w	r0, r0, #7
 801863c:	1ac2      	subs	r2, r0, r3
 801863e:	bf1c      	itt	ne
 8018640:	1a1b      	subne	r3, r3, r0
 8018642:	50a3      	strne	r3, [r4, r2]
 8018644:	e7af      	b.n	80185a6 <_malloc_r+0x22>
 8018646:	6862      	ldr	r2, [r4, #4]
 8018648:	42a3      	cmp	r3, r4
 801864a:	bf0c      	ite	eq
 801864c:	f8c8 2000 	streq.w	r2, [r8]
 8018650:	605a      	strne	r2, [r3, #4]
 8018652:	e7eb      	b.n	801862c <_malloc_r+0xa8>
 8018654:	4623      	mov	r3, r4
 8018656:	6864      	ldr	r4, [r4, #4]
 8018658:	e7ae      	b.n	80185b8 <_malloc_r+0x34>
 801865a:	463c      	mov	r4, r7
 801865c:	687f      	ldr	r7, [r7, #4]
 801865e:	e7b6      	b.n	80185ce <_malloc_r+0x4a>
 8018660:	461a      	mov	r2, r3
 8018662:	685b      	ldr	r3, [r3, #4]
 8018664:	42a3      	cmp	r3, r4
 8018666:	d1fb      	bne.n	8018660 <_malloc_r+0xdc>
 8018668:	2300      	movs	r3, #0
 801866a:	6053      	str	r3, [r2, #4]
 801866c:	e7de      	b.n	801862c <_malloc_r+0xa8>
 801866e:	230c      	movs	r3, #12
 8018670:	6033      	str	r3, [r6, #0]
 8018672:	4630      	mov	r0, r6
 8018674:	f000 f80c 	bl	8018690 <__malloc_unlock>
 8018678:	e794      	b.n	80185a4 <_malloc_r+0x20>
 801867a:	6005      	str	r5, [r0, #0]
 801867c:	e7d6      	b.n	801862c <_malloc_r+0xa8>
 801867e:	bf00      	nop
 8018680:	2001470c 	.word	0x2001470c

08018684 <__malloc_lock>:
 8018684:	4801      	ldr	r0, [pc, #4]	@ (801868c <__malloc_lock+0x8>)
 8018686:	f001 b97c 	b.w	8019982 <__retarget_lock_acquire_recursive>
 801868a:	bf00      	nop
 801868c:	20014851 	.word	0x20014851

08018690 <__malloc_unlock>:
 8018690:	4801      	ldr	r0, [pc, #4]	@ (8018698 <__malloc_unlock+0x8>)
 8018692:	f001 b977 	b.w	8019984 <__retarget_lock_release_recursive>
 8018696:	bf00      	nop
 8018698:	20014851 	.word	0x20014851

0801869c <srand>:
 801869c:	b538      	push	{r3, r4, r5, lr}
 801869e:	4b10      	ldr	r3, [pc, #64]	@ (80186e0 <srand+0x44>)
 80186a0:	681d      	ldr	r5, [r3, #0]
 80186a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80186a4:	4604      	mov	r4, r0
 80186a6:	b9b3      	cbnz	r3, 80186d6 <srand+0x3a>
 80186a8:	2018      	movs	r0, #24
 80186aa:	f7ff ff39 	bl	8018520 <malloc>
 80186ae:	4602      	mov	r2, r0
 80186b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80186b2:	b920      	cbnz	r0, 80186be <srand+0x22>
 80186b4:	4b0b      	ldr	r3, [pc, #44]	@ (80186e4 <srand+0x48>)
 80186b6:	480c      	ldr	r0, [pc, #48]	@ (80186e8 <srand+0x4c>)
 80186b8:	2146      	movs	r1, #70	@ 0x46
 80186ba:	f7ff fe9d 	bl	80183f8 <__assert_func>
 80186be:	490b      	ldr	r1, [pc, #44]	@ (80186ec <srand+0x50>)
 80186c0:	4b0b      	ldr	r3, [pc, #44]	@ (80186f0 <srand+0x54>)
 80186c2:	e9c0 1300 	strd	r1, r3, [r0]
 80186c6:	4b0b      	ldr	r3, [pc, #44]	@ (80186f4 <srand+0x58>)
 80186c8:	6083      	str	r3, [r0, #8]
 80186ca:	230b      	movs	r3, #11
 80186cc:	8183      	strh	r3, [r0, #12]
 80186ce:	2100      	movs	r1, #0
 80186d0:	2001      	movs	r0, #1
 80186d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80186d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80186d8:	2200      	movs	r2, #0
 80186da:	611c      	str	r4, [r3, #16]
 80186dc:	615a      	str	r2, [r3, #20]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	20000a6c 	.word	0x20000a6c
 80186e4:	0801ccd4 	.word	0x0801ccd4
 80186e8:	0801cceb 	.word	0x0801cceb
 80186ec:	abcd330e 	.word	0xabcd330e
 80186f0:	e66d1234 	.word	0xe66d1234
 80186f4:	0005deec 	.word	0x0005deec

080186f8 <rand>:
 80186f8:	4b16      	ldr	r3, [pc, #88]	@ (8018754 <rand+0x5c>)
 80186fa:	b510      	push	{r4, lr}
 80186fc:	681c      	ldr	r4, [r3, #0]
 80186fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018700:	b9b3      	cbnz	r3, 8018730 <rand+0x38>
 8018702:	2018      	movs	r0, #24
 8018704:	f7ff ff0c 	bl	8018520 <malloc>
 8018708:	4602      	mov	r2, r0
 801870a:	6320      	str	r0, [r4, #48]	@ 0x30
 801870c:	b920      	cbnz	r0, 8018718 <rand+0x20>
 801870e:	4b12      	ldr	r3, [pc, #72]	@ (8018758 <rand+0x60>)
 8018710:	4812      	ldr	r0, [pc, #72]	@ (801875c <rand+0x64>)
 8018712:	2152      	movs	r1, #82	@ 0x52
 8018714:	f7ff fe70 	bl	80183f8 <__assert_func>
 8018718:	4911      	ldr	r1, [pc, #68]	@ (8018760 <rand+0x68>)
 801871a:	4b12      	ldr	r3, [pc, #72]	@ (8018764 <rand+0x6c>)
 801871c:	e9c0 1300 	strd	r1, r3, [r0]
 8018720:	4b11      	ldr	r3, [pc, #68]	@ (8018768 <rand+0x70>)
 8018722:	6083      	str	r3, [r0, #8]
 8018724:	230b      	movs	r3, #11
 8018726:	8183      	strh	r3, [r0, #12]
 8018728:	2100      	movs	r1, #0
 801872a:	2001      	movs	r0, #1
 801872c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018730:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018732:	480e      	ldr	r0, [pc, #56]	@ (801876c <rand+0x74>)
 8018734:	690b      	ldr	r3, [r1, #16]
 8018736:	694c      	ldr	r4, [r1, #20]
 8018738:	4a0d      	ldr	r2, [pc, #52]	@ (8018770 <rand+0x78>)
 801873a:	4358      	muls	r0, r3
 801873c:	fb02 0004 	mla	r0, r2, r4, r0
 8018740:	fba3 3202 	umull	r3, r2, r3, r2
 8018744:	3301      	adds	r3, #1
 8018746:	eb40 0002 	adc.w	r0, r0, r2
 801874a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801874e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018752:	bd10      	pop	{r4, pc}
 8018754:	20000a6c 	.word	0x20000a6c
 8018758:	0801ccd4 	.word	0x0801ccd4
 801875c:	0801cceb 	.word	0x0801cceb
 8018760:	abcd330e 	.word	0xabcd330e
 8018764:	e66d1234 	.word	0xe66d1234
 8018768:	0005deec 	.word	0x0005deec
 801876c:	5851f42d 	.word	0x5851f42d
 8018770:	4c957f2d 	.word	0x4c957f2d

08018774 <realloc>:
 8018774:	4b02      	ldr	r3, [pc, #8]	@ (8018780 <realloc+0xc>)
 8018776:	460a      	mov	r2, r1
 8018778:	4601      	mov	r1, r0
 801877a:	6818      	ldr	r0, [r3, #0]
 801877c:	f000 b802 	b.w	8018784 <_realloc_r>
 8018780:	20000a6c 	.word	0x20000a6c

08018784 <_realloc_r>:
 8018784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018788:	4680      	mov	r8, r0
 801878a:	4615      	mov	r5, r2
 801878c:	460c      	mov	r4, r1
 801878e:	b921      	cbnz	r1, 801879a <_realloc_r+0x16>
 8018790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018794:	4611      	mov	r1, r2
 8018796:	f7ff bef5 	b.w	8018584 <_malloc_r>
 801879a:	b92a      	cbnz	r2, 80187a8 <_realloc_r+0x24>
 801879c:	f001 ff68 	bl	801a670 <_free_r>
 80187a0:	2400      	movs	r4, #0
 80187a2:	4620      	mov	r0, r4
 80187a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187a8:	f002 fb2e 	bl	801ae08 <_malloc_usable_size_r>
 80187ac:	4285      	cmp	r5, r0
 80187ae:	4606      	mov	r6, r0
 80187b0:	d802      	bhi.n	80187b8 <_realloc_r+0x34>
 80187b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80187b6:	d8f4      	bhi.n	80187a2 <_realloc_r+0x1e>
 80187b8:	4629      	mov	r1, r5
 80187ba:	4640      	mov	r0, r8
 80187bc:	f7ff fee2 	bl	8018584 <_malloc_r>
 80187c0:	4607      	mov	r7, r0
 80187c2:	2800      	cmp	r0, #0
 80187c4:	d0ec      	beq.n	80187a0 <_realloc_r+0x1c>
 80187c6:	42b5      	cmp	r5, r6
 80187c8:	462a      	mov	r2, r5
 80187ca:	4621      	mov	r1, r4
 80187cc:	bf28      	it	cs
 80187ce:	4632      	movcs	r2, r6
 80187d0:	f001 f8e1 	bl	8019996 <memcpy>
 80187d4:	4621      	mov	r1, r4
 80187d6:	4640      	mov	r0, r8
 80187d8:	f001 ff4a 	bl	801a670 <_free_r>
 80187dc:	463c      	mov	r4, r7
 80187de:	e7e0      	b.n	80187a2 <_realloc_r+0x1e>

080187e0 <_strtoul_l.constprop.0>:
 80187e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187e4:	4e34      	ldr	r6, [pc, #208]	@ (80188b8 <_strtoul_l.constprop.0+0xd8>)
 80187e6:	4686      	mov	lr, r0
 80187e8:	460d      	mov	r5, r1
 80187ea:	4628      	mov	r0, r5
 80187ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187f0:	5d37      	ldrb	r7, [r6, r4]
 80187f2:	f017 0708 	ands.w	r7, r7, #8
 80187f6:	d1f8      	bne.n	80187ea <_strtoul_l.constprop.0+0xa>
 80187f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80187fa:	d12f      	bne.n	801885c <_strtoul_l.constprop.0+0x7c>
 80187fc:	782c      	ldrb	r4, [r5, #0]
 80187fe:	2701      	movs	r7, #1
 8018800:	1c85      	adds	r5, r0, #2
 8018802:	f033 0010 	bics.w	r0, r3, #16
 8018806:	d109      	bne.n	801881c <_strtoul_l.constprop.0+0x3c>
 8018808:	2c30      	cmp	r4, #48	@ 0x30
 801880a:	d12c      	bne.n	8018866 <_strtoul_l.constprop.0+0x86>
 801880c:	7828      	ldrb	r0, [r5, #0]
 801880e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018812:	2858      	cmp	r0, #88	@ 0x58
 8018814:	d127      	bne.n	8018866 <_strtoul_l.constprop.0+0x86>
 8018816:	786c      	ldrb	r4, [r5, #1]
 8018818:	2310      	movs	r3, #16
 801881a:	3502      	adds	r5, #2
 801881c:	f04f 38ff 	mov.w	r8, #4294967295
 8018820:	2600      	movs	r6, #0
 8018822:	fbb8 f8f3 	udiv	r8, r8, r3
 8018826:	fb03 f908 	mul.w	r9, r3, r8
 801882a:	ea6f 0909 	mvn.w	r9, r9
 801882e:	4630      	mov	r0, r6
 8018830:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018834:	f1bc 0f09 	cmp.w	ip, #9
 8018838:	d81c      	bhi.n	8018874 <_strtoul_l.constprop.0+0x94>
 801883a:	4664      	mov	r4, ip
 801883c:	42a3      	cmp	r3, r4
 801883e:	dd2a      	ble.n	8018896 <_strtoul_l.constprop.0+0xb6>
 8018840:	f1b6 3fff 	cmp.w	r6, #4294967295
 8018844:	d007      	beq.n	8018856 <_strtoul_l.constprop.0+0x76>
 8018846:	4580      	cmp	r8, r0
 8018848:	d322      	bcc.n	8018890 <_strtoul_l.constprop.0+0xb0>
 801884a:	d101      	bne.n	8018850 <_strtoul_l.constprop.0+0x70>
 801884c:	45a1      	cmp	r9, r4
 801884e:	db1f      	blt.n	8018890 <_strtoul_l.constprop.0+0xb0>
 8018850:	fb00 4003 	mla	r0, r0, r3, r4
 8018854:	2601      	movs	r6, #1
 8018856:	f815 4b01 	ldrb.w	r4, [r5], #1
 801885a:	e7e9      	b.n	8018830 <_strtoul_l.constprop.0+0x50>
 801885c:	2c2b      	cmp	r4, #43	@ 0x2b
 801885e:	bf04      	itt	eq
 8018860:	782c      	ldrbeq	r4, [r5, #0]
 8018862:	1c85      	addeq	r5, r0, #2
 8018864:	e7cd      	b.n	8018802 <_strtoul_l.constprop.0+0x22>
 8018866:	2b00      	cmp	r3, #0
 8018868:	d1d8      	bne.n	801881c <_strtoul_l.constprop.0+0x3c>
 801886a:	2c30      	cmp	r4, #48	@ 0x30
 801886c:	bf0c      	ite	eq
 801886e:	2308      	moveq	r3, #8
 8018870:	230a      	movne	r3, #10
 8018872:	e7d3      	b.n	801881c <_strtoul_l.constprop.0+0x3c>
 8018874:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018878:	f1bc 0f19 	cmp.w	ip, #25
 801887c:	d801      	bhi.n	8018882 <_strtoul_l.constprop.0+0xa2>
 801887e:	3c37      	subs	r4, #55	@ 0x37
 8018880:	e7dc      	b.n	801883c <_strtoul_l.constprop.0+0x5c>
 8018882:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018886:	f1bc 0f19 	cmp.w	ip, #25
 801888a:	d804      	bhi.n	8018896 <_strtoul_l.constprop.0+0xb6>
 801888c:	3c57      	subs	r4, #87	@ 0x57
 801888e:	e7d5      	b.n	801883c <_strtoul_l.constprop.0+0x5c>
 8018890:	f04f 36ff 	mov.w	r6, #4294967295
 8018894:	e7df      	b.n	8018856 <_strtoul_l.constprop.0+0x76>
 8018896:	1c73      	adds	r3, r6, #1
 8018898:	d106      	bne.n	80188a8 <_strtoul_l.constprop.0+0xc8>
 801889a:	2322      	movs	r3, #34	@ 0x22
 801889c:	f8ce 3000 	str.w	r3, [lr]
 80188a0:	4630      	mov	r0, r6
 80188a2:	b932      	cbnz	r2, 80188b2 <_strtoul_l.constprop.0+0xd2>
 80188a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188a8:	b107      	cbz	r7, 80188ac <_strtoul_l.constprop.0+0xcc>
 80188aa:	4240      	negs	r0, r0
 80188ac:	2a00      	cmp	r2, #0
 80188ae:	d0f9      	beq.n	80188a4 <_strtoul_l.constprop.0+0xc4>
 80188b0:	b106      	cbz	r6, 80188b4 <_strtoul_l.constprop.0+0xd4>
 80188b2:	1e69      	subs	r1, r5, #1
 80188b4:	6011      	str	r1, [r2, #0]
 80188b6:	e7f5      	b.n	80188a4 <_strtoul_l.constprop.0+0xc4>
 80188b8:	0801cd44 	.word	0x0801cd44

080188bc <strtoul>:
 80188bc:	4613      	mov	r3, r2
 80188be:	460a      	mov	r2, r1
 80188c0:	4601      	mov	r1, r0
 80188c2:	4802      	ldr	r0, [pc, #8]	@ (80188cc <strtoul+0x10>)
 80188c4:	6800      	ldr	r0, [r0, #0]
 80188c6:	f7ff bf8b 	b.w	80187e0 <_strtoul_l.constprop.0>
 80188ca:	bf00      	nop
 80188cc:	20000a6c 	.word	0x20000a6c

080188d0 <__cvt>:
 80188d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80188d4:	ec57 6b10 	vmov	r6, r7, d0
 80188d8:	2f00      	cmp	r7, #0
 80188da:	460c      	mov	r4, r1
 80188dc:	4619      	mov	r1, r3
 80188de:	463b      	mov	r3, r7
 80188e0:	bfbb      	ittet	lt
 80188e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80188e6:	461f      	movlt	r7, r3
 80188e8:	2300      	movge	r3, #0
 80188ea:	232d      	movlt	r3, #45	@ 0x2d
 80188ec:	700b      	strb	r3, [r1, #0]
 80188ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80188f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80188f4:	4691      	mov	r9, r2
 80188f6:	f023 0820 	bic.w	r8, r3, #32
 80188fa:	bfbc      	itt	lt
 80188fc:	4632      	movlt	r2, r6
 80188fe:	4616      	movlt	r6, r2
 8018900:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018904:	d005      	beq.n	8018912 <__cvt+0x42>
 8018906:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801890a:	d100      	bne.n	801890e <__cvt+0x3e>
 801890c:	3401      	adds	r4, #1
 801890e:	2102      	movs	r1, #2
 8018910:	e000      	b.n	8018914 <__cvt+0x44>
 8018912:	2103      	movs	r1, #3
 8018914:	ab03      	add	r3, sp, #12
 8018916:	9301      	str	r3, [sp, #4]
 8018918:	ab02      	add	r3, sp, #8
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	ec47 6b10 	vmov	d0, r6, r7
 8018920:	4653      	mov	r3, sl
 8018922:	4622      	mov	r2, r4
 8018924:	f001 f8d4 	bl	8019ad0 <_dtoa_r>
 8018928:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801892c:	4605      	mov	r5, r0
 801892e:	d119      	bne.n	8018964 <__cvt+0x94>
 8018930:	f019 0f01 	tst.w	r9, #1
 8018934:	d00e      	beq.n	8018954 <__cvt+0x84>
 8018936:	eb00 0904 	add.w	r9, r0, r4
 801893a:	2200      	movs	r2, #0
 801893c:	2300      	movs	r3, #0
 801893e:	4630      	mov	r0, r6
 8018940:	4639      	mov	r1, r7
 8018942:	f7e8 f8d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8018946:	b108      	cbz	r0, 801894c <__cvt+0x7c>
 8018948:	f8cd 900c 	str.w	r9, [sp, #12]
 801894c:	2230      	movs	r2, #48	@ 0x30
 801894e:	9b03      	ldr	r3, [sp, #12]
 8018950:	454b      	cmp	r3, r9
 8018952:	d31e      	bcc.n	8018992 <__cvt+0xc2>
 8018954:	9b03      	ldr	r3, [sp, #12]
 8018956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018958:	1b5b      	subs	r3, r3, r5
 801895a:	4628      	mov	r0, r5
 801895c:	6013      	str	r3, [r2, #0]
 801895e:	b004      	add	sp, #16
 8018960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018964:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018968:	eb00 0904 	add.w	r9, r0, r4
 801896c:	d1e5      	bne.n	801893a <__cvt+0x6a>
 801896e:	7803      	ldrb	r3, [r0, #0]
 8018970:	2b30      	cmp	r3, #48	@ 0x30
 8018972:	d10a      	bne.n	801898a <__cvt+0xba>
 8018974:	2200      	movs	r2, #0
 8018976:	2300      	movs	r3, #0
 8018978:	4630      	mov	r0, r6
 801897a:	4639      	mov	r1, r7
 801897c:	f7e8 f8b4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018980:	b918      	cbnz	r0, 801898a <__cvt+0xba>
 8018982:	f1c4 0401 	rsb	r4, r4, #1
 8018986:	f8ca 4000 	str.w	r4, [sl]
 801898a:	f8da 3000 	ldr.w	r3, [sl]
 801898e:	4499      	add	r9, r3
 8018990:	e7d3      	b.n	801893a <__cvt+0x6a>
 8018992:	1c59      	adds	r1, r3, #1
 8018994:	9103      	str	r1, [sp, #12]
 8018996:	701a      	strb	r2, [r3, #0]
 8018998:	e7d9      	b.n	801894e <__cvt+0x7e>

0801899a <__exponent>:
 801899a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801899c:	2900      	cmp	r1, #0
 801899e:	bfba      	itte	lt
 80189a0:	4249      	neglt	r1, r1
 80189a2:	232d      	movlt	r3, #45	@ 0x2d
 80189a4:	232b      	movge	r3, #43	@ 0x2b
 80189a6:	2909      	cmp	r1, #9
 80189a8:	7002      	strb	r2, [r0, #0]
 80189aa:	7043      	strb	r3, [r0, #1]
 80189ac:	dd29      	ble.n	8018a02 <__exponent+0x68>
 80189ae:	f10d 0307 	add.w	r3, sp, #7
 80189b2:	461d      	mov	r5, r3
 80189b4:	270a      	movs	r7, #10
 80189b6:	461a      	mov	r2, r3
 80189b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80189bc:	fb07 1416 	mls	r4, r7, r6, r1
 80189c0:	3430      	adds	r4, #48	@ 0x30
 80189c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80189c6:	460c      	mov	r4, r1
 80189c8:	2c63      	cmp	r4, #99	@ 0x63
 80189ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80189ce:	4631      	mov	r1, r6
 80189d0:	dcf1      	bgt.n	80189b6 <__exponent+0x1c>
 80189d2:	3130      	adds	r1, #48	@ 0x30
 80189d4:	1e94      	subs	r4, r2, #2
 80189d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80189da:	1c41      	adds	r1, r0, #1
 80189dc:	4623      	mov	r3, r4
 80189de:	42ab      	cmp	r3, r5
 80189e0:	d30a      	bcc.n	80189f8 <__exponent+0x5e>
 80189e2:	f10d 0309 	add.w	r3, sp, #9
 80189e6:	1a9b      	subs	r3, r3, r2
 80189e8:	42ac      	cmp	r4, r5
 80189ea:	bf88      	it	hi
 80189ec:	2300      	movhi	r3, #0
 80189ee:	3302      	adds	r3, #2
 80189f0:	4403      	add	r3, r0
 80189f2:	1a18      	subs	r0, r3, r0
 80189f4:	b003      	add	sp, #12
 80189f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80189fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018a00:	e7ed      	b.n	80189de <__exponent+0x44>
 8018a02:	2330      	movs	r3, #48	@ 0x30
 8018a04:	3130      	adds	r1, #48	@ 0x30
 8018a06:	7083      	strb	r3, [r0, #2]
 8018a08:	70c1      	strb	r1, [r0, #3]
 8018a0a:	1d03      	adds	r3, r0, #4
 8018a0c:	e7f1      	b.n	80189f2 <__exponent+0x58>
	...

08018a10 <_printf_float>:
 8018a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a14:	b08d      	sub	sp, #52	@ 0x34
 8018a16:	460c      	mov	r4, r1
 8018a18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018a1c:	4616      	mov	r6, r2
 8018a1e:	461f      	mov	r7, r3
 8018a20:	4605      	mov	r5, r0
 8018a22:	f000 ff29 	bl	8019878 <_localeconv_r>
 8018a26:	6803      	ldr	r3, [r0, #0]
 8018a28:	9304      	str	r3, [sp, #16]
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f7e7 fc30 	bl	8000290 <strlen>
 8018a30:	2300      	movs	r3, #0
 8018a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8018a34:	f8d8 3000 	ldr.w	r3, [r8]
 8018a38:	9005      	str	r0, [sp, #20]
 8018a3a:	3307      	adds	r3, #7
 8018a3c:	f023 0307 	bic.w	r3, r3, #7
 8018a40:	f103 0208 	add.w	r2, r3, #8
 8018a44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018a48:	f8d4 b000 	ldr.w	fp, [r4]
 8018a4c:	f8c8 2000 	str.w	r2, [r8]
 8018a50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018a54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018a58:	9307      	str	r3, [sp, #28]
 8018a5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8018a5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8018a62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018a66:	4b9c      	ldr	r3, [pc, #624]	@ (8018cd8 <_printf_float+0x2c8>)
 8018a68:	f04f 32ff 	mov.w	r2, #4294967295
 8018a6c:	f7e8 f86e 	bl	8000b4c <__aeabi_dcmpun>
 8018a70:	bb70      	cbnz	r0, 8018ad0 <_printf_float+0xc0>
 8018a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018a76:	4b98      	ldr	r3, [pc, #608]	@ (8018cd8 <_printf_float+0x2c8>)
 8018a78:	f04f 32ff 	mov.w	r2, #4294967295
 8018a7c:	f7e8 f848 	bl	8000b10 <__aeabi_dcmple>
 8018a80:	bb30      	cbnz	r0, 8018ad0 <_printf_float+0xc0>
 8018a82:	2200      	movs	r2, #0
 8018a84:	2300      	movs	r3, #0
 8018a86:	4640      	mov	r0, r8
 8018a88:	4649      	mov	r1, r9
 8018a8a:	f7e8 f837 	bl	8000afc <__aeabi_dcmplt>
 8018a8e:	b110      	cbz	r0, 8018a96 <_printf_float+0x86>
 8018a90:	232d      	movs	r3, #45	@ 0x2d
 8018a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018a96:	4a91      	ldr	r2, [pc, #580]	@ (8018cdc <_printf_float+0x2cc>)
 8018a98:	4b91      	ldr	r3, [pc, #580]	@ (8018ce0 <_printf_float+0x2d0>)
 8018a9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018a9e:	bf94      	ite	ls
 8018aa0:	4690      	movls	r8, r2
 8018aa2:	4698      	movhi	r8, r3
 8018aa4:	2303      	movs	r3, #3
 8018aa6:	6123      	str	r3, [r4, #16]
 8018aa8:	f02b 0304 	bic.w	r3, fp, #4
 8018aac:	6023      	str	r3, [r4, #0]
 8018aae:	f04f 0900 	mov.w	r9, #0
 8018ab2:	9700      	str	r7, [sp, #0]
 8018ab4:	4633      	mov	r3, r6
 8018ab6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018ab8:	4621      	mov	r1, r4
 8018aba:	4628      	mov	r0, r5
 8018abc:	f000 f9d2 	bl	8018e64 <_printf_common>
 8018ac0:	3001      	adds	r0, #1
 8018ac2:	f040 808d 	bne.w	8018be0 <_printf_float+0x1d0>
 8018ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8018aca:	b00d      	add	sp, #52	@ 0x34
 8018acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad0:	4642      	mov	r2, r8
 8018ad2:	464b      	mov	r3, r9
 8018ad4:	4640      	mov	r0, r8
 8018ad6:	4649      	mov	r1, r9
 8018ad8:	f7e8 f838 	bl	8000b4c <__aeabi_dcmpun>
 8018adc:	b140      	cbz	r0, 8018af0 <_printf_float+0xe0>
 8018ade:	464b      	mov	r3, r9
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	bfbc      	itt	lt
 8018ae4:	232d      	movlt	r3, #45	@ 0x2d
 8018ae6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018aea:	4a7e      	ldr	r2, [pc, #504]	@ (8018ce4 <_printf_float+0x2d4>)
 8018aec:	4b7e      	ldr	r3, [pc, #504]	@ (8018ce8 <_printf_float+0x2d8>)
 8018aee:	e7d4      	b.n	8018a9a <_printf_float+0x8a>
 8018af0:	6863      	ldr	r3, [r4, #4]
 8018af2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8018af6:	9206      	str	r2, [sp, #24]
 8018af8:	1c5a      	adds	r2, r3, #1
 8018afa:	d13b      	bne.n	8018b74 <_printf_float+0x164>
 8018afc:	2306      	movs	r3, #6
 8018afe:	6063      	str	r3, [r4, #4]
 8018b00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8018b04:	2300      	movs	r3, #0
 8018b06:	6022      	str	r2, [r4, #0]
 8018b08:	9303      	str	r3, [sp, #12]
 8018b0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8018b0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8018b10:	ab09      	add	r3, sp, #36	@ 0x24
 8018b12:	9300      	str	r3, [sp, #0]
 8018b14:	6861      	ldr	r1, [r4, #4]
 8018b16:	ec49 8b10 	vmov	d0, r8, r9
 8018b1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018b1e:	4628      	mov	r0, r5
 8018b20:	f7ff fed6 	bl	80188d0 <__cvt>
 8018b24:	9b06      	ldr	r3, [sp, #24]
 8018b26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018b28:	2b47      	cmp	r3, #71	@ 0x47
 8018b2a:	4680      	mov	r8, r0
 8018b2c:	d129      	bne.n	8018b82 <_printf_float+0x172>
 8018b2e:	1cc8      	adds	r0, r1, #3
 8018b30:	db02      	blt.n	8018b38 <_printf_float+0x128>
 8018b32:	6863      	ldr	r3, [r4, #4]
 8018b34:	4299      	cmp	r1, r3
 8018b36:	dd41      	ble.n	8018bbc <_printf_float+0x1ac>
 8018b38:	f1aa 0a02 	sub.w	sl, sl, #2
 8018b3c:	fa5f fa8a 	uxtb.w	sl, sl
 8018b40:	3901      	subs	r1, #1
 8018b42:	4652      	mov	r2, sl
 8018b44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018b48:	9109      	str	r1, [sp, #36]	@ 0x24
 8018b4a:	f7ff ff26 	bl	801899a <__exponent>
 8018b4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018b50:	1813      	adds	r3, r2, r0
 8018b52:	2a01      	cmp	r2, #1
 8018b54:	4681      	mov	r9, r0
 8018b56:	6123      	str	r3, [r4, #16]
 8018b58:	dc02      	bgt.n	8018b60 <_printf_float+0x150>
 8018b5a:	6822      	ldr	r2, [r4, #0]
 8018b5c:	07d2      	lsls	r2, r2, #31
 8018b5e:	d501      	bpl.n	8018b64 <_printf_float+0x154>
 8018b60:	3301      	adds	r3, #1
 8018b62:	6123      	str	r3, [r4, #16]
 8018b64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d0a2      	beq.n	8018ab2 <_printf_float+0xa2>
 8018b6c:	232d      	movs	r3, #45	@ 0x2d
 8018b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018b72:	e79e      	b.n	8018ab2 <_printf_float+0xa2>
 8018b74:	9a06      	ldr	r2, [sp, #24]
 8018b76:	2a47      	cmp	r2, #71	@ 0x47
 8018b78:	d1c2      	bne.n	8018b00 <_printf_float+0xf0>
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d1c0      	bne.n	8018b00 <_printf_float+0xf0>
 8018b7e:	2301      	movs	r3, #1
 8018b80:	e7bd      	b.n	8018afe <_printf_float+0xee>
 8018b82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018b86:	d9db      	bls.n	8018b40 <_printf_float+0x130>
 8018b88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8018b8c:	d118      	bne.n	8018bc0 <_printf_float+0x1b0>
 8018b8e:	2900      	cmp	r1, #0
 8018b90:	6863      	ldr	r3, [r4, #4]
 8018b92:	dd0b      	ble.n	8018bac <_printf_float+0x19c>
 8018b94:	6121      	str	r1, [r4, #16]
 8018b96:	b913      	cbnz	r3, 8018b9e <_printf_float+0x18e>
 8018b98:	6822      	ldr	r2, [r4, #0]
 8018b9a:	07d0      	lsls	r0, r2, #31
 8018b9c:	d502      	bpl.n	8018ba4 <_printf_float+0x194>
 8018b9e:	3301      	adds	r3, #1
 8018ba0:	440b      	add	r3, r1
 8018ba2:	6123      	str	r3, [r4, #16]
 8018ba4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018ba6:	f04f 0900 	mov.w	r9, #0
 8018baa:	e7db      	b.n	8018b64 <_printf_float+0x154>
 8018bac:	b913      	cbnz	r3, 8018bb4 <_printf_float+0x1a4>
 8018bae:	6822      	ldr	r2, [r4, #0]
 8018bb0:	07d2      	lsls	r2, r2, #31
 8018bb2:	d501      	bpl.n	8018bb8 <_printf_float+0x1a8>
 8018bb4:	3302      	adds	r3, #2
 8018bb6:	e7f4      	b.n	8018ba2 <_printf_float+0x192>
 8018bb8:	2301      	movs	r3, #1
 8018bba:	e7f2      	b.n	8018ba2 <_printf_float+0x192>
 8018bbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8018bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018bc2:	4299      	cmp	r1, r3
 8018bc4:	db05      	blt.n	8018bd2 <_printf_float+0x1c2>
 8018bc6:	6823      	ldr	r3, [r4, #0]
 8018bc8:	6121      	str	r1, [r4, #16]
 8018bca:	07d8      	lsls	r0, r3, #31
 8018bcc:	d5ea      	bpl.n	8018ba4 <_printf_float+0x194>
 8018bce:	1c4b      	adds	r3, r1, #1
 8018bd0:	e7e7      	b.n	8018ba2 <_printf_float+0x192>
 8018bd2:	2900      	cmp	r1, #0
 8018bd4:	bfd4      	ite	le
 8018bd6:	f1c1 0202 	rsble	r2, r1, #2
 8018bda:	2201      	movgt	r2, #1
 8018bdc:	4413      	add	r3, r2
 8018bde:	e7e0      	b.n	8018ba2 <_printf_float+0x192>
 8018be0:	6823      	ldr	r3, [r4, #0]
 8018be2:	055a      	lsls	r2, r3, #21
 8018be4:	d407      	bmi.n	8018bf6 <_printf_float+0x1e6>
 8018be6:	6923      	ldr	r3, [r4, #16]
 8018be8:	4642      	mov	r2, r8
 8018bea:	4631      	mov	r1, r6
 8018bec:	4628      	mov	r0, r5
 8018bee:	47b8      	blx	r7
 8018bf0:	3001      	adds	r0, #1
 8018bf2:	d12b      	bne.n	8018c4c <_printf_float+0x23c>
 8018bf4:	e767      	b.n	8018ac6 <_printf_float+0xb6>
 8018bf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018bfa:	f240 80dd 	bls.w	8018db8 <_printf_float+0x3a8>
 8018bfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018c02:	2200      	movs	r2, #0
 8018c04:	2300      	movs	r3, #0
 8018c06:	f7e7 ff6f 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	d033      	beq.n	8018c76 <_printf_float+0x266>
 8018c0e:	4a37      	ldr	r2, [pc, #220]	@ (8018cec <_printf_float+0x2dc>)
 8018c10:	2301      	movs	r3, #1
 8018c12:	4631      	mov	r1, r6
 8018c14:	4628      	mov	r0, r5
 8018c16:	47b8      	blx	r7
 8018c18:	3001      	adds	r0, #1
 8018c1a:	f43f af54 	beq.w	8018ac6 <_printf_float+0xb6>
 8018c1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018c22:	4543      	cmp	r3, r8
 8018c24:	db02      	blt.n	8018c2c <_printf_float+0x21c>
 8018c26:	6823      	ldr	r3, [r4, #0]
 8018c28:	07d8      	lsls	r0, r3, #31
 8018c2a:	d50f      	bpl.n	8018c4c <_printf_float+0x23c>
 8018c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c30:	4631      	mov	r1, r6
 8018c32:	4628      	mov	r0, r5
 8018c34:	47b8      	blx	r7
 8018c36:	3001      	adds	r0, #1
 8018c38:	f43f af45 	beq.w	8018ac6 <_printf_float+0xb6>
 8018c3c:	f04f 0900 	mov.w	r9, #0
 8018c40:	f108 38ff 	add.w	r8, r8, #4294967295
 8018c44:	f104 0a1a 	add.w	sl, r4, #26
 8018c48:	45c8      	cmp	r8, r9
 8018c4a:	dc09      	bgt.n	8018c60 <_printf_float+0x250>
 8018c4c:	6823      	ldr	r3, [r4, #0]
 8018c4e:	079b      	lsls	r3, r3, #30
 8018c50:	f100 8103 	bmi.w	8018e5a <_printf_float+0x44a>
 8018c54:	68e0      	ldr	r0, [r4, #12]
 8018c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c58:	4298      	cmp	r0, r3
 8018c5a:	bfb8      	it	lt
 8018c5c:	4618      	movlt	r0, r3
 8018c5e:	e734      	b.n	8018aca <_printf_float+0xba>
 8018c60:	2301      	movs	r3, #1
 8018c62:	4652      	mov	r2, sl
 8018c64:	4631      	mov	r1, r6
 8018c66:	4628      	mov	r0, r5
 8018c68:	47b8      	blx	r7
 8018c6a:	3001      	adds	r0, #1
 8018c6c:	f43f af2b 	beq.w	8018ac6 <_printf_float+0xb6>
 8018c70:	f109 0901 	add.w	r9, r9, #1
 8018c74:	e7e8      	b.n	8018c48 <_printf_float+0x238>
 8018c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	dc39      	bgt.n	8018cf0 <_printf_float+0x2e0>
 8018c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8018cec <_printf_float+0x2dc>)
 8018c7e:	2301      	movs	r3, #1
 8018c80:	4631      	mov	r1, r6
 8018c82:	4628      	mov	r0, r5
 8018c84:	47b8      	blx	r7
 8018c86:	3001      	adds	r0, #1
 8018c88:	f43f af1d 	beq.w	8018ac6 <_printf_float+0xb6>
 8018c8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018c90:	ea59 0303 	orrs.w	r3, r9, r3
 8018c94:	d102      	bne.n	8018c9c <_printf_float+0x28c>
 8018c96:	6823      	ldr	r3, [r4, #0]
 8018c98:	07d9      	lsls	r1, r3, #31
 8018c9a:	d5d7      	bpl.n	8018c4c <_printf_float+0x23c>
 8018c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ca0:	4631      	mov	r1, r6
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	47b8      	blx	r7
 8018ca6:	3001      	adds	r0, #1
 8018ca8:	f43f af0d 	beq.w	8018ac6 <_printf_float+0xb6>
 8018cac:	f04f 0a00 	mov.w	sl, #0
 8018cb0:	f104 0b1a 	add.w	fp, r4, #26
 8018cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cb6:	425b      	negs	r3, r3
 8018cb8:	4553      	cmp	r3, sl
 8018cba:	dc01      	bgt.n	8018cc0 <_printf_float+0x2b0>
 8018cbc:	464b      	mov	r3, r9
 8018cbe:	e793      	b.n	8018be8 <_printf_float+0x1d8>
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	465a      	mov	r2, fp
 8018cc4:	4631      	mov	r1, r6
 8018cc6:	4628      	mov	r0, r5
 8018cc8:	47b8      	blx	r7
 8018cca:	3001      	adds	r0, #1
 8018ccc:	f43f aefb 	beq.w	8018ac6 <_printf_float+0xb6>
 8018cd0:	f10a 0a01 	add.w	sl, sl, #1
 8018cd4:	e7ee      	b.n	8018cb4 <_printf_float+0x2a4>
 8018cd6:	bf00      	nop
 8018cd8:	7fefffff 	.word	0x7fefffff
 8018cdc:	0801ce44 	.word	0x0801ce44
 8018ce0:	0801ce48 	.word	0x0801ce48
 8018ce4:	0801ce4c 	.word	0x0801ce4c
 8018ce8:	0801ce50 	.word	0x0801ce50
 8018cec:	0801ce54 	.word	0x0801ce54
 8018cf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018cf2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018cf6:	4553      	cmp	r3, sl
 8018cf8:	bfa8      	it	ge
 8018cfa:	4653      	movge	r3, sl
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	4699      	mov	r9, r3
 8018d00:	dc36      	bgt.n	8018d70 <_printf_float+0x360>
 8018d02:	f04f 0b00 	mov.w	fp, #0
 8018d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018d0a:	f104 021a 	add.w	r2, r4, #26
 8018d0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018d10:	9306      	str	r3, [sp, #24]
 8018d12:	eba3 0309 	sub.w	r3, r3, r9
 8018d16:	455b      	cmp	r3, fp
 8018d18:	dc31      	bgt.n	8018d7e <_printf_float+0x36e>
 8018d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d1c:	459a      	cmp	sl, r3
 8018d1e:	dc3a      	bgt.n	8018d96 <_printf_float+0x386>
 8018d20:	6823      	ldr	r3, [r4, #0]
 8018d22:	07da      	lsls	r2, r3, #31
 8018d24:	d437      	bmi.n	8018d96 <_printf_float+0x386>
 8018d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d28:	ebaa 0903 	sub.w	r9, sl, r3
 8018d2c:	9b06      	ldr	r3, [sp, #24]
 8018d2e:	ebaa 0303 	sub.w	r3, sl, r3
 8018d32:	4599      	cmp	r9, r3
 8018d34:	bfa8      	it	ge
 8018d36:	4699      	movge	r9, r3
 8018d38:	f1b9 0f00 	cmp.w	r9, #0
 8018d3c:	dc33      	bgt.n	8018da6 <_printf_float+0x396>
 8018d3e:	f04f 0800 	mov.w	r8, #0
 8018d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018d46:	f104 0b1a 	add.w	fp, r4, #26
 8018d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8018d50:	eba3 0309 	sub.w	r3, r3, r9
 8018d54:	4543      	cmp	r3, r8
 8018d56:	f77f af79 	ble.w	8018c4c <_printf_float+0x23c>
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	465a      	mov	r2, fp
 8018d5e:	4631      	mov	r1, r6
 8018d60:	4628      	mov	r0, r5
 8018d62:	47b8      	blx	r7
 8018d64:	3001      	adds	r0, #1
 8018d66:	f43f aeae 	beq.w	8018ac6 <_printf_float+0xb6>
 8018d6a:	f108 0801 	add.w	r8, r8, #1
 8018d6e:	e7ec      	b.n	8018d4a <_printf_float+0x33a>
 8018d70:	4642      	mov	r2, r8
 8018d72:	4631      	mov	r1, r6
 8018d74:	4628      	mov	r0, r5
 8018d76:	47b8      	blx	r7
 8018d78:	3001      	adds	r0, #1
 8018d7a:	d1c2      	bne.n	8018d02 <_printf_float+0x2f2>
 8018d7c:	e6a3      	b.n	8018ac6 <_printf_float+0xb6>
 8018d7e:	2301      	movs	r3, #1
 8018d80:	4631      	mov	r1, r6
 8018d82:	4628      	mov	r0, r5
 8018d84:	9206      	str	r2, [sp, #24]
 8018d86:	47b8      	blx	r7
 8018d88:	3001      	adds	r0, #1
 8018d8a:	f43f ae9c 	beq.w	8018ac6 <_printf_float+0xb6>
 8018d8e:	9a06      	ldr	r2, [sp, #24]
 8018d90:	f10b 0b01 	add.w	fp, fp, #1
 8018d94:	e7bb      	b.n	8018d0e <_printf_float+0x2fe>
 8018d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018d9a:	4631      	mov	r1, r6
 8018d9c:	4628      	mov	r0, r5
 8018d9e:	47b8      	blx	r7
 8018da0:	3001      	adds	r0, #1
 8018da2:	d1c0      	bne.n	8018d26 <_printf_float+0x316>
 8018da4:	e68f      	b.n	8018ac6 <_printf_float+0xb6>
 8018da6:	9a06      	ldr	r2, [sp, #24]
 8018da8:	464b      	mov	r3, r9
 8018daa:	4442      	add	r2, r8
 8018dac:	4631      	mov	r1, r6
 8018dae:	4628      	mov	r0, r5
 8018db0:	47b8      	blx	r7
 8018db2:	3001      	adds	r0, #1
 8018db4:	d1c3      	bne.n	8018d3e <_printf_float+0x32e>
 8018db6:	e686      	b.n	8018ac6 <_printf_float+0xb6>
 8018db8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018dbc:	f1ba 0f01 	cmp.w	sl, #1
 8018dc0:	dc01      	bgt.n	8018dc6 <_printf_float+0x3b6>
 8018dc2:	07db      	lsls	r3, r3, #31
 8018dc4:	d536      	bpl.n	8018e34 <_printf_float+0x424>
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	4642      	mov	r2, r8
 8018dca:	4631      	mov	r1, r6
 8018dcc:	4628      	mov	r0, r5
 8018dce:	47b8      	blx	r7
 8018dd0:	3001      	adds	r0, #1
 8018dd2:	f43f ae78 	beq.w	8018ac6 <_printf_float+0xb6>
 8018dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018dda:	4631      	mov	r1, r6
 8018ddc:	4628      	mov	r0, r5
 8018dde:	47b8      	blx	r7
 8018de0:	3001      	adds	r0, #1
 8018de2:	f43f ae70 	beq.w	8018ac6 <_printf_float+0xb6>
 8018de6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018dea:	2200      	movs	r2, #0
 8018dec:	2300      	movs	r3, #0
 8018dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018df2:	f7e7 fe79 	bl	8000ae8 <__aeabi_dcmpeq>
 8018df6:	b9c0      	cbnz	r0, 8018e2a <_printf_float+0x41a>
 8018df8:	4653      	mov	r3, sl
 8018dfa:	f108 0201 	add.w	r2, r8, #1
 8018dfe:	4631      	mov	r1, r6
 8018e00:	4628      	mov	r0, r5
 8018e02:	47b8      	blx	r7
 8018e04:	3001      	adds	r0, #1
 8018e06:	d10c      	bne.n	8018e22 <_printf_float+0x412>
 8018e08:	e65d      	b.n	8018ac6 <_printf_float+0xb6>
 8018e0a:	2301      	movs	r3, #1
 8018e0c:	465a      	mov	r2, fp
 8018e0e:	4631      	mov	r1, r6
 8018e10:	4628      	mov	r0, r5
 8018e12:	47b8      	blx	r7
 8018e14:	3001      	adds	r0, #1
 8018e16:	f43f ae56 	beq.w	8018ac6 <_printf_float+0xb6>
 8018e1a:	f108 0801 	add.w	r8, r8, #1
 8018e1e:	45d0      	cmp	r8, sl
 8018e20:	dbf3      	blt.n	8018e0a <_printf_float+0x3fa>
 8018e22:	464b      	mov	r3, r9
 8018e24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018e28:	e6df      	b.n	8018bea <_printf_float+0x1da>
 8018e2a:	f04f 0800 	mov.w	r8, #0
 8018e2e:	f104 0b1a 	add.w	fp, r4, #26
 8018e32:	e7f4      	b.n	8018e1e <_printf_float+0x40e>
 8018e34:	2301      	movs	r3, #1
 8018e36:	4642      	mov	r2, r8
 8018e38:	e7e1      	b.n	8018dfe <_printf_float+0x3ee>
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	464a      	mov	r2, r9
 8018e3e:	4631      	mov	r1, r6
 8018e40:	4628      	mov	r0, r5
 8018e42:	47b8      	blx	r7
 8018e44:	3001      	adds	r0, #1
 8018e46:	f43f ae3e 	beq.w	8018ac6 <_printf_float+0xb6>
 8018e4a:	f108 0801 	add.w	r8, r8, #1
 8018e4e:	68e3      	ldr	r3, [r4, #12]
 8018e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e52:	1a5b      	subs	r3, r3, r1
 8018e54:	4543      	cmp	r3, r8
 8018e56:	dcf0      	bgt.n	8018e3a <_printf_float+0x42a>
 8018e58:	e6fc      	b.n	8018c54 <_printf_float+0x244>
 8018e5a:	f04f 0800 	mov.w	r8, #0
 8018e5e:	f104 0919 	add.w	r9, r4, #25
 8018e62:	e7f4      	b.n	8018e4e <_printf_float+0x43e>

08018e64 <_printf_common>:
 8018e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e68:	4616      	mov	r6, r2
 8018e6a:	4698      	mov	r8, r3
 8018e6c:	688a      	ldr	r2, [r1, #8]
 8018e6e:	690b      	ldr	r3, [r1, #16]
 8018e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018e74:	4293      	cmp	r3, r2
 8018e76:	bfb8      	it	lt
 8018e78:	4613      	movlt	r3, r2
 8018e7a:	6033      	str	r3, [r6, #0]
 8018e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018e80:	4607      	mov	r7, r0
 8018e82:	460c      	mov	r4, r1
 8018e84:	b10a      	cbz	r2, 8018e8a <_printf_common+0x26>
 8018e86:	3301      	adds	r3, #1
 8018e88:	6033      	str	r3, [r6, #0]
 8018e8a:	6823      	ldr	r3, [r4, #0]
 8018e8c:	0699      	lsls	r1, r3, #26
 8018e8e:	bf42      	ittt	mi
 8018e90:	6833      	ldrmi	r3, [r6, #0]
 8018e92:	3302      	addmi	r3, #2
 8018e94:	6033      	strmi	r3, [r6, #0]
 8018e96:	6825      	ldr	r5, [r4, #0]
 8018e98:	f015 0506 	ands.w	r5, r5, #6
 8018e9c:	d106      	bne.n	8018eac <_printf_common+0x48>
 8018e9e:	f104 0a19 	add.w	sl, r4, #25
 8018ea2:	68e3      	ldr	r3, [r4, #12]
 8018ea4:	6832      	ldr	r2, [r6, #0]
 8018ea6:	1a9b      	subs	r3, r3, r2
 8018ea8:	42ab      	cmp	r3, r5
 8018eaa:	dc26      	bgt.n	8018efa <_printf_common+0x96>
 8018eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018eb0:	6822      	ldr	r2, [r4, #0]
 8018eb2:	3b00      	subs	r3, #0
 8018eb4:	bf18      	it	ne
 8018eb6:	2301      	movne	r3, #1
 8018eb8:	0692      	lsls	r2, r2, #26
 8018eba:	d42b      	bmi.n	8018f14 <_printf_common+0xb0>
 8018ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018ec0:	4641      	mov	r1, r8
 8018ec2:	4638      	mov	r0, r7
 8018ec4:	47c8      	blx	r9
 8018ec6:	3001      	adds	r0, #1
 8018ec8:	d01e      	beq.n	8018f08 <_printf_common+0xa4>
 8018eca:	6823      	ldr	r3, [r4, #0]
 8018ecc:	6922      	ldr	r2, [r4, #16]
 8018ece:	f003 0306 	and.w	r3, r3, #6
 8018ed2:	2b04      	cmp	r3, #4
 8018ed4:	bf02      	ittt	eq
 8018ed6:	68e5      	ldreq	r5, [r4, #12]
 8018ed8:	6833      	ldreq	r3, [r6, #0]
 8018eda:	1aed      	subeq	r5, r5, r3
 8018edc:	68a3      	ldr	r3, [r4, #8]
 8018ede:	bf0c      	ite	eq
 8018ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018ee4:	2500      	movne	r5, #0
 8018ee6:	4293      	cmp	r3, r2
 8018ee8:	bfc4      	itt	gt
 8018eea:	1a9b      	subgt	r3, r3, r2
 8018eec:	18ed      	addgt	r5, r5, r3
 8018eee:	2600      	movs	r6, #0
 8018ef0:	341a      	adds	r4, #26
 8018ef2:	42b5      	cmp	r5, r6
 8018ef4:	d11a      	bne.n	8018f2c <_printf_common+0xc8>
 8018ef6:	2000      	movs	r0, #0
 8018ef8:	e008      	b.n	8018f0c <_printf_common+0xa8>
 8018efa:	2301      	movs	r3, #1
 8018efc:	4652      	mov	r2, sl
 8018efe:	4641      	mov	r1, r8
 8018f00:	4638      	mov	r0, r7
 8018f02:	47c8      	blx	r9
 8018f04:	3001      	adds	r0, #1
 8018f06:	d103      	bne.n	8018f10 <_printf_common+0xac>
 8018f08:	f04f 30ff 	mov.w	r0, #4294967295
 8018f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f10:	3501      	adds	r5, #1
 8018f12:	e7c6      	b.n	8018ea2 <_printf_common+0x3e>
 8018f14:	18e1      	adds	r1, r4, r3
 8018f16:	1c5a      	adds	r2, r3, #1
 8018f18:	2030      	movs	r0, #48	@ 0x30
 8018f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018f1e:	4422      	add	r2, r4
 8018f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018f28:	3302      	adds	r3, #2
 8018f2a:	e7c7      	b.n	8018ebc <_printf_common+0x58>
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	4622      	mov	r2, r4
 8018f30:	4641      	mov	r1, r8
 8018f32:	4638      	mov	r0, r7
 8018f34:	47c8      	blx	r9
 8018f36:	3001      	adds	r0, #1
 8018f38:	d0e6      	beq.n	8018f08 <_printf_common+0xa4>
 8018f3a:	3601      	adds	r6, #1
 8018f3c:	e7d9      	b.n	8018ef2 <_printf_common+0x8e>
	...

08018f40 <_printf_i>:
 8018f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018f44:	7e0f      	ldrb	r7, [r1, #24]
 8018f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018f48:	2f78      	cmp	r7, #120	@ 0x78
 8018f4a:	4691      	mov	r9, r2
 8018f4c:	4680      	mov	r8, r0
 8018f4e:	460c      	mov	r4, r1
 8018f50:	469a      	mov	sl, r3
 8018f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018f56:	d807      	bhi.n	8018f68 <_printf_i+0x28>
 8018f58:	2f62      	cmp	r7, #98	@ 0x62
 8018f5a:	d80a      	bhi.n	8018f72 <_printf_i+0x32>
 8018f5c:	2f00      	cmp	r7, #0
 8018f5e:	f000 80d2 	beq.w	8019106 <_printf_i+0x1c6>
 8018f62:	2f58      	cmp	r7, #88	@ 0x58
 8018f64:	f000 80b9 	beq.w	80190da <_printf_i+0x19a>
 8018f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018f70:	e03a      	b.n	8018fe8 <_printf_i+0xa8>
 8018f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018f76:	2b15      	cmp	r3, #21
 8018f78:	d8f6      	bhi.n	8018f68 <_printf_i+0x28>
 8018f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8018f80 <_printf_i+0x40>)
 8018f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018f80:	08018fd9 	.word	0x08018fd9
 8018f84:	08018fed 	.word	0x08018fed
 8018f88:	08018f69 	.word	0x08018f69
 8018f8c:	08018f69 	.word	0x08018f69
 8018f90:	08018f69 	.word	0x08018f69
 8018f94:	08018f69 	.word	0x08018f69
 8018f98:	08018fed 	.word	0x08018fed
 8018f9c:	08018f69 	.word	0x08018f69
 8018fa0:	08018f69 	.word	0x08018f69
 8018fa4:	08018f69 	.word	0x08018f69
 8018fa8:	08018f69 	.word	0x08018f69
 8018fac:	080190ed 	.word	0x080190ed
 8018fb0:	08019017 	.word	0x08019017
 8018fb4:	080190a7 	.word	0x080190a7
 8018fb8:	08018f69 	.word	0x08018f69
 8018fbc:	08018f69 	.word	0x08018f69
 8018fc0:	0801910f 	.word	0x0801910f
 8018fc4:	08018f69 	.word	0x08018f69
 8018fc8:	08019017 	.word	0x08019017
 8018fcc:	08018f69 	.word	0x08018f69
 8018fd0:	08018f69 	.word	0x08018f69
 8018fd4:	080190af 	.word	0x080190af
 8018fd8:	6833      	ldr	r3, [r6, #0]
 8018fda:	1d1a      	adds	r2, r3, #4
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	6032      	str	r2, [r6, #0]
 8018fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018fe8:	2301      	movs	r3, #1
 8018fea:	e09d      	b.n	8019128 <_printf_i+0x1e8>
 8018fec:	6833      	ldr	r3, [r6, #0]
 8018fee:	6820      	ldr	r0, [r4, #0]
 8018ff0:	1d19      	adds	r1, r3, #4
 8018ff2:	6031      	str	r1, [r6, #0]
 8018ff4:	0606      	lsls	r6, r0, #24
 8018ff6:	d501      	bpl.n	8018ffc <_printf_i+0xbc>
 8018ff8:	681d      	ldr	r5, [r3, #0]
 8018ffa:	e003      	b.n	8019004 <_printf_i+0xc4>
 8018ffc:	0645      	lsls	r5, r0, #25
 8018ffe:	d5fb      	bpl.n	8018ff8 <_printf_i+0xb8>
 8019000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019004:	2d00      	cmp	r5, #0
 8019006:	da03      	bge.n	8019010 <_printf_i+0xd0>
 8019008:	232d      	movs	r3, #45	@ 0x2d
 801900a:	426d      	negs	r5, r5
 801900c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019010:	4859      	ldr	r0, [pc, #356]	@ (8019178 <_printf_i+0x238>)
 8019012:	230a      	movs	r3, #10
 8019014:	e011      	b.n	801903a <_printf_i+0xfa>
 8019016:	6821      	ldr	r1, [r4, #0]
 8019018:	6833      	ldr	r3, [r6, #0]
 801901a:	0608      	lsls	r0, r1, #24
 801901c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019020:	d402      	bmi.n	8019028 <_printf_i+0xe8>
 8019022:	0649      	lsls	r1, r1, #25
 8019024:	bf48      	it	mi
 8019026:	b2ad      	uxthmi	r5, r5
 8019028:	2f6f      	cmp	r7, #111	@ 0x6f
 801902a:	4853      	ldr	r0, [pc, #332]	@ (8019178 <_printf_i+0x238>)
 801902c:	6033      	str	r3, [r6, #0]
 801902e:	bf14      	ite	ne
 8019030:	230a      	movne	r3, #10
 8019032:	2308      	moveq	r3, #8
 8019034:	2100      	movs	r1, #0
 8019036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801903a:	6866      	ldr	r6, [r4, #4]
 801903c:	60a6      	str	r6, [r4, #8]
 801903e:	2e00      	cmp	r6, #0
 8019040:	bfa2      	ittt	ge
 8019042:	6821      	ldrge	r1, [r4, #0]
 8019044:	f021 0104 	bicge.w	r1, r1, #4
 8019048:	6021      	strge	r1, [r4, #0]
 801904a:	b90d      	cbnz	r5, 8019050 <_printf_i+0x110>
 801904c:	2e00      	cmp	r6, #0
 801904e:	d04b      	beq.n	80190e8 <_printf_i+0x1a8>
 8019050:	4616      	mov	r6, r2
 8019052:	fbb5 f1f3 	udiv	r1, r5, r3
 8019056:	fb03 5711 	mls	r7, r3, r1, r5
 801905a:	5dc7      	ldrb	r7, [r0, r7]
 801905c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019060:	462f      	mov	r7, r5
 8019062:	42bb      	cmp	r3, r7
 8019064:	460d      	mov	r5, r1
 8019066:	d9f4      	bls.n	8019052 <_printf_i+0x112>
 8019068:	2b08      	cmp	r3, #8
 801906a:	d10b      	bne.n	8019084 <_printf_i+0x144>
 801906c:	6823      	ldr	r3, [r4, #0]
 801906e:	07df      	lsls	r7, r3, #31
 8019070:	d508      	bpl.n	8019084 <_printf_i+0x144>
 8019072:	6923      	ldr	r3, [r4, #16]
 8019074:	6861      	ldr	r1, [r4, #4]
 8019076:	4299      	cmp	r1, r3
 8019078:	bfde      	ittt	le
 801907a:	2330      	movle	r3, #48	@ 0x30
 801907c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019084:	1b92      	subs	r2, r2, r6
 8019086:	6122      	str	r2, [r4, #16]
 8019088:	f8cd a000 	str.w	sl, [sp]
 801908c:	464b      	mov	r3, r9
 801908e:	aa03      	add	r2, sp, #12
 8019090:	4621      	mov	r1, r4
 8019092:	4640      	mov	r0, r8
 8019094:	f7ff fee6 	bl	8018e64 <_printf_common>
 8019098:	3001      	adds	r0, #1
 801909a:	d14a      	bne.n	8019132 <_printf_i+0x1f2>
 801909c:	f04f 30ff 	mov.w	r0, #4294967295
 80190a0:	b004      	add	sp, #16
 80190a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190a6:	6823      	ldr	r3, [r4, #0]
 80190a8:	f043 0320 	orr.w	r3, r3, #32
 80190ac:	6023      	str	r3, [r4, #0]
 80190ae:	4833      	ldr	r0, [pc, #204]	@ (801917c <_printf_i+0x23c>)
 80190b0:	2778      	movs	r7, #120	@ 0x78
 80190b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80190b6:	6823      	ldr	r3, [r4, #0]
 80190b8:	6831      	ldr	r1, [r6, #0]
 80190ba:	061f      	lsls	r7, r3, #24
 80190bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80190c0:	d402      	bmi.n	80190c8 <_printf_i+0x188>
 80190c2:	065f      	lsls	r7, r3, #25
 80190c4:	bf48      	it	mi
 80190c6:	b2ad      	uxthmi	r5, r5
 80190c8:	6031      	str	r1, [r6, #0]
 80190ca:	07d9      	lsls	r1, r3, #31
 80190cc:	bf44      	itt	mi
 80190ce:	f043 0320 	orrmi.w	r3, r3, #32
 80190d2:	6023      	strmi	r3, [r4, #0]
 80190d4:	b11d      	cbz	r5, 80190de <_printf_i+0x19e>
 80190d6:	2310      	movs	r3, #16
 80190d8:	e7ac      	b.n	8019034 <_printf_i+0xf4>
 80190da:	4827      	ldr	r0, [pc, #156]	@ (8019178 <_printf_i+0x238>)
 80190dc:	e7e9      	b.n	80190b2 <_printf_i+0x172>
 80190de:	6823      	ldr	r3, [r4, #0]
 80190e0:	f023 0320 	bic.w	r3, r3, #32
 80190e4:	6023      	str	r3, [r4, #0]
 80190e6:	e7f6      	b.n	80190d6 <_printf_i+0x196>
 80190e8:	4616      	mov	r6, r2
 80190ea:	e7bd      	b.n	8019068 <_printf_i+0x128>
 80190ec:	6833      	ldr	r3, [r6, #0]
 80190ee:	6825      	ldr	r5, [r4, #0]
 80190f0:	6961      	ldr	r1, [r4, #20]
 80190f2:	1d18      	adds	r0, r3, #4
 80190f4:	6030      	str	r0, [r6, #0]
 80190f6:	062e      	lsls	r6, r5, #24
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	d501      	bpl.n	8019100 <_printf_i+0x1c0>
 80190fc:	6019      	str	r1, [r3, #0]
 80190fe:	e002      	b.n	8019106 <_printf_i+0x1c6>
 8019100:	0668      	lsls	r0, r5, #25
 8019102:	d5fb      	bpl.n	80190fc <_printf_i+0x1bc>
 8019104:	8019      	strh	r1, [r3, #0]
 8019106:	2300      	movs	r3, #0
 8019108:	6123      	str	r3, [r4, #16]
 801910a:	4616      	mov	r6, r2
 801910c:	e7bc      	b.n	8019088 <_printf_i+0x148>
 801910e:	6833      	ldr	r3, [r6, #0]
 8019110:	1d1a      	adds	r2, r3, #4
 8019112:	6032      	str	r2, [r6, #0]
 8019114:	681e      	ldr	r6, [r3, #0]
 8019116:	6862      	ldr	r2, [r4, #4]
 8019118:	2100      	movs	r1, #0
 801911a:	4630      	mov	r0, r6
 801911c:	f7e7 f868 	bl	80001f0 <memchr>
 8019120:	b108      	cbz	r0, 8019126 <_printf_i+0x1e6>
 8019122:	1b80      	subs	r0, r0, r6
 8019124:	6060      	str	r0, [r4, #4]
 8019126:	6863      	ldr	r3, [r4, #4]
 8019128:	6123      	str	r3, [r4, #16]
 801912a:	2300      	movs	r3, #0
 801912c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019130:	e7aa      	b.n	8019088 <_printf_i+0x148>
 8019132:	6923      	ldr	r3, [r4, #16]
 8019134:	4632      	mov	r2, r6
 8019136:	4649      	mov	r1, r9
 8019138:	4640      	mov	r0, r8
 801913a:	47d0      	blx	sl
 801913c:	3001      	adds	r0, #1
 801913e:	d0ad      	beq.n	801909c <_printf_i+0x15c>
 8019140:	6823      	ldr	r3, [r4, #0]
 8019142:	079b      	lsls	r3, r3, #30
 8019144:	d413      	bmi.n	801916e <_printf_i+0x22e>
 8019146:	68e0      	ldr	r0, [r4, #12]
 8019148:	9b03      	ldr	r3, [sp, #12]
 801914a:	4298      	cmp	r0, r3
 801914c:	bfb8      	it	lt
 801914e:	4618      	movlt	r0, r3
 8019150:	e7a6      	b.n	80190a0 <_printf_i+0x160>
 8019152:	2301      	movs	r3, #1
 8019154:	4632      	mov	r2, r6
 8019156:	4649      	mov	r1, r9
 8019158:	4640      	mov	r0, r8
 801915a:	47d0      	blx	sl
 801915c:	3001      	adds	r0, #1
 801915e:	d09d      	beq.n	801909c <_printf_i+0x15c>
 8019160:	3501      	adds	r5, #1
 8019162:	68e3      	ldr	r3, [r4, #12]
 8019164:	9903      	ldr	r1, [sp, #12]
 8019166:	1a5b      	subs	r3, r3, r1
 8019168:	42ab      	cmp	r3, r5
 801916a:	dcf2      	bgt.n	8019152 <_printf_i+0x212>
 801916c:	e7eb      	b.n	8019146 <_printf_i+0x206>
 801916e:	2500      	movs	r5, #0
 8019170:	f104 0619 	add.w	r6, r4, #25
 8019174:	e7f5      	b.n	8019162 <_printf_i+0x222>
 8019176:	bf00      	nop
 8019178:	0801ce56 	.word	0x0801ce56
 801917c:	0801ce67 	.word	0x0801ce67

08019180 <std>:
 8019180:	2300      	movs	r3, #0
 8019182:	b510      	push	{r4, lr}
 8019184:	4604      	mov	r4, r0
 8019186:	e9c0 3300 	strd	r3, r3, [r0]
 801918a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801918e:	6083      	str	r3, [r0, #8]
 8019190:	8181      	strh	r1, [r0, #12]
 8019192:	6643      	str	r3, [r0, #100]	@ 0x64
 8019194:	81c2      	strh	r2, [r0, #14]
 8019196:	6183      	str	r3, [r0, #24]
 8019198:	4619      	mov	r1, r3
 801919a:	2208      	movs	r2, #8
 801919c:	305c      	adds	r0, #92	@ 0x5c
 801919e:	f000 fb1b 	bl	80197d8 <memset>
 80191a2:	4b0d      	ldr	r3, [pc, #52]	@ (80191d8 <std+0x58>)
 80191a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80191a6:	4b0d      	ldr	r3, [pc, #52]	@ (80191dc <std+0x5c>)
 80191a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80191aa:	4b0d      	ldr	r3, [pc, #52]	@ (80191e0 <std+0x60>)
 80191ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80191ae:	4b0d      	ldr	r3, [pc, #52]	@ (80191e4 <std+0x64>)
 80191b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80191b2:	4b0d      	ldr	r3, [pc, #52]	@ (80191e8 <std+0x68>)
 80191b4:	6224      	str	r4, [r4, #32]
 80191b6:	429c      	cmp	r4, r3
 80191b8:	d006      	beq.n	80191c8 <std+0x48>
 80191ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80191be:	4294      	cmp	r4, r2
 80191c0:	d002      	beq.n	80191c8 <std+0x48>
 80191c2:	33d0      	adds	r3, #208	@ 0xd0
 80191c4:	429c      	cmp	r4, r3
 80191c6:	d105      	bne.n	80191d4 <std+0x54>
 80191c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80191cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191d0:	f000 bbd6 	b.w	8019980 <__retarget_lock_init_recursive>
 80191d4:	bd10      	pop	{r4, pc}
 80191d6:	bf00      	nop
 80191d8:	08019565 	.word	0x08019565
 80191dc:	08019587 	.word	0x08019587
 80191e0:	080195bf 	.word	0x080195bf
 80191e4:	080195e3 	.word	0x080195e3
 80191e8:	20014710 	.word	0x20014710

080191ec <stdio_exit_handler>:
 80191ec:	4a02      	ldr	r2, [pc, #8]	@ (80191f8 <stdio_exit_handler+0xc>)
 80191ee:	4903      	ldr	r1, [pc, #12]	@ (80191fc <stdio_exit_handler+0x10>)
 80191f0:	4803      	ldr	r0, [pc, #12]	@ (8019200 <stdio_exit_handler+0x14>)
 80191f2:	f000 b87b 	b.w	80192ec <_fwalk_sglue>
 80191f6:	bf00      	nop
 80191f8:	20000a60 	.word	0x20000a60
 80191fc:	0801b455 	.word	0x0801b455
 8019200:	20000a70 	.word	0x20000a70

08019204 <cleanup_stdio>:
 8019204:	6841      	ldr	r1, [r0, #4]
 8019206:	4b0c      	ldr	r3, [pc, #48]	@ (8019238 <cleanup_stdio+0x34>)
 8019208:	4299      	cmp	r1, r3
 801920a:	b510      	push	{r4, lr}
 801920c:	4604      	mov	r4, r0
 801920e:	d001      	beq.n	8019214 <cleanup_stdio+0x10>
 8019210:	f002 f920 	bl	801b454 <_fflush_r>
 8019214:	68a1      	ldr	r1, [r4, #8]
 8019216:	4b09      	ldr	r3, [pc, #36]	@ (801923c <cleanup_stdio+0x38>)
 8019218:	4299      	cmp	r1, r3
 801921a:	d002      	beq.n	8019222 <cleanup_stdio+0x1e>
 801921c:	4620      	mov	r0, r4
 801921e:	f002 f919 	bl	801b454 <_fflush_r>
 8019222:	68e1      	ldr	r1, [r4, #12]
 8019224:	4b06      	ldr	r3, [pc, #24]	@ (8019240 <cleanup_stdio+0x3c>)
 8019226:	4299      	cmp	r1, r3
 8019228:	d004      	beq.n	8019234 <cleanup_stdio+0x30>
 801922a:	4620      	mov	r0, r4
 801922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019230:	f002 b910 	b.w	801b454 <_fflush_r>
 8019234:	bd10      	pop	{r4, pc}
 8019236:	bf00      	nop
 8019238:	20014710 	.word	0x20014710
 801923c:	20014778 	.word	0x20014778
 8019240:	200147e0 	.word	0x200147e0

08019244 <global_stdio_init.part.0>:
 8019244:	b510      	push	{r4, lr}
 8019246:	4b0b      	ldr	r3, [pc, #44]	@ (8019274 <global_stdio_init.part.0+0x30>)
 8019248:	4c0b      	ldr	r4, [pc, #44]	@ (8019278 <global_stdio_init.part.0+0x34>)
 801924a:	4a0c      	ldr	r2, [pc, #48]	@ (801927c <global_stdio_init.part.0+0x38>)
 801924c:	601a      	str	r2, [r3, #0]
 801924e:	4620      	mov	r0, r4
 8019250:	2200      	movs	r2, #0
 8019252:	2104      	movs	r1, #4
 8019254:	f7ff ff94 	bl	8019180 <std>
 8019258:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801925c:	2201      	movs	r2, #1
 801925e:	2109      	movs	r1, #9
 8019260:	f7ff ff8e 	bl	8019180 <std>
 8019264:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019268:	2202      	movs	r2, #2
 801926a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801926e:	2112      	movs	r1, #18
 8019270:	f7ff bf86 	b.w	8019180 <std>
 8019274:	20014848 	.word	0x20014848
 8019278:	20014710 	.word	0x20014710
 801927c:	080191ed 	.word	0x080191ed

08019280 <__sfp_lock_acquire>:
 8019280:	4801      	ldr	r0, [pc, #4]	@ (8019288 <__sfp_lock_acquire+0x8>)
 8019282:	f000 bb7e 	b.w	8019982 <__retarget_lock_acquire_recursive>
 8019286:	bf00      	nop
 8019288:	20014852 	.word	0x20014852

0801928c <__sfp_lock_release>:
 801928c:	4801      	ldr	r0, [pc, #4]	@ (8019294 <__sfp_lock_release+0x8>)
 801928e:	f000 bb79 	b.w	8019984 <__retarget_lock_release_recursive>
 8019292:	bf00      	nop
 8019294:	20014852 	.word	0x20014852

08019298 <__sinit>:
 8019298:	b510      	push	{r4, lr}
 801929a:	4604      	mov	r4, r0
 801929c:	f7ff fff0 	bl	8019280 <__sfp_lock_acquire>
 80192a0:	6a23      	ldr	r3, [r4, #32]
 80192a2:	b11b      	cbz	r3, 80192ac <__sinit+0x14>
 80192a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192a8:	f7ff bff0 	b.w	801928c <__sfp_lock_release>
 80192ac:	4b04      	ldr	r3, [pc, #16]	@ (80192c0 <__sinit+0x28>)
 80192ae:	6223      	str	r3, [r4, #32]
 80192b0:	4b04      	ldr	r3, [pc, #16]	@ (80192c4 <__sinit+0x2c>)
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d1f5      	bne.n	80192a4 <__sinit+0xc>
 80192b8:	f7ff ffc4 	bl	8019244 <global_stdio_init.part.0>
 80192bc:	e7f2      	b.n	80192a4 <__sinit+0xc>
 80192be:	bf00      	nop
 80192c0:	08019205 	.word	0x08019205
 80192c4:	20014848 	.word	0x20014848

080192c8 <fiprintf>:
 80192c8:	b40e      	push	{r1, r2, r3}
 80192ca:	b503      	push	{r0, r1, lr}
 80192cc:	4601      	mov	r1, r0
 80192ce:	ab03      	add	r3, sp, #12
 80192d0:	4805      	ldr	r0, [pc, #20]	@ (80192e8 <fiprintf+0x20>)
 80192d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80192d6:	6800      	ldr	r0, [r0, #0]
 80192d8:	9301      	str	r3, [sp, #4]
 80192da:	f001 ff1f 	bl	801b11c <_vfiprintf_r>
 80192de:	b002      	add	sp, #8
 80192e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80192e4:	b003      	add	sp, #12
 80192e6:	4770      	bx	lr
 80192e8:	20000a6c 	.word	0x20000a6c

080192ec <_fwalk_sglue>:
 80192ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192f0:	4607      	mov	r7, r0
 80192f2:	4688      	mov	r8, r1
 80192f4:	4614      	mov	r4, r2
 80192f6:	2600      	movs	r6, #0
 80192f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80192fc:	f1b9 0901 	subs.w	r9, r9, #1
 8019300:	d505      	bpl.n	801930e <_fwalk_sglue+0x22>
 8019302:	6824      	ldr	r4, [r4, #0]
 8019304:	2c00      	cmp	r4, #0
 8019306:	d1f7      	bne.n	80192f8 <_fwalk_sglue+0xc>
 8019308:	4630      	mov	r0, r6
 801930a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801930e:	89ab      	ldrh	r3, [r5, #12]
 8019310:	2b01      	cmp	r3, #1
 8019312:	d907      	bls.n	8019324 <_fwalk_sglue+0x38>
 8019314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019318:	3301      	adds	r3, #1
 801931a:	d003      	beq.n	8019324 <_fwalk_sglue+0x38>
 801931c:	4629      	mov	r1, r5
 801931e:	4638      	mov	r0, r7
 8019320:	47c0      	blx	r8
 8019322:	4306      	orrs	r6, r0
 8019324:	3568      	adds	r5, #104	@ 0x68
 8019326:	e7e9      	b.n	80192fc <_fwalk_sglue+0x10>

08019328 <_fwrite_r>:
 8019328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801932c:	9c08      	ldr	r4, [sp, #32]
 801932e:	468a      	mov	sl, r1
 8019330:	4690      	mov	r8, r2
 8019332:	fb02 f903 	mul.w	r9, r2, r3
 8019336:	4606      	mov	r6, r0
 8019338:	b118      	cbz	r0, 8019342 <_fwrite_r+0x1a>
 801933a:	6a03      	ldr	r3, [r0, #32]
 801933c:	b90b      	cbnz	r3, 8019342 <_fwrite_r+0x1a>
 801933e:	f7ff ffab 	bl	8019298 <__sinit>
 8019342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019344:	07dd      	lsls	r5, r3, #31
 8019346:	d405      	bmi.n	8019354 <_fwrite_r+0x2c>
 8019348:	89a3      	ldrh	r3, [r4, #12]
 801934a:	0598      	lsls	r0, r3, #22
 801934c:	d402      	bmi.n	8019354 <_fwrite_r+0x2c>
 801934e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019350:	f000 fb17 	bl	8019982 <__retarget_lock_acquire_recursive>
 8019354:	89a3      	ldrh	r3, [r4, #12]
 8019356:	0719      	lsls	r1, r3, #28
 8019358:	d516      	bpl.n	8019388 <_fwrite_r+0x60>
 801935a:	6923      	ldr	r3, [r4, #16]
 801935c:	b1a3      	cbz	r3, 8019388 <_fwrite_r+0x60>
 801935e:	2500      	movs	r5, #0
 8019360:	454d      	cmp	r5, r9
 8019362:	d01f      	beq.n	80193a4 <_fwrite_r+0x7c>
 8019364:	68a7      	ldr	r7, [r4, #8]
 8019366:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801936a:	3f01      	subs	r7, #1
 801936c:	2f00      	cmp	r7, #0
 801936e:	60a7      	str	r7, [r4, #8]
 8019370:	da04      	bge.n	801937c <_fwrite_r+0x54>
 8019372:	69a3      	ldr	r3, [r4, #24]
 8019374:	429f      	cmp	r7, r3
 8019376:	db0f      	blt.n	8019398 <_fwrite_r+0x70>
 8019378:	290a      	cmp	r1, #10
 801937a:	d00d      	beq.n	8019398 <_fwrite_r+0x70>
 801937c:	6823      	ldr	r3, [r4, #0]
 801937e:	1c5a      	adds	r2, r3, #1
 8019380:	6022      	str	r2, [r4, #0]
 8019382:	7019      	strb	r1, [r3, #0]
 8019384:	3501      	adds	r5, #1
 8019386:	e7eb      	b.n	8019360 <_fwrite_r+0x38>
 8019388:	4621      	mov	r1, r4
 801938a:	4630      	mov	r0, r6
 801938c:	f000 f9a4 	bl	80196d8 <__swsetup_r>
 8019390:	2800      	cmp	r0, #0
 8019392:	d0e4      	beq.n	801935e <_fwrite_r+0x36>
 8019394:	2500      	movs	r5, #0
 8019396:	e005      	b.n	80193a4 <_fwrite_r+0x7c>
 8019398:	4622      	mov	r2, r4
 801939a:	4630      	mov	r0, r6
 801939c:	f000 f95e 	bl	801965c <__swbuf_r>
 80193a0:	3001      	adds	r0, #1
 80193a2:	d1ef      	bne.n	8019384 <_fwrite_r+0x5c>
 80193a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80193a6:	07da      	lsls	r2, r3, #31
 80193a8:	d405      	bmi.n	80193b6 <_fwrite_r+0x8e>
 80193aa:	89a3      	ldrh	r3, [r4, #12]
 80193ac:	059b      	lsls	r3, r3, #22
 80193ae:	d402      	bmi.n	80193b6 <_fwrite_r+0x8e>
 80193b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80193b2:	f000 fae7 	bl	8019984 <__retarget_lock_release_recursive>
 80193b6:	fbb5 f0f8 	udiv	r0, r5, r8
 80193ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080193c0 <fwrite>:
 80193c0:	b507      	push	{r0, r1, r2, lr}
 80193c2:	9300      	str	r3, [sp, #0]
 80193c4:	4613      	mov	r3, r2
 80193c6:	460a      	mov	r2, r1
 80193c8:	4601      	mov	r1, r0
 80193ca:	4803      	ldr	r0, [pc, #12]	@ (80193d8 <fwrite+0x18>)
 80193cc:	6800      	ldr	r0, [r0, #0]
 80193ce:	f7ff ffab 	bl	8019328 <_fwrite_r>
 80193d2:	b003      	add	sp, #12
 80193d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80193d8:	20000a6c 	.word	0x20000a6c

080193dc <iprintf>:
 80193dc:	b40f      	push	{r0, r1, r2, r3}
 80193de:	b507      	push	{r0, r1, r2, lr}
 80193e0:	4906      	ldr	r1, [pc, #24]	@ (80193fc <iprintf+0x20>)
 80193e2:	ab04      	add	r3, sp, #16
 80193e4:	6808      	ldr	r0, [r1, #0]
 80193e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80193ea:	6881      	ldr	r1, [r0, #8]
 80193ec:	9301      	str	r3, [sp, #4]
 80193ee:	f001 fe95 	bl	801b11c <_vfiprintf_r>
 80193f2:	b003      	add	sp, #12
 80193f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80193f8:	b004      	add	sp, #16
 80193fa:	4770      	bx	lr
 80193fc:	20000a6c 	.word	0x20000a6c

08019400 <_puts_r>:
 8019400:	6a03      	ldr	r3, [r0, #32]
 8019402:	b570      	push	{r4, r5, r6, lr}
 8019404:	6884      	ldr	r4, [r0, #8]
 8019406:	4605      	mov	r5, r0
 8019408:	460e      	mov	r6, r1
 801940a:	b90b      	cbnz	r3, 8019410 <_puts_r+0x10>
 801940c:	f7ff ff44 	bl	8019298 <__sinit>
 8019410:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019412:	07db      	lsls	r3, r3, #31
 8019414:	d405      	bmi.n	8019422 <_puts_r+0x22>
 8019416:	89a3      	ldrh	r3, [r4, #12]
 8019418:	0598      	lsls	r0, r3, #22
 801941a:	d402      	bmi.n	8019422 <_puts_r+0x22>
 801941c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801941e:	f000 fab0 	bl	8019982 <__retarget_lock_acquire_recursive>
 8019422:	89a3      	ldrh	r3, [r4, #12]
 8019424:	0719      	lsls	r1, r3, #28
 8019426:	d502      	bpl.n	801942e <_puts_r+0x2e>
 8019428:	6923      	ldr	r3, [r4, #16]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d135      	bne.n	801949a <_puts_r+0x9a>
 801942e:	4621      	mov	r1, r4
 8019430:	4628      	mov	r0, r5
 8019432:	f000 f951 	bl	80196d8 <__swsetup_r>
 8019436:	b380      	cbz	r0, 801949a <_puts_r+0x9a>
 8019438:	f04f 35ff 	mov.w	r5, #4294967295
 801943c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801943e:	07da      	lsls	r2, r3, #31
 8019440:	d405      	bmi.n	801944e <_puts_r+0x4e>
 8019442:	89a3      	ldrh	r3, [r4, #12]
 8019444:	059b      	lsls	r3, r3, #22
 8019446:	d402      	bmi.n	801944e <_puts_r+0x4e>
 8019448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801944a:	f000 fa9b 	bl	8019984 <__retarget_lock_release_recursive>
 801944e:	4628      	mov	r0, r5
 8019450:	bd70      	pop	{r4, r5, r6, pc}
 8019452:	2b00      	cmp	r3, #0
 8019454:	da04      	bge.n	8019460 <_puts_r+0x60>
 8019456:	69a2      	ldr	r2, [r4, #24]
 8019458:	429a      	cmp	r2, r3
 801945a:	dc17      	bgt.n	801948c <_puts_r+0x8c>
 801945c:	290a      	cmp	r1, #10
 801945e:	d015      	beq.n	801948c <_puts_r+0x8c>
 8019460:	6823      	ldr	r3, [r4, #0]
 8019462:	1c5a      	adds	r2, r3, #1
 8019464:	6022      	str	r2, [r4, #0]
 8019466:	7019      	strb	r1, [r3, #0]
 8019468:	68a3      	ldr	r3, [r4, #8]
 801946a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801946e:	3b01      	subs	r3, #1
 8019470:	60a3      	str	r3, [r4, #8]
 8019472:	2900      	cmp	r1, #0
 8019474:	d1ed      	bne.n	8019452 <_puts_r+0x52>
 8019476:	2b00      	cmp	r3, #0
 8019478:	da11      	bge.n	801949e <_puts_r+0x9e>
 801947a:	4622      	mov	r2, r4
 801947c:	210a      	movs	r1, #10
 801947e:	4628      	mov	r0, r5
 8019480:	f000 f8ec 	bl	801965c <__swbuf_r>
 8019484:	3001      	adds	r0, #1
 8019486:	d0d7      	beq.n	8019438 <_puts_r+0x38>
 8019488:	250a      	movs	r5, #10
 801948a:	e7d7      	b.n	801943c <_puts_r+0x3c>
 801948c:	4622      	mov	r2, r4
 801948e:	4628      	mov	r0, r5
 8019490:	f000 f8e4 	bl	801965c <__swbuf_r>
 8019494:	3001      	adds	r0, #1
 8019496:	d1e7      	bne.n	8019468 <_puts_r+0x68>
 8019498:	e7ce      	b.n	8019438 <_puts_r+0x38>
 801949a:	3e01      	subs	r6, #1
 801949c:	e7e4      	b.n	8019468 <_puts_r+0x68>
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	1c5a      	adds	r2, r3, #1
 80194a2:	6022      	str	r2, [r4, #0]
 80194a4:	220a      	movs	r2, #10
 80194a6:	701a      	strb	r2, [r3, #0]
 80194a8:	e7ee      	b.n	8019488 <_puts_r+0x88>
	...

080194ac <puts>:
 80194ac:	4b02      	ldr	r3, [pc, #8]	@ (80194b8 <puts+0xc>)
 80194ae:	4601      	mov	r1, r0
 80194b0:	6818      	ldr	r0, [r3, #0]
 80194b2:	f7ff bfa5 	b.w	8019400 <_puts_r>
 80194b6:	bf00      	nop
 80194b8:	20000a6c 	.word	0x20000a6c

080194bc <sniprintf>:
 80194bc:	b40c      	push	{r2, r3}
 80194be:	b530      	push	{r4, r5, lr}
 80194c0:	4b17      	ldr	r3, [pc, #92]	@ (8019520 <sniprintf+0x64>)
 80194c2:	1e0c      	subs	r4, r1, #0
 80194c4:	681d      	ldr	r5, [r3, #0]
 80194c6:	b09d      	sub	sp, #116	@ 0x74
 80194c8:	da08      	bge.n	80194dc <sniprintf+0x20>
 80194ca:	238b      	movs	r3, #139	@ 0x8b
 80194cc:	602b      	str	r3, [r5, #0]
 80194ce:	f04f 30ff 	mov.w	r0, #4294967295
 80194d2:	b01d      	add	sp, #116	@ 0x74
 80194d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194d8:	b002      	add	sp, #8
 80194da:	4770      	bx	lr
 80194dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80194e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80194e4:	bf14      	ite	ne
 80194e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80194ea:	4623      	moveq	r3, r4
 80194ec:	9304      	str	r3, [sp, #16]
 80194ee:	9307      	str	r3, [sp, #28]
 80194f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194f4:	9002      	str	r0, [sp, #8]
 80194f6:	9006      	str	r0, [sp, #24]
 80194f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80194fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80194fe:	ab21      	add	r3, sp, #132	@ 0x84
 8019500:	a902      	add	r1, sp, #8
 8019502:	4628      	mov	r0, r5
 8019504:	9301      	str	r3, [sp, #4]
 8019506:	f001 fce3 	bl	801aed0 <_svfiprintf_r>
 801950a:	1c43      	adds	r3, r0, #1
 801950c:	bfbc      	itt	lt
 801950e:	238b      	movlt	r3, #139	@ 0x8b
 8019510:	602b      	strlt	r3, [r5, #0]
 8019512:	2c00      	cmp	r4, #0
 8019514:	d0dd      	beq.n	80194d2 <sniprintf+0x16>
 8019516:	9b02      	ldr	r3, [sp, #8]
 8019518:	2200      	movs	r2, #0
 801951a:	701a      	strb	r2, [r3, #0]
 801951c:	e7d9      	b.n	80194d2 <sniprintf+0x16>
 801951e:	bf00      	nop
 8019520:	20000a6c 	.word	0x20000a6c

08019524 <siprintf>:
 8019524:	b40e      	push	{r1, r2, r3}
 8019526:	b500      	push	{lr}
 8019528:	b09c      	sub	sp, #112	@ 0x70
 801952a:	ab1d      	add	r3, sp, #116	@ 0x74
 801952c:	9002      	str	r0, [sp, #8]
 801952e:	9006      	str	r0, [sp, #24]
 8019530:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019534:	4809      	ldr	r0, [pc, #36]	@ (801955c <siprintf+0x38>)
 8019536:	9107      	str	r1, [sp, #28]
 8019538:	9104      	str	r1, [sp, #16]
 801953a:	4909      	ldr	r1, [pc, #36]	@ (8019560 <siprintf+0x3c>)
 801953c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019540:	9105      	str	r1, [sp, #20]
 8019542:	6800      	ldr	r0, [r0, #0]
 8019544:	9301      	str	r3, [sp, #4]
 8019546:	a902      	add	r1, sp, #8
 8019548:	f001 fcc2 	bl	801aed0 <_svfiprintf_r>
 801954c:	9b02      	ldr	r3, [sp, #8]
 801954e:	2200      	movs	r2, #0
 8019550:	701a      	strb	r2, [r3, #0]
 8019552:	b01c      	add	sp, #112	@ 0x70
 8019554:	f85d eb04 	ldr.w	lr, [sp], #4
 8019558:	b003      	add	sp, #12
 801955a:	4770      	bx	lr
 801955c:	20000a6c 	.word	0x20000a6c
 8019560:	ffff0208 	.word	0xffff0208

08019564 <__sread>:
 8019564:	b510      	push	{r4, lr}
 8019566:	460c      	mov	r4, r1
 8019568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801956c:	f000 f9aa 	bl	80198c4 <_read_r>
 8019570:	2800      	cmp	r0, #0
 8019572:	bfab      	itete	ge
 8019574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019576:	89a3      	ldrhlt	r3, [r4, #12]
 8019578:	181b      	addge	r3, r3, r0
 801957a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801957e:	bfac      	ite	ge
 8019580:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019582:	81a3      	strhlt	r3, [r4, #12]
 8019584:	bd10      	pop	{r4, pc}

08019586 <__swrite>:
 8019586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801958a:	461f      	mov	r7, r3
 801958c:	898b      	ldrh	r3, [r1, #12]
 801958e:	05db      	lsls	r3, r3, #23
 8019590:	4605      	mov	r5, r0
 8019592:	460c      	mov	r4, r1
 8019594:	4616      	mov	r6, r2
 8019596:	d505      	bpl.n	80195a4 <__swrite+0x1e>
 8019598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801959c:	2302      	movs	r3, #2
 801959e:	2200      	movs	r2, #0
 80195a0:	f000 f97e 	bl	80198a0 <_lseek_r>
 80195a4:	89a3      	ldrh	r3, [r4, #12]
 80195a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80195ae:	81a3      	strh	r3, [r4, #12]
 80195b0:	4632      	mov	r2, r6
 80195b2:	463b      	mov	r3, r7
 80195b4:	4628      	mov	r0, r5
 80195b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195ba:	f000 b9a5 	b.w	8019908 <_write_r>

080195be <__sseek>:
 80195be:	b510      	push	{r4, lr}
 80195c0:	460c      	mov	r4, r1
 80195c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195c6:	f000 f96b 	bl	80198a0 <_lseek_r>
 80195ca:	1c43      	adds	r3, r0, #1
 80195cc:	89a3      	ldrh	r3, [r4, #12]
 80195ce:	bf15      	itete	ne
 80195d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80195d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80195d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80195da:	81a3      	strheq	r3, [r4, #12]
 80195dc:	bf18      	it	ne
 80195de:	81a3      	strhne	r3, [r4, #12]
 80195e0:	bd10      	pop	{r4, pc}

080195e2 <__sclose>:
 80195e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195e6:	f000 b94b 	b.w	8019880 <_close_r>

080195ea <_vsniprintf_r>:
 80195ea:	b530      	push	{r4, r5, lr}
 80195ec:	4614      	mov	r4, r2
 80195ee:	2c00      	cmp	r4, #0
 80195f0:	b09b      	sub	sp, #108	@ 0x6c
 80195f2:	4605      	mov	r5, r0
 80195f4:	461a      	mov	r2, r3
 80195f6:	da05      	bge.n	8019604 <_vsniprintf_r+0x1a>
 80195f8:	238b      	movs	r3, #139	@ 0x8b
 80195fa:	6003      	str	r3, [r0, #0]
 80195fc:	f04f 30ff 	mov.w	r0, #4294967295
 8019600:	b01b      	add	sp, #108	@ 0x6c
 8019602:	bd30      	pop	{r4, r5, pc}
 8019604:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019608:	f8ad 300c 	strh.w	r3, [sp, #12]
 801960c:	bf14      	ite	ne
 801960e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019612:	4623      	moveq	r3, r4
 8019614:	9302      	str	r3, [sp, #8]
 8019616:	9305      	str	r3, [sp, #20]
 8019618:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801961c:	9100      	str	r1, [sp, #0]
 801961e:	9104      	str	r1, [sp, #16]
 8019620:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019624:	4669      	mov	r1, sp
 8019626:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019628:	f001 fc52 	bl	801aed0 <_svfiprintf_r>
 801962c:	1c43      	adds	r3, r0, #1
 801962e:	bfbc      	itt	lt
 8019630:	238b      	movlt	r3, #139	@ 0x8b
 8019632:	602b      	strlt	r3, [r5, #0]
 8019634:	2c00      	cmp	r4, #0
 8019636:	d0e3      	beq.n	8019600 <_vsniprintf_r+0x16>
 8019638:	9b00      	ldr	r3, [sp, #0]
 801963a:	2200      	movs	r2, #0
 801963c:	701a      	strb	r2, [r3, #0]
 801963e:	e7df      	b.n	8019600 <_vsniprintf_r+0x16>

08019640 <vsniprintf>:
 8019640:	b507      	push	{r0, r1, r2, lr}
 8019642:	9300      	str	r3, [sp, #0]
 8019644:	4613      	mov	r3, r2
 8019646:	460a      	mov	r2, r1
 8019648:	4601      	mov	r1, r0
 801964a:	4803      	ldr	r0, [pc, #12]	@ (8019658 <vsniprintf+0x18>)
 801964c:	6800      	ldr	r0, [r0, #0]
 801964e:	f7ff ffcc 	bl	80195ea <_vsniprintf_r>
 8019652:	b003      	add	sp, #12
 8019654:	f85d fb04 	ldr.w	pc, [sp], #4
 8019658:	20000a6c 	.word	0x20000a6c

0801965c <__swbuf_r>:
 801965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801965e:	460e      	mov	r6, r1
 8019660:	4614      	mov	r4, r2
 8019662:	4605      	mov	r5, r0
 8019664:	b118      	cbz	r0, 801966e <__swbuf_r+0x12>
 8019666:	6a03      	ldr	r3, [r0, #32]
 8019668:	b90b      	cbnz	r3, 801966e <__swbuf_r+0x12>
 801966a:	f7ff fe15 	bl	8019298 <__sinit>
 801966e:	69a3      	ldr	r3, [r4, #24]
 8019670:	60a3      	str	r3, [r4, #8]
 8019672:	89a3      	ldrh	r3, [r4, #12]
 8019674:	071a      	lsls	r2, r3, #28
 8019676:	d501      	bpl.n	801967c <__swbuf_r+0x20>
 8019678:	6923      	ldr	r3, [r4, #16]
 801967a:	b943      	cbnz	r3, 801968e <__swbuf_r+0x32>
 801967c:	4621      	mov	r1, r4
 801967e:	4628      	mov	r0, r5
 8019680:	f000 f82a 	bl	80196d8 <__swsetup_r>
 8019684:	b118      	cbz	r0, 801968e <__swbuf_r+0x32>
 8019686:	f04f 37ff 	mov.w	r7, #4294967295
 801968a:	4638      	mov	r0, r7
 801968c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801968e:	6823      	ldr	r3, [r4, #0]
 8019690:	6922      	ldr	r2, [r4, #16]
 8019692:	1a98      	subs	r0, r3, r2
 8019694:	6963      	ldr	r3, [r4, #20]
 8019696:	b2f6      	uxtb	r6, r6
 8019698:	4283      	cmp	r3, r0
 801969a:	4637      	mov	r7, r6
 801969c:	dc05      	bgt.n	80196aa <__swbuf_r+0x4e>
 801969e:	4621      	mov	r1, r4
 80196a0:	4628      	mov	r0, r5
 80196a2:	f001 fed7 	bl	801b454 <_fflush_r>
 80196a6:	2800      	cmp	r0, #0
 80196a8:	d1ed      	bne.n	8019686 <__swbuf_r+0x2a>
 80196aa:	68a3      	ldr	r3, [r4, #8]
 80196ac:	3b01      	subs	r3, #1
 80196ae:	60a3      	str	r3, [r4, #8]
 80196b0:	6823      	ldr	r3, [r4, #0]
 80196b2:	1c5a      	adds	r2, r3, #1
 80196b4:	6022      	str	r2, [r4, #0]
 80196b6:	701e      	strb	r6, [r3, #0]
 80196b8:	6962      	ldr	r2, [r4, #20]
 80196ba:	1c43      	adds	r3, r0, #1
 80196bc:	429a      	cmp	r2, r3
 80196be:	d004      	beq.n	80196ca <__swbuf_r+0x6e>
 80196c0:	89a3      	ldrh	r3, [r4, #12]
 80196c2:	07db      	lsls	r3, r3, #31
 80196c4:	d5e1      	bpl.n	801968a <__swbuf_r+0x2e>
 80196c6:	2e0a      	cmp	r6, #10
 80196c8:	d1df      	bne.n	801968a <__swbuf_r+0x2e>
 80196ca:	4621      	mov	r1, r4
 80196cc:	4628      	mov	r0, r5
 80196ce:	f001 fec1 	bl	801b454 <_fflush_r>
 80196d2:	2800      	cmp	r0, #0
 80196d4:	d0d9      	beq.n	801968a <__swbuf_r+0x2e>
 80196d6:	e7d6      	b.n	8019686 <__swbuf_r+0x2a>

080196d8 <__swsetup_r>:
 80196d8:	b538      	push	{r3, r4, r5, lr}
 80196da:	4b29      	ldr	r3, [pc, #164]	@ (8019780 <__swsetup_r+0xa8>)
 80196dc:	4605      	mov	r5, r0
 80196de:	6818      	ldr	r0, [r3, #0]
 80196e0:	460c      	mov	r4, r1
 80196e2:	b118      	cbz	r0, 80196ec <__swsetup_r+0x14>
 80196e4:	6a03      	ldr	r3, [r0, #32]
 80196e6:	b90b      	cbnz	r3, 80196ec <__swsetup_r+0x14>
 80196e8:	f7ff fdd6 	bl	8019298 <__sinit>
 80196ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196f0:	0719      	lsls	r1, r3, #28
 80196f2:	d422      	bmi.n	801973a <__swsetup_r+0x62>
 80196f4:	06da      	lsls	r2, r3, #27
 80196f6:	d407      	bmi.n	8019708 <__swsetup_r+0x30>
 80196f8:	2209      	movs	r2, #9
 80196fa:	602a      	str	r2, [r5, #0]
 80196fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019700:	81a3      	strh	r3, [r4, #12]
 8019702:	f04f 30ff 	mov.w	r0, #4294967295
 8019706:	e033      	b.n	8019770 <__swsetup_r+0x98>
 8019708:	0758      	lsls	r0, r3, #29
 801970a:	d512      	bpl.n	8019732 <__swsetup_r+0x5a>
 801970c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801970e:	b141      	cbz	r1, 8019722 <__swsetup_r+0x4a>
 8019710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019714:	4299      	cmp	r1, r3
 8019716:	d002      	beq.n	801971e <__swsetup_r+0x46>
 8019718:	4628      	mov	r0, r5
 801971a:	f000 ffa9 	bl	801a670 <_free_r>
 801971e:	2300      	movs	r3, #0
 8019720:	6363      	str	r3, [r4, #52]	@ 0x34
 8019722:	89a3      	ldrh	r3, [r4, #12]
 8019724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019728:	81a3      	strh	r3, [r4, #12]
 801972a:	2300      	movs	r3, #0
 801972c:	6063      	str	r3, [r4, #4]
 801972e:	6923      	ldr	r3, [r4, #16]
 8019730:	6023      	str	r3, [r4, #0]
 8019732:	89a3      	ldrh	r3, [r4, #12]
 8019734:	f043 0308 	orr.w	r3, r3, #8
 8019738:	81a3      	strh	r3, [r4, #12]
 801973a:	6923      	ldr	r3, [r4, #16]
 801973c:	b94b      	cbnz	r3, 8019752 <__swsetup_r+0x7a>
 801973e:	89a3      	ldrh	r3, [r4, #12]
 8019740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019748:	d003      	beq.n	8019752 <__swsetup_r+0x7a>
 801974a:	4621      	mov	r1, r4
 801974c:	4628      	mov	r0, r5
 801974e:	f001 fecf 	bl	801b4f0 <__smakebuf_r>
 8019752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019756:	f013 0201 	ands.w	r2, r3, #1
 801975a:	d00a      	beq.n	8019772 <__swsetup_r+0x9a>
 801975c:	2200      	movs	r2, #0
 801975e:	60a2      	str	r2, [r4, #8]
 8019760:	6962      	ldr	r2, [r4, #20]
 8019762:	4252      	negs	r2, r2
 8019764:	61a2      	str	r2, [r4, #24]
 8019766:	6922      	ldr	r2, [r4, #16]
 8019768:	b942      	cbnz	r2, 801977c <__swsetup_r+0xa4>
 801976a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801976e:	d1c5      	bne.n	80196fc <__swsetup_r+0x24>
 8019770:	bd38      	pop	{r3, r4, r5, pc}
 8019772:	0799      	lsls	r1, r3, #30
 8019774:	bf58      	it	pl
 8019776:	6962      	ldrpl	r2, [r4, #20]
 8019778:	60a2      	str	r2, [r4, #8]
 801977a:	e7f4      	b.n	8019766 <__swsetup_r+0x8e>
 801977c:	2000      	movs	r0, #0
 801977e:	e7f7      	b.n	8019770 <__swsetup_r+0x98>
 8019780:	20000a6c 	.word	0x20000a6c

08019784 <memcmp>:
 8019784:	b510      	push	{r4, lr}
 8019786:	3901      	subs	r1, #1
 8019788:	4402      	add	r2, r0
 801978a:	4290      	cmp	r0, r2
 801978c:	d101      	bne.n	8019792 <memcmp+0xe>
 801978e:	2000      	movs	r0, #0
 8019790:	e005      	b.n	801979e <memcmp+0x1a>
 8019792:	7803      	ldrb	r3, [r0, #0]
 8019794:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019798:	42a3      	cmp	r3, r4
 801979a:	d001      	beq.n	80197a0 <memcmp+0x1c>
 801979c:	1b18      	subs	r0, r3, r4
 801979e:	bd10      	pop	{r4, pc}
 80197a0:	3001      	adds	r0, #1
 80197a2:	e7f2      	b.n	801978a <memcmp+0x6>

080197a4 <memmove>:
 80197a4:	4288      	cmp	r0, r1
 80197a6:	b510      	push	{r4, lr}
 80197a8:	eb01 0402 	add.w	r4, r1, r2
 80197ac:	d902      	bls.n	80197b4 <memmove+0x10>
 80197ae:	4284      	cmp	r4, r0
 80197b0:	4623      	mov	r3, r4
 80197b2:	d807      	bhi.n	80197c4 <memmove+0x20>
 80197b4:	1e43      	subs	r3, r0, #1
 80197b6:	42a1      	cmp	r1, r4
 80197b8:	d008      	beq.n	80197cc <memmove+0x28>
 80197ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80197c2:	e7f8      	b.n	80197b6 <memmove+0x12>
 80197c4:	4402      	add	r2, r0
 80197c6:	4601      	mov	r1, r0
 80197c8:	428a      	cmp	r2, r1
 80197ca:	d100      	bne.n	80197ce <memmove+0x2a>
 80197cc:	bd10      	pop	{r4, pc}
 80197ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80197d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80197d6:	e7f7      	b.n	80197c8 <memmove+0x24>

080197d8 <memset>:
 80197d8:	4402      	add	r2, r0
 80197da:	4603      	mov	r3, r0
 80197dc:	4293      	cmp	r3, r2
 80197de:	d100      	bne.n	80197e2 <memset+0xa>
 80197e0:	4770      	bx	lr
 80197e2:	f803 1b01 	strb.w	r1, [r3], #1
 80197e6:	e7f9      	b.n	80197dc <memset+0x4>

080197e8 <strchr>:
 80197e8:	b2c9      	uxtb	r1, r1
 80197ea:	4603      	mov	r3, r0
 80197ec:	4618      	mov	r0, r3
 80197ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197f2:	b112      	cbz	r2, 80197fa <strchr+0x12>
 80197f4:	428a      	cmp	r2, r1
 80197f6:	d1f9      	bne.n	80197ec <strchr+0x4>
 80197f8:	4770      	bx	lr
 80197fa:	2900      	cmp	r1, #0
 80197fc:	bf18      	it	ne
 80197fe:	2000      	movne	r0, #0
 8019800:	4770      	bx	lr

08019802 <strncmp>:
 8019802:	b510      	push	{r4, lr}
 8019804:	b16a      	cbz	r2, 8019822 <strncmp+0x20>
 8019806:	3901      	subs	r1, #1
 8019808:	1884      	adds	r4, r0, r2
 801980a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801980e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019812:	429a      	cmp	r2, r3
 8019814:	d103      	bne.n	801981e <strncmp+0x1c>
 8019816:	42a0      	cmp	r0, r4
 8019818:	d001      	beq.n	801981e <strncmp+0x1c>
 801981a:	2a00      	cmp	r2, #0
 801981c:	d1f5      	bne.n	801980a <strncmp+0x8>
 801981e:	1ad0      	subs	r0, r2, r3
 8019820:	bd10      	pop	{r4, pc}
 8019822:	4610      	mov	r0, r2
 8019824:	e7fc      	b.n	8019820 <strncmp+0x1e>

08019826 <strncpy>:
 8019826:	b510      	push	{r4, lr}
 8019828:	3901      	subs	r1, #1
 801982a:	4603      	mov	r3, r0
 801982c:	b132      	cbz	r2, 801983c <strncpy+0x16>
 801982e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019832:	f803 4b01 	strb.w	r4, [r3], #1
 8019836:	3a01      	subs	r2, #1
 8019838:	2c00      	cmp	r4, #0
 801983a:	d1f7      	bne.n	801982c <strncpy+0x6>
 801983c:	441a      	add	r2, r3
 801983e:	2100      	movs	r1, #0
 8019840:	4293      	cmp	r3, r2
 8019842:	d100      	bne.n	8019846 <strncpy+0x20>
 8019844:	bd10      	pop	{r4, pc}
 8019846:	f803 1b01 	strb.w	r1, [r3], #1
 801984a:	e7f9      	b.n	8019840 <strncpy+0x1a>

0801984c <strstr>:
 801984c:	780a      	ldrb	r2, [r1, #0]
 801984e:	b570      	push	{r4, r5, r6, lr}
 8019850:	b96a      	cbnz	r2, 801986e <strstr+0x22>
 8019852:	bd70      	pop	{r4, r5, r6, pc}
 8019854:	429a      	cmp	r2, r3
 8019856:	d109      	bne.n	801986c <strstr+0x20>
 8019858:	460c      	mov	r4, r1
 801985a:	4605      	mov	r5, r0
 801985c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019860:	2b00      	cmp	r3, #0
 8019862:	d0f6      	beq.n	8019852 <strstr+0x6>
 8019864:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019868:	429e      	cmp	r6, r3
 801986a:	d0f7      	beq.n	801985c <strstr+0x10>
 801986c:	3001      	adds	r0, #1
 801986e:	7803      	ldrb	r3, [r0, #0]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d1ef      	bne.n	8019854 <strstr+0x8>
 8019874:	4618      	mov	r0, r3
 8019876:	e7ec      	b.n	8019852 <strstr+0x6>

08019878 <_localeconv_r>:
 8019878:	4800      	ldr	r0, [pc, #0]	@ (801987c <_localeconv_r+0x4>)
 801987a:	4770      	bx	lr
 801987c:	20000bac 	.word	0x20000bac

08019880 <_close_r>:
 8019880:	b538      	push	{r3, r4, r5, lr}
 8019882:	4d06      	ldr	r5, [pc, #24]	@ (801989c <_close_r+0x1c>)
 8019884:	2300      	movs	r3, #0
 8019886:	4604      	mov	r4, r0
 8019888:	4608      	mov	r0, r1
 801988a:	602b      	str	r3, [r5, #0]
 801988c:	f7e9 f954 	bl	8002b38 <_close>
 8019890:	1c43      	adds	r3, r0, #1
 8019892:	d102      	bne.n	801989a <_close_r+0x1a>
 8019894:	682b      	ldr	r3, [r5, #0]
 8019896:	b103      	cbz	r3, 801989a <_close_r+0x1a>
 8019898:	6023      	str	r3, [r4, #0]
 801989a:	bd38      	pop	{r3, r4, r5, pc}
 801989c:	2001484c 	.word	0x2001484c

080198a0 <_lseek_r>:
 80198a0:	b538      	push	{r3, r4, r5, lr}
 80198a2:	4d07      	ldr	r5, [pc, #28]	@ (80198c0 <_lseek_r+0x20>)
 80198a4:	4604      	mov	r4, r0
 80198a6:	4608      	mov	r0, r1
 80198a8:	4611      	mov	r1, r2
 80198aa:	2200      	movs	r2, #0
 80198ac:	602a      	str	r2, [r5, #0]
 80198ae:	461a      	mov	r2, r3
 80198b0:	f7e9 f969 	bl	8002b86 <_lseek>
 80198b4:	1c43      	adds	r3, r0, #1
 80198b6:	d102      	bne.n	80198be <_lseek_r+0x1e>
 80198b8:	682b      	ldr	r3, [r5, #0]
 80198ba:	b103      	cbz	r3, 80198be <_lseek_r+0x1e>
 80198bc:	6023      	str	r3, [r4, #0]
 80198be:	bd38      	pop	{r3, r4, r5, pc}
 80198c0:	2001484c 	.word	0x2001484c

080198c4 <_read_r>:
 80198c4:	b538      	push	{r3, r4, r5, lr}
 80198c6:	4d07      	ldr	r5, [pc, #28]	@ (80198e4 <_read_r+0x20>)
 80198c8:	4604      	mov	r4, r0
 80198ca:	4608      	mov	r0, r1
 80198cc:	4611      	mov	r1, r2
 80198ce:	2200      	movs	r2, #0
 80198d0:	602a      	str	r2, [r5, #0]
 80198d2:	461a      	mov	r2, r3
 80198d4:	f7e9 f8f7 	bl	8002ac6 <_read>
 80198d8:	1c43      	adds	r3, r0, #1
 80198da:	d102      	bne.n	80198e2 <_read_r+0x1e>
 80198dc:	682b      	ldr	r3, [r5, #0]
 80198de:	b103      	cbz	r3, 80198e2 <_read_r+0x1e>
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	bd38      	pop	{r3, r4, r5, pc}
 80198e4:	2001484c 	.word	0x2001484c

080198e8 <_sbrk_r>:
 80198e8:	b538      	push	{r3, r4, r5, lr}
 80198ea:	4d06      	ldr	r5, [pc, #24]	@ (8019904 <_sbrk_r+0x1c>)
 80198ec:	2300      	movs	r3, #0
 80198ee:	4604      	mov	r4, r0
 80198f0:	4608      	mov	r0, r1
 80198f2:	602b      	str	r3, [r5, #0]
 80198f4:	f7e9 f954 	bl	8002ba0 <_sbrk>
 80198f8:	1c43      	adds	r3, r0, #1
 80198fa:	d102      	bne.n	8019902 <_sbrk_r+0x1a>
 80198fc:	682b      	ldr	r3, [r5, #0]
 80198fe:	b103      	cbz	r3, 8019902 <_sbrk_r+0x1a>
 8019900:	6023      	str	r3, [r4, #0]
 8019902:	bd38      	pop	{r3, r4, r5, pc}
 8019904:	2001484c 	.word	0x2001484c

08019908 <_write_r>:
 8019908:	b538      	push	{r3, r4, r5, lr}
 801990a:	4d07      	ldr	r5, [pc, #28]	@ (8019928 <_write_r+0x20>)
 801990c:	4604      	mov	r4, r0
 801990e:	4608      	mov	r0, r1
 8019910:	4611      	mov	r1, r2
 8019912:	2200      	movs	r2, #0
 8019914:	602a      	str	r2, [r5, #0]
 8019916:	461a      	mov	r2, r3
 8019918:	f7e9 f8f2 	bl	8002b00 <_write>
 801991c:	1c43      	adds	r3, r0, #1
 801991e:	d102      	bne.n	8019926 <_write_r+0x1e>
 8019920:	682b      	ldr	r3, [r5, #0]
 8019922:	b103      	cbz	r3, 8019926 <_write_r+0x1e>
 8019924:	6023      	str	r3, [r4, #0]
 8019926:	bd38      	pop	{r3, r4, r5, pc}
 8019928:	2001484c 	.word	0x2001484c

0801992c <__errno>:
 801992c:	4b01      	ldr	r3, [pc, #4]	@ (8019934 <__errno+0x8>)
 801992e:	6818      	ldr	r0, [r3, #0]
 8019930:	4770      	bx	lr
 8019932:	bf00      	nop
 8019934:	20000a6c 	.word	0x20000a6c

08019938 <__libc_init_array>:
 8019938:	b570      	push	{r4, r5, r6, lr}
 801993a:	4d0d      	ldr	r5, [pc, #52]	@ (8019970 <__libc_init_array+0x38>)
 801993c:	4c0d      	ldr	r4, [pc, #52]	@ (8019974 <__libc_init_array+0x3c>)
 801993e:	1b64      	subs	r4, r4, r5
 8019940:	10a4      	asrs	r4, r4, #2
 8019942:	2600      	movs	r6, #0
 8019944:	42a6      	cmp	r6, r4
 8019946:	d109      	bne.n	801995c <__libc_init_array+0x24>
 8019948:	4d0b      	ldr	r5, [pc, #44]	@ (8019978 <__libc_init_array+0x40>)
 801994a:	4c0c      	ldr	r4, [pc, #48]	@ (801997c <__libc_init_array+0x44>)
 801994c:	f001 fe92 	bl	801b674 <_init>
 8019950:	1b64      	subs	r4, r4, r5
 8019952:	10a4      	asrs	r4, r4, #2
 8019954:	2600      	movs	r6, #0
 8019956:	42a6      	cmp	r6, r4
 8019958:	d105      	bne.n	8019966 <__libc_init_array+0x2e>
 801995a:	bd70      	pop	{r4, r5, r6, pc}
 801995c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019960:	4798      	blx	r3
 8019962:	3601      	adds	r6, #1
 8019964:	e7ee      	b.n	8019944 <__libc_init_array+0xc>
 8019966:	f855 3b04 	ldr.w	r3, [r5], #4
 801996a:	4798      	blx	r3
 801996c:	3601      	adds	r6, #1
 801996e:	e7f2      	b.n	8019956 <__libc_init_array+0x1e>
 8019970:	0801d06c 	.word	0x0801d06c
 8019974:	0801d06c 	.word	0x0801d06c
 8019978:	0801d06c 	.word	0x0801d06c
 801997c:	0801d07c 	.word	0x0801d07c

08019980 <__retarget_lock_init_recursive>:
 8019980:	4770      	bx	lr

08019982 <__retarget_lock_acquire_recursive>:
 8019982:	4770      	bx	lr

08019984 <__retarget_lock_release_recursive>:
 8019984:	4770      	bx	lr

08019986 <strcpy>:
 8019986:	4603      	mov	r3, r0
 8019988:	f811 2b01 	ldrb.w	r2, [r1], #1
 801998c:	f803 2b01 	strb.w	r2, [r3], #1
 8019990:	2a00      	cmp	r2, #0
 8019992:	d1f9      	bne.n	8019988 <strcpy+0x2>
 8019994:	4770      	bx	lr

08019996 <memcpy>:
 8019996:	440a      	add	r2, r1
 8019998:	4291      	cmp	r1, r2
 801999a:	f100 33ff 	add.w	r3, r0, #4294967295
 801999e:	d100      	bne.n	80199a2 <memcpy+0xc>
 80199a0:	4770      	bx	lr
 80199a2:	b510      	push	{r4, lr}
 80199a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80199a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80199ac:	4291      	cmp	r1, r2
 80199ae:	d1f9      	bne.n	80199a4 <memcpy+0xe>
 80199b0:	bd10      	pop	{r4, pc}

080199b2 <abort>:
 80199b2:	b508      	push	{r3, lr}
 80199b4:	2006      	movs	r0, #6
 80199b6:	f001 fdff 	bl	801b5b8 <raise>
 80199ba:	2001      	movs	r0, #1
 80199bc:	f7e9 f878 	bl	8002ab0 <_exit>

080199c0 <quorem>:
 80199c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c4:	6903      	ldr	r3, [r0, #16]
 80199c6:	690c      	ldr	r4, [r1, #16]
 80199c8:	42a3      	cmp	r3, r4
 80199ca:	4607      	mov	r7, r0
 80199cc:	db7e      	blt.n	8019acc <quorem+0x10c>
 80199ce:	3c01      	subs	r4, #1
 80199d0:	f101 0814 	add.w	r8, r1, #20
 80199d4:	00a3      	lsls	r3, r4, #2
 80199d6:	f100 0514 	add.w	r5, r0, #20
 80199da:	9300      	str	r3, [sp, #0]
 80199dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80199e0:	9301      	str	r3, [sp, #4]
 80199e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80199e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80199ea:	3301      	adds	r3, #1
 80199ec:	429a      	cmp	r2, r3
 80199ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80199f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80199f6:	d32e      	bcc.n	8019a56 <quorem+0x96>
 80199f8:	f04f 0a00 	mov.w	sl, #0
 80199fc:	46c4      	mov	ip, r8
 80199fe:	46ae      	mov	lr, r5
 8019a00:	46d3      	mov	fp, sl
 8019a02:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019a06:	b298      	uxth	r0, r3
 8019a08:	fb06 a000 	mla	r0, r6, r0, sl
 8019a0c:	0c02      	lsrs	r2, r0, #16
 8019a0e:	0c1b      	lsrs	r3, r3, #16
 8019a10:	fb06 2303 	mla	r3, r6, r3, r2
 8019a14:	f8de 2000 	ldr.w	r2, [lr]
 8019a18:	b280      	uxth	r0, r0
 8019a1a:	b292      	uxth	r2, r2
 8019a1c:	1a12      	subs	r2, r2, r0
 8019a1e:	445a      	add	r2, fp
 8019a20:	f8de 0000 	ldr.w	r0, [lr]
 8019a24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019a2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019a32:	b292      	uxth	r2, r2
 8019a34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019a38:	45e1      	cmp	r9, ip
 8019a3a:	f84e 2b04 	str.w	r2, [lr], #4
 8019a3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019a42:	d2de      	bcs.n	8019a02 <quorem+0x42>
 8019a44:	9b00      	ldr	r3, [sp, #0]
 8019a46:	58eb      	ldr	r3, [r5, r3]
 8019a48:	b92b      	cbnz	r3, 8019a56 <quorem+0x96>
 8019a4a:	9b01      	ldr	r3, [sp, #4]
 8019a4c:	3b04      	subs	r3, #4
 8019a4e:	429d      	cmp	r5, r3
 8019a50:	461a      	mov	r2, r3
 8019a52:	d32f      	bcc.n	8019ab4 <quorem+0xf4>
 8019a54:	613c      	str	r4, [r7, #16]
 8019a56:	4638      	mov	r0, r7
 8019a58:	f001 f8ce 	bl	801abf8 <__mcmp>
 8019a5c:	2800      	cmp	r0, #0
 8019a5e:	db25      	blt.n	8019aac <quorem+0xec>
 8019a60:	4629      	mov	r1, r5
 8019a62:	2000      	movs	r0, #0
 8019a64:	f858 2b04 	ldr.w	r2, [r8], #4
 8019a68:	f8d1 c000 	ldr.w	ip, [r1]
 8019a6c:	fa1f fe82 	uxth.w	lr, r2
 8019a70:	fa1f f38c 	uxth.w	r3, ip
 8019a74:	eba3 030e 	sub.w	r3, r3, lr
 8019a78:	4403      	add	r3, r0
 8019a7a:	0c12      	lsrs	r2, r2, #16
 8019a7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019a80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019a8a:	45c1      	cmp	r9, r8
 8019a8c:	f841 3b04 	str.w	r3, [r1], #4
 8019a90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019a94:	d2e6      	bcs.n	8019a64 <quorem+0xa4>
 8019a96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019a9e:	b922      	cbnz	r2, 8019aaa <quorem+0xea>
 8019aa0:	3b04      	subs	r3, #4
 8019aa2:	429d      	cmp	r5, r3
 8019aa4:	461a      	mov	r2, r3
 8019aa6:	d30b      	bcc.n	8019ac0 <quorem+0x100>
 8019aa8:	613c      	str	r4, [r7, #16]
 8019aaa:	3601      	adds	r6, #1
 8019aac:	4630      	mov	r0, r6
 8019aae:	b003      	add	sp, #12
 8019ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab4:	6812      	ldr	r2, [r2, #0]
 8019ab6:	3b04      	subs	r3, #4
 8019ab8:	2a00      	cmp	r2, #0
 8019aba:	d1cb      	bne.n	8019a54 <quorem+0x94>
 8019abc:	3c01      	subs	r4, #1
 8019abe:	e7c6      	b.n	8019a4e <quorem+0x8e>
 8019ac0:	6812      	ldr	r2, [r2, #0]
 8019ac2:	3b04      	subs	r3, #4
 8019ac4:	2a00      	cmp	r2, #0
 8019ac6:	d1ef      	bne.n	8019aa8 <quorem+0xe8>
 8019ac8:	3c01      	subs	r4, #1
 8019aca:	e7ea      	b.n	8019aa2 <quorem+0xe2>
 8019acc:	2000      	movs	r0, #0
 8019ace:	e7ee      	b.n	8019aae <quorem+0xee>

08019ad0 <_dtoa_r>:
 8019ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad4:	69c7      	ldr	r7, [r0, #28]
 8019ad6:	b099      	sub	sp, #100	@ 0x64
 8019ad8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019adc:	ec55 4b10 	vmov	r4, r5, d0
 8019ae0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8019ae2:	9109      	str	r1, [sp, #36]	@ 0x24
 8019ae4:	4683      	mov	fp, r0
 8019ae6:	920e      	str	r2, [sp, #56]	@ 0x38
 8019ae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019aea:	b97f      	cbnz	r7, 8019b0c <_dtoa_r+0x3c>
 8019aec:	2010      	movs	r0, #16
 8019aee:	f7fe fd17 	bl	8018520 <malloc>
 8019af2:	4602      	mov	r2, r0
 8019af4:	f8cb 001c 	str.w	r0, [fp, #28]
 8019af8:	b920      	cbnz	r0, 8019b04 <_dtoa_r+0x34>
 8019afa:	4ba7      	ldr	r3, [pc, #668]	@ (8019d98 <_dtoa_r+0x2c8>)
 8019afc:	21ef      	movs	r1, #239	@ 0xef
 8019afe:	48a7      	ldr	r0, [pc, #668]	@ (8019d9c <_dtoa_r+0x2cc>)
 8019b00:	f7fe fc7a 	bl	80183f8 <__assert_func>
 8019b04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019b08:	6007      	str	r7, [r0, #0]
 8019b0a:	60c7      	str	r7, [r0, #12]
 8019b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019b10:	6819      	ldr	r1, [r3, #0]
 8019b12:	b159      	cbz	r1, 8019b2c <_dtoa_r+0x5c>
 8019b14:	685a      	ldr	r2, [r3, #4]
 8019b16:	604a      	str	r2, [r1, #4]
 8019b18:	2301      	movs	r3, #1
 8019b1a:	4093      	lsls	r3, r2
 8019b1c:	608b      	str	r3, [r1, #8]
 8019b1e:	4658      	mov	r0, fp
 8019b20:	f000 fe30 	bl	801a784 <_Bfree>
 8019b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019b28:	2200      	movs	r2, #0
 8019b2a:	601a      	str	r2, [r3, #0]
 8019b2c:	1e2b      	subs	r3, r5, #0
 8019b2e:	bfb9      	ittee	lt
 8019b30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019b34:	9303      	strlt	r3, [sp, #12]
 8019b36:	2300      	movge	r3, #0
 8019b38:	6033      	strge	r3, [r6, #0]
 8019b3a:	9f03      	ldr	r7, [sp, #12]
 8019b3c:	4b98      	ldr	r3, [pc, #608]	@ (8019da0 <_dtoa_r+0x2d0>)
 8019b3e:	bfbc      	itt	lt
 8019b40:	2201      	movlt	r2, #1
 8019b42:	6032      	strlt	r2, [r6, #0]
 8019b44:	43bb      	bics	r3, r7
 8019b46:	d112      	bne.n	8019b6e <_dtoa_r+0x9e>
 8019b48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019b4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019b4e:	6013      	str	r3, [r2, #0]
 8019b50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019b54:	4323      	orrs	r3, r4
 8019b56:	f000 854d 	beq.w	801a5f4 <_dtoa_r+0xb24>
 8019b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019b5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8019db4 <_dtoa_r+0x2e4>
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	f000 854f 	beq.w	801a604 <_dtoa_r+0xb34>
 8019b66:	f10a 0303 	add.w	r3, sl, #3
 8019b6a:	f000 bd49 	b.w	801a600 <_dtoa_r+0xb30>
 8019b6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019b72:	2200      	movs	r2, #0
 8019b74:	ec51 0b17 	vmov	r0, r1, d7
 8019b78:	2300      	movs	r3, #0
 8019b7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8019b7e:	f7e6 ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8019b82:	4680      	mov	r8, r0
 8019b84:	b158      	cbz	r0, 8019b9e <_dtoa_r+0xce>
 8019b86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019b88:	2301      	movs	r3, #1
 8019b8a:	6013      	str	r3, [r2, #0]
 8019b8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019b8e:	b113      	cbz	r3, 8019b96 <_dtoa_r+0xc6>
 8019b90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8019b92:	4b84      	ldr	r3, [pc, #528]	@ (8019da4 <_dtoa_r+0x2d4>)
 8019b94:	6013      	str	r3, [r2, #0]
 8019b96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8019db8 <_dtoa_r+0x2e8>
 8019b9a:	f000 bd33 	b.w	801a604 <_dtoa_r+0xb34>
 8019b9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8019ba2:	aa16      	add	r2, sp, #88	@ 0x58
 8019ba4:	a917      	add	r1, sp, #92	@ 0x5c
 8019ba6:	4658      	mov	r0, fp
 8019ba8:	f001 f8d6 	bl	801ad58 <__d2b>
 8019bac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8019bb0:	4681      	mov	r9, r0
 8019bb2:	2e00      	cmp	r6, #0
 8019bb4:	d077      	beq.n	8019ca6 <_dtoa_r+0x1d6>
 8019bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019bb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8019bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019bc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8019bc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8019bcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8019bd0:	4619      	mov	r1, r3
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	4b74      	ldr	r3, [pc, #464]	@ (8019da8 <_dtoa_r+0x2d8>)
 8019bd6:	f7e6 fb67 	bl	80002a8 <__aeabi_dsub>
 8019bda:	a369      	add	r3, pc, #420	@ (adr r3, 8019d80 <_dtoa_r+0x2b0>)
 8019bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be0:	f7e6 fd1a 	bl	8000618 <__aeabi_dmul>
 8019be4:	a368      	add	r3, pc, #416	@ (adr r3, 8019d88 <_dtoa_r+0x2b8>)
 8019be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bea:	f7e6 fb5f 	bl	80002ac <__adddf3>
 8019bee:	4604      	mov	r4, r0
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	460d      	mov	r5, r1
 8019bf4:	f7e6 fca6 	bl	8000544 <__aeabi_i2d>
 8019bf8:	a365      	add	r3, pc, #404	@ (adr r3, 8019d90 <_dtoa_r+0x2c0>)
 8019bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bfe:	f7e6 fd0b 	bl	8000618 <__aeabi_dmul>
 8019c02:	4602      	mov	r2, r0
 8019c04:	460b      	mov	r3, r1
 8019c06:	4620      	mov	r0, r4
 8019c08:	4629      	mov	r1, r5
 8019c0a:	f7e6 fb4f 	bl	80002ac <__adddf3>
 8019c0e:	4604      	mov	r4, r0
 8019c10:	460d      	mov	r5, r1
 8019c12:	f7e6 ffb1 	bl	8000b78 <__aeabi_d2iz>
 8019c16:	2200      	movs	r2, #0
 8019c18:	4607      	mov	r7, r0
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	4629      	mov	r1, r5
 8019c20:	f7e6 ff6c 	bl	8000afc <__aeabi_dcmplt>
 8019c24:	b140      	cbz	r0, 8019c38 <_dtoa_r+0x168>
 8019c26:	4638      	mov	r0, r7
 8019c28:	f7e6 fc8c 	bl	8000544 <__aeabi_i2d>
 8019c2c:	4622      	mov	r2, r4
 8019c2e:	462b      	mov	r3, r5
 8019c30:	f7e6 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8019c34:	b900      	cbnz	r0, 8019c38 <_dtoa_r+0x168>
 8019c36:	3f01      	subs	r7, #1
 8019c38:	2f16      	cmp	r7, #22
 8019c3a:	d851      	bhi.n	8019ce0 <_dtoa_r+0x210>
 8019c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8019dac <_dtoa_r+0x2dc>)
 8019c3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019c4a:	f7e6 ff57 	bl	8000afc <__aeabi_dcmplt>
 8019c4e:	2800      	cmp	r0, #0
 8019c50:	d048      	beq.n	8019ce4 <_dtoa_r+0x214>
 8019c52:	3f01      	subs	r7, #1
 8019c54:	2300      	movs	r3, #0
 8019c56:	9312      	str	r3, [sp, #72]	@ 0x48
 8019c58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019c5a:	1b9b      	subs	r3, r3, r6
 8019c5c:	1e5a      	subs	r2, r3, #1
 8019c5e:	bf44      	itt	mi
 8019c60:	f1c3 0801 	rsbmi	r8, r3, #1
 8019c64:	2300      	movmi	r3, #0
 8019c66:	9208      	str	r2, [sp, #32]
 8019c68:	bf54      	ite	pl
 8019c6a:	f04f 0800 	movpl.w	r8, #0
 8019c6e:	9308      	strmi	r3, [sp, #32]
 8019c70:	2f00      	cmp	r7, #0
 8019c72:	db39      	blt.n	8019ce8 <_dtoa_r+0x218>
 8019c74:	9b08      	ldr	r3, [sp, #32]
 8019c76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8019c78:	443b      	add	r3, r7
 8019c7a:	9308      	str	r3, [sp, #32]
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c82:	2b09      	cmp	r3, #9
 8019c84:	d864      	bhi.n	8019d50 <_dtoa_r+0x280>
 8019c86:	2b05      	cmp	r3, #5
 8019c88:	bfc4      	itt	gt
 8019c8a:	3b04      	subgt	r3, #4
 8019c8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8019c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c90:	f1a3 0302 	sub.w	r3, r3, #2
 8019c94:	bfcc      	ite	gt
 8019c96:	2400      	movgt	r4, #0
 8019c98:	2401      	movle	r4, #1
 8019c9a:	2b03      	cmp	r3, #3
 8019c9c:	d863      	bhi.n	8019d66 <_dtoa_r+0x296>
 8019c9e:	e8df f003 	tbb	[pc, r3]
 8019ca2:	372a      	.short	0x372a
 8019ca4:	5535      	.short	0x5535
 8019ca6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8019caa:	441e      	add	r6, r3
 8019cac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8019cb0:	2b20      	cmp	r3, #32
 8019cb2:	bfc1      	itttt	gt
 8019cb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8019cb8:	409f      	lslgt	r7, r3
 8019cba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8019cbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8019cc2:	bfd6      	itet	le
 8019cc4:	f1c3 0320 	rsble	r3, r3, #32
 8019cc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8019ccc:	fa04 f003 	lslle.w	r0, r4, r3
 8019cd0:	f7e6 fc28 	bl	8000524 <__aeabi_ui2d>
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8019cda:	3e01      	subs	r6, #1
 8019cdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8019cde:	e777      	b.n	8019bd0 <_dtoa_r+0x100>
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	e7b8      	b.n	8019c56 <_dtoa_r+0x186>
 8019ce4:	9012      	str	r0, [sp, #72]	@ 0x48
 8019ce6:	e7b7      	b.n	8019c58 <_dtoa_r+0x188>
 8019ce8:	427b      	negs	r3, r7
 8019cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cec:	2300      	movs	r3, #0
 8019cee:	eba8 0807 	sub.w	r8, r8, r7
 8019cf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019cf4:	e7c4      	b.n	8019c80 <_dtoa_r+0x1b0>
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	dc35      	bgt.n	8019d6c <_dtoa_r+0x29c>
 8019d00:	2301      	movs	r3, #1
 8019d02:	9300      	str	r3, [sp, #0]
 8019d04:	9307      	str	r3, [sp, #28]
 8019d06:	461a      	mov	r2, r3
 8019d08:	920e      	str	r2, [sp, #56]	@ 0x38
 8019d0a:	e00b      	b.n	8019d24 <_dtoa_r+0x254>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	e7f3      	b.n	8019cf8 <_dtoa_r+0x228>
 8019d10:	2300      	movs	r3, #0
 8019d12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d16:	18fb      	adds	r3, r7, r3
 8019d18:	9300      	str	r3, [sp, #0]
 8019d1a:	3301      	adds	r3, #1
 8019d1c:	2b01      	cmp	r3, #1
 8019d1e:	9307      	str	r3, [sp, #28]
 8019d20:	bfb8      	it	lt
 8019d22:	2301      	movlt	r3, #1
 8019d24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8019d28:	2100      	movs	r1, #0
 8019d2a:	2204      	movs	r2, #4
 8019d2c:	f102 0514 	add.w	r5, r2, #20
 8019d30:	429d      	cmp	r5, r3
 8019d32:	d91f      	bls.n	8019d74 <_dtoa_r+0x2a4>
 8019d34:	6041      	str	r1, [r0, #4]
 8019d36:	4658      	mov	r0, fp
 8019d38:	f000 fce4 	bl	801a704 <_Balloc>
 8019d3c:	4682      	mov	sl, r0
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	d13c      	bne.n	8019dbc <_dtoa_r+0x2ec>
 8019d42:	4b1b      	ldr	r3, [pc, #108]	@ (8019db0 <_dtoa_r+0x2e0>)
 8019d44:	4602      	mov	r2, r0
 8019d46:	f240 11af 	movw	r1, #431	@ 0x1af
 8019d4a:	e6d8      	b.n	8019afe <_dtoa_r+0x2e>
 8019d4c:	2301      	movs	r3, #1
 8019d4e:	e7e0      	b.n	8019d12 <_dtoa_r+0x242>
 8019d50:	2401      	movs	r4, #1
 8019d52:	2300      	movs	r3, #0
 8019d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019d58:	f04f 33ff 	mov.w	r3, #4294967295
 8019d5c:	9300      	str	r3, [sp, #0]
 8019d5e:	9307      	str	r3, [sp, #28]
 8019d60:	2200      	movs	r2, #0
 8019d62:	2312      	movs	r3, #18
 8019d64:	e7d0      	b.n	8019d08 <_dtoa_r+0x238>
 8019d66:	2301      	movs	r3, #1
 8019d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019d6a:	e7f5      	b.n	8019d58 <_dtoa_r+0x288>
 8019d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d6e:	9300      	str	r3, [sp, #0]
 8019d70:	9307      	str	r3, [sp, #28]
 8019d72:	e7d7      	b.n	8019d24 <_dtoa_r+0x254>
 8019d74:	3101      	adds	r1, #1
 8019d76:	0052      	lsls	r2, r2, #1
 8019d78:	e7d8      	b.n	8019d2c <_dtoa_r+0x25c>
 8019d7a:	bf00      	nop
 8019d7c:	f3af 8000 	nop.w
 8019d80:	636f4361 	.word	0x636f4361
 8019d84:	3fd287a7 	.word	0x3fd287a7
 8019d88:	8b60c8b3 	.word	0x8b60c8b3
 8019d8c:	3fc68a28 	.word	0x3fc68a28
 8019d90:	509f79fb 	.word	0x509f79fb
 8019d94:	3fd34413 	.word	0x3fd34413
 8019d98:	0801ccd4 	.word	0x0801ccd4
 8019d9c:	0801ce85 	.word	0x0801ce85
 8019da0:	7ff00000 	.word	0x7ff00000
 8019da4:	0801ce55 	.word	0x0801ce55
 8019da8:	3ff80000 	.word	0x3ff80000
 8019dac:	0801cf80 	.word	0x0801cf80
 8019db0:	0801cedd 	.word	0x0801cedd
 8019db4:	0801ce81 	.word	0x0801ce81
 8019db8:	0801ce54 	.word	0x0801ce54
 8019dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019dc0:	6018      	str	r0, [r3, #0]
 8019dc2:	9b07      	ldr	r3, [sp, #28]
 8019dc4:	2b0e      	cmp	r3, #14
 8019dc6:	f200 80a4 	bhi.w	8019f12 <_dtoa_r+0x442>
 8019dca:	2c00      	cmp	r4, #0
 8019dcc:	f000 80a1 	beq.w	8019f12 <_dtoa_r+0x442>
 8019dd0:	2f00      	cmp	r7, #0
 8019dd2:	dd33      	ble.n	8019e3c <_dtoa_r+0x36c>
 8019dd4:	4bad      	ldr	r3, [pc, #692]	@ (801a08c <_dtoa_r+0x5bc>)
 8019dd6:	f007 020f 	and.w	r2, r7, #15
 8019dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019dde:	ed93 7b00 	vldr	d7, [r3]
 8019de2:	05f8      	lsls	r0, r7, #23
 8019de4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019de8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8019dec:	d516      	bpl.n	8019e1c <_dtoa_r+0x34c>
 8019dee:	4ba8      	ldr	r3, [pc, #672]	@ (801a090 <_dtoa_r+0x5c0>)
 8019df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019df8:	f7e6 fd38 	bl	800086c <__aeabi_ddiv>
 8019dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e00:	f004 040f 	and.w	r4, r4, #15
 8019e04:	2603      	movs	r6, #3
 8019e06:	4da2      	ldr	r5, [pc, #648]	@ (801a090 <_dtoa_r+0x5c0>)
 8019e08:	b954      	cbnz	r4, 8019e20 <_dtoa_r+0x350>
 8019e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019e12:	f7e6 fd2b 	bl	800086c <__aeabi_ddiv>
 8019e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e1a:	e028      	b.n	8019e6e <_dtoa_r+0x39e>
 8019e1c:	2602      	movs	r6, #2
 8019e1e:	e7f2      	b.n	8019e06 <_dtoa_r+0x336>
 8019e20:	07e1      	lsls	r1, r4, #31
 8019e22:	d508      	bpl.n	8019e36 <_dtoa_r+0x366>
 8019e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019e2c:	f7e6 fbf4 	bl	8000618 <__aeabi_dmul>
 8019e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019e34:	3601      	adds	r6, #1
 8019e36:	1064      	asrs	r4, r4, #1
 8019e38:	3508      	adds	r5, #8
 8019e3a:	e7e5      	b.n	8019e08 <_dtoa_r+0x338>
 8019e3c:	f000 80d2 	beq.w	8019fe4 <_dtoa_r+0x514>
 8019e40:	427c      	negs	r4, r7
 8019e42:	4b92      	ldr	r3, [pc, #584]	@ (801a08c <_dtoa_r+0x5bc>)
 8019e44:	4d92      	ldr	r5, [pc, #584]	@ (801a090 <_dtoa_r+0x5c0>)
 8019e46:	f004 020f 	and.w	r2, r4, #15
 8019e4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019e56:	f7e6 fbdf 	bl	8000618 <__aeabi_dmul>
 8019e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e5e:	1124      	asrs	r4, r4, #4
 8019e60:	2300      	movs	r3, #0
 8019e62:	2602      	movs	r6, #2
 8019e64:	2c00      	cmp	r4, #0
 8019e66:	f040 80b2 	bne.w	8019fce <_dtoa_r+0x4fe>
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d1d3      	bne.n	8019e16 <_dtoa_r+0x346>
 8019e6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019e70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	f000 80b7 	beq.w	8019fe8 <_dtoa_r+0x518>
 8019e7a:	4b86      	ldr	r3, [pc, #536]	@ (801a094 <_dtoa_r+0x5c4>)
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	4620      	mov	r0, r4
 8019e80:	4629      	mov	r1, r5
 8019e82:	f7e6 fe3b 	bl	8000afc <__aeabi_dcmplt>
 8019e86:	2800      	cmp	r0, #0
 8019e88:	f000 80ae 	beq.w	8019fe8 <_dtoa_r+0x518>
 8019e8c:	9b07      	ldr	r3, [sp, #28]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	f000 80aa 	beq.w	8019fe8 <_dtoa_r+0x518>
 8019e94:	9b00      	ldr	r3, [sp, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	dd37      	ble.n	8019f0a <_dtoa_r+0x43a>
 8019e9a:	1e7b      	subs	r3, r7, #1
 8019e9c:	9304      	str	r3, [sp, #16]
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	4b7d      	ldr	r3, [pc, #500]	@ (801a098 <_dtoa_r+0x5c8>)
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	4629      	mov	r1, r5
 8019ea6:	f7e6 fbb7 	bl	8000618 <__aeabi_dmul>
 8019eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019eae:	9c00      	ldr	r4, [sp, #0]
 8019eb0:	3601      	adds	r6, #1
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	f7e6 fb46 	bl	8000544 <__aeabi_i2d>
 8019eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019ebc:	f7e6 fbac 	bl	8000618 <__aeabi_dmul>
 8019ec0:	4b76      	ldr	r3, [pc, #472]	@ (801a09c <_dtoa_r+0x5cc>)
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	f7e6 f9f2 	bl	80002ac <__adddf3>
 8019ec8:	4605      	mov	r5, r0
 8019eca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8019ece:	2c00      	cmp	r4, #0
 8019ed0:	f040 808d 	bne.w	8019fee <_dtoa_r+0x51e>
 8019ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ed8:	4b71      	ldr	r3, [pc, #452]	@ (801a0a0 <_dtoa_r+0x5d0>)
 8019eda:	2200      	movs	r2, #0
 8019edc:	f7e6 f9e4 	bl	80002a8 <__aeabi_dsub>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	460b      	mov	r3, r1
 8019ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019ee8:	462a      	mov	r2, r5
 8019eea:	4633      	mov	r3, r6
 8019eec:	f7e6 fe24 	bl	8000b38 <__aeabi_dcmpgt>
 8019ef0:	2800      	cmp	r0, #0
 8019ef2:	f040 828b 	bne.w	801a40c <_dtoa_r+0x93c>
 8019ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019efa:	462a      	mov	r2, r5
 8019efc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8019f00:	f7e6 fdfc 	bl	8000afc <__aeabi_dcmplt>
 8019f04:	2800      	cmp	r0, #0
 8019f06:	f040 8128 	bne.w	801a15a <_dtoa_r+0x68a>
 8019f0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8019f0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8019f12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	f2c0 815a 	blt.w	801a1ce <_dtoa_r+0x6fe>
 8019f1a:	2f0e      	cmp	r7, #14
 8019f1c:	f300 8157 	bgt.w	801a1ce <_dtoa_r+0x6fe>
 8019f20:	4b5a      	ldr	r3, [pc, #360]	@ (801a08c <_dtoa_r+0x5bc>)
 8019f22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019f26:	ed93 7b00 	vldr	d7, [r3]
 8019f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	ed8d 7b00 	vstr	d7, [sp]
 8019f32:	da03      	bge.n	8019f3c <_dtoa_r+0x46c>
 8019f34:	9b07      	ldr	r3, [sp, #28]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	f340 8101 	ble.w	801a13e <_dtoa_r+0x66e>
 8019f3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019f40:	4656      	mov	r6, sl
 8019f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019f46:	4620      	mov	r0, r4
 8019f48:	4629      	mov	r1, r5
 8019f4a:	f7e6 fc8f 	bl	800086c <__aeabi_ddiv>
 8019f4e:	f7e6 fe13 	bl	8000b78 <__aeabi_d2iz>
 8019f52:	4680      	mov	r8, r0
 8019f54:	f7e6 faf6 	bl	8000544 <__aeabi_i2d>
 8019f58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019f5c:	f7e6 fb5c 	bl	8000618 <__aeabi_dmul>
 8019f60:	4602      	mov	r2, r0
 8019f62:	460b      	mov	r3, r1
 8019f64:	4620      	mov	r0, r4
 8019f66:	4629      	mov	r1, r5
 8019f68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8019f6c:	f7e6 f99c 	bl	80002a8 <__aeabi_dsub>
 8019f70:	f806 4b01 	strb.w	r4, [r6], #1
 8019f74:	9d07      	ldr	r5, [sp, #28]
 8019f76:	eba6 040a 	sub.w	r4, r6, sl
 8019f7a:	42a5      	cmp	r5, r4
 8019f7c:	4602      	mov	r2, r0
 8019f7e:	460b      	mov	r3, r1
 8019f80:	f040 8117 	bne.w	801a1b2 <_dtoa_r+0x6e2>
 8019f84:	f7e6 f992 	bl	80002ac <__adddf3>
 8019f88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019f8c:	4604      	mov	r4, r0
 8019f8e:	460d      	mov	r5, r1
 8019f90:	f7e6 fdd2 	bl	8000b38 <__aeabi_dcmpgt>
 8019f94:	2800      	cmp	r0, #0
 8019f96:	f040 80f9 	bne.w	801a18c <_dtoa_r+0x6bc>
 8019f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019f9e:	4620      	mov	r0, r4
 8019fa0:	4629      	mov	r1, r5
 8019fa2:	f7e6 fda1 	bl	8000ae8 <__aeabi_dcmpeq>
 8019fa6:	b118      	cbz	r0, 8019fb0 <_dtoa_r+0x4e0>
 8019fa8:	f018 0f01 	tst.w	r8, #1
 8019fac:	f040 80ee 	bne.w	801a18c <_dtoa_r+0x6bc>
 8019fb0:	4649      	mov	r1, r9
 8019fb2:	4658      	mov	r0, fp
 8019fb4:	f000 fbe6 	bl	801a784 <_Bfree>
 8019fb8:	2300      	movs	r3, #0
 8019fba:	7033      	strb	r3, [r6, #0]
 8019fbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019fbe:	3701      	adds	r7, #1
 8019fc0:	601f      	str	r7, [r3, #0]
 8019fc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	f000 831d 	beq.w	801a604 <_dtoa_r+0xb34>
 8019fca:	601e      	str	r6, [r3, #0]
 8019fcc:	e31a      	b.n	801a604 <_dtoa_r+0xb34>
 8019fce:	07e2      	lsls	r2, r4, #31
 8019fd0:	d505      	bpl.n	8019fde <_dtoa_r+0x50e>
 8019fd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019fd6:	f7e6 fb1f 	bl	8000618 <__aeabi_dmul>
 8019fda:	3601      	adds	r6, #1
 8019fdc:	2301      	movs	r3, #1
 8019fde:	1064      	asrs	r4, r4, #1
 8019fe0:	3508      	adds	r5, #8
 8019fe2:	e73f      	b.n	8019e64 <_dtoa_r+0x394>
 8019fe4:	2602      	movs	r6, #2
 8019fe6:	e742      	b.n	8019e6e <_dtoa_r+0x39e>
 8019fe8:	9c07      	ldr	r4, [sp, #28]
 8019fea:	9704      	str	r7, [sp, #16]
 8019fec:	e761      	b.n	8019eb2 <_dtoa_r+0x3e2>
 8019fee:	4b27      	ldr	r3, [pc, #156]	@ (801a08c <_dtoa_r+0x5bc>)
 8019ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019ff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019ff6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019ffa:	4454      	add	r4, sl
 8019ffc:	2900      	cmp	r1, #0
 8019ffe:	d053      	beq.n	801a0a8 <_dtoa_r+0x5d8>
 801a000:	4928      	ldr	r1, [pc, #160]	@ (801a0a4 <_dtoa_r+0x5d4>)
 801a002:	2000      	movs	r0, #0
 801a004:	f7e6 fc32 	bl	800086c <__aeabi_ddiv>
 801a008:	4633      	mov	r3, r6
 801a00a:	462a      	mov	r2, r5
 801a00c:	f7e6 f94c 	bl	80002a8 <__aeabi_dsub>
 801a010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a014:	4656      	mov	r6, sl
 801a016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a01a:	f7e6 fdad 	bl	8000b78 <__aeabi_d2iz>
 801a01e:	4605      	mov	r5, r0
 801a020:	f7e6 fa90 	bl	8000544 <__aeabi_i2d>
 801a024:	4602      	mov	r2, r0
 801a026:	460b      	mov	r3, r1
 801a028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a02c:	f7e6 f93c 	bl	80002a8 <__aeabi_dsub>
 801a030:	3530      	adds	r5, #48	@ 0x30
 801a032:	4602      	mov	r2, r0
 801a034:	460b      	mov	r3, r1
 801a036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a03a:	f806 5b01 	strb.w	r5, [r6], #1
 801a03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a042:	f7e6 fd5b 	bl	8000afc <__aeabi_dcmplt>
 801a046:	2800      	cmp	r0, #0
 801a048:	d171      	bne.n	801a12e <_dtoa_r+0x65e>
 801a04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a04e:	4911      	ldr	r1, [pc, #68]	@ (801a094 <_dtoa_r+0x5c4>)
 801a050:	2000      	movs	r0, #0
 801a052:	f7e6 f929 	bl	80002a8 <__aeabi_dsub>
 801a056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a05a:	f7e6 fd4f 	bl	8000afc <__aeabi_dcmplt>
 801a05e:	2800      	cmp	r0, #0
 801a060:	f040 8095 	bne.w	801a18e <_dtoa_r+0x6be>
 801a064:	42a6      	cmp	r6, r4
 801a066:	f43f af50 	beq.w	8019f0a <_dtoa_r+0x43a>
 801a06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801a06e:	4b0a      	ldr	r3, [pc, #40]	@ (801a098 <_dtoa_r+0x5c8>)
 801a070:	2200      	movs	r2, #0
 801a072:	f7e6 fad1 	bl	8000618 <__aeabi_dmul>
 801a076:	4b08      	ldr	r3, [pc, #32]	@ (801a098 <_dtoa_r+0x5c8>)
 801a078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a07c:	2200      	movs	r2, #0
 801a07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a082:	f7e6 fac9 	bl	8000618 <__aeabi_dmul>
 801a086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a08a:	e7c4      	b.n	801a016 <_dtoa_r+0x546>
 801a08c:	0801cf80 	.word	0x0801cf80
 801a090:	0801cf58 	.word	0x0801cf58
 801a094:	3ff00000 	.word	0x3ff00000
 801a098:	40240000 	.word	0x40240000
 801a09c:	401c0000 	.word	0x401c0000
 801a0a0:	40140000 	.word	0x40140000
 801a0a4:	3fe00000 	.word	0x3fe00000
 801a0a8:	4631      	mov	r1, r6
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	f7e6 fab4 	bl	8000618 <__aeabi_dmul>
 801a0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a0b4:	9415      	str	r4, [sp, #84]	@ 0x54
 801a0b6:	4656      	mov	r6, sl
 801a0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a0bc:	f7e6 fd5c 	bl	8000b78 <__aeabi_d2iz>
 801a0c0:	4605      	mov	r5, r0
 801a0c2:	f7e6 fa3f 	bl	8000544 <__aeabi_i2d>
 801a0c6:	4602      	mov	r2, r0
 801a0c8:	460b      	mov	r3, r1
 801a0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a0ce:	f7e6 f8eb 	bl	80002a8 <__aeabi_dsub>
 801a0d2:	3530      	adds	r5, #48	@ 0x30
 801a0d4:	f806 5b01 	strb.w	r5, [r6], #1
 801a0d8:	4602      	mov	r2, r0
 801a0da:	460b      	mov	r3, r1
 801a0dc:	42a6      	cmp	r6, r4
 801a0de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a0e2:	f04f 0200 	mov.w	r2, #0
 801a0e6:	d124      	bne.n	801a132 <_dtoa_r+0x662>
 801a0e8:	4bac      	ldr	r3, [pc, #688]	@ (801a39c <_dtoa_r+0x8cc>)
 801a0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801a0ee:	f7e6 f8dd 	bl	80002ac <__adddf3>
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	460b      	mov	r3, r1
 801a0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a0fa:	f7e6 fd1d 	bl	8000b38 <__aeabi_dcmpgt>
 801a0fe:	2800      	cmp	r0, #0
 801a100:	d145      	bne.n	801a18e <_dtoa_r+0x6be>
 801a102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a106:	49a5      	ldr	r1, [pc, #660]	@ (801a39c <_dtoa_r+0x8cc>)
 801a108:	2000      	movs	r0, #0
 801a10a:	f7e6 f8cd 	bl	80002a8 <__aeabi_dsub>
 801a10e:	4602      	mov	r2, r0
 801a110:	460b      	mov	r3, r1
 801a112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a116:	f7e6 fcf1 	bl	8000afc <__aeabi_dcmplt>
 801a11a:	2800      	cmp	r0, #0
 801a11c:	f43f aef5 	beq.w	8019f0a <_dtoa_r+0x43a>
 801a120:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801a122:	1e73      	subs	r3, r6, #1
 801a124:	9315      	str	r3, [sp, #84]	@ 0x54
 801a126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a12a:	2b30      	cmp	r3, #48	@ 0x30
 801a12c:	d0f8      	beq.n	801a120 <_dtoa_r+0x650>
 801a12e:	9f04      	ldr	r7, [sp, #16]
 801a130:	e73e      	b.n	8019fb0 <_dtoa_r+0x4e0>
 801a132:	4b9b      	ldr	r3, [pc, #620]	@ (801a3a0 <_dtoa_r+0x8d0>)
 801a134:	f7e6 fa70 	bl	8000618 <__aeabi_dmul>
 801a138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a13c:	e7bc      	b.n	801a0b8 <_dtoa_r+0x5e8>
 801a13e:	d10c      	bne.n	801a15a <_dtoa_r+0x68a>
 801a140:	4b98      	ldr	r3, [pc, #608]	@ (801a3a4 <_dtoa_r+0x8d4>)
 801a142:	2200      	movs	r2, #0
 801a144:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a148:	f7e6 fa66 	bl	8000618 <__aeabi_dmul>
 801a14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a150:	f7e6 fce8 	bl	8000b24 <__aeabi_dcmpge>
 801a154:	2800      	cmp	r0, #0
 801a156:	f000 8157 	beq.w	801a408 <_dtoa_r+0x938>
 801a15a:	2400      	movs	r4, #0
 801a15c:	4625      	mov	r5, r4
 801a15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a160:	43db      	mvns	r3, r3
 801a162:	9304      	str	r3, [sp, #16]
 801a164:	4656      	mov	r6, sl
 801a166:	2700      	movs	r7, #0
 801a168:	4621      	mov	r1, r4
 801a16a:	4658      	mov	r0, fp
 801a16c:	f000 fb0a 	bl	801a784 <_Bfree>
 801a170:	2d00      	cmp	r5, #0
 801a172:	d0dc      	beq.n	801a12e <_dtoa_r+0x65e>
 801a174:	b12f      	cbz	r7, 801a182 <_dtoa_r+0x6b2>
 801a176:	42af      	cmp	r7, r5
 801a178:	d003      	beq.n	801a182 <_dtoa_r+0x6b2>
 801a17a:	4639      	mov	r1, r7
 801a17c:	4658      	mov	r0, fp
 801a17e:	f000 fb01 	bl	801a784 <_Bfree>
 801a182:	4629      	mov	r1, r5
 801a184:	4658      	mov	r0, fp
 801a186:	f000 fafd 	bl	801a784 <_Bfree>
 801a18a:	e7d0      	b.n	801a12e <_dtoa_r+0x65e>
 801a18c:	9704      	str	r7, [sp, #16]
 801a18e:	4633      	mov	r3, r6
 801a190:	461e      	mov	r6, r3
 801a192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a196:	2a39      	cmp	r2, #57	@ 0x39
 801a198:	d107      	bne.n	801a1aa <_dtoa_r+0x6da>
 801a19a:	459a      	cmp	sl, r3
 801a19c:	d1f8      	bne.n	801a190 <_dtoa_r+0x6c0>
 801a19e:	9a04      	ldr	r2, [sp, #16]
 801a1a0:	3201      	adds	r2, #1
 801a1a2:	9204      	str	r2, [sp, #16]
 801a1a4:	2230      	movs	r2, #48	@ 0x30
 801a1a6:	f88a 2000 	strb.w	r2, [sl]
 801a1aa:	781a      	ldrb	r2, [r3, #0]
 801a1ac:	3201      	adds	r2, #1
 801a1ae:	701a      	strb	r2, [r3, #0]
 801a1b0:	e7bd      	b.n	801a12e <_dtoa_r+0x65e>
 801a1b2:	4b7b      	ldr	r3, [pc, #492]	@ (801a3a0 <_dtoa_r+0x8d0>)
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	f7e6 fa2f 	bl	8000618 <__aeabi_dmul>
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	2300      	movs	r3, #0
 801a1be:	4604      	mov	r4, r0
 801a1c0:	460d      	mov	r5, r1
 801a1c2:	f7e6 fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 801a1c6:	2800      	cmp	r0, #0
 801a1c8:	f43f aebb 	beq.w	8019f42 <_dtoa_r+0x472>
 801a1cc:	e6f0      	b.n	8019fb0 <_dtoa_r+0x4e0>
 801a1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a1d0:	2a00      	cmp	r2, #0
 801a1d2:	f000 80db 	beq.w	801a38c <_dtoa_r+0x8bc>
 801a1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1d8:	2a01      	cmp	r2, #1
 801a1da:	f300 80bf 	bgt.w	801a35c <_dtoa_r+0x88c>
 801a1de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a1e0:	2a00      	cmp	r2, #0
 801a1e2:	f000 80b7 	beq.w	801a354 <_dtoa_r+0x884>
 801a1e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801a1ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a1ec:	4646      	mov	r6, r8
 801a1ee:	9a08      	ldr	r2, [sp, #32]
 801a1f0:	2101      	movs	r1, #1
 801a1f2:	441a      	add	r2, r3
 801a1f4:	4658      	mov	r0, fp
 801a1f6:	4498      	add	r8, r3
 801a1f8:	9208      	str	r2, [sp, #32]
 801a1fa:	f000 fb77 	bl	801a8ec <__i2b>
 801a1fe:	4605      	mov	r5, r0
 801a200:	b15e      	cbz	r6, 801a21a <_dtoa_r+0x74a>
 801a202:	9b08      	ldr	r3, [sp, #32]
 801a204:	2b00      	cmp	r3, #0
 801a206:	dd08      	ble.n	801a21a <_dtoa_r+0x74a>
 801a208:	42b3      	cmp	r3, r6
 801a20a:	9a08      	ldr	r2, [sp, #32]
 801a20c:	bfa8      	it	ge
 801a20e:	4633      	movge	r3, r6
 801a210:	eba8 0803 	sub.w	r8, r8, r3
 801a214:	1af6      	subs	r6, r6, r3
 801a216:	1ad3      	subs	r3, r2, r3
 801a218:	9308      	str	r3, [sp, #32]
 801a21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a21c:	b1f3      	cbz	r3, 801a25c <_dtoa_r+0x78c>
 801a21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a220:	2b00      	cmp	r3, #0
 801a222:	f000 80b7 	beq.w	801a394 <_dtoa_r+0x8c4>
 801a226:	b18c      	cbz	r4, 801a24c <_dtoa_r+0x77c>
 801a228:	4629      	mov	r1, r5
 801a22a:	4622      	mov	r2, r4
 801a22c:	4658      	mov	r0, fp
 801a22e:	f000 fc1d 	bl	801aa6c <__pow5mult>
 801a232:	464a      	mov	r2, r9
 801a234:	4601      	mov	r1, r0
 801a236:	4605      	mov	r5, r0
 801a238:	4658      	mov	r0, fp
 801a23a:	f000 fb6d 	bl	801a918 <__multiply>
 801a23e:	4649      	mov	r1, r9
 801a240:	9004      	str	r0, [sp, #16]
 801a242:	4658      	mov	r0, fp
 801a244:	f000 fa9e 	bl	801a784 <_Bfree>
 801a248:	9b04      	ldr	r3, [sp, #16]
 801a24a:	4699      	mov	r9, r3
 801a24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a24e:	1b1a      	subs	r2, r3, r4
 801a250:	d004      	beq.n	801a25c <_dtoa_r+0x78c>
 801a252:	4649      	mov	r1, r9
 801a254:	4658      	mov	r0, fp
 801a256:	f000 fc09 	bl	801aa6c <__pow5mult>
 801a25a:	4681      	mov	r9, r0
 801a25c:	2101      	movs	r1, #1
 801a25e:	4658      	mov	r0, fp
 801a260:	f000 fb44 	bl	801a8ec <__i2b>
 801a264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a266:	4604      	mov	r4, r0
 801a268:	2b00      	cmp	r3, #0
 801a26a:	f000 81cf 	beq.w	801a60c <_dtoa_r+0xb3c>
 801a26e:	461a      	mov	r2, r3
 801a270:	4601      	mov	r1, r0
 801a272:	4658      	mov	r0, fp
 801a274:	f000 fbfa 	bl	801aa6c <__pow5mult>
 801a278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a27a:	2b01      	cmp	r3, #1
 801a27c:	4604      	mov	r4, r0
 801a27e:	f300 8095 	bgt.w	801a3ac <_dtoa_r+0x8dc>
 801a282:	9b02      	ldr	r3, [sp, #8]
 801a284:	2b00      	cmp	r3, #0
 801a286:	f040 8087 	bne.w	801a398 <_dtoa_r+0x8c8>
 801a28a:	9b03      	ldr	r3, [sp, #12]
 801a28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a290:	2b00      	cmp	r3, #0
 801a292:	f040 8089 	bne.w	801a3a8 <_dtoa_r+0x8d8>
 801a296:	9b03      	ldr	r3, [sp, #12]
 801a298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a29c:	0d1b      	lsrs	r3, r3, #20
 801a29e:	051b      	lsls	r3, r3, #20
 801a2a0:	b12b      	cbz	r3, 801a2ae <_dtoa_r+0x7de>
 801a2a2:	9b08      	ldr	r3, [sp, #32]
 801a2a4:	3301      	adds	r3, #1
 801a2a6:	9308      	str	r3, [sp, #32]
 801a2a8:	f108 0801 	add.w	r8, r8, #1
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801a2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	f000 81b0 	beq.w	801a618 <_dtoa_r+0xb48>
 801a2b8:	6923      	ldr	r3, [r4, #16]
 801a2ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a2be:	6918      	ldr	r0, [r3, #16]
 801a2c0:	f000 fac8 	bl	801a854 <__hi0bits>
 801a2c4:	f1c0 0020 	rsb	r0, r0, #32
 801a2c8:	9b08      	ldr	r3, [sp, #32]
 801a2ca:	4418      	add	r0, r3
 801a2cc:	f010 001f 	ands.w	r0, r0, #31
 801a2d0:	d077      	beq.n	801a3c2 <_dtoa_r+0x8f2>
 801a2d2:	f1c0 0320 	rsb	r3, r0, #32
 801a2d6:	2b04      	cmp	r3, #4
 801a2d8:	dd6b      	ble.n	801a3b2 <_dtoa_r+0x8e2>
 801a2da:	9b08      	ldr	r3, [sp, #32]
 801a2dc:	f1c0 001c 	rsb	r0, r0, #28
 801a2e0:	4403      	add	r3, r0
 801a2e2:	4480      	add	r8, r0
 801a2e4:	4406      	add	r6, r0
 801a2e6:	9308      	str	r3, [sp, #32]
 801a2e8:	f1b8 0f00 	cmp.w	r8, #0
 801a2ec:	dd05      	ble.n	801a2fa <_dtoa_r+0x82a>
 801a2ee:	4649      	mov	r1, r9
 801a2f0:	4642      	mov	r2, r8
 801a2f2:	4658      	mov	r0, fp
 801a2f4:	f000 fc14 	bl	801ab20 <__lshift>
 801a2f8:	4681      	mov	r9, r0
 801a2fa:	9b08      	ldr	r3, [sp, #32]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	dd05      	ble.n	801a30c <_dtoa_r+0x83c>
 801a300:	4621      	mov	r1, r4
 801a302:	461a      	mov	r2, r3
 801a304:	4658      	mov	r0, fp
 801a306:	f000 fc0b 	bl	801ab20 <__lshift>
 801a30a:	4604      	mov	r4, r0
 801a30c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d059      	beq.n	801a3c6 <_dtoa_r+0x8f6>
 801a312:	4621      	mov	r1, r4
 801a314:	4648      	mov	r0, r9
 801a316:	f000 fc6f 	bl	801abf8 <__mcmp>
 801a31a:	2800      	cmp	r0, #0
 801a31c:	da53      	bge.n	801a3c6 <_dtoa_r+0x8f6>
 801a31e:	1e7b      	subs	r3, r7, #1
 801a320:	9304      	str	r3, [sp, #16]
 801a322:	4649      	mov	r1, r9
 801a324:	2300      	movs	r3, #0
 801a326:	220a      	movs	r2, #10
 801a328:	4658      	mov	r0, fp
 801a32a:	f000 fa4d 	bl	801a7c8 <__multadd>
 801a32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a330:	4681      	mov	r9, r0
 801a332:	2b00      	cmp	r3, #0
 801a334:	f000 8172 	beq.w	801a61c <_dtoa_r+0xb4c>
 801a338:	2300      	movs	r3, #0
 801a33a:	4629      	mov	r1, r5
 801a33c:	220a      	movs	r2, #10
 801a33e:	4658      	mov	r0, fp
 801a340:	f000 fa42 	bl	801a7c8 <__multadd>
 801a344:	9b00      	ldr	r3, [sp, #0]
 801a346:	2b00      	cmp	r3, #0
 801a348:	4605      	mov	r5, r0
 801a34a:	dc67      	bgt.n	801a41c <_dtoa_r+0x94c>
 801a34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a34e:	2b02      	cmp	r3, #2
 801a350:	dc41      	bgt.n	801a3d6 <_dtoa_r+0x906>
 801a352:	e063      	b.n	801a41c <_dtoa_r+0x94c>
 801a354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801a35a:	e746      	b.n	801a1ea <_dtoa_r+0x71a>
 801a35c:	9b07      	ldr	r3, [sp, #28]
 801a35e:	1e5c      	subs	r4, r3, #1
 801a360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a362:	42a3      	cmp	r3, r4
 801a364:	bfbf      	itttt	lt
 801a366:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a368:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801a36a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801a36c:	1ae3      	sublt	r3, r4, r3
 801a36e:	bfb4      	ite	lt
 801a370:	18d2      	addlt	r2, r2, r3
 801a372:	1b1c      	subge	r4, r3, r4
 801a374:	9b07      	ldr	r3, [sp, #28]
 801a376:	bfbc      	itt	lt
 801a378:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801a37a:	2400      	movlt	r4, #0
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	bfb5      	itete	lt
 801a380:	eba8 0603 	sublt.w	r6, r8, r3
 801a384:	9b07      	ldrge	r3, [sp, #28]
 801a386:	2300      	movlt	r3, #0
 801a388:	4646      	movge	r6, r8
 801a38a:	e730      	b.n	801a1ee <_dtoa_r+0x71e>
 801a38c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a38e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801a390:	4646      	mov	r6, r8
 801a392:	e735      	b.n	801a200 <_dtoa_r+0x730>
 801a394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a396:	e75c      	b.n	801a252 <_dtoa_r+0x782>
 801a398:	2300      	movs	r3, #0
 801a39a:	e788      	b.n	801a2ae <_dtoa_r+0x7de>
 801a39c:	3fe00000 	.word	0x3fe00000
 801a3a0:	40240000 	.word	0x40240000
 801a3a4:	40140000 	.word	0x40140000
 801a3a8:	9b02      	ldr	r3, [sp, #8]
 801a3aa:	e780      	b.n	801a2ae <_dtoa_r+0x7de>
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3b0:	e782      	b.n	801a2b8 <_dtoa_r+0x7e8>
 801a3b2:	d099      	beq.n	801a2e8 <_dtoa_r+0x818>
 801a3b4:	9a08      	ldr	r2, [sp, #32]
 801a3b6:	331c      	adds	r3, #28
 801a3b8:	441a      	add	r2, r3
 801a3ba:	4498      	add	r8, r3
 801a3bc:	441e      	add	r6, r3
 801a3be:	9208      	str	r2, [sp, #32]
 801a3c0:	e792      	b.n	801a2e8 <_dtoa_r+0x818>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	e7f6      	b.n	801a3b4 <_dtoa_r+0x8e4>
 801a3c6:	9b07      	ldr	r3, [sp, #28]
 801a3c8:	9704      	str	r7, [sp, #16]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	dc20      	bgt.n	801a410 <_dtoa_r+0x940>
 801a3ce:	9300      	str	r3, [sp, #0]
 801a3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3d2:	2b02      	cmp	r3, #2
 801a3d4:	dd1e      	ble.n	801a414 <_dtoa_r+0x944>
 801a3d6:	9b00      	ldr	r3, [sp, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	f47f aec0 	bne.w	801a15e <_dtoa_r+0x68e>
 801a3de:	4621      	mov	r1, r4
 801a3e0:	2205      	movs	r2, #5
 801a3e2:	4658      	mov	r0, fp
 801a3e4:	f000 f9f0 	bl	801a7c8 <__multadd>
 801a3e8:	4601      	mov	r1, r0
 801a3ea:	4604      	mov	r4, r0
 801a3ec:	4648      	mov	r0, r9
 801a3ee:	f000 fc03 	bl	801abf8 <__mcmp>
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	f77f aeb3 	ble.w	801a15e <_dtoa_r+0x68e>
 801a3f8:	4656      	mov	r6, sl
 801a3fa:	2331      	movs	r3, #49	@ 0x31
 801a3fc:	f806 3b01 	strb.w	r3, [r6], #1
 801a400:	9b04      	ldr	r3, [sp, #16]
 801a402:	3301      	adds	r3, #1
 801a404:	9304      	str	r3, [sp, #16]
 801a406:	e6ae      	b.n	801a166 <_dtoa_r+0x696>
 801a408:	9c07      	ldr	r4, [sp, #28]
 801a40a:	9704      	str	r7, [sp, #16]
 801a40c:	4625      	mov	r5, r4
 801a40e:	e7f3      	b.n	801a3f8 <_dtoa_r+0x928>
 801a410:	9b07      	ldr	r3, [sp, #28]
 801a412:	9300      	str	r3, [sp, #0]
 801a414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a416:	2b00      	cmp	r3, #0
 801a418:	f000 8104 	beq.w	801a624 <_dtoa_r+0xb54>
 801a41c:	2e00      	cmp	r6, #0
 801a41e:	dd05      	ble.n	801a42c <_dtoa_r+0x95c>
 801a420:	4629      	mov	r1, r5
 801a422:	4632      	mov	r2, r6
 801a424:	4658      	mov	r0, fp
 801a426:	f000 fb7b 	bl	801ab20 <__lshift>
 801a42a:	4605      	mov	r5, r0
 801a42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d05a      	beq.n	801a4e8 <_dtoa_r+0xa18>
 801a432:	6869      	ldr	r1, [r5, #4]
 801a434:	4658      	mov	r0, fp
 801a436:	f000 f965 	bl	801a704 <_Balloc>
 801a43a:	4606      	mov	r6, r0
 801a43c:	b928      	cbnz	r0, 801a44a <_dtoa_r+0x97a>
 801a43e:	4b84      	ldr	r3, [pc, #528]	@ (801a650 <_dtoa_r+0xb80>)
 801a440:	4602      	mov	r2, r0
 801a442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a446:	f7ff bb5a 	b.w	8019afe <_dtoa_r+0x2e>
 801a44a:	692a      	ldr	r2, [r5, #16]
 801a44c:	3202      	adds	r2, #2
 801a44e:	0092      	lsls	r2, r2, #2
 801a450:	f105 010c 	add.w	r1, r5, #12
 801a454:	300c      	adds	r0, #12
 801a456:	f7ff fa9e 	bl	8019996 <memcpy>
 801a45a:	2201      	movs	r2, #1
 801a45c:	4631      	mov	r1, r6
 801a45e:	4658      	mov	r0, fp
 801a460:	f000 fb5e 	bl	801ab20 <__lshift>
 801a464:	f10a 0301 	add.w	r3, sl, #1
 801a468:	9307      	str	r3, [sp, #28]
 801a46a:	9b00      	ldr	r3, [sp, #0]
 801a46c:	4453      	add	r3, sl
 801a46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a470:	9b02      	ldr	r3, [sp, #8]
 801a472:	f003 0301 	and.w	r3, r3, #1
 801a476:	462f      	mov	r7, r5
 801a478:	930a      	str	r3, [sp, #40]	@ 0x28
 801a47a:	4605      	mov	r5, r0
 801a47c:	9b07      	ldr	r3, [sp, #28]
 801a47e:	4621      	mov	r1, r4
 801a480:	3b01      	subs	r3, #1
 801a482:	4648      	mov	r0, r9
 801a484:	9300      	str	r3, [sp, #0]
 801a486:	f7ff fa9b 	bl	80199c0 <quorem>
 801a48a:	4639      	mov	r1, r7
 801a48c:	9002      	str	r0, [sp, #8]
 801a48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801a492:	4648      	mov	r0, r9
 801a494:	f000 fbb0 	bl	801abf8 <__mcmp>
 801a498:	462a      	mov	r2, r5
 801a49a:	9008      	str	r0, [sp, #32]
 801a49c:	4621      	mov	r1, r4
 801a49e:	4658      	mov	r0, fp
 801a4a0:	f000 fbc6 	bl	801ac30 <__mdiff>
 801a4a4:	68c2      	ldr	r2, [r0, #12]
 801a4a6:	4606      	mov	r6, r0
 801a4a8:	bb02      	cbnz	r2, 801a4ec <_dtoa_r+0xa1c>
 801a4aa:	4601      	mov	r1, r0
 801a4ac:	4648      	mov	r0, r9
 801a4ae:	f000 fba3 	bl	801abf8 <__mcmp>
 801a4b2:	4602      	mov	r2, r0
 801a4b4:	4631      	mov	r1, r6
 801a4b6:	4658      	mov	r0, fp
 801a4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801a4ba:	f000 f963 	bl	801a784 <_Bfree>
 801a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a4c2:	9e07      	ldr	r6, [sp, #28]
 801a4c4:	ea43 0102 	orr.w	r1, r3, r2
 801a4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a4ca:	4319      	orrs	r1, r3
 801a4cc:	d110      	bne.n	801a4f0 <_dtoa_r+0xa20>
 801a4ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801a4d2:	d029      	beq.n	801a528 <_dtoa_r+0xa58>
 801a4d4:	9b08      	ldr	r3, [sp, #32]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	dd02      	ble.n	801a4e0 <_dtoa_r+0xa10>
 801a4da:	9b02      	ldr	r3, [sp, #8]
 801a4dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801a4e0:	9b00      	ldr	r3, [sp, #0]
 801a4e2:	f883 8000 	strb.w	r8, [r3]
 801a4e6:	e63f      	b.n	801a168 <_dtoa_r+0x698>
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	e7bb      	b.n	801a464 <_dtoa_r+0x994>
 801a4ec:	2201      	movs	r2, #1
 801a4ee:	e7e1      	b.n	801a4b4 <_dtoa_r+0x9e4>
 801a4f0:	9b08      	ldr	r3, [sp, #32]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	db04      	blt.n	801a500 <_dtoa_r+0xa30>
 801a4f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a4f8:	430b      	orrs	r3, r1
 801a4fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a4fc:	430b      	orrs	r3, r1
 801a4fe:	d120      	bne.n	801a542 <_dtoa_r+0xa72>
 801a500:	2a00      	cmp	r2, #0
 801a502:	dded      	ble.n	801a4e0 <_dtoa_r+0xa10>
 801a504:	4649      	mov	r1, r9
 801a506:	2201      	movs	r2, #1
 801a508:	4658      	mov	r0, fp
 801a50a:	f000 fb09 	bl	801ab20 <__lshift>
 801a50e:	4621      	mov	r1, r4
 801a510:	4681      	mov	r9, r0
 801a512:	f000 fb71 	bl	801abf8 <__mcmp>
 801a516:	2800      	cmp	r0, #0
 801a518:	dc03      	bgt.n	801a522 <_dtoa_r+0xa52>
 801a51a:	d1e1      	bne.n	801a4e0 <_dtoa_r+0xa10>
 801a51c:	f018 0f01 	tst.w	r8, #1
 801a520:	d0de      	beq.n	801a4e0 <_dtoa_r+0xa10>
 801a522:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801a526:	d1d8      	bne.n	801a4da <_dtoa_r+0xa0a>
 801a528:	9a00      	ldr	r2, [sp, #0]
 801a52a:	2339      	movs	r3, #57	@ 0x39
 801a52c:	7013      	strb	r3, [r2, #0]
 801a52e:	4633      	mov	r3, r6
 801a530:	461e      	mov	r6, r3
 801a532:	3b01      	subs	r3, #1
 801a534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a538:	2a39      	cmp	r2, #57	@ 0x39
 801a53a:	d052      	beq.n	801a5e2 <_dtoa_r+0xb12>
 801a53c:	3201      	adds	r2, #1
 801a53e:	701a      	strb	r2, [r3, #0]
 801a540:	e612      	b.n	801a168 <_dtoa_r+0x698>
 801a542:	2a00      	cmp	r2, #0
 801a544:	dd07      	ble.n	801a556 <_dtoa_r+0xa86>
 801a546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801a54a:	d0ed      	beq.n	801a528 <_dtoa_r+0xa58>
 801a54c:	9a00      	ldr	r2, [sp, #0]
 801a54e:	f108 0301 	add.w	r3, r8, #1
 801a552:	7013      	strb	r3, [r2, #0]
 801a554:	e608      	b.n	801a168 <_dtoa_r+0x698>
 801a556:	9b07      	ldr	r3, [sp, #28]
 801a558:	9a07      	ldr	r2, [sp, #28]
 801a55a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801a55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a560:	4293      	cmp	r3, r2
 801a562:	d028      	beq.n	801a5b6 <_dtoa_r+0xae6>
 801a564:	4649      	mov	r1, r9
 801a566:	2300      	movs	r3, #0
 801a568:	220a      	movs	r2, #10
 801a56a:	4658      	mov	r0, fp
 801a56c:	f000 f92c 	bl	801a7c8 <__multadd>
 801a570:	42af      	cmp	r7, r5
 801a572:	4681      	mov	r9, r0
 801a574:	f04f 0300 	mov.w	r3, #0
 801a578:	f04f 020a 	mov.w	r2, #10
 801a57c:	4639      	mov	r1, r7
 801a57e:	4658      	mov	r0, fp
 801a580:	d107      	bne.n	801a592 <_dtoa_r+0xac2>
 801a582:	f000 f921 	bl	801a7c8 <__multadd>
 801a586:	4607      	mov	r7, r0
 801a588:	4605      	mov	r5, r0
 801a58a:	9b07      	ldr	r3, [sp, #28]
 801a58c:	3301      	adds	r3, #1
 801a58e:	9307      	str	r3, [sp, #28]
 801a590:	e774      	b.n	801a47c <_dtoa_r+0x9ac>
 801a592:	f000 f919 	bl	801a7c8 <__multadd>
 801a596:	4629      	mov	r1, r5
 801a598:	4607      	mov	r7, r0
 801a59a:	2300      	movs	r3, #0
 801a59c:	220a      	movs	r2, #10
 801a59e:	4658      	mov	r0, fp
 801a5a0:	f000 f912 	bl	801a7c8 <__multadd>
 801a5a4:	4605      	mov	r5, r0
 801a5a6:	e7f0      	b.n	801a58a <_dtoa_r+0xaba>
 801a5a8:	9b00      	ldr	r3, [sp, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	bfcc      	ite	gt
 801a5ae:	461e      	movgt	r6, r3
 801a5b0:	2601      	movle	r6, #1
 801a5b2:	4456      	add	r6, sl
 801a5b4:	2700      	movs	r7, #0
 801a5b6:	4649      	mov	r1, r9
 801a5b8:	2201      	movs	r2, #1
 801a5ba:	4658      	mov	r0, fp
 801a5bc:	f000 fab0 	bl	801ab20 <__lshift>
 801a5c0:	4621      	mov	r1, r4
 801a5c2:	4681      	mov	r9, r0
 801a5c4:	f000 fb18 	bl	801abf8 <__mcmp>
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	dcb0      	bgt.n	801a52e <_dtoa_r+0xa5e>
 801a5cc:	d102      	bne.n	801a5d4 <_dtoa_r+0xb04>
 801a5ce:	f018 0f01 	tst.w	r8, #1
 801a5d2:	d1ac      	bne.n	801a52e <_dtoa_r+0xa5e>
 801a5d4:	4633      	mov	r3, r6
 801a5d6:	461e      	mov	r6, r3
 801a5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a5dc:	2a30      	cmp	r2, #48	@ 0x30
 801a5de:	d0fa      	beq.n	801a5d6 <_dtoa_r+0xb06>
 801a5e0:	e5c2      	b.n	801a168 <_dtoa_r+0x698>
 801a5e2:	459a      	cmp	sl, r3
 801a5e4:	d1a4      	bne.n	801a530 <_dtoa_r+0xa60>
 801a5e6:	9b04      	ldr	r3, [sp, #16]
 801a5e8:	3301      	adds	r3, #1
 801a5ea:	9304      	str	r3, [sp, #16]
 801a5ec:	2331      	movs	r3, #49	@ 0x31
 801a5ee:	f88a 3000 	strb.w	r3, [sl]
 801a5f2:	e5b9      	b.n	801a168 <_dtoa_r+0x698>
 801a5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a5f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801a654 <_dtoa_r+0xb84>
 801a5fa:	b11b      	cbz	r3, 801a604 <_dtoa_r+0xb34>
 801a5fc:	f10a 0308 	add.w	r3, sl, #8
 801a600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a602:	6013      	str	r3, [r2, #0]
 801a604:	4650      	mov	r0, sl
 801a606:	b019      	add	sp, #100	@ 0x64
 801a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a60e:	2b01      	cmp	r3, #1
 801a610:	f77f ae37 	ble.w	801a282 <_dtoa_r+0x7b2>
 801a614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a616:	930a      	str	r3, [sp, #40]	@ 0x28
 801a618:	2001      	movs	r0, #1
 801a61a:	e655      	b.n	801a2c8 <_dtoa_r+0x7f8>
 801a61c:	9b00      	ldr	r3, [sp, #0]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	f77f aed6 	ble.w	801a3d0 <_dtoa_r+0x900>
 801a624:	4656      	mov	r6, sl
 801a626:	4621      	mov	r1, r4
 801a628:	4648      	mov	r0, r9
 801a62a:	f7ff f9c9 	bl	80199c0 <quorem>
 801a62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801a632:	f806 8b01 	strb.w	r8, [r6], #1
 801a636:	9b00      	ldr	r3, [sp, #0]
 801a638:	eba6 020a 	sub.w	r2, r6, sl
 801a63c:	4293      	cmp	r3, r2
 801a63e:	ddb3      	ble.n	801a5a8 <_dtoa_r+0xad8>
 801a640:	4649      	mov	r1, r9
 801a642:	2300      	movs	r3, #0
 801a644:	220a      	movs	r2, #10
 801a646:	4658      	mov	r0, fp
 801a648:	f000 f8be 	bl	801a7c8 <__multadd>
 801a64c:	4681      	mov	r9, r0
 801a64e:	e7ea      	b.n	801a626 <_dtoa_r+0xb56>
 801a650:	0801cedd 	.word	0x0801cedd
 801a654:	0801ce78 	.word	0x0801ce78

0801a658 <__env_lock>:
 801a658:	4801      	ldr	r0, [pc, #4]	@ (801a660 <__env_lock+0x8>)
 801a65a:	f7ff b992 	b.w	8019982 <__retarget_lock_acquire_recursive>
 801a65e:	bf00      	nop
 801a660:	20014850 	.word	0x20014850

0801a664 <__env_unlock>:
 801a664:	4801      	ldr	r0, [pc, #4]	@ (801a66c <__env_unlock+0x8>)
 801a666:	f7ff b98d 	b.w	8019984 <__retarget_lock_release_recursive>
 801a66a:	bf00      	nop
 801a66c:	20014850 	.word	0x20014850

0801a670 <_free_r>:
 801a670:	b538      	push	{r3, r4, r5, lr}
 801a672:	4605      	mov	r5, r0
 801a674:	2900      	cmp	r1, #0
 801a676:	d041      	beq.n	801a6fc <_free_r+0x8c>
 801a678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a67c:	1f0c      	subs	r4, r1, #4
 801a67e:	2b00      	cmp	r3, #0
 801a680:	bfb8      	it	lt
 801a682:	18e4      	addlt	r4, r4, r3
 801a684:	f7fd fffe 	bl	8018684 <__malloc_lock>
 801a688:	4a1d      	ldr	r2, [pc, #116]	@ (801a700 <_free_r+0x90>)
 801a68a:	6813      	ldr	r3, [r2, #0]
 801a68c:	b933      	cbnz	r3, 801a69c <_free_r+0x2c>
 801a68e:	6063      	str	r3, [r4, #4]
 801a690:	6014      	str	r4, [r2, #0]
 801a692:	4628      	mov	r0, r5
 801a694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a698:	f7fd bffa 	b.w	8018690 <__malloc_unlock>
 801a69c:	42a3      	cmp	r3, r4
 801a69e:	d908      	bls.n	801a6b2 <_free_r+0x42>
 801a6a0:	6820      	ldr	r0, [r4, #0]
 801a6a2:	1821      	adds	r1, r4, r0
 801a6a4:	428b      	cmp	r3, r1
 801a6a6:	bf01      	itttt	eq
 801a6a8:	6819      	ldreq	r1, [r3, #0]
 801a6aa:	685b      	ldreq	r3, [r3, #4]
 801a6ac:	1809      	addeq	r1, r1, r0
 801a6ae:	6021      	streq	r1, [r4, #0]
 801a6b0:	e7ed      	b.n	801a68e <_free_r+0x1e>
 801a6b2:	461a      	mov	r2, r3
 801a6b4:	685b      	ldr	r3, [r3, #4]
 801a6b6:	b10b      	cbz	r3, 801a6bc <_free_r+0x4c>
 801a6b8:	42a3      	cmp	r3, r4
 801a6ba:	d9fa      	bls.n	801a6b2 <_free_r+0x42>
 801a6bc:	6811      	ldr	r1, [r2, #0]
 801a6be:	1850      	adds	r0, r2, r1
 801a6c0:	42a0      	cmp	r0, r4
 801a6c2:	d10b      	bne.n	801a6dc <_free_r+0x6c>
 801a6c4:	6820      	ldr	r0, [r4, #0]
 801a6c6:	4401      	add	r1, r0
 801a6c8:	1850      	adds	r0, r2, r1
 801a6ca:	4283      	cmp	r3, r0
 801a6cc:	6011      	str	r1, [r2, #0]
 801a6ce:	d1e0      	bne.n	801a692 <_free_r+0x22>
 801a6d0:	6818      	ldr	r0, [r3, #0]
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	6053      	str	r3, [r2, #4]
 801a6d6:	4408      	add	r0, r1
 801a6d8:	6010      	str	r0, [r2, #0]
 801a6da:	e7da      	b.n	801a692 <_free_r+0x22>
 801a6dc:	d902      	bls.n	801a6e4 <_free_r+0x74>
 801a6de:	230c      	movs	r3, #12
 801a6e0:	602b      	str	r3, [r5, #0]
 801a6e2:	e7d6      	b.n	801a692 <_free_r+0x22>
 801a6e4:	6820      	ldr	r0, [r4, #0]
 801a6e6:	1821      	adds	r1, r4, r0
 801a6e8:	428b      	cmp	r3, r1
 801a6ea:	bf04      	itt	eq
 801a6ec:	6819      	ldreq	r1, [r3, #0]
 801a6ee:	685b      	ldreq	r3, [r3, #4]
 801a6f0:	6063      	str	r3, [r4, #4]
 801a6f2:	bf04      	itt	eq
 801a6f4:	1809      	addeq	r1, r1, r0
 801a6f6:	6021      	streq	r1, [r4, #0]
 801a6f8:	6054      	str	r4, [r2, #4]
 801a6fa:	e7ca      	b.n	801a692 <_free_r+0x22>
 801a6fc:	bd38      	pop	{r3, r4, r5, pc}
 801a6fe:	bf00      	nop
 801a700:	2001470c 	.word	0x2001470c

0801a704 <_Balloc>:
 801a704:	b570      	push	{r4, r5, r6, lr}
 801a706:	69c6      	ldr	r6, [r0, #28]
 801a708:	4604      	mov	r4, r0
 801a70a:	460d      	mov	r5, r1
 801a70c:	b976      	cbnz	r6, 801a72c <_Balloc+0x28>
 801a70e:	2010      	movs	r0, #16
 801a710:	f7fd ff06 	bl	8018520 <malloc>
 801a714:	4602      	mov	r2, r0
 801a716:	61e0      	str	r0, [r4, #28]
 801a718:	b920      	cbnz	r0, 801a724 <_Balloc+0x20>
 801a71a:	4b18      	ldr	r3, [pc, #96]	@ (801a77c <_Balloc+0x78>)
 801a71c:	4818      	ldr	r0, [pc, #96]	@ (801a780 <_Balloc+0x7c>)
 801a71e:	216b      	movs	r1, #107	@ 0x6b
 801a720:	f7fd fe6a 	bl	80183f8 <__assert_func>
 801a724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a728:	6006      	str	r6, [r0, #0]
 801a72a:	60c6      	str	r6, [r0, #12]
 801a72c:	69e6      	ldr	r6, [r4, #28]
 801a72e:	68f3      	ldr	r3, [r6, #12]
 801a730:	b183      	cbz	r3, 801a754 <_Balloc+0x50>
 801a732:	69e3      	ldr	r3, [r4, #28]
 801a734:	68db      	ldr	r3, [r3, #12]
 801a736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a73a:	b9b8      	cbnz	r0, 801a76c <_Balloc+0x68>
 801a73c:	2101      	movs	r1, #1
 801a73e:	fa01 f605 	lsl.w	r6, r1, r5
 801a742:	1d72      	adds	r2, r6, #5
 801a744:	0092      	lsls	r2, r2, #2
 801a746:	4620      	mov	r0, r4
 801a748:	f7fd fe7c 	bl	8018444 <_calloc_r>
 801a74c:	b160      	cbz	r0, 801a768 <_Balloc+0x64>
 801a74e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a752:	e00e      	b.n	801a772 <_Balloc+0x6e>
 801a754:	2221      	movs	r2, #33	@ 0x21
 801a756:	2104      	movs	r1, #4
 801a758:	4620      	mov	r0, r4
 801a75a:	f7fd fe73 	bl	8018444 <_calloc_r>
 801a75e:	69e3      	ldr	r3, [r4, #28]
 801a760:	60f0      	str	r0, [r6, #12]
 801a762:	68db      	ldr	r3, [r3, #12]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d1e4      	bne.n	801a732 <_Balloc+0x2e>
 801a768:	2000      	movs	r0, #0
 801a76a:	bd70      	pop	{r4, r5, r6, pc}
 801a76c:	6802      	ldr	r2, [r0, #0]
 801a76e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a772:	2300      	movs	r3, #0
 801a774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a778:	e7f7      	b.n	801a76a <_Balloc+0x66>
 801a77a:	bf00      	nop
 801a77c:	0801ccd4 	.word	0x0801ccd4
 801a780:	0801ceee 	.word	0x0801ceee

0801a784 <_Bfree>:
 801a784:	b570      	push	{r4, r5, r6, lr}
 801a786:	69c6      	ldr	r6, [r0, #28]
 801a788:	4605      	mov	r5, r0
 801a78a:	460c      	mov	r4, r1
 801a78c:	b976      	cbnz	r6, 801a7ac <_Bfree+0x28>
 801a78e:	2010      	movs	r0, #16
 801a790:	f7fd fec6 	bl	8018520 <malloc>
 801a794:	4602      	mov	r2, r0
 801a796:	61e8      	str	r0, [r5, #28]
 801a798:	b920      	cbnz	r0, 801a7a4 <_Bfree+0x20>
 801a79a:	4b09      	ldr	r3, [pc, #36]	@ (801a7c0 <_Bfree+0x3c>)
 801a79c:	4809      	ldr	r0, [pc, #36]	@ (801a7c4 <_Bfree+0x40>)
 801a79e:	218f      	movs	r1, #143	@ 0x8f
 801a7a0:	f7fd fe2a 	bl	80183f8 <__assert_func>
 801a7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a7a8:	6006      	str	r6, [r0, #0]
 801a7aa:	60c6      	str	r6, [r0, #12]
 801a7ac:	b13c      	cbz	r4, 801a7be <_Bfree+0x3a>
 801a7ae:	69eb      	ldr	r3, [r5, #28]
 801a7b0:	6862      	ldr	r2, [r4, #4]
 801a7b2:	68db      	ldr	r3, [r3, #12]
 801a7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a7b8:	6021      	str	r1, [r4, #0]
 801a7ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a7be:	bd70      	pop	{r4, r5, r6, pc}
 801a7c0:	0801ccd4 	.word	0x0801ccd4
 801a7c4:	0801ceee 	.word	0x0801ceee

0801a7c8 <__multadd>:
 801a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7cc:	690d      	ldr	r5, [r1, #16]
 801a7ce:	4607      	mov	r7, r0
 801a7d0:	460c      	mov	r4, r1
 801a7d2:	461e      	mov	r6, r3
 801a7d4:	f101 0c14 	add.w	ip, r1, #20
 801a7d8:	2000      	movs	r0, #0
 801a7da:	f8dc 3000 	ldr.w	r3, [ip]
 801a7de:	b299      	uxth	r1, r3
 801a7e0:	fb02 6101 	mla	r1, r2, r1, r6
 801a7e4:	0c1e      	lsrs	r6, r3, #16
 801a7e6:	0c0b      	lsrs	r3, r1, #16
 801a7e8:	fb02 3306 	mla	r3, r2, r6, r3
 801a7ec:	b289      	uxth	r1, r1
 801a7ee:	3001      	adds	r0, #1
 801a7f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a7f4:	4285      	cmp	r5, r0
 801a7f6:	f84c 1b04 	str.w	r1, [ip], #4
 801a7fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a7fe:	dcec      	bgt.n	801a7da <__multadd+0x12>
 801a800:	b30e      	cbz	r6, 801a846 <__multadd+0x7e>
 801a802:	68a3      	ldr	r3, [r4, #8]
 801a804:	42ab      	cmp	r3, r5
 801a806:	dc19      	bgt.n	801a83c <__multadd+0x74>
 801a808:	6861      	ldr	r1, [r4, #4]
 801a80a:	4638      	mov	r0, r7
 801a80c:	3101      	adds	r1, #1
 801a80e:	f7ff ff79 	bl	801a704 <_Balloc>
 801a812:	4680      	mov	r8, r0
 801a814:	b928      	cbnz	r0, 801a822 <__multadd+0x5a>
 801a816:	4602      	mov	r2, r0
 801a818:	4b0c      	ldr	r3, [pc, #48]	@ (801a84c <__multadd+0x84>)
 801a81a:	480d      	ldr	r0, [pc, #52]	@ (801a850 <__multadd+0x88>)
 801a81c:	21ba      	movs	r1, #186	@ 0xba
 801a81e:	f7fd fdeb 	bl	80183f8 <__assert_func>
 801a822:	6922      	ldr	r2, [r4, #16]
 801a824:	3202      	adds	r2, #2
 801a826:	f104 010c 	add.w	r1, r4, #12
 801a82a:	0092      	lsls	r2, r2, #2
 801a82c:	300c      	adds	r0, #12
 801a82e:	f7ff f8b2 	bl	8019996 <memcpy>
 801a832:	4621      	mov	r1, r4
 801a834:	4638      	mov	r0, r7
 801a836:	f7ff ffa5 	bl	801a784 <_Bfree>
 801a83a:	4644      	mov	r4, r8
 801a83c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a840:	3501      	adds	r5, #1
 801a842:	615e      	str	r6, [r3, #20]
 801a844:	6125      	str	r5, [r4, #16]
 801a846:	4620      	mov	r0, r4
 801a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a84c:	0801cedd 	.word	0x0801cedd
 801a850:	0801ceee 	.word	0x0801ceee

0801a854 <__hi0bits>:
 801a854:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a858:	4603      	mov	r3, r0
 801a85a:	bf36      	itet	cc
 801a85c:	0403      	lslcc	r3, r0, #16
 801a85e:	2000      	movcs	r0, #0
 801a860:	2010      	movcc	r0, #16
 801a862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a866:	bf3c      	itt	cc
 801a868:	021b      	lslcc	r3, r3, #8
 801a86a:	3008      	addcc	r0, #8
 801a86c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a870:	bf3c      	itt	cc
 801a872:	011b      	lslcc	r3, r3, #4
 801a874:	3004      	addcc	r0, #4
 801a876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a87a:	bf3c      	itt	cc
 801a87c:	009b      	lslcc	r3, r3, #2
 801a87e:	3002      	addcc	r0, #2
 801a880:	2b00      	cmp	r3, #0
 801a882:	db05      	blt.n	801a890 <__hi0bits+0x3c>
 801a884:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a888:	f100 0001 	add.w	r0, r0, #1
 801a88c:	bf08      	it	eq
 801a88e:	2020      	moveq	r0, #32
 801a890:	4770      	bx	lr

0801a892 <__lo0bits>:
 801a892:	6803      	ldr	r3, [r0, #0]
 801a894:	4602      	mov	r2, r0
 801a896:	f013 0007 	ands.w	r0, r3, #7
 801a89a:	d00b      	beq.n	801a8b4 <__lo0bits+0x22>
 801a89c:	07d9      	lsls	r1, r3, #31
 801a89e:	d421      	bmi.n	801a8e4 <__lo0bits+0x52>
 801a8a0:	0798      	lsls	r0, r3, #30
 801a8a2:	bf49      	itett	mi
 801a8a4:	085b      	lsrmi	r3, r3, #1
 801a8a6:	089b      	lsrpl	r3, r3, #2
 801a8a8:	2001      	movmi	r0, #1
 801a8aa:	6013      	strmi	r3, [r2, #0]
 801a8ac:	bf5c      	itt	pl
 801a8ae:	6013      	strpl	r3, [r2, #0]
 801a8b0:	2002      	movpl	r0, #2
 801a8b2:	4770      	bx	lr
 801a8b4:	b299      	uxth	r1, r3
 801a8b6:	b909      	cbnz	r1, 801a8bc <__lo0bits+0x2a>
 801a8b8:	0c1b      	lsrs	r3, r3, #16
 801a8ba:	2010      	movs	r0, #16
 801a8bc:	b2d9      	uxtb	r1, r3
 801a8be:	b909      	cbnz	r1, 801a8c4 <__lo0bits+0x32>
 801a8c0:	3008      	adds	r0, #8
 801a8c2:	0a1b      	lsrs	r3, r3, #8
 801a8c4:	0719      	lsls	r1, r3, #28
 801a8c6:	bf04      	itt	eq
 801a8c8:	091b      	lsreq	r3, r3, #4
 801a8ca:	3004      	addeq	r0, #4
 801a8cc:	0799      	lsls	r1, r3, #30
 801a8ce:	bf04      	itt	eq
 801a8d0:	089b      	lsreq	r3, r3, #2
 801a8d2:	3002      	addeq	r0, #2
 801a8d4:	07d9      	lsls	r1, r3, #31
 801a8d6:	d403      	bmi.n	801a8e0 <__lo0bits+0x4e>
 801a8d8:	085b      	lsrs	r3, r3, #1
 801a8da:	f100 0001 	add.w	r0, r0, #1
 801a8de:	d003      	beq.n	801a8e8 <__lo0bits+0x56>
 801a8e0:	6013      	str	r3, [r2, #0]
 801a8e2:	4770      	bx	lr
 801a8e4:	2000      	movs	r0, #0
 801a8e6:	4770      	bx	lr
 801a8e8:	2020      	movs	r0, #32
 801a8ea:	4770      	bx	lr

0801a8ec <__i2b>:
 801a8ec:	b510      	push	{r4, lr}
 801a8ee:	460c      	mov	r4, r1
 801a8f0:	2101      	movs	r1, #1
 801a8f2:	f7ff ff07 	bl	801a704 <_Balloc>
 801a8f6:	4602      	mov	r2, r0
 801a8f8:	b928      	cbnz	r0, 801a906 <__i2b+0x1a>
 801a8fa:	4b05      	ldr	r3, [pc, #20]	@ (801a910 <__i2b+0x24>)
 801a8fc:	4805      	ldr	r0, [pc, #20]	@ (801a914 <__i2b+0x28>)
 801a8fe:	f240 1145 	movw	r1, #325	@ 0x145
 801a902:	f7fd fd79 	bl	80183f8 <__assert_func>
 801a906:	2301      	movs	r3, #1
 801a908:	6144      	str	r4, [r0, #20]
 801a90a:	6103      	str	r3, [r0, #16]
 801a90c:	bd10      	pop	{r4, pc}
 801a90e:	bf00      	nop
 801a910:	0801cedd 	.word	0x0801cedd
 801a914:	0801ceee 	.word	0x0801ceee

0801a918 <__multiply>:
 801a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a91c:	4614      	mov	r4, r2
 801a91e:	690a      	ldr	r2, [r1, #16]
 801a920:	6923      	ldr	r3, [r4, #16]
 801a922:	429a      	cmp	r2, r3
 801a924:	bfa8      	it	ge
 801a926:	4623      	movge	r3, r4
 801a928:	460f      	mov	r7, r1
 801a92a:	bfa4      	itt	ge
 801a92c:	460c      	movge	r4, r1
 801a92e:	461f      	movge	r7, r3
 801a930:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a934:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a938:	68a3      	ldr	r3, [r4, #8]
 801a93a:	6861      	ldr	r1, [r4, #4]
 801a93c:	eb0a 0609 	add.w	r6, sl, r9
 801a940:	42b3      	cmp	r3, r6
 801a942:	b085      	sub	sp, #20
 801a944:	bfb8      	it	lt
 801a946:	3101      	addlt	r1, #1
 801a948:	f7ff fedc 	bl	801a704 <_Balloc>
 801a94c:	b930      	cbnz	r0, 801a95c <__multiply+0x44>
 801a94e:	4602      	mov	r2, r0
 801a950:	4b44      	ldr	r3, [pc, #272]	@ (801aa64 <__multiply+0x14c>)
 801a952:	4845      	ldr	r0, [pc, #276]	@ (801aa68 <__multiply+0x150>)
 801a954:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a958:	f7fd fd4e 	bl	80183f8 <__assert_func>
 801a95c:	f100 0514 	add.w	r5, r0, #20
 801a960:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a964:	462b      	mov	r3, r5
 801a966:	2200      	movs	r2, #0
 801a968:	4543      	cmp	r3, r8
 801a96a:	d321      	bcc.n	801a9b0 <__multiply+0x98>
 801a96c:	f107 0114 	add.w	r1, r7, #20
 801a970:	f104 0214 	add.w	r2, r4, #20
 801a974:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a978:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a97c:	9302      	str	r3, [sp, #8]
 801a97e:	1b13      	subs	r3, r2, r4
 801a980:	3b15      	subs	r3, #21
 801a982:	f023 0303 	bic.w	r3, r3, #3
 801a986:	3304      	adds	r3, #4
 801a988:	f104 0715 	add.w	r7, r4, #21
 801a98c:	42ba      	cmp	r2, r7
 801a98e:	bf38      	it	cc
 801a990:	2304      	movcc	r3, #4
 801a992:	9301      	str	r3, [sp, #4]
 801a994:	9b02      	ldr	r3, [sp, #8]
 801a996:	9103      	str	r1, [sp, #12]
 801a998:	428b      	cmp	r3, r1
 801a99a:	d80c      	bhi.n	801a9b6 <__multiply+0x9e>
 801a99c:	2e00      	cmp	r6, #0
 801a99e:	dd03      	ble.n	801a9a8 <__multiply+0x90>
 801a9a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d05b      	beq.n	801aa60 <__multiply+0x148>
 801a9a8:	6106      	str	r6, [r0, #16]
 801a9aa:	b005      	add	sp, #20
 801a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b0:	f843 2b04 	str.w	r2, [r3], #4
 801a9b4:	e7d8      	b.n	801a968 <__multiply+0x50>
 801a9b6:	f8b1 a000 	ldrh.w	sl, [r1]
 801a9ba:	f1ba 0f00 	cmp.w	sl, #0
 801a9be:	d024      	beq.n	801aa0a <__multiply+0xf2>
 801a9c0:	f104 0e14 	add.w	lr, r4, #20
 801a9c4:	46a9      	mov	r9, r5
 801a9c6:	f04f 0c00 	mov.w	ip, #0
 801a9ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a9ce:	f8d9 3000 	ldr.w	r3, [r9]
 801a9d2:	fa1f fb87 	uxth.w	fp, r7
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	fb0a 330b 	mla	r3, sl, fp, r3
 801a9dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a9e0:	f8d9 7000 	ldr.w	r7, [r9]
 801a9e4:	4463      	add	r3, ip
 801a9e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a9ea:	fb0a c70b 	mla	r7, sl, fp, ip
 801a9ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a9f2:	b29b      	uxth	r3, r3
 801a9f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a9f8:	4572      	cmp	r2, lr
 801a9fa:	f849 3b04 	str.w	r3, [r9], #4
 801a9fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801aa02:	d8e2      	bhi.n	801a9ca <__multiply+0xb2>
 801aa04:	9b01      	ldr	r3, [sp, #4]
 801aa06:	f845 c003 	str.w	ip, [r5, r3]
 801aa0a:	9b03      	ldr	r3, [sp, #12]
 801aa0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801aa10:	3104      	adds	r1, #4
 801aa12:	f1b9 0f00 	cmp.w	r9, #0
 801aa16:	d021      	beq.n	801aa5c <__multiply+0x144>
 801aa18:	682b      	ldr	r3, [r5, #0]
 801aa1a:	f104 0c14 	add.w	ip, r4, #20
 801aa1e:	46ae      	mov	lr, r5
 801aa20:	f04f 0a00 	mov.w	sl, #0
 801aa24:	f8bc b000 	ldrh.w	fp, [ip]
 801aa28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801aa2c:	fb09 770b 	mla	r7, r9, fp, r7
 801aa30:	4457      	add	r7, sl
 801aa32:	b29b      	uxth	r3, r3
 801aa34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801aa38:	f84e 3b04 	str.w	r3, [lr], #4
 801aa3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801aa40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801aa44:	f8be 3000 	ldrh.w	r3, [lr]
 801aa48:	fb09 330a 	mla	r3, r9, sl, r3
 801aa4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801aa50:	4562      	cmp	r2, ip
 801aa52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801aa56:	d8e5      	bhi.n	801aa24 <__multiply+0x10c>
 801aa58:	9f01      	ldr	r7, [sp, #4]
 801aa5a:	51eb      	str	r3, [r5, r7]
 801aa5c:	3504      	adds	r5, #4
 801aa5e:	e799      	b.n	801a994 <__multiply+0x7c>
 801aa60:	3e01      	subs	r6, #1
 801aa62:	e79b      	b.n	801a99c <__multiply+0x84>
 801aa64:	0801cedd 	.word	0x0801cedd
 801aa68:	0801ceee 	.word	0x0801ceee

0801aa6c <__pow5mult>:
 801aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa70:	4615      	mov	r5, r2
 801aa72:	f012 0203 	ands.w	r2, r2, #3
 801aa76:	4607      	mov	r7, r0
 801aa78:	460e      	mov	r6, r1
 801aa7a:	d007      	beq.n	801aa8c <__pow5mult+0x20>
 801aa7c:	4c25      	ldr	r4, [pc, #148]	@ (801ab14 <__pow5mult+0xa8>)
 801aa7e:	3a01      	subs	r2, #1
 801aa80:	2300      	movs	r3, #0
 801aa82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801aa86:	f7ff fe9f 	bl	801a7c8 <__multadd>
 801aa8a:	4606      	mov	r6, r0
 801aa8c:	10ad      	asrs	r5, r5, #2
 801aa8e:	d03d      	beq.n	801ab0c <__pow5mult+0xa0>
 801aa90:	69fc      	ldr	r4, [r7, #28]
 801aa92:	b97c      	cbnz	r4, 801aab4 <__pow5mult+0x48>
 801aa94:	2010      	movs	r0, #16
 801aa96:	f7fd fd43 	bl	8018520 <malloc>
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	61f8      	str	r0, [r7, #28]
 801aa9e:	b928      	cbnz	r0, 801aaac <__pow5mult+0x40>
 801aaa0:	4b1d      	ldr	r3, [pc, #116]	@ (801ab18 <__pow5mult+0xac>)
 801aaa2:	481e      	ldr	r0, [pc, #120]	@ (801ab1c <__pow5mult+0xb0>)
 801aaa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801aaa8:	f7fd fca6 	bl	80183f8 <__assert_func>
 801aaac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801aab0:	6004      	str	r4, [r0, #0]
 801aab2:	60c4      	str	r4, [r0, #12]
 801aab4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801aab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801aabc:	b94c      	cbnz	r4, 801aad2 <__pow5mult+0x66>
 801aabe:	f240 2171 	movw	r1, #625	@ 0x271
 801aac2:	4638      	mov	r0, r7
 801aac4:	f7ff ff12 	bl	801a8ec <__i2b>
 801aac8:	2300      	movs	r3, #0
 801aaca:	f8c8 0008 	str.w	r0, [r8, #8]
 801aace:	4604      	mov	r4, r0
 801aad0:	6003      	str	r3, [r0, #0]
 801aad2:	f04f 0900 	mov.w	r9, #0
 801aad6:	07eb      	lsls	r3, r5, #31
 801aad8:	d50a      	bpl.n	801aaf0 <__pow5mult+0x84>
 801aada:	4631      	mov	r1, r6
 801aadc:	4622      	mov	r2, r4
 801aade:	4638      	mov	r0, r7
 801aae0:	f7ff ff1a 	bl	801a918 <__multiply>
 801aae4:	4631      	mov	r1, r6
 801aae6:	4680      	mov	r8, r0
 801aae8:	4638      	mov	r0, r7
 801aaea:	f7ff fe4b 	bl	801a784 <_Bfree>
 801aaee:	4646      	mov	r6, r8
 801aaf0:	106d      	asrs	r5, r5, #1
 801aaf2:	d00b      	beq.n	801ab0c <__pow5mult+0xa0>
 801aaf4:	6820      	ldr	r0, [r4, #0]
 801aaf6:	b938      	cbnz	r0, 801ab08 <__pow5mult+0x9c>
 801aaf8:	4622      	mov	r2, r4
 801aafa:	4621      	mov	r1, r4
 801aafc:	4638      	mov	r0, r7
 801aafe:	f7ff ff0b 	bl	801a918 <__multiply>
 801ab02:	6020      	str	r0, [r4, #0]
 801ab04:	f8c0 9000 	str.w	r9, [r0]
 801ab08:	4604      	mov	r4, r0
 801ab0a:	e7e4      	b.n	801aad6 <__pow5mult+0x6a>
 801ab0c:	4630      	mov	r0, r6
 801ab0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab12:	bf00      	nop
 801ab14:	0801cf48 	.word	0x0801cf48
 801ab18:	0801ccd4 	.word	0x0801ccd4
 801ab1c:	0801ceee 	.word	0x0801ceee

0801ab20 <__lshift>:
 801ab20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab24:	460c      	mov	r4, r1
 801ab26:	6849      	ldr	r1, [r1, #4]
 801ab28:	6923      	ldr	r3, [r4, #16]
 801ab2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ab2e:	68a3      	ldr	r3, [r4, #8]
 801ab30:	4607      	mov	r7, r0
 801ab32:	4691      	mov	r9, r2
 801ab34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ab38:	f108 0601 	add.w	r6, r8, #1
 801ab3c:	42b3      	cmp	r3, r6
 801ab3e:	db0b      	blt.n	801ab58 <__lshift+0x38>
 801ab40:	4638      	mov	r0, r7
 801ab42:	f7ff fddf 	bl	801a704 <_Balloc>
 801ab46:	4605      	mov	r5, r0
 801ab48:	b948      	cbnz	r0, 801ab5e <__lshift+0x3e>
 801ab4a:	4602      	mov	r2, r0
 801ab4c:	4b28      	ldr	r3, [pc, #160]	@ (801abf0 <__lshift+0xd0>)
 801ab4e:	4829      	ldr	r0, [pc, #164]	@ (801abf4 <__lshift+0xd4>)
 801ab50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ab54:	f7fd fc50 	bl	80183f8 <__assert_func>
 801ab58:	3101      	adds	r1, #1
 801ab5a:	005b      	lsls	r3, r3, #1
 801ab5c:	e7ee      	b.n	801ab3c <__lshift+0x1c>
 801ab5e:	2300      	movs	r3, #0
 801ab60:	f100 0114 	add.w	r1, r0, #20
 801ab64:	f100 0210 	add.w	r2, r0, #16
 801ab68:	4618      	mov	r0, r3
 801ab6a:	4553      	cmp	r3, sl
 801ab6c:	db33      	blt.n	801abd6 <__lshift+0xb6>
 801ab6e:	6920      	ldr	r0, [r4, #16]
 801ab70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ab74:	f104 0314 	add.w	r3, r4, #20
 801ab78:	f019 091f 	ands.w	r9, r9, #31
 801ab7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ab80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ab84:	d02b      	beq.n	801abde <__lshift+0xbe>
 801ab86:	f1c9 0e20 	rsb	lr, r9, #32
 801ab8a:	468a      	mov	sl, r1
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	6818      	ldr	r0, [r3, #0]
 801ab90:	fa00 f009 	lsl.w	r0, r0, r9
 801ab94:	4310      	orrs	r0, r2
 801ab96:	f84a 0b04 	str.w	r0, [sl], #4
 801ab9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab9e:	459c      	cmp	ip, r3
 801aba0:	fa22 f20e 	lsr.w	r2, r2, lr
 801aba4:	d8f3      	bhi.n	801ab8e <__lshift+0x6e>
 801aba6:	ebac 0304 	sub.w	r3, ip, r4
 801abaa:	3b15      	subs	r3, #21
 801abac:	f023 0303 	bic.w	r3, r3, #3
 801abb0:	3304      	adds	r3, #4
 801abb2:	f104 0015 	add.w	r0, r4, #21
 801abb6:	4584      	cmp	ip, r0
 801abb8:	bf38      	it	cc
 801abba:	2304      	movcc	r3, #4
 801abbc:	50ca      	str	r2, [r1, r3]
 801abbe:	b10a      	cbz	r2, 801abc4 <__lshift+0xa4>
 801abc0:	f108 0602 	add.w	r6, r8, #2
 801abc4:	3e01      	subs	r6, #1
 801abc6:	4638      	mov	r0, r7
 801abc8:	612e      	str	r6, [r5, #16]
 801abca:	4621      	mov	r1, r4
 801abcc:	f7ff fdda 	bl	801a784 <_Bfree>
 801abd0:	4628      	mov	r0, r5
 801abd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abd6:	f842 0f04 	str.w	r0, [r2, #4]!
 801abda:	3301      	adds	r3, #1
 801abdc:	e7c5      	b.n	801ab6a <__lshift+0x4a>
 801abde:	3904      	subs	r1, #4
 801abe0:	f853 2b04 	ldr.w	r2, [r3], #4
 801abe4:	f841 2f04 	str.w	r2, [r1, #4]!
 801abe8:	459c      	cmp	ip, r3
 801abea:	d8f9      	bhi.n	801abe0 <__lshift+0xc0>
 801abec:	e7ea      	b.n	801abc4 <__lshift+0xa4>
 801abee:	bf00      	nop
 801abf0:	0801cedd 	.word	0x0801cedd
 801abf4:	0801ceee 	.word	0x0801ceee

0801abf8 <__mcmp>:
 801abf8:	690a      	ldr	r2, [r1, #16]
 801abfa:	4603      	mov	r3, r0
 801abfc:	6900      	ldr	r0, [r0, #16]
 801abfe:	1a80      	subs	r0, r0, r2
 801ac00:	b530      	push	{r4, r5, lr}
 801ac02:	d10e      	bne.n	801ac22 <__mcmp+0x2a>
 801ac04:	3314      	adds	r3, #20
 801ac06:	3114      	adds	r1, #20
 801ac08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ac0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ac10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ac14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ac18:	4295      	cmp	r5, r2
 801ac1a:	d003      	beq.n	801ac24 <__mcmp+0x2c>
 801ac1c:	d205      	bcs.n	801ac2a <__mcmp+0x32>
 801ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ac22:	bd30      	pop	{r4, r5, pc}
 801ac24:	42a3      	cmp	r3, r4
 801ac26:	d3f3      	bcc.n	801ac10 <__mcmp+0x18>
 801ac28:	e7fb      	b.n	801ac22 <__mcmp+0x2a>
 801ac2a:	2001      	movs	r0, #1
 801ac2c:	e7f9      	b.n	801ac22 <__mcmp+0x2a>
	...

0801ac30 <__mdiff>:
 801ac30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac34:	4689      	mov	r9, r1
 801ac36:	4606      	mov	r6, r0
 801ac38:	4611      	mov	r1, r2
 801ac3a:	4648      	mov	r0, r9
 801ac3c:	4614      	mov	r4, r2
 801ac3e:	f7ff ffdb 	bl	801abf8 <__mcmp>
 801ac42:	1e05      	subs	r5, r0, #0
 801ac44:	d112      	bne.n	801ac6c <__mdiff+0x3c>
 801ac46:	4629      	mov	r1, r5
 801ac48:	4630      	mov	r0, r6
 801ac4a:	f7ff fd5b 	bl	801a704 <_Balloc>
 801ac4e:	4602      	mov	r2, r0
 801ac50:	b928      	cbnz	r0, 801ac5e <__mdiff+0x2e>
 801ac52:	4b3f      	ldr	r3, [pc, #252]	@ (801ad50 <__mdiff+0x120>)
 801ac54:	f240 2137 	movw	r1, #567	@ 0x237
 801ac58:	483e      	ldr	r0, [pc, #248]	@ (801ad54 <__mdiff+0x124>)
 801ac5a:	f7fd fbcd 	bl	80183f8 <__assert_func>
 801ac5e:	2301      	movs	r3, #1
 801ac60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ac64:	4610      	mov	r0, r2
 801ac66:	b003      	add	sp, #12
 801ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac6c:	bfbc      	itt	lt
 801ac6e:	464b      	movlt	r3, r9
 801ac70:	46a1      	movlt	r9, r4
 801ac72:	4630      	mov	r0, r6
 801ac74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ac78:	bfba      	itte	lt
 801ac7a:	461c      	movlt	r4, r3
 801ac7c:	2501      	movlt	r5, #1
 801ac7e:	2500      	movge	r5, #0
 801ac80:	f7ff fd40 	bl	801a704 <_Balloc>
 801ac84:	4602      	mov	r2, r0
 801ac86:	b918      	cbnz	r0, 801ac90 <__mdiff+0x60>
 801ac88:	4b31      	ldr	r3, [pc, #196]	@ (801ad50 <__mdiff+0x120>)
 801ac8a:	f240 2145 	movw	r1, #581	@ 0x245
 801ac8e:	e7e3      	b.n	801ac58 <__mdiff+0x28>
 801ac90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ac94:	6926      	ldr	r6, [r4, #16]
 801ac96:	60c5      	str	r5, [r0, #12]
 801ac98:	f109 0310 	add.w	r3, r9, #16
 801ac9c:	f109 0514 	add.w	r5, r9, #20
 801aca0:	f104 0e14 	add.w	lr, r4, #20
 801aca4:	f100 0b14 	add.w	fp, r0, #20
 801aca8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801acac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801acb0:	9301      	str	r3, [sp, #4]
 801acb2:	46d9      	mov	r9, fp
 801acb4:	f04f 0c00 	mov.w	ip, #0
 801acb8:	9b01      	ldr	r3, [sp, #4]
 801acba:	f85e 0b04 	ldr.w	r0, [lr], #4
 801acbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 801acc2:	9301      	str	r3, [sp, #4]
 801acc4:	fa1f f38a 	uxth.w	r3, sl
 801acc8:	4619      	mov	r1, r3
 801acca:	b283      	uxth	r3, r0
 801accc:	1acb      	subs	r3, r1, r3
 801acce:	0c00      	lsrs	r0, r0, #16
 801acd0:	4463      	add	r3, ip
 801acd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801acd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801acda:	b29b      	uxth	r3, r3
 801acdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ace0:	4576      	cmp	r6, lr
 801ace2:	f849 3b04 	str.w	r3, [r9], #4
 801ace6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801acea:	d8e5      	bhi.n	801acb8 <__mdiff+0x88>
 801acec:	1b33      	subs	r3, r6, r4
 801acee:	3b15      	subs	r3, #21
 801acf0:	f023 0303 	bic.w	r3, r3, #3
 801acf4:	3415      	adds	r4, #21
 801acf6:	3304      	adds	r3, #4
 801acf8:	42a6      	cmp	r6, r4
 801acfa:	bf38      	it	cc
 801acfc:	2304      	movcc	r3, #4
 801acfe:	441d      	add	r5, r3
 801ad00:	445b      	add	r3, fp
 801ad02:	461e      	mov	r6, r3
 801ad04:	462c      	mov	r4, r5
 801ad06:	4544      	cmp	r4, r8
 801ad08:	d30e      	bcc.n	801ad28 <__mdiff+0xf8>
 801ad0a:	f108 0103 	add.w	r1, r8, #3
 801ad0e:	1b49      	subs	r1, r1, r5
 801ad10:	f021 0103 	bic.w	r1, r1, #3
 801ad14:	3d03      	subs	r5, #3
 801ad16:	45a8      	cmp	r8, r5
 801ad18:	bf38      	it	cc
 801ad1a:	2100      	movcc	r1, #0
 801ad1c:	440b      	add	r3, r1
 801ad1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ad22:	b191      	cbz	r1, 801ad4a <__mdiff+0x11a>
 801ad24:	6117      	str	r7, [r2, #16]
 801ad26:	e79d      	b.n	801ac64 <__mdiff+0x34>
 801ad28:	f854 1b04 	ldr.w	r1, [r4], #4
 801ad2c:	46e6      	mov	lr, ip
 801ad2e:	0c08      	lsrs	r0, r1, #16
 801ad30:	fa1c fc81 	uxtah	ip, ip, r1
 801ad34:	4471      	add	r1, lr
 801ad36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ad3a:	b289      	uxth	r1, r1
 801ad3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ad40:	f846 1b04 	str.w	r1, [r6], #4
 801ad44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ad48:	e7dd      	b.n	801ad06 <__mdiff+0xd6>
 801ad4a:	3f01      	subs	r7, #1
 801ad4c:	e7e7      	b.n	801ad1e <__mdiff+0xee>
 801ad4e:	bf00      	nop
 801ad50:	0801cedd 	.word	0x0801cedd
 801ad54:	0801ceee 	.word	0x0801ceee

0801ad58 <__d2b>:
 801ad58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ad5c:	460f      	mov	r7, r1
 801ad5e:	2101      	movs	r1, #1
 801ad60:	ec59 8b10 	vmov	r8, r9, d0
 801ad64:	4616      	mov	r6, r2
 801ad66:	f7ff fccd 	bl	801a704 <_Balloc>
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	b930      	cbnz	r0, 801ad7c <__d2b+0x24>
 801ad6e:	4602      	mov	r2, r0
 801ad70:	4b23      	ldr	r3, [pc, #140]	@ (801ae00 <__d2b+0xa8>)
 801ad72:	4824      	ldr	r0, [pc, #144]	@ (801ae04 <__d2b+0xac>)
 801ad74:	f240 310f 	movw	r1, #783	@ 0x30f
 801ad78:	f7fd fb3e 	bl	80183f8 <__assert_func>
 801ad7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ad80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ad84:	b10d      	cbz	r5, 801ad8a <__d2b+0x32>
 801ad86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ad8a:	9301      	str	r3, [sp, #4]
 801ad8c:	f1b8 0300 	subs.w	r3, r8, #0
 801ad90:	d023      	beq.n	801adda <__d2b+0x82>
 801ad92:	4668      	mov	r0, sp
 801ad94:	9300      	str	r3, [sp, #0]
 801ad96:	f7ff fd7c 	bl	801a892 <__lo0bits>
 801ad9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ad9e:	b1d0      	cbz	r0, 801add6 <__d2b+0x7e>
 801ada0:	f1c0 0320 	rsb	r3, r0, #32
 801ada4:	fa02 f303 	lsl.w	r3, r2, r3
 801ada8:	430b      	orrs	r3, r1
 801adaa:	40c2      	lsrs	r2, r0
 801adac:	6163      	str	r3, [r4, #20]
 801adae:	9201      	str	r2, [sp, #4]
 801adb0:	9b01      	ldr	r3, [sp, #4]
 801adb2:	61a3      	str	r3, [r4, #24]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	bf0c      	ite	eq
 801adb8:	2201      	moveq	r2, #1
 801adba:	2202      	movne	r2, #2
 801adbc:	6122      	str	r2, [r4, #16]
 801adbe:	b1a5      	cbz	r5, 801adea <__d2b+0x92>
 801adc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801adc4:	4405      	add	r5, r0
 801adc6:	603d      	str	r5, [r7, #0]
 801adc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801adcc:	6030      	str	r0, [r6, #0]
 801adce:	4620      	mov	r0, r4
 801add0:	b003      	add	sp, #12
 801add2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801add6:	6161      	str	r1, [r4, #20]
 801add8:	e7ea      	b.n	801adb0 <__d2b+0x58>
 801adda:	a801      	add	r0, sp, #4
 801addc:	f7ff fd59 	bl	801a892 <__lo0bits>
 801ade0:	9b01      	ldr	r3, [sp, #4]
 801ade2:	6163      	str	r3, [r4, #20]
 801ade4:	3020      	adds	r0, #32
 801ade6:	2201      	movs	r2, #1
 801ade8:	e7e8      	b.n	801adbc <__d2b+0x64>
 801adea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801adee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801adf2:	6038      	str	r0, [r7, #0]
 801adf4:	6918      	ldr	r0, [r3, #16]
 801adf6:	f7ff fd2d 	bl	801a854 <__hi0bits>
 801adfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801adfe:	e7e5      	b.n	801adcc <__d2b+0x74>
 801ae00:	0801cedd 	.word	0x0801cedd
 801ae04:	0801ceee 	.word	0x0801ceee

0801ae08 <_malloc_usable_size_r>:
 801ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae0c:	1f18      	subs	r0, r3, #4
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	bfbc      	itt	lt
 801ae12:	580b      	ldrlt	r3, [r1, r0]
 801ae14:	18c0      	addlt	r0, r0, r3
 801ae16:	4770      	bx	lr

0801ae18 <__ssputs_r>:
 801ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae1c:	688e      	ldr	r6, [r1, #8]
 801ae1e:	461f      	mov	r7, r3
 801ae20:	42be      	cmp	r6, r7
 801ae22:	680b      	ldr	r3, [r1, #0]
 801ae24:	4682      	mov	sl, r0
 801ae26:	460c      	mov	r4, r1
 801ae28:	4690      	mov	r8, r2
 801ae2a:	d82d      	bhi.n	801ae88 <__ssputs_r+0x70>
 801ae2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ae30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ae34:	d026      	beq.n	801ae84 <__ssputs_r+0x6c>
 801ae36:	6965      	ldr	r5, [r4, #20]
 801ae38:	6909      	ldr	r1, [r1, #16]
 801ae3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae3e:	eba3 0901 	sub.w	r9, r3, r1
 801ae42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ae46:	1c7b      	adds	r3, r7, #1
 801ae48:	444b      	add	r3, r9
 801ae4a:	106d      	asrs	r5, r5, #1
 801ae4c:	429d      	cmp	r5, r3
 801ae4e:	bf38      	it	cc
 801ae50:	461d      	movcc	r5, r3
 801ae52:	0553      	lsls	r3, r2, #21
 801ae54:	d527      	bpl.n	801aea6 <__ssputs_r+0x8e>
 801ae56:	4629      	mov	r1, r5
 801ae58:	f7fd fb94 	bl	8018584 <_malloc_r>
 801ae5c:	4606      	mov	r6, r0
 801ae5e:	b360      	cbz	r0, 801aeba <__ssputs_r+0xa2>
 801ae60:	6921      	ldr	r1, [r4, #16]
 801ae62:	464a      	mov	r2, r9
 801ae64:	f7fe fd97 	bl	8019996 <memcpy>
 801ae68:	89a3      	ldrh	r3, [r4, #12]
 801ae6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ae6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae72:	81a3      	strh	r3, [r4, #12]
 801ae74:	6126      	str	r6, [r4, #16]
 801ae76:	6165      	str	r5, [r4, #20]
 801ae78:	444e      	add	r6, r9
 801ae7a:	eba5 0509 	sub.w	r5, r5, r9
 801ae7e:	6026      	str	r6, [r4, #0]
 801ae80:	60a5      	str	r5, [r4, #8]
 801ae82:	463e      	mov	r6, r7
 801ae84:	42be      	cmp	r6, r7
 801ae86:	d900      	bls.n	801ae8a <__ssputs_r+0x72>
 801ae88:	463e      	mov	r6, r7
 801ae8a:	6820      	ldr	r0, [r4, #0]
 801ae8c:	4632      	mov	r2, r6
 801ae8e:	4641      	mov	r1, r8
 801ae90:	f7fe fc88 	bl	80197a4 <memmove>
 801ae94:	68a3      	ldr	r3, [r4, #8]
 801ae96:	1b9b      	subs	r3, r3, r6
 801ae98:	60a3      	str	r3, [r4, #8]
 801ae9a:	6823      	ldr	r3, [r4, #0]
 801ae9c:	4433      	add	r3, r6
 801ae9e:	6023      	str	r3, [r4, #0]
 801aea0:	2000      	movs	r0, #0
 801aea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aea6:	462a      	mov	r2, r5
 801aea8:	f7fd fc6c 	bl	8018784 <_realloc_r>
 801aeac:	4606      	mov	r6, r0
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	d1e0      	bne.n	801ae74 <__ssputs_r+0x5c>
 801aeb2:	6921      	ldr	r1, [r4, #16]
 801aeb4:	4650      	mov	r0, sl
 801aeb6:	f7ff fbdb 	bl	801a670 <_free_r>
 801aeba:	230c      	movs	r3, #12
 801aebc:	f8ca 3000 	str.w	r3, [sl]
 801aec0:	89a3      	ldrh	r3, [r4, #12]
 801aec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aec6:	81a3      	strh	r3, [r4, #12]
 801aec8:	f04f 30ff 	mov.w	r0, #4294967295
 801aecc:	e7e9      	b.n	801aea2 <__ssputs_r+0x8a>
	...

0801aed0 <_svfiprintf_r>:
 801aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	4698      	mov	r8, r3
 801aed6:	898b      	ldrh	r3, [r1, #12]
 801aed8:	061b      	lsls	r3, r3, #24
 801aeda:	b09d      	sub	sp, #116	@ 0x74
 801aedc:	4607      	mov	r7, r0
 801aede:	460d      	mov	r5, r1
 801aee0:	4614      	mov	r4, r2
 801aee2:	d510      	bpl.n	801af06 <_svfiprintf_r+0x36>
 801aee4:	690b      	ldr	r3, [r1, #16]
 801aee6:	b973      	cbnz	r3, 801af06 <_svfiprintf_r+0x36>
 801aee8:	2140      	movs	r1, #64	@ 0x40
 801aeea:	f7fd fb4b 	bl	8018584 <_malloc_r>
 801aeee:	6028      	str	r0, [r5, #0]
 801aef0:	6128      	str	r0, [r5, #16]
 801aef2:	b930      	cbnz	r0, 801af02 <_svfiprintf_r+0x32>
 801aef4:	230c      	movs	r3, #12
 801aef6:	603b      	str	r3, [r7, #0]
 801aef8:	f04f 30ff 	mov.w	r0, #4294967295
 801aefc:	b01d      	add	sp, #116	@ 0x74
 801aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af02:	2340      	movs	r3, #64	@ 0x40
 801af04:	616b      	str	r3, [r5, #20]
 801af06:	2300      	movs	r3, #0
 801af08:	9309      	str	r3, [sp, #36]	@ 0x24
 801af0a:	2320      	movs	r3, #32
 801af0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801af10:	f8cd 800c 	str.w	r8, [sp, #12]
 801af14:	2330      	movs	r3, #48	@ 0x30
 801af16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b0b4 <_svfiprintf_r+0x1e4>
 801af1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801af1e:	f04f 0901 	mov.w	r9, #1
 801af22:	4623      	mov	r3, r4
 801af24:	469a      	mov	sl, r3
 801af26:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af2a:	b10a      	cbz	r2, 801af30 <_svfiprintf_r+0x60>
 801af2c:	2a25      	cmp	r2, #37	@ 0x25
 801af2e:	d1f9      	bne.n	801af24 <_svfiprintf_r+0x54>
 801af30:	ebba 0b04 	subs.w	fp, sl, r4
 801af34:	d00b      	beq.n	801af4e <_svfiprintf_r+0x7e>
 801af36:	465b      	mov	r3, fp
 801af38:	4622      	mov	r2, r4
 801af3a:	4629      	mov	r1, r5
 801af3c:	4638      	mov	r0, r7
 801af3e:	f7ff ff6b 	bl	801ae18 <__ssputs_r>
 801af42:	3001      	adds	r0, #1
 801af44:	f000 80a7 	beq.w	801b096 <_svfiprintf_r+0x1c6>
 801af48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af4a:	445a      	add	r2, fp
 801af4c:	9209      	str	r2, [sp, #36]	@ 0x24
 801af4e:	f89a 3000 	ldrb.w	r3, [sl]
 801af52:	2b00      	cmp	r3, #0
 801af54:	f000 809f 	beq.w	801b096 <_svfiprintf_r+0x1c6>
 801af58:	2300      	movs	r3, #0
 801af5a:	f04f 32ff 	mov.w	r2, #4294967295
 801af5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af62:	f10a 0a01 	add.w	sl, sl, #1
 801af66:	9304      	str	r3, [sp, #16]
 801af68:	9307      	str	r3, [sp, #28]
 801af6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801af6e:	931a      	str	r3, [sp, #104]	@ 0x68
 801af70:	4654      	mov	r4, sl
 801af72:	2205      	movs	r2, #5
 801af74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af78:	484e      	ldr	r0, [pc, #312]	@ (801b0b4 <_svfiprintf_r+0x1e4>)
 801af7a:	f7e5 f939 	bl	80001f0 <memchr>
 801af7e:	9a04      	ldr	r2, [sp, #16]
 801af80:	b9d8      	cbnz	r0, 801afba <_svfiprintf_r+0xea>
 801af82:	06d0      	lsls	r0, r2, #27
 801af84:	bf44      	itt	mi
 801af86:	2320      	movmi	r3, #32
 801af88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af8c:	0711      	lsls	r1, r2, #28
 801af8e:	bf44      	itt	mi
 801af90:	232b      	movmi	r3, #43	@ 0x2b
 801af92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af96:	f89a 3000 	ldrb.w	r3, [sl]
 801af9a:	2b2a      	cmp	r3, #42	@ 0x2a
 801af9c:	d015      	beq.n	801afca <_svfiprintf_r+0xfa>
 801af9e:	9a07      	ldr	r2, [sp, #28]
 801afa0:	4654      	mov	r4, sl
 801afa2:	2000      	movs	r0, #0
 801afa4:	f04f 0c0a 	mov.w	ip, #10
 801afa8:	4621      	mov	r1, r4
 801afaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afae:	3b30      	subs	r3, #48	@ 0x30
 801afb0:	2b09      	cmp	r3, #9
 801afb2:	d94b      	bls.n	801b04c <_svfiprintf_r+0x17c>
 801afb4:	b1b0      	cbz	r0, 801afe4 <_svfiprintf_r+0x114>
 801afb6:	9207      	str	r2, [sp, #28]
 801afb8:	e014      	b.n	801afe4 <_svfiprintf_r+0x114>
 801afba:	eba0 0308 	sub.w	r3, r0, r8
 801afbe:	fa09 f303 	lsl.w	r3, r9, r3
 801afc2:	4313      	orrs	r3, r2
 801afc4:	9304      	str	r3, [sp, #16]
 801afc6:	46a2      	mov	sl, r4
 801afc8:	e7d2      	b.n	801af70 <_svfiprintf_r+0xa0>
 801afca:	9b03      	ldr	r3, [sp, #12]
 801afcc:	1d19      	adds	r1, r3, #4
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	9103      	str	r1, [sp, #12]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	bfbb      	ittet	lt
 801afd6:	425b      	neglt	r3, r3
 801afd8:	f042 0202 	orrlt.w	r2, r2, #2
 801afdc:	9307      	strge	r3, [sp, #28]
 801afde:	9307      	strlt	r3, [sp, #28]
 801afe0:	bfb8      	it	lt
 801afe2:	9204      	strlt	r2, [sp, #16]
 801afe4:	7823      	ldrb	r3, [r4, #0]
 801afe6:	2b2e      	cmp	r3, #46	@ 0x2e
 801afe8:	d10a      	bne.n	801b000 <_svfiprintf_r+0x130>
 801afea:	7863      	ldrb	r3, [r4, #1]
 801afec:	2b2a      	cmp	r3, #42	@ 0x2a
 801afee:	d132      	bne.n	801b056 <_svfiprintf_r+0x186>
 801aff0:	9b03      	ldr	r3, [sp, #12]
 801aff2:	1d1a      	adds	r2, r3, #4
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	9203      	str	r2, [sp, #12]
 801aff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801affc:	3402      	adds	r4, #2
 801affe:	9305      	str	r3, [sp, #20]
 801b000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b0c4 <_svfiprintf_r+0x1f4>
 801b004:	7821      	ldrb	r1, [r4, #0]
 801b006:	2203      	movs	r2, #3
 801b008:	4650      	mov	r0, sl
 801b00a:	f7e5 f8f1 	bl	80001f0 <memchr>
 801b00e:	b138      	cbz	r0, 801b020 <_svfiprintf_r+0x150>
 801b010:	9b04      	ldr	r3, [sp, #16]
 801b012:	eba0 000a 	sub.w	r0, r0, sl
 801b016:	2240      	movs	r2, #64	@ 0x40
 801b018:	4082      	lsls	r2, r0
 801b01a:	4313      	orrs	r3, r2
 801b01c:	3401      	adds	r4, #1
 801b01e:	9304      	str	r3, [sp, #16]
 801b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b024:	4824      	ldr	r0, [pc, #144]	@ (801b0b8 <_svfiprintf_r+0x1e8>)
 801b026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b02a:	2206      	movs	r2, #6
 801b02c:	f7e5 f8e0 	bl	80001f0 <memchr>
 801b030:	2800      	cmp	r0, #0
 801b032:	d036      	beq.n	801b0a2 <_svfiprintf_r+0x1d2>
 801b034:	4b21      	ldr	r3, [pc, #132]	@ (801b0bc <_svfiprintf_r+0x1ec>)
 801b036:	bb1b      	cbnz	r3, 801b080 <_svfiprintf_r+0x1b0>
 801b038:	9b03      	ldr	r3, [sp, #12]
 801b03a:	3307      	adds	r3, #7
 801b03c:	f023 0307 	bic.w	r3, r3, #7
 801b040:	3308      	adds	r3, #8
 801b042:	9303      	str	r3, [sp, #12]
 801b044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b046:	4433      	add	r3, r6
 801b048:	9309      	str	r3, [sp, #36]	@ 0x24
 801b04a:	e76a      	b.n	801af22 <_svfiprintf_r+0x52>
 801b04c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b050:	460c      	mov	r4, r1
 801b052:	2001      	movs	r0, #1
 801b054:	e7a8      	b.n	801afa8 <_svfiprintf_r+0xd8>
 801b056:	2300      	movs	r3, #0
 801b058:	3401      	adds	r4, #1
 801b05a:	9305      	str	r3, [sp, #20]
 801b05c:	4619      	mov	r1, r3
 801b05e:	f04f 0c0a 	mov.w	ip, #10
 801b062:	4620      	mov	r0, r4
 801b064:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b068:	3a30      	subs	r2, #48	@ 0x30
 801b06a:	2a09      	cmp	r2, #9
 801b06c:	d903      	bls.n	801b076 <_svfiprintf_r+0x1a6>
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d0c6      	beq.n	801b000 <_svfiprintf_r+0x130>
 801b072:	9105      	str	r1, [sp, #20]
 801b074:	e7c4      	b.n	801b000 <_svfiprintf_r+0x130>
 801b076:	fb0c 2101 	mla	r1, ip, r1, r2
 801b07a:	4604      	mov	r4, r0
 801b07c:	2301      	movs	r3, #1
 801b07e:	e7f0      	b.n	801b062 <_svfiprintf_r+0x192>
 801b080:	ab03      	add	r3, sp, #12
 801b082:	9300      	str	r3, [sp, #0]
 801b084:	462a      	mov	r2, r5
 801b086:	4b0e      	ldr	r3, [pc, #56]	@ (801b0c0 <_svfiprintf_r+0x1f0>)
 801b088:	a904      	add	r1, sp, #16
 801b08a:	4638      	mov	r0, r7
 801b08c:	f7fd fcc0 	bl	8018a10 <_printf_float>
 801b090:	1c42      	adds	r2, r0, #1
 801b092:	4606      	mov	r6, r0
 801b094:	d1d6      	bne.n	801b044 <_svfiprintf_r+0x174>
 801b096:	89ab      	ldrh	r3, [r5, #12]
 801b098:	065b      	lsls	r3, r3, #25
 801b09a:	f53f af2d 	bmi.w	801aef8 <_svfiprintf_r+0x28>
 801b09e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b0a0:	e72c      	b.n	801aefc <_svfiprintf_r+0x2c>
 801b0a2:	ab03      	add	r3, sp, #12
 801b0a4:	9300      	str	r3, [sp, #0]
 801b0a6:	462a      	mov	r2, r5
 801b0a8:	4b05      	ldr	r3, [pc, #20]	@ (801b0c0 <_svfiprintf_r+0x1f0>)
 801b0aa:	a904      	add	r1, sp, #16
 801b0ac:	4638      	mov	r0, r7
 801b0ae:	f7fd ff47 	bl	8018f40 <_printf_i>
 801b0b2:	e7ed      	b.n	801b090 <_svfiprintf_r+0x1c0>
 801b0b4:	0801d048 	.word	0x0801d048
 801b0b8:	0801d052 	.word	0x0801d052
 801b0bc:	08018a11 	.word	0x08018a11
 801b0c0:	0801ae19 	.word	0x0801ae19
 801b0c4:	0801d04e 	.word	0x0801d04e

0801b0c8 <__sfputc_r>:
 801b0c8:	6893      	ldr	r3, [r2, #8]
 801b0ca:	3b01      	subs	r3, #1
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	b410      	push	{r4}
 801b0d0:	6093      	str	r3, [r2, #8]
 801b0d2:	da08      	bge.n	801b0e6 <__sfputc_r+0x1e>
 801b0d4:	6994      	ldr	r4, [r2, #24]
 801b0d6:	42a3      	cmp	r3, r4
 801b0d8:	db01      	blt.n	801b0de <__sfputc_r+0x16>
 801b0da:	290a      	cmp	r1, #10
 801b0dc:	d103      	bne.n	801b0e6 <__sfputc_r+0x1e>
 801b0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0e2:	f7fe babb 	b.w	801965c <__swbuf_r>
 801b0e6:	6813      	ldr	r3, [r2, #0]
 801b0e8:	1c58      	adds	r0, r3, #1
 801b0ea:	6010      	str	r0, [r2, #0]
 801b0ec:	7019      	strb	r1, [r3, #0]
 801b0ee:	4608      	mov	r0, r1
 801b0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0f4:	4770      	bx	lr

0801b0f6 <__sfputs_r>:
 801b0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0f8:	4606      	mov	r6, r0
 801b0fa:	460f      	mov	r7, r1
 801b0fc:	4614      	mov	r4, r2
 801b0fe:	18d5      	adds	r5, r2, r3
 801b100:	42ac      	cmp	r4, r5
 801b102:	d101      	bne.n	801b108 <__sfputs_r+0x12>
 801b104:	2000      	movs	r0, #0
 801b106:	e007      	b.n	801b118 <__sfputs_r+0x22>
 801b108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b10c:	463a      	mov	r2, r7
 801b10e:	4630      	mov	r0, r6
 801b110:	f7ff ffda 	bl	801b0c8 <__sfputc_r>
 801b114:	1c43      	adds	r3, r0, #1
 801b116:	d1f3      	bne.n	801b100 <__sfputs_r+0xa>
 801b118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b11c <_vfiprintf_r>:
 801b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b120:	460d      	mov	r5, r1
 801b122:	b09d      	sub	sp, #116	@ 0x74
 801b124:	4614      	mov	r4, r2
 801b126:	4698      	mov	r8, r3
 801b128:	4606      	mov	r6, r0
 801b12a:	b118      	cbz	r0, 801b134 <_vfiprintf_r+0x18>
 801b12c:	6a03      	ldr	r3, [r0, #32]
 801b12e:	b90b      	cbnz	r3, 801b134 <_vfiprintf_r+0x18>
 801b130:	f7fe f8b2 	bl	8019298 <__sinit>
 801b134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b136:	07d9      	lsls	r1, r3, #31
 801b138:	d405      	bmi.n	801b146 <_vfiprintf_r+0x2a>
 801b13a:	89ab      	ldrh	r3, [r5, #12]
 801b13c:	059a      	lsls	r2, r3, #22
 801b13e:	d402      	bmi.n	801b146 <_vfiprintf_r+0x2a>
 801b140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b142:	f7fe fc1e 	bl	8019982 <__retarget_lock_acquire_recursive>
 801b146:	89ab      	ldrh	r3, [r5, #12]
 801b148:	071b      	lsls	r3, r3, #28
 801b14a:	d501      	bpl.n	801b150 <_vfiprintf_r+0x34>
 801b14c:	692b      	ldr	r3, [r5, #16]
 801b14e:	b99b      	cbnz	r3, 801b178 <_vfiprintf_r+0x5c>
 801b150:	4629      	mov	r1, r5
 801b152:	4630      	mov	r0, r6
 801b154:	f7fe fac0 	bl	80196d8 <__swsetup_r>
 801b158:	b170      	cbz	r0, 801b178 <_vfiprintf_r+0x5c>
 801b15a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b15c:	07dc      	lsls	r4, r3, #31
 801b15e:	d504      	bpl.n	801b16a <_vfiprintf_r+0x4e>
 801b160:	f04f 30ff 	mov.w	r0, #4294967295
 801b164:	b01d      	add	sp, #116	@ 0x74
 801b166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b16a:	89ab      	ldrh	r3, [r5, #12]
 801b16c:	0598      	lsls	r0, r3, #22
 801b16e:	d4f7      	bmi.n	801b160 <_vfiprintf_r+0x44>
 801b170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b172:	f7fe fc07 	bl	8019984 <__retarget_lock_release_recursive>
 801b176:	e7f3      	b.n	801b160 <_vfiprintf_r+0x44>
 801b178:	2300      	movs	r3, #0
 801b17a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b17c:	2320      	movs	r3, #32
 801b17e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b182:	f8cd 800c 	str.w	r8, [sp, #12]
 801b186:	2330      	movs	r3, #48	@ 0x30
 801b188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b338 <_vfiprintf_r+0x21c>
 801b18c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b190:	f04f 0901 	mov.w	r9, #1
 801b194:	4623      	mov	r3, r4
 801b196:	469a      	mov	sl, r3
 801b198:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b19c:	b10a      	cbz	r2, 801b1a2 <_vfiprintf_r+0x86>
 801b19e:	2a25      	cmp	r2, #37	@ 0x25
 801b1a0:	d1f9      	bne.n	801b196 <_vfiprintf_r+0x7a>
 801b1a2:	ebba 0b04 	subs.w	fp, sl, r4
 801b1a6:	d00b      	beq.n	801b1c0 <_vfiprintf_r+0xa4>
 801b1a8:	465b      	mov	r3, fp
 801b1aa:	4622      	mov	r2, r4
 801b1ac:	4629      	mov	r1, r5
 801b1ae:	4630      	mov	r0, r6
 801b1b0:	f7ff ffa1 	bl	801b0f6 <__sfputs_r>
 801b1b4:	3001      	adds	r0, #1
 801b1b6:	f000 80a7 	beq.w	801b308 <_vfiprintf_r+0x1ec>
 801b1ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1bc:	445a      	add	r2, fp
 801b1be:	9209      	str	r2, [sp, #36]	@ 0x24
 801b1c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	f000 809f 	beq.w	801b308 <_vfiprintf_r+0x1ec>
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	f04f 32ff 	mov.w	r2, #4294967295
 801b1d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1d4:	f10a 0a01 	add.w	sl, sl, #1
 801b1d8:	9304      	str	r3, [sp, #16]
 801b1da:	9307      	str	r3, [sp, #28]
 801b1dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b1e0:	931a      	str	r3, [sp, #104]	@ 0x68
 801b1e2:	4654      	mov	r4, sl
 801b1e4:	2205      	movs	r2, #5
 801b1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1ea:	4853      	ldr	r0, [pc, #332]	@ (801b338 <_vfiprintf_r+0x21c>)
 801b1ec:	f7e5 f800 	bl	80001f0 <memchr>
 801b1f0:	9a04      	ldr	r2, [sp, #16]
 801b1f2:	b9d8      	cbnz	r0, 801b22c <_vfiprintf_r+0x110>
 801b1f4:	06d1      	lsls	r1, r2, #27
 801b1f6:	bf44      	itt	mi
 801b1f8:	2320      	movmi	r3, #32
 801b1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1fe:	0713      	lsls	r3, r2, #28
 801b200:	bf44      	itt	mi
 801b202:	232b      	movmi	r3, #43	@ 0x2b
 801b204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b208:	f89a 3000 	ldrb.w	r3, [sl]
 801b20c:	2b2a      	cmp	r3, #42	@ 0x2a
 801b20e:	d015      	beq.n	801b23c <_vfiprintf_r+0x120>
 801b210:	9a07      	ldr	r2, [sp, #28]
 801b212:	4654      	mov	r4, sl
 801b214:	2000      	movs	r0, #0
 801b216:	f04f 0c0a 	mov.w	ip, #10
 801b21a:	4621      	mov	r1, r4
 801b21c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b220:	3b30      	subs	r3, #48	@ 0x30
 801b222:	2b09      	cmp	r3, #9
 801b224:	d94b      	bls.n	801b2be <_vfiprintf_r+0x1a2>
 801b226:	b1b0      	cbz	r0, 801b256 <_vfiprintf_r+0x13a>
 801b228:	9207      	str	r2, [sp, #28]
 801b22a:	e014      	b.n	801b256 <_vfiprintf_r+0x13a>
 801b22c:	eba0 0308 	sub.w	r3, r0, r8
 801b230:	fa09 f303 	lsl.w	r3, r9, r3
 801b234:	4313      	orrs	r3, r2
 801b236:	9304      	str	r3, [sp, #16]
 801b238:	46a2      	mov	sl, r4
 801b23a:	e7d2      	b.n	801b1e2 <_vfiprintf_r+0xc6>
 801b23c:	9b03      	ldr	r3, [sp, #12]
 801b23e:	1d19      	adds	r1, r3, #4
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	9103      	str	r1, [sp, #12]
 801b244:	2b00      	cmp	r3, #0
 801b246:	bfbb      	ittet	lt
 801b248:	425b      	neglt	r3, r3
 801b24a:	f042 0202 	orrlt.w	r2, r2, #2
 801b24e:	9307      	strge	r3, [sp, #28]
 801b250:	9307      	strlt	r3, [sp, #28]
 801b252:	bfb8      	it	lt
 801b254:	9204      	strlt	r2, [sp, #16]
 801b256:	7823      	ldrb	r3, [r4, #0]
 801b258:	2b2e      	cmp	r3, #46	@ 0x2e
 801b25a:	d10a      	bne.n	801b272 <_vfiprintf_r+0x156>
 801b25c:	7863      	ldrb	r3, [r4, #1]
 801b25e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b260:	d132      	bne.n	801b2c8 <_vfiprintf_r+0x1ac>
 801b262:	9b03      	ldr	r3, [sp, #12]
 801b264:	1d1a      	adds	r2, r3, #4
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	9203      	str	r2, [sp, #12]
 801b26a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b26e:	3402      	adds	r4, #2
 801b270:	9305      	str	r3, [sp, #20]
 801b272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b348 <_vfiprintf_r+0x22c>
 801b276:	7821      	ldrb	r1, [r4, #0]
 801b278:	2203      	movs	r2, #3
 801b27a:	4650      	mov	r0, sl
 801b27c:	f7e4 ffb8 	bl	80001f0 <memchr>
 801b280:	b138      	cbz	r0, 801b292 <_vfiprintf_r+0x176>
 801b282:	9b04      	ldr	r3, [sp, #16]
 801b284:	eba0 000a 	sub.w	r0, r0, sl
 801b288:	2240      	movs	r2, #64	@ 0x40
 801b28a:	4082      	lsls	r2, r0
 801b28c:	4313      	orrs	r3, r2
 801b28e:	3401      	adds	r4, #1
 801b290:	9304      	str	r3, [sp, #16]
 801b292:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b296:	4829      	ldr	r0, [pc, #164]	@ (801b33c <_vfiprintf_r+0x220>)
 801b298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b29c:	2206      	movs	r2, #6
 801b29e:	f7e4 ffa7 	bl	80001f0 <memchr>
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d03f      	beq.n	801b326 <_vfiprintf_r+0x20a>
 801b2a6:	4b26      	ldr	r3, [pc, #152]	@ (801b340 <_vfiprintf_r+0x224>)
 801b2a8:	bb1b      	cbnz	r3, 801b2f2 <_vfiprintf_r+0x1d6>
 801b2aa:	9b03      	ldr	r3, [sp, #12]
 801b2ac:	3307      	adds	r3, #7
 801b2ae:	f023 0307 	bic.w	r3, r3, #7
 801b2b2:	3308      	adds	r3, #8
 801b2b4:	9303      	str	r3, [sp, #12]
 801b2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2b8:	443b      	add	r3, r7
 801b2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2bc:	e76a      	b.n	801b194 <_vfiprintf_r+0x78>
 801b2be:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2c2:	460c      	mov	r4, r1
 801b2c4:	2001      	movs	r0, #1
 801b2c6:	e7a8      	b.n	801b21a <_vfiprintf_r+0xfe>
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	3401      	adds	r4, #1
 801b2cc:	9305      	str	r3, [sp, #20]
 801b2ce:	4619      	mov	r1, r3
 801b2d0:	f04f 0c0a 	mov.w	ip, #10
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2da:	3a30      	subs	r2, #48	@ 0x30
 801b2dc:	2a09      	cmp	r2, #9
 801b2de:	d903      	bls.n	801b2e8 <_vfiprintf_r+0x1cc>
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d0c6      	beq.n	801b272 <_vfiprintf_r+0x156>
 801b2e4:	9105      	str	r1, [sp, #20]
 801b2e6:	e7c4      	b.n	801b272 <_vfiprintf_r+0x156>
 801b2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2ec:	4604      	mov	r4, r0
 801b2ee:	2301      	movs	r3, #1
 801b2f0:	e7f0      	b.n	801b2d4 <_vfiprintf_r+0x1b8>
 801b2f2:	ab03      	add	r3, sp, #12
 801b2f4:	9300      	str	r3, [sp, #0]
 801b2f6:	462a      	mov	r2, r5
 801b2f8:	4b12      	ldr	r3, [pc, #72]	@ (801b344 <_vfiprintf_r+0x228>)
 801b2fa:	a904      	add	r1, sp, #16
 801b2fc:	4630      	mov	r0, r6
 801b2fe:	f7fd fb87 	bl	8018a10 <_printf_float>
 801b302:	4607      	mov	r7, r0
 801b304:	1c78      	adds	r0, r7, #1
 801b306:	d1d6      	bne.n	801b2b6 <_vfiprintf_r+0x19a>
 801b308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b30a:	07d9      	lsls	r1, r3, #31
 801b30c:	d405      	bmi.n	801b31a <_vfiprintf_r+0x1fe>
 801b30e:	89ab      	ldrh	r3, [r5, #12]
 801b310:	059a      	lsls	r2, r3, #22
 801b312:	d402      	bmi.n	801b31a <_vfiprintf_r+0x1fe>
 801b314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b316:	f7fe fb35 	bl	8019984 <__retarget_lock_release_recursive>
 801b31a:	89ab      	ldrh	r3, [r5, #12]
 801b31c:	065b      	lsls	r3, r3, #25
 801b31e:	f53f af1f 	bmi.w	801b160 <_vfiprintf_r+0x44>
 801b322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b324:	e71e      	b.n	801b164 <_vfiprintf_r+0x48>
 801b326:	ab03      	add	r3, sp, #12
 801b328:	9300      	str	r3, [sp, #0]
 801b32a:	462a      	mov	r2, r5
 801b32c:	4b05      	ldr	r3, [pc, #20]	@ (801b344 <_vfiprintf_r+0x228>)
 801b32e:	a904      	add	r1, sp, #16
 801b330:	4630      	mov	r0, r6
 801b332:	f7fd fe05 	bl	8018f40 <_printf_i>
 801b336:	e7e4      	b.n	801b302 <_vfiprintf_r+0x1e6>
 801b338:	0801d048 	.word	0x0801d048
 801b33c:	0801d052 	.word	0x0801d052
 801b340:	08018a11 	.word	0x08018a11
 801b344:	0801b0f7 	.word	0x0801b0f7
 801b348:	0801d04e 	.word	0x0801d04e

0801b34c <__sflush_r>:
 801b34c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b354:	0716      	lsls	r6, r2, #28
 801b356:	4605      	mov	r5, r0
 801b358:	460c      	mov	r4, r1
 801b35a:	d454      	bmi.n	801b406 <__sflush_r+0xba>
 801b35c:	684b      	ldr	r3, [r1, #4]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	dc02      	bgt.n	801b368 <__sflush_r+0x1c>
 801b362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b364:	2b00      	cmp	r3, #0
 801b366:	dd48      	ble.n	801b3fa <__sflush_r+0xae>
 801b368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b36a:	2e00      	cmp	r6, #0
 801b36c:	d045      	beq.n	801b3fa <__sflush_r+0xae>
 801b36e:	2300      	movs	r3, #0
 801b370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b374:	682f      	ldr	r7, [r5, #0]
 801b376:	6a21      	ldr	r1, [r4, #32]
 801b378:	602b      	str	r3, [r5, #0]
 801b37a:	d030      	beq.n	801b3de <__sflush_r+0x92>
 801b37c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b37e:	89a3      	ldrh	r3, [r4, #12]
 801b380:	0759      	lsls	r1, r3, #29
 801b382:	d505      	bpl.n	801b390 <__sflush_r+0x44>
 801b384:	6863      	ldr	r3, [r4, #4]
 801b386:	1ad2      	subs	r2, r2, r3
 801b388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b38a:	b10b      	cbz	r3, 801b390 <__sflush_r+0x44>
 801b38c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b38e:	1ad2      	subs	r2, r2, r3
 801b390:	2300      	movs	r3, #0
 801b392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b394:	6a21      	ldr	r1, [r4, #32]
 801b396:	4628      	mov	r0, r5
 801b398:	47b0      	blx	r6
 801b39a:	1c43      	adds	r3, r0, #1
 801b39c:	89a3      	ldrh	r3, [r4, #12]
 801b39e:	d106      	bne.n	801b3ae <__sflush_r+0x62>
 801b3a0:	6829      	ldr	r1, [r5, #0]
 801b3a2:	291d      	cmp	r1, #29
 801b3a4:	d82b      	bhi.n	801b3fe <__sflush_r+0xb2>
 801b3a6:	4a2a      	ldr	r2, [pc, #168]	@ (801b450 <__sflush_r+0x104>)
 801b3a8:	410a      	asrs	r2, r1
 801b3aa:	07d6      	lsls	r6, r2, #31
 801b3ac:	d427      	bmi.n	801b3fe <__sflush_r+0xb2>
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	6062      	str	r2, [r4, #4]
 801b3b2:	04d9      	lsls	r1, r3, #19
 801b3b4:	6922      	ldr	r2, [r4, #16]
 801b3b6:	6022      	str	r2, [r4, #0]
 801b3b8:	d504      	bpl.n	801b3c4 <__sflush_r+0x78>
 801b3ba:	1c42      	adds	r2, r0, #1
 801b3bc:	d101      	bne.n	801b3c2 <__sflush_r+0x76>
 801b3be:	682b      	ldr	r3, [r5, #0]
 801b3c0:	b903      	cbnz	r3, 801b3c4 <__sflush_r+0x78>
 801b3c2:	6560      	str	r0, [r4, #84]	@ 0x54
 801b3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b3c6:	602f      	str	r7, [r5, #0]
 801b3c8:	b1b9      	cbz	r1, 801b3fa <__sflush_r+0xae>
 801b3ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b3ce:	4299      	cmp	r1, r3
 801b3d0:	d002      	beq.n	801b3d8 <__sflush_r+0x8c>
 801b3d2:	4628      	mov	r0, r5
 801b3d4:	f7ff f94c 	bl	801a670 <_free_r>
 801b3d8:	2300      	movs	r3, #0
 801b3da:	6363      	str	r3, [r4, #52]	@ 0x34
 801b3dc:	e00d      	b.n	801b3fa <__sflush_r+0xae>
 801b3de:	2301      	movs	r3, #1
 801b3e0:	4628      	mov	r0, r5
 801b3e2:	47b0      	blx	r6
 801b3e4:	4602      	mov	r2, r0
 801b3e6:	1c50      	adds	r0, r2, #1
 801b3e8:	d1c9      	bne.n	801b37e <__sflush_r+0x32>
 801b3ea:	682b      	ldr	r3, [r5, #0]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d0c6      	beq.n	801b37e <__sflush_r+0x32>
 801b3f0:	2b1d      	cmp	r3, #29
 801b3f2:	d001      	beq.n	801b3f8 <__sflush_r+0xac>
 801b3f4:	2b16      	cmp	r3, #22
 801b3f6:	d11e      	bne.n	801b436 <__sflush_r+0xea>
 801b3f8:	602f      	str	r7, [r5, #0]
 801b3fa:	2000      	movs	r0, #0
 801b3fc:	e022      	b.n	801b444 <__sflush_r+0xf8>
 801b3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b402:	b21b      	sxth	r3, r3
 801b404:	e01b      	b.n	801b43e <__sflush_r+0xf2>
 801b406:	690f      	ldr	r7, [r1, #16]
 801b408:	2f00      	cmp	r7, #0
 801b40a:	d0f6      	beq.n	801b3fa <__sflush_r+0xae>
 801b40c:	0793      	lsls	r3, r2, #30
 801b40e:	680e      	ldr	r6, [r1, #0]
 801b410:	bf08      	it	eq
 801b412:	694b      	ldreq	r3, [r1, #20]
 801b414:	600f      	str	r7, [r1, #0]
 801b416:	bf18      	it	ne
 801b418:	2300      	movne	r3, #0
 801b41a:	eba6 0807 	sub.w	r8, r6, r7
 801b41e:	608b      	str	r3, [r1, #8]
 801b420:	f1b8 0f00 	cmp.w	r8, #0
 801b424:	dde9      	ble.n	801b3fa <__sflush_r+0xae>
 801b426:	6a21      	ldr	r1, [r4, #32]
 801b428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b42a:	4643      	mov	r3, r8
 801b42c:	463a      	mov	r2, r7
 801b42e:	4628      	mov	r0, r5
 801b430:	47b0      	blx	r6
 801b432:	2800      	cmp	r0, #0
 801b434:	dc08      	bgt.n	801b448 <__sflush_r+0xfc>
 801b436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b43e:	81a3      	strh	r3, [r4, #12]
 801b440:	f04f 30ff 	mov.w	r0, #4294967295
 801b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b448:	4407      	add	r7, r0
 801b44a:	eba8 0800 	sub.w	r8, r8, r0
 801b44e:	e7e7      	b.n	801b420 <__sflush_r+0xd4>
 801b450:	dfbffffe 	.word	0xdfbffffe

0801b454 <_fflush_r>:
 801b454:	b538      	push	{r3, r4, r5, lr}
 801b456:	690b      	ldr	r3, [r1, #16]
 801b458:	4605      	mov	r5, r0
 801b45a:	460c      	mov	r4, r1
 801b45c:	b913      	cbnz	r3, 801b464 <_fflush_r+0x10>
 801b45e:	2500      	movs	r5, #0
 801b460:	4628      	mov	r0, r5
 801b462:	bd38      	pop	{r3, r4, r5, pc}
 801b464:	b118      	cbz	r0, 801b46e <_fflush_r+0x1a>
 801b466:	6a03      	ldr	r3, [r0, #32]
 801b468:	b90b      	cbnz	r3, 801b46e <_fflush_r+0x1a>
 801b46a:	f7fd ff15 	bl	8019298 <__sinit>
 801b46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d0f3      	beq.n	801b45e <_fflush_r+0xa>
 801b476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b478:	07d0      	lsls	r0, r2, #31
 801b47a:	d404      	bmi.n	801b486 <_fflush_r+0x32>
 801b47c:	0599      	lsls	r1, r3, #22
 801b47e:	d402      	bmi.n	801b486 <_fflush_r+0x32>
 801b480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b482:	f7fe fa7e 	bl	8019982 <__retarget_lock_acquire_recursive>
 801b486:	4628      	mov	r0, r5
 801b488:	4621      	mov	r1, r4
 801b48a:	f7ff ff5f 	bl	801b34c <__sflush_r>
 801b48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b490:	07da      	lsls	r2, r3, #31
 801b492:	4605      	mov	r5, r0
 801b494:	d4e4      	bmi.n	801b460 <_fflush_r+0xc>
 801b496:	89a3      	ldrh	r3, [r4, #12]
 801b498:	059b      	lsls	r3, r3, #22
 801b49a:	d4e1      	bmi.n	801b460 <_fflush_r+0xc>
 801b49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b49e:	f7fe fa71 	bl	8019984 <__retarget_lock_release_recursive>
 801b4a2:	e7dd      	b.n	801b460 <_fflush_r+0xc>

0801b4a4 <__swhatbuf_r>:
 801b4a4:	b570      	push	{r4, r5, r6, lr}
 801b4a6:	460c      	mov	r4, r1
 801b4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4ac:	2900      	cmp	r1, #0
 801b4ae:	b096      	sub	sp, #88	@ 0x58
 801b4b0:	4615      	mov	r5, r2
 801b4b2:	461e      	mov	r6, r3
 801b4b4:	da0d      	bge.n	801b4d2 <__swhatbuf_r+0x2e>
 801b4b6:	89a3      	ldrh	r3, [r4, #12]
 801b4b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b4bc:	f04f 0100 	mov.w	r1, #0
 801b4c0:	bf14      	ite	ne
 801b4c2:	2340      	movne	r3, #64	@ 0x40
 801b4c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b4c8:	2000      	movs	r0, #0
 801b4ca:	6031      	str	r1, [r6, #0]
 801b4cc:	602b      	str	r3, [r5, #0]
 801b4ce:	b016      	add	sp, #88	@ 0x58
 801b4d0:	bd70      	pop	{r4, r5, r6, pc}
 801b4d2:	466a      	mov	r2, sp
 801b4d4:	f000 f878 	bl	801b5c8 <_fstat_r>
 801b4d8:	2800      	cmp	r0, #0
 801b4da:	dbec      	blt.n	801b4b6 <__swhatbuf_r+0x12>
 801b4dc:	9901      	ldr	r1, [sp, #4]
 801b4de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b4e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b4e6:	4259      	negs	r1, r3
 801b4e8:	4159      	adcs	r1, r3
 801b4ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b4ee:	e7eb      	b.n	801b4c8 <__swhatbuf_r+0x24>

0801b4f0 <__smakebuf_r>:
 801b4f0:	898b      	ldrh	r3, [r1, #12]
 801b4f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b4f4:	079d      	lsls	r5, r3, #30
 801b4f6:	4606      	mov	r6, r0
 801b4f8:	460c      	mov	r4, r1
 801b4fa:	d507      	bpl.n	801b50c <__smakebuf_r+0x1c>
 801b4fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b500:	6023      	str	r3, [r4, #0]
 801b502:	6123      	str	r3, [r4, #16]
 801b504:	2301      	movs	r3, #1
 801b506:	6163      	str	r3, [r4, #20]
 801b508:	b003      	add	sp, #12
 801b50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b50c:	ab01      	add	r3, sp, #4
 801b50e:	466a      	mov	r2, sp
 801b510:	f7ff ffc8 	bl	801b4a4 <__swhatbuf_r>
 801b514:	9f00      	ldr	r7, [sp, #0]
 801b516:	4605      	mov	r5, r0
 801b518:	4639      	mov	r1, r7
 801b51a:	4630      	mov	r0, r6
 801b51c:	f7fd f832 	bl	8018584 <_malloc_r>
 801b520:	b948      	cbnz	r0, 801b536 <__smakebuf_r+0x46>
 801b522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b526:	059a      	lsls	r2, r3, #22
 801b528:	d4ee      	bmi.n	801b508 <__smakebuf_r+0x18>
 801b52a:	f023 0303 	bic.w	r3, r3, #3
 801b52e:	f043 0302 	orr.w	r3, r3, #2
 801b532:	81a3      	strh	r3, [r4, #12]
 801b534:	e7e2      	b.n	801b4fc <__smakebuf_r+0xc>
 801b536:	89a3      	ldrh	r3, [r4, #12]
 801b538:	6020      	str	r0, [r4, #0]
 801b53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b53e:	81a3      	strh	r3, [r4, #12]
 801b540:	9b01      	ldr	r3, [sp, #4]
 801b542:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b546:	b15b      	cbz	r3, 801b560 <__smakebuf_r+0x70>
 801b548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b54c:	4630      	mov	r0, r6
 801b54e:	f000 f84d 	bl	801b5ec <_isatty_r>
 801b552:	b128      	cbz	r0, 801b560 <__smakebuf_r+0x70>
 801b554:	89a3      	ldrh	r3, [r4, #12]
 801b556:	f023 0303 	bic.w	r3, r3, #3
 801b55a:	f043 0301 	orr.w	r3, r3, #1
 801b55e:	81a3      	strh	r3, [r4, #12]
 801b560:	89a3      	ldrh	r3, [r4, #12]
 801b562:	431d      	orrs	r5, r3
 801b564:	81a5      	strh	r5, [r4, #12]
 801b566:	e7cf      	b.n	801b508 <__smakebuf_r+0x18>

0801b568 <_raise_r>:
 801b568:	291f      	cmp	r1, #31
 801b56a:	b538      	push	{r3, r4, r5, lr}
 801b56c:	4605      	mov	r5, r0
 801b56e:	460c      	mov	r4, r1
 801b570:	d904      	bls.n	801b57c <_raise_r+0x14>
 801b572:	2316      	movs	r3, #22
 801b574:	6003      	str	r3, [r0, #0]
 801b576:	f04f 30ff 	mov.w	r0, #4294967295
 801b57a:	bd38      	pop	{r3, r4, r5, pc}
 801b57c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b57e:	b112      	cbz	r2, 801b586 <_raise_r+0x1e>
 801b580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b584:	b94b      	cbnz	r3, 801b59a <_raise_r+0x32>
 801b586:	4628      	mov	r0, r5
 801b588:	f000 f852 	bl	801b630 <_getpid_r>
 801b58c:	4622      	mov	r2, r4
 801b58e:	4601      	mov	r1, r0
 801b590:	4628      	mov	r0, r5
 801b592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b596:	f000 b839 	b.w	801b60c <_kill_r>
 801b59a:	2b01      	cmp	r3, #1
 801b59c:	d00a      	beq.n	801b5b4 <_raise_r+0x4c>
 801b59e:	1c59      	adds	r1, r3, #1
 801b5a0:	d103      	bne.n	801b5aa <_raise_r+0x42>
 801b5a2:	2316      	movs	r3, #22
 801b5a4:	6003      	str	r3, [r0, #0]
 801b5a6:	2001      	movs	r0, #1
 801b5a8:	e7e7      	b.n	801b57a <_raise_r+0x12>
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b5b0:	4620      	mov	r0, r4
 801b5b2:	4798      	blx	r3
 801b5b4:	2000      	movs	r0, #0
 801b5b6:	e7e0      	b.n	801b57a <_raise_r+0x12>

0801b5b8 <raise>:
 801b5b8:	4b02      	ldr	r3, [pc, #8]	@ (801b5c4 <raise+0xc>)
 801b5ba:	4601      	mov	r1, r0
 801b5bc:	6818      	ldr	r0, [r3, #0]
 801b5be:	f7ff bfd3 	b.w	801b568 <_raise_r>
 801b5c2:	bf00      	nop
 801b5c4:	20000a6c 	.word	0x20000a6c

0801b5c8 <_fstat_r>:
 801b5c8:	b538      	push	{r3, r4, r5, lr}
 801b5ca:	4d07      	ldr	r5, [pc, #28]	@ (801b5e8 <_fstat_r+0x20>)
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	4604      	mov	r4, r0
 801b5d0:	4608      	mov	r0, r1
 801b5d2:	4611      	mov	r1, r2
 801b5d4:	602b      	str	r3, [r5, #0]
 801b5d6:	f7e7 fabb 	bl	8002b50 <_fstat>
 801b5da:	1c43      	adds	r3, r0, #1
 801b5dc:	d102      	bne.n	801b5e4 <_fstat_r+0x1c>
 801b5de:	682b      	ldr	r3, [r5, #0]
 801b5e0:	b103      	cbz	r3, 801b5e4 <_fstat_r+0x1c>
 801b5e2:	6023      	str	r3, [r4, #0]
 801b5e4:	bd38      	pop	{r3, r4, r5, pc}
 801b5e6:	bf00      	nop
 801b5e8:	2001484c 	.word	0x2001484c

0801b5ec <_isatty_r>:
 801b5ec:	b538      	push	{r3, r4, r5, lr}
 801b5ee:	4d06      	ldr	r5, [pc, #24]	@ (801b608 <_isatty_r+0x1c>)
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	4604      	mov	r4, r0
 801b5f4:	4608      	mov	r0, r1
 801b5f6:	602b      	str	r3, [r5, #0]
 801b5f8:	f7e7 faba 	bl	8002b70 <_isatty>
 801b5fc:	1c43      	adds	r3, r0, #1
 801b5fe:	d102      	bne.n	801b606 <_isatty_r+0x1a>
 801b600:	682b      	ldr	r3, [r5, #0]
 801b602:	b103      	cbz	r3, 801b606 <_isatty_r+0x1a>
 801b604:	6023      	str	r3, [r4, #0]
 801b606:	bd38      	pop	{r3, r4, r5, pc}
 801b608:	2001484c 	.word	0x2001484c

0801b60c <_kill_r>:
 801b60c:	b538      	push	{r3, r4, r5, lr}
 801b60e:	4d07      	ldr	r5, [pc, #28]	@ (801b62c <_kill_r+0x20>)
 801b610:	2300      	movs	r3, #0
 801b612:	4604      	mov	r4, r0
 801b614:	4608      	mov	r0, r1
 801b616:	4611      	mov	r1, r2
 801b618:	602b      	str	r3, [r5, #0]
 801b61a:	f7e7 fa39 	bl	8002a90 <_kill>
 801b61e:	1c43      	adds	r3, r0, #1
 801b620:	d102      	bne.n	801b628 <_kill_r+0x1c>
 801b622:	682b      	ldr	r3, [r5, #0]
 801b624:	b103      	cbz	r3, 801b628 <_kill_r+0x1c>
 801b626:	6023      	str	r3, [r4, #0]
 801b628:	bd38      	pop	{r3, r4, r5, pc}
 801b62a:	bf00      	nop
 801b62c:	2001484c 	.word	0x2001484c

0801b630 <_getpid_r>:
 801b630:	f7e7 ba26 	b.w	8002a80 <_getpid>

0801b634 <__ascii_mbtowc>:
 801b634:	b082      	sub	sp, #8
 801b636:	b901      	cbnz	r1, 801b63a <__ascii_mbtowc+0x6>
 801b638:	a901      	add	r1, sp, #4
 801b63a:	b142      	cbz	r2, 801b64e <__ascii_mbtowc+0x1a>
 801b63c:	b14b      	cbz	r3, 801b652 <__ascii_mbtowc+0x1e>
 801b63e:	7813      	ldrb	r3, [r2, #0]
 801b640:	600b      	str	r3, [r1, #0]
 801b642:	7812      	ldrb	r2, [r2, #0]
 801b644:	1e10      	subs	r0, r2, #0
 801b646:	bf18      	it	ne
 801b648:	2001      	movne	r0, #1
 801b64a:	b002      	add	sp, #8
 801b64c:	4770      	bx	lr
 801b64e:	4610      	mov	r0, r2
 801b650:	e7fb      	b.n	801b64a <__ascii_mbtowc+0x16>
 801b652:	f06f 0001 	mvn.w	r0, #1
 801b656:	e7f8      	b.n	801b64a <__ascii_mbtowc+0x16>

0801b658 <__ascii_wctomb>:
 801b658:	4603      	mov	r3, r0
 801b65a:	4608      	mov	r0, r1
 801b65c:	b141      	cbz	r1, 801b670 <__ascii_wctomb+0x18>
 801b65e:	2aff      	cmp	r2, #255	@ 0xff
 801b660:	d904      	bls.n	801b66c <__ascii_wctomb+0x14>
 801b662:	228a      	movs	r2, #138	@ 0x8a
 801b664:	601a      	str	r2, [r3, #0]
 801b666:	f04f 30ff 	mov.w	r0, #4294967295
 801b66a:	4770      	bx	lr
 801b66c:	700a      	strb	r2, [r1, #0]
 801b66e:	2001      	movs	r0, #1
 801b670:	4770      	bx	lr
	...

0801b674 <_init>:
 801b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b676:	bf00      	nop
 801b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b67a:	bc08      	pop	{r3}
 801b67c:	469e      	mov	lr, r3
 801b67e:	4770      	bx	lr

0801b680 <_fini>:
 801b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b682:	bf00      	nop
 801b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b686:	bc08      	pop	{r3}
 801b688:	469e      	mov	lr, r3
 801b68a:	4770      	bx	lr
