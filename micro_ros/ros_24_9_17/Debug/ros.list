
ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021048  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c18  080211d8  080211d8  000221d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024df0  08024df0  0002886c  2**0
                  CONTENTS
  4 .ARM          00000008  08024df0  08024df0  00025df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024df8  08024df8  0002886c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08024df8  08024df8  00025df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024e0c  08024e0c  00025e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000286c  20000000  08024e10  00026000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002886c  2**0
                  CONTENTS
 10 .bss          00015aec  20002870  20002870  00028870  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001835c  2001835c  00028870  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002886c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036448  00000000  00000000  0002889c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000098ed  00000000  00000000  0005ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002760  00000000  00000000  000685d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e2f  00000000  00000000  0006ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f36f  00000000  00000000  0006cb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048e58  00000000  00000000  0009bed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f178c  00000000  00000000  000e4d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  001d64ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b398  00000000  00000000  001d6530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001e18c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002870 	.word	0x20002870
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080211c0 	.word	0x080211c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002874 	.word	0x20002874
 80001cc:	080211c0 	.word	0x080211c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <KDCOM_Check>:
uint8  USART_RX_BUF[USART_REC_LEN]; 	//接收缓冲
uint16 USART_RX_STA = 0;         			//接收状态
uint8 aRxBuffer[1];			//HAL库USART接收Buffer

uint8 KDCOM_Check(KDRobot* buf)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    return '\n';
 8001000:	230a      	movs	r3, #10
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <KDCOM_SetData>:
    buf->check = KDCOM_Check(buf);
    return (uint8*)buf;
}

uint8* KDCOM_SetData(KDRobot* buf, uint8 channel, float data1, float data2)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	460b      	mov	r3, r1
 8001018:	ed87 0a01 	vstr	s0, [r7, #4]
 800101c:	edc7 0a00 	vstr	s1, [r7]
 8001020:	72fb      	strb	r3, [r7, #11]
    buf->head = '0' + channel;
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	3330      	adds	r3, #48	@ 0x30
 8001026:	b2da      	uxtb	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	701a      	strb	r2, [r3, #0]
    *(float*)&buf->buf[0] = data1;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
    *(float*)&buf->buf[4] = data2;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3305      	adds	r3, #5
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	601a      	str	r2, [r3, #0]
    buf->check = KDCOM_Check(buf);
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff ffdb 	bl	8000ff8 <KDCOM_Check>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	725a      	strb	r2, [r3, #9]
    return (uint8*)buf;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <CopeSerial2Data>:
float gyro_x;
float gyro_y;
float gyro_z;

void CopeSerial2Data(unsigned char ucData)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	static unsigned char ucRxBuffer[250];
	static unsigned char ucRxCnt = 0;

	ucRxBuffer[ucRxCnt++]=ucData;	//将收到的数据存入缓冲区中
 800105e:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <CopeSerial2Data+0x80>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	b2d1      	uxtb	r1, r2
 8001066:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <CopeSerial2Data+0x80>)
 8001068:	7011      	strb	r1, [r2, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4a1a      	ldr	r2, [pc, #104]	@ (80010d8 <CopeSerial2Data+0x84>)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	5453      	strb	r3, [r2, r1]
	if (ucRxBuffer[0]!=0x55) //数据头不对，则重新开始寻找0x55数据头
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <CopeSerial2Data+0x84>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b55      	cmp	r3, #85	@ 0x55
 8001078:	d003      	beq.n	8001082 <CopeSerial2Data+0x2e>
	{
		ucRxCnt=0;
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <CopeSerial2Data+0x80>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
		return;
 8001080:	e025      	b.n	80010ce <CopeSerial2Data+0x7a>
	}
	if (ucRxCnt<11) {return;}//数据不满11个，则返回
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <CopeSerial2Data+0x80>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d920      	bls.n	80010cc <CopeSerial2Data+0x78>
	else
	{
		switch(ucRxBuffer[1])//判断数据是哪种数据，然后将其拷贝到对应的结构体中，有些数据包需要通过上位机打开对应的输出后，才能接收到这个数据包的数据
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <CopeSerial2Data+0x84>)
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	2b53      	cmp	r3, #83	@ 0x53
 8001090:	d012      	beq.n	80010b8 <CopeSerial2Data+0x64>
 8001092:	2b53      	cmp	r3, #83	@ 0x53
 8001094:	dc16      	bgt.n	80010c4 <CopeSerial2Data+0x70>
 8001096:	2b51      	cmp	r3, #81	@ 0x51
 8001098:	d002      	beq.n	80010a0 <CopeSerial2Data+0x4c>
 800109a:	2b52      	cmp	r3, #82	@ 0x52
 800109c:	d006      	beq.n	80010ac <CopeSerial2Data+0x58>
 800109e:	e011      	b.n	80010c4 <CopeSerial2Data+0x70>
		{
			//memcpy为编译器自带的内存拷贝函数，需引用"string.h"，将接收缓冲区的字符拷贝到数据结构体里面，从而实现数据的解析。
			case 0x51:	memcpy(&ACC,&ucRxBuffer[2],8);break;
 80010a0:	2208      	movs	r2, #8
 80010a2:	490e      	ldr	r1, [pc, #56]	@ (80010dc <CopeSerial2Data+0x88>)
 80010a4:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <CopeSerial2Data+0x8c>)
 80010a6:	f01c fae0 	bl	801d66a <memcpy>
 80010aa:	e00b      	b.n	80010c4 <CopeSerial2Data+0x70>
			case 0x52:	memcpy(&Gyro,&ucRxBuffer[2],8);break;
 80010ac:	2208      	movs	r2, #8
 80010ae:	490b      	ldr	r1, [pc, #44]	@ (80010dc <CopeSerial2Data+0x88>)
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <CopeSerial2Data+0x90>)
 80010b2:	f01c fada 	bl	801d66a <memcpy>
 80010b6:	e005      	b.n	80010c4 <CopeSerial2Data+0x70>
			case 0x53:	memcpy(&Angle,&ucRxBuffer[2],8);break;
 80010b8:	2208      	movs	r2, #8
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <CopeSerial2Data+0x88>)
 80010bc:	480a      	ldr	r0, [pc, #40]	@ (80010e8 <CopeSerial2Data+0x94>)
 80010be:	f01c fad4 	bl	801d66a <memcpy>
 80010c2:	bf00      	nop
		}
		ucRxCnt=0;//清空缓存区
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <CopeSerial2Data+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e000      	b.n	80010ce <CopeSerial2Data+0x7a>
	if (ucRxCnt<11) {return;}//数据不满11个，则返回
 80010cc:	bf00      	nop
	}
}
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200028f8 	.word	0x200028f8
 80010d8:	200028fc 	.word	0x200028fc
 80010dc:	200028fe 	.word	0x200028fe
 80010e0:	200028bc 	.word	0x200028bc
 80010e4:	200028cc 	.word	0x200028cc
 80010e8:	200028c4 	.word	0x200028c4

080010ec <get_data>:
	}

}

void get_data(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	acc_x = (float)ACC.a[0]/32768*16;
 80010f0:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <get_data+0x154>)
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fe:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001244 <get_data+0x158>
 8001102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001106:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	4b4e      	ldr	r3, [pc, #312]	@ (8001248 <get_data+0x15c>)
 8001110:	edc3 7a00 	vstr	s15, [r3]
	acc_y = (float)ACC.a[1]/32768*16;
 8001114:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <get_data+0x154>)
 8001116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001122:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001244 <get_data+0x158>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800112e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001132:	4b46      	ldr	r3, [pc, #280]	@ (800124c <get_data+0x160>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
	acc_z = (float)ACC.a[2]/32768*16;
 8001138:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <get_data+0x154>)
 800113a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001146:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001244 <get_data+0x158>
 800114a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	4b3e      	ldr	r3, [pc, #248]	@ (8001250 <get_data+0x164>)
 8001158:	edc3 7a00 	vstr	s15, [r3]

	gyro_x = (float)Gyro.w[0]/32768*2000;
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <get_data+0x168>)
 800115e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116a:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001244 <get_data+0x158>
 800116e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001172:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001258 <get_data+0x16c>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	4b38      	ldr	r3, [pc, #224]	@ (800125c <get_data+0x170>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)Gyro.w[1]/32768*2000;
 8001180:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <get_data+0x168>)
 8001182:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001244 <get_data+0x158>
 8001192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001196:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001258 <get_data+0x16c>
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <get_data+0x174>)
 80011a0:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)Gyro.w[2]/32768*2000;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <get_data+0x168>)
 80011a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b2:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001244 <get_data+0x158>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001258 <get_data+0x16c>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <get_data+0x178>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]

	angle_x = (float)Angle.Angle[0]/32768*180;
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <get_data+0x17c>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001244 <get_data+0x158>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800126c <get_data+0x180>
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <get_data+0x184>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
	angle_y = (float)Angle.Angle[1]/32768*180;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <get_data+0x17c>)
 80011ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fa:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001244 <get_data+0x158>
 80011fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001202:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800126c <get_data+0x180>
 8001206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120a:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <get_data+0x188>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
	angle_z = (float)Angle.Angle[2]/32768*180;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <get_data+0x17c>)
 8001212:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001244 <get_data+0x158>
 8001222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001226:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800126c <get_data+0x180>
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <get_data+0x18c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]

}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200028bc 	.word	0x200028bc
 8001244:	47000000 	.word	0x47000000
 8001248:	200028e0 	.word	0x200028e0
 800124c:	200028e4 	.word	0x200028e4
 8001250:	200028e8 	.word	0x200028e8
 8001254:	200028cc 	.word	0x200028cc
 8001258:	44fa0000 	.word	0x44fa0000
 800125c:	200028ec 	.word	0x200028ec
 8001260:	200028f0 	.word	0x200028f0
 8001264:	200028f4 	.word	0x200028f4
 8001268:	200028c4 	.word	0x200028c4
 800126c:	43340000 	.word	0x43340000
 8001270:	200028d4 	.word	0x200028d4
 8001274:	200028d8 	.word	0x200028d8
 8001278:	200028dc 	.word	0x200028dc

0800127c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart->ErrorCode&HAL_UART_ERROR_ORE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00f      	beq.n	80012b0 <HAL_UART_ErrorCallback+0x34>
	{
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart3,&rx_buff1,1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	4903      	ldr	r1, [pc, #12]	@ (80012b8 <HAL_UART_ErrorCallback+0x3c>)
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <HAL_UART_ErrorCallback+0x40>)
 80012ac:	f008 fc7b 	bl	8009ba6 <HAL_UART_Receive_IT>
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200028b9 	.word	0x200028b9
 80012bc:	20008370 	.word	0x20008370

080012c0 <Euler2Quaternion>:
float line_speed;
float angle_speed;

// 将欧拉角转为四元数
void Euler2Quaternion(float roll, float pitch, float yaw, quaternion_t* q)
{
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b090      	sub	sp, #64	@ 0x40
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ce:	ed87 1a01 	vstr	s2, [r7, #4]
 80012d2:	6038      	str	r0, [r7, #0]
    // 传入机器人的欧拉角 roll、pitch 和 yaw。
    // 计算欧拉角的 sin 和 cos 值，分别保存在 cr、sr、cy、sy、cp、sp 六个变量中
    double cr = cos(roll * 0.5);
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff f947 	bl	8000568 <__aeabi_f2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b99      	ldr	r3, [pc, #612]	@ (8001544 <Euler2Quaternion+0x284>)
 80012e0:	f7ff f99a 	bl	8000618 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	ec43 2b17 	vmov	d7, r2, r3
 80012ec:	eeb0 0a47 	vmov.f32	s0, s14
 80012f0:	eef0 0a67 	vmov.f32	s1, s15
 80012f4:	f01e f858 	bl	801f3a8 <cos>
 80012f8:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
    double sr = sin(roll * 0.5);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff f933 	bl	8000568 <__aeabi_f2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b8f      	ldr	r3, [pc, #572]	@ (8001544 <Euler2Quaternion+0x284>)
 8001308:	f7ff f986 	bl	8000618 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	ec43 2b17 	vmov	d7, r2, r3
 8001314:	eeb0 0a47 	vmov.f32	s0, s14
 8001318:	eef0 0a67 	vmov.f32	s1, s15
 800131c:	f01e f898 	bl	801f450 <sin>
 8001320:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
    double cy = cos(yaw * 0.5);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff f91f 	bl	8000568 <__aeabi_f2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b85      	ldr	r3, [pc, #532]	@ (8001544 <Euler2Quaternion+0x284>)
 8001330:	f7ff f972 	bl	8000618 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	ec43 2b17 	vmov	d7, r2, r3
 800133c:	eeb0 0a47 	vmov.f32	s0, s14
 8001340:	eef0 0a67 	vmov.f32	s1, s15
 8001344:	f01e f830 	bl	801f3a8 <cos>
 8001348:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    double sy = sin(yaw * 0.5);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff f90b 	bl	8000568 <__aeabi_f2d>
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b7b      	ldr	r3, [pc, #492]	@ (8001544 <Euler2Quaternion+0x284>)
 8001358:	f7ff f95e 	bl	8000618 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	ec43 2b17 	vmov	d7, r2, r3
 8001364:	eeb0 0a47 	vmov.f32	s0, s14
 8001368:	eef0 0a67 	vmov.f32	s1, s15
 800136c:	f01e f870 	bl	801f450 <sin>
 8001370:	ed87 0b08 	vstr	d0, [r7, #32]
    double cp = cos(pitch * 0.5);
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff f8f7 	bl	8000568 <__aeabi_f2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b71      	ldr	r3, [pc, #452]	@ (8001544 <Euler2Quaternion+0x284>)
 8001380:	f7ff f94a 	bl	8000618 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b17 	vmov	d7, r2, r3
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	f01e f808 	bl	801f3a8 <cos>
 8001398:	ed87 0b06 	vstr	d0, [r7, #24]
    double sp = sin(pitch * 0.5);
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	f7ff f8e3 	bl	8000568 <__aeabi_f2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b67      	ldr	r3, [pc, #412]	@ (8001544 <Euler2Quaternion+0x284>)
 80013a8:	f7ff f936 	bl	8000618 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	ec43 2b17 	vmov	d7, r2, r3
 80013b4:	eeb0 0a47 	vmov.f32	s0, s14
 80013b8:	eef0 0a67 	vmov.f32	s1, s15
 80013bc:	f01e f848 	bl	801f450 <sin>
 80013c0:	ed87 0b04 	vstr	d0, [r7, #16]

    // 计算四元数的分量
    q->w = cy * cp * cr + sy * sp * sr;
 80013c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013cc:	f7ff f924 	bl	8000618 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013dc:	f7ff f91c 	bl	8000618 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013f0:	f7ff f912 	bl	8000618 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001400:	f7ff f90a 	bl	8000618 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4620      	mov	r0, r4
 800140a:	4629      	mov	r1, r5
 800140c:	f7fe ff4e 	bl	80002ac <__adddf3>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbd6 	bl	8000bc8 <__aeabi_d2f>
 800141c:	4602      	mov	r2, r0
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	601a      	str	r2, [r3, #0]
    q->x = cy * cp * sr - sy * sp * cr;
 8001422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800142a:	f7ff f8f5 	bl	8000618 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800143a:	f7ff f8ed 	bl	8000618 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800144a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800144e:	f7ff f8e3 	bl	8000618 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800145e:	f7ff f8db 	bl	8000618 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe ff1d 	bl	80002a8 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fba7 	bl	8000bc8 <__aeabi_d2f>
 800147a:	4602      	mov	r2, r0
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	605a      	str	r2, [r3, #4]
    q->y = sy * cp * sr + cy * sp * cr;
 8001480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001484:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001488:	f7ff f8c6 	bl	8000618 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001498:	f7ff f8be 	bl	8000618 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014ac:	f7ff f8b4 	bl	8000618 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80014bc:	f7ff f8ac 	bl	8000618 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fef0 	bl	80002ac <__adddf3>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb78 	bl	8000bc8 <__aeabi_d2f>
 80014d8:	4602      	mov	r2, r0
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	609a      	str	r2, [r3, #8]
    q->z = sy * cp * cr - cy * sp * sr;
 80014de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014e6:	f7ff f897 	bl	8000618 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80014f6:	f7ff f88f 	bl	8000618 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	461d      	mov	r5, r3
 8001502:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001506:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800150a:	f7ff f885 	bl	8000618 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800151a:	f7ff f87d 	bl	8000618 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7fe febf 	bl	80002a8 <__aeabi_dsub>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fb49 	bl	8000bc8 <__aeabi_d2f>
 8001536:	4602      	mov	r2, r0
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	60da      	str	r2, [r3, #12]
}
 800153c:	bf00      	nop
 800153e:	3740      	adds	r7, #64	@ 0x40
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	3fe00000 	.word	0x3fe00000

08001548 <update_bot_odom>:

void update_bot_odom(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	ed2d 8b02 	vpush	{d8}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
//    float dt_s = (float)dt / 1000.0f;
	float dt_s = 0.05;
 8001552:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <update_bot_odom+0x120>)
 8001554:	607b      	str	r3, [r7, #4]

	line_speed = (motor1.speed + motor2.speed) / 2.0;   // 计算线速度
 8001556:	4b45      	ldr	r3, [pc, #276]	@ (800166c <update_bot_odom+0x124>)
 8001558:	ed93 7a03 	vldr	s14, [r3, #12]
 800155c:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <update_bot_odom+0x128>)
 800155e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <update_bot_odom+0x12c>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	angle_speed = (motor2.speed - motor1.speed) / 0.205;   // 计算角速度
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <update_bot_odom+0x128>)
 8001576:	ed93 7a03 	vldr	s14, [r3, #12]
 800157a:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <update_bot_odom+0x124>)
 800157c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	ee17 0a90 	vmov	r0, s15
 8001588:	f7fe ffee 	bl	8000568 <__aeabi_f2d>
 800158c:	a334      	add	r3, pc, #208	@ (adr r3, 8001660 <update_bot_odom+0x118>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f96b 	bl	800086c <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fb13 	bl	8000bc8 <__aeabi_d2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a34      	ldr	r2, [pc, #208]	@ (8001678 <update_bot_odom+0x130>)
 80015a6:	6013      	str	r3, [r2, #0]

    // 这里假设 linear_speed 和 angular_speed 已经通过其他方法获得并设置好了
    odom_.angular_speed = angle_speed;
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <update_bot_odom+0x130>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a33      	ldr	r2, [pc, #204]	@ (800167c <update_bot_odom+0x134>)
 80015ae:	6213      	str	r3, [r2, #32]
    odom_.linear_speed = line_speed; // （m/s）
 80015b0:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <update_bot_odom+0x12c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a31      	ldr	r2, [pc, #196]	@ (800167c <update_bot_odom+0x134>)
 80015b6:	61d3      	str	r3, [r2, #28]

    // 更新yaw
    odom_.yaw += odom_.angular_speed * dt_s;
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <update_bot_odom+0x134>)
 80015ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <update_bot_odom+0x134>)
 80015c0:	edd3 6a08 	vldr	s13, [r3, #32]
 80015c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <update_bot_odom+0x134>)
 80015d2:	edc3 7a02 	vstr	s15, [r3, #8]
    odom_.yaw = TransAngleInPI(odom_.yaw);
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <update_bot_odom+0x134>)
 80015d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	f000 f84e 	bl	8001680 <TransAngleInPI>
 80015e4:	eef0 7a40 	vmov.f32	s15, s0
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <update_bot_odom+0x134>)
 80015ea:	edc3 7a02 	vstr	s15, [r3, #8]

    /* 更新x和y轴上移动的距离 */
    float delta_distance = odom_.linear_speed * dt_s; // 单位m
 80015ee:	4b23      	ldr	r3, [pc, #140]	@ (800167c <update_bot_odom+0x134>)
 80015f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80015f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a00 	vstr	s15, [r7]
    odom_.x += delta_distance * cosf(odom_.yaw);
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <update_bot_odom+0x134>)
 8001602:	ed93 8a00 	vldr	s16, [r3]
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <update_bot_odom+0x134>)
 8001608:	edd3 7a02 	vldr	s15, [r3, #8]
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	f01d ff72 	bl	801f4f8 <cosf>
 8001614:	eeb0 7a40 	vmov.f32	s14, s0
 8001618:	edd7 7a00 	vldr	s15, [r7]
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <update_bot_odom+0x134>)
 8001626:	edc3 7a00 	vstr	s15, [r3]
    odom_.y += delta_distance * sinf(odom_.yaw);
 800162a:	4b14      	ldr	r3, [pc, #80]	@ (800167c <update_bot_odom+0x134>)
 800162c:	ed93 8a01 	vldr	s16, [r3, #4]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <update_bot_odom+0x134>)
 8001632:	edd3 7a02 	vldr	s15, [r3, #8]
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f01d ffa1 	bl	801f580 <sinf>
 800163e:	eeb0 7a40 	vmov.f32	s14, s0
 8001642:	edd7 7a00 	vldr	s15, [r7]
 8001646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <update_bot_odom+0x134>)
 8001650:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	ecbd 8b02 	vpop	{d8}
 800165e:	bd80      	pop	{r7, pc}
 8001660:	a3d70a3d 	.word	0xa3d70a3d
 8001664:	3fca3d70 	.word	0x3fca3d70
 8001668:	3d4ccccd 	.word	0x3d4ccccd
 800166c:	20002a24 	.word	0x20002a24
 8001670:	20002a3c 	.word	0x20002a3c
 8001674:	20002a1c 	.word	0x20002a1c
 8001678:	20002a20 	.word	0x20002a20
 800167c:	200029f8 	.word	0x200029f8

08001680 <TransAngleInPI>:

float TransAngleInPI(float angle){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
    angle = fmod(angle, 2.0f * 3.14159f);  // 限制在 [-2π, 2π]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe ff6c 	bl	8000568 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001708 <TransAngleInPI+0x88>
 8001698:	ec43 2b10 	vmov	d0, r2, r3
 800169c:	f01d fe55 	bl	801f34a <fmod>
 80016a0:	ec53 2b10 	vmov	r2, r3, d0
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa8e 	bl	8000bc8 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	607b      	str	r3, [r7, #4]
    if (angle > 3.14159f) {
 80016b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001710 <TransAngleInPI+0x90>
 80016b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	dd08      	ble.n	80016d4 <TransAngleInPI+0x54>
        angle -= 2.0f * 3.14159f;
 80016c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001714 <TransAngleInPI+0x94>
 80016ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80016d2:	e010      	b.n	80016f6 <TransAngleInPI+0x76>
    }
    else if (angle < -3.14159f) {
 80016d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001718 <TransAngleInPI+0x98>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d507      	bpl.n	80016f6 <TransAngleInPI+0x76>
        angle += 2.0f * 3.14159f;
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001714 <TransAngleInPI+0x94>
 80016ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f2:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    return angle;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	ee07 3a90 	vmov	s15, r3
}
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	00000000 	.word	0x00000000
 800170c:	401921fa 	.word	0x401921fa
 8001710:	40490fd0 	.word	0x40490fd0
 8001714:	40c90fd0 	.word	0x40c90fd0
 8001718:	c0490fd0 	.word	0xc0490fd0

0800171c <get_odom>:


// 返回全局 odom_t 实例的指针
odom_t* get_odom(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
    // 将机器人的欧拉角 yaw 转换为四元数
    Euler2Quaternion(0, 0, odom_.yaw, &odom_.quaternion);
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <get_odom+0x24>)
 8001722:	edd3 7a02 	vldr	s15, [r3, #8]
 8001726:	4807      	ldr	r0, [pc, #28]	@ (8001744 <get_odom+0x28>)
 8001728:	eeb0 1a67 	vmov.f32	s2, s15
 800172c:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001748 <get_odom+0x2c>
 8001730:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001748 <get_odom+0x2c>
 8001734:	f7ff fdc4 	bl	80012c0 <Euler2Quaternion>
    return &odom_;
 8001738:	4b01      	ldr	r3, [pc, #4]	@ (8001740 <get_odom+0x24>)
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200029f8 	.word	0x200029f8
 8001744:	20002a04 	.word	0x20002a04
 8001748:	00000000 	.word	0x00000000

0800174c <Encoder_Init>:

Motor motor1;
Motor motor2;

void Encoder_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&GAP_TIM);                      		 //开启10ms定时器中断
 8001750:	4829      	ldr	r0, [pc, #164]	@ (80017f8 <Encoder_Init+0xac>)
 8001752:	f006 fff1 	bl	8008738 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&ENCODER_1_TIM, TIM_CHANNEL_ALL);      //开启编码器定时器左
 8001756:	213c      	movs	r1, #60	@ 0x3c
 8001758:	4828      	ldr	r0, [pc, #160]	@ (80017fc <Encoder_Init+0xb0>)
 800175a:	f007 fa1b 	bl	8008b94 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&ENCODER_2_TIM, TIM_CHANNEL_ALL);      //开启编码器定时器右
 800175e:	213c      	movs	r1, #60	@ 0x3c
 8001760:	4827      	ldr	r0, [pc, #156]	@ (8001800 <Encoder_Init+0xb4>)
 8001762:	f007 fa17 	bl	8008b94 <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&ENCODER_1_TIM,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
 8001766:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <Encoder_Init+0xb0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <Encoder_Init+0xb0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&ENCODER_2_TIM,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <Encoder_Init+0xb4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <Encoder_Init+0xb4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&ENCODER_1_TIM, 10000);                	 //编码器定时器初始值设定为10000
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <Encoder_Init+0xb0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800178e:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&ENCODER_2_TIM, 10000);                	 //编码器定时器初始值设定为10000
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <Encoder_Init+0xb4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
//    motor1.CaptureNumber = motor2.CaptureNumber = 0;                  //结构体内容初始化
//    motor1.Direction = motor2.Direction = 0;
//    motor1.speed = motor2.speed = 0;

    motor1.lastCount = motor2.lastCount = 0;                                   //结构体内容初始化
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <Encoder_Init+0xb8>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <Encoder_Init+0xb8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a18      	ldr	r2, [pc, #96]	@ (8001808 <Encoder_Init+0xbc>)
 80017a6:	6013      	str	r3, [r2, #0]
    motor1.totalCount = motor2.totalCount = 0;
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <Encoder_Init+0xb8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <Encoder_Init+0xb8>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <Encoder_Init+0xbc>)
 80017b4:	6053      	str	r3, [r2, #4]
    motor1.overflowNum = motor2.overflowNum = 0;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <Encoder_Init+0xb8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	811a      	strh	r2, [r3, #8]
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <Encoder_Init+0xb8>)
 80017be:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <Encoder_Init+0xbc>)
 80017c4:	811a      	strh	r2, [r3, #8]
    motor1.speed = motor2.speed = 0;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <Encoder_Init+0xb8>)
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <Encoder_Init+0xb8>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <Encoder_Init+0xbc>)
 80017d4:	60d3      	str	r3, [r2, #12]
    motor1.direct = motor2.direct = 0;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <Encoder_Init+0xb8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	751a      	strb	r2, [r3, #20]
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <Encoder_Init+0xb8>)
 80017de:	7d1a      	ldrb	r2, [r3, #20]
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <Encoder_Init+0xbc>)
 80017e2:	751a      	strb	r2, [r3, #20]
    motor1.last_speed = motor2.last_speed = 0;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <Encoder_Init+0xb8>)
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <Encoder_Init+0xb8>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <Encoder_Init+0xbc>)
 80017f2:	6113      	str	r3, [r2, #16]
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20008208 	.word	0x20008208
 80017fc:	20008250 	.word	0x20008250
 8001800:	20008298 	.word	0x20008298
 8001804:	20002a3c 	.word	0x20002a3c
 8001808:	20002a24 	.word	0x20002a24

0800180c <left_motor_control>:
#include <motor/motor.h>

void left_motor_control(int speed){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	if(speed == 0){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d104      	bne.n	8001824 <left_motor_control+0x18>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);	//设置占空比为0
 800181a:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <left_motor_control+0x6c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34
		return 0;
 8001822:	e026      	b.n	8001872 <left_motor_control+0x66>
	}
	else if(speed > 0){
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dd0a      	ble.n	8001840 <left_motor_control+0x34>
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2101      	movs	r1, #1
 800182e:	4813      	ldr	r0, [pc, #76]	@ (800187c <left_motor_control+0x70>)
 8001830:	f005 fda0 	bl	8007374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2102      	movs	r1, #2
 8001838:	4810      	ldr	r0, [pc, #64]	@ (800187c <left_motor_control+0x70>)
 800183a:	f005 fd9b 	bl	8007374 <HAL_GPIO_WritePin>
 800183e:	e00f      	b.n	8001860 <left_motor_control+0x54>
	}
	else if(speed < 0){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0c      	bge.n	8001860 <left_motor_control+0x54>
		speed = -speed;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	425b      	negs	r3, r3
 800184a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2101      	movs	r1, #1
 8001850:	480a      	ldr	r0, [pc, #40]	@ (800187c <left_motor_control+0x70>)
 8001852:	f005 fd8f 	bl	8007374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2102      	movs	r1, #2
 800185a:	4808      	ldr	r0, [pc, #32]	@ (800187c <left_motor_control+0x70>)
 800185c:	f005 fd8a 	bl	8007374 <HAL_GPIO_WritePin>
	}if(speed >= 100)	speed = 100;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b63      	cmp	r3, #99	@ 0x63
 8001864:	dd01      	ble.n	800186a <left_motor_control+0x5e>
 8001866:	2364      	movs	r3, #100	@ 0x64
 8001868:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);	//设置占空比
 800186a:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <left_motor_control+0x6c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200081c0 	.word	0x200081c0
 800187c:	40021000 	.word	0x40021000

08001880 <right_motor_control>:

void right_motor_control(int speed){
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if(speed == 0){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <right_motor_control+0x18>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);	//设置占空比为0
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <right_motor_control+0x6c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	639a      	str	r2, [r3, #56]	@ 0x38
		return 0;
 8001896:	e026      	b.n	80018e6 <right_motor_control+0x66>
	}
	else if(speed > 0){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd0a      	ble.n	80018b4 <right_motor_control+0x34>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	4813      	ldr	r0, [pc, #76]	@ (80018f0 <right_motor_control+0x70>)
 80018a4:	f005 fd66 	bl	8007374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);//使能
 80018a8:	2201      	movs	r2, #1
 80018aa:	2102      	movs	r1, #2
 80018ac:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <right_motor_control+0x70>)
 80018ae:	f005 fd61 	bl	8007374 <HAL_GPIO_WritePin>
 80018b2:	e00f      	b.n	80018d4 <right_motor_control+0x54>
	}
	else if(speed < 0){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da0c      	bge.n	80018d4 <right_motor_control+0x54>
		speed = -speed;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	425b      	negs	r3, r3
 80018be:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);//使能
 80018c0:	2201      	movs	r2, #1
 80018c2:	2101      	movs	r1, #1
 80018c4:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <right_motor_control+0x70>)
 80018c6:	f005 fd55 	bl	8007374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <right_motor_control+0x70>)
 80018d0:	f005 fd50 	bl	8007374 <HAL_GPIO_WritePin>
	}if(speed >= 100)	speed = 100;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b63      	cmp	r3, #99	@ 0x63
 80018d8:	dd01      	ble.n	80018de <right_motor_control+0x5e>
 80018da:	2364      	movs	r3, #100	@ 0x64
 80018dc:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);	//设置占空比
 80018de:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <right_motor_control+0x6c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200081c0 	.word	0x200081c0
 80018f0:	40020800 	.word	0x40020800

080018f4 <OLED_Init>:
 * @function: void OLED_Init(void)
 * @description: OLED初始化
 * @return {*}
 */
void OLED_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80018fa:	20c8      	movs	r0, #200	@ 0xc8
 80018fc:	f004 fe96 	bl	800662c <HAL_Delay>

	uint8_t i = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<23; i++)
 8001904:	2300      	movs	r3, #0
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	e008      	b.n	800191c <OLED_Init+0x28>
	{
		OLED_WR_CMD(CMD_Data[i]);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <OLED_Init+0x38>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f80d 	bl	8001930 <OLED_WR_CMD>
	for(i=0; i<23; i++)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3301      	adds	r3, #1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b16      	cmp	r3, #22
 8001920:	d9f3      	bls.n	800190a <OLED_Init+0x16>
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000000 	.word	0x20000000

08001930 <OLED_WR_CMD>:
 * 这个函数的作用是通过I2C总线向OLED屏幕发送命令，控制其显示属性和行为。
 * @param {uint8_t} cmd 芯片手册规定的命令
 * @return {*}
 */
void OLED_WR_CMD(uint8_t cmd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af04      	add	r7, sp, #16
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 800193a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	2301      	movs	r3, #1
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2301      	movs	r3, #1
 800194a:	2200      	movs	r2, #0
 800194c:	2178      	movs	r1, #120	@ 0x78
 800194e:	4803      	ldr	r0, [pc, #12]	@ (800195c <OLED_WR_CMD+0x2c>)
 8001950:	f005 fe6e 	bl	8007630 <HAL_I2C_Mem_Write>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000811c 	.word	0x2000811c

08001960 <OLED_WR_DATA>:
 * @description: 向设备写控制数据
 * @param {uint8_t} data 数据
 * @return {*}
 */
void OLED_WR_DATA(uint8_t data)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af04      	add	r7, sp, #16
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 800196a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2301      	movs	r3, #1
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	2178      	movs	r1, #120	@ 0x78
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <OLED_WR_DATA+0x2c>)
 8001980:	f005 fe56 	bl	8007630 <HAL_I2C_Mem_Write>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000811c 	.word	0x2000811c

08001990 <OLED_Clear>:
 * @function: OLED_Clear(void)
 * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
 * @return {*}
 */
void OLED_Clear(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e01b      	b.n	80019d4 <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);    //设置页地址（0~7）
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3b50      	subs	r3, #80	@ 0x50
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffc4 	bl	8001930 <OLED_WR_CMD>
		OLED_WR_CMD(0x00);      //设置显示位置—列低地址
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff ffc1 	bl	8001930 <OLED_WR_CMD>
		OLED_WR_CMD(0x10);      //设置显示位置—列高地址
 80019ae:	2010      	movs	r0, #16
 80019b0:	f7ff ffbe 	bl	8001930 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	71bb      	strb	r3, [r7, #6]
 80019b8:	e005      	b.n	80019c6 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff ffd0 	bl	8001960 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	3301      	adds	r3, #1
 80019c4:	71bb      	strb	r3, [r7, #6]
 80019c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	daf5      	bge.n	80019ba <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	3301      	adds	r3, #1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	d9e0      	bls.n	800199c <OLED_Clear+0xc>
	}
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <OLED_Set_Pos>:
 * @description: 坐标设置
 * @param {uint8_t} x,y
 * @return {*}
 */
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);	//设置页地址（0~7）
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	3b50      	subs	r3, #80	@ 0x50
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff98 	bl	8001930 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff8f 	bl	8001930 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);	//设置显示位置—列低地址
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff88 	bl	8001930 <OLED_WR_CMD>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <oled_pow>:
 * @description: m^n函数
 * @param {uint8_t} m,n
 * @return {unsigned int} result
 */
unsigned int oled_pow(uint8_t m,uint8_t n)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	unsigned int result=1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a3c:	e004      	b.n	8001a48 <oled_pow+0x20>
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	1e5a      	subs	r2, r3, #1
 8001a4c:	71ba      	strb	r2, [r7, #6]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f5      	bne.n	8001a3e <oled_pow+0x16>
	return result;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <OLED_ShowChar>:
 * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4604      	mov	r4, r0
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	4603      	mov	r3, r0
 8001a74:	71bb      	strb	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	717b      	strb	r3, [r7, #5]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73bb      	strb	r3, [r7, #14]
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 8001a86:	797b      	ldrb	r3, [r7, #5]
 8001a88:	3b20      	subs	r3, #32
 8001a8a:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da04      	bge.n	8001a9e <OLED_ShowChar+0x3e>
 8001a94:	2300      	movs	r3, #0
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	79bb      	ldrb	r3, [r7, #6]
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d154      	bne.n	8001b4e <OLED_ShowChar+0xee>
		{
			OLED_Set_Pos(x,y);
 8001aa4:	79ba      	ldrb	r2, [r7, #6]
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff9a 	bl	80019e4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e01b      	b.n	8001aee <OLED_ShowChar+0x8e>
				{
				  if(Color_Turn)
 8001ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <OLED_ShowChar+0x76>
					  OLED_WR_DATA(~F8X16[c*16+i]);
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	011a      	lsls	r2, r3, #4
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb8 <OLED_ShowChar+0x158>)
 8001ac8:	5cd3      	ldrb	r3, [r2, r3]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff46 	bl	8001960 <OLED_WR_DATA>
 8001ad4:	e008      	b.n	8001ae8 <OLED_ShowChar+0x88>
				  else
					  OLED_WR_DATA(F8X16[c*16+i]);
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	011a      	lsls	r2, r3, #4
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a36      	ldr	r2, [pc, #216]	@ (8001bb8 <OLED_ShowChar+0x158>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff3c 	bl	8001960 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	3301      	adds	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b07      	cmp	r3, #7
 8001af2:	d9e0      	bls.n	8001ab6 <OLED_ShowChar+0x56>
				}
			OLED_Set_Pos(x,y+1);
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff70 	bl	80019e4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e01d      	b.n	8001b46 <OLED_ShowChar+0xe6>
			    {
				  if(Color_Turn)
 8001b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <OLED_ShowChar+0xcc>
					  OLED_WR_DATA(~F8X16[c*16+i+8]);
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	011a      	lsls	r2, r3, #4
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <OLED_ShowChar+0x158>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff1b 	bl	8001960 <OLED_WR_DATA>
 8001b2a:	e009      	b.n	8001b40 <OLED_ShowChar+0xe0>
				  else
					  OLED_WR_DATA(F8X16[c*16+i+8]);
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	011a      	lsls	r2, r3, #4
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	4413      	add	r3, r2
 8001b34:	3308      	adds	r3, #8
 8001b36:	4a20      	ldr	r2, [pc, #128]	@ (8001bb8 <OLED_ShowChar+0x158>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff10 	bl	8001960 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	3301      	adds	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b07      	cmp	r3, #7
 8001b4a:	d9de      	bls.n	8001b0a <OLED_ShowChar+0xaa>
					  OLED_WR_DATA(~F6x8[c][i]);
				  else
					  OLED_WR_DATA(F6x8[c][i]);
			    }
		  }
}
 8001b4c:	e02f      	b.n	8001bae <OLED_ShowChar+0x14e>
				OLED_Set_Pos(x,y);
 8001b4e:	79ba      	ldrb	r2, [r7, #6]
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff45 	bl	80019e4 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e023      	b.n	8001ba8 <OLED_ShowChar+0x148>
				  if(Color_Turn)
 8001b60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00f      	beq.n	8001b88 <OLED_ShowChar+0x128>
					  OLED_WR_DATA(~F6x8[c][i]);
 8001b68:	7bba      	ldrb	r2, [r7, #14]
 8001b6a:	7bf9      	ldrb	r1, [r7, #15]
 8001b6c:	4813      	ldr	r0, [pc, #76]	@ (8001bbc <OLED_ShowChar+0x15c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4403      	add	r3, r0
 8001b78:	440b      	add	r3, r1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff feed 	bl	8001960 <OLED_WR_DATA>
 8001b86:	e00c      	b.n	8001ba2 <OLED_ShowChar+0x142>
					  OLED_WR_DATA(F6x8[c][i]);
 8001b88:	7bba      	ldrb	r2, [r7, #14]
 8001b8a:	7bf9      	ldrb	r1, [r7, #15]
 8001b8c:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <OLED_ShowChar+0x15c>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4403      	add	r3, r0
 8001b98:	440b      	add	r3, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fedf 	bl	8001960 <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d9d8      	bls.n	8001b60 <OLED_ShowChar+0x100>
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0802241c 	.word	0x0802241c
 8001bbc:	080221f4 	.word	0x080221f4

08001bc0 <OLED_ShowString>:
 * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	603a      	str	r2, [r7, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	71bb      	strb	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	717b      	strb	r3, [r7, #5]
	uint8_t  j=0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001bda:	e02f      	b.n	8001c3c <OLED_ShowString+0x7c>
	{		OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	797c      	ldrb	r4, [r7, #5]
 8001be6:	79b9      	ldrb	r1, [r7, #6]
 8001be8:	79f8      	ldrb	r0, [r7, #7]
 8001bea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	f7ff ff35 	bl	8001a60 <OLED_ShowChar>
			if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8001bf6:	797b      	ldrb	r3, [r7, #5]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d103      	bne.n	8001c04 <OLED_ShowString+0x44>
				x += 6;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	3306      	adds	r3, #6
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	e002      	b.n	8001c0a <OLED_ShowString+0x4a>
			else  //8X16的字体列加8，显示下一个字符
				x += 8;
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	3308      	adds	r3, #8
 8001c08:	71fb      	strb	r3, [r7, #7]

			if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b7a      	cmp	r3, #122	@ 0x7a
 8001c0e:	d907      	bls.n	8001c20 <OLED_ShowString+0x60>
 8001c10:	797b      	ldrb	r3, [r7, #5]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d104      	bne.n	8001c20 <OLED_ShowString+0x60>
			{
				x = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	71fb      	strb	r3, [r7, #7]
				y++;
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	71bb      	strb	r3, [r7, #6]
			}
			if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b78      	cmp	r3, #120	@ 0x78
 8001c24:	d907      	bls.n	8001c36 <OLED_ShowString+0x76>
 8001c26:	797b      	ldrb	r3, [r7, #5]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d104      	bne.n	8001c36 <OLED_ShowString+0x76>
			{
				x = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71fb      	strb	r3, [r7, #7]
				y++;
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	3301      	adds	r3, #1
 8001c34:	71bb      	strb	r3, [r7, #6]
			}
			j++;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1c9      	bne.n	8001bdc <OLED_ShowString+0x1c>
	}
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
	...

08001c54 <OLED_Showdecimal>:
 * @param {uint8_t} size2:输入的数据大小，选择 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_Showdecimal(uint8_t x,uint8_t y,float num,uint8_t z_len,uint8_t f_len,uint8_t size2, uint8_t Color_Turn)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	ed2d 8b02 	vpush	{d8}
 8001c5a:	b089      	sub	sp, #36	@ 0x24
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	ed87 0a00 	vstr	s0, [r7]
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71bb      	strb	r3, [r7, #6]
 8001c72:	460b      	mov	r3, r1
 8001c74:	717b      	strb	r3, [r7, #5]
 8001c76:	4613      	mov	r3, r2
 8001c78:	713b      	strb	r3, [r7, #4]
	uint8_t t,temp,i=0;//i为负数标志位
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75bb      	strb	r3, [r7, #22]
	uint8_t enshow;
	int z_temp,f_temp;
	if(num<0)
 8001c7e:	edd7 7a00 	vldr	s15, [r7]
 8001c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d50a      	bpl.n	8001ca2 <OLED_Showdecimal+0x4e>
	{
		z_len+=1;
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	717b      	strb	r3, [r7, #5]
		i=1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75bb      	strb	r3, [r7, #22]
		num=-num;
 8001c96:	edd7 7a00 	vldr	s15, [r7]
 8001c9a:	eef1 7a67 	vneg.f32	s15, s15
 8001c9e:	edc7 7a00 	vstr	s15, [r7]
	}
	z_temp=(int)num;
 8001ca2:	edd7 7a00 	vldr	s15, [r7]
 8001ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	613b      	str	r3, [r7, #16]
	//整数部分
	for(t=0;t<z_len;t++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]
 8001cb4:	e055      	b.n	8001d62 <OLED_Showdecimal+0x10e>
	{
		temp=(z_temp/oled_pow(10,z_len-t-1))%10;
 8001cb6:	693c      	ldr	r4, [r7, #16]
 8001cb8:	797a      	ldrb	r2, [r7, #5]
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f7ff feae 	bl	8001a28 <oled_pow>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	fbb4 f1f3 	udiv	r1, r4, r3
 8001cd2:	4b67      	ldr	r3, [pc, #412]	@ (8001e70 <OLED_Showdecimal+0x21c>)
 8001cd4:	fba3 2301 	umull	r2, r3, r3, r1
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	1aca      	subs	r2, r1, r3
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	72fb      	strb	r3, [r7, #11]
		if(enshow==0 && t<(z_len-1))
 8001ce8:	7d7b      	ldrb	r3, [r7, #21]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d11f      	bne.n	8001d2e <OLED_Showdecimal+0xda>
 8001cee:	7dfa      	ldrb	r2, [r7, #23]
 8001cf0:	797b      	ldrb	r3, [r7, #5]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	da1a      	bge.n	8001d2e <OLED_Showdecimal+0xda>
		{
			if(temp==0)
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d115      	bne.n	8001d2a <OLED_Showdecimal+0xd6>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2, Color_Turn);
 8001cfe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	7dfa      	ldrb	r2, [r7, #23]
 8001d08:	fb12 f303 	smulbb	r3, r2, r3
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4413      	add	r3, r2
 8001d12:	b2d8      	uxtb	r0, r3
 8001d14:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d18:	79b9      	ldrb	r1, [r7, #6]
 8001d1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	2220      	movs	r2, #32
 8001d24:	f7ff fe9c 	bl	8001a60 <OLED_ShowChar>
				continue;
 8001d28:	e018      	b.n	8001d5c <OLED_Showdecimal+0x108>
			}
			else
			enshow=1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	757b      	strb	r3, [r7, #21]
		}
		OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2, Color_Turn);
 8001d2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	7dfa      	ldrb	r2, [r7, #23]
 8001d38:	fb12 f303 	smulbb	r3, r2, r3
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4413      	add	r3, r2
 8001d42:	b2d8      	uxtb	r0, r3
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	3330      	adds	r3, #48	@ 0x30
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	f897 4030 	ldrb.w	r4, [r7, #48]	@ 0x30
 8001d4e:	79b9      	ldrb	r1, [r7, #6]
 8001d50:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4623      	mov	r3, r4
 8001d58:	f7ff fe82 	bl	8001a60 <OLED_ShowChar>
	for(t=0;t<z_len;t++)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
 8001d62:	7dfa      	ldrb	r2, [r7, #23]
 8001d64:	797b      	ldrb	r3, [r7, #5]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d3a5      	bcc.n	8001cb6 <OLED_Showdecimal+0x62>
	}
	//小数点
	OLED_ShowChar(x+(size2/2)*(z_len),y,'.',size2, Color_Turn);
 8001d6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	797a      	ldrb	r2, [r7, #5]
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b2d8      	uxtb	r0, r3
 8001d80:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d84:	79b9      	ldrb	r1, [r7, #6]
 8001d86:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	222e      	movs	r2, #46	@ 0x2e
 8001d90:	f7ff fe66 	bl	8001a60 <OLED_ShowChar>

	f_temp=(int)((num-z_temp)*(oled_pow(10,f_len)));
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	ed97 7a00 	vldr	s14, [r7]
 8001da2:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001da6:	793b      	ldrb	r3, [r7, #4]
 8001da8:	4619      	mov	r1, r3
 8001daa:	200a      	movs	r0, #10
 8001dac:	f7ff fe3c 	bl	8001a28 <oled_pow>
 8001db0:	ee07 0a90 	vmov	s15, r0
 8001db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc0:	ee17 3a90 	vmov	r3, s15
 8001dc4:	60fb      	str	r3, [r7, #12]
  //小数部分
	for(t=0;t<f_len;t++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
 8001dca:	e037      	b.n	8001e3c <OLED_Showdecimal+0x1e8>
	{
		temp=(f_temp/oled_pow(10,f_len-t-1))%10;
 8001dcc:	68fc      	ldr	r4, [r7, #12]
 8001dce:	793a      	ldrb	r2, [r7, #4]
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	200a      	movs	r0, #10
 8001dde:	f7ff fe23 	bl	8001a28 <oled_pow>
 8001de2:	4603      	mov	r3, r0
 8001de4:	fbb4 f1f3 	udiv	r1, r4, r3
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <OLED_Showdecimal+0x21c>)
 8001dea:	fba3 2301 	umull	r2, r3, r3, r1
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	1aca      	subs	r2, r1, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	72fb      	strb	r3, [r7, #11]
		OLED_ShowChar(x+(size2/2)*(t+z_len)+5,y,temp+'0',size2, Color_Turn);
 8001dfe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	7df9      	ldrb	r1, [r7, #23]
 8001e08:	797b      	ldrb	r3, [r7, #5]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	fb12 f303 	smulbb	r3, r2, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3305      	adds	r3, #5
 8001e1c:	b2d8      	uxtb	r0, r3
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	3330      	adds	r3, #48	@ 0x30
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	f897 4030 	ldrb.w	r4, [r7, #48]	@ 0x30
 8001e28:	79b9      	ldrb	r1, [r7, #6]
 8001e2a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4623      	mov	r3, r4
 8001e32:	f7ff fe15 	bl	8001a60 <OLED_ShowChar>
	for(t=0;t<f_len;t++)
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	7dfa      	ldrb	r2, [r7, #23]
 8001e3e:	793b      	ldrb	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3c3      	bcc.n	8001dcc <OLED_Showdecimal+0x178>
	}
	if(i==1)//如果为负，就将最前的一位赋值‘-’
 8001e44:	7dbb      	ldrb	r3, [r7, #22]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10c      	bne.n	8001e64 <OLED_Showdecimal+0x210>
	{
		OLED_ShowChar(x,y,'-',size2, Color_Turn);
 8001e4a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e4e:	79b9      	ldrb	r1, [r7, #6]
 8001e50:	79f8      	ldrb	r0, [r7, #7]
 8001e52:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	222d      	movs	r2, #45	@ 0x2d
 8001e5c:	f7ff fe00 	bl	8001a60 <OLED_ShowChar>
		i=0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75bb      	strb	r3, [r7, #22]
	}
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	ecbd 8b02 	vpop	{d8}
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	cccccccd 	.word	0xcccccccd

08001e74 <builtin_interfaces__msg__Time__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_builtin_interfaces
const rosidl_type_hash_t *
builtin_interfaces__msg__Time__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      0xb1, 0x06, 0x23, 0x5e, 0x25, 0xa4, 0xc5, 0xed,
      0x35, 0x09, 0x8a, 0xa0, 0xa6, 0x1a, 0x3e, 0xe9,
      0xc9, 0xb1, 0x8d, 0x19, 0x7f, 0x39, 0x8b, 0x0e,
      0x42, 0x06, 0xce, 0xa9, 0xac, 0xf9, 0xc1, 0x97,
    }};
  return &hash;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <builtin_interfaces__msg__Time__get_type_hash+0x18>)
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	200001cc 	.word	0x200001cc

08001e90 <builtin_interfaces__msg__Time__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
builtin_interfaces__msg__Time__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      {builtin_interfaces__msg__Time__TYPE_NAME, 27, 27},
      {builtin_interfaces__msg__Time__FIELDS, 2, 2},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <builtin_interfaces__msg__Time__get_type_description+0x2c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <builtin_interfaces__msg__Time__get_type_description+0x1c>
    constructed = true;
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <builtin_interfaces__msg__Time__get_type_description+0x2c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <builtin_interfaces__msg__Time__get_type_description+0x30>)
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20002a54 	.word	0x20002a54
 8001ec0:	080229fc 	.word	0x080229fc

08001ec4 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
builtin_interfaces__msg__Time__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {builtin_interfaces__msg__Time__TYPE_NAME, 27, 27},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 245, 245},
  };
  return &source;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <builtin_interfaces__msg__Time__get_individual_type_description_source+0x18>)
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	08022a20 	.word	0x08022a20

08001ee0 <builtin_interfaces__msg__Time__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
builtin_interfaces__msg__Time__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <builtin_interfaces__msg__Time__get_type_description_sources+0x40>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00f      	beq.n	8001f16 <builtin_interfaces__msg__Time__get_type_description_sources+0x36>
    sources[0] = *builtin_interfaces__msg__Time__get_individual_type_description_source(NULL),
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff ffe4 	bl	8001ec4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <builtin_interfaces__msg__Time__get_type_description_sources+0x44>)
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	6023      	str	r3, [r4, #0]
    constructed = true;
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <builtin_interfaces__msg__Time__get_type_description_sources+0x40>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <builtin_interfaces__msg__Time__get_type_description_sources+0x48>)
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	20002a55 	.word	0x20002a55
 8001f24:	20002a58 	.word	0x20002a58
 8001f28:	08022a44 	.word	0x08022a44

08001f2c <builtin_interfaces__msg__Time__init>:
#include "rcutils/allocator.h"


bool
builtin_interfaces__msg__Time__init(builtin_interfaces__msg__Time * msg)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <builtin_interfaces__msg__Time__init+0x12>
    return false;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <builtin_interfaces__msg__Time__init+0x14>
  }
  // sec
  // nanosec
  return true;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <builtin_interfaces__msg__Time__fini>:

void
builtin_interfaces__msg__Time__fini(builtin_interfaces__msg__Time * msg)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
    return;
  }
  // sec
  // nanosec
}
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
{
#endif

void builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  builtin_interfaces__msg__Time__init(message_memory);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffdc 	bl	8001f2c <builtin_interfaces__msg__Time__init>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:

void builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function(void * message_memory)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  builtin_interfaces__msg__Time__fini(message_memory);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe1 	bl	8001f4c <builtin_interfaces__msg__Time__fini>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
  &builtin_interfaces__msg__Time__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_builtin_interfaces
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, builtin_interfaces, msg, Time)() {
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  if (!builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_message_type_support_handle.typesupport_identifier) {
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x20>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>
    builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_message_type_support_handle.typesupport_identifier =
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x24>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a03      	ldr	r2, [pc, #12]	@ (8001fb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_message_type_support_handle;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x20>)
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	20000268 	.word	0x20000268
 8001fb8:	2000248c 	.word	0x2000248c

08001fbc <geometry_msgs__msg__Point__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Point__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
      0x69, 0x63, 0x08, 0x48, 0x42, 0xa9, 0xb0, 0x44,
      0x94, 0xd6, 0xb2, 0x94, 0x1d, 0x11, 0x44, 0x47,
      0x08, 0xd8, 0x92, 0xda, 0x2f, 0x4b, 0x09, 0x84,
      0x3b, 0x9c, 0x43, 0xf4, 0x2a, 0x7f, 0x68, 0x81,
    }};
  return &hash;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <geometry_msgs__msg__Point__get_type_hash+0x18>)
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200003d8 	.word	0x200003d8

08001fd8 <geometry_msgs__msg__Point__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Point__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Point__TYPE_NAME, 23, 23},
      {geometry_msgs__msg__Point__FIELDS, 3, 3},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <geometry_msgs__msg__Point__get_type_description+0x2c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <geometry_msgs__msg__Point__get_type_description+0x1c>
    constructed = true;
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <geometry_msgs__msg__Point__get_type_description+0x2c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <geometry_msgs__msg__Point__get_type_description+0x30>)
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20002a7c 	.word	0x20002a7c
 8002008:	08022a6c 	.word	0x08022a6c

0800200c <geometry_msgs__msg__Point__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Point__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Point__TYPE_NAME, 23, 23},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 84, 84},
  };
  return &source;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <geometry_msgs__msg__Point__get_individual_type_description_source+0x18>)
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	08022a90 	.word	0x08022a90

08002028 <geometry_msgs__msg__Point__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Point__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <geometry_msgs__msg__Point__get_type_description_sources+0x40>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00f      	beq.n	800205e <geometry_msgs__msg__Point__get_type_description_sources+0x36>
    sources[0] = *geometry_msgs__msg__Point__get_individual_type_description_source(NULL),
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff ffe4 	bl	800200c <geometry_msgs__msg__Point__get_individual_type_description_source>
 8002044:	4603      	mov	r3, r0
 8002046:	4a09      	ldr	r2, [pc, #36]	@ (800206c <geometry_msgs__msg__Point__get_type_description_sources+0x44>)
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002058:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <geometry_msgs__msg__Point__get_type_description_sources+0x40>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <geometry_msgs__msg__Point__get_type_description_sources+0x48>)
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	20002a7d 	.word	0x20002a7d
 800206c:	20002a80 	.word	0x20002a80
 8002070:	08022ab4 	.word	0x08022ab4

08002074 <geometry_msgs__msg__Point__init>:
#include "rcutils/allocator.h"


bool
geometry_msgs__msg__Point__init(geometry_msgs__msg__Point * msg)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if (!msg) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <geometry_msgs__msg__Point__init+0x12>
    return false;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <geometry_msgs__msg__Point__init+0x14>
  }
  // x
  // y
  // z
  return true;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <geometry_msgs__msg__Point__fini>:

void
geometry_msgs__msg__Point__fini(geometry_msgs__msg__Point * msg)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (!msg) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
    return;
  }
  // x
  // y
  // z
}
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
{
#endif

void geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Point__init(message_memory);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffdc 	bl	8002074 <geometry_msgs__msg__Point__init>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:

void geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function(void * message_memory)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Point__fini(message_memory);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe1 	bl	8002094 <geometry_msgs__msg__Point__fini>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
  &geometry_msgs__msg__Point__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Point)() {
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  if (!geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_message_type_support_handle.typesupport_identifier) {
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x20>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>
    geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_message_type_support_handle.typesupport_identifier =
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x24>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a03      	ldr	r2, [pc, #12]	@ (80020fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x20>)
 80020ee:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_message_type_support_handle;
 80020f0:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x20>)
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200004b0 	.word	0x200004b0
 8002100:	2000248c 	.word	0x2000248c

08002104 <geometry_msgs__msg__Pose__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Pose__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
      0xd5, 0x01, 0x95, 0x4e, 0x94, 0x76, 0xce, 0xa2,
      0x99, 0x69, 0x84, 0xe8, 0x12, 0x05, 0x4b, 0x68,
      0x02, 0x6a, 0xe0, 0xbf, 0xae, 0x78, 0x9d, 0x9a,
      0x10, 0xb2, 0x3d, 0xaf, 0x35, 0xcc, 0x90, 0xfa,
    }};
  return &hash;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <geometry_msgs__msg__Pose__get_type_hash+0x18>)
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000066c 	.word	0x2000066c

08002120 <geometry_msgs__msg__Pose__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Pose__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Pose__TYPE_NAME, 22, 22},
      {geometry_msgs__msg__Pose__FIELDS, 2, 2},
    },
    {geometry_msgs__msg__Pose__REFERENCED_TYPE_DESCRIPTIONS, 2, 2},
  };
  if (!constructed) {
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <geometry_msgs__msg__Pose__get_type_description+0x9c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03d      	beq.n	80021b2 <geometry_msgs__msg__Pose__get_type_description+0x92>
    assert(0 == memcmp(&geometry_msgs__msg__Point__EXPECTED_HASH, geometry_msgs__msg__Point__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff ff40 	bl	8001fbc <geometry_msgs__msg__Point__get_type_hash>
 800213c:	4603      	mov	r3, r0
 800213e:	2221      	movs	r2, #33	@ 0x21
 8002140:	4619      	mov	r1, r3
 8002142:	481f      	ldr	r0, [pc, #124]	@ (80021c0 <geometry_msgs__msg__Pose__get_type_description+0xa0>)
 8002144:	f01b f988 	bl	801d458 <memcmp>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <geometry_msgs__msg__Pose__get_type_description+0x3a>
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <geometry_msgs__msg__Pose__get_type_description+0xa4>)
 8002150:	4a1d      	ldr	r2, [pc, #116]	@ (80021c8 <geometry_msgs__msg__Pose__get_type_description+0xa8>)
 8002152:	2165      	movs	r1, #101	@ 0x65
 8002154:	481d      	ldr	r0, [pc, #116]	@ (80021cc <geometry_msgs__msg__Pose__get_type_description+0xac>)
 8002156:	f019 ffb9 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[0].fields = geometry_msgs__msg__Point__get_type_description(NULL)->type_description.fields;
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff ff3c 	bl	8001fd8 <geometry_msgs__msg__Point__get_type_description>
 8002160:	4602      	mov	r2, r0
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <geometry_msgs__msg__Pose__get_type_description+0xb0>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	330c      	adds	r3, #12
 8002168:	320c      	adds	r2, #12
 800216a:	ca07      	ldmia	r2, {r0, r1, r2}
 800216c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Quaternion__EXPECTED_HASH, geometry_msgs__msg__Quaternion__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002170:	2000      	movs	r0, #0
 8002172:	f000 fa9f 	bl	80026b4 <geometry_msgs__msg__Quaternion__get_type_hash>
 8002176:	4603      	mov	r3, r0
 8002178:	2221      	movs	r2, #33	@ 0x21
 800217a:	4619      	mov	r1, r3
 800217c:	4815      	ldr	r0, [pc, #84]	@ (80021d4 <geometry_msgs__msg__Pose__get_type_description+0xb4>)
 800217e:	f01b f96b 	bl	801d458 <memcmp>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <geometry_msgs__msg__Pose__get_type_description+0x74>
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <geometry_msgs__msg__Pose__get_type_description+0xb8>)
 800218a:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <geometry_msgs__msg__Pose__get_type_description+0xa8>)
 800218c:	2167      	movs	r1, #103	@ 0x67
 800218e:	480f      	ldr	r0, [pc, #60]	@ (80021cc <geometry_msgs__msg__Pose__get_type_description+0xac>)
 8002190:	f019 ff9c 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[1].fields = geometry_msgs__msg__Quaternion__get_type_description(NULL)->type_description.fields;
 8002194:	2000      	movs	r0, #0
 8002196:	f000 fa9b 	bl	80026d0 <geometry_msgs__msg__Quaternion__get_type_description>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <geometry_msgs__msg__Pose__get_type_description+0xb0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	3318      	adds	r3, #24
 80021a2:	330c      	adds	r3, #12
 80021a4:	320c      	adds	r2, #12
 80021a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <geometry_msgs__msg__Pose__get_type_description+0x9c>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <geometry_msgs__msg__Pose__get_type_description+0xb0>)
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20002aa4 	.word	0x20002aa4
 80021c0:	08022adc 	.word	0x08022adc
 80021c4:	0802122c 	.word	0x0802122c
 80021c8:	08022b24 	.word	0x08022b24
 80021cc:	080212b0 	.word	0x080212b0
 80021d0:	08022b54 	.word	0x08022b54
 80021d4:	08022b00 	.word	0x08022b00
 80021d8:	080212f4 	.word	0x080212f4

080021dc <geometry_msgs__msg__Pose__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Pose__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Pose__TYPE_NAME, 22, 22},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 119, 119},
  };
  return &source;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <geometry_msgs__msg__Pose__get_individual_type_description_source+0x18>)
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	08022b78 	.word	0x08022b78

080021f8 <geometry_msgs__msg__Pose__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Pose__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[3];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 3, 3};
  static bool constructed = false;
  if (!constructed) {
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <geometry_msgs__msg__Pose__get_type_description_sources+0x78>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02b      	beq.n	8002266 <geometry_msgs__msg__Pose__get_type_description_sources+0x6e>
    sources[0] = *geometry_msgs__msg__Pose__get_individual_type_description_source(NULL),
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff ffe4 	bl	80021dc <geometry_msgs__msg__Pose__get_individual_type_description_source>
 8002214:	4603      	mov	r3, r0
 8002216:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <geometry_msgs__msg__Pose__get_type_description_sources+0x7c>)
 8002218:	4614      	mov	r4, r2
 800221a:	461d      	mov	r5, r3
 800221c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800221e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	6023      	str	r3, [r4, #0]
    sources[1] = *geometry_msgs__msg__Point__get_individual_type_description_source(NULL);
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff feef 	bl	800200c <geometry_msgs__msg__Point__get_individual_type_description_source>
 800222e:	4602      	mov	r2, r0
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <geometry_msgs__msg__Pose__get_type_description_sources+0x7c>)
 8002232:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002236:	4615      	mov	r5, r2
 8002238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	6023      	str	r3, [r4, #0]
    sources[2] = *geometry_msgs__msg__Quaternion__get_individual_type_description_source(NULL);
 8002244:	2000      	movs	r0, #0
 8002246:	f000 fa5d 	bl	8002704 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 800224a:	4602      	mov	r2, r0
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <geometry_msgs__msg__Pose__get_type_description_sources+0x7c>)
 800224e:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8002252:	4615      	mov	r5, r2
 8002254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <geometry_msgs__msg__Pose__get_type_description_sources+0x78>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8002266:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <geometry_msgs__msg__Pose__get_type_description_sources+0x80>)
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bdb0      	pop	{r4, r5, r7, pc}
 8002270:	20002aa5 	.word	0x20002aa5
 8002274:	20002aa8 	.word	0x20002aa8
 8002278:	08022b9c 	.word	0x08022b9c

0800227c <geometry_msgs__msg__Pose__init>:
// Member `orientation`
#include "geometry_msgs/msg/detail/quaternion__functions.h"

bool
geometry_msgs__msg__Pose__init(geometry_msgs__msg__Pose * msg)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <geometry_msgs__msg__Pose__init+0x12>
    return false;
 800228a:	2300      	movs	r3, #0
 800228c:	e01f      	b.n	80022ce <geometry_msgs__msg__Pose__init+0x52>
  }
  // position
  if (!geometry_msgs__msg__Point__init(&msg->position)) {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff feef 	bl	8002074 <geometry_msgs__msg__Point__init>
 8002296:	4603      	mov	r3, r0
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <geometry_msgs__msg__Pose__init+0x30>
    geometry_msgs__msg__Pose__fini(msg);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f817 	bl	80022d6 <geometry_msgs__msg__Pose__fini>
    return false;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e010      	b.n	80022ce <geometry_msgs__msg__Pose__init+0x52>
  }
  // orientation
  if (!geometry_msgs__msg__Quaternion__init(&msg->orientation)) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3318      	adds	r3, #24
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fa5b 	bl	800276c <geometry_msgs__msg__Quaternion__init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <geometry_msgs__msg__Pose__init+0x50>
    geometry_msgs__msg__Pose__fini(msg);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f807 	bl	80022d6 <geometry_msgs__msg__Pose__fini>
    return false;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <geometry_msgs__msg__Pose__init+0x52>
  }
  return true;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <geometry_msgs__msg__Pose__fini>:

void
geometry_msgs__msg__Pose__fini(geometry_msgs__msg__Pose * msg)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <geometry_msgs__msg__Pose__fini+0x22>
    return;
  }
  // position
  geometry_msgs__msg__Point__fini(&msg->position);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fed4 	bl	8002094 <geometry_msgs__msg__Point__fini>
  // orientation
  geometry_msgs__msg__Quaternion__fini(&msg->orientation);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3318      	adds	r3, #24
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fa69 	bl	80027c8 <geometry_msgs__msg__Quaternion__fini>
 80022f6:	e000      	b.n	80022fa <geometry_msgs__msg__Pose__fini+0x24>
    return;
 80022f8:	bf00      	nop
}
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
{
#endif

void geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Pose__init(message_memory);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ffb5 	bl	800227c <geometry_msgs__msg__Pose__init>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:

void geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function(void * message_memory)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Pose__fini(message_memory);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffd7 	bl	80022d6 <geometry_msgs__msg__Pose__fini>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
  &geometry_msgs__msg__Pose__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Pose)() {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Point)();
 8002334:	f7ff fed2 	bl	80020dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8002338:	4603      	mov	r3, r0
  geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_member_array[0].members_ =
 800233a:	4a09      	ldr	r2, [pc, #36]	@ (8002360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x30>)
 800233c:	60d3      	str	r3, [r2, #12]
  geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_member_array[1].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Quaternion)();
 800233e:	f000 fa67 	bl	8002810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8002342:	4603      	mov	r3, r0
  geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_member_array[1].members_ =
 8002344:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x30>)
 8002346:	6493      	str	r3, [r2, #72]	@ 0x48
  if (!geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_type_support_handle.typesupport_identifier) {
 8002348:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>
    geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_type_support_handle.typesupport_identifier =
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x38>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a03      	ldr	r2, [pc, #12]	@ (8002364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x34>)
 8002356:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_message_type_support_handle;
 8002358:	4b02      	ldr	r3, [pc, #8]	@ (8002364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x34>)
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000690 	.word	0x20000690
 8002364:	20000708 	.word	0x20000708
 8002368:	2000248c 	.word	0x2000248c

0800236c <geometry_msgs__msg__PoseWithCovariance__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__PoseWithCovariance__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
      0x9a, 0x7c, 0x0f, 0xd2, 0x34, 0xb7, 0xf4, 0x5c,
      0x60, 0x98, 0x74, 0x5e, 0xcc, 0xcd, 0x77, 0x3c,
      0xa1, 0x08, 0x56, 0x70, 0xe6, 0x41, 0x07, 0x13,
      0x53, 0x97, 0xae, 0xe3, 0x1c, 0x02, 0xe1, 0xbb,
    }};
  return &hash;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <geometry_msgs__msg__PoseWithCovariance__get_type_hash+0x18>)
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200009d0 	.word	0x200009d0

08002388 <geometry_msgs__msg__PoseWithCovariance__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__PoseWithCovariance__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__PoseWithCovariance__TYPE_NAME, 36, 36},
      {geometry_msgs__msg__PoseWithCovariance__FIELDS, 2, 2},
    },
    {geometry_msgs__msg__PoseWithCovariance__REFERENCED_TYPE_DESCRIPTIONS, 3, 3},
  };
  if (!constructed) {
 8002390:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xd8>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d05b      	beq.n	8002456 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xce>
    assert(0 == memcmp(&geometry_msgs__msg__Point__EXPECTED_HASH, geometry_msgs__msg__Point__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff fe0c 	bl	8001fbc <geometry_msgs__msg__Point__get_type_hash>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2221      	movs	r2, #33	@ 0x21
 80023a8:	4619      	mov	r1, r3
 80023aa:	482e      	ldr	r0, [pc, #184]	@ (8002464 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xdc>)
 80023ac:	f01b f854 	bl	801d458 <memcmp>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x3a>
 80023b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe0>)
 80023b8:	4a2c      	ldr	r2, [pc, #176]	@ (800246c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe4>)
 80023ba:	2171      	movs	r1, #113	@ 0x71
 80023bc:	482c      	ldr	r0, [pc, #176]	@ (8002470 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe8>)
 80023be:	f019 fe85 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[0].fields = geometry_msgs__msg__Point__get_type_description(NULL)->type_description.fields;
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fe08 	bl	8001fd8 <geometry_msgs__msg__Point__get_type_description>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xec>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	330c      	adds	r3, #12
 80023d0:	320c      	adds	r2, #12
 80023d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Pose__EXPECTED_HASH, geometry_msgs__msg__Pose__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff fe93 	bl	8002104 <geometry_msgs__msg__Pose__get_type_hash>
 80023de:	4603      	mov	r3, r0
 80023e0:	2221      	movs	r2, #33	@ 0x21
 80023e2:	4619      	mov	r1, r3
 80023e4:	4824      	ldr	r0, [pc, #144]	@ (8002478 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xf0>)
 80023e6:	f01b f837 	bl	801d458 <memcmp>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x74>
 80023f0:	4b22      	ldr	r3, [pc, #136]	@ (800247c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xf4>)
 80023f2:	4a1e      	ldr	r2, [pc, #120]	@ (800246c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe4>)
 80023f4:	2173      	movs	r1, #115	@ 0x73
 80023f6:	481e      	ldr	r0, [pc, #120]	@ (8002470 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe8>)
 80023f8:	f019 fe68 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[1].fields = geometry_msgs__msg__Pose__get_type_description(NULL)->type_description.fields;
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fe8f 	bl	8002120 <geometry_msgs__msg__Pose__get_type_description>
 8002402:	4602      	mov	r2, r0
 8002404:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xec>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	3318      	adds	r3, #24
 800240a:	330c      	adds	r3, #12
 800240c:	320c      	adds	r2, #12
 800240e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Quaternion__EXPECTED_HASH, geometry_msgs__msg__Quaternion__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002414:	2000      	movs	r0, #0
 8002416:	f000 f94d 	bl	80026b4 <geometry_msgs__msg__Quaternion__get_type_hash>
 800241a:	4603      	mov	r3, r0
 800241c:	2221      	movs	r2, #33	@ 0x21
 800241e:	4619      	mov	r1, r3
 8002420:	4817      	ldr	r0, [pc, #92]	@ (8002480 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xf8>)
 8002422:	f01b f819 	bl	801d458 <memcmp>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xb0>
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xfc>)
 800242e:	4a0f      	ldr	r2, [pc, #60]	@ (800246c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe4>)
 8002430:	2175      	movs	r1, #117	@ 0x75
 8002432:	480f      	ldr	r0, [pc, #60]	@ (8002470 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xe8>)
 8002434:	f019 fe4a 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[2].fields = geometry_msgs__msg__Quaternion__get_type_description(NULL)->type_description.fields;
 8002438:	2000      	movs	r0, #0
 800243a:	f000 f949 	bl	80026d0 <geometry_msgs__msg__Quaternion__get_type_description>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xec>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	3330      	adds	r3, #48	@ 0x30
 8002446:	330c      	adds	r3, #12
 8002448:	320c      	adds	r2, #12
 800244a:	ca07      	ldmia	r2, {r0, r1, r2}
 800244c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xd8>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8002456:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xec>)
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20002b14 	.word	0x20002b14
 8002464:	08022bc4 	.word	0x08022bc4
 8002468:	080213b8 	.word	0x080213b8
 800246c:	08022c30 	.word	0x08022c30
 8002470:	0802143c 	.word	0x0802143c
 8002474:	08022c70 	.word	0x08022c70
 8002478:	08022be8 	.word	0x08022be8
 800247c:	08021490 	.word	0x08021490
 8002480:	08022c0c 	.word	0x08022c0c
 8002484:	08021514 	.word	0x08021514

08002488 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__PoseWithCovariance__TYPE_NAME, 36, 36},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 323, 323},
  };
  return &source;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source+0x18>)
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	08022c94 	.word	0x08022c94

080024a4 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__PoseWithCovariance__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[4];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 4, 4};
  static bool constructed = false;
  if (!constructed) {
 80024ac:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x94>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d039      	beq.n	800252e <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x8a>
    sources[0] = *geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source(NULL),
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff ffe4 	bl	8002488 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x98>)
 80024c4:	4614      	mov	r4, r2
 80024c6:	461d      	mov	r5, r3
 80024c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	682b      	ldr	r3, [r5, #0]
 80024d2:	6023      	str	r3, [r4, #0]
    sources[1] = *geometry_msgs__msg__Point__get_individual_type_description_source(NULL);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7ff fd99 	bl	800200c <geometry_msgs__msg__Point__get_individual_type_description_source>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x98>)
 80024de:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80024e2:	4615      	mov	r5, r2
 80024e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6023      	str	r3, [r4, #0]
    sources[2] = *geometry_msgs__msg__Pose__get_individual_type_description_source(NULL);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fe73 	bl	80021dc <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x98>)
 80024fa:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80024fe:	4615      	mov	r5, r2
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	6023      	str	r3, [r4, #0]
    sources[3] = *geometry_msgs__msg__Quaternion__get_individual_type_description_source(NULL);
 800250c:	2000      	movs	r0, #0
 800250e:	f000 f8f9 	bl	8002704 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8002512:	4602      	mov	r2, r0
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x98>)
 8002516:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800251a:	4615      	mov	r5, r2
 800251c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x94>)
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 800252e:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x9c>)
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bdb0      	pop	{r4, r5, r7, pc}
 8002538:	20002b15 	.word	0x20002b15
 800253c:	20002b18 	.word	0x20002b18
 8002540:	08022cb8 	.word	0x08022cb8

08002544 <geometry_msgs__msg__PoseWithCovariance__init>:
// Member `pose`
#include "geometry_msgs/msg/detail/pose__functions.h"

bool
geometry_msgs__msg__PoseWithCovariance__init(geometry_msgs__msg__PoseWithCovariance * msg)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (!msg) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
    return false;
 8002552:	2300      	movs	r3, #0
 8002554:	e00f      	b.n	8002576 <geometry_msgs__msg__PoseWithCovariance__init+0x32>
  }
  // pose
  if (!geometry_msgs__msg__Pose__init(&msg->pose)) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe8f 	bl	800227c <geometry_msgs__msg__Pose__init>
 800255e:	4603      	mov	r3, r0
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <geometry_msgs__msg__PoseWithCovariance__init+0x30>
    geometry_msgs__msg__PoseWithCovariance__fini(msg);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f807 	bl	800257e <geometry_msgs__msg__PoseWithCovariance__fini>
    return false;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <geometry_msgs__msg__PoseWithCovariance__init+0x32>
  }
  // covariance
  return true;
 8002574:	2301      	movs	r3, #1
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <geometry_msgs__msg__PoseWithCovariance__fini>:

void
geometry_msgs__msg__PoseWithCovariance__fini(geometry_msgs__msg__PoseWithCovariance * msg)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <geometry_msgs__msg__PoseWithCovariance__fini+0x18>
    return;
  }
  // pose
  geometry_msgs__msg__Pose__fini(&msg->pose);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fea1 	bl	80022d6 <geometry_msgs__msg__Pose__fini>
 8002594:	e000      	b.n	8002598 <geometry_msgs__msg__PoseWithCovariance__fini+0x1a>
    return;
 8002596:	bf00      	nop
  // covariance
}
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
{
#endif

void geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__PoseWithCovariance__init(message_memory);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffca 	bl	8002544 <geometry_msgs__msg__PoseWithCovariance__init>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:

void geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function(void * message_memory)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__PoseWithCovariance__fini(message_memory);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffdc 	bl	800257e <geometry_msgs__msg__PoseWithCovariance__fini>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:

size_t geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance(
  const void * untyped_member)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  (void)untyped_member;
  return 36;
 80025d6:	2324      	movs	r3, #36	@ 0x24
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:

const void * geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance(
  const void * untyped_member, size_t index)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  const double * member =
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
    (const double *)(untyped_member);
  return &member[index];
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:

void * geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance(
  void * untyped_member, size_t index)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  double * member =
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60fb      	str	r3, [r7, #12]
    (double *)(untyped_member);
  return &member[index];
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4413      	add	r3, r2
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:

void geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance(
  const void * untyped_member, size_t index, void * untyped_value)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  const double * item =
    ((const double *)
    geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance(untyped_member, index));
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ffd4 	bl	80025e4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>
 800263c:	6178      	str	r0, [r7, #20]
  double * value =
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	613b      	str	r3, [r7, #16]
    (double *)(untyped_value);
  *value = *item;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	6939      	ldr	r1, [r7, #16]
 800264a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:

void geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance(
  void * untyped_member, size_t index, const void * untyped_value)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  double * item =
    ((double *)
    geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance(untyped_member, index));
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff ffce 	bl	8002606 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>
 800266a:	6178      	str	r0, [r7, #20]
  const double * value =
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	613b      	str	r3, [r7, #16]
    (const double *)(untyped_value);
  *item = *value;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	6979      	ldr	r1, [r7, #20]
 8002678:	e9c1 2300 	strd	r2, r3, [r1]
}
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
  &geometry_msgs__msg__PoseWithCovariance__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, PoseWithCovariance)() {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Pose)();
 8002688:	f7ff fe52 	bl	8002330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800268c:	4603      	mov	r3, r0
  geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_message_member_array[0].members_ =
 800268e:	4a06      	ldr	r2, [pc, #24]	@ (80026a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 8002690:	60d3      	str	r3, [r2, #12]
  if (!geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_message_type_support_handle.typesupport_identifier) {
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x1e>
    geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_message_type_support_handle.typesupport_identifier =
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x2c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a03      	ldr	r2, [pc, #12]	@ (80026ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 80026a0:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_message_type_support_handle;
 80026a2:	4b02      	ldr	r3, [pc, #8]	@ (80026ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200009f4 	.word	0x200009f4
 80026ac:	20000a6c 	.word	0x20000a6c
 80026b0:	2000248c 	.word	0x2000248c

080026b4 <geometry_msgs__msg__Quaternion__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Quaternion__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
      0x8a, 0x76, 0x5f, 0x66, 0x77, 0x8c, 0x8f, 0xf7,
      0xc8, 0xab, 0x94, 0xaf, 0xcc, 0x59, 0x0a, 0x2e,
      0xd5, 0x32, 0x5a, 0x1d, 0x9a, 0x07, 0x6f, 0xff,
      0xf3, 0x8f, 0xbc, 0xe3, 0x6f, 0x45, 0x86, 0x84,
    }};
  return &hash;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <geometry_msgs__msg__Quaternion__get_type_hash+0x18>)
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000c60 	.word	0x20000c60

080026d0 <geometry_msgs__msg__Quaternion__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Quaternion__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Quaternion__TYPE_NAME, 28, 28},
      {geometry_msgs__msg__Quaternion__FIELDS, 4, 4},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <geometry_msgs__msg__Quaternion__get_type_description+0x2c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <geometry_msgs__msg__Quaternion__get_type_description+0x1c>
    constructed = true;
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <geometry_msgs__msg__Quaternion__get_type_description+0x2c>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <geometry_msgs__msg__Quaternion__get_type_description+0x30>)
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20002ba8 	.word	0x20002ba8
 8002700:	08022ce0 	.word	0x08022ce0

08002704 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Quaternion__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Quaternion__TYPE_NAME, 28, 28},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 116, 116},
  };
  return &source;
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x18>)
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	08022d04 	.word	0x08022d04

08002720 <geometry_msgs__msg__Quaternion__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Quaternion__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8002728:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x40>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f083 0301 	eor.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00f      	beq.n	8002756 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x36>
    sources[0] = *geometry_msgs__msg__Quaternion__get_individual_type_description_source(NULL),
 8002736:	2000      	movs	r0, #0
 8002738:	f7ff ffe4 	bl	8002704 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 800273c:	4603      	mov	r3, r0
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x44>)
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x40>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8002756:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x48>)
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bdb0      	pop	{r4, r5, r7, pc}
 8002760:	20002ba9 	.word	0x20002ba9
 8002764:	20002bac 	.word	0x20002bac
 8002768:	08022d28 	.word	0x08022d28

0800276c <geometry_msgs__msg__Quaternion__init>:
#include "rcutils/allocator.h"


bool
geometry_msgs__msg__Quaternion__init(geometry_msgs__msg__Quaternion * msg)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <geometry_msgs__msg__Quaternion__init+0x12>
    return false;
 800277a:	2300      	movs	r3, #0
 800277c:	e01b      	b.n	80027b6 <geometry_msgs__msg__Quaternion__init+0x4a>
  }
  // x
  msg->x = 0.0l;
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9c1 2300 	strd	r2, r3, [r1]
  // y
  msg->y = 0.0l;
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9c1 2302 	strd	r2, r3, [r1, #8]
  // z
  msg->z = 0.0l;
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
  // w
  msg->w = 1.0l;
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <geometry_msgs__msg__Quaternion__init+0x58>)
 80027b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  return true;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	3ff00000 	.word	0x3ff00000

080027c8 <geometry_msgs__msg__Quaternion__fini>:

void
geometry_msgs__msg__Quaternion__fini(geometry_msgs__msg__Quaternion * msg)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
  }
  // x
  // y
  // z
  // w
}
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
{
#endif

void geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Quaternion__init(message_memory);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffbe 	bl	800276c <geometry_msgs__msg__Quaternion__init>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:

void geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function(void * message_memory)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Quaternion__fini(message_memory);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffe1 	bl	80027c8 <geometry_msgs__msg__Quaternion__fini>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
  &geometry_msgs__msg__Quaternion__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Quaternion)() {
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  if (!geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_message_type_support_handle.typesupport_identifier) {
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x20>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>
    geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_message_type_support_handle.typesupport_identifier =
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x24>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a03      	ldr	r2, [pc, #12]	@ (8002830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x20>)
 8002822:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_message_type_support_handle;
 8002824:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x20>)
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20000d74 	.word	0x20000d74
 8002834:	2000248c 	.word	0x2000248c

08002838 <geometry_msgs__msg__Twist__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Twist__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
      0x9c, 0x45, 0xbf, 0x16, 0xfe, 0x09, 0x83, 0xd8,
      0x0e, 0x3c, 0xfe, 0x75, 0x0d, 0x68, 0x35, 0x84,
      0x3d, 0x26, 0x5a, 0x9a, 0x6c, 0x46, 0xbd, 0x2e,
      0x60, 0x9f, 0xcd, 0xdd, 0xe6, 0xfb, 0x8d, 0x2a,
    }};
  return &hash;
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <geometry_msgs__msg__Twist__get_type_hash+0x18>)
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000ef0 	.word	0x20000ef0

08002854 <geometry_msgs__msg__Twist__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Twist__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Twist__TYPE_NAME, 23, 23},
      {geometry_msgs__msg__Twist__FIELDS, 2, 2},
    },
    {geometry_msgs__msg__Twist__REFERENCED_TYPE_DESCRIPTIONS, 1, 1},
  };
  if (!constructed) {
 800285c:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <geometry_msgs__msg__Twist__get_type_description+0x60>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01f      	beq.n	80028aa <geometry_msgs__msg__Twist__get_type_description+0x56>
    assert(0 == memcmp(&geometry_msgs__msg__Vector3__EXPECTED_HASH, geometry_msgs__msg__Vector3__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 800286a:	2000      	movs	r0, #0
 800286c:	f000 fa5c 	bl	8002d28 <geometry_msgs__msg__Vector3__get_type_hash>
 8002870:	4603      	mov	r3, r0
 8002872:	2221      	movs	r2, #33	@ 0x21
 8002874:	4619      	mov	r1, r3
 8002876:	4810      	ldr	r0, [pc, #64]	@ (80028b8 <geometry_msgs__msg__Twist__get_type_description+0x64>)
 8002878:	f01a fdee 	bl	801d458 <memcmp>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <geometry_msgs__msg__Twist__get_type_description+0x3a>
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <geometry_msgs__msg__Twist__get_type_description+0x68>)
 8002884:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <geometry_msgs__msg__Twist__get_type_description+0x6c>)
 8002886:	2159      	movs	r1, #89	@ 0x59
 8002888:	480e      	ldr	r0, [pc, #56]	@ (80028c4 <geometry_msgs__msg__Twist__get_type_description+0x70>)
 800288a:	f019 fc1f 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[0].fields = geometry_msgs__msg__Vector3__get_type_description(NULL)->type_description.fields;
 800288e:	2000      	movs	r0, #0
 8002890:	f000 fa58 	bl	8002d44 <geometry_msgs__msg__Vector3__get_type_description>
 8002894:	4602      	mov	r2, r0
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <geometry_msgs__msg__Twist__get_type_description+0x74>)
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	330c      	adds	r3, #12
 800289c:	320c      	adds	r2, #12
 800289e:	ca07      	ldmia	r2, {r0, r1, r2}
 80028a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 80028a4:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <geometry_msgs__msg__Twist__get_type_description+0x60>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <geometry_msgs__msg__Twist__get_type_description+0x74>)
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20002bd0 	.word	0x20002bd0
 80028b8:	08022d50 	.word	0x08022d50
 80028bc:	08021610 	.word	0x08021610
 80028c0:	08022d74 	.word	0x08022d74
 80028c4:	08021698 	.word	0x08021698
 80028c8:	08022da4 	.word	0x08022da4

080028cc <geometry_msgs__msg__Twist__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Twist__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Twist__TYPE_NAME, 23, 23},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 116, 116},
  };
  return &source;
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <geometry_msgs__msg__Twist__get_individual_type_description_source+0x18>)
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	08022dc8 	.word	0x08022dc8

080028e8 <geometry_msgs__msg__Twist__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Twist__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[2];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 2, 2};
  static bool constructed = false;
  if (!constructed) {
 80028f0:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <geometry_msgs__msg__Twist__get_type_description_sources+0x5c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01d      	beq.n	800293a <geometry_msgs__msg__Twist__get_type_description_sources+0x52>
    sources[0] = *geometry_msgs__msg__Twist__get_individual_type_description_source(NULL),
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff ffe4 	bl	80028cc <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8002904:	4603      	mov	r3, r0
 8002906:	4a10      	ldr	r2, [pc, #64]	@ (8002948 <geometry_msgs__msg__Twist__get_type_description_sources+0x60>)
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	6023      	str	r3, [r4, #0]
    sources[1] = *geometry_msgs__msg__Vector3__get_individual_type_description_source(NULL);
 8002918:	2000      	movs	r0, #0
 800291a:	f000 fa2d 	bl	8002d78 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800291e:	4602      	mov	r2, r0
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <geometry_msgs__msg__Twist__get_type_description_sources+0x60>)
 8002922:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002926:	4615      	mov	r5, r2
 8002928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002934:	4b03      	ldr	r3, [pc, #12]	@ (8002944 <geometry_msgs__msg__Twist__get_type_description_sources+0x5c>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <geometry_msgs__msg__Twist__get_type_description_sources+0x64>)
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bdb0      	pop	{r4, r5, r7, pc}
 8002944:	20002bd1 	.word	0x20002bd1
 8002948:	20002bd4 	.word	0x20002bd4
 800294c:	08022dec 	.word	0x08022dec

08002950 <geometry_msgs__msg__Twist__init>:
// Member `angular`
#include "geometry_msgs/msg/detail/vector3__functions.h"

bool
geometry_msgs__msg__Twist__init(geometry_msgs__msg__Twist * msg)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <geometry_msgs__msg__Twist__init+0x12>
    return false;
 800295e:	2300      	movs	r3, #0
 8002960:	e01f      	b.n	80029a2 <geometry_msgs__msg__Twist__init+0x52>
  }
  // linear
  if (!geometry_msgs__msg__Vector3__init(&msg->linear)) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fa3b 	bl	8002de0 <geometry_msgs__msg__Vector3__init>
 800296a:	4603      	mov	r3, r0
 800296c:	f083 0301 	eor.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <geometry_msgs__msg__Twist__init+0x30>
    geometry_msgs__msg__Twist__fini(msg);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f817 	bl	80029aa <geometry_msgs__msg__Twist__fini>
    return false;
 800297c:	2300      	movs	r3, #0
 800297e:	e010      	b.n	80029a2 <geometry_msgs__msg__Twist__init+0x52>
  }
  // angular
  if (!geometry_msgs__msg__Vector3__init(&msg->angular)) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3318      	adds	r3, #24
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fa2b 	bl	8002de0 <geometry_msgs__msg__Vector3__init>
 800298a:	4603      	mov	r3, r0
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <geometry_msgs__msg__Twist__init+0x50>
    geometry_msgs__msg__Twist__fini(msg);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f807 	bl	80029aa <geometry_msgs__msg__Twist__fini>
    return false;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <geometry_msgs__msg__Twist__init+0x52>
  }
  return true;
 80029a0:	2301      	movs	r3, #1
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <geometry_msgs__msg__Twist__fini>:

void
geometry_msgs__msg__Twist__fini(geometry_msgs__msg__Twist * msg)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <geometry_msgs__msg__Twist__fini+0x22>
    return;
  }
  // linear
  geometry_msgs__msg__Vector3__fini(&msg->linear);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fa20 	bl	8002e00 <geometry_msgs__msg__Vector3__fini>
  // angular
  geometry_msgs__msg__Vector3__fini(&msg->angular);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3318      	adds	r3, #24
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fa1b 	bl	8002e00 <geometry_msgs__msg__Vector3__fini>
 80029ca:	e000      	b.n	80029ce <geometry_msgs__msg__Twist__fini+0x24>
    return;
 80029cc:	bf00      	nop
}
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
{
#endif

void geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Twist__init(message_memory);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffb5 	bl	8002950 <geometry_msgs__msg__Twist__init>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:

void geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function(void * message_memory)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Twist__fini(message_memory);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffd7 	bl	80029aa <geometry_msgs__msg__Twist__fini>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
  &geometry_msgs__msg__Twist__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Twist)() {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Vector3)();
 8002a08:	f000 fa1e 	bl	8002e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8002a0c:	4603      	mov	r3, r0
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[0].members_ =
 8002a0e:	4a09      	ldr	r2, [pc, #36]	@ (8002a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x30>)
 8002a10:	60d3      	str	r3, [r2, #12]
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[1].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Vector3)();
 8002a12:	f000 fa19 	bl	8002e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8002a16:	4603      	mov	r3, r0
  geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_member_array[1].members_ =
 8002a18:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x30>)
 8002a1a:	6493      	str	r3, [r2, #72]	@ 0x48
  if (!geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_type_support_handle.typesupport_identifier) {
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x34>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>
    geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_type_support_handle.typesupport_identifier =
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x38>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a03      	ldr	r2, [pc, #12]	@ (8002a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x34>)
 8002a2a:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_message_type_support_handle;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	@ (8002a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x34>)
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000f14 	.word	0x20000f14
 8002a38:	20000f8c 	.word	0x20000f8c
 8002a3c:	2000248c 	.word	0x2000248c

08002a40 <geometry_msgs__msg__TwistWithCovariance__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__TwistWithCovariance__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
      0x49, 0xf5, 0x74, 0xf0, 0x33, 0xf0, 0x95, 0xd8,
      0xb6, 0xcd, 0x1b, 0xea, 0xca, 0x5c, 0xa7, 0x92,
      0x5e, 0x29, 0x6e, 0x84, 0xaf, 0x17, 0x16, 0xd1,
      0x6c, 0x89, 0xd3, 0x8b, 0x05, 0x9c, 0x8c, 0x18,
    }};
  return &hash;
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <geometry_msgs__msg__TwistWithCovariance__get_type_hash+0x18>)
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20001224 	.word	0x20001224

08002a5c <geometry_msgs__msg__TwistWithCovariance__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__TwistWithCovariance__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__TwistWithCovariance__TYPE_NAME, 37, 37},
      {geometry_msgs__msg__TwistWithCovariance__FIELDS, 2, 2},
    },
    {geometry_msgs__msg__TwistWithCovariance__REFERENCED_TYPE_DESCRIPTIONS, 2, 2},
  };
  if (!constructed) {
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x9c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f083 0301 	eor.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03d      	beq.n	8002aee <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x92>
    assert(0 == memcmp(&geometry_msgs__msg__Twist__EXPECTED_HASH, geometry_msgs__msg__Twist__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff fee0 	bl	8002838 <geometry_msgs__msg__Twist__get_type_hash>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2221      	movs	r2, #33	@ 0x21
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	481f      	ldr	r0, [pc, #124]	@ (8002afc <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xa0>)
 8002a80:	f01a fcea 	bl	801d458 <memcmp>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x3a>
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xa4>)
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b04 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xa8>)
 8002a8e:	2165      	movs	r1, #101	@ 0x65
 8002a90:	481d      	ldr	r0, [pc, #116]	@ (8002b08 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xac>)
 8002a92:	f019 fb1b 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[0].fields = geometry_msgs__msg__Twist__get_type_description(NULL)->type_description.fields;
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7ff fedc 	bl	8002854 <geometry_msgs__msg__Twist__get_type_description>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xb0>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	320c      	adds	r2, #12
 8002aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Vector3__EXPECTED_HASH, geometry_msgs__msg__Vector3__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002aac:	2000      	movs	r0, #0
 8002aae:	f000 f93b 	bl	8002d28 <geometry_msgs__msg__Vector3__get_type_hash>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2221      	movs	r2, #33	@ 0x21
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4815      	ldr	r0, [pc, #84]	@ (8002b10 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xb4>)
 8002aba:	f01a fccd 	bl	801d458 <memcmp>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x74>
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xb8>)
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b04 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xa8>)
 8002ac8:	2167      	movs	r1, #103	@ 0x67
 8002aca:	480f      	ldr	r0, [pc, #60]	@ (8002b08 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xac>)
 8002acc:	f019 fafe 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[1].fields = geometry_msgs__msg__Vector3__get_type_description(NULL)->type_description.fields;
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f000 f937 	bl	8002d44 <geometry_msgs__msg__Vector3__get_type_description>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xb0>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	3318      	adds	r3, #24
 8002ade:	330c      	adds	r3, #12
 8002ae0:	320c      	adds	r2, #12
 8002ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x9c>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xb0>)
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20002c1c 	.word	0x20002c1c
 8002afc:	08022e14 	.word	0x08022e14
 8002b00:	08021708 	.word	0x08021708
 8002b04:	08022e5c 	.word	0x08022e5c
 8002b08:	0802178c 	.word	0x0802178c
 8002b0c:	08022e9c 	.word	0x08022e9c
 8002b10:	08022e38 	.word	0x08022e38
 8002b14:	080217e0 	.word	0x080217e0

08002b18 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__TwistWithCovariance__TYPE_NAME, 37, 37},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 326, 326},
  };
  return &source;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source+0x18>)
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	08022ec0 	.word	0x08022ec0

08002b34 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__TwistWithCovariance__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8002b34:	b5b0      	push	{r4, r5, r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[3];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 3, 3};
  static bool constructed = false;
  if (!constructed) {
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x78>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02b      	beq.n	8002ba2 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x6e>
    sources[0] = *geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source(NULL),
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff ffe4 	bl	8002b18 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x7c>)
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	6023      	str	r3, [r4, #0]
    sources[1] = *geometry_msgs__msg__Twist__get_individual_type_description_source(NULL);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff feb1 	bl	80028cc <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x7c>)
 8002b6e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002b72:	4615      	mov	r5, r2
 8002b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	6023      	str	r3, [r4, #0]
    sources[2] = *geometry_msgs__msg__Vector3__get_individual_type_description_source(NULL);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f000 f8f9 	bl	8002d78 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x7c>)
 8002b8a:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8002b8e:	4615      	mov	r5, r2
 8002b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x78>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x80>)
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bac:	20002c1d 	.word	0x20002c1d
 8002bb0:	20002c20 	.word	0x20002c20
 8002bb4:	08022ee4 	.word	0x08022ee4

08002bb8 <geometry_msgs__msg__TwistWithCovariance__init>:
// Member `twist`
#include "geometry_msgs/msg/detail/twist__functions.h"

bool
geometry_msgs__msg__TwistWithCovariance__init(geometry_msgs__msg__TwistWithCovariance * msg)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <geometry_msgs__msg__TwistWithCovariance__init+0x12>
    return false;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e00f      	b.n	8002bea <geometry_msgs__msg__TwistWithCovariance__init+0x32>
  }
  // twist
  if (!geometry_msgs__msg__Twist__init(&msg->twist)) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff febf 	bl	8002950 <geometry_msgs__msg__Twist__init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f083 0301 	eor.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <geometry_msgs__msg__TwistWithCovariance__init+0x30>
    geometry_msgs__msg__TwistWithCovariance__fini(msg);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f807 	bl	8002bf2 <geometry_msgs__msg__TwistWithCovariance__fini>
    return false;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <geometry_msgs__msg__TwistWithCovariance__init+0x32>
  }
  // covariance
  return true;
 8002be8:	2301      	movs	r3, #1
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <geometry_msgs__msg__TwistWithCovariance__fini>:

void
geometry_msgs__msg__TwistWithCovariance__fini(geometry_msgs__msg__TwistWithCovariance * msg)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <geometry_msgs__msg__TwistWithCovariance__fini+0x18>
    return;
  }
  // twist
  geometry_msgs__msg__Twist__fini(&msg->twist);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fed1 	bl	80029aa <geometry_msgs__msg__Twist__fini>
 8002c08:	e000      	b.n	8002c0c <geometry_msgs__msg__TwistWithCovariance__fini+0x1a>
    return;
 8002c0a:	bf00      	nop
  // covariance
}
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
{
#endif

void geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__TwistWithCovariance__init(message_memory);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffca 	bl	8002bb8 <geometry_msgs__msg__TwistWithCovariance__init>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:

void geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function(void * message_memory)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__TwistWithCovariance__fini(message_memory);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffdc 	bl	8002bf2 <geometry_msgs__msg__TwistWithCovariance__fini>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:

size_t geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance(
  const void * untyped_member)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)untyped_member;
  return 36;
 8002c4a:	2324      	movs	r3, #36	@ 0x24
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:

const void * geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance(
  const void * untyped_member, size_t index)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  const double * member =
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
    (const double *)(untyped_member);
  return &member[index];
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4413      	add	r3, r2
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:

void * geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance(
  void * untyped_member, size_t index)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  double * member =
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	60fb      	str	r3, [r7, #12]
    (double *)(untyped_member);
  return &member[index];
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4413      	add	r3, r2
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:

void geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance(
  const void * untyped_member, size_t index, void * untyped_value)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  const double * item =
    ((const double *)
    geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance(untyped_member, index));
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ffd4 	bl	8002c58 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>
 8002cb0:	6178      	str	r0, [r7, #20]
  double * value =
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	613b      	str	r3, [r7, #16]
    (double *)(untyped_value);
  *value = *item;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	6939      	ldr	r1, [r7, #16]
 8002cbe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:

void geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance(
  void * untyped_member, size_t index, const void * untyped_value)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  double * item =
    ((double *)
    geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance(untyped_member, index));
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff ffce 	bl	8002c7a <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>
 8002cde:	6178      	str	r0, [r7, #20]
  const double * value =
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	613b      	str	r3, [r7, #16]
    (const double *)(untyped_value);
  *item = *value;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
  &geometry_msgs__msg__TwistWithCovariance__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, TwistWithCovariance)() {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Twist)();
 8002cfc:	f7ff fe82 	bl	8002a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002d00:	4603      	mov	r3, r0
  geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_message_member_array[0].members_ =
 8002d02:	4a06      	ldr	r2, [pc, #24]	@ (8002d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 8002d04:	60d3      	str	r3, [r2, #12]
  if (!geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_message_type_support_handle.typesupport_identifier) {
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x1e>
    geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_message_type_support_handle.typesupport_identifier =
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x2c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a03      	ldr	r2, [pc, #12]	@ (8002d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 8002d14:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_message_type_support_handle;
 8002d16:	4b02      	ldr	r3, [pc, #8]	@ (8002d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20001248 	.word	0x20001248
 8002d20:	200012c0 	.word	0x200012c0
 8002d24:	2000248c 	.word	0x2000248c

08002d28 <geometry_msgs__msg__Vector3__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_geometry_msgs
const rosidl_type_hash_t *
geometry_msgs__msg__Vector3__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
      0xcc, 0x12, 0xfe, 0x83, 0xe4, 0xc0, 0x27, 0x19,
      0xf1, 0xce, 0x80, 0x70, 0xbf, 0xd1, 0x4a, 0xec,
      0xd4, 0x0f, 0x75, 0xa9, 0x66, 0x96, 0xa6, 0x7a,
      0x2a, 0x1f, 0x37, 0xf7, 0xdb, 0xb0, 0x76, 0x5d,
    }};
  return &hash;
 8002d30:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <geometry_msgs__msg__Vector3__get_type_hash+0x18>)
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	200014d8 	.word	0x200014d8

08002d44 <geometry_msgs__msg__Vector3__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
geometry_msgs__msg__Vector3__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
      {geometry_msgs__msg__Vector3__TYPE_NAME, 25, 25},
      {geometry_msgs__msg__Vector3__FIELDS, 3, 3},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <geometry_msgs__msg__Vector3__get_type_description+0x2c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <geometry_msgs__msg__Vector3__get_type_description+0x1c>
    constructed = true;
 8002d5a:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <geometry_msgs__msg__Vector3__get_type_description+0x2c>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <geometry_msgs__msg__Vector3__get_type_description+0x30>)
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20002c8c 	.word	0x20002c8c
 8002d74:	08022f0c 	.word	0x08022f0c

08002d78 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
geometry_msgs__msg__Vector3__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {geometry_msgs__msg__Vector3__TYPE_NAME, 25, 25},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 251, 251},
  };
  return &source;
 8002d80:	4b03      	ldr	r3, [pc, #12]	@ (8002d90 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x18>)
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	08022f30 	.word	0x08022f30

08002d94 <geometry_msgs__msg__Vector3__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
geometry_msgs__msg__Vector3__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x40>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00f      	beq.n	8002dca <geometry_msgs__msg__Vector3__get_type_description_sources+0x36>
    sources[0] = *geometry_msgs__msg__Vector3__get_individual_type_description_source(NULL),
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7ff ffe4 	bl	8002d78 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x44>)
 8002db4:	4614      	mov	r4, r2
 8002db6:	461d      	mov	r5, r3
 8002db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	6023      	str	r3, [r4, #0]
    constructed = true;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x40>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8002dca:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <geometry_msgs__msg__Vector3__get_type_description_sources+0x48>)
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd4:	20002c8d 	.word	0x20002c8d
 8002dd8:	20002c90 	.word	0x20002c90
 8002ddc:	08022f54 	.word	0x08022f54

08002de0 <geometry_msgs__msg__Vector3__init>:
#include "rcutils/allocator.h"


bool
geometry_msgs__msg__Vector3__init(geometry_msgs__msg__Vector3 * msg)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <geometry_msgs__msg__Vector3__init+0x12>
    return false;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <geometry_msgs__msg__Vector3__init+0x14>
  }
  // x
  // y
  // z
  return true;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <geometry_msgs__msg__Vector3__fini>:

void
geometry_msgs__msg__Vector3__fini(geometry_msgs__msg__Vector3 * msg)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
    return;
  }
  // x
  // y
  // z
}
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
{
#endif

void geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  geometry_msgs__msg__Vector3__init(message_memory);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ffdc 	bl	8002de0 <geometry_msgs__msg__Vector3__init>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:

void geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function(void * message_memory)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  geometry_msgs__msg__Vector3__fini(message_memory);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffe1 	bl	8002e00 <geometry_msgs__msg__Vector3__fini>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
  &geometry_msgs__msg__Vector3__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_geometry_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, Vector3)() {
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  if (!geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_message_type_support_handle.typesupport_identifier) {
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x20>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>
    geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_message_type_support_handle.typesupport_identifier =
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x24>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a03      	ldr	r2, [pc, #12]	@ (8002e68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x20>)
 8002e5a:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_message_type_support_handle;
 8002e5c:	4b02      	ldr	r3, [pc, #8]	@ (8002e68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x20>)
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	200015b0 	.word	0x200015b0
 8002e6c:	2000248c 	.word	0x2000248c

08002e70 <nav_msgs__msg__Odometry__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_nav_msgs
const rosidl_type_hash_t *
nav_msgs__msg__Odometry__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
      0x3c, 0xc9, 0x7d, 0xc7, 0xfb, 0x75, 0x02, 0xf8,
      0x71, 0x44, 0x62, 0xc5, 0x26, 0xd3, 0x69, 0xe3,
      0x5b, 0x60, 0x3c, 0xfc, 0x34, 0xd9, 0x46, 0xe3,
      0xf2, 0xed, 0xa2, 0x76, 0x6d, 0xfe, 0xc6, 0xe0,
    }};
  return &hash;
 8002e78:	4b03      	ldr	r3, [pc, #12]	@ (8002e88 <nav_msgs__msg__Odometry__get_type_hash+0x18>)
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20001b94 	.word	0x20001b94

08002e8c <nav_msgs__msg__Odometry__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
nav_msgs__msg__Odometry__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
      {nav_msgs__msg__Odometry__TYPE_NAME, 21, 21},
      {nav_msgs__msg__Odometry__FIELDS, 4, 4},
    },
    {nav_msgs__msg__Odometry__REFERENCED_TYPE_DESCRIPTIONS, 9, 9},
  };
  if (!constructed) {
 8002e94:	4b8e      	ldr	r3, [pc, #568]	@ (80030d0 <nav_msgs__msg__Odometry__get_type_description+0x244>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8110 	beq.w	80030c4 <nav_msgs__msg__Odometry__get_type_description+0x238>
    assert(0 == memcmp(&builtin_interfaces__msg__Time__EXPECTED_HASH, builtin_interfaces__msg__Time__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fe ffe5 	bl	8001e74 <builtin_interfaces__msg__Time__get_type_hash>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2221      	movs	r2, #33	@ 0x21
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4888      	ldr	r0, [pc, #544]	@ (80030d4 <nav_msgs__msg__Odometry__get_type_description+0x248>)
 8002eb2:	f01a fad1 	bl	801d458 <memcmp>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <nav_msgs__msg__Odometry__get_type_description+0x3c>
 8002ebc:	4b86      	ldr	r3, [pc, #536]	@ (80030d8 <nav_msgs__msg__Odometry__get_type_description+0x24c>)
 8002ebe:	4a87      	ldr	r2, [pc, #540]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8002ec0:	21cf      	movs	r1, #207	@ 0xcf
 8002ec2:	4887      	ldr	r0, [pc, #540]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8002ec4:	f019 f902 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[0].fields = builtin_interfaces__msg__Time__get_type_description(NULL)->type_description.fields;
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fe ffe1 	bl	8001e90 <builtin_interfaces__msg__Time__get_type_description>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b84      	ldr	r3, [pc, #528]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	320c      	adds	r2, #12
 8002ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Point__EXPECTED_HASH, geometry_msgs__msg__Point__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7ff f86c 	bl	8001fbc <geometry_msgs__msg__Point__get_type_hash>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2221      	movs	r2, #33	@ 0x21
 8002ee8:	4619      	mov	r1, r3
 8002eea:	487f      	ldr	r0, [pc, #508]	@ (80030e8 <nav_msgs__msg__Odometry__get_type_description+0x25c>)
 8002eec:	f01a fab4 	bl	801d458 <memcmp>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <nav_msgs__msg__Odometry__get_type_description+0x76>
 8002ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80030ec <nav_msgs__msg__Odometry__get_type_description+0x260>)
 8002ef8:	4a78      	ldr	r2, [pc, #480]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8002efa:	21d1      	movs	r1, #209	@ 0xd1
 8002efc:	4878      	ldr	r0, [pc, #480]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8002efe:	f019 f8e5 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[1].fields = geometry_msgs__msg__Point__get_type_description(NULL)->type_description.fields;
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7ff f868 	bl	8001fd8 <geometry_msgs__msg__Point__get_type_description>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b76      	ldr	r3, [pc, #472]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	3318      	adds	r3, #24
 8002f10:	330c      	adds	r3, #12
 8002f12:	320c      	adds	r2, #12
 8002f14:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Pose__EXPECTED_HASH, geometry_msgs__msg__Pose__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7ff f8f2 	bl	8002104 <geometry_msgs__msg__Pose__get_type_hash>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2221      	movs	r2, #33	@ 0x21
 8002f24:	4619      	mov	r1, r3
 8002f26:	4872      	ldr	r0, [pc, #456]	@ (80030f0 <nav_msgs__msg__Odometry__get_type_description+0x264>)
 8002f28:	f01a fa96 	bl	801d458 <memcmp>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <nav_msgs__msg__Odometry__get_type_description+0xb2>
 8002f32:	4b70      	ldr	r3, [pc, #448]	@ (80030f4 <nav_msgs__msg__Odometry__get_type_description+0x268>)
 8002f34:	4a69      	ldr	r2, [pc, #420]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8002f36:	21d3      	movs	r1, #211	@ 0xd3
 8002f38:	4869      	ldr	r0, [pc, #420]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8002f3a:	f019 f8c7 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[2].fields = geometry_msgs__msg__Pose__get_type_description(NULL)->type_description.fields;
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7ff f8ee 	bl	8002120 <geometry_msgs__msg__Pose__get_type_description>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	3330      	adds	r3, #48	@ 0x30
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	320c      	adds	r2, #12
 8002f50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__PoseWithCovariance__EXPECTED_HASH, geometry_msgs__msg__PoseWithCovariance__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7ff fa08 	bl	800236c <geometry_msgs__msg__PoseWithCovariance__get_type_hash>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2221      	movs	r2, #33	@ 0x21
 8002f60:	4619      	mov	r1, r3
 8002f62:	4865      	ldr	r0, [pc, #404]	@ (80030f8 <nav_msgs__msg__Odometry__get_type_description+0x26c>)
 8002f64:	f01a fa78 	bl	801d458 <memcmp>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <nav_msgs__msg__Odometry__get_type_description+0xee>
 8002f6e:	4b63      	ldr	r3, [pc, #396]	@ (80030fc <nav_msgs__msg__Odometry__get_type_description+0x270>)
 8002f70:	4a5a      	ldr	r2, [pc, #360]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8002f72:	21d5      	movs	r1, #213	@ 0xd5
 8002f74:	485a      	ldr	r0, [pc, #360]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8002f76:	f019 f8a9 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[3].fields = geometry_msgs__msg__PoseWithCovariance__get_type_description(NULL)->type_description.fields;
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7ff fa04 	bl	8002388 <geometry_msgs__msg__PoseWithCovariance__get_type_description>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b58      	ldr	r3, [pc, #352]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	3348      	adds	r3, #72	@ 0x48
 8002f88:	330c      	adds	r3, #12
 8002f8a:	320c      	adds	r2, #12
 8002f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Quaternion__EXPECTED_HASH, geometry_msgs__msg__Quaternion__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7ff fb8e 	bl	80026b4 <geometry_msgs__msg__Quaternion__get_type_hash>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2221      	movs	r2, #33	@ 0x21
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4858      	ldr	r0, [pc, #352]	@ (8003100 <nav_msgs__msg__Odometry__get_type_description+0x274>)
 8002fa0:	f01a fa5a 	bl	801d458 <memcmp>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <nav_msgs__msg__Odometry__get_type_description+0x12a>
 8002faa:	4b56      	ldr	r3, [pc, #344]	@ (8003104 <nav_msgs__msg__Odometry__get_type_description+0x278>)
 8002fac:	4a4b      	ldr	r2, [pc, #300]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8002fae:	21d7      	movs	r1, #215	@ 0xd7
 8002fb0:	484b      	ldr	r0, [pc, #300]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8002fb2:	f019 f88b 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[4].fields = geometry_msgs__msg__Quaternion__get_type_description(NULL)->type_description.fields;
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7ff fb8a 	bl	80026d0 <geometry_msgs__msg__Quaternion__get_type_description>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b49      	ldr	r3, [pc, #292]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	3360      	adds	r3, #96	@ 0x60
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	320c      	adds	r2, #12
 8002fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Twist__EXPECTED_HASH, geometry_msgs__msg__Twist__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff fc32 	bl	8002838 <geometry_msgs__msg__Twist__get_type_hash>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2221      	movs	r2, #33	@ 0x21
 8002fd8:	4619      	mov	r1, r3
 8002fda:	484b      	ldr	r0, [pc, #300]	@ (8003108 <nav_msgs__msg__Odometry__get_type_description+0x27c>)
 8002fdc:	f01a fa3c 	bl	801d458 <memcmp>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <nav_msgs__msg__Odometry__get_type_description+0x166>
 8002fe6:	4b49      	ldr	r3, [pc, #292]	@ (800310c <nav_msgs__msg__Odometry__get_type_description+0x280>)
 8002fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8002fea:	21d9      	movs	r1, #217	@ 0xd9
 8002fec:	483c      	ldr	r0, [pc, #240]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8002fee:	f019 f86d 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[5].fields = geometry_msgs__msg__Twist__get_type_description(NULL)->type_description.fields;
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7ff fc2e 	bl	8002854 <geometry_msgs__msg__Twist__get_type_description>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	3378      	adds	r3, #120	@ 0x78
 8003000:	330c      	adds	r3, #12
 8003002:	320c      	adds	r2, #12
 8003004:	ca07      	ldmia	r2, {r0, r1, r2}
 8003006:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__TwistWithCovariance__EXPECTED_HASH, geometry_msgs__msg__TwistWithCovariance__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 800300a:	2000      	movs	r0, #0
 800300c:	f7ff fd18 	bl	8002a40 <geometry_msgs__msg__TwistWithCovariance__get_type_hash>
 8003010:	4603      	mov	r3, r0
 8003012:	2221      	movs	r2, #33	@ 0x21
 8003014:	4619      	mov	r1, r3
 8003016:	483e      	ldr	r0, [pc, #248]	@ (8003110 <nav_msgs__msg__Odometry__get_type_description+0x284>)
 8003018:	f01a fa1e 	bl	801d458 <memcmp>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <nav_msgs__msg__Odometry__get_type_description+0x1a2>
 8003022:	4b3c      	ldr	r3, [pc, #240]	@ (8003114 <nav_msgs__msg__Odometry__get_type_description+0x288>)
 8003024:	4a2d      	ldr	r2, [pc, #180]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8003026:	21db      	movs	r1, #219	@ 0xdb
 8003028:	482d      	ldr	r0, [pc, #180]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 800302a:	f019 f84f 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[6].fields = geometry_msgs__msg__TwistWithCovariance__get_type_description(NULL)->type_description.fields;
 800302e:	2000      	movs	r0, #0
 8003030:	f7ff fd14 	bl	8002a5c <geometry_msgs__msg__TwistWithCovariance__get_type_description>
 8003034:	4602      	mov	r2, r0
 8003036:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	3390      	adds	r3, #144	@ 0x90
 800303c:	330c      	adds	r3, #12
 800303e:	320c      	adds	r2, #12
 8003040:	ca07      	ldmia	r2, {r0, r1, r2}
 8003042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&geometry_msgs__msg__Vector3__EXPECTED_HASH, geometry_msgs__msg__Vector3__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8003046:	2000      	movs	r0, #0
 8003048:	f7ff fe6e 	bl	8002d28 <geometry_msgs__msg__Vector3__get_type_hash>
 800304c:	4603      	mov	r3, r0
 800304e:	2221      	movs	r2, #33	@ 0x21
 8003050:	4619      	mov	r1, r3
 8003052:	4831      	ldr	r0, [pc, #196]	@ (8003118 <nav_msgs__msg__Odometry__get_type_description+0x28c>)
 8003054:	f01a fa00 	bl	801d458 <memcmp>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <nav_msgs__msg__Odometry__get_type_description+0x1de>
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <nav_msgs__msg__Odometry__get_type_description+0x290>)
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 8003062:	21dd      	movs	r1, #221	@ 0xdd
 8003064:	481e      	ldr	r0, [pc, #120]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 8003066:	f019 f831 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[7].fields = geometry_msgs__msg__Vector3__get_type_description(NULL)->type_description.fields;
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff fe6a 	bl	8002d44 <geometry_msgs__msg__Vector3__get_type_description>
 8003070:	4602      	mov	r2, r0
 8003072:	4b1c      	ldr	r3, [pc, #112]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	33a8      	adds	r3, #168	@ 0xa8
 8003078:	330c      	adds	r3, #12
 800307a:	320c      	adds	r2, #12
 800307c:	ca07      	ldmia	r2, {r0, r1, r2}
 800307e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    assert(0 == memcmp(&std_msgs__msg__Header__EXPECTED_HASH, std_msgs__msg__Header__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8003082:	2000      	movs	r0, #0
 8003084:	f000 f9ae 	bl	80033e4 <std_msgs__msg__Header__get_type_hash>
 8003088:	4603      	mov	r3, r0
 800308a:	2221      	movs	r2, #33	@ 0x21
 800308c:	4619      	mov	r1, r3
 800308e:	4824      	ldr	r0, [pc, #144]	@ (8003120 <nav_msgs__msg__Odometry__get_type_description+0x294>)
 8003090:	f01a f9e2 	bl	801d458 <memcmp>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <nav_msgs__msg__Odometry__get_type_description+0x21a>
 800309a:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <nav_msgs__msg__Odometry__get_type_description+0x298>)
 800309c:	4a0f      	ldr	r2, [pc, #60]	@ (80030dc <nav_msgs__msg__Odometry__get_type_description+0x250>)
 800309e:	21df      	movs	r1, #223	@ 0xdf
 80030a0:	480f      	ldr	r0, [pc, #60]	@ (80030e0 <nav_msgs__msg__Odometry__get_type_description+0x254>)
 80030a2:	f019 f813 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[8].fields = std_msgs__msg__Header__get_type_description(NULL)->type_description.fields;
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f9aa 	bl	8003400 <std_msgs__msg__Header__get_type_description>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	33c0      	adds	r3, #192	@ 0xc0
 80030b4:	330c      	adds	r3, #12
 80030b6:	320c      	adds	r2, #12
 80030b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 80030be:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <nav_msgs__msg__Odometry__get_type_description+0x244>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 80030c4:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <nav_msgs__msg__Odometry__get_type_description+0x258>)
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20002cb4 	.word	0x20002cb4
 80030d4:	08022f7c 	.word	0x08022f7c
 80030d8:	080218cc 	.word	0x080218cc
 80030dc:	080230c0 	.word	0x080230c0
 80030e0:	08021958 	.word	0x08021958
 80030e4:	080230f0 	.word	0x080230f0
 80030e8:	08022fa0 	.word	0x08022fa0
 80030ec:	0802199c 	.word	0x0802199c
 80030f0:	08022fc4 	.word	0x08022fc4
 80030f4:	08021a20 	.word	0x08021a20
 80030f8:	08022fe8 	.word	0x08022fe8
 80030fc:	08021aa4 	.word	0x08021aa4
 8003100:	0802300c 	.word	0x0802300c
 8003104:	08021b44 	.word	0x08021b44
 8003108:	08023030 	.word	0x08023030
 800310c:	08021bd4 	.word	0x08021bd4
 8003110:	08023054 	.word	0x08023054
 8003114:	08021c58 	.word	0x08021c58
 8003118:	08023078 	.word	0x08023078
 800311c:	08021cf8 	.word	0x08021cf8
 8003120:	0802309c 	.word	0x0802309c
 8003124:	08021d80 	.word	0x08021d80

08003128 <nav_msgs__msg__Odometry__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
nav_msgs__msg__Odometry__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {nav_msgs__msg__Odometry__TYPE_NAME, 21, 21},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 645, 645},
  };
  return &source;
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <nav_msgs__msg__Odometry__get_individual_type_description_source+0x18>)
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	08023114 	.word	0x08023114

08003144 <nav_msgs__msg__Odometry__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
nav_msgs__msg__Odometry__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[10];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 10, 10};
  static bool constructed = false;
  if (!constructed) {
 800314c:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	f083 0301 	eor.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 808e 	beq.w	8003278 <nav_msgs__msg__Odometry__get_type_description_sources+0x134>
    sources[0] = *nav_msgs__msg__Odometry__get_individual_type_description_source(NULL),
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff ffe3 	bl	8003128 <nav_msgs__msg__Odometry__get_individual_type_description_source>
 8003162:	4603      	mov	r3, r0
 8003164:	4a48      	ldr	r2, [pc, #288]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 8003166:	4614      	mov	r4, r2
 8003168:	461d      	mov	r5, r3
 800316a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800316c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800316e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003172:	682b      	ldr	r3, [r5, #0]
 8003174:	6023      	str	r3, [r4, #0]
    sources[1] = *builtin_interfaces__msg__Time__get_individual_type_description_source(NULL);
 8003176:	2000      	movs	r0, #0
 8003178:	f7fe fea4 	bl	8001ec4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800317c:	4602      	mov	r2, r0
 800317e:	4b42      	ldr	r3, [pc, #264]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 8003180:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8003184:	4615      	mov	r5, r2
 8003186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318e:	682b      	ldr	r3, [r5, #0]
 8003190:	6023      	str	r3, [r4, #0]
    sources[2] = *geometry_msgs__msg__Point__get_individual_type_description_source(NULL);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fe ff3a 	bl	800200c <geometry_msgs__msg__Point__get_individual_type_description_source>
 8003198:	4602      	mov	r2, r0
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 800319c:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80031a0:	4615      	mov	r5, r2
 80031a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031aa:	682b      	ldr	r3, [r5, #0]
 80031ac:	6023      	str	r3, [r4, #0]
    sources[3] = *geometry_msgs__msg__Pose__get_individual_type_description_source(NULL);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7ff f814 	bl	80021dc <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b34      	ldr	r3, [pc, #208]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 80031b8:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80031bc:	4615      	mov	r5, r2
 80031be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031c6:	682b      	ldr	r3, [r5, #0]
 80031c8:	6023      	str	r3, [r4, #0]
    sources[4] = *geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source(NULL);
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff f95c 	bl	8002488 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 80031d4:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 80031d8:	4615      	mov	r5, r2
 80031da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	6023      	str	r3, [r4, #0]
    sources[5] = *geometry_msgs__msg__Quaternion__get_individual_type_description_source(NULL);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7ff fa8c 	bl	8002704 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 80031f0:	f103 04b4 	add.w	r4, r3, #180	@ 0xb4
 80031f4:	4615      	mov	r5, r2
 80031f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031fe:	682b      	ldr	r3, [r5, #0]
 8003200:	6023      	str	r3, [r4, #0]
    sources[6] = *geometry_msgs__msg__Twist__get_individual_type_description_source(NULL);
 8003202:	2000      	movs	r0, #0
 8003204:	f7ff fb62 	bl	80028cc <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8003208:	4602      	mov	r2, r0
 800320a:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 800320c:	f103 04d8 	add.w	r4, r3, #216	@ 0xd8
 8003210:	4615      	mov	r5, r2
 8003212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800321a:	682b      	ldr	r3, [r5, #0]
 800321c:	6023      	str	r3, [r4, #0]
    sources[7] = *geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source(NULL);
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff fc7a 	bl	8002b18 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 8003224:	4602      	mov	r2, r0
 8003226:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 8003228:	f103 04fc 	add.w	r4, r3, #252	@ 0xfc
 800322c:	4615      	mov	r5, r2
 800322e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	6023      	str	r3, [r4, #0]
    sources[8] = *geometry_msgs__msg__Vector3__get_individual_type_description_source(NULL);
 800323a:	2000      	movs	r0, #0
 800323c:	f7ff fd9c 	bl	8002d78 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8003240:	4602      	mov	r2, r0
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 8003244:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8003248:	4615      	mov	r5, r2
 800324a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800324c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800324e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003252:	682b      	ldr	r3, [r5, #0]
 8003254:	6023      	str	r3, [r4, #0]
    sources[9] = *std_msgs__msg__Header__get_individual_type_description_source(NULL);
 8003256:	2000      	movs	r0, #0
 8003258:	f000 f90e 	bl	8003478 <std_msgs__msg__Header__get_individual_type_description_source>
 800325c:	4602      	mov	r2, r0
 800325e:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <nav_msgs__msg__Odometry__get_type_description_sources+0x144>)
 8003260:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 8003264:	4615      	mov	r5, r2
 8003266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800326a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800326c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	6023      	str	r3, [r4, #0]
    constructed = true;
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <nav_msgs__msg__Odometry__get_type_description_sources+0x148>)
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bdb0      	pop	{r4, r5, r7, pc}
 8003282:	bf00      	nop
 8003284:	20002cb5 	.word	0x20002cb5
 8003288:	20002cb8 	.word	0x20002cb8
 800328c:	08023138 	.word	0x08023138

08003290 <nav_msgs__msg__Odometry__init>:
// Member `twist`
#include "geometry_msgs/msg/detail/twist_with_covariance__functions.h"

bool
nav_msgs__msg__Odometry__init(nav_msgs__msg__Odometry * msg)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <nav_msgs__msg__Odometry__init+0x12>
    return false;
 800329e:	2300      	movs	r3, #0
 80032a0:	e040      	b.n	8003324 <nav_msgs__msg__Odometry__init+0x94>
  }
  // header
  if (!std_msgs__msg__Header__init(&msg->header)) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f929 	bl	80034fc <std_msgs__msg__Header__init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f083 0301 	eor.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <nav_msgs__msg__Odometry__init+0x30>
    nav_msgs__msg__Odometry__fini(msg);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f838 	bl	800332c <nav_msgs__msg__Odometry__fini>
    return false;
 80032bc:	2300      	movs	r3, #0
 80032be:	e031      	b.n	8003324 <nav_msgs__msg__Odometry__init+0x94>
  }
  // child_frame_id
  if (!rosidl_runtime_c__String__init(&msg->child_frame_id)) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3314      	adds	r3, #20
 80032c4:	4618      	mov	r0, r3
 80032c6:	f012 f8bb 	bl	8015440 <rosidl_runtime_c__String__init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <nav_msgs__msg__Odometry__init+0x50>
    nav_msgs__msg__Odometry__fini(msg);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f828 	bl	800332c <nav_msgs__msg__Odometry__fini>
    return false;
 80032dc:	2300      	movs	r3, #0
 80032de:	e021      	b.n	8003324 <nav_msgs__msg__Odometry__init+0x94>
  }
  // pose
  if (!geometry_msgs__msg__PoseWithCovariance__init(&msg->pose)) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3320      	adds	r3, #32
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f92d 	bl	8002544 <geometry_msgs__msg__PoseWithCovariance__init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <nav_msgs__msg__Odometry__init+0x70>
    nav_msgs__msg__Odometry__fini(msg);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f818 	bl	800332c <nav_msgs__msg__Odometry__fini>
    return false;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e011      	b.n	8003324 <nav_msgs__msg__Odometry__init+0x94>
  }
  // twist
  if (!geometry_msgs__msg__TwistWithCovariance__init(&msg->twist)) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fc56 	bl	8002bb8 <geometry_msgs__msg__TwistWithCovariance__init>
 800330c:	4603      	mov	r3, r0
 800330e:	f083 0301 	eor.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <nav_msgs__msg__Odometry__init+0x92>
    nav_msgs__msg__Odometry__fini(msg);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f807 	bl	800332c <nav_msgs__msg__Odometry__fini>
    return false;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <nav_msgs__msg__Odometry__init+0x94>
  }
  return true;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <nav_msgs__msg__Odometry__fini>:

void
nav_msgs__msg__Odometry__fini(nav_msgs__msg__Odometry * msg)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d014      	beq.n	8003364 <nav_msgs__msg__Odometry__fini+0x38>
    return;
  }
  // header
  std_msgs__msg__Header__fini(&msg->header);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f90a 	bl	8003556 <std_msgs__msg__Header__fini>
  // child_frame_id
  rosidl_runtime_c__String__fini(&msg->child_frame_id);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3314      	adds	r3, #20
 8003346:	4618      	mov	r0, r3
 8003348:	f012 f890 	bl	801546c <rosidl_runtime_c__String__fini>
  // pose
  geometry_msgs__msg__PoseWithCovariance__fini(&msg->pose);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3320      	adds	r3, #32
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f914 	bl	800257e <geometry_msgs__msg__PoseWithCovariance__fini>
  // twist
  geometry_msgs__msg__TwistWithCovariance__fini(&msg->twist);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fc48 	bl	8002bf2 <geometry_msgs__msg__TwistWithCovariance__fini>
 8003362:	e000      	b.n	8003366 <nav_msgs__msg__Odometry__fini+0x3a>
    return;
 8003364:	bf00      	nop
}
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
{
#endif

void nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  nav_msgs__msg__Odometry__init(message_memory);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff89 	bl	8003290 <nav_msgs__msg__Odometry__init>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:

void nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function(void * message_memory)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  nav_msgs__msg__Odometry__fini(message_memory);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffcc 	bl	800332c <nav_msgs__msg__Odometry__fini>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
  &nav_msgs__msg__Odometry__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_nav_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, nav_msgs, msg, Odometry)() {
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, std_msgs, msg, Header)();
 80033a0:	f000 f906 	bl	80035b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80033a4:	4603      	mov	r3, r0
  nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_member_array[0].members_ =
 80033a6:	4a0c      	ldr	r2, [pc, #48]	@ (80033d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x3c>)
 80033a8:	60d3      	str	r3, [r2, #12]
  nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_member_array[2].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, PoseWithCovariance)();
 80033aa:	f7ff f96b 	bl	8002684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 80033ae:	4603      	mov	r3, r0
  nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_member_array[2].members_ =
 80033b0:	4a09      	ldr	r2, [pc, #36]	@ (80033d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x3c>)
 80033b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_member_array[3].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, geometry_msgs, msg, TwistWithCovariance)();
 80033b6:	f7ff fc9f 	bl	8002cf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 80033ba:	4603      	mov	r3, r0
  nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_member_array[3].members_ =
 80033bc:	4a06      	ldr	r2, [pc, #24]	@ (80033d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x3c>)
 80033be:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if (!nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_type_support_handle.typesupport_identifier) {
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x40>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x36>
    nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_type_support_handle.typesupport_identifier =
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x44>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a03      	ldr	r2, [pc, #12]	@ (80033dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x40>)
 80033d0:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_message_type_support_handle;
 80033d2:	4b02      	ldr	r3, [pc, #8]	@ (80033dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x40>)
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20001bb8 	.word	0x20001bb8
 80033dc:	20001ca8 	.word	0x20001ca8
 80033e0:	2000248c 	.word	0x2000248c

080033e4 <std_msgs__msg__Header__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_std_msgs
const rosidl_type_hash_t *
std_msgs__msg__Header__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
      0xf4, 0x9f, 0xb3, 0xae, 0x2c, 0xf0, 0x70, 0xf7,
      0x93, 0x64, 0x5f, 0xf7, 0x49, 0x68, 0x3a, 0xc6,
      0xb0, 0x62, 0x03, 0xe4, 0x1c, 0x89, 0x1e, 0x17,
      0x70, 0x1b, 0x1c, 0xb5, 0x97, 0xce, 0x6a, 0x01,
    }};
  return &hash;
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <std_msgs__msg__Header__get_type_hash+0x18>)
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20001ef8 	.word	0x20001ef8

08003400 <std_msgs__msg__Header__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
std_msgs__msg__Header__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
      {std_msgs__msg__Header__TYPE_NAME, 19, 19},
      {std_msgs__msg__Header__FIELDS, 2, 2},
    },
    {std_msgs__msg__Header__REFERENCED_TYPE_DESCRIPTIONS, 1, 1},
  };
  if (!constructed) {
 8003408:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <std_msgs__msg__Header__get_type_description+0x60>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01f      	beq.n	8003456 <std_msgs__msg__Header__get_type_description+0x56>
    assert(0 == memcmp(&builtin_interfaces__msg__Time__EXPECTED_HASH, builtin_interfaces__msg__Time__get_type_hash(NULL), sizeof(rosidl_type_hash_t)));
 8003416:	2000      	movs	r0, #0
 8003418:	f7fe fd2c 	bl	8001e74 <builtin_interfaces__msg__Time__get_type_hash>
 800341c:	4603      	mov	r3, r0
 800341e:	2221      	movs	r2, #33	@ 0x21
 8003420:	4619      	mov	r1, r3
 8003422:	4810      	ldr	r0, [pc, #64]	@ (8003464 <std_msgs__msg__Header__get_type_description+0x64>)
 8003424:	f01a f818 	bl	801d458 <memcmp>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <std_msgs__msg__Header__get_type_description+0x3a>
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <std_msgs__msg__Header__get_type_description+0x68>)
 8003430:	4a0e      	ldr	r2, [pc, #56]	@ (800346c <std_msgs__msg__Header__get_type_description+0x6c>)
 8003432:	2159      	movs	r1, #89	@ 0x59
 8003434:	480e      	ldr	r0, [pc, #56]	@ (8003470 <std_msgs__msg__Header__get_type_description+0x70>)
 8003436:	f018 fe49 	bl	801c0cc <__assert_func>
    description.referenced_type_descriptions.data[0].fields = builtin_interfaces__msg__Time__get_type_description(NULL)->type_description.fields;
 800343a:	2000      	movs	r0, #0
 800343c:	f7fe fd28 	bl	8001e90 <builtin_interfaces__msg__Time__get_type_description>
 8003440:	4602      	mov	r2, r0
 8003442:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <std_msgs__msg__Header__get_type_description+0x74>)
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	330c      	adds	r3, #12
 8003448:	320c      	adds	r2, #12
 800344a:	ca07      	ldmia	r2, {r0, r1, r2}
 800344c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    constructed = true;
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <std_msgs__msg__Header__get_type_description+0x60>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8003456:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <std_msgs__msg__Header__get_type_description+0x74>)
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20002e20 	.word	0x20002e20
 8003464:	08023160 	.word	0x08023160
 8003468:	08021e40 	.word	0x08021e40
 800346c:	08023184 	.word	0x08023184
 8003470:	08021ecc 	.word	0x08021ecc
 8003474:	080231b0 	.word	0x080231b0

08003478 <std_msgs__msg__Header__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
std_msgs__msg__Header__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {std_msgs__msg__Header__TYPE_NAME, 19, 19},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 322, 322},
  };
  return &source;
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <std_msgs__msg__Header__get_individual_type_description_source+0x18>)
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	080231d4 	.word	0x080231d4

08003494 <std_msgs__msg__Header__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
std_msgs__msg__Header__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8003494:	b5b0      	push	{r4, r5, r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[2];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 2, 2};
  static bool constructed = false;
  if (!constructed) {
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <std_msgs__msg__Header__get_type_description_sources+0x5c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f083 0301 	eor.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01d      	beq.n	80034e6 <std_msgs__msg__Header__get_type_description_sources+0x52>
    sources[0] = *std_msgs__msg__Header__get_individual_type_description_source(NULL),
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7ff ffe4 	bl	8003478 <std_msgs__msg__Header__get_individual_type_description_source>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <std_msgs__msg__Header__get_type_description_sources+0x60>)
 80034b4:	4614      	mov	r4, r2
 80034b6:	461d      	mov	r5, r3
 80034b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	6023      	str	r3, [r4, #0]
    sources[1] = *builtin_interfaces__msg__Time__get_individual_type_description_source(NULL);
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fe fcfd 	bl	8001ec4 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <std_msgs__msg__Header__get_type_description_sources+0x60>)
 80034ce:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80034d2:	4615      	mov	r5, r2
 80034d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	6023      	str	r3, [r4, #0]
    constructed = true;
 80034e0:	4b03      	ldr	r3, [pc, #12]	@ (80034f0 <std_msgs__msg__Header__get_type_description_sources+0x5c>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 80034e6:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <std_msgs__msg__Header__get_type_description_sources+0x64>)
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bdb0      	pop	{r4, r5, r7, pc}
 80034f0:	20002e21 	.word	0x20002e21
 80034f4:	20002e24 	.word	0x20002e24
 80034f8:	080231f8 	.word	0x080231f8

080034fc <std_msgs__msg__Header__init>:
// Member `frame_id`
#include "rosidl_runtime_c/string_functions.h"

bool
std_msgs__msg__Header__init(std_msgs__msg__Header * msg)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <std_msgs__msg__Header__init+0x12>
    return false;
 800350a:	2300      	movs	r3, #0
 800350c:	e01f      	b.n	800354e <std_msgs__msg__Header__init+0x52>
  }
  // stamp
  if (!builtin_interfaces__msg__Time__init(&msg->stamp)) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fd0b 	bl	8001f2c <builtin_interfaces__msg__Time__init>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <std_msgs__msg__Header__init+0x30>
    std_msgs__msg__Header__fini(msg);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f817 	bl	8003556 <std_msgs__msg__Header__fini>
    return false;
 8003528:	2300      	movs	r3, #0
 800352a:	e010      	b.n	800354e <std_msgs__msg__Header__init+0x52>
  }
  // frame_id
  if (!rosidl_runtime_c__String__init(&msg->frame_id)) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3308      	adds	r3, #8
 8003530:	4618      	mov	r0, r3
 8003532:	f011 ff85 	bl	8015440 <rosidl_runtime_c__String__init>
 8003536:	4603      	mov	r3, r0
 8003538:	f083 0301 	eor.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d004      	beq.n	800354c <std_msgs__msg__Header__init+0x50>
    std_msgs__msg__Header__fini(msg);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f807 	bl	8003556 <std_msgs__msg__Header__fini>
    return false;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <std_msgs__msg__Header__init+0x52>
  }
  return true;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <std_msgs__msg__Header__fini>:

void
std_msgs__msg__Header__fini(std_msgs__msg__Header * msg)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  if (!msg) {
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <std_msgs__msg__Header__fini+0x22>
    return;
  }
  // stamp
  builtin_interfaces__msg__Time__fini(&msg->stamp);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fcf0 	bl	8001f4c <builtin_interfaces__msg__Time__fini>
  // frame_id
  rosidl_runtime_c__String__fini(&msg->frame_id);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3308      	adds	r3, #8
 8003570:	4618      	mov	r0, r3
 8003572:	f011 ff7b 	bl	801546c <rosidl_runtime_c__String__fini>
 8003576:	e000      	b.n	800357a <std_msgs__msg__Header__fini+0x24>
    return;
 8003578:	bf00      	nop
}
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
{
#endif

void std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  std_msgs__msg__Header__init(message_memory);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffb5 	bl	80034fc <std_msgs__msg__Header__init>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:

void std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function(void * message_memory)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  std_msgs__msg__Header__fini(message_memory);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ffd7 	bl	8003556 <std_msgs__msg__Header__fini>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
  &std_msgs__msg__Header__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_std_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, std_msgs, msg, Header)() {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_message_member_array[0].members_ =
    ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, builtin_interfaces, msg, Time)();
 80035b4:	f7fe fcee 	bl	8001f94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80035b8:	4603      	mov	r3, r0
  std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_message_member_array[0].members_ =
 80035ba:	4a06      	ldr	r2, [pc, #24]	@ (80035d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80035bc:	60d3      	str	r3, [r2, #12]
  if (!std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_message_type_support_handle.typesupport_identifier) {
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x1e>
    std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_message_type_support_handle.typesupport_identifier =
 80035c6:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x2c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a03      	ldr	r2, [pc, #12]	@ (80035d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80035cc:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_message_type_support_handle;
 80035ce:	4b02      	ldr	r3, [pc, #8]	@ (80035d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20001f1c 	.word	0x20001f1c
 80035d8:	20001f94 	.word	0x20001f94
 80035dc:	2000248c 	.word	0x2000248c

080035e0 <std_msgs__msg__Int32__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_std_msgs
const rosidl_type_hash_t *
std_msgs__msg__Int32__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
      0xb6, 0x57, 0x8d, 0xed, 0x3c, 0x58, 0xc6, 0x26,
      0xcf, 0xe8, 0xd1, 0xa6, 0xfb, 0x6e, 0x04, 0xf7,
      0x06, 0xf9, 0x7e, 0x9f, 0x03, 0xd2, 0x72, 0x7c,
      0x9f, 0xf4, 0xe7, 0x4b, 0x1c, 0xef, 0x0d, 0xeb,
    }};
  return &hash;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <std_msgs__msg__Int32__get_type_hash+0x18>)
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000211c 	.word	0x2000211c

080035fc <std_msgs__msg__Int32__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
std_msgs__msg__Int32__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
      {std_msgs__msg__Int32__TYPE_NAME, 18, 18},
      {std_msgs__msg__Int32__FIELDS, 1, 1},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 8003604:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <std_msgs__msg__Int32__get_type_description+0x2c>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <std_msgs__msg__Int32__get_type_description+0x1c>
    constructed = true;
 8003612:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <std_msgs__msg__Int32__get_type_description+0x2c>)
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <std_msgs__msg__Int32__get_type_description+0x30>)
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20002e6c 	.word	0x20002e6c
 800362c:	08023220 	.word	0x08023220

08003630 <std_msgs__msg__Int32__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
std_msgs__msg__Int32__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {std_msgs__msg__Int32__TYPE_NAME, 18, 18},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 262, 262},
  };
  return &source;
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <std_msgs__msg__Int32__get_individual_type_description_source+0x18>)
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	08023244 	.word	0x08023244

0800364c <std_msgs__msg__Int32__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
std_msgs__msg__Int32__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 800364c:	b5b0      	push	{r4, r5, r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 8003654:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <std_msgs__msg__Int32__get_type_description_sources+0x40>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	f083 0301 	eor.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <std_msgs__msg__Int32__get_type_description_sources+0x36>
    sources[0] = *std_msgs__msg__Int32__get_individual_type_description_source(NULL),
 8003662:	2000      	movs	r0, #0
 8003664:	f7ff ffe4 	bl	8003630 <std_msgs__msg__Int32__get_individual_type_description_source>
 8003668:	4603      	mov	r3, r0
 800366a:	4a09      	ldr	r2, [pc, #36]	@ (8003690 <std_msgs__msg__Int32__get_type_description_sources+0x44>)
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
 8003670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	6023      	str	r3, [r4, #0]
    constructed = true;
 800367c:	4b03      	ldr	r3, [pc, #12]	@ (800368c <std_msgs__msg__Int32__get_type_description_sources+0x40>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 8003682:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <std_msgs__msg__Int32__get_type_description_sources+0x48>)
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bdb0      	pop	{r4, r5, r7, pc}
 800368c:	20002e6d 	.word	0x20002e6d
 8003690:	20002e70 	.word	0x20002e70
 8003694:	08023268 	.word	0x08023268

08003698 <std_msgs__msg__Int32__init>:
#include "rcutils/allocator.h"


bool
std_msgs__msg__Int32__init(std_msgs__msg__Int32 * msg)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <std_msgs__msg__Int32__init+0x12>
    return false;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <std_msgs__msg__Int32__init+0x14>
  }
  // data
  return true;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <std_msgs__msg__Int32__fini>:

void
std_msgs__msg__Int32__fini(std_msgs__msg__Int32 * msg)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
    return;
  }
  // data
}
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
{
#endif

void std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  std_msgs__msg__Int32__init(message_memory);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ffdc 	bl	8003698 <std_msgs__msg__Int32__init>
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:

void std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function(void * message_memory)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  std_msgs__msg__Int32__fini(message_memory);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ffe1 	bl	80036b8 <std_msgs__msg__Int32__fini>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
  &std_msgs__msg__Int32__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_std_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, std_msgs, msg, Int32)() {
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  if (!std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_message_type_support_handle.typesupport_identifier) {
 8003704:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x20>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>
    std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_message_type_support_handle.typesupport_identifier =
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x24>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a03      	ldr	r2, [pc, #12]	@ (8003720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x20>)
 8003712:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_message_type_support_handle;
 8003714:	4b02      	ldr	r3, [pc, #8]	@ (8003720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x20>)
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	2000217c 	.word	0x2000217c
 8003724:	2000248c 	.word	0x2000248c

08003728 <std_msgs__msg__String__get_type_hash>:

ROSIDL_GENERATOR_C_PUBLIC_std_msgs
const rosidl_type_hash_t *
std_msgs__msg__String__get_type_hash(
  const rosidl_message_type_support_t * type_support)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
      0xdf, 0x66, 0x8c, 0x74, 0x04, 0x82, 0xbb, 0xd4,
      0x8f, 0xb3, 0x9d, 0x76, 0xa7, 0x0d, 0xfd, 0x4b,
      0xd5, 0x9d, 0xb1, 0x28, 0x80, 0x21, 0x74, 0x35,
      0x03, 0x25, 0x9e, 0x94, 0x8f, 0x6b, 0x1a, 0x18,
    }};
  return &hash;
 8003730:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <std_msgs__msg__String__get_type_hash+0x18>)
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20002304 	.word	0x20002304

08003744 <std_msgs__msg__String__get_type_description>:
};

const rosidl_runtime_c__type_description__TypeDescription *
std_msgs__msg__String__get_type_description(
  const rosidl_message_type_support_t * type_support)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
      {std_msgs__msg__String__TYPE_NAME, 19, 19},
      {std_msgs__msg__String__FIELDS, 1, 1},
    },
    {NULL, 0, 0},
  };
  if (!constructed) {
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <std_msgs__msg__String__get_type_description+0x2c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <std_msgs__msg__String__get_type_description+0x1c>
    constructed = true;
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <std_msgs__msg__String__get_type_description+0x2c>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
  }
  return &description;
 8003760:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <std_msgs__msg__String__get_type_description+0x30>)
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20002e94 	.word	0x20002e94
 8003774:	08023290 	.word	0x08023290

08003778 <std_msgs__msg__String__get_individual_type_description_source>:
// Define all individual source functions

const rosidl_runtime_c__type_description__TypeSource *
std_msgs__msg__String__get_individual_type_description_source(
  const rosidl_message_type_support_t * type_support)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  static const rosidl_runtime_c__type_description__TypeSource source = {
    {std_msgs__msg__String__TYPE_NAME, 19, 19},
    {msg_encoding, 3, 3},
    {toplevel_type_raw_source, 263, 263},
  };
  return &source;
 8003780:	4b03      	ldr	r3, [pc, #12]	@ (8003790 <std_msgs__msg__String__get_individual_type_description_source+0x18>)
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	080232b4 	.word	0x080232b4

08003794 <std_msgs__msg__String__get_type_description_sources>:

const rosidl_runtime_c__type_description__TypeSource__Sequence *
std_msgs__msg__String__get_type_description_sources(
  const rosidl_message_type_support_t * type_support)
{
 8003794:	b5b0      	push	{r4, r5, r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  (void)type_support;
  static rosidl_runtime_c__type_description__TypeSource sources[1];
  static const rosidl_runtime_c__type_description__TypeSource__Sequence source_sequence = {sources, 1, 1};
  static bool constructed = false;
  if (!constructed) {
 800379c:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <std_msgs__msg__String__get_type_description_sources+0x40>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f083 0301 	eor.w	r3, r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00f      	beq.n	80037ca <std_msgs__msg__String__get_type_description_sources+0x36>
    sources[0] = *std_msgs__msg__String__get_individual_type_description_source(NULL),
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7ff ffe4 	bl	8003778 <std_msgs__msg__String__get_individual_type_description_source>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4a09      	ldr	r2, [pc, #36]	@ (80037d8 <std_msgs__msg__String__get_type_description_sources+0x44>)
 80037b4:	4614      	mov	r4, r2
 80037b6:	461d      	mov	r5, r3
 80037b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	6023      	str	r3, [r4, #0]
    constructed = true;
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <std_msgs__msg__String__get_type_description_sources+0x40>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
  }
  return &source_sequence;
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <std_msgs__msg__String__get_type_description_sources+0x48>)
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bdb0      	pop	{r4, r5, r7, pc}
 80037d4:	20002e95 	.word	0x20002e95
 80037d8:	20002e98 	.word	0x20002e98
 80037dc:	080232d8 	.word	0x080232d8

080037e0 <std_msgs__msg__String__init>:
// Member `data`
#include "rosidl_runtime_c/string_functions.h"

bool
std_msgs__msg__String__init(std_msgs__msg__String * msg)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if (!msg) {
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <std_msgs__msg__String__init+0x12>
    return false;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e00f      	b.n	8003812 <std_msgs__msg__String__init+0x32>
  }
  // data
  if (!rosidl_runtime_c__String__init(&msg->data)) {
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f011 fe23 	bl	8015440 <rosidl_runtime_c__String__init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f083 0301 	eor.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <std_msgs__msg__String__init+0x30>
    std_msgs__msg__String__fini(msg);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f807 	bl	800381a <std_msgs__msg__String__fini>
    return false;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <std_msgs__msg__String__init+0x32>
  }
  return true;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <std_msgs__msg__String__fini>:

void
std_msgs__msg__String__fini(std_msgs__msg__String * msg)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  if (!msg) {
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <std_msgs__msg__String__fini+0x18>
    return;
  }
  // data
  rosidl_runtime_c__String__fini(&msg->data);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	f011 fe1e 	bl	801546c <rosidl_runtime_c__String__fini>
 8003830:	e000      	b.n	8003834 <std_msgs__msg__String__fini+0x1a>
    return;
 8003832:	bf00      	nop
}
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
{
#endif

void std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function(
  void * message_memory, enum rosidl_runtime_c__message_initialization _init)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	70fb      	strb	r3, [r7, #3]
  // TODO(karsten1987): initializers are not yet implemented for typesupport c
  // see https://github.com/ros2/ros2/issues/397
  (void) _init;
  std_msgs__msg__String__init(message_memory);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffca 	bl	80037e0 <std_msgs__msg__String__init>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:

void std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function(void * message_memory)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String__fini(message_memory);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ffdc 	bl	800381a <std_msgs__msg__String__fini>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
  &std_msgs__msg__String__get_type_description_sources,
};

ROSIDL_TYPESUPPORT_INTROSPECTION_C_EXPORT_std_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_introspection_c, std_msgs, msg, String)() {
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  if (!std_msgs__msg__String__rosidl_typesupport_introspection_c__String_message_type_support_handle.typesupport_identifier) {
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x20>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d103      	bne.n	8003880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>
    std_msgs__msg__String__rosidl_typesupport_introspection_c__String_message_type_support_handle.typesupport_identifier =
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x24>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a03      	ldr	r2, [pc, #12]	@ (800388c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x20>)
 800387e:	6013      	str	r3, [r2, #0]
      rosidl_typesupport_introspection_c__identifier;
  }
  return &std_msgs__msg__String__rosidl_typesupport_introspection_c__String_message_type_support_handle;
 8003880:	4b02      	ldr	r3, [pc, #8]	@ (800388c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x20>)
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	20002364 	.word	0x20002364
 8003890:	2000248c 	.word	0x2000248c

08003894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <MX_DMA_Init+0x4c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <MX_DMA_Init+0x4c>)
 80038a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <MX_DMA_Init+0x4c>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2105      	movs	r1, #5
 80038ba:	2010      	movs	r0, #16
 80038bc:	f002 ff92 	bl	80067e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80038c0:	2010      	movs	r0, #16
 80038c2:	f002 ffab 	bl	800681c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2105      	movs	r1, #5
 80038ca:	2011      	movs	r0, #17
 80038cc:	f002 ff8a 	bl	80067e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80038d0:	2011      	movs	r0, #17
 80038d2:	f002 ffa3 	bl	800681c <HAL_NVIC_EnableIRQ>

}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038e8:	f3bf 8f4f 	dsb	sy
}
 80038ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <__NVIC_SystemReset+0x24>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80038f6:	4904      	ldr	r1, [pc, #16]	@ (8003908 <__NVIC_SystemReset+0x24>)
 80038f8:	4b04      	ldr	r3, [pc, #16]	@ (800390c <__NVIC_SystemReset+0x28>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80038fe:	f3bf 8f4f 	dsb	sy
}
 8003902:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <__NVIC_SystemReset+0x20>
 8003908:	e000ed00 	.word	0xe000ed00
 800390c:	05fa0004 	.word	0x05fa0004

08003910 <PID_Incremental_Calc>:
void PID_oled(void);//oled PID测试
void speed_oled(void);
void odom_oled(void);//oled 里程计测�????????

float PID_Incremental_Calc(PID *pid, float Target_val, float Actual_val)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	ed87 0a02 	vstr	s0, [r7, #8]
 800391c:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->Error = Target_val- Actual_val;
 8003920:	ed97 7a02 	vldr	s14, [r7, #8]
 8003924:	edd7 7a01 	vldr	s15, [r7, #4]
 8003928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	edc3 7a05 	vstr	s15, [r3, #20]

	pid->output  +=  pid->Kp* ( pid->Error - pid->LastError )+
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	ed93 7a08 	vldr	s14, [r3, #32]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	edd3 6a00 	vldr	s13, [r3]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	ed93 6a05 	vldr	s12, [r3, #20]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	edd3 7a04 	vldr	s15, [r3, #16]
 800394a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800394e:	ee66 6aa7 	vmul.f32	s13, s13, s15
					 pid->Ki* pid->Error +
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	ed93 6a01 	vldr	s12, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	edd3 7a05 	vldr	s15, [r3, #20]
 800395e:	ee66 7a27 	vmul.f32	s15, s12, s15
	pid->output  +=  pid->Kp* ( pid->Error - pid->LastError )+
 8003962:	ee76 6aa7 	vadd.f32	s13, s13, s15
					 pid->Kd* ( pid->Error +  pid->PrevError - 2*pid->LastError);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	ed93 6a02 	vldr	s12, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	edd3 5a05 	vldr	s11, [r3, #20]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	edd3 7a03 	vldr	s15, [r3, #12]
 8003978:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003982:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003986:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800398a:	ee66 7a27 	vmul.f32	s15, s12, s15
					 pid->Ki* pid->Error +
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
	pid->output  +=  pid->Kp* ( pid->Error - pid->LastError )+
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->PrevError = pid->LastError;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	60da      	str	r2, [r3, #12]
	pid->LastError = pid->Error;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	611a      	str	r2, [r3, #16]

	if(pid->output > pid->outputmax )    pid->output = pid->outputmax;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80039b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	dd03      	ble.n	80039ca <PID_Incremental_Calc+0xba>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
	if(pid->output < - pid->outputmax )  pid->output = -pid->outputmax;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	ed93 7a08 	vldr	s14, [r3, #32]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80039d6:	eef1 7a67 	vneg.f32	s15, s15
 80039da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	d507      	bpl.n	80039f4 <PID_Incremental_Calc+0xe4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80039ea:	eef1 7a67 	vneg.f32	s15, s15
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	edc3 7a08 	vstr	s15, [r3, #32]

	return pid->output ;   //输出为pwm�????????
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	ee07 3a90 	vmov	s15, r3
}
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <PID_Init>:

//PID初始�????????
void PID_Init(PID *pid, float Kp , float Ki , float Kd , float Limit_value)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6178      	str	r0, [r7, #20]
 8003a12:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a16:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a1a:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a1e:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->Kp= Kp;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	601a      	str	r2, [r3, #0]
	pid->Ki= Ki;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]
	pid->Kd= Kd;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	609a      	str	r2, [r3, #8]

	pid->PrevError =pid->LastError = pid->Error =pid->SumError= pid->output =  0;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	61da      	str	r2, [r3, #28]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	615a      	str	r2, [r3, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	60da      	str	r2, [r3, #12]
	pid->Integralmax = pid->outputmax  = Limit_value;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <__io_putchar>:

#include "stdio.h"
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8003a80:	1d39      	adds	r1, r7, #4
 8003a82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a86:	2201      	movs	r2, #1
 8003a88:	4803      	ldr	r0, [pc, #12]	@ (8003a98 <__io_putchar+0x20>)
 8003a8a:	f006 f801 	bl	8009a90 <HAL_UART_Transmit>
    return ch;
 8003a8e:	687b      	ldr	r3, [r7, #4]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200082e0 	.word	0x200082e0

08003a9c <Uart6_SendStr>:

void Uart6_SendStr(char*SendBuf)//串口6打印数据(这个无法发�??0x00)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	while(*SendBuf)
 8003aa4:	e00d      	b.n	8003ac2 <Uart6_SendStr+0x26>
	{
	  while((USART6->SR&0X40)==0);//等待发�?�完�??????????
 8003aa6:	bf00      	nop
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <Uart6_SendStr+0x3c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f9      	beq.n	8003aa8 <Uart6_SendStr+0xc>
    USART6->DR = (unsigned char) *SendBuf;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <Uart6_SendStr+0x3c>)
 8003aba:	605a      	str	r2, [r3, #4]
		SendBuf++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
	while(*SendBuf)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ed      	bne.n	8003aa6 <Uart6_SendStr+0xa>
	}
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40011400 	.word	0x40011400

08003adc <subscription_callback>:
// Implementation example:
void subscription_callback(const void * msgin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
//  printf("msg Received: %d\r\n", hx_get_msg.data);
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <subscription_callback_arm>:

void subscription_callback_arm(const void * msgin)//机械臂控�??????????
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
//  printf("arm Received: %s\r\n",arm_getdata);
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <subscription_callback_cmd>:

void subscription_callback_cmd(const void * msgin)//键盘控制
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60fb      	str	r3, [r7, #12]
  cmd_getFlag = 1;
 8003b18:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <subscription_callback_cmd+0x20>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
//  printf("\r\nangular: x: %lf\r\n"
//			 "         y: %lf\r\n"
//		  	 "         z: %lf\r\n", cmd_get_msg.angular.x
//								  , cmd_get_msg.angular.y
//								  , cmd_get_msg.angular.z);
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20003528 	.word	0x20003528

08003b30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003b34:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <MX_FREERTOS_Init+0x48>)
 8003b36:	2100      	movs	r1, #0
 8003b38:	4810      	ldr	r0, [pc, #64]	@ (8003b7c <MX_FREERTOS_Init+0x4c>)
 8003b3a:	f007 fb77 	bl	800b22c <osThreadNew>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4a0f      	ldr	r2, [pc, #60]	@ (8003b80 <MX_FREERTOS_Init+0x50>)
 8003b42:	6013      	str	r3, [r2, #0]

  /* creation of imuTask */
  imuTaskHandle = osThreadNew(StartImuTask, NULL, &imuTask_attributes);
 8003b44:	4a0f      	ldr	r2, [pc, #60]	@ (8003b84 <MX_FREERTOS_Init+0x54>)
 8003b46:	2100      	movs	r1, #0
 8003b48:	480f      	ldr	r0, [pc, #60]	@ (8003b88 <MX_FREERTOS_Init+0x58>)
 8003b4a:	f007 fb6f 	bl	800b22c <osThreadNew>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4a0e      	ldr	r2, [pc, #56]	@ (8003b8c <MX_FREERTOS_Init+0x5c>)
 8003b52:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8003b54:	4a0e      	ldr	r2, [pc, #56]	@ (8003b90 <MX_FREERTOS_Init+0x60>)
 8003b56:	2100      	movs	r1, #0
 8003b58:	480e      	ldr	r0, [pc, #56]	@ (8003b94 <MX_FREERTOS_Init+0x64>)
 8003b5a:	f007 fb67 	bl	800b22c <osThreadNew>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <MX_FREERTOS_Init+0x68>)
 8003b62:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8003b64:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <MX_FREERTOS_Init+0x6c>)
 8003b66:	2100      	movs	r1, #0
 8003b68:	480d      	ldr	r0, [pc, #52]	@ (8003ba0 <MX_FREERTOS_Init+0x70>)
 8003b6a:	f007 fb5f 	bl	800b22c <osThreadNew>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba4 <MX_FREERTOS_Init+0x74>)
 8003b72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	08023300 	.word	0x08023300
 8003b7c:	08003ba9 	.word	0x08003ba9
 8003b80:	2000359c 	.word	0x2000359c
 8003b84:	08023324 	.word	0x08023324
 8003b88:	08003d3d 	.word	0x08003d3d
 8003b8c:	200075fc 	.word	0x200075fc
 8003b90:	08023348 	.word	0x08023348
 8003b94:	08003ed1 	.word	0x08003ed1
 8003b98:	20007a5c 	.word	0x20007a5c
 8003b9c:	0802336c 	.word	0x0802336c
 8003ba0:	08004101 	.word	0x08004101
 8003ba4:	20007ebc 	.word	0x20007ebc

08003ba8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	b09f      	sub	sp, #124	@ 0x7c
 8003bae:	af10      	add	r7, sp, #64	@ 0x40
 8003bb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartDefaultTask */

//	Uart6_SendStr("{#000P1500T1000!#001P1300T1000!#002P1020T1000!#003P1100T1000!#004P1500T1000!}");//机械臂初始位�??????????
	micro_ros_init();
 8003bb2:	f000 fab5 	bl	8004120 <micro_ros_init>

	// micro-ROS app
	hx_ros_init();//测试�??????????
 8003bb6:	f000 fb1b 	bl	80041f0 <hx_ros_init>
	imu_ros_init();
 8003bba:	f000 fb83 	bl	80042c4 <imu_ros_init>
	arm_ros_init();
 8003bbe:	f000 fba1 	bl	8004304 <arm_ros_init>
	cmd_ros_init();
 8003bc2:	f000 fc05 	bl	80043d0 <cmd_ros_init>

	Uart6_SendStr("{#000P1500T1000!#001P2500T1000!#002P0500T1000!#003P0800T1000!#004P1500T1000!}");
 8003bc6:	484b      	ldr	r0, [pc, #300]	@ (8003cf4 <StartDefaultTask+0x14c>)
 8003bc8:	f7ff ff68 	bl	8003a9c <Uart6_SendStr>
	start_sign = 1;
 8003bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf8 <StartDefaultTask+0x150>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
	for(;;)
	{
		if (!rmw_uros_epoch_synchronized()){
 8003bd2:	f010 fe99 	bl	8014908 <rmw_uros_epoch_synchronized>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f083 0301 	eor.w	r3, r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <StartDefaultTask+0x40>
			rmw_uros_sync_session(100);
 8003be2:	2064      	movs	r0, #100	@ 0x64
 8003be4:	f010 feb6 	bl	8014954 <rmw_uros_sync_session>
		//test
//		RCSOFTCHECK(rcl_publish(&hx_publisher, &hx_send_msg, NULL));//测试�??????????
//		hx_send_msg.data++;

		//imu
		sprintf(imu_send_msg.data.data, "'\n'acc: %f/%f/%f"
 8003be8:	4b44      	ldr	r3, [pc, #272]	@ (8003cfc <StartDefaultTask+0x154>)
 8003bea:	681e      	ldr	r6, [r3, #0]
 8003bec:	4b44      	ldr	r3, [pc, #272]	@ (8003d00 <StartDefaultTask+0x158>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fcb9 	bl	8000568 <__aeabi_f2d>
 8003bf6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003bfa:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <StartDefaultTask+0x15c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fcb2 	bl	8000568 <__aeabi_f2d>
 8003c04:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003c08:	4b3f      	ldr	r3, [pc, #252]	@ (8003d08 <StartDefaultTask+0x160>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fcab 	bl	8000568 <__aeabi_f2d>
 8003c12:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003c16:	4b3d      	ldr	r3, [pc, #244]	@ (8003d0c <StartDefaultTask+0x164>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fca4 	bl	8000568 <__aeabi_f2d>
 8003c20:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003c24:	4b3a      	ldr	r3, [pc, #232]	@ (8003d10 <StartDefaultTask+0x168>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc fc9d 	bl	8000568 <__aeabi_f2d>
 8003c2e:	e9c7 0100 	strd	r0, r1, [r7]
 8003c32:	4b38      	ldr	r3, [pc, #224]	@ (8003d14 <StartDefaultTask+0x16c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fc96 	bl	8000568 <__aeabi_f2d>
 8003c3c:	4682      	mov	sl, r0
 8003c3e:	468b      	mov	fp, r1
 8003c40:	4b35      	ldr	r3, [pc, #212]	@ (8003d18 <StartDefaultTask+0x170>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fc fc8f 	bl	8000568 <__aeabi_f2d>
 8003c4a:	4680      	mov	r8, r0
 8003c4c:	4689      	mov	r9, r1
 8003c4e:	4b33      	ldr	r3, [pc, #204]	@ (8003d1c <StartDefaultTask+0x174>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc88 	bl	8000568 <__aeabi_f2d>
 8003c58:	4604      	mov	r4, r0
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	4b30      	ldr	r3, [pc, #192]	@ (8003d20 <StartDefaultTask+0x178>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fc81 	bl	8000568 <__aeabi_f2d>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8003c6e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8003c72:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8003c76:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003c7a:	ed97 7b00 	vldr	d7, [r7]
 8003c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c82:	ed97 7b02 	vldr	d7, [r7, #8]
 8003c86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003c8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8003c8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c92:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c96:	ed8d 7b00 	vstr	d7, [sp]
 8003c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c9e:	4921      	ldr	r1, [pc, #132]	@ (8003d24 <StartDefaultTask+0x17c>)
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f019 faa9 	bl	801d1f8 <siprintf>
									    "'\n'gyr: %f/%f/%f"
									    "'\n'ang: %f/%f/%f", acc_x, acc_y, acc_z
														   , gyro_x, gyro_y, gyro_z
														   , angle_x, angle_y, angle_z);
		imu_send_msg.data.size = strlen(imu_send_msg.data.data);
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <StartDefaultTask+0x154>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc faf0 	bl	8000290 <strlen>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <StartDefaultTask+0x154>)
 8003cb4:	6053      	str	r3, [r2, #4]
		RCSOFTCHECK(rcl_publish(&imu_publisher, &imu_send_msg, NULL));
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4910      	ldr	r1, [pc, #64]	@ (8003cfc <StartDefaultTask+0x154>)
 8003cba:	481b      	ldr	r0, [pc, #108]	@ (8003d28 <StartDefaultTask+0x180>)
 8003cbc:	f00d fc02 	bl	80114c4 <rcl_publish>
 8003cc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <StartDefaultTask+0x12c>
 8003cc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cca:	f240 1179 	movw	r1, #377	@ 0x179
 8003cce:	4817      	ldr	r0, [pc, #92]	@ (8003d2c <StartDefaultTask+0x184>)
 8003cd0:	f019 f9ee 	bl	801d0b0 <iprintf>

		//odom
		odom_getandsend();
 8003cd4:	f000 fc26 	bl	8004524 <odom_getandsend>

//		rclc_executor_spin_some(&hx_executor, RCL_MS_TO_NS(10));
		rclc_executor_spin_some(&arm_executor, RCL_MS_TO_NS(10));
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <StartDefaultTask+0x188>)
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	4815      	ldr	r0, [pc, #84]	@ (8003d34 <StartDefaultTask+0x18c>)
 8003ce0:	f00c fbf2 	bl	80104c8 <rclc_executor_spin_some>
		rclc_executor_spin_some(&cmd_executor, RCL_MS_TO_NS(10));
 8003ce4:	4a12      	ldr	r2, [pc, #72]	@ (8003d30 <StartDefaultTask+0x188>)
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	4813      	ldr	r0, [pc, #76]	@ (8003d38 <StartDefaultTask+0x190>)
 8003cec:	f00c fbec 	bl	80104c8 <rclc_executor_spin_some>
		if (!rmw_uros_epoch_synchronized()){
 8003cf0:	e76f      	b.n	8003bd2 <StartDefaultTask+0x2a>
 8003cf2:	bf00      	nop
 8003cf4:	08021fa4 	.word	0x08021fa4
 8003cf8:	20002ebc 	.word	0x20002ebc
 8003cfc:	20002fb8 	.word	0x20002fb8
 8003d00:	200028e0 	.word	0x200028e0
 8003d04:	200028e4 	.word	0x200028e4
 8003d08:	200028e8 	.word	0x200028e8
 8003d0c:	200028ec 	.word	0x200028ec
 8003d10:	200028f0 	.word	0x200028f0
 8003d14:	200028f4 	.word	0x200028f4
 8003d18:	200028d4 	.word	0x200028d4
 8003d1c:	200028d8 	.word	0x200028d8
 8003d20:	200028dc 	.word	0x200028dc
 8003d24:	08021ff4 	.word	0x08021ff4
 8003d28:	20002fb4 	.word	0x20002fb4
 8003d2c:	08022028 	.word	0x08022028
 8003d30:	00989680 	.word	0x00989680
 8003d34:	20003090 	.word	0x20003090
 8003d38:	20003198 	.word	0x20003198

08003d3c <StartImuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartImuTask */
void StartImuTask(void *argument)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartImuTask */
  KDRobot kd;
  float kp_get,ki_get,kd_get;
  char pMem[] = {0x00,0x00,0x00,0x00};
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	get_data();//JY61P获取数据
 8003d48:	f7fd f9d0 	bl	80010ec <get_data>
	if(arm_getdata[0] != '\0'){
 8003d4c:	4b54      	ldr	r3, [pc, #336]	@ (8003ea0 <StartImuTask+0x164>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <StartImuTask+0x28>
		Uart6_SendStr(arm_getdata);
 8003d54:	4852      	ldr	r0, [pc, #328]	@ (8003ea0 <StartImuTask+0x164>)
 8003d56:	f7ff fea1 	bl	8003a9c <Uart6_SendStr>
		memset(arm_getdata, 0, sizeof(arm_getdata));
 8003d5a:	2264      	movs	r2, #100	@ 0x64
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4850      	ldr	r0, [pc, #320]	@ (8003ea0 <StartImuTask+0x164>)
 8003d60:	f019 fba4 	bl	801d4ac <memset>
	}
	HAL_UART_Transmit(&huart1, KDCOM_SetData(&kd, 0, motor1.speed * 100, left_speed * 100), sizeof(KDRobot), 10);
 8003d64:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea4 <StartImuTask+0x168>)
 8003d66:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d6a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003ea8 <StartImuTask+0x16c>
 8003d6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d72:	4b4e      	ldr	r3, [pc, #312]	@ (8003eac <StartImuTask+0x170>)
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003ea8 <StartImuTask+0x16c>
 8003d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	eef0 0a67 	vmov.f32	s1, s15
 8003d88:	eeb0 0a47 	vmov.f32	s0, s14
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd f93d 	bl	800100e <KDCOM_SetData>
 8003d94:	4601      	mov	r1, r0
 8003d96:	230a      	movs	r3, #10
 8003d98:	220a      	movs	r2, #10
 8003d9a:	4845      	ldr	r0, [pc, #276]	@ (8003eb0 <StartImuTask+0x174>)
 8003d9c:	f005 fe78 	bl	8009a90 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, KDCOM_SetData(&kd, 1, motor2.speed * 100, right_speed * 100), sizeof(KDRobot), 10);
 8003da0:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <StartImuTask+0x178>)
 8003da2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003da6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003ea8 <StartImuTask+0x16c>
 8003daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dae:	4b42      	ldr	r3, [pc, #264]	@ (8003eb8 <StartImuTask+0x17c>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8003ea8 <StartImuTask+0x16c>
 8003db8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	eef0 0a67 	vmov.f32	s1, s15
 8003dc4:	eeb0 0a47 	vmov.f32	s0, s14
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd f91f 	bl	800100e <KDCOM_SetData>
 8003dd0:	4601      	mov	r1, r0
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	4836      	ldr	r0, [pc, #216]	@ (8003eb0 <StartImuTask+0x174>)
 8003dd8:	f005 fe5a 	bl	8009a90 <HAL_UART_Transmit>

	if(USART_RX_STA >= 10){
 8003ddc:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <StartImuTask+0x180>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d959      	bls.n	8003e98 <StartImuTask+0x15c>
		if(USART_RX_BUF[0] == 'C'){
 8003de4:	4b36      	ldr	r3, [pc, #216]	@ (8003ec0 <StartImuTask+0x184>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b43      	cmp	r3, #67	@ 0x43
 8003dea:	d14d      	bne.n	8003e88 <StartImuTask+0x14c>
			pMem[0] = USART_RX_BUF[5];
 8003dec:	4b34      	ldr	r3, [pc, #208]	@ (8003ec0 <StartImuTask+0x184>)
 8003dee:	795b      	ldrb	r3, [r3, #5]
 8003df0:	723b      	strb	r3, [r7, #8]
			pMem[1] = USART_RX_BUF[6];
 8003df2:	4b33      	ldr	r3, [pc, #204]	@ (8003ec0 <StartImuTask+0x184>)
 8003df4:	799b      	ldrb	r3, [r3, #6]
 8003df6:	727b      	strb	r3, [r7, #9]
			pMem[2] = USART_RX_BUF[7];
 8003df8:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <StartImuTask+0x184>)
 8003dfa:	79db      	ldrb	r3, [r3, #7]
 8003dfc:	72bb      	strb	r3, [r7, #10]
			pMem[3] = USART_RX_BUF[8];
 8003dfe:	4b30      	ldr	r3, [pc, #192]	@ (8003ec0 <StartImuTask+0x184>)
 8003e00:	7a1b      	ldrb	r3, [r3, #8]
 8003e02:	72fb      	strb	r3, [r7, #11]
			if(USART_RX_BUF[3] == 0){
 8003e04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <StartImuTask+0x184>)
 8003e06:	78db      	ldrb	r3, [r3, #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11c      	bne.n	8003e46 <StartImuTask+0x10a>
				switch(USART_RX_BUF[1]){
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <StartImuTask+0x184>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d012      	beq.n	8003e3a <StartImuTask+0xfe>
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	dc37      	bgt.n	8003e88 <StartImuTask+0x14c>
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d002      	beq.n	8003e22 <StartImuTask+0xe6>
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d006      	beq.n	8003e2e <StartImuTask+0xf2>
 8003e20:	e032      	b.n	8003e88 <StartImuTask+0x14c>
					case 1:
						speedpid_1.Kp = *(float *)pMem;
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a26      	ldr	r2, [pc, #152]	@ (8003ec4 <StartImuTask+0x188>)
 8003e2a:	6013      	str	r3, [r2, #0]
						break;
 8003e2c:	e02c      	b.n	8003e88 <StartImuTask+0x14c>
					case 2:
						speedpid_1.Ki = *(float *)pMem;
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a23      	ldr	r2, [pc, #140]	@ (8003ec4 <StartImuTask+0x188>)
 8003e36:	6053      	str	r3, [r2, #4]
						break;
 8003e38:	e026      	b.n	8003e88 <StartImuTask+0x14c>
					case 3:
						speedpid_1.Kd = *(float *)pMem;
 8003e3a:	f107 0308 	add.w	r3, r7, #8
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <StartImuTask+0x188>)
 8003e42:	6093      	str	r3, [r2, #8]
						break;
 8003e44:	e020      	b.n	8003e88 <StartImuTask+0x14c>
				}
			}
			else if(USART_RX_BUF[3] == 1){
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <StartImuTask+0x184>)
 8003e48:	78db      	ldrb	r3, [r3, #3]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d11c      	bne.n	8003e88 <StartImuTask+0x14c>
				switch(USART_RX_BUF[1]){
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec0 <StartImuTask+0x184>)
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d012      	beq.n	8003e7c <StartImuTask+0x140>
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	dc16      	bgt.n	8003e88 <StartImuTask+0x14c>
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d002      	beq.n	8003e64 <StartImuTask+0x128>
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d006      	beq.n	8003e70 <StartImuTask+0x134>
 8003e62:	e011      	b.n	8003e88 <StartImuTask+0x14c>
					case 1:
						speedpid_2.Kp = *(float *)pMem;
 8003e64:	f107 0308 	add.w	r3, r7, #8
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <StartImuTask+0x18c>)
 8003e6c:	6013      	str	r3, [r2, #0]
						break;
 8003e6e:	e00b      	b.n	8003e88 <StartImuTask+0x14c>
					case 2:
						speedpid_2.Ki = *(float *)pMem;
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a14      	ldr	r2, [pc, #80]	@ (8003ec8 <StartImuTask+0x18c>)
 8003e78:	6053      	str	r3, [r2, #4]
						break;
 8003e7a:	e005      	b.n	8003e88 <StartImuTask+0x14c>
					case 3:
						speedpid_2.Kd = *(float *)pMem;
 8003e7c:	f107 0308 	add.w	r3, r7, #8
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a11      	ldr	r2, [pc, #68]	@ (8003ec8 <StartImuTask+0x18c>)
 8003e84:	6093      	str	r3, [r2, #8]
						break;
 8003e86:	bf00      	nop
				}
			}
		}
		memset(USART_RX_BUF, 0, 40);
 8003e88:	2228      	movs	r2, #40	@ 0x28
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	480c      	ldr	r0, [pc, #48]	@ (8003ec0 <StartImuTask+0x184>)
 8003e8e:	f019 fb0d 	bl	801d4ac <memset>
		USART_RX_STA = 0;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <StartImuTask+0x180>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	801a      	strh	r2, [r3, #0]
	}
    osDelay(10);
 8003e98:	200a      	movs	r0, #10
 8003e9a:	f007 fa59 	bl	800b350 <osDelay>
	get_data();//JY61P获取数据
 8003e9e:	e753      	b.n	8003d48 <StartImuTask+0xc>
 8003ea0:	2000312c 	.word	0x2000312c
 8003ea4:	20002a24 	.word	0x20002a24
 8003ea8:	42c80000 	.word	0x42c80000
 8003eac:	20003534 	.word	0x20003534
 8003eb0:	200082e0 	.word	0x200082e0
 8003eb4:	20002a3c 	.word	0x20002a3c
 8003eb8:	20003538 	.word	0x20003538
 8003ebc:	200028b4 	.word	0x200028b4
 8003ec0:	2000288c 	.word	0x2000288c
 8003ec4:	20003544 	.word	0x20003544
 8003ec8:	20003570 	.word	0x20003570
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
  int nomsg = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if(cmd_getFlag == 1){
 8003edc:	4b78      	ldr	r3, [pc, #480]	@ (80040c0 <StartMotorTask+0x1f0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 80c4 	bne.w	800406e <StartMotorTask+0x19e>
		  angular_temp = cmd_get_msg.angular.z ; //获取/cmd_vel的角速度,rad/s
 8003ee6:	4b77      	ldr	r3, [pc, #476]	@ (80040c4 <StartMotorTask+0x1f4>)
 8003ee8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f7fc fe6a 	bl	8000bc8 <__aeabi_d2f>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4a74      	ldr	r2, [pc, #464]	@ (80040c8 <StartMotorTask+0x1f8>)
 8003ef8:	6013      	str	r3, [r2, #0]
		  linear_temp = cmd_get_msg.linear.x ;   //获取/cmd_vel的线速度.m/s
 8003efa:	4b72      	ldr	r3, [pc, #456]	@ (80040c4 <StartMotorTask+0x1f4>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7fc fe60 	bl	8000bc8 <__aeabi_d2f>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4a70      	ldr	r2, [pc, #448]	@ (80040cc <StartMotorTask+0x1fc>)
 8003f0c:	6013      	str	r3, [r2, #0]
		  //将转换好的小车�?�度分量为左右轮速度
		  left_speed = (linear_temp - 0.5f*angular_temp*D)*ratio ;//运动学�?�解
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <StartMotorTask+0x1fc>)
 8003f10:	ed93 7a00 	vldr	s14, [r3]
 8003f14:	4b6c      	ldr	r3, [pc, #432]	@ (80040c8 <StartMotorTask+0x1f8>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003f1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003f22:	4b6b      	ldr	r3, [pc, #428]	@ (80040d0 <StartMotorTask+0x200>)
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f30:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <StartMotorTask+0x204>)
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	4b67      	ldr	r3, [pc, #412]	@ (80040d8 <StartMotorTask+0x208>)
 8003f3c:	edc3 7a00 	vstr	s15, [r3]
		  right_speed = (linear_temp + 0.5f*angular_temp*D)*ratio ;
 8003f40:	4b61      	ldr	r3, [pc, #388]	@ (80040c8 <StartMotorTask+0x1f8>)
 8003f42:	edd3 7a00 	vldr	s15, [r3]
 8003f46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f4e:	4b60      	ldr	r3, [pc, #384]	@ (80040d0 <StartMotorTask+0x200>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f58:	4b5c      	ldr	r3, [pc, #368]	@ (80040cc <StartMotorTask+0x1fc>)
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f62:	4b5c      	ldr	r3, [pc, #368]	@ (80040d4 <StartMotorTask+0x204>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80040dc <StartMotorTask+0x20c>)
 8003f6e:	edc3 7a00 	vstr	s15, [r3]

		  if(left_speed > 0.6)			left_speed = 0.6;
 8003f72:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <StartMotorTask+0x208>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc faf6 	bl	8000568 <__aeabi_f2d>
 8003f7c:	a34c      	add	r3, pc, #304	@ (adr r3, 80040b0 <StartMotorTask+0x1e0>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc fdd9 	bl	8000b38 <__aeabi_dcmpgt>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <StartMotorTask+0xc4>
 8003f8c:	4b52      	ldr	r3, [pc, #328]	@ (80040d8 <StartMotorTask+0x208>)
 8003f8e:	4a54      	ldr	r2, [pc, #336]	@ (80040e0 <StartMotorTask+0x210>)
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e00f      	b.n	8003fb4 <StartMotorTask+0xe4>
		  else if(left_speed < -0.6)	left_speed = -0.6;
 8003f94:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <StartMotorTask+0x208>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc fae5 	bl	8000568 <__aeabi_f2d>
 8003f9e:	a346      	add	r3, pc, #280	@ (adr r3, 80040b8 <StartMotorTask+0x1e8>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc fdaa 	bl	8000afc <__aeabi_dcmplt>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <StartMotorTask+0xe4>
 8003fae:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <StartMotorTask+0x208>)
 8003fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80040e4 <StartMotorTask+0x214>)
 8003fb2:	601a      	str	r2, [r3, #0]
		  if(right_speed > 0.6)		right_speed = 0.6;
 8003fb4:	4b49      	ldr	r3, [pc, #292]	@ (80040dc <StartMotorTask+0x20c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fc fad5 	bl	8000568 <__aeabi_f2d>
 8003fbe:	a33c      	add	r3, pc, #240	@ (adr r3, 80040b0 <StartMotorTask+0x1e0>)
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f7fc fdb8 	bl	8000b38 <__aeabi_dcmpgt>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <StartMotorTask+0x106>
 8003fce:	4b43      	ldr	r3, [pc, #268]	@ (80040dc <StartMotorTask+0x20c>)
 8003fd0:	4a43      	ldr	r2, [pc, #268]	@ (80040e0 <StartMotorTask+0x210>)
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e00f      	b.n	8003ff6 <StartMotorTask+0x126>
		  else if(right_speed < -0.6)	right_speed = -0.6;
 8003fd6:	4b41      	ldr	r3, [pc, #260]	@ (80040dc <StartMotorTask+0x20c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fac4 	bl	8000568 <__aeabi_f2d>
 8003fe0:	a335      	add	r3, pc, #212	@ (adr r3, 80040b8 <StartMotorTask+0x1e8>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fd89 	bl	8000afc <__aeabi_dcmplt>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <StartMotorTask+0x126>
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <StartMotorTask+0x20c>)
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80040e4 <StartMotorTask+0x214>)
 8003ff4:	601a      	str	r2, [r3, #0]

	      left_output = PID_Incremental_Calc(&speedpid_1, left_speed, motor1.speed);
 8003ff6:	4b38      	ldr	r3, [pc, #224]	@ (80040d8 <StartMotorTask+0x208>)
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80040e8 <StartMotorTask+0x218>)
 8003ffe:	ed93 7a03 	vldr	s14, [r3, #12]
 8004002:	eef0 0a47 	vmov.f32	s1, s14
 8004006:	eeb0 0a67 	vmov.f32	s0, s15
 800400a:	4838      	ldr	r0, [pc, #224]	@ (80040ec <StartMotorTask+0x21c>)
 800400c:	f7ff fc80 	bl	8003910 <PID_Incremental_Calc>
 8004010:	eef0 7a40 	vmov.f32	s15, s0
 8004014:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <StartMotorTask+0x220>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
	      right_output = PID_Incremental_Calc(&speedpid_2, right_speed, motor2.speed);
 800401a:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <StartMotorTask+0x20c>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <StartMotorTask+0x224>)
 8004022:	ed93 7a03 	vldr	s14, [r3, #12]
 8004026:	eef0 0a47 	vmov.f32	s1, s14
 800402a:	eeb0 0a67 	vmov.f32	s0, s15
 800402e:	4832      	ldr	r0, [pc, #200]	@ (80040f8 <StartMotorTask+0x228>)
 8004030:	f7ff fc6e 	bl	8003910 <PID_Incremental_Calc>
 8004034:	eef0 7a40 	vmov.f32	s15, s0
 8004038:	4b30      	ldr	r3, [pc, #192]	@ (80040fc <StartMotorTask+0x22c>)
 800403a:	edc3 7a00 	vstr	s15, [r3]

		  left_motor_control(left_output);
 800403e:	4b2c      	ldr	r3, [pc, #176]	@ (80040f0 <StartMotorTask+0x220>)
 8004040:	edd3 7a00 	vldr	s15, [r3]
 8004044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004048:	ee17 0a90 	vmov	r0, s15
 800404c:	f7fd fbde 	bl	800180c <left_motor_control>
		  right_motor_control(right_output);
 8004050:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <StartMotorTask+0x22c>)
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405a:	ee17 0a90 	vmov	r0, s15
 800405e:	f7fd fc0f 	bl	8001880 <right_motor_control>

//		  left_motor_control(left_output);
//		  right_motor_control(right_output);

		  nomsg = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
		  cmd_getFlag = 0;
 8004066:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <StartMotorTask+0x1f0>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e01b      	b.n	80040a6 <StartMotorTask+0x1d6>
	  }
	  else{
		  nomsg ++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3301      	adds	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
		  if(nomsg >= 100){
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b63      	cmp	r3, #99	@ 0x63
 8004078:	dd15      	ble.n	80040a6 <StartMotorTask+0x1d6>
			  left_output = left_speed = right_output = right_speed = 0;
 800407a:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <StartMotorTask+0x20c>)
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	4b16      	ldr	r3, [pc, #88]	@ (80040dc <StartMotorTask+0x20c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <StartMotorTask+0x22c>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <StartMotorTask+0x22c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a12      	ldr	r2, [pc, #72]	@ (80040d8 <StartMotorTask+0x208>)
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <StartMotorTask+0x208>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <StartMotorTask+0x220>)
 8004098:	6013      	str	r3, [r2, #0]
			  left_motor_control(0);
 800409a:	2000      	movs	r0, #0
 800409c:	f7fd fbb6 	bl	800180c <left_motor_control>
			  right_motor_control(0);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fd fbed 	bl	8001880 <right_motor_control>
		  }
	  }

    osDelay(5);
 80040a6:	2005      	movs	r0, #5
 80040a8:	f007 f952 	bl	800b350 <osDelay>
	  if(cmd_getFlag == 1){
 80040ac:	e716      	b.n	8003edc <StartMotorTask+0xc>
 80040ae:	bf00      	nop
 80040b0:	33333333 	.word	0x33333333
 80040b4:	3fe33333 	.word	0x3fe33333
 80040b8:	33333333 	.word	0x33333333
 80040bc:	bfe33333 	.word	0xbfe33333
 80040c0:	20003528 	.word	0x20003528
 80040c4:	20003228 	.word	0x20003228
 80040c8:	20003530 	.word	0x20003530
 80040cc:	2000352c 	.word	0x2000352c
 80040d0:	20002380 	.word	0x20002380
 80040d4:	2000237c 	.word	0x2000237c
 80040d8:	20003534 	.word	0x20003534
 80040dc:	20003538 	.word	0x20003538
 80040e0:	3f19999a 	.word	0x3f19999a
 80040e4:	bf19999a 	.word	0xbf19999a
 80040e8:	20002a24 	.word	0x20002a24
 80040ec:	20003544 	.word	0x20003544
 80040f0:	2000353c 	.word	0x2000353c
 80040f4:	20002a3c 	.word	0x20002a3c
 80040f8:	20003570 	.word	0x20003570
 80040fc:	20003540 	.word	0x20003540

08004100 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
  /* Infinite loop */
  for(;;)
  {
	  if(start_sign == 1){
 8004108:	4b04      	ldr	r3, [pc, #16]	@ (800411c <StartOledTask+0x1c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <StartOledTask+0x14>
		  PID_oled();
 8004110:	f000 fa8a 	bl	8004628 <PID_oled>
//		  speed_oled();
//		  odom_oled();
	  }
    osDelay(100);
 8004114:	2064      	movs	r0, #100	@ 0x64
 8004116:	f007 f91b 	bl	800b350 <osDelay>
	  if(start_sign == 1){
 800411a:	e7f5      	b.n	8004108 <StartOledTask+0x8>
 800411c:	20002ebc 	.word	0x20002ebc

08004120 <micro_ros_init>:
  /* USER CODE END StartOledTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void micro_ros_init(void){
 8004120:	b5b0      	push	{r4, r5, r7, lr}
 8004122:	b08e      	sub	sp, #56	@ 0x38
 8004124:	af02      	add	r7, sp, #8
	 printf("hello mirco_ros\r\n");
 8004126:	4822      	ldr	r0, [pc, #136]	@ (80041b0 <micro_ros_init+0x90>)
 8004128:	f019 f82a 	bl	801d180 <puts>
		  rmw_uros_set_custom_transport(
 800412c:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <micro_ros_init+0x94>)
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <micro_ros_init+0x98>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	4b21      	ldr	r3, [pc, #132]	@ (80041bc <micro_ros_init+0x9c>)
 8004136:	4a22      	ldr	r2, [pc, #136]	@ (80041c0 <micro_ros_init+0xa0>)
 8004138:	4922      	ldr	r1, [pc, #136]	@ (80041c4 <micro_ros_init+0xa4>)
 800413a:	2001      	movs	r0, #1
 800413c:	f00f f98a 	bl	8013454 <rmw_uros_set_custom_transport>
		    cubemx_transport_open,
		    cubemx_transport_close,
		    cubemx_transport_write,
		    cubemx_transport_read);

		  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8004140:	f107 031c 	add.w	r3, r7, #28
 8004144:	4618      	mov	r0, r3
 8004146:	f00e fd5f 	bl	8012c08 <rcutils_get_zero_initialized_allocator>
		  freeRTOS_allocator.allocate = microros_allocate;
 800414a:	4b1f      	ldr	r3, [pc, #124]	@ (80041c8 <micro_ros_init+0xa8>)
 800414c:	61fb      	str	r3, [r7, #28]
		  freeRTOS_allocator.deallocate = microros_deallocate;
 800414e:	4b1f      	ldr	r3, [pc, #124]	@ (80041cc <micro_ros_init+0xac>)
 8004150:	623b      	str	r3, [r7, #32]
		  freeRTOS_allocator.reallocate = microros_reallocate;
 8004152:	4b1f      	ldr	r3, [pc, #124]	@ (80041d0 <micro_ros_init+0xb0>)
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
		  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8004156:	4b1f      	ldr	r3, [pc, #124]	@ (80041d4 <micro_ros_init+0xb4>)
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28

		  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800415a:	f107 031c 	add.w	r3, r7, #28
 800415e:	4618      	mov	r0, r3
 8004160:	f00e fd60 	bl	8012c24 <rcutils_set_default_allocator>
 8004164:	4603      	mov	r3, r0
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <micro_ros_init+0x5a>
		      printf("Error on default allocators (line %d)\n", __LINE__);
 8004170:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8004174:	4818      	ldr	r0, [pc, #96]	@ (80041d8 <micro_ros_init+0xb8>)
 8004176:	f018 ff9b 	bl	801d0b0 <iprintf>
		  }

		  allocator = rcl_get_default_allocator();
 800417a:	4c18      	ldr	r4, [pc, #96]	@ (80041dc <micro_ros_init+0xbc>)
 800417c:	463b      	mov	r3, r7
 800417e:	4618      	mov	r0, r3
 8004180:	f00e fd6e 	bl	8012c60 <rcutils_get_default_allocator>
 8004184:	4625      	mov	r5, r4
 8004186:	463c      	mov	r4, r7
 8004188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800418a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	602b      	str	r3, [r5, #0]

		  //create init_options
		  rclc_support_init(&support, 0, NULL, &allocator);
 8004190:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <micro_ros_init+0xbc>)
 8004192:	2200      	movs	r2, #0
 8004194:	2100      	movs	r1, #0
 8004196:	4812      	ldr	r0, [pc, #72]	@ (80041e0 <micro_ros_init+0xc0>)
 8004198:	f00c f9ce 	bl	8010538 <rclc_support_init>

		  // create node
		  rclc_node_init_default(&node, "cubemx_node", "", &support);
 800419c:	4b10      	ldr	r3, [pc, #64]	@ (80041e0 <micro_ros_init+0xc0>)
 800419e:	4a11      	ldr	r2, [pc, #68]	@ (80041e4 <micro_ros_init+0xc4>)
 80041a0:	4911      	ldr	r1, [pc, #68]	@ (80041e8 <micro_ros_init+0xc8>)
 80041a2:	4812      	ldr	r0, [pc, #72]	@ (80041ec <micro_ros_init+0xcc>)
 80041a4:	f00c fade 	bl	8010764 <rclc_node_init_default>
}
 80041a8:	bf00      	nop
 80041aa:	3730      	adds	r7, #48	@ 0x30
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}
 80041b0:	08022054 	.word	0x08022054
 80041b4:	0800640d 	.word	0x0800640d
 80041b8:	080063a5 	.word	0x080063a5
 80041bc:	08006385 	.word	0x08006385
 80041c0:	08006359 	.word	0x08006359
 80041c4:	20008328 	.word	0x20008328
 80041c8:	08006091 	.word	0x08006091
 80041cc:	080060d5 	.word	0x080060d5
 80041d0:	0800610d 	.word	0x0800610d
 80041d4:	08006179 	.word	0x08006179
 80041d8:	08022068 	.word	0x08022068
 80041dc:	20002ef8 	.word	0x20002ef8
 80041e0:	20002ec4 	.word	0x20002ec4
 80041e4:	08022090 	.word	0x08022090
 80041e8:	08022094 	.word	0x08022094
 80041ec:	20002f0c 	.word	0x20002f0c

080041f0 <hx_ros_init>:

void hx_ros_init(void){
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
	// create publisher
	rclc_publisher_init_default(
 80041f6:	f011 f9af 	bl	8015558 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <hx_ros_init+0xa0>)
 80041fe:	4925      	ldr	r1, [pc, #148]	@ (8004294 <hx_ros_init+0xa4>)
 8004200:	4825      	ldr	r0, [pc, #148]	@ (8004298 <hx_ros_init+0xa8>)
 8004202:	f00c fb6f 	bl	80108e4 <rclc_publisher_init_default>
	&hx_publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");
	hx_send_msg.data = 0;
 8004206:	4b25      	ldr	r3, [pc, #148]	@ (800429c <hx_ros_init+0xac>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

	const char * subscriber_name = "hx_topic";
 800420c:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <hx_ros_init+0xb0>)
 800420e:	60fb      	str	r3, [r7, #12]
	// Initialize a reliable subscriber
	rcl_ret_t rc = rclc_subscription_init_default(
 8004210:	f011 f9a2 	bl	8015558 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	491e      	ldr	r1, [pc, #120]	@ (8004294 <hx_ros_init+0xa4>)
 800421a:	4822      	ldr	r0, [pc, #136]	@ (80042a4 <hx_ros_init+0xb4>)
 800421c:	f00c fb96 	bl	801094c <rclc_subscription_init_default>
 8004220:	60b8      	str	r0, [r7, #8]
	  &hx_subscriber, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), subscriber_name);
	if (RCL_RET_OK != rc) {
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <hx_ros_init+0x48>
		 printf("Error subscription_init (line %d) (ret %d)\r\n", __LINE__,rc);
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	f240 213f 	movw	r1, #575	@ 0x23f
 800422e:	481e      	ldr	r0, [pc, #120]	@ (80042a8 <hx_ros_init+0xb8>)
 8004230:	f018 ff3e 	bl	801d0b0 <iprintf>
		 while(1){
			 NVIC_SystemReset();
 8004234:	f7ff fb56 	bl	80038e4 <__NVIC_SystemReset>
			 osDelay(200);
		 }
	}
	RCCHECK(rclc_executor_init(&hx_executor, &support.context, 1, &allocator));
 8004238:	4b1c      	ldr	r3, [pc, #112]	@ (80042ac <hx_ros_init+0xbc>)
 800423a:	2201      	movs	r2, #1
 800423c:	491c      	ldr	r1, [pc, #112]	@ (80042b0 <hx_ros_init+0xc0>)
 800423e:	481d      	ldr	r0, [pc, #116]	@ (80042b4 <hx_ros_init+0xc4>)
 8004240:	f00b feb2 	bl	800ffa8 <rclc_executor_init>
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <hx_ros_init+0x6e>
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	f240 2145 	movw	r1, #581	@ 0x245
 8004252:	4819      	ldr	r0, [pc, #100]	@ (80042b8 <hx_ros_init+0xc8>)
 8004254:	f018 ff2c 	bl	801d0b0 <iprintf>
 8004258:	2000      	movs	r0, #0
 800425a:	f008 f81d 	bl	800c298 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&hx_executor, &hx_subscriber, &hx_get_msg, &subscription_callback, ON_NEW_DATA));
 800425e:	2300      	movs	r3, #0
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <hx_ros_init+0xcc>)
 8004264:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <hx_ros_init+0xd0>)
 8004266:	490f      	ldr	r1, [pc, #60]	@ (80042a4 <hx_ros_init+0xb4>)
 8004268:	4812      	ldr	r0, [pc, #72]	@ (80042b4 <hx_ros_init+0xc4>)
 800426a:	f00b ff0d 	bl	8010088 <rclc_executor_add_subscription>
 800426e:	6038      	str	r0, [r7, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <hx_ros_init+0x98>
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	f240 2146 	movw	r1, #582	@ 0x246
 800427c:	480e      	ldr	r0, [pc, #56]	@ (80042b8 <hx_ros_init+0xc8>)
 800427e:	f018 ff17 	bl	801d0b0 <iprintf>
 8004282:	2000      	movs	r0, #0
 8004284:	f008 f808 	bl	800c298 <vTaskDelete>
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	080220a0 	.word	0x080220a0
 8004294:	20002f0c 	.word	0x20002f0c
 8004298:	20002f14 	.word	0x20002f14
 800429c:	20002f18 	.word	0x20002f18
 80042a0:	080220b4 	.word	0x080220b4
 80042a4:	20002f1c 	.word	0x20002f1c
 80042a8:	080220c0 	.word	0x080220c0
 80042ac:	20002ef8 	.word	0x20002ef8
 80042b0:	20002ec4 	.word	0x20002ec4
 80042b4:	20002f20 	.word	0x20002f20
 80042b8:	080220f0 	.word	0x080220f0
 80042bc:	08003add 	.word	0x08003add
 80042c0:	20002fb0 	.word	0x20002fb0

080042c4 <imu_ros_init>:

void imu_ros_init(void){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
	imu_send_msg.data.data = &string_memory[0];
 80042c8:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <imu_ros_init+0x2c>)
 80042ca:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <imu_ros_init+0x30>)
 80042cc:	601a      	str	r2, [r3, #0]
	imu_send_msg.data.size = 0;
 80042ce:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <imu_ros_init+0x2c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
	imu_send_msg.data.capacity = STRING_LEN;
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <imu_ros_init+0x2c>)
 80042d6:	22c8      	movs	r2, #200	@ 0xc8
 80042d8:	609a      	str	r2, [r3, #8]

	// create publisher
	rclc_publisher_init_default(
 80042da:	f011 f955 	bl	8015588 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80042de:	4602      	mov	r2, r0
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <imu_ros_init+0x34>)
 80042e2:	4906      	ldr	r1, [pc, #24]	@ (80042fc <imu_ros_init+0x38>)
 80042e4:	4806      	ldr	r0, [pc, #24]	@ (8004300 <imu_ros_init+0x3c>)
 80042e6:	f00c fafd 	bl	80108e4 <rclc_publisher_init_default>
	&imu_publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	"imu_publisher");
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20002fb8 	.word	0x20002fb8
 80042f4:	20002fc4 	.word	0x20002fc4
 80042f8:	0802211c 	.word	0x0802211c
 80042fc:	20002f0c 	.word	0x20002f0c
 8004300:	20002fb4 	.word	0x20002fb4

08004304 <arm_ros_init>:

void arm_ros_init(void){
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
	arm_get_msg.data.data = &arm_getdata[0];
 800430a:	4b26      	ldr	r3, [pc, #152]	@ (80043a4 <arm_ros_init+0xa0>)
 800430c:	4a26      	ldr	r2, [pc, #152]	@ (80043a8 <arm_ros_init+0xa4>)
 800430e:	601a      	str	r2, [r3, #0]
	arm_get_msg.data.size = 0;
 8004310:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <arm_ros_init+0xa0>)
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
	arm_get_msg.data.capacity = 100;
 8004316:	4b23      	ldr	r3, [pc, #140]	@ (80043a4 <arm_ros_init+0xa0>)
 8004318:	2264      	movs	r2, #100	@ 0x64
 800431a:	609a      	str	r2, [r3, #8]

	const char * arm_subscriber_name = "arm_topic";
 800431c:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <arm_ros_init+0xa8>)
 800431e:	60fb      	str	r3, [r7, #12]
	// Initialize a reliable subscriber
	rcl_ret_t rc_arm = rclc_subscription_init_default(
 8004320:	f011 f932 	bl	8015588 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8004324:	4602      	mov	r2, r0
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4921      	ldr	r1, [pc, #132]	@ (80043b0 <arm_ros_init+0xac>)
 800432a:	4822      	ldr	r0, [pc, #136]	@ (80043b4 <arm_ros_init+0xb0>)
 800432c:	f00c fb0e 	bl	801094c <rclc_subscription_init_default>
 8004330:	60b8      	str	r0, [r7, #8]
	  &arm_subscriber, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String), arm_subscriber_name);
	if (RCL_RET_OK != rc_arm) {
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <arm_ros_init+0x48>
		 printf("Error subscription_init (line %d) (ret %d)\n", __LINE__,rc_arm);
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	f240 2161 	movw	r1, #609	@ 0x261
 800433e:	481e      	ldr	r0, [pc, #120]	@ (80043b8 <arm_ros_init+0xb4>)
 8004340:	f018 feb6 	bl	801d0b0 <iprintf>
		 while(1){
			 osDelay(200);
 8004344:	20c8      	movs	r0, #200	@ 0xc8
 8004346:	f007 f803 	bl	800b350 <osDelay>
 800434a:	e7fb      	b.n	8004344 <arm_ros_init+0x40>
		 }
	}
	RCCHECK(rclc_executor_init(&arm_executor, &support.context, 1, &allocator));
 800434c:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <arm_ros_init+0xb8>)
 800434e:	2201      	movs	r2, #1
 8004350:	491b      	ldr	r1, [pc, #108]	@ (80043c0 <arm_ros_init+0xbc>)
 8004352:	481c      	ldr	r0, [pc, #112]	@ (80043c4 <arm_ros_init+0xc0>)
 8004354:	f00b fe28 	bl	800ffa8 <rclc_executor_init>
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <arm_ros_init+0x6e>
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	f240 2166 	movw	r1, #614	@ 0x266
 8004366:	4818      	ldr	r0, [pc, #96]	@ (80043c8 <arm_ros_init+0xc4>)
 8004368:	f018 fea2 	bl	801d0b0 <iprintf>
 800436c:	2000      	movs	r0, #0
 800436e:	f007 ff93 	bl	800c298 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&arm_executor, &arm_subscriber, &arm_get_msg, &subscription_callback_arm, ON_NEW_DATA));
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <arm_ros_init+0xc8>)
 8004378:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <arm_ros_init+0xa0>)
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <arm_ros_init+0xb0>)
 800437c:	4811      	ldr	r0, [pc, #68]	@ (80043c4 <arm_ros_init+0xc0>)
 800437e:	f00b fe83 	bl	8010088 <rclc_executor_add_subscription>
 8004382:	6038      	str	r0, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <arm_ros_init+0x98>
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	f240 2167 	movw	r1, #615	@ 0x267
 8004390:	480d      	ldr	r0, [pc, #52]	@ (80043c8 <arm_ros_init+0xc4>)
 8004392:	f018 fe8d 	bl	801d0b0 <iprintf>
 8004396:	2000      	movs	r0, #0
 8004398:	f007 ff7e 	bl	800c298 <vTaskDelete>

}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20003120 	.word	0x20003120
 80043a8:	2000312c 	.word	0x2000312c
 80043ac:	0802212c 	.word	0x0802212c
 80043b0:	20002f0c 	.word	0x20002f0c
 80043b4:	2000308c 	.word	0x2000308c
 80043b8:	08022138 	.word	0x08022138
 80043bc:	20002ef8 	.word	0x20002ef8
 80043c0:	20002ec4 	.word	0x20002ec4
 80043c4:	20003090 	.word	0x20003090
 80043c8:	080220f0 	.word	0x080220f0
 80043cc:	08003af5 	.word	0x08003af5

080043d0 <cmd_ros_init>:

void cmd_ros_init(void){
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b08b      	sub	sp, #44	@ 0x2c
 80043d4:	af02      	add	r7, sp, #8
	odom_msg.header.frame_id = micro_ros_string_utilities_set(odom_msg.header.frame_id, "odom");
 80043d6:	4c40      	ldr	r4, [pc, #256]	@ (80044d8 <cmd_ros_init+0x108>)
 80043d8:	4638      	mov	r0, r7
 80043da:	4b3f      	ldr	r3, [pc, #252]	@ (80044d8 <cmd_ros_init+0x108>)
 80043dc:	4a3f      	ldr	r2, [pc, #252]	@ (80044dc <cmd_ros_init+0x10c>)
 80043de:	9200      	str	r2, [sp, #0]
 80043e0:	3308      	adds	r3, #8
 80043e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e4:	f00b f994 	bl	800f710 <micro_ros_string_utilities_set>
 80043e8:	f104 0308 	add.w	r3, r4, #8
 80043ec:	463a      	mov	r2, r7
 80043ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80043f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	odom_msg.child_frame_id = micro_ros_string_utilities_set(odom_msg.child_frame_id, "base_link");
 80043f4:	4c38      	ldr	r4, [pc, #224]	@ (80044d8 <cmd_ros_init+0x108>)
 80043f6:	4638      	mov	r0, r7
 80043f8:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <cmd_ros_init+0x108>)
 80043fa:	4a39      	ldr	r2, [pc, #228]	@ (80044e0 <cmd_ros_init+0x110>)
 80043fc:	9200      	str	r2, [sp, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004402:	f00b f985 	bl	800f710 <micro_ros_string_utilities_set>
 8004406:	f104 0314 	add.w	r3, r4, #20
 800440a:	463a      	mov	r2, r7
 800440c:	ca07      	ldmia	r2, {r0, r1, r2}
 800440e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// create publisher
	rclc_publisher_init_default(
	&odom_publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
 8004412:	f00b f9a3 	bl	800f75c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8004416:	4603      	mov	r3, r0
	rclc_publisher_init_default(
 8004418:	461a      	mov	r2, r3
 800441a:	4b30      	ldr	r3, [pc, #192]	@ (80044dc <cmd_ros_init+0x10c>)
 800441c:	4931      	ldr	r1, [pc, #196]	@ (80044e4 <cmd_ros_init+0x114>)
 800441e:	4832      	ldr	r0, [pc, #200]	@ (80044e8 <cmd_ros_init+0x118>)
 8004420:	f00c fa60 	bl	80108e4 <rclc_publisher_init_default>
	"odom");

	const char * cmd_subscriber_name = "cmd_vel";
 8004424:	4b31      	ldr	r3, [pc, #196]	@ (80044ec <cmd_ros_init+0x11c>)
 8004426:	61fb      	str	r3, [r7, #28]
	// Initialize a reliable subscriber
	rcl_ret_t rc_cmd = rclc_subscription_init_default(
 8004428:	f009 fcd6 	bl	800ddd8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800442c:	4602      	mov	r2, r0
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	492c      	ldr	r1, [pc, #176]	@ (80044e4 <cmd_ros_init+0x114>)
 8004432:	482f      	ldr	r0, [pc, #188]	@ (80044f0 <cmd_ros_init+0x120>)
 8004434:	f00c fa8a 	bl	801094c <rclc_subscription_init_default>
 8004438:	61b8      	str	r0, [r7, #24]
	  &cmd_subscriber, &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), cmd_subscriber_name);
	if (RCL_RET_OK != rc_cmd) {
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <cmd_ros_init+0x84>
		 printf("Error subscription_init (line %d) (ret %d)\n", __LINE__,rc_cmd);
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	f44f 711f 	mov.w	r1, #636	@ 0x27c
 8004446:	482b      	ldr	r0, [pc, #172]	@ (80044f4 <cmd_ros_init+0x124>)
 8004448:	f018 fe32 	bl	801d0b0 <iprintf>
		 while(1){
			 osDelay(200);
 800444c:	20c8      	movs	r0, #200	@ 0xc8
 800444e:	f006 ff7f 	bl	800b350 <osDelay>
 8004452:	e7fb      	b.n	800444c <cmd_ros_init+0x7c>
		 }
	}
	RCCHECK(rclc_executor_init(&cmd_executor, &support.context, 1, &allocator));
 8004454:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <cmd_ros_init+0x128>)
 8004456:	2201      	movs	r2, #1
 8004458:	4928      	ldr	r1, [pc, #160]	@ (80044fc <cmd_ros_init+0x12c>)
 800445a:	4829      	ldr	r0, [pc, #164]	@ (8004500 <cmd_ros_init+0x130>)
 800445c:	f00b fda4 	bl	800ffa8 <rclc_executor_init>
 8004460:	6178      	str	r0, [r7, #20]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <cmd_ros_init+0xaa>
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	f240 2181 	movw	r1, #641	@ 0x281
 800446e:	4825      	ldr	r0, [pc, #148]	@ (8004504 <cmd_ros_init+0x134>)
 8004470:	f018 fe1e 	bl	801d0b0 <iprintf>
 8004474:	2000      	movs	r0, #0
 8004476:	f007 ff0f 	bl	800c298 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&cmd_executor, &cmd_subscriber, &cmd_get_msg, &subscription_callback_cmd, ON_NEW_DATA));
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <cmd_ros_init+0x138>)
 8004480:	4a22      	ldr	r2, [pc, #136]	@ (800450c <cmd_ros_init+0x13c>)
 8004482:	491b      	ldr	r1, [pc, #108]	@ (80044f0 <cmd_ros_init+0x120>)
 8004484:	481e      	ldr	r0, [pc, #120]	@ (8004500 <cmd_ros_init+0x130>)
 8004486:	f00b fdff 	bl	8010088 <rclc_executor_add_subscription>
 800448a:	6138      	str	r0, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <cmd_ros_init+0xd4>
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	f240 2182 	movw	r1, #642	@ 0x282
 8004498:	481a      	ldr	r0, [pc, #104]	@ (8004504 <cmd_ros_init+0x134>)
 800449a:	f018 fe09 	bl	801d0b0 <iprintf>
 800449e:	2000      	movs	r0, #0
 80044a0:	f007 fefa 	bl	800c298 <vTaskDelete>

	PID_Init(&speedpid_1, 49, 31, 0, 100);//P I D left
 80044a4:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8004510 <cmd_ros_init+0x140>
 80044a8:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8004514 <cmd_ros_init+0x144>
 80044ac:	eef3 0a0f 	vmov.f32	s1, #63	@ 0x41f80000  31.0
 80044b0:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004518 <cmd_ros_init+0x148>
 80044b4:	4819      	ldr	r0, [pc, #100]	@ (800451c <cmd_ros_init+0x14c>)
 80044b6:	f7ff faa8 	bl	8003a0a <PID_Init>
	PID_Init(&speedpid_2, 49, 31, 0, 100);//P I D right
 80044ba:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8004510 <cmd_ros_init+0x140>
 80044be:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8004514 <cmd_ros_init+0x144>
 80044c2:	eef3 0a0f 	vmov.f32	s1, #63	@ 0x41f80000  31.0
 80044c6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8004518 <cmd_ros_init+0x148>
 80044ca:	4815      	ldr	r0, [pc, #84]	@ (8004520 <cmd_ros_init+0x150>)
 80044cc:	f7ff fa9d 	bl	8003a0a <PID_Init>
}
 80044d0:	bf00      	nop
 80044d2:	3724      	adds	r7, #36	@ 0x24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd90      	pop	{r4, r7, pc}
 80044d8:	20003260 	.word	0x20003260
 80044dc:	08022164 	.word	0x08022164
 80044e0:	0802216c 	.word	0x0802216c
 80044e4:	20002f0c 	.word	0x20002f0c
 80044e8:	20003258 	.word	0x20003258
 80044ec:	08022178 	.word	0x08022178
 80044f0:	20003190 	.word	0x20003190
 80044f4:	08022138 	.word	0x08022138
 80044f8:	20002ef8 	.word	0x20002ef8
 80044fc:	20002ec4 	.word	0x20002ec4
 8004500:	20003198 	.word	0x20003198
 8004504:	080220f0 	.word	0x080220f0
 8004508:	08003b0d 	.word	0x08003b0d
 800450c:	20003228 	.word	0x20003228
 8004510:	42c80000 	.word	0x42c80000
 8004514:	00000000 	.word	0x00000000
 8004518:	42440000 	.word	0x42440000
 800451c:	20003544 	.word	0x20003544
 8004520:	20003570 	.word	0x20003570

08004524 <odom_getandsend>:

unsigned long previousMillis = 0; // 上一次打印的时间
unsigned long interval = 50;      // 间隔时间，单位为毫秒
void odom_getandsend(void){
 8004524:	b5b0      	push	{r4, r5, r7, lr}
 8004526:	b08c      	sub	sp, #48	@ 0x30
 8004528:	af00      	add	r7, sp, #0
    // 用于获取当前的时间戳，并将其存储在消息的头部�????????
    int64_t stamp = rmw_uros_epoch_millis();
 800452a:	f010 f9f7 	bl	801491c <rmw_uros_epoch_millis>
 800452e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    // 获取机器人的位置和�?�度信息，并将其存储在一个ROS消息（odom_msg）中
    odom_t odom = *get_odom();
 8004532:	f7fd f8f3 	bl	800171c <get_odom>
 8004536:	4603      	mov	r3, r0
 8004538:	1d3c      	adds	r4, r7, #4
 800453a:	461d      	mov	r5, r3
 800453c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800453e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	6023      	str	r3, [r4, #0]
    odom_msg.header.stamp.sec = (int32_t)(stamp / 1000); // 秒部�????????
 8004548:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800454c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f7fc fb88 	bl	8000c68 <__aeabi_ldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4b2f      	ldr	r3, [pc, #188]	@ (800461c <odom_getandsend+0xf8>)
 800455e:	601a      	str	r2, [r3, #0]
    odom_msg.header.stamp.nanosec = (uint32_t)((stamp % 1000) * 1000000); // 纳秒部分
 8004560:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	f7fc fb7c 	bl	8000c68 <__aeabi_ldivmod>
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <odom_getandsend+0xfc>)
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	4a29      	ldr	r2, [pc, #164]	@ (800461c <odom_getandsend+0xf8>)
 8004578:	6053      	str	r3, [r2, #4]
    odom_msg.pose.pose.position.x = odom.x;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb fff3 	bl	8000568 <__aeabi_f2d>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4925      	ldr	r1, [pc, #148]	@ (800461c <odom_getandsend+0xf8>)
 8004588:	e9c1 2308 	strd	r2, r3, [r1, #32]
    odom_msg.pose.pose.position.y = odom.y;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb ffea 	bl	8000568 <__aeabi_f2d>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4920      	ldr	r1, [pc, #128]	@ (800461c <odom_getandsend+0xf8>)
 800459a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    odom_msg.pose.pose.orientation.w = odom.quaternion.w;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb ffe1 	bl	8000568 <__aeabi_f2d>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	491c      	ldr	r1, [pc, #112]	@ (800461c <odom_getandsend+0xf8>)
 80045ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    odom_msg.pose.pose.orientation.x = odom.quaternion.x;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ffd8 	bl	8000568 <__aeabi_f2d>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4917      	ldr	r1, [pc, #92]	@ (800461c <odom_getandsend+0xf8>)
 80045be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    odom_msg.pose.pose.orientation.y = odom.quaternion.y;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fb ffcf 	bl	8000568 <__aeabi_f2d>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4913      	ldr	r1, [pc, #76]	@ (800461c <odom_getandsend+0xf8>)
 80045d0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    odom_msg.pose.pose.orientation.z = odom.quaternion.z;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ffc6 	bl	8000568 <__aeabi_f2d>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	490e      	ldr	r1, [pc, #56]	@ (800461c <odom_getandsend+0xf8>)
 80045e2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    odom_msg.twist.twist.angular.z = odom.angular_speed;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fb ffbd 	bl	8000568 <__aeabi_f2d>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	490a      	ldr	r1, [pc, #40]	@ (800461c <odom_getandsend+0xf8>)
 80045f4:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
    odom_msg.twist.twist.linear.x = odom.linear_speed;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb ffb4 	bl	8000568 <__aeabi_f2d>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4905      	ldr	r1, [pc, #20]	@ (800461c <odom_getandsend+0xf8>)
 8004606:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

    rcl_publish(&odom_publisher, &odom_msg, NULL);
 800460a:	2200      	movs	r2, #0
 800460c:	4903      	ldr	r1, [pc, #12]	@ (800461c <odom_getandsend+0xf8>)
 800460e:	4805      	ldr	r0, [pc, #20]	@ (8004624 <odom_getandsend+0x100>)
 8004610:	f00c ff58 	bl	80114c4 <rcl_publish>
}
 8004614:	bf00      	nop
 8004616:	3730      	adds	r7, #48	@ 0x30
 8004618:	46bd      	mov	sp, r7
 800461a:	bdb0      	pop	{r4, r5, r7, pc}
 800461c:	20003260 	.word	0x20003260
 8004620:	000f4240 	.word	0x000f4240
 8004624:	20003258 	.word	0x20003258

08004628 <PID_oled>:

void PID_oled(void){
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af02      	add	r7, sp, #8
	if(oled_begin_flag == 0){
 800462e:	4b52      	ldr	r3, [pc, #328]	@ (8004778 <PID_oled+0x150>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d142      	bne.n	80046bc <PID_oled+0x94>
		OLED_ShowString(0, 0, "PID_1", 16, 0);
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2310      	movs	r3, #16
 800463c:	4a4f      	ldr	r2, [pc, #316]	@ (800477c <PID_oled+0x154>)
 800463e:	2100      	movs	r1, #0
 8004640:	2000      	movs	r0, #0
 8004642:	f7fd fabd 	bl	8001bc0 <OLED_ShowString>
		OLED_ShowString(0, 2, "P:", 16, 0);
 8004646:	2300      	movs	r3, #0
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2310      	movs	r3, #16
 800464c:	4a4c      	ldr	r2, [pc, #304]	@ (8004780 <PID_oled+0x158>)
 800464e:	2102      	movs	r1, #2
 8004650:	2000      	movs	r0, #0
 8004652:	f7fd fab5 	bl	8001bc0 <OLED_ShowString>
		OLED_ShowString(0, 4, "I:", 16, 0);
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2310      	movs	r3, #16
 800465c:	4a49      	ldr	r2, [pc, #292]	@ (8004784 <PID_oled+0x15c>)
 800465e:	2104      	movs	r1, #4
 8004660:	2000      	movs	r0, #0
 8004662:	f7fd faad 	bl	8001bc0 <OLED_ShowString>
		OLED_ShowString(0, 6, "D:", 16, 0);
 8004666:	2300      	movs	r3, #0
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2310      	movs	r3, #16
 800466c:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <PID_oled+0x160>)
 800466e:	2106      	movs	r1, #6
 8004670:	2000      	movs	r0, #0
 8004672:	f7fd faa5 	bl	8001bc0 <OLED_ShowString>

		OLED_ShowString(70, 0, "PID_2", 16, 0);
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2310      	movs	r3, #16
 800467c:	4a43      	ldr	r2, [pc, #268]	@ (800478c <PID_oled+0x164>)
 800467e:	2100      	movs	r1, #0
 8004680:	2046      	movs	r0, #70	@ 0x46
 8004682:	f7fd fa9d 	bl	8001bc0 <OLED_ShowString>
		OLED_ShowString(70, 2, "P:", 16, 0);
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2310      	movs	r3, #16
 800468c:	4a3c      	ldr	r2, [pc, #240]	@ (8004780 <PID_oled+0x158>)
 800468e:	2102      	movs	r1, #2
 8004690:	2046      	movs	r0, #70	@ 0x46
 8004692:	f7fd fa95 	bl	8001bc0 <OLED_ShowString>
		OLED_ShowString(70, 4, "I:", 16, 0);
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2310      	movs	r3, #16
 800469c:	4a39      	ldr	r2, [pc, #228]	@ (8004784 <PID_oled+0x15c>)
 800469e:	2104      	movs	r1, #4
 80046a0:	2046      	movs	r0, #70	@ 0x46
 80046a2:	f7fd fa8d 	bl	8001bc0 <OLED_ShowString>
		OLED_ShowString(70, 6, "D:", 16, 0);
 80046a6:	2300      	movs	r3, #0
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2310      	movs	r3, #16
 80046ac:	4a36      	ldr	r2, [pc, #216]	@ (8004788 <PID_oled+0x160>)
 80046ae:	2106      	movs	r1, #6
 80046b0:	2046      	movs	r0, #70	@ 0x46
 80046b2:	f7fd fa85 	bl	8001bc0 <OLED_ShowString>
		oled_begin_flag = 1;
 80046b6:	4b30      	ldr	r3, [pc, #192]	@ (8004778 <PID_oled+0x150>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
	}

	 OLED_Showdecimal(20, 2, speedpid_1.Kp, 3, 1, 16, 0);
 80046bc:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <PID_oled+0x168>)
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	2310      	movs	r3, #16
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	2301      	movs	r3, #1
 80046cc:	2203      	movs	r2, #3
 80046ce:	eeb0 0a67 	vmov.f32	s0, s15
 80046d2:	2102      	movs	r1, #2
 80046d4:	2014      	movs	r0, #20
 80046d6:	f7fd fabd 	bl	8001c54 <OLED_Showdecimal>
	 OLED_Showdecimal(20, 4, speedpid_1.Ki, 3, 1, 16, 0);
 80046da:	4b2d      	ldr	r3, [pc, #180]	@ (8004790 <PID_oled+0x168>)
 80046dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	2310      	movs	r3, #16
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2301      	movs	r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	eeb0 0a67 	vmov.f32	s0, s15
 80046f0:	2104      	movs	r1, #4
 80046f2:	2014      	movs	r0, #20
 80046f4:	f7fd faae 	bl	8001c54 <OLED_Showdecimal>
	 OLED_Showdecimal(20, 6, speedpid_1.Kd, 3, 1, 16, 0);
 80046f8:	4b25      	ldr	r3, [pc, #148]	@ (8004790 <PID_oled+0x168>)
 80046fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80046fe:	2300      	movs	r3, #0
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	2310      	movs	r3, #16
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2301      	movs	r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	eeb0 0a67 	vmov.f32	s0, s15
 800470e:	2106      	movs	r1, #6
 8004710:	2014      	movs	r0, #20
 8004712:	f7fd fa9f 	bl	8001c54 <OLED_Showdecimal>

	 OLED_Showdecimal(90, 2, speedpid_2.Kp, 3, 1, 16, 0);
 8004716:	4b1f      	ldr	r3, [pc, #124]	@ (8004794 <PID_oled+0x16c>)
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	2300      	movs	r3, #0
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	2310      	movs	r3, #16
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2301      	movs	r3, #1
 8004726:	2203      	movs	r2, #3
 8004728:	eeb0 0a67 	vmov.f32	s0, s15
 800472c:	2102      	movs	r1, #2
 800472e:	205a      	movs	r0, #90	@ 0x5a
 8004730:	f7fd fa90 	bl	8001c54 <OLED_Showdecimal>
	 OLED_Showdecimal(90, 4, speedpid_2.Ki, 3, 1, 16, 0);
 8004734:	4b17      	ldr	r3, [pc, #92]	@ (8004794 <PID_oled+0x16c>)
 8004736:	edd3 7a01 	vldr	s15, [r3, #4]
 800473a:	2300      	movs	r3, #0
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	2310      	movs	r3, #16
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2301      	movs	r3, #1
 8004744:	2203      	movs	r2, #3
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	2104      	movs	r1, #4
 800474c:	205a      	movs	r0, #90	@ 0x5a
 800474e:	f7fd fa81 	bl	8001c54 <OLED_Showdecimal>
	 OLED_Showdecimal(90, 6, speedpid_2.Kd, 3, 1, 16, 0);
 8004752:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <PID_oled+0x16c>)
 8004754:	edd3 7a02 	vldr	s15, [r3, #8]
 8004758:	2300      	movs	r3, #0
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	2310      	movs	r3, #16
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2301      	movs	r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	eeb0 0a67 	vmov.f32	s0, s15
 8004768:	2106      	movs	r1, #6
 800476a:	205a      	movs	r0, #90	@ 0x5a
 800476c:	f7fd fa72 	bl	8001c54 <OLED_Showdecimal>
//	  OLED_Showdecimal(80, 6, right_output, 2, 3, 16, 0);
//	}else{
//	  OLED_ShowChar(70, 6, '-', 16, 0);
//	  OLED_Showdecimal(80, 6, -right_output, 2, 3, 16, 0);
//	}
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20002ec0 	.word	0x20002ec0
 800477c:	08022180 	.word	0x08022180
 8004780:	08022188 	.word	0x08022188
 8004784:	0802218c 	.word	0x0802218c
 8004788:	08022190 	.word	0x08022190
 800478c:	08022194 	.word	0x08022194
 8004790:	20003544 	.word	0x20003544
 8004794:	20003570 	.word	0x20003570

08004798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	@ 0x30
 800479c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479e:	f107 031c 	add.w	r3, r7, #28
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	4b3e      	ldr	r3, [pc, #248]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	4a3d      	ldr	r2, [pc, #244]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80047be:	4b3b      	ldr	r3, [pc, #236]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	4a36      	ldr	r2, [pc, #216]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	4b30      	ldr	r3, [pc, #192]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	4a2f      	ldr	r2, [pc, #188]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f6:	4b2d      	ldr	r3, [pc, #180]	@ (80048ac <MX_GPIO_Init+0x114>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a28      	ldr	r2, [pc, #160]	@ (80048ac <MX_GPIO_Init+0x114>)
 800480c:	f043 0310 	orr.w	r3, r3, #16
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	6313      	str	r3, [r2, #48]	@ 0x30
 800482e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <MX_GPIO_Init+0x114>)
 8004844:	f043 0308 	orr.w	r3, r3, #8
 8004848:	6313      	str	r3, [r2, #48]	@ 0x30
 800484a:	4b18      	ldr	r3, [pc, #96]	@ (80048ac <MX_GPIO_Init+0x114>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8004856:	2200      	movs	r2, #0
 8004858:	2103      	movs	r1, #3
 800485a:	4815      	ldr	r0, [pc, #84]	@ (80048b0 <MX_GPIO_Init+0x118>)
 800485c:	f002 fd8a 	bl	8007374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	2103      	movs	r1, #3
 8004864:	4813      	ldr	r0, [pc, #76]	@ (80048b4 <MX_GPIO_Init+0x11c>)
 8004866:	f002 fd85 	bl	8007374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 800486a:	2303      	movs	r3, #3
 800486c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486e:	2301      	movs	r3, #1
 8004870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	2300      	movs	r3, #0
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004876:	2300      	movs	r3, #0
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	480b      	ldr	r0, [pc, #44]	@ (80048b0 <MX_GPIO_Init+0x118>)
 8004882:	f002 fbdb 	bl	800703c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 8004886:	2303      	movs	r3, #3
 8004888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800488a:	2301      	movs	r3, #1
 800488c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004892:	2300      	movs	r3, #0
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004896:	f107 031c 	add.w	r3, r7, #28
 800489a:	4619      	mov	r1, r3
 800489c:	4805      	ldr	r0, [pc, #20]	@ (80048b4 <MX_GPIO_Init+0x11c>)
 800489e:	f002 fbcd 	bl	800703c <HAL_GPIO_Init>

}
 80048a2:	bf00      	nop
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40020800 	.word	0x40020800
 80048b4:	40021000 	.word	0x40021000

080048b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048be:	4a13      	ldr	r2, [pc, #76]	@ (800490c <MX_I2C1_Init+0x54>)
 80048c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80048c2:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048c4:	4a12      	ldr	r2, [pc, #72]	@ (8004910 <MX_I2C1_Init+0x58>)
 80048c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80048ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80048da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048de:	2200      	movs	r2, #0
 80048e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80048e2:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048e8:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048f4:	4804      	ldr	r0, [pc, #16]	@ (8004908 <MX_I2C1_Init+0x50>)
 80048f6:	f002 fd57 	bl	80073a8 <HAL_I2C_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004900:	f000 fa74 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004904:	bf00      	nop
 8004906:	bd80      	pop	{r7, pc}
 8004908:	2000811c 	.word	0x2000811c
 800490c:	40005400 	.word	0x40005400
 8004910:	000186a0 	.word	0x000186a0

08004914 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	@ 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <HAL_I2C_MspInit+0x84>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d12b      	bne.n	800498e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	4b18      	ldr	r3, [pc, #96]	@ (800499c <HAL_I2C_MspInit+0x88>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	4a17      	ldr	r2, [pc, #92]	@ (800499c <HAL_I2C_MspInit+0x88>)
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	6313      	str	r3, [r2, #48]	@ 0x30
 8004946:	4b15      	ldr	r3, [pc, #84]	@ (800499c <HAL_I2C_MspInit+0x88>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004952:	23c0      	movs	r3, #192	@ 0xc0
 8004954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004956:	2312      	movs	r3, #18
 8004958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495e:	2303      	movs	r3, #3
 8004960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004962:	2304      	movs	r3, #4
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004966:	f107 0314 	add.w	r3, r7, #20
 800496a:	4619      	mov	r1, r3
 800496c:	480c      	ldr	r0, [pc, #48]	@ (80049a0 <HAL_I2C_MspInit+0x8c>)
 800496e:	f002 fb65 	bl	800703c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_I2C_MspInit+0x88>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	4a08      	ldr	r2, [pc, #32]	@ (800499c <HAL_I2C_MspInit+0x88>)
 800497c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004980:	6413      	str	r3, [r2, #64]	@ 0x40
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_I2C_MspInit+0x88>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800498e:	bf00      	nop
 8004990:	3728      	adds	r7, #40	@ 0x28
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40005400 	.word	0x40005400
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020400 	.word	0x40020400

080049a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049a8:	f001 fdfe 	bl	80065a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049ac:	f000 f840 	bl	8004a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049b0:	f7ff fef2 	bl	8004798 <MX_GPIO_Init>
  MX_DMA_Init();
 80049b4:	f7fe ff6e 	bl	8003894 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80049b8:	f000 ff00 	bl	80057bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80049bc:	f000 fed4 	bl	8005768 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80049c0:	f000 fc1a 	bl	80051f8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80049c4:	f7ff ff78 	bl	80048b8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80049c8:	f000 ff22 	bl	8005810 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80049cc:	f000 fcf2 	bl	80053b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80049d0:	f000 fd44 	bl	800545c <MX_TIM4_Init>
  MX_TIM2_Init();
 80049d4:	f000 fca0 	bl	8005318 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80049d8:	f000 ff44 	bl	8005864 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)aRxBuffer, 1);
 80049dc:	2201      	movs	r2, #1
 80049de:	490f      	ldr	r1, [pc, #60]	@ (8004a1c <main+0x78>)
 80049e0:	480f      	ldr	r0, [pc, #60]	@ (8004a20 <main+0x7c>)
 80049e2:	f005 f8e0 	bl	8009ba6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3,&rx_buff1,1);
 80049e6:	2201      	movs	r2, #1
 80049e8:	490e      	ldr	r1, [pc, #56]	@ (8004a24 <main+0x80>)
 80049ea:	480f      	ldr	r0, [pc, #60]	@ (8004a28 <main+0x84>)
 80049ec:	f005 f8db 	bl	8009ba6 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart6,&rx_buff1,1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);	//使能TIM1-1		左AIN
 80049f0:	2100      	movs	r1, #0
 80049f2:	480e      	ldr	r0, [pc, #56]	@ (8004a2c <main+0x88>)
 80049f4:	f003 ff60 	bl	80088b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);	//使能TIM1-2		右BIN
 80049f8:	2104      	movs	r1, #4
 80049fa:	480c      	ldr	r0, [pc, #48]	@ (8004a2c <main+0x88>)
 80049fc:	f003 ff5c 	bl	80088b8 <HAL_TIM_PWM_Start>
  Encoder_Init();
 8004a00:	f7fc fea4 	bl	800174c <Encoder_Init>

  OLED_Init();          //OLED初始	SDA-PB7  SCL-PB6
 8004a04:	f7fc ff76 	bl	80018f4 <OLED_Init>
  OLED_Clear();
 8004a08:	f7fc ffc2 	bl	8001990 <OLED_Clear>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004a0c:	f006 fbc4 	bl	800b198 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004a10:	f7ff f88e 	bl	8003b30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004a14:	f006 fbe4 	bl	800b1e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <main+0x74>
 8004a1c:	200028b8 	.word	0x200028b8
 8004a20:	200082e0 	.word	0x200082e0
 8004a24:	200028b9 	.word	0x200028b9
 8004a28:	20008370 	.word	0x20008370
 8004a2c:	200081c0 	.word	0x200081c0

08004a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b094      	sub	sp, #80	@ 0x50
 8004a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a36:	f107 0320 	add.w	r3, r7, #32
 8004a3a:	2230      	movs	r2, #48	@ 0x30
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f018 fd34 	bl	801d4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <SystemClock_Config+0xcc>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	4a27      	ldr	r2, [pc, #156]	@ (8004afc <SystemClock_Config+0xcc>)
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a64:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <SystemClock_Config+0xcc>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	4b22      	ldr	r3, [pc, #136]	@ (8004b00 <SystemClock_Config+0xd0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a21      	ldr	r2, [pc, #132]	@ (8004b00 <SystemClock_Config+0xd0>)
 8004a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <SystemClock_Config+0xd0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a96:	2302      	movs	r3, #2
 8004a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004aa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004aae:	2304      	movs	r3, #4
 8004ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ab2:	f107 0320 	add.w	r3, r7, #32
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f003 f924 	bl	8007d04 <HAL_RCC_OscConfig>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004ac2:	f000 f993 	bl	8004dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aca:	2302      	movs	r3, #2
 8004acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ad2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004ad6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ade:	f107 030c 	add.w	r3, r7, #12
 8004ae2:	2105      	movs	r1, #5
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f003 fb85 	bl	80081f4 <HAL_RCC_ClockConfig>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004af0:	f000 f97c 	bl	8004dec <Error_Handler>
  }
}
 8004af4:	bf00      	nop
 8004af6:	3750      	adds	r7, #80	@ 0x50
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40007000 	.word	0x40007000
 8004b04:	00000000 	.word	0x00000000

08004b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4aa0      	ldr	r2, [pc, #640]	@ (8004d98 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d102      	bne.n	8004b20 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004b1a:	f001 fd67 	bl	80065ec <HAL_IncTick>
	motor2.lastCount = motor2.totalCount; //记录这一次的计数�???????????

	if(start_sign)	update_bot_odom();
  }
  /* USER CODE END Callback 1 */
}
 8004b1e:	e15b      	b.n	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
  else if(htim->Instance==ENCODER_1_TIM.Instance) {//编码器输入定时器溢出中断
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b9d      	ldr	r3, [pc, #628]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d126      	bne.n	8004b7a <HAL_TIM_PeriodElapsedCallback+0x72>
	  if(COUNTERNUM_1 < 10000) motor1.overflowNum++;       //如果是向上溢�????????????
 8004b2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d809      	bhi.n	8004b4e <HAL_TIM_PeriodElapsedCallback+0x46>
 8004b3a:	4b99      	ldr	r3, [pc, #612]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b21a      	sxth	r2, r3
 8004b48:	4b95      	ldr	r3, [pc, #596]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004b4a:	811a      	strh	r2, [r3, #8]
 8004b4c:	e00f      	b.n	8004b6e <HAL_TIM_PeriodElapsedCallback+0x66>
	  else if(COUNTERNUM_1 >= 10000) motor1.overflowNum--; //如果是向下溢�????????????
 8004b4e:	4b93      	ldr	r3, [pc, #588]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d908      	bls.n	8004b6e <HAL_TIM_PeriodElapsedCallback+0x66>
 8004b5c:	4b90      	ldr	r3, [pc, #576]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	b21a      	sxth	r2, r3
 8004b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004b6c:	811a      	strh	r2, [r3, #8]
	  __HAL_TIM_SetCounter(&ENCODER_1_TIM, 10000);             //重新设定初始�????????????
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004b78:	e12e      	b.n	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
  else if(htim->Instance==ENCODER_2_TIM.Instance) {//编码器输入定时器溢出中断
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b89      	ldr	r3, [pc, #548]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d12a      	bne.n	8004bdc <HAL_TIM_PeriodElapsedCallback+0xd4>
	  int a = COUNTERNUM_2;
 8004b86:	4b87      	ldr	r3, [pc, #540]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	60fb      	str	r3, [r7, #12]
	  if(COUNTERNUM_2 < 10000) motor2.overflowNum++;       //如果是向上溢�????????????
 8004b8e:	4b85      	ldr	r3, [pc, #532]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d809      	bhi.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8004b9c:	4b82      	ldr	r3, [pc, #520]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	b21a      	sxth	r2, r3
 8004baa:	4b7f      	ldr	r3, [pc, #508]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004bac:	811a      	strh	r2, [r3, #8]
 8004bae:	e00f      	b.n	8004bd0 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  else if(COUNTERNUM_2 >= 10000) motor2.overflowNum--; //如果是向下溢�????????????
 8004bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d908      	bls.n	8004bd0 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8004bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004bc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	b21a      	sxth	r2, r3
 8004bcc:	4b76      	ldr	r3, [pc, #472]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004bce:	811a      	strh	r2, [r3, #8]
	  __HAL_TIM_SetCounter(&ENCODER_2_TIM, 10000);             //重新设定初始�????????????
 8004bd0:	4b74      	ldr	r3, [pc, #464]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004bd8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004bda:	e0fd      	b.n	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
  else if(htim->Instance==GAP_TIM.Instance) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b72      	ldr	r3, [pc, #456]	@ (8004dac <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f040 80f7 	bne.w	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
	motor1.direct = __HAL_TIM_IS_TIM_COUNTING_DOWN(&ENCODER_1_TIM);
 8004bea:	4b6c      	ldr	r3, [pc, #432]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b67      	ldr	r3, [pc, #412]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004c02:	751a      	strb	r2, [r3, #20]
	motor2.direct = __HAL_TIM_IS_TIM_COUNTING_DOWN(&ENCODER_2_TIM);
 8004c04:	4b67      	ldr	r3, [pc, #412]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b63      	ldr	r3, [pc, #396]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004c1c:	751a      	strb	r2, [r3, #20]
	motor1.totalCount = COUNTERNUM_1 + motor1.overflowNum * RELOADVALUE_1;//�???????????个周期内的�?�计数�?�等于目前计数�?�加上溢出的计数�???????????
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c24:	4b5e      	ldr	r3, [pc, #376]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004c26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b59      	ldr	r3, [pc, #356]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004c3c:	605a      	str	r2, [r3, #4]
	motor2.totalCount = COUNTERNUM_2 + motor2.overflowNum * RELOADVALUE_2;//�???????????个周期内的�?�计数�?�等于目前计数�?�加上溢出的计数�???????????
 8004c3e:	4b59      	ldr	r3, [pc, #356]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c44:	4b58      	ldr	r3, [pc, #352]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004c46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b53      	ldr	r3, [pc, #332]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004c5c:	605a      	str	r2, [r3, #4]
	motor1.speed = -(float)(motor1.totalCount - motor1.lastCount) * 3.14159 * 0.54 / 1320;
 8004c5e:	4b50      	ldr	r3, [pc, #320]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	4b4f      	ldr	r3, [pc, #316]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c70:	eef1 7a67 	vneg.f32	s15, s15
 8004c74:	ee17 3a90 	vmov	r3, s15
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fb fc75 	bl	8000568 <__aeabi_f2d>
 8004c7e:	a342      	add	r3, pc, #264	@ (adr r3, 8004d88 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fcc8 	bl	8000618 <__aeabi_dmul>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	a33f      	add	r3, pc, #252	@ (adr r3, 8004d90 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fcbf 	bl	8000618 <__aeabi_dmul>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	4b42      	ldr	r3, [pc, #264]	@ (8004db0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004ca8:	f7fb fde0 	bl	800086c <__aeabi_ddiv>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f7fb ff88 	bl	8000bc8 <__aeabi_d2f>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4a39      	ldr	r2, [pc, #228]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004cbc:	60d3      	str	r3, [r2, #12]
	motor2.speed = (float)(motor2.totalCount - motor2.lastCount)  * 3.14159 * 0.54 / 1320;
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd0:	ee17 0a90 	vmov	r0, s15
 8004cd4:	f7fb fc48 	bl	8000568 <__aeabi_f2d>
 8004cd8:	a32b      	add	r3, pc, #172	@ (adr r3, 8004d88 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f7fb fc9b 	bl	8000618 <__aeabi_dmul>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	a329      	add	r3, pc, #164	@ (adr r3, 8004d90 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f7fb fc92 	bl	8000618 <__aeabi_dmul>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004d02:	f7fb fdb3 	bl	800086c <__aeabi_ddiv>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f7fb ff5b 	bl	8000bc8 <__aeabi_d2f>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4a24      	ldr	r2, [pc, #144]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d16:	60d3      	str	r3, [r2, #12]
	if(motor1.speed >= 1.0 || motor1.speed <= -1.0)
 8004d18:	4b21      	ldr	r3, [pc, #132]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004d1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2a:	da09      	bge.n	8004d40 <HAL_TIM_PeriodElapsedCallback+0x238>
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004d2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3e:	d804      	bhi.n	8004d4a <HAL_TIM_PeriodElapsedCallback+0x242>
		motor1.speed = motor1.last_speed;
 8004d40:	4b17      	ldr	r3, [pc, #92]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004d46:	60d3      	str	r3, [r2, #12]
 8004d48:	e003      	b.n	8004d52 <HAL_TIM_PeriodElapsedCallback+0x24a>
	else	motor1.last_speed = motor1.speed;
 8004d4a:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4a14      	ldr	r2, [pc, #80]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004d50:	6113      	str	r3, [r2, #16]
	if(motor2.speed >= 1.0 || motor2.speed <= -1.0)
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d64:	da09      	bge.n	8004d7a <HAL_TIM_PeriodElapsedCallback+0x272>
 8004d66:	4b10      	ldr	r3, [pc, #64]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d68:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d6c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	d81c      	bhi.n	8004db4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
		motor2.speed = motor2.last_speed;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d80:	60d3      	str	r3, [r2, #12]
 8004d82:	e01b      	b.n	8004dbc <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8004d84:	f3af 8000 	nop.w
 8004d88:	f01b866e 	.word	0xf01b866e
 8004d8c:	400921f9 	.word	0x400921f9
 8004d90:	147ae148 	.word	0x147ae148
 8004d94:	3fe147ae 	.word	0x3fe147ae
 8004d98:	40002000 	.word	0x40002000
 8004d9c:	20008250 	.word	0x20008250
 8004da0:	20002a24 	.word	0x20002a24
 8004da4:	20008298 	.word	0x20008298
 8004da8:	20002a3c 	.word	0x20002a3c
 8004dac:	20008208 	.word	0x20008208
 8004db0:	4094a000 	.word	0x4094a000
	else	motor2.last_speed = motor2.speed;
 8004db4:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004dba:	6113      	str	r3, [r2, #16]
	motor1.lastCount = motor1.totalCount; //记录这一次的计数�???????????
 8004dbc:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a08      	ldr	r2, [pc, #32]	@ (8004de4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004dc2:	6013      	str	r3, [r2, #0]
	motor2.lastCount = motor2.totalCount; //记录这一次的计数�???????????
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a05      	ldr	r2, [pc, #20]	@ (8004de0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004dca:	6013      	str	r3, [r2, #0]
	if(start_sign)	update_bot_odom();
 8004dcc:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8004dd4:	f7fc fbb8 	bl	8001548 <update_bot_odom>
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20002a3c 	.word	0x20002a3c
 8004de4:	20002a24 	.word	0x20002a24
 8004de8:	20002ebc 	.word	0x20002ebc

08004dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004df0:	b672      	cpsid	i
}
 8004df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <Error_Handler+0x8>

08004df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <HAL_MspInit+0x54>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	4a11      	ldr	r2, [pc, #68]	@ (8004e4c <HAL_MspInit+0x54>)
 8004e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <HAL_MspInit+0x54>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e16:	607b      	str	r3, [r7, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <HAL_MspInit+0x54>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	4a0a      	ldr	r2, [pc, #40]	@ (8004e4c <HAL_MspInit+0x54>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e2a:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <HAL_MspInit+0x54>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e36:	2200      	movs	r2, #0
 8004e38:	210f      	movs	r1, #15
 8004e3a:	f06f 0001 	mvn.w	r0, #1
 8004e3e:	f001 fcd1 	bl	80067e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800

08004e50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08e      	sub	sp, #56	@ 0x38
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	4b33      	ldr	r3, [pc, #204]	@ (8004f34 <HAL_InitTick+0xe4>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	4a32      	ldr	r2, [pc, #200]	@ (8004f34 <HAL_InitTick+0xe4>)
 8004e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e70:	4b30      	ldr	r3, [pc, #192]	@ (8004f34 <HAL_InitTick+0xe4>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e7c:	f107 0210 	add.w	r2, r7, #16
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f003 fbd4 	bl	8008634 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e96:	f003 fba5 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 8004e9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e9c:	e004      	b.n	8004ea8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e9e:	f003 fba1 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <HAL_InitTick+0xe8>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	0c9b      	lsrs	r3, r3, #18
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004eb6:	4b21      	ldr	r3, [pc, #132]	@ (8004f3c <HAL_InitTick+0xec>)
 8004eb8:	4a21      	ldr	r2, [pc, #132]	@ (8004f40 <HAL_InitTick+0xf0>)
 8004eba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ebe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ec2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004eca:	4b1c      	ldr	r3, [pc, #112]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed6:	4b19      	ldr	r3, [pc, #100]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8004edc:	4817      	ldr	r0, [pc, #92]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ede:	f003 fbdb 	bl	8008698 <HAL_TIM_Base_Init>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d11b      	bne.n	8004f28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8004ef0:	4812      	ldr	r0, [pc, #72]	@ (8004f3c <HAL_InitTick+0xec>)
 8004ef2:	f003 fc21 	bl	8008738 <HAL_TIM_Base_Start_IT>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004efc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d111      	bne.n	8004f28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004f04:	202d      	movs	r0, #45	@ 0x2d
 8004f06:	f001 fc89 	bl	800681c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d808      	bhi.n	8004f22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8004f10:	2200      	movs	r2, #0
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	202d      	movs	r0, #45	@ 0x2d
 8004f16:	f001 fc65 	bl	80067e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <HAL_InitTick+0xf4>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e002      	b.n	8004f28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004f28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3738      	adds	r7, #56	@ 0x38
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	431bde83 	.word	0x431bde83
 8004f3c:	20008170 	.word	0x20008170
 8004f40:	40002000 	.word	0x40002000
 8004f44:	2000238c 	.word	0x2000238c

08004f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <NMI_Handler+0x4>

08004f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <HardFault_Handler+0x4>

08004f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f5c:	bf00      	nop
 8004f5e:	e7fd      	b.n	8004f5c <MemManage_Handler+0x4>

08004f60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <BusFault_Handler+0x4>

08004f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f6c:	bf00      	nop
 8004f6e:	e7fd      	b.n	8004f6c <UsageFault_Handler+0x4>

08004f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f84:	4802      	ldr	r0, [pc, #8]	@ (8004f90 <DMA1_Stream5_IRQHandler+0x10>)
 8004f86:	f001 fdef 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20008400 	.word	0x20008400

08004f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004f98:	4802      	ldr	r0, [pc, #8]	@ (8004fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8004f9a:	f001 fde5 	bl	8006b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20008460 	.word	0x20008460

08004fa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fac:	4802      	ldr	r0, [pc, #8]	@ (8004fb8 <TIM2_IRQHandler+0x10>)
 8004fae:	f003 fe7f 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20008208 	.word	0x20008208

08004fbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004fc0:	4802      	ldr	r0, [pc, #8]	@ (8004fcc <TIM3_IRQHandler+0x10>)
 8004fc2:	f003 fe75 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20008250 	.word	0x20008250

08004fd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004fd4:	4802      	ldr	r0, [pc, #8]	@ (8004fe0 <TIM4_IRQHandler+0x10>)
 8004fd6:	f003 fe6b 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20008298 	.word	0x20008298

08004fe4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004fe8:	4802      	ldr	r0, [pc, #8]	@ (8004ff4 <USART1_IRQHandler+0x10>)
 8004fea:	f004 ff15 	bl	8009e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200082e0 	.word	0x200082e0

08004ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ffc:	4802      	ldr	r0, [pc, #8]	@ (8005008 <USART2_IRQHandler+0x10>)
 8004ffe:	f004 ff0b 	bl	8009e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20008328 	.word	0x20008328

0800500c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005010:	4802      	ldr	r0, [pc, #8]	@ (800501c <USART3_IRQHandler+0x10>)
 8005012:	f004 ff01 	bl	8009e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20008370 	.word	0x20008370

08005020 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005024:	4802      	ldr	r0, [pc, #8]	@ (8005030 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005026:	f003 fe43 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20008170 	.word	0x20008170

08005034 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005038:	4802      	ldr	r0, [pc, #8]	@ (8005044 <USART6_IRQHandler+0x10>)
 800503a:	f004 feed 	bl	8009e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200083b8 	.word	0x200083b8

08005048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return 1;
 800504c:	2301      	movs	r3, #1
}
 800504e:	4618      	mov	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <_kill>:

int _kill(int pid, int sig)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005062:	f018 facd 	bl	801d600 <__errno>
 8005066:	4603      	mov	r3, r0
 8005068:	2216      	movs	r2, #22
 800506a:	601a      	str	r2, [r3, #0]
  return -1;
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_exit>:

void _exit (int status)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005080:	f04f 31ff 	mov.w	r1, #4294967295
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ffe7 	bl	8005058 <_kill>
  while (1) {}    /* Make sure we hang here */
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <_exit+0x12>

0800508e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e00a      	b.n	80050b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050a0:	f3af 8000 	nop.w
 80050a4:	4601      	mov	r1, r0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	60ba      	str	r2, [r7, #8]
 80050ac:	b2ca      	uxtb	r2, r1
 80050ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	dbf0      	blt.n	80050a0 <_read+0x12>
  }

  return len;
 80050be:	687b      	ldr	r3, [r7, #4]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e009      	b.n	80050ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	60ba      	str	r2, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fcc8 	bl	8003a78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3301      	adds	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	dbf1      	blt.n	80050da <_write+0x12>
  }
  return len;
 80050f6:	687b      	ldr	r3, [r7, #4]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_close>:

int _close(int file)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005128:	605a      	str	r2, [r3, #4]
  return 0;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <_isatty>:

int _isatty(int file)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005140:	2301      	movs	r3, #1
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005170:	4a14      	ldr	r2, [pc, #80]	@ (80051c4 <_sbrk+0x5c>)
 8005172:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <_sbrk+0x60>)
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800517c:	4b13      	ldr	r3, [pc, #76]	@ (80051cc <_sbrk+0x64>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005184:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <_sbrk+0x64>)
 8005186:	4a12      	ldr	r2, [pc, #72]	@ (80051d0 <_sbrk+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800518a:	4b10      	ldr	r3, [pc, #64]	@ (80051cc <_sbrk+0x64>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	429a      	cmp	r2, r3
 8005196:	d207      	bcs.n	80051a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005198:	f018 fa32 	bl	801d600 <__errno>
 800519c:	4603      	mov	r3, r0
 800519e:	220c      	movs	r2, #12
 80051a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	e009      	b.n	80051bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051a8:	4b08      	ldr	r3, [pc, #32]	@ (80051cc <_sbrk+0x64>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ae:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <_sbrk+0x64>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	4a05      	ldr	r2, [pc, #20]	@ (80051cc <_sbrk+0x64>)
 80051b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20020000 	.word	0x20020000
 80051c8:	00000400 	.word	0x00000400
 80051cc:	200081bc 	.word	0x200081bc
 80051d0:	20018360 	.word	0x20018360

080051d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051d8:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <SystemInit+0x20>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051de:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <SystemInit+0x20>)
 80051e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b092      	sub	sp, #72	@ 0x48
 80051fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	611a      	str	r2, [r3, #16]
 8005218:	615a      	str	r2, [r3, #20]
 800521a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	2220      	movs	r2, #32
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f018 f942 	bl	801d4ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005228:	4b39      	ldr	r3, [pc, #228]	@ (8005310 <MX_TIM1_Init+0x118>)
 800522a:	4a3a      	ldr	r2, [pc, #232]	@ (8005314 <MX_TIM1_Init+0x11c>)
 800522c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 800522e:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005230:	f244 129f 	movw	r2, #16799	@ 0x419f
 8005234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005236:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800523c:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <MX_TIM1_Init+0x118>)
 800523e:	2263      	movs	r2, #99	@ 0x63
 8005240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005242:	4b33      	ldr	r3, [pc, #204]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005244:	2200      	movs	r2, #0
 8005246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005248:	4b31      	ldr	r3, [pc, #196]	@ (8005310 <MX_TIM1_Init+0x118>)
 800524a:	2200      	movs	r2, #0
 800524c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800524e:	4b30      	ldr	r3, [pc, #192]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005250:	2200      	movs	r2, #0
 8005252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005254:	482e      	ldr	r0, [pc, #184]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005256:	f003 fadf 	bl	8008818 <HAL_TIM_PWM_Init>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005260:	f7ff fdc4 	bl	8004dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005264:	2300      	movs	r3, #0
 8005266:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005268:	2300      	movs	r3, #0
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800526c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005270:	4619      	mov	r1, r3
 8005272:	4827      	ldr	r0, [pc, #156]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005274:	f004 fada 	bl	800982c <HAL_TIMEx_MasterConfigSynchronization>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800527e:	f7ff fdb5 	bl	8004dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005282:	2360      	movs	r3, #96	@ 0x60
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800528a:	2300      	movs	r3, #0
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800528e:	2300      	movs	r3, #0
 8005290:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800529e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052a2:	2200      	movs	r2, #0
 80052a4:	4619      	mov	r1, r3
 80052a6:	481a      	ldr	r0, [pc, #104]	@ (8005310 <MX_TIM1_Init+0x118>)
 80052a8:	f003 fdf2 	bl	8008e90 <HAL_TIM_PWM_ConfigChannel>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80052b2:	f7ff fd9b 	bl	8004dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80052b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ba:	2204      	movs	r2, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4814      	ldr	r0, [pc, #80]	@ (8005310 <MX_TIM1_Init+0x118>)
 80052c0:	f003 fde6 	bl	8008e90 <HAL_TIM_PWM_ConfigChannel>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80052ca:	f7ff fd8f 	bl	8004dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80052e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80052ec:	1d3b      	adds	r3, r7, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4807      	ldr	r0, [pc, #28]	@ (8005310 <MX_TIM1_Init+0x118>)
 80052f2:	f004 fb17 	bl	8009924 <HAL_TIMEx_ConfigBreakDeadTime>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80052fc:	f7ff fd76 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005300:	4803      	ldr	r0, [pc, #12]	@ (8005310 <MX_TIM1_Init+0x118>)
 8005302:	f000 f9d5 	bl	80056b0 <HAL_TIM_MspPostInit>

}
 8005306:	bf00      	nop
 8005308:	3748      	adds	r7, #72	@ 0x48
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200081c0 	.word	0x200081c0
 8005314:	40010000 	.word	0x40010000

08005318 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800532c:	463b      	mov	r3, r7
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005334:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005336:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800533a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800533c:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800533e:	f240 628f 	movw	r2, #1679	@ 0x68f
 8005342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005344:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800534a:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800534c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005350:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005352:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005354:	2200      	movs	r2, #0
 8005356:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005358:	4b15      	ldr	r3, [pc, #84]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800535e:	4814      	ldr	r0, [pc, #80]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005360:	f003 f99a 	bl	8008698 <HAL_TIM_Base_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800536a:	f7ff fd3f 	bl	8004dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800536e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	4619      	mov	r1, r3
 800537a:	480d      	ldr	r0, [pc, #52]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800537c:	f003 fe4a 	bl	8009014 <HAL_TIM_ConfigClockSource>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005386:	f7ff fd31 	bl	8004dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005392:	463b      	mov	r3, r7
 8005394:	4619      	mov	r1, r3
 8005396:	4806      	ldr	r0, [pc, #24]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005398:	f004 fa48 	bl	800982c <HAL_TIMEx_MasterConfigSynchronization>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80053a2:	f7ff fd23 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80053a6:	bf00      	nop
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20008208 	.word	0x20008208

080053b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	@ 0x30
 80053b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053ba:	f107 030c 	add.w	r3, r7, #12
 80053be:	2224      	movs	r2, #36	@ 0x24
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f018 f872 	bl	801d4ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053d0:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <MX_TIM3_Init+0xa0>)
 80053d2:	4a21      	ldr	r2, [pc, #132]	@ (8005458 <MX_TIM3_Init+0xa4>)
 80053d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80053d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005454 <MX_TIM3_Init+0xa0>)
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <MX_TIM3_Init+0xa0>)
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80053e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005454 <MX_TIM3_Init+0xa0>)
 80053e4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80053e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005454 <MX_TIM3_Init+0xa0>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053f0:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <MX_TIM3_Init+0xa0>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80053f6:	2303      	movs	r3, #3
 80053f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800540a:	2300      	movs	r3, #0
 800540c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800540e:	2301      	movs	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005412:	2300      	movs	r3, #0
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	4619      	mov	r1, r3
 8005420:	480c      	ldr	r0, [pc, #48]	@ (8005454 <MX_TIM3_Init+0xa0>)
 8005422:	f003 fb11 	bl	8008a48 <HAL_TIM_Encoder_Init>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800542c:	f7ff fcde 	bl	8004dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005430:	2300      	movs	r3, #0
 8005432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4805      	ldr	r0, [pc, #20]	@ (8005454 <MX_TIM3_Init+0xa0>)
 800543e:	f004 f9f5 	bl	800982c <HAL_TIMEx_MasterConfigSynchronization>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005448:	f7ff fcd0 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800544c:	bf00      	nop
 800544e:	3730      	adds	r7, #48	@ 0x30
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20008250 	.word	0x20008250
 8005458:	40000400 	.word	0x40000400

0800545c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08c      	sub	sp, #48	@ 0x30
 8005460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	2224      	movs	r2, #36	@ 0x24
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f018 f81e 	bl	801d4ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005478:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <MX_TIM4_Init+0xa0>)
 800547a:	4a21      	ldr	r2, [pc, #132]	@ (8005500 <MX_TIM4_Init+0xa4>)
 800547c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800547e:	4b1f      	ldr	r3, [pc, #124]	@ (80054fc <MX_TIM4_Init+0xa0>)
 8005480:	2200      	movs	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005484:	4b1d      	ldr	r3, [pc, #116]	@ (80054fc <MX_TIM4_Init+0xa0>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800548a:	4b1c      	ldr	r3, [pc, #112]	@ (80054fc <MX_TIM4_Init+0xa0>)
 800548c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005490:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005492:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <MX_TIM4_Init+0xa0>)
 8005494:	2200      	movs	r2, #0
 8005496:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005498:	4b18      	ldr	r3, [pc, #96]	@ (80054fc <MX_TIM4_Init+0xa0>)
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800549e:	2303      	movs	r3, #3
 80054a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054a6:	2301      	movs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054b2:	2300      	movs	r3, #0
 80054b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054b6:	2301      	movs	r3, #1
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054ba:	2300      	movs	r3, #0
 80054bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4619      	mov	r1, r3
 80054c8:	480c      	ldr	r0, [pc, #48]	@ (80054fc <MX_TIM4_Init+0xa0>)
 80054ca:	f003 fabd 	bl	8008a48 <HAL_TIM_Encoder_Init>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80054d4:	f7ff fc8a 	bl	8004dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054d8:	2300      	movs	r3, #0
 80054da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4805      	ldr	r0, [pc, #20]	@ (80054fc <MX_TIM4_Init+0xa0>)
 80054e6:	f004 f9a1 	bl	800982c <HAL_TIMEx_MasterConfigSynchronization>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80054f0:	f7ff fc7c 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80054f4:	bf00      	nop
 80054f6:	3730      	adds	r7, #48	@ 0x30
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20008298 	.word	0x20008298
 8005500:	40000800 	.word	0x40000800

08005504 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0b      	ldr	r2, [pc, #44]	@ (8005540 <HAL_TIM_PWM_MspInit+0x3c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d10d      	bne.n	8005532 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <HAL_TIM_PWM_MspInit+0x40>)
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_TIM_PWM_MspInit+0x40>)
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6453      	str	r3, [r2, #68]	@ 0x44
 8005526:	4b07      	ldr	r3, [pc, #28]	@ (8005544 <HAL_TIM_PWM_MspInit+0x40>)
 8005528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40023800 	.word	0x40023800

08005548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005558:	d115      	bne.n	8005586 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <HAL_TIM_Base_MspInit+0x48>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	4a0b      	ldr	r2, [pc, #44]	@ (8005590 <HAL_TIM_Base_MspInit+0x48>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6413      	str	r3, [r2, #64]	@ 0x40
 800556a:	4b09      	ldr	r3, [pc, #36]	@ (8005590 <HAL_TIM_Base_MspInit+0x48>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005576:	2200      	movs	r2, #0
 8005578:	2106      	movs	r1, #6
 800557a:	201c      	movs	r0, #28
 800557c:	f001 f932 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005580:	201c      	movs	r0, #28
 8005582:	f001 f94b 	bl	800681c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800

08005594 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	@ 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3a      	ldr	r2, [pc, #232]	@ (800569c <HAL_TIM_Encoder_MspInit+0x108>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d134      	bne.n	8005620 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	4a38      	ldr	r2, [pc, #224]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055c6:	4b36      	ldr	r3, [pc, #216]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	4b32      	ldr	r3, [pc, #200]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	4a31      	ldr	r2, [pc, #196]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e2:	4b2f      	ldr	r3, [pc, #188]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055ee:	23c0      	movs	r3, #192	@ 0xc0
 80055f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f2:	2302      	movs	r3, #2
 80055f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055f6:	2301      	movs	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fa:	2300      	movs	r3, #0
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055fe:	2302      	movs	r3, #2
 8005600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005602:	f107 031c 	add.w	r3, r7, #28
 8005606:	4619      	mov	r1, r3
 8005608:	4826      	ldr	r0, [pc, #152]	@ (80056a4 <HAL_TIM_Encoder_MspInit+0x110>)
 800560a:	f001 fd17 	bl	800703c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	2105      	movs	r1, #5
 8005612:	201d      	movs	r0, #29
 8005614:	f001 f8e6 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005618:	201d      	movs	r0, #29
 800561a:	f001 f8ff 	bl	800681c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800561e:	e039      	b.n	8005694 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM4)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a20      	ldr	r2, [pc, #128]	@ (80056a8 <HAL_TIM_Encoder_MspInit+0x114>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d134      	bne.n	8005694 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	4b1c      	ldr	r3, [pc, #112]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	4a1b      	ldr	r2, [pc, #108]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	6413      	str	r3, [r2, #64]	@ 0x40
 800563a:	4b19      	ldr	r3, [pc, #100]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	4a14      	ldr	r2, [pc, #80]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	6313      	str	r3, [r2, #48]	@ 0x30
 8005656:	4b12      	ldr	r3, [pc, #72]	@ (80056a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005662:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005668:	2302      	movs	r3, #2
 800566a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800566c:	2301      	movs	r3, #1
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005670:	2300      	movs	r3, #0
 8005672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005674:	2302      	movs	r3, #2
 8005676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005678:	f107 031c 	add.w	r3, r7, #28
 800567c:	4619      	mov	r1, r3
 800567e:	480b      	ldr	r0, [pc, #44]	@ (80056ac <HAL_TIM_Encoder_MspInit+0x118>)
 8005680:	f001 fcdc 	bl	800703c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005684:	2200      	movs	r2, #0
 8005686:	2105      	movs	r1, #5
 8005688:	201e      	movs	r0, #30
 800568a:	f001 f8ab 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800568e:	201e      	movs	r0, #30
 8005690:	f001 f8c4 	bl	800681c <HAL_NVIC_EnableIRQ>
}
 8005694:	bf00      	nop
 8005696:	3730      	adds	r7, #48	@ 0x30
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40000400 	.word	0x40000400
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40020000 	.word	0x40020000
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40020c00 	.word	0x40020c00

080056b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	@ 0x28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b8:	f107 0314 	add.w	r3, r7, #20
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a22      	ldr	r2, [pc, #136]	@ (8005758 <HAL_TIM_MspPostInit+0xa8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d13d      	bne.n	800574e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	4b21      	ldr	r3, [pc, #132]	@ (800575c <HAL_TIM_MspPostInit+0xac>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	4a20      	ldr	r2, [pc, #128]	@ (800575c <HAL_TIM_MspPostInit+0xac>)
 80056dc:	f043 0310 	orr.w	r3, r3, #16
 80056e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80056e2:	4b1e      	ldr	r3, [pc, #120]	@ (800575c <HAL_TIM_MspPostInit+0xac>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <HAL_TIM_MspPostInit+0xac>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	4a19      	ldr	r2, [pc, #100]	@ (800575c <HAL_TIM_MspPostInit+0xac>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80056fe:	4b17      	ldr	r3, [pc, #92]	@ (800575c <HAL_TIM_MspPostInit+0xac>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800570a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800570e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005710:	2302      	movs	r3, #2
 8005712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005718:	2300      	movs	r3, #0
 800571a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800571c:	2301      	movs	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	4619      	mov	r1, r3
 8005726:	480e      	ldr	r0, [pc, #56]	@ (8005760 <HAL_TIM_MspPostInit+0xb0>)
 8005728:	f001 fc88 	bl	800703c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800572c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005732:	2302      	movs	r3, #2
 8005734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573a:	2300      	movs	r3, #0
 800573c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800573e:	2301      	movs	r3, #1
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005742:	f107 0314 	add.w	r3, r7, #20
 8005746:	4619      	mov	r1, r3
 8005748:	4806      	ldr	r0, [pc, #24]	@ (8005764 <HAL_TIM_MspPostInit+0xb4>)
 800574a:	f001 fc77 	bl	800703c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800574e:	bf00      	nop
 8005750:	3728      	adds	r7, #40	@ 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40023800 	.word	0x40023800
 8005760:	40021000 	.word	0x40021000
 8005764:	40020000 	.word	0x40020000

08005768 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800576c:	4b11      	ldr	r3, [pc, #68]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 800576e:	4a12      	ldr	r2, [pc, #72]	@ (80057b8 <MX_USART1_UART_Init+0x50>)
 8005770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005772:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 8005774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800577a:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 800577c:	2200      	movs	r2, #0
 800577e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005780:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 8005782:	2200      	movs	r2, #0
 8005784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005786:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 8005788:	2200      	movs	r2, #0
 800578a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800578c:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 800578e:	220c      	movs	r2, #12
 8005790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005792:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 800579a:	2200      	movs	r2, #0
 800579c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800579e:	4805      	ldr	r0, [pc, #20]	@ (80057b4 <MX_USART1_UART_Init+0x4c>)
 80057a0:	f004 f926 	bl	80099f0 <HAL_UART_Init>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80057aa:	f7ff fb1f 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	200082e0 	.word	0x200082e0
 80057b8:	40011000 	.word	0x40011000

080057bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057c0:	4b11      	ldr	r3, [pc, #68]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057c2:	4a12      	ldr	r2, [pc, #72]	@ (800580c <MX_USART2_UART_Init+0x50>)
 80057c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80057c6:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057c8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80057cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80057ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80057d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80057da:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80057e0:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057e2:	220c      	movs	r2, #12
 80057e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80057f2:	4805      	ldr	r0, [pc, #20]	@ (8005808 <MX_USART2_UART_Init+0x4c>)
 80057f4:	f004 f8fc 	bl	80099f0 <HAL_UART_Init>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80057fe:	f7ff faf5 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20008328 	.word	0x20008328
 800580c:	40004400 	.word	0x40004400

08005810 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005814:	4b11      	ldr	r3, [pc, #68]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 8005816:	4a12      	ldr	r2, [pc, #72]	@ (8005860 <MX_USART3_UART_Init+0x50>)
 8005818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800581a:	4b10      	ldr	r3, [pc, #64]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 800581c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005822:	4b0e      	ldr	r3, [pc, #56]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 8005824:	2200      	movs	r2, #0
 8005826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005828:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 800582a:	2200      	movs	r2, #0
 800582c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800582e:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005834:	4b09      	ldr	r3, [pc, #36]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 8005836:	220c      	movs	r2, #12
 8005838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800583a:	4b08      	ldr	r3, [pc, #32]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005840:	4b06      	ldr	r3, [pc, #24]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005846:	4805      	ldr	r0, [pc, #20]	@ (800585c <MX_USART3_UART_Init+0x4c>)
 8005848:	f004 f8d2 	bl	80099f0 <HAL_UART_Init>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005852:	f7ff facb 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20008370 	.word	0x20008370
 8005860:	40004800 	.word	0x40004800

08005864 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 800586a:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <MX_USART6_UART_Init+0x50>)
 800586c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800586e:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 8005870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005874:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005876:	4b0e      	ldr	r3, [pc, #56]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 8005878:	2200      	movs	r2, #0
 800587a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 800587e:	2200      	movs	r2, #0
 8005880:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005882:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 8005884:	2200      	movs	r2, #0
 8005886:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 800588a:	220c      	movs	r2, #12
 800588c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800588e:	4b08      	ldr	r3, [pc, #32]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 8005890:	2200      	movs	r2, #0
 8005892:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005894:	4b06      	ldr	r3, [pc, #24]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800589a:	4805      	ldr	r0, [pc, #20]	@ (80058b0 <MX_USART6_UART_Init+0x4c>)
 800589c:	f004 f8a8 	bl	80099f0 <HAL_UART_Init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80058a6:	f7ff faa1 	bl	8004dec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	200083b8 	.word	0x200083b8
 80058b4:	40011400 	.word	0x40011400

080058b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b090      	sub	sp, #64	@ 0x40
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4aa5      	ldr	r2, [pc, #660]	@ (8005b6c <HAL_UART_MspInit+0x2b4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d135      	bne.n	8005946 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058de:	4ba4      	ldr	r3, [pc, #656]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	4aa3      	ldr	r2, [pc, #652]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80058ea:	4ba1      	ldr	r3, [pc, #644]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	4b9d      	ldr	r3, [pc, #628]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	4a9c      	ldr	r2, [pc, #624]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6313      	str	r3, [r2, #48]	@ 0x30
 8005906:	4b9a      	ldr	r3, [pc, #616]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005912:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005918:	2302      	movs	r3, #2
 800591a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2300      	movs	r3, #0
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005920:	2303      	movs	r3, #3
 8005922:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005924:	2307      	movs	r3, #7
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005928:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800592c:	4619      	mov	r1, r3
 800592e:	4891      	ldr	r0, [pc, #580]	@ (8005b74 <HAL_UART_MspInit+0x2bc>)
 8005930:	f001 fb84 	bl	800703c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2105      	movs	r1, #5
 8005938:	2025      	movs	r0, #37	@ 0x25
 800593a:	f000 ff53 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800593e:	2025      	movs	r0, #37	@ 0x25
 8005940:	f000 ff6c 	bl	800681c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005944:	e10d      	b.n	8005b62 <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b78 <HAL_UART_MspInit+0x2c0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	f040 8094 	bne.w	8005a7a <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
 8005956:	4b86      	ldr	r3, [pc, #536]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	4a85      	ldr	r2, [pc, #532]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 800595c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005960:	6413      	str	r3, [r2, #64]	@ 0x40
 8005962:	4b83      	ldr	r3, [pc, #524]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	4b7f      	ldr	r3, [pc, #508]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	4a7e      	ldr	r2, [pc, #504]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6313      	str	r3, [r2, #48]	@ 0x30
 800597e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800598a:	230c      	movs	r3, #12
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598e:	2302      	movs	r3, #2
 8005990:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005996:	2303      	movs	r3, #3
 8005998:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800599a:	2307      	movs	r3, #7
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80059a2:	4619      	mov	r1, r3
 80059a4:	4873      	ldr	r0, [pc, #460]	@ (8005b74 <HAL_UART_MspInit+0x2bc>)
 80059a6:	f001 fb49 	bl	800703c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80059aa:	4b74      	ldr	r3, [pc, #464]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059ac:	4a74      	ldr	r2, [pc, #464]	@ (8005b80 <HAL_UART_MspInit+0x2c8>)
 80059ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80059b0:	4b72      	ldr	r3, [pc, #456]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80059b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059b8:	4b70      	ldr	r3, [pc, #448]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059be:	4b6f      	ldr	r3, [pc, #444]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059c4:	4b6d      	ldr	r3, [pc, #436]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059cc:	4b6b      	ldr	r3, [pc, #428]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059d2:	4b6a      	ldr	r3, [pc, #424]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80059d8:	4b68      	ldr	r3, [pc, #416]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80059e0:	4b66      	ldr	r3, [pc, #408]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80059e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059e8:	4b64      	ldr	r3, [pc, #400]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80059ee:	4863      	ldr	r0, [pc, #396]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 80059f0:	f000 ff22 	bl	8006838 <HAL_DMA_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_UART_MspInit+0x146>
      Error_Handler();
 80059fa:	f7ff f9f7 	bl	8004dec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a5e      	ldr	r2, [pc, #376]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 8005a02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a04:	4a5d      	ldr	r2, [pc, #372]	@ (8005b7c <HAL_UART_MspInit+0x2c4>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a0c:	4a5e      	ldr	r2, [pc, #376]	@ (8005b88 <HAL_UART_MspInit+0x2d0>)
 8005a0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005a10:	4b5c      	ldr	r3, [pc, #368]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005a16:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a18:	4b5a      	ldr	r3, [pc, #360]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a1a:	2240      	movs	r2, #64	@ 0x40
 8005a1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a1e:	4b59      	ldr	r3, [pc, #356]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a24:	4b57      	ldr	r3, [pc, #348]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a2c:	4b55      	ldr	r3, [pc, #340]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a32:	4b54      	ldr	r3, [pc, #336]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005a38:	4b52      	ldr	r3, [pc, #328]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a3e:	4b51      	ldr	r3, [pc, #324]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005a44:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a46:	4b4f      	ldr	r3, [pc, #316]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a4c:	484d      	ldr	r0, [pc, #308]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a4e:	f000 fef3 	bl	8006838 <HAL_DMA_Init>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8005a58:	f7ff f9c8 	bl	8004dec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a49      	ldr	r2, [pc, #292]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a62:	4a48      	ldr	r2, [pc, #288]	@ (8005b84 <HAL_UART_MspInit+0x2cc>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2105      	movs	r1, #5
 8005a6c:	2026      	movs	r0, #38	@ 0x26
 8005a6e:	f000 feb9 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a72:	2026      	movs	r0, #38	@ 0x26
 8005a74:	f000 fed2 	bl	800681c <HAL_NVIC_EnableIRQ>
}
 8005a78:	e073      	b.n	8005b62 <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART3)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a43      	ldr	r2, [pc, #268]	@ (8005b8c <HAL_UART_MspInit+0x2d4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d135      	bne.n	8005af0 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	4a38      	ldr	r2, [pc, #224]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005a8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a94:	4b36      	ldr	r3, [pc, #216]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	4b32      	ldr	r3, [pc, #200]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	4a31      	ldr	r2, [pc, #196]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005aaa:	f043 0302 	orr.w	r3, r3, #2
 8005aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005abc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aca:	2303      	movs	r3, #3
 8005acc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ace:	2307      	movs	r3, #7
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	482d      	ldr	r0, [pc, #180]	@ (8005b90 <HAL_UART_MspInit+0x2d8>)
 8005ada:	f001 faaf 	bl	800703c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2105      	movs	r1, #5
 8005ae2:	2027      	movs	r0, #39	@ 0x27
 8005ae4:	f000 fe7e 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ae8:	2027      	movs	r0, #39	@ 0x27
 8005aea:	f000 fe97 	bl	800681c <HAL_NVIC_EnableIRQ>
}
 8005aee:	e038      	b.n	8005b62 <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART6)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a27      	ldr	r2, [pc, #156]	@ (8005b94 <HAL_UART_MspInit+0x2dc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d133      	bne.n	8005b62 <HAL_UART_MspInit+0x2aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	4b1c      	ldr	r3, [pc, #112]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005b04:	f043 0320 	orr.w	r3, r3, #32
 8005b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b0a:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b15      	ldr	r3, [pc, #84]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	4a14      	ldr	r2, [pc, #80]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005b20:	f043 0304 	orr.w	r3, r3, #4
 8005b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b26:	4b12      	ldr	r3, [pc, #72]	@ (8005b70 <HAL_UART_MspInit+0x2b8>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b32:	23c0      	movs	r3, #192	@ 0xc0
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b36:	2302      	movs	r3, #2
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005b42:	2308      	movs	r3, #8
 8005b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4812      	ldr	r0, [pc, #72]	@ (8005b98 <HAL_UART_MspInit+0x2e0>)
 8005b4e:	f001 fa75 	bl	800703c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2105      	movs	r1, #5
 8005b56:	2047      	movs	r0, #71	@ 0x47
 8005b58:	f000 fe44 	bl	80067e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005b5c:	2047      	movs	r0, #71	@ 0x47
 8005b5e:	f000 fe5d 	bl	800681c <HAL_NVIC_EnableIRQ>
}
 8005b62:	bf00      	nop
 8005b64:	3740      	adds	r7, #64	@ 0x40
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40011000 	.word	0x40011000
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40020000 	.word	0x40020000
 8005b78:	40004400 	.word	0x40004400
 8005b7c:	20008400 	.word	0x20008400
 8005b80:	40026088 	.word	0x40026088
 8005b84:	20008460 	.word	0x20008460
 8005b88:	400260a0 	.word	0x400260a0
 8005b8c:	40004800 	.word	0x40004800
 8005b90:	40020400 	.word	0x40020400
 8005b94:	40011400 	.word	0x40011400
 8005b98:	40020800 	.word	0x40020800

08005b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack     /* set stack pointer */
 8005b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005bd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005ba0:	f7ff fb18 	bl	80051d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ba4:	480c      	ldr	r0, [pc, #48]	@ (8005bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ba6:	490d      	ldr	r1, [pc, #52]	@ (8005bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8005be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bac:	e002      	b.n	8005bb4 <LoopCopyDataInit>

08005bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bb2:	3304      	adds	r3, #4

08005bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bb8:	d3f9      	bcc.n	8005bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bba:	4a0a      	ldr	r2, [pc, #40]	@ (8005be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8005be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bc0:	e001      	b.n	8005bc6 <LoopFillZerobss>

08005bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bc4:	3204      	adds	r2, #4

08005bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bc8:	d3fb      	bcc.n	8005bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bca:	f017 fd1f 	bl	801d60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bce:	f7fe fee9 	bl	80049a4 <main>
  bx  lr    
 8005bd2:	4770      	bx	lr
	  ldr   sp, =_estack     /* set stack pointer */
 8005bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bdc:	2000286c 	.word	0x2000286c
  ldr r2, =_sidata
 8005be0:	08024e10 	.word	0x08024e10
  ldr r2, =_sbss
 8005be4:	20002870 	.word	0x20002870
  ldr r4, =_ebss
 8005be8:	2001835c 	.word	0x2001835c

08005bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bec:	e7fe      	b.n	8005bec <ADC_IRQHandler>
	...

08005bf0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	@ 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bfc:	f006 fc5e 	bl	800c4bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c00:	4b5a      	ldr	r3, [pc, #360]	@ (8005d6c <pvPortMallocMicroROS+0x17c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8005c08:	f000 f986 	bl	8005f18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c0c:	4b58      	ldr	r3, [pc, #352]	@ (8005d70 <pvPortMallocMicroROS+0x180>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8090 	bne.w	8005d3a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01e      	beq.n	8005c5e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d015      	beq.n	8005c5e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	3308      	adds	r3, #8
 8005c3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d06a      	beq.n	8005d3a <pvPortMallocMicroROS+0x14a>
 8005c64:	4b43      	ldr	r3, [pc, #268]	@ (8005d74 <pvPortMallocMicroROS+0x184>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d865      	bhi.n	8005d3a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c6e:	4b42      	ldr	r3, [pc, #264]	@ (8005d78 <pvPortMallocMicroROS+0x188>)
 8005c70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c72:	4b41      	ldr	r3, [pc, #260]	@ (8005d78 <pvPortMallocMicroROS+0x188>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c78:	e004      	b.n	8005c84 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d903      	bls.n	8005c96 <pvPortMallocMicroROS+0xa6>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f1      	bne.n	8005c7a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c96:	4b35      	ldr	r3, [pc, #212]	@ (8005d6c <pvPortMallocMicroROS+0x17c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d04c      	beq.n	8005d3a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	4413      	add	r3, r2
 8005ca8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	1ad2      	subs	r2, r2, r3
 8005cba:	2308      	movs	r3, #8
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d920      	bls.n	8005d04 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	613b      	str	r3, [r7, #16]
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cfe:	69b8      	ldr	r0, [r7, #24]
 8005d00:	f000 f96c 	bl	8005fdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d04:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <pvPortMallocMicroROS+0x184>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	4a19      	ldr	r2, [pc, #100]	@ (8005d74 <pvPortMallocMicroROS+0x184>)
 8005d10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d12:	4b18      	ldr	r3, [pc, #96]	@ (8005d74 <pvPortMallocMicroROS+0x184>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <pvPortMallocMicroROS+0x18c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d203      	bcs.n	8005d26 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d1e:	4b15      	ldr	r3, [pc, #84]	@ (8005d74 <pvPortMallocMicroROS+0x184>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <pvPortMallocMicroROS+0x18c>)
 8005d24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <pvPortMallocMicroROS+0x180>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d3a:	f006 fbcd 	bl	800c4d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	60fb      	str	r3, [r7, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8005d60:	69fb      	ldr	r3, [r7, #28]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3728      	adds	r7, #40	@ 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2000d2e8 	.word	0x2000d2e8
 8005d70:	2000d2f4 	.word	0x2000d2f4
 8005d74:	2000d2ec 	.word	0x2000d2ec
 8005d78:	2000d2e0 	.word	0x2000d2e0
 8005d7c:	2000d2f0 	.word	0x2000d2f0

08005d80 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d04a      	beq.n	8005e28 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d92:	2308      	movs	r3, #8
 8005d94:	425b      	negs	r3, r3
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4b22      	ldr	r3, [pc, #136]	@ (8005e30 <vPortFreeMicroROS+0xb0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <vPortFreeMicroROS+0x46>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <vPortFreeMicroROS+0x66>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60bb      	str	r3, [r7, #8]
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <vPortFreeMicroROS+0xb0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d019      	beq.n	8005e28 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d115      	bne.n	8005e28 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	4b0b      	ldr	r3, [pc, #44]	@ (8005e30 <vPortFreeMicroROS+0xb0>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e0c:	f006 fb56 	bl	800c4bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	4b07      	ldr	r3, [pc, #28]	@ (8005e34 <vPortFreeMicroROS+0xb4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4413      	add	r3, r2
 8005e1a:	4a06      	ldr	r2, [pc, #24]	@ (8005e34 <vPortFreeMicroROS+0xb4>)
 8005e1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f000 f8dc 	bl	8005fdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e24:	f006 fb58 	bl	800c4d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e28:	bf00      	nop
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	2000d2f4 	.word	0x2000d2f4
 8005e34:	2000d2ec 	.word	0x2000d2ec

08005e38 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8005e44:	2308      	movs	r3, #8
 8005e46:	425b      	negs	r3, r3
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <getBlockSize+0x38>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

	return count;
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2000d2f4 	.word	0x2000d2f4

08005e74 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8005e7e:	f006 fb1d 	bl	800c4bc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8005e82:	6838      	ldr	r0, [r7, #0]
 8005e84:	f7ff feb4 	bl	8005bf0 <pvPortMallocMicroROS>
 8005e88:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d017      	beq.n	8005ec0 <pvPortReallocMicroROS+0x4c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d014      	beq.n	8005ec0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff ffce 	bl	8005e38 <getBlockSize>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d201      	bcs.n	8005eb0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68b8      	ldr	r0, [r7, #8]
 8005eb6:	f017 fbd8 	bl	801d66a <memcpy>

		vPortFreeMicroROS(pv);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff60 	bl	8005d80 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8005ec0:	f006 fb0a 	bl	800c4d8 <xTaskResumeAll>

	return newmem;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8005ed8:	f006 faf0 	bl	800c4bc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7ff fe82 	bl	8005bf0 <pvPortMallocMicroROS>
 8005eec:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8005ef2:	e004      	b.n	8005efe <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	613a      	str	r2, [r7, #16]
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	1e5a      	subs	r2, r3, #1
 8005f02:	617a      	str	r2, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f5      	bne.n	8005ef4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8005f08:	f006 fae6 	bl	800c4d8 <xTaskResumeAll>
  	return mem;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f1e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005f22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f24:	4b27      	ldr	r3, [pc, #156]	@ (8005fc4 <prvHeapInit+0xac>)
 8005f26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00c      	beq.n	8005f4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3307      	adds	r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <prvHeapInit+0xac>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f50:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <prvHeapInit+0xb0>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f56:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <prvHeapInit+0xb0>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f64:	2208      	movs	r2, #8
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0307 	bic.w	r3, r3, #7
 8005f72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a15      	ldr	r2, [pc, #84]	@ (8005fcc <prvHeapInit+0xb4>)
 8005f78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f7a:	4b14      	ldr	r3, [pc, #80]	@ (8005fcc <prvHeapInit+0xb4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f82:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <prvHeapInit+0xb4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	1ad2      	subs	r2, r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <prvHeapInit+0xb4>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd0 <prvHeapInit+0xb8>)
 8005fa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <prvHeapInit+0xbc>)
 8005fae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fb0:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <prvHeapInit+0xc0>)
 8005fb2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005fb6:	601a      	str	r2, [r3, #0]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	200084c0 	.word	0x200084c0
 8005fc8:	2000d2e0 	.word	0x2000d2e0
 8005fcc:	2000d2e8 	.word	0x2000d2e8
 8005fd0:	2000d2f0 	.word	0x2000d2f0
 8005fd4:	2000d2ec 	.word	0x2000d2ec
 8005fd8:	2000d2f4 	.word	0x2000d2f4

08005fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fe4:	4b28      	ldr	r3, [pc, #160]	@ (8006088 <prvInsertBlockIntoFreeList+0xac>)
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e002      	b.n	8005ff0 <prvInsertBlockIntoFreeList+0x14>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d8f7      	bhi.n	8005fea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	4413      	add	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d108      	bne.n	800601e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	441a      	add	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d118      	bne.n	8006064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b15      	ldr	r3, [pc, #84]	@ (800608c <prvInsertBlockIntoFreeList+0xb0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d00d      	beq.n	800605a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	441a      	add	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e008      	b.n	800606c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800605a:	4b0c      	ldr	r3, [pc, #48]	@ (800608c <prvInsertBlockIntoFreeList+0xb0>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e003      	b.n	800606c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d002      	beq.n	800607a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000d2e0 	.word	0x2000d2e0
 800608c:	2000d2e8 	.word	0x2000d2e8

08006090 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800609a:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <microros_allocate+0x3c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <microros_allocate+0x3c>)
 80060a8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80060aa:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <microros_allocate+0x40>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b06      	ldr	r3, [pc, #24]	@ (80060d0 <microros_allocate+0x40>)
 80060b8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fd98 	bl	8005bf0 <pvPortMallocMicroROS>
 80060c0:	4603      	mov	r3, r0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000d2f8 	.word	0x2000d2f8
 80060d0:	2000d2fc 	.word	0x2000d2fc

080060d4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fea7 	bl	8005e38 <getBlockSize>
 80060ea:	4603      	mov	r3, r0
 80060ec:	4a06      	ldr	r2, [pc, #24]	@ (8006108 <microros_deallocate+0x34>)
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b04      	ldr	r3, [pc, #16]	@ (8006108 <microros_deallocate+0x34>)
 80060f6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fe41 	bl	8005d80 <vPortFreeMicroROS>
  }
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	2000d2fc 	.word	0x2000d2fc

0800610c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8006118:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <microros_reallocate+0x64>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4413      	add	r3, r2
 8006122:	461a      	mov	r2, r3
 8006124:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <microros_reallocate+0x64>)
 8006126:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8006128:	4b12      	ldr	r3, [pc, #72]	@ (8006174 <microros_reallocate+0x68>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	4413      	add	r3, r2
 8006132:	461a      	mov	r2, r3
 8006134:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <microros_reallocate+0x68>)
 8006136:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d104      	bne.n	8006148 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f7ff fd56 	bl	8005bf0 <pvPortMallocMicroROS>
 8006144:	4603      	mov	r3, r0
 8006146:	e00e      	b.n	8006166 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fe75 	bl	8005e38 <getBlockSize>
 800614e:	4603      	mov	r3, r0
 8006150:	4a08      	ldr	r2, [pc, #32]	@ (8006174 <microros_reallocate+0x68>)
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	461a      	mov	r2, r3
 8006158:	4b06      	ldr	r3, [pc, #24]	@ (8006174 <microros_reallocate+0x68>)
 800615a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff fe88 	bl	8005e74 <pvPortReallocMicroROS>
 8006164:	4603      	mov	r3, r0
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	2000d2f8 	.word	0x2000d2f8
 8006174:	2000d2fc 	.word	0x2000d2fc

08006178 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	fb02 f303 	mul.w	r3, r2, r3
 800618c:	4a0c      	ldr	r2, [pc, #48]	@ (80061c0 <microros_zero_allocate+0x48>)
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	4413      	add	r3, r2
 8006192:	461a      	mov	r2, r3
 8006194:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <microros_zero_allocate+0x48>)
 8006196:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	4a08      	ldr	r2, [pc, #32]	@ (80061c4 <microros_zero_allocate+0x4c>)
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	4413      	add	r3, r2
 80061a6:	461a      	mov	r2, r3
 80061a8:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <microros_zero_allocate+0x4c>)
 80061aa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fe8d 	bl	8005ece <pvPortCallocMicroROS>
 80061b4:	4603      	mov	r3, r0
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	2000d2f8 	.word	0x2000d2f8
 80061c4:	2000d2fc 	.word	0x2000d2fc

080061c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80061c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80061da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061de:	a320      	add	r3, pc, #128	@ (adr r3, 8006260 <UTILS_NanosecondsToTimespec+0x98>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fd40 	bl	8000c68 <__aeabi_ldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80061f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006260 <UTILS_NanosecondsToTimespec+0x98>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa fd34 	bl	8000c68 <__aeabi_ldivmod>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	da20      	bge.n	800624e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a11      	ldr	r2, [pc, #68]	@ (8006258 <UTILS_NanosecondsToTimespec+0x90>)
 8006212:	fb82 1203 	smull	r1, r2, r2, r3
 8006216:	1712      	asrs	r2, r2, #28
 8006218:	17db      	asrs	r3, r3, #31
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	3301      	adds	r3, #1
 800621e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	17c8      	asrs	r0, r1, #31
 800622a:	460c      	mov	r4, r1
 800622c:	4605      	mov	r5, r0
 800622e:	ebb2 0804 	subs.w	r8, r2, r4
 8006232:	eb63 0905 	sbc.w	r9, r3, r5
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4906      	ldr	r1, [pc, #24]	@ (800625c <UTILS_NanosecondsToTimespec+0x94>)
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]
    }
}
 800624e:	bf00      	nop
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006258:	44b82fa1 	.word	0x44b82fa1
 800625c:	3b9aca00 	.word	0x3b9aca00
 8006260:	3b9aca00 	.word	0x3b9aca00
 8006264:	00000000 	.word	0x00000000

08006268 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b08e      	sub	sp, #56	@ 0x38
 800626e:	af00      	add	r7, sp, #0
 8006270:	6278      	str	r0, [r7, #36]	@ 0x24
 8006272:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8006274:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006278:	2300      	movs	r3, #0
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800628a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800628e:	4618      	mov	r0, r3
 8006290:	f006 fb9e 	bl	800c9d0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	17da      	asrs	r2, r3, #31
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	000b      	movs	r3, r1
 80062a8:	2200      	movs	r2, #0
 80062aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80062ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b0:	2200      	movs	r2, #0
 80062b2:	461c      	mov	r4, r3
 80062b4:	4615      	mov	r5, r2
 80062b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80062ba:	1911      	adds	r1, r2, r4
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	416b      	adcs	r3, r5
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80062c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80062ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	f04f 0400 	mov.w	r4, #0
 80062d6:	f04f 0500 	mov.w	r5, #0
 80062da:	015d      	lsls	r5, r3, #5
 80062dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80062e0:	0154      	lsls	r4, r2, #5
 80062e2:	4622      	mov	r2, r4
 80062e4:	462b      	mov	r3, r5
 80062e6:	ebb2 0800 	subs.w	r8, r2, r0
 80062ea:	eb63 0901 	sbc.w	r9, r3, r1
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80062fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80062fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	eb18 0a00 	adds.w	sl, r8, r0
 800630a:	eb49 0b01 	adc.w	fp, r9, r1
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800631a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800631e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006322:	ebb2 040a 	subs.w	r4, r2, sl
 8006326:	603c      	str	r4, [r7, #0]
 8006328:	eb63 030b 	sbc.w	r3, r3, fp
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006332:	4623      	mov	r3, r4
 8006334:	181b      	adds	r3, r3, r0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	462b      	mov	r3, r5
 800633a:	eb41 0303 	adc.w	r3, r1, r3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006346:	f7ff ff3f 	bl	80061c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800634a:	2300      	movs	r3, #0
 800634c:	4618      	mov	r0, r3
 800634e:	3738      	adds	r7, #56	@ 0x38
 8006350:	46bd      	mov	sp, r7
 8006352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006358 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8006366:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8006368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800636c:	4904      	ldr	r1, [pc, #16]	@ (8006380 <cubemx_transport_open+0x28>)
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f003 fcae 	bl	8009cd0 <HAL_UART_Receive_DMA>
    return true;
 8006374:	2301      	movs	r3, #1
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	2000d300 	.word	0x2000d300

08006384 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8006392:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f003 fcc0 	bl	8009d1a <HAL_UART_DMAStop>
    return true;
 800639a:	2301      	movs	r3, #1
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80063b8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d11c      	bne.n	8006400 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	6978      	ldr	r0, [r7, #20]
 80063d0:	f003 fc0e 	bl	8009bf0 <HAL_UART_Transmit_DMA>
 80063d4:	4603      	mov	r3, r0
 80063d6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80063d8:	e002      	b.n	80063e0 <cubemx_transport_write+0x3c>
            osDelay(1);
 80063da:	2001      	movs	r0, #1
 80063dc:	f004 ffb8 	bl	800b350 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80063e0:	7cfb      	ldrb	r3, [r7, #19]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d105      	bne.n	80063f2 <cubemx_transport_write+0x4e>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d1f3      	bne.n	80063da <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80063f2:	7cfb      	ldrb	r3, [r7, #19]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <cubemx_transport_write+0x58>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	e002      	b.n	8006402 <cubemx_transport_write+0x5e>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e000      	b.n	8006402 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8006400:	2300      	movs	r3, #0
    }
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8006420:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006426:	b672      	cpsid	i
}
 8006428:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8006436:	4a1c      	ldr	r2, [pc, #112]	@ (80064a8 <cubemx_transport_read+0x9c>)
 8006438:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800643a:	b662      	cpsie	i
}
 800643c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8006444:	2001      	movs	r0, #1
 8006446:	f004 ff83 	bl	800b350 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800644a:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <cubemx_transport_read+0xa0>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b16      	ldr	r3, [pc, #88]	@ (80064a8 <cubemx_transport_read+0x9c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d103      	bne.n	800645e <cubemx_transport_read+0x52>
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	dbe3      	blt.n	8006426 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8006462:	e011      	b.n	8006488 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8006464:	4b11      	ldr	r3, [pc, #68]	@ (80064ac <cubemx_transport_read+0xa0>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	440b      	add	r3, r1
 800646e:	4910      	ldr	r1, [pc, #64]	@ (80064b0 <cubemx_transport_read+0xa4>)
 8006470:	5c8a      	ldrb	r2, [r1, r2]
 8006472:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8006474:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <cubemx_transport_read+0xa0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800647e:	4a0b      	ldr	r2, [pc, #44]	@ (80064ac <cubemx_transport_read+0xa0>)
 8006480:	6013      	str	r3, [r2, #0]
        wrote++;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	3301      	adds	r3, #1
 8006486:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8006488:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <cubemx_transport_read+0xa0>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <cubemx_transport_read+0x9c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d003      	beq.n	800649c <cubemx_transport_read+0x90>
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d3e3      	bcc.n	8006464 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800649c:	69bb      	ldr	r3, [r7, #24]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	2000db04 	.word	0x2000db04
 80064ac:	2000db00 	.word	0x2000db00
 80064b0:	2000d300 	.word	0x2000d300

080064b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
//	{
//	  KDCOM_Process((uint8*)rxbuf, &channel, pchxp, pchxi, pchxd, pchxt, pchxa, &startflag, &stopflag, 0, 0);
//	  memset(rxbuf, 0, 40);
//	  HAL_UART_Receive_DMA(&huart1, rxbuf, 40);
//	}
	if(huart==&huart2)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a32      	ldr	r2, [pc, #200]	@ (8006588 <HAL_UART_RxCpltCallback+0xd4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d106      	bne.n	80064d2 <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_DMA(&huart2, dma_buffer, UART_DMA_BUFFER_SIZE);
 80064c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064c8:	4930      	ldr	r1, [pc, #192]	@ (800658c <HAL_UART_RxCpltCallback+0xd8>)
 80064ca:	482f      	ldr	r0, [pc, #188]	@ (8006588 <HAL_UART_RxCpltCallback+0xd4>)
 80064cc:	f003 fc00 	bl	8009cd0 <HAL_UART_Receive_DMA>
//	else if(huart==&huart6)
//	{
//		CopeSerialData_arm(rx_buff_arm);
//		HAL_UART_Receive_IT(&huart6,&rx_buff_arm,1);
//	}
}
 80064d0:	e055      	b.n	800657e <HAL_UART_RxCpltCallback+0xca>
	else if(huart==&huart3)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006590 <HAL_UART_RxCpltCallback+0xdc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d10a      	bne.n	80064f0 <HAL_UART_RxCpltCallback+0x3c>
		CopeSerial2Data(rx_buff1);
 80064da:	4b2e      	ldr	r3, [pc, #184]	@ (8006594 <HAL_UART_RxCpltCallback+0xe0>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fa fdb8 	bl	8001054 <CopeSerial2Data>
		HAL_UART_Receive_IT(&huart3,&rx_buff1,1);
 80064e4:	2201      	movs	r2, #1
 80064e6:	492b      	ldr	r1, [pc, #172]	@ (8006594 <HAL_UART_RxCpltCallback+0xe0>)
 80064e8:	4829      	ldr	r0, [pc, #164]	@ (8006590 <HAL_UART_RxCpltCallback+0xdc>)
 80064ea:	f003 fb5c 	bl	8009ba6 <HAL_UART_Receive_IT>
}
 80064ee:	e046      	b.n	800657e <HAL_UART_RxCpltCallback+0xca>
	else if(huart == &huart1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a29      	ldr	r2, [pc, #164]	@ (8006598 <HAL_UART_RxCpltCallback+0xe4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d142      	bne.n	800657e <HAL_UART_RxCpltCallback+0xca>
		if((USART_RX_STA&0x8000)==0)//接收未完成
 80064f8:	4b28      	ldr	r3, [pc, #160]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	db38      	blt.n	8006574 <HAL_UART_RxCpltCallback+0xc0>
			if(USART_RX_STA&0x4000)//接收到了0x0d
 8006502:	4b26      	ldr	r3, [pc, #152]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <HAL_UART_RxCpltCallback+0x7e>
				if(aRxBuffer[0]!=0x0a)USART_RX_STA=0;//接收错误,重新开始
 800650e:	4b24      	ldr	r3, [pc, #144]	@ (80065a0 <HAL_UART_RxCpltCallback+0xec>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b0a      	cmp	r3, #10
 8006514:	d003      	beq.n	800651e <HAL_UART_RxCpltCallback+0x6a>
 8006516:	4b21      	ldr	r3, [pc, #132]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006518:	2200      	movs	r2, #0
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e02a      	b.n	8006574 <HAL_UART_RxCpltCallback+0xc0>
				else USART_RX_STA|=0x8000;	//接收完成了
 800651e:	4b1f      	ldr	r3, [pc, #124]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	4b1b      	ldr	r3, [pc, #108]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e020      	b.n	8006574 <HAL_UART_RxCpltCallback+0xc0>
				if(aRxBuffer[0]==0x0d)USART_RX_STA|=0x4000;
 8006532:	4b1b      	ldr	r3, [pc, #108]	@ (80065a0 <HAL_UART_RxCpltCallback+0xec>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b0d      	cmp	r3, #13
 8006538:	d107      	bne.n	800654a <HAL_UART_RxCpltCallback+0x96>
 800653a:	4b18      	ldr	r3, [pc, #96]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006542:	b29a      	uxth	r2, r3
 8006544:	4b15      	ldr	r3, [pc, #84]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e014      	b.n	8006574 <HAL_UART_RxCpltCallback+0xc0>
					USART_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 800654a:	4b14      	ldr	r3, [pc, #80]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006552:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <HAL_UART_RxCpltCallback+0xec>)
 8006554:	7811      	ldrb	r1, [r2, #0]
 8006556:	4a13      	ldr	r2, [pc, #76]	@ (80065a4 <HAL_UART_RxCpltCallback+0xf0>)
 8006558:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 800655a:	4b10      	ldr	r3, [pc, #64]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	3301      	adds	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	4b0e      	ldr	r3, [pc, #56]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006564:	801a      	strh	r2, [r3, #0]
					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收
 8006566:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	2b27      	cmp	r3, #39	@ 0x27
 800656c:	d902      	bls.n	8006574 <HAL_UART_RxCpltCallback+0xc0>
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <HAL_UART_RxCpltCallback+0xe8>)
 8006570:	2200      	movs	r2, #0
 8006572:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,&aRxBuffer,1);
 8006574:	2201      	movs	r2, #1
 8006576:	490a      	ldr	r1, [pc, #40]	@ (80065a0 <HAL_UART_RxCpltCallback+0xec>)
 8006578:	4807      	ldr	r0, [pc, #28]	@ (8006598 <HAL_UART_RxCpltCallback+0xe4>)
 800657a:	f003 fb14 	bl	8009ba6 <HAL_UART_Receive_IT>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20008328 	.word	0x20008328
 800658c:	2000d300 	.word	0x2000d300
 8006590:	20008370 	.word	0x20008370
 8006594:	200028b9 	.word	0x200028b9
 8006598:	200082e0 	.word	0x200082e0
 800659c:	200028b4 	.word	0x200028b4
 80065a0:	200028b8 	.word	0x200028b8
 80065a4:	2000288c 	.word	0x2000288c

080065a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065ac:	4b0e      	ldr	r3, [pc, #56]	@ (80065e8 <HAL_Init+0x40>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0d      	ldr	r2, [pc, #52]	@ (80065e8 <HAL_Init+0x40>)
 80065b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065b8:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <HAL_Init+0x40>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0a      	ldr	r2, [pc, #40]	@ (80065e8 <HAL_Init+0x40>)
 80065be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065c4:	4b08      	ldr	r3, [pc, #32]	@ (80065e8 <HAL_Init+0x40>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a07      	ldr	r2, [pc, #28]	@ (80065e8 <HAL_Init+0x40>)
 80065ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065d0:	2003      	movs	r0, #3
 80065d2:	f000 f8fc 	bl	80067ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065d6:	200f      	movs	r0, #15
 80065d8:	f7fe fc3a 	bl	8004e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065dc:	f7fe fc0c 	bl	8004df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40023c00 	.word	0x40023c00

080065ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065f0:	4b06      	ldr	r3, [pc, #24]	@ (800660c <HAL_IncTick+0x20>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <HAL_IncTick+0x24>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	4a04      	ldr	r2, [pc, #16]	@ (8006610 <HAL_IncTick+0x24>)
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20002390 	.word	0x20002390
 8006610:	2000db08 	.word	0x2000db08

08006614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  return uwTick;
 8006618:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <HAL_GetTick+0x14>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	2000db08 	.word	0x2000db08

0800662c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006634:	f7ff ffee 	bl	8006614 <HAL_GetTick>
 8006638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d005      	beq.n	8006652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006646:	4b0a      	ldr	r3, [pc, #40]	@ (8006670 <HAL_Delay+0x44>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006652:	bf00      	nop
 8006654:	f7ff ffde 	bl	8006614 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d8f7      	bhi.n	8006654 <HAL_Delay+0x28>
  {
  }
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20002390 	.word	0x20002390

08006674 <__NVIC_SetPriorityGrouping>:
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006684:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006690:	4013      	ands	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800669c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066a6:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <__NVIC_SetPriorityGrouping+0x44>)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	60d3      	str	r3, [r2, #12]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	e000ed00 	.word	0xe000ed00

080066bc <__NVIC_GetPriorityGrouping>:
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066c0:	4b04      	ldr	r3, [pc, #16]	@ (80066d4 <__NVIC_GetPriorityGrouping+0x18>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	0a1b      	lsrs	r3, r3, #8
 80066c6:	f003 0307 	and.w	r3, r3, #7
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <__NVIC_EnableIRQ>:
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	db0b      	blt.n	8006702 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	f003 021f 	and.w	r2, r3, #31
 80066f0:	4907      	ldr	r1, [pc, #28]	@ (8006710 <__NVIC_EnableIRQ+0x38>)
 80066f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2001      	movs	r0, #1
 80066fa:	fa00 f202 	lsl.w	r2, r0, r2
 80066fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	e000e100 	.word	0xe000e100

08006714 <__NVIC_SetPriority>:
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	db0a      	blt.n	800673e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	490c      	ldr	r1, [pc, #48]	@ (8006760 <__NVIC_SetPriority+0x4c>)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	0112      	lsls	r2, r2, #4
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	440b      	add	r3, r1
 8006738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800673c:	e00a      	b.n	8006754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	4908      	ldr	r1, [pc, #32]	@ (8006764 <__NVIC_SetPriority+0x50>)
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	3b04      	subs	r3, #4
 800674c:	0112      	lsls	r2, r2, #4
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	440b      	add	r3, r1
 8006752:	761a      	strb	r2, [r3, #24]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	e000e100 	.word	0xe000e100
 8006764:	e000ed00 	.word	0xe000ed00

08006768 <NVIC_EncodePriority>:
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	@ 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f1c3 0307 	rsb	r3, r3, #7
 8006782:	2b04      	cmp	r3, #4
 8006784:	bf28      	it	cs
 8006786:	2304      	movcs	r3, #4
 8006788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3304      	adds	r3, #4
 800678e:	2b06      	cmp	r3, #6
 8006790:	d902      	bls.n	8006798 <NVIC_EncodePriority+0x30>
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3b03      	subs	r3, #3
 8006796:	e000      	b.n	800679a <NVIC_EncodePriority+0x32>
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	43da      	mvns	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	401a      	ands	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067b0:	f04f 31ff 	mov.w	r1, #4294967295
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ba:	43d9      	mvns	r1, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067c0:	4313      	orrs	r3, r2
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff4c 	bl	8006674 <__NVIC_SetPriorityGrouping>
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067f6:	f7ff ff61 	bl	80066bc <__NVIC_GetPriorityGrouping>
 80067fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	6978      	ldr	r0, [r7, #20]
 8006802:	f7ff ffb1 	bl	8006768 <NVIC_EncodePriority>
 8006806:	4602      	mov	r2, r0
 8006808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff ff80 	bl	8006714 <__NVIC_SetPriority>
}
 8006814:	bf00      	nop
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff ff54 	bl	80066d8 <__NVIC_EnableIRQ>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006844:	f7ff fee6 	bl	8006614 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e099      	b.n	8006988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006874:	e00f      	b.n	8006896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006876:	f7ff fecd 	bl	8006614 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b05      	cmp	r3, #5
 8006882:	d908      	bls.n	8006896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2203      	movs	r2, #3
 800688e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e078      	b.n	8006988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e8      	bne.n	8006876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4b38      	ldr	r3, [pc, #224]	@ (8006990 <HAL_DMA_Init+0x158>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d107      	bne.n	8006900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f8:	4313      	orrs	r3, r2
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	2b04      	cmp	r3, #4
 8006928:	d117      	bne.n	800695a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb01 	bl	8006f44 <DMA_CheckFifoParam>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2240      	movs	r2, #64	@ 0x40
 800694c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006956:	2301      	movs	r3, #1
 8006958:	e016      	b.n	8006988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fab8 	bl	8006ed8 <DMA_CalcBaseAndBitshift>
 8006968:	4603      	mov	r3, r0
 800696a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006970:	223f      	movs	r2, #63	@ 0x3f
 8006972:	409a      	lsls	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	f010803f 	.word	0xf010803f

08006994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_DMA_Start_IT+0x26>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e040      	b.n	8006a3c <HAL_DMA_Start_IT+0xa8>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d12f      	bne.n	8006a2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2202      	movs	r2, #2
 80069d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fa4a 	bl	8006e7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ec:	223f      	movs	r2, #63	@ 0x3f
 80069ee:	409a      	lsls	r2, r3
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0216 	orr.w	r2, r2, #22
 8006a02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0208 	orr.w	r2, r2, #8
 8006a1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e005      	b.n	8006a3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
 8006a38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a52:	f7ff fddf 	bl	8006614 <HAL_GetTick>
 8006a56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d008      	beq.n	8006a76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2280      	movs	r2, #128	@ 0x80
 8006a68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e052      	b.n	8006b1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0216 	bic.w	r2, r2, #22
 8006a84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <HAL_DMA_Abort+0x62>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0208 	bic.w	r2, r2, #8
 8006ab4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ac6:	e013      	b.n	8006af0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ac8:	f7ff fda4 	bl	8006614 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d90c      	bls.n	8006af0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2203      	movs	r2, #3
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e015      	b.n	8006b1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e4      	bne.n	8006ac8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b02:	223f      	movs	r2, #63	@ 0x3f
 8006b04:	409a      	lsls	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d004      	beq.n	8006b42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2280      	movs	r2, #128	@ 0x80
 8006b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e00c      	b.n	8006b5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2205      	movs	r2, #5
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0201 	bic.w	r2, r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b74:	4b8e      	ldr	r3, [pc, #568]	@ (8006db0 <HAL_DMA_IRQHandler+0x248>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a8e      	ldr	r2, [pc, #568]	@ (8006db4 <HAL_DMA_IRQHandler+0x24c>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	0a9b      	lsrs	r3, r3, #10
 8006b80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b92:	2208      	movs	r2, #8
 8006b94:	409a      	lsls	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01a      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d013      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0204 	bic.w	r2, r2, #4
 8006bba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bcc:	f043 0201 	orr.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd8:	2201      	movs	r2, #1
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d012      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f043 0202 	orr.w	r2, r3, #2
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0e:	2204      	movs	r2, #4
 8006c10:	409a      	lsls	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d012      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c38:	f043 0204 	orr.w	r2, r3, #4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c44:	2210      	movs	r2, #16
 8006c46:	409a      	lsls	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d043      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d03c      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c62:	2210      	movs	r2, #16
 8006c64:	409a      	lsls	r2, r3
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d108      	bne.n	8006c98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d024      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
 8006c96:	e01f      	b.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
 8006ca8:	e016      	b.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d107      	bne.n	8006cc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0208 	bic.w	r2, r2, #8
 8006cc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cdc:	2220      	movs	r2, #32
 8006cde:	409a      	lsls	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 808f 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8087 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfe:	2220      	movs	r2, #32
 8006d00:	409a      	lsls	r2, r3
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	d136      	bne.n	8006d80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0216 	bic.w	r2, r2, #22
 8006d20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <HAL_DMA_IRQHandler+0x1da>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d007      	beq.n	8006d52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0208 	bic.w	r2, r2, #8
 8006d50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d56:	223f      	movs	r2, #63	@ 0x3f
 8006d58:	409a      	lsls	r2, r3
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d07e      	beq.n	8006e74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
        }
        return;
 8006d7e:	e079      	b.n	8006e74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01d      	beq.n	8006dca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10d      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d031      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
 8006dac:	e02c      	b.n	8006e08 <HAL_DMA_IRQHandler+0x2a0>
 8006dae:	bf00      	nop
 8006db0:	20002388 	.word	0x20002388
 8006db4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d023      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
 8006dc8:	e01e      	b.n	8006e08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10f      	bne.n	8006df8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0210 	bic.w	r2, r2, #16
 8006de6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d032      	beq.n	8006e76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d022      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2205      	movs	r2, #5
 8006e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d307      	bcc.n	8006e50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f2      	bne.n	8006e34 <HAL_DMA_IRQHandler+0x2cc>
 8006e4e:	e000      	b.n	8006e52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	e000      	b.n	8006e76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e74:	bf00      	nop
    }
  }
}
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006e98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d108      	bne.n	8006ebc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006eba:	e007      	b.n	8006ecc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	3b10      	subs	r3, #16
 8006ee8:	4a14      	ldr	r2, [pc, #80]	@ (8006f3c <DMA_CalcBaseAndBitshift+0x64>)
 8006eea:	fba2 2303 	umull	r2, r3, r2, r3
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ef2:	4a13      	ldr	r2, [pc, #76]	@ (8006f40 <DMA_CalcBaseAndBitshift+0x68>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d909      	bls.n	8006f1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f0e:	f023 0303 	bic.w	r3, r3, #3
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f18:	e007      	b.n	8006f2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	aaaaaaab 	.word	0xaaaaaaab
 8006f40:	080233a8 	.word	0x080233a8

08006f44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d11f      	bne.n	8006f9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d856      	bhi.n	8007012 <DMA_CheckFifoParam+0xce>
 8006f64:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <DMA_CheckFifoParam+0x28>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f8f 	.word	0x08006f8f
 8006f74:	08006f7d 	.word	0x08006f7d
 8006f78:	08007013 	.word	0x08007013
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d046      	beq.n	8007016 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f8c:	e043      	b.n	8007016 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f96:	d140      	bne.n	800701a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f9c:	e03d      	b.n	800701a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa6:	d121      	bne.n	8006fec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d837      	bhi.n	800701e <DMA_CheckFifoParam+0xda>
 8006fae:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb4 <DMA_CheckFifoParam+0x70>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	08006fcb 	.word	0x08006fcb
 8006fbc:	08006fc5 	.word	0x08006fc5
 8006fc0:	08006fdd 	.word	0x08006fdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e030      	b.n	800702c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d025      	beq.n	8007022 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fda:	e022      	b.n	8007022 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006fe4:	d11f      	bne.n	8007026 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006fea:	e01c      	b.n	8007026 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d903      	bls.n	8006ffa <DMA_CheckFifoParam+0xb6>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d003      	beq.n	8007000 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ff8:	e018      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffe:	e015      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e00b      	b.n	800702a <DMA_CheckFifoParam+0xe6>
      break;
 8007012:	bf00      	nop
 8007014:	e00a      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      break;
 8007016:	bf00      	nop
 8007018:	e008      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      break;
 800701a:	bf00      	nop
 800701c:	e006      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      break;
 800701e:	bf00      	nop
 8007020:	e004      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      break;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      break;   
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <DMA_CheckFifoParam+0xe8>
      break;
 800702a:	bf00      	nop
    }
  } 
  
  return status; 
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop

0800703c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800703c:	b480      	push	{r7}
 800703e:	b089      	sub	sp, #36	@ 0x24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e16b      	b.n	8007330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007058:	2201      	movs	r2, #1
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4013      	ands	r3, r2
 800706a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	429a      	cmp	r2, r3
 8007072:	f040 815a 	bne.w	800732a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d005      	beq.n	800708e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800708a:	2b02      	cmp	r3, #2
 800708c:	d130      	bne.n	80070f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	2203      	movs	r2, #3
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43db      	mvns	r3, r3
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	4013      	ands	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070c4:	2201      	movs	r2, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	43db      	mvns	r3, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4013      	ands	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	f003 0201 	and.w	r2, r3, #1
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d017      	beq.n	800712c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	2203      	movs	r2, #3
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	43db      	mvns	r3, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	4313      	orrs	r3, r2
 8007124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d123      	bne.n	8007180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	08da      	lsrs	r2, r3, #3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3208      	adds	r2, #8
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	220f      	movs	r2, #15
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4013      	ands	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	08da      	lsrs	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3208      	adds	r2, #8
 800717a:	69b9      	ldr	r1, [r7, #24]
 800717c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	2203      	movs	r2, #3
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	43db      	mvns	r3, r3
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4013      	ands	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 0203 	and.w	r2, r3, #3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80b4 	beq.w	800732a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	4b60      	ldr	r3, [pc, #384]	@ (8007348 <HAL_GPIO_Init+0x30c>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	4a5f      	ldr	r2, [pc, #380]	@ (8007348 <HAL_GPIO_Init+0x30c>)
 80071cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80071d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007348 <HAL_GPIO_Init+0x30c>)
 80071d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071de:	4a5b      	ldr	r2, [pc, #364]	@ (800734c <HAL_GPIO_Init+0x310>)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	3302      	adds	r3, #2
 80071e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	220f      	movs	r2, #15
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	43db      	mvns	r3, r3
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	4013      	ands	r3, r2
 8007200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a52      	ldr	r2, [pc, #328]	@ (8007350 <HAL_GPIO_Init+0x314>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d02b      	beq.n	8007262 <HAL_GPIO_Init+0x226>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a51      	ldr	r2, [pc, #324]	@ (8007354 <HAL_GPIO_Init+0x318>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d025      	beq.n	800725e <HAL_GPIO_Init+0x222>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a50      	ldr	r2, [pc, #320]	@ (8007358 <HAL_GPIO_Init+0x31c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01f      	beq.n	800725a <HAL_GPIO_Init+0x21e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a4f      	ldr	r2, [pc, #316]	@ (800735c <HAL_GPIO_Init+0x320>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d019      	beq.n	8007256 <HAL_GPIO_Init+0x21a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a4e      	ldr	r2, [pc, #312]	@ (8007360 <HAL_GPIO_Init+0x324>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_GPIO_Init+0x216>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a4d      	ldr	r2, [pc, #308]	@ (8007364 <HAL_GPIO_Init+0x328>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00d      	beq.n	800724e <HAL_GPIO_Init+0x212>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a4c      	ldr	r2, [pc, #304]	@ (8007368 <HAL_GPIO_Init+0x32c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <HAL_GPIO_Init+0x20e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a4b      	ldr	r2, [pc, #300]	@ (800736c <HAL_GPIO_Init+0x330>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d101      	bne.n	8007246 <HAL_GPIO_Init+0x20a>
 8007242:	2307      	movs	r3, #7
 8007244:	e00e      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007246:	2308      	movs	r3, #8
 8007248:	e00c      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800724a:	2306      	movs	r3, #6
 800724c:	e00a      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800724e:	2305      	movs	r3, #5
 8007250:	e008      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007252:	2304      	movs	r3, #4
 8007254:	e006      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007256:	2303      	movs	r3, #3
 8007258:	e004      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800725a:	2302      	movs	r3, #2
 800725c:	e002      	b.n	8007264 <HAL_GPIO_Init+0x228>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_GPIO_Init+0x228>
 8007262:	2300      	movs	r3, #0
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	f002 0203 	and.w	r2, r2, #3
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	4093      	lsls	r3, r2
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	4313      	orrs	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007274:	4935      	ldr	r1, [pc, #212]	@ (800734c <HAL_GPIO_Init+0x310>)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	089b      	lsrs	r3, r3, #2
 800727a:	3302      	adds	r3, #2
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007282:	4b3b      	ldr	r3, [pc, #236]	@ (8007370 <HAL_GPIO_Init+0x334>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072a6:	4a32      	ldr	r2, [pc, #200]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072ac:	4b30      	ldr	r3, [pc, #192]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	4013      	ands	r3, r2
 80072ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072d0:	4a27      	ldr	r2, [pc, #156]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072d6:	4b26      	ldr	r3, [pc, #152]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	43db      	mvns	r3, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4013      	ands	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <HAL_GPIO_Init+0x334>)
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007300:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <HAL_GPIO_Init+0x334>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	43db      	mvns	r3, r3
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	4013      	ands	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007324:	4a12      	ldr	r2, [pc, #72]	@ (8007370 <HAL_GPIO_Init+0x334>)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	f67f ae90 	bls.w	8007058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	3724      	adds	r7, #36	@ 0x24
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40023800 	.word	0x40023800
 800734c:	40013800 	.word	0x40013800
 8007350:	40020000 	.word	0x40020000
 8007354:	40020400 	.word	0x40020400
 8007358:	40020800 	.word	0x40020800
 800735c:	40020c00 	.word	0x40020c00
 8007360:	40021000 	.word	0x40021000
 8007364:	40021400 	.word	0x40021400
 8007368:	40021800 	.word	0x40021800
 800736c:	40021c00 	.word	0x40021c00
 8007370:	40013c00 	.word	0x40013c00

08007374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	807b      	strh	r3, [r7, #2]
 8007380:	4613      	mov	r3, r2
 8007382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007384:	787b      	ldrb	r3, [r7, #1]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800738a:	887a      	ldrh	r2, [r7, #2]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007390:	e003      	b.n	800739a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007392:	887b      	ldrh	r3, [r7, #2]
 8007394:	041a      	lsls	r2, r3, #16
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	619a      	str	r2, [r3, #24]
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e12b      	b.n	8007612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fd faa0 	bl	8004914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2224      	movs	r2, #36	@ 0x24
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0201 	bic.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800740a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800740c:	f001 f8ea 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 8007410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	4a81      	ldr	r2, [pc, #516]	@ (800761c <HAL_I2C_Init+0x274>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d807      	bhi.n	800742c <HAL_I2C_Init+0x84>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a80      	ldr	r2, [pc, #512]	@ (8007620 <HAL_I2C_Init+0x278>)
 8007420:	4293      	cmp	r3, r2
 8007422:	bf94      	ite	ls
 8007424:	2301      	movls	r3, #1
 8007426:	2300      	movhi	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e006      	b.n	800743a <HAL_I2C_Init+0x92>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a7d      	ldr	r2, [pc, #500]	@ (8007624 <HAL_I2C_Init+0x27c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	bf94      	ite	ls
 8007434:	2301      	movls	r3, #1
 8007436:	2300      	movhi	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e0e7      	b.n	8007612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4a78      	ldr	r2, [pc, #480]	@ (8007628 <HAL_I2C_Init+0x280>)
 8007446:	fba2 2303 	umull	r2, r3, r2, r3
 800744a:	0c9b      	lsrs	r3, r3, #18
 800744c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	430a      	orrs	r2, r1
 8007460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4a6a      	ldr	r2, [pc, #424]	@ (800761c <HAL_I2C_Init+0x274>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d802      	bhi.n	800747c <HAL_I2C_Init+0xd4>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3301      	adds	r3, #1
 800747a:	e009      	b.n	8007490 <HAL_I2C_Init+0xe8>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007482:	fb02 f303 	mul.w	r3, r2, r3
 8007486:	4a69      	ldr	r2, [pc, #420]	@ (800762c <HAL_I2C_Init+0x284>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	099b      	lsrs	r3, r3, #6
 800748e:	3301      	adds	r3, #1
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	430b      	orrs	r3, r1
 8007496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80074a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	495c      	ldr	r1, [pc, #368]	@ (800761c <HAL_I2C_Init+0x274>)
 80074ac:	428b      	cmp	r3, r1
 80074ae:	d819      	bhi.n	80074e4 <HAL_I2C_Init+0x13c>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1e59      	subs	r1, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80074be:	1c59      	adds	r1, r3, #1
 80074c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80074c4:	400b      	ands	r3, r1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_I2C_Init+0x138>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1e59      	subs	r1, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80074d8:	3301      	adds	r3, #1
 80074da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074de:	e051      	b.n	8007584 <HAL_I2C_Init+0x1dc>
 80074e0:	2304      	movs	r3, #4
 80074e2:	e04f      	b.n	8007584 <HAL_I2C_Init+0x1dc>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d111      	bne.n	8007510 <HAL_I2C_Init+0x168>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	1e58      	subs	r0, r3, #1
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6859      	ldr	r1, [r3, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	440b      	add	r3, r1
 80074fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80074fe:	3301      	adds	r3, #1
 8007500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007504:	2b00      	cmp	r3, #0
 8007506:	bf0c      	ite	eq
 8007508:	2301      	moveq	r3, #1
 800750a:	2300      	movne	r3, #0
 800750c:	b2db      	uxtb	r3, r3
 800750e:	e012      	b.n	8007536 <HAL_I2C_Init+0x18e>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	1e58      	subs	r0, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6859      	ldr	r1, [r3, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	0099      	lsls	r1, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	fbb0 f3f3 	udiv	r3, r0, r3
 8007526:	3301      	adds	r3, #1
 8007528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf0c      	ite	eq
 8007530:	2301      	moveq	r3, #1
 8007532:	2300      	movne	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_I2C_Init+0x196>
 800753a:	2301      	movs	r3, #1
 800753c:	e022      	b.n	8007584 <HAL_I2C_Init+0x1dc>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10e      	bne.n	8007564 <HAL_I2C_Init+0x1bc>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1e58      	subs	r0, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	440b      	add	r3, r1
 8007554:	fbb0 f3f3 	udiv	r3, r0, r3
 8007558:	3301      	adds	r3, #1
 800755a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800755e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007562:	e00f      	b.n	8007584 <HAL_I2C_Init+0x1dc>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	1e58      	subs	r0, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6859      	ldr	r1, [r3, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	0099      	lsls	r1, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	fbb0 f3f3 	udiv	r3, r0, r3
 800757a:	3301      	adds	r3, #1
 800757c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	6809      	ldr	r1, [r1, #0]
 8007588:	4313      	orrs	r3, r2
 800758a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80075b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6911      	ldr	r1, [r2, #16]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68d2      	ldr	r2, [r2, #12]
 80075be:	4311      	orrs	r1, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	000186a0 	.word	0x000186a0
 8007620:	001e847f 	.word	0x001e847f
 8007624:	003d08ff 	.word	0x003d08ff
 8007628:	431bde83 	.word	0x431bde83
 800762c:	10624dd3 	.word	0x10624dd3

08007630 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	461a      	mov	r2, r3
 800763e:	4603      	mov	r3, r0
 8007640:	817b      	strh	r3, [r7, #10]
 8007642:	460b      	mov	r3, r1
 8007644:	813b      	strh	r3, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800764a:	f7fe ffe3 	bl	8006614 <HAL_GetTick>
 800764e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b20      	cmp	r3, #32
 800765a:	f040 80d9 	bne.w	8007810 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2319      	movs	r3, #25
 8007664:	2201      	movs	r2, #1
 8007666:	496d      	ldr	r1, [pc, #436]	@ (800781c <HAL_I2C_Mem_Write+0x1ec>)
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f971 	bl	8007950 <I2C_WaitOnFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007674:	2302      	movs	r3, #2
 8007676:	e0cc      	b.n	8007812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_I2C_Mem_Write+0x56>
 8007682:	2302      	movs	r3, #2
 8007684:	e0c5      	b.n	8007812 <HAL_I2C_Mem_Write+0x1e2>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d007      	beq.n	80076ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2221      	movs	r2, #33	@ 0x21
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2240      	movs	r2, #64	@ 0x40
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a4d      	ldr	r2, [pc, #308]	@ (8007820 <HAL_I2C_Mem_Write+0x1f0>)
 80076ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076ee:	88f8      	ldrh	r0, [r7, #6]
 80076f0:	893a      	ldrh	r2, [r7, #8]
 80076f2:	8979      	ldrh	r1, [r7, #10]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4603      	mov	r3, r0
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f890 	bl	8007824 <I2C_RequestMemoryWrite>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d052      	beq.n	80077b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e081      	b.n	8007812 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fa36 	bl	8007b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007722:	2b04      	cmp	r3, #4
 8007724:	d107      	bne.n	8007736 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007734:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e06b      	b.n	8007812 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b04      	cmp	r3, #4
 8007776:	d11b      	bne.n	80077b0 <HAL_I2C_Mem_Write+0x180>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d017      	beq.n	80077b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	781a      	ldrb	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1aa      	bne.n	800770e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fa29 	bl	8007c14 <I2C_WaitOnBTFFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d107      	bne.n	80077e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e016      	b.n	8007812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e000      	b.n	8007812 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	00100002 	.word	0x00100002
 8007820:	ffff0000 	.word	0xffff0000

08007824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	4608      	mov	r0, r1
 800782e:	4611      	mov	r1, r2
 8007830:	461a      	mov	r2, r3
 8007832:	4603      	mov	r3, r0
 8007834:	817b      	strh	r3, [r7, #10]
 8007836:	460b      	mov	r3, r1
 8007838:	813b      	strh	r3, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800784c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	2200      	movs	r2, #0
 8007856:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f878 	bl	8007950 <I2C_WaitOnFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007874:	d103      	bne.n	800787e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800787c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e05f      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007882:	897b      	ldrh	r3, [r7, #10]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	6a3a      	ldr	r2, [r7, #32]
 8007896:	492d      	ldr	r1, [pc, #180]	@ (800794c <I2C_RequestMemoryWrite+0x128>)
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f8d3 	bl	8007a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e04c      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c0:	6a39      	ldr	r1, [r7, #32]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f95e 	bl	8007b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00d      	beq.n	80078ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d107      	bne.n	80078e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e02b      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d105      	bne.n	80078fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078f0:	893b      	ldrh	r3, [r7, #8]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	611a      	str	r2, [r3, #16]
 80078fa:	e021      	b.n	8007940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078fc:	893b      	ldrh	r3, [r7, #8]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800790a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790c:	6a39      	ldr	r1, [r7, #32]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f938 	bl	8007b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791e:	2b04      	cmp	r3, #4
 8007920:	d107      	bne.n	8007932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e005      	b.n	8007942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007936:	893b      	ldrh	r3, [r7, #8]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	00010002 	.word	0x00010002

08007950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4613      	mov	r3, r2
 800795e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007960:	e048      	b.n	80079f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d044      	beq.n	80079f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796a:	f7fe fe53 	bl	8006614 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d302      	bcc.n	8007980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d139      	bne.n	80079f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	0c1b      	lsrs	r3, r3, #16
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10d      	bne.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	43da      	mvns	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4013      	ands	r3, r2
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	e00c      	b.n	80079c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	43da      	mvns	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4013      	ands	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d116      	bne.n	80079f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e0:	f043 0220 	orr.w	r2, r3, #32
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e023      	b.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d10d      	bne.n	8007a1a <I2C_WaitOnFlagUntilTimeout+0xca>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	43da      	mvns	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bf0c      	ite	eq
 8007a10:	2301      	moveq	r3, #1
 8007a12:	2300      	movne	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	e00c      	b.n	8007a34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	43da      	mvns	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4013      	ands	r3, r2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d093      	beq.n	8007962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a52:	e071      	b.n	8007b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a62:	d123      	bne.n	8007aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a98:	f043 0204 	orr.w	r2, r3, #4
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e067      	b.n	8007b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d041      	beq.n	8007b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab4:	f7fe fdae 	bl	8006614 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d302      	bcc.n	8007aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d136      	bne.n	8007b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d10c      	bne.n	8007aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	43da      	mvns	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e00b      	b.n	8007b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	43da      	mvns	r2, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	4013      	ands	r3, r2
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d016      	beq.n	8007b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	f043 0220 	orr.w	r2, r3, #32
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e021      	b.n	8007b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	0c1b      	lsrs	r3, r3, #16
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d10c      	bne.n	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	43da      	mvns	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bf14      	ite	ne
 8007b54:	2301      	movne	r3, #1
 8007b56:	2300      	moveq	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e00b      	b.n	8007b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	43da      	mvns	r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4013      	ands	r3, r2
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f47f af6d 	bne.w	8007a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b90:	e034      	b.n	8007bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 f886 	bl	8007ca4 <I2C_IsAcknowledgeFailed>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e034      	b.n	8007c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d028      	beq.n	8007bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007baa:	f7fe fd33 	bl	8006614 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d302      	bcc.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d11d      	bne.n	8007bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bca:	2b80      	cmp	r3, #128	@ 0x80
 8007bcc:	d016      	beq.n	8007bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be8:	f043 0220 	orr.w	r2, r3, #32
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e007      	b.n	8007c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c06:	2b80      	cmp	r3, #128	@ 0x80
 8007c08:	d1c3      	bne.n	8007b92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c20:	e034      	b.n	8007c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f83e 	bl	8007ca4 <I2C_IsAcknowledgeFailed>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e034      	b.n	8007c9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c38:	d028      	beq.n	8007c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3a:	f7fe fceb 	bl	8006614 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d302      	bcc.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d11d      	bne.n	8007c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d016      	beq.n	8007c8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	f043 0220 	orr.w	r2, r3, #32
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e007      	b.n	8007c9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d1c3      	bne.n	8007c22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cba:	d11b      	bne.n	8007cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce0:	f043 0204 	orr.w	r2, r3, #4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e267      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d075      	beq.n	8007e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d22:	4b88      	ldr	r3, [pc, #544]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 030c 	and.w	r3, r3, #12
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d00c      	beq.n	8007d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d2e:	4b85      	ldr	r3, [pc, #532]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d112      	bne.n	8007d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d3a:	4b82      	ldr	r3, [pc, #520]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d46:	d10b      	bne.n	8007d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d48:	4b7e      	ldr	r3, [pc, #504]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05b      	beq.n	8007e0c <HAL_RCC_OscConfig+0x108>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d157      	bne.n	8007e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e242      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d68:	d106      	bne.n	8007d78 <HAL_RCC_OscConfig+0x74>
 8007d6a:	4b76      	ldr	r3, [pc, #472]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a75      	ldr	r2, [pc, #468]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e01d      	b.n	8007db4 <HAL_RCC_OscConfig+0xb0>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d80:	d10c      	bne.n	8007d9c <HAL_RCC_OscConfig+0x98>
 8007d82:	4b70      	ldr	r3, [pc, #448]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6f      	ldr	r2, [pc, #444]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a6c      	ldr	r2, [pc, #432]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e00b      	b.n	8007db4 <HAL_RCC_OscConfig+0xb0>
 8007d9c:	4b69      	ldr	r3, [pc, #420]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a68      	ldr	r2, [pc, #416]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	4b66      	ldr	r3, [pc, #408]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a65      	ldr	r2, [pc, #404]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d013      	beq.n	8007de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dbc:	f7fe fc2a 	bl	8006614 <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dc4:	f7fe fc26 	bl	8006614 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b64      	cmp	r3, #100	@ 0x64
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e207      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0xc0>
 8007de2:	e014      	b.n	8007e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de4:	f7fe fc16 	bl	8006614 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dec:	f7fe fc12 	bl	8006614 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b64      	cmp	r3, #100	@ 0x64
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e1f3      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dfe:	4b51      	ldr	r3, [pc, #324]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0xe8>
 8007e0a:	e000      	b.n	8007e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d063      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 030c 	and.w	r3, r3, #12
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e26:	4b47      	ldr	r3, [pc, #284]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d11c      	bne.n	8007e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e32:	4b44      	ldr	r3, [pc, #272]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d116      	bne.n	8007e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e3e:	4b41      	ldr	r3, [pc, #260]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <HAL_RCC_OscConfig+0x152>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d001      	beq.n	8007e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e1c7      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e56:	4b3b      	ldr	r3, [pc, #236]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	4937      	ldr	r1, [pc, #220]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e6a:	e03a      	b.n	8007ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d020      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e74:	4b34      	ldr	r3, [pc, #208]	@ (8007f48 <HAL_RCC_OscConfig+0x244>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7a:	f7fe fbcb 	bl	8006614 <HAL_GetTick>
 8007e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e80:	e008      	b.n	8007e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e82:	f7fe fbc7 	bl	8006614 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d901      	bls.n	8007e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e1a8      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e94:	4b2b      	ldr	r3, [pc, #172]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0f0      	beq.n	8007e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ea0:	4b28      	ldr	r3, [pc, #160]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	4925      	ldr	r1, [pc, #148]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	600b      	str	r3, [r1, #0]
 8007eb4:	e015      	b.n	8007ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eb6:	4b24      	ldr	r3, [pc, #144]	@ (8007f48 <HAL_RCC_OscConfig+0x244>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7fe fbaa 	bl	8006614 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ec4:	f7fe fba6 	bl	8006614 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e187      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d036      	beq.n	8007f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef6:	4b15      	ldr	r3, [pc, #84]	@ (8007f4c <HAL_RCC_OscConfig+0x248>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efc:	f7fe fb8a 	bl	8006614 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f04:	f7fe fb86 	bl	8006614 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e167      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f16:	4b0b      	ldr	r3, [pc, #44]	@ (8007f44 <HAL_RCC_OscConfig+0x240>)
 8007f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f0      	beq.n	8007f04 <HAL_RCC_OscConfig+0x200>
 8007f22:	e01b      	b.n	8007f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f24:	4b09      	ldr	r3, [pc, #36]	@ (8007f4c <HAL_RCC_OscConfig+0x248>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f2a:	f7fe fb73 	bl	8006614 <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f30:	e00e      	b.n	8007f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f32:	f7fe fb6f 	bl	8006614 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d907      	bls.n	8007f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e150      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
 8007f44:	40023800 	.word	0x40023800
 8007f48:	42470000 	.word	0x42470000
 8007f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f50:	4b88      	ldr	r3, [pc, #544]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1ea      	bne.n	8007f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8097 	beq.w	8008098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f6e:	4b81      	ldr	r3, [pc, #516]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10f      	bne.n	8007f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	4a7c      	ldr	r2, [pc, #496]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	60bb      	str	r3, [r7, #8]
 8007f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f96:	2301      	movs	r3, #1
 8007f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f9a:	4b77      	ldr	r3, [pc, #476]	@ (8008178 <HAL_RCC_OscConfig+0x474>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d118      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fa6:	4b74      	ldr	r3, [pc, #464]	@ (8008178 <HAL_RCC_OscConfig+0x474>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a73      	ldr	r2, [pc, #460]	@ (8008178 <HAL_RCC_OscConfig+0x474>)
 8007fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fb2:	f7fe fb2f 	bl	8006614 <HAL_GetTick>
 8007fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fba:	f7fe fb2b 	bl	8006614 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e10c      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8008178 <HAL_RCC_OscConfig+0x474>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f0      	beq.n	8007fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d106      	bne.n	8007fee <HAL_RCC_OscConfig+0x2ea>
 8007fe0:	4b64      	ldr	r3, [pc, #400]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe4:	4a63      	ldr	r2, [pc, #396]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fec:	e01c      	b.n	8008028 <HAL_RCC_OscConfig+0x324>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	d10c      	bne.n	8008010 <HAL_RCC_OscConfig+0x30c>
 8007ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8007ffc:	f043 0304 	orr.w	r3, r3, #4
 8008000:	6713      	str	r3, [r2, #112]	@ 0x70
 8008002:	4b5c      	ldr	r3, [pc, #368]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008006:	4a5b      	ldr	r2, [pc, #364]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	6713      	str	r3, [r2, #112]	@ 0x70
 800800e:	e00b      	b.n	8008028 <HAL_RCC_OscConfig+0x324>
 8008010:	4b58      	ldr	r3, [pc, #352]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008014:	4a57      	ldr	r2, [pc, #348]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008016:	f023 0301 	bic.w	r3, r3, #1
 800801a:	6713      	str	r3, [r2, #112]	@ 0x70
 800801c:	4b55      	ldr	r3, [pc, #340]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008020:	4a54      	ldr	r2, [pc, #336]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008022:	f023 0304 	bic.w	r3, r3, #4
 8008026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d015      	beq.n	800805c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008030:	f7fe faf0 	bl	8006614 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008036:	e00a      	b.n	800804e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008038:	f7fe faec 	bl	8006614 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008046:	4293      	cmp	r3, r2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e0cb      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800804e:	4b49      	ldr	r3, [pc, #292]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0ee      	beq.n	8008038 <HAL_RCC_OscConfig+0x334>
 800805a:	e014      	b.n	8008086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800805c:	f7fe fada 	bl	8006614 <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008062:	e00a      	b.n	800807a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008064:	f7fe fad6 	bl	8006614 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e0b5      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800807a:	4b3e      	ldr	r3, [pc, #248]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1ee      	bne.n	8008064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d105      	bne.n	8008098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800808c:	4b39      	ldr	r3, [pc, #228]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 800808e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008090:	4a38      	ldr	r2, [pc, #224]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 80a1 	beq.w	80081e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080a2:	4b34      	ldr	r3, [pc, #208]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 030c 	and.w	r3, r3, #12
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d05c      	beq.n	8008168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d141      	bne.n	800813a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b6:	4b31      	ldr	r3, [pc, #196]	@ (800817c <HAL_RCC_OscConfig+0x478>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080bc:	f7fe faaa 	bl	8006614 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c4:	f7fe faa6 	bl	8006614 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e087      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d6:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f0      	bne.n	80080c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69da      	ldr	r2, [r3, #28]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f0:	019b      	lsls	r3, r3, #6
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	085b      	lsrs	r3, r3, #1
 80080fa:	3b01      	subs	r3, #1
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	061b      	lsls	r3, r3, #24
 8008106:	491b      	ldr	r1, [pc, #108]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 8008108:	4313      	orrs	r3, r2
 800810a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800810c:	4b1b      	ldr	r3, [pc, #108]	@ (800817c <HAL_RCC_OscConfig+0x478>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008112:	f7fe fa7f 	bl	8006614 <HAL_GetTick>
 8008116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800811a:	f7fe fa7b 	bl	8006614 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e05c      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800812c:	4b11      	ldr	r3, [pc, #68]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0f0      	beq.n	800811a <HAL_RCC_OscConfig+0x416>
 8008138:	e054      	b.n	80081e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800813a:	4b10      	ldr	r3, [pc, #64]	@ (800817c <HAL_RCC_OscConfig+0x478>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008140:	f7fe fa68 	bl	8006614 <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008148:	f7fe fa64 	bl	8006614 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e045      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800815a:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <HAL_RCC_OscConfig+0x470>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f0      	bne.n	8008148 <HAL_RCC_OscConfig+0x444>
 8008166:	e03d      	b.n	80081e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d107      	bne.n	8008180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e038      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
 8008174:	40023800 	.word	0x40023800
 8008178:	40007000 	.word	0x40007000
 800817c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008180:	4b1b      	ldr	r3, [pc, #108]	@ (80081f0 <HAL_RCC_OscConfig+0x4ec>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d028      	beq.n	80081e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008198:	429a      	cmp	r2, r3
 800819a:	d121      	bne.n	80081e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d11a      	bne.n	80081e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80081b0:	4013      	ands	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d111      	bne.n	80081e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	3b01      	subs	r3, #1
 80081ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d107      	bne.n	80081e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081dc:	429a      	cmp	r2, r3
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40023800 	.word	0x40023800

080081f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e0cc      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008208:	4b68      	ldr	r3, [pc, #416]	@ (80083ac <HAL_RCC_ClockConfig+0x1b8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d90c      	bls.n	8008230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008216:	4b65      	ldr	r3, [pc, #404]	@ (80083ac <HAL_RCC_ClockConfig+0x1b8>)
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800821e:	4b63      	ldr	r3, [pc, #396]	@ (80083ac <HAL_RCC_ClockConfig+0x1b8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d001      	beq.n	8008230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e0b8      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d020      	beq.n	800827e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008248:	4b59      	ldr	r3, [pc, #356]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	4a58      	ldr	r2, [pc, #352]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d005      	beq.n	800826c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008260:	4b53      	ldr	r3, [pc, #332]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	4a52      	ldr	r2, [pc, #328]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800826a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800826c:	4b50      	ldr	r3, [pc, #320]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	494d      	ldr	r1, [pc, #308]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 800827a:	4313      	orrs	r3, r2
 800827c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d044      	beq.n	8008314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d107      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008292:	4b47      	ldr	r3, [pc, #284]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d119      	bne.n	80082d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e07f      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d003      	beq.n	80082b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d107      	bne.n	80082c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082b2:	4b3f      	ldr	r3, [pc, #252]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e06f      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c2:	4b3b      	ldr	r3, [pc, #236]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e067      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082d2:	4b37      	ldr	r3, [pc, #220]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f023 0203 	bic.w	r2, r3, #3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	4934      	ldr	r1, [pc, #208]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082e4:	f7fe f996 	bl	8006614 <HAL_GetTick>
 80082e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ea:	e00a      	b.n	8008302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082ec:	f7fe f992 	bl	8006614 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e04f      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008302:	4b2b      	ldr	r3, [pc, #172]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 020c 	and.w	r2, r3, #12
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	429a      	cmp	r2, r3
 8008312:	d1eb      	bne.n	80082ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008314:	4b25      	ldr	r3, [pc, #148]	@ (80083ac <HAL_RCC_ClockConfig+0x1b8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d20c      	bcs.n	800833c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008322:	4b22      	ldr	r3, [pc, #136]	@ (80083ac <HAL_RCC_ClockConfig+0x1b8>)
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800832a:	4b20      	ldr	r3, [pc, #128]	@ (80083ac <HAL_RCC_ClockConfig+0x1b8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d001      	beq.n	800833c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e032      	b.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008348:	4b19      	ldr	r3, [pc, #100]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4916      	ldr	r1, [pc, #88]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	4313      	orrs	r3, r2
 8008358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008366:	4b12      	ldr	r3, [pc, #72]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	490e      	ldr	r1, [pc, #56]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008376:	4313      	orrs	r3, r2
 8008378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800837a:	f000 f821 	bl	80083c0 <HAL_RCC_GetSysClockFreq>
 800837e:	4602      	mov	r2, r0
 8008380:	4b0b      	ldr	r3, [pc, #44]	@ (80083b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	f003 030f 	and.w	r3, r3, #15
 800838a:	490a      	ldr	r1, [pc, #40]	@ (80083b4 <HAL_RCC_ClockConfig+0x1c0>)
 800838c:	5ccb      	ldrb	r3, [r1, r3]
 800838e:	fa22 f303 	lsr.w	r3, r2, r3
 8008392:	4a09      	ldr	r2, [pc, #36]	@ (80083b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008396:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <HAL_RCC_ClockConfig+0x1c8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7fc fd58 	bl	8004e50 <HAL_InitTick>

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	40023c00 	.word	0x40023c00
 80083b0:	40023800 	.word	0x40023800
 80083b4:	08023390 	.word	0x08023390
 80083b8:	20002388 	.word	0x20002388
 80083bc:	2000238c 	.word	0x2000238c

080083c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083c4:	b094      	sub	sp, #80	@ 0x50
 80083c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80083cc:	2300      	movs	r3, #0
 80083ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083d0:	2300      	movs	r3, #0
 80083d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083d8:	4b79      	ldr	r3, [pc, #484]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f003 030c 	and.w	r3, r3, #12
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d00d      	beq.n	8008400 <HAL_RCC_GetSysClockFreq+0x40>
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	f200 80e1 	bhi.w	80085ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_RCC_GetSysClockFreq+0x34>
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d003      	beq.n	80083fa <HAL_RCC_GetSysClockFreq+0x3a>
 80083f2:	e0db      	b.n	80085ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083f4:	4b73      	ldr	r3, [pc, #460]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80083f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80083f8:	e0db      	b.n	80085b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083fa:	4b73      	ldr	r3, [pc, #460]	@ (80085c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80083fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083fe:	e0d8      	b.n	80085b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008400:	4b6f      	ldr	r3, [pc, #444]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008408:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800840a:	4b6d      	ldr	r3, [pc, #436]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d063      	beq.n	80084de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008416:	4b6a      	ldr	r3, [pc, #424]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	099b      	lsrs	r3, r3, #6
 800841c:	2200      	movs	r2, #0
 800841e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008428:	633b      	str	r3, [r7, #48]	@ 0x30
 800842a:	2300      	movs	r3, #0
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
 800842e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008432:	4622      	mov	r2, r4
 8008434:	462b      	mov	r3, r5
 8008436:	f04f 0000 	mov.w	r0, #0
 800843a:	f04f 0100 	mov.w	r1, #0
 800843e:	0159      	lsls	r1, r3, #5
 8008440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008444:	0150      	lsls	r0, r2, #5
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4621      	mov	r1, r4
 800844c:	1a51      	subs	r1, r2, r1
 800844e:	6139      	str	r1, [r7, #16]
 8008450:	4629      	mov	r1, r5
 8008452:	eb63 0301 	sbc.w	r3, r3, r1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008464:	4659      	mov	r1, fp
 8008466:	018b      	lsls	r3, r1, #6
 8008468:	4651      	mov	r1, sl
 800846a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800846e:	4651      	mov	r1, sl
 8008470:	018a      	lsls	r2, r1, #6
 8008472:	4651      	mov	r1, sl
 8008474:	ebb2 0801 	subs.w	r8, r2, r1
 8008478:	4659      	mov	r1, fp
 800847a:	eb63 0901 	sbc.w	r9, r3, r1
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800848a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800848e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008492:	4690      	mov	r8, r2
 8008494:	4699      	mov	r9, r3
 8008496:	4623      	mov	r3, r4
 8008498:	eb18 0303 	adds.w	r3, r8, r3
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	462b      	mov	r3, r5
 80084a0:	eb49 0303 	adc.w	r3, r9, r3
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	f04f 0200 	mov.w	r2, #0
 80084aa:	f04f 0300 	mov.w	r3, #0
 80084ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80084b2:	4629      	mov	r1, r5
 80084b4:	024b      	lsls	r3, r1, #9
 80084b6:	4621      	mov	r1, r4
 80084b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80084bc:	4621      	mov	r1, r4
 80084be:	024a      	lsls	r2, r1, #9
 80084c0:	4610      	mov	r0, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c6:	2200      	movs	r2, #0
 80084c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084d0:	f7f8 fc1a 	bl	8000d08 <__aeabi_uldivmod>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4613      	mov	r3, r2
 80084da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084dc:	e058      	b.n	8008590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084de:	4b38      	ldr	r3, [pc, #224]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	099b      	lsrs	r3, r3, #6
 80084e4:	2200      	movs	r2, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	4611      	mov	r1, r2
 80084ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084ee:	623b      	str	r3, [r7, #32]
 80084f0:	2300      	movs	r3, #0
 80084f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80084f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084f8:	4642      	mov	r2, r8
 80084fa:	464b      	mov	r3, r9
 80084fc:	f04f 0000 	mov.w	r0, #0
 8008500:	f04f 0100 	mov.w	r1, #0
 8008504:	0159      	lsls	r1, r3, #5
 8008506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800850a:	0150      	lsls	r0, r2, #5
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4641      	mov	r1, r8
 8008512:	ebb2 0a01 	subs.w	sl, r2, r1
 8008516:	4649      	mov	r1, r9
 8008518:	eb63 0b01 	sbc.w	fp, r3, r1
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800852c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008530:	ebb2 040a 	subs.w	r4, r2, sl
 8008534:	eb63 050b 	sbc.w	r5, r3, fp
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	00eb      	lsls	r3, r5, #3
 8008542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008546:	00e2      	lsls	r2, r4, #3
 8008548:	4614      	mov	r4, r2
 800854a:	461d      	mov	r5, r3
 800854c:	4643      	mov	r3, r8
 800854e:	18e3      	adds	r3, r4, r3
 8008550:	603b      	str	r3, [r7, #0]
 8008552:	464b      	mov	r3, r9
 8008554:	eb45 0303 	adc.w	r3, r5, r3
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008566:	4629      	mov	r1, r5
 8008568:	028b      	lsls	r3, r1, #10
 800856a:	4621      	mov	r1, r4
 800856c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008570:	4621      	mov	r1, r4
 8008572:	028a      	lsls	r2, r1, #10
 8008574:	4610      	mov	r0, r2
 8008576:	4619      	mov	r1, r3
 8008578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800857a:	2200      	movs	r2, #0
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	61fa      	str	r2, [r7, #28]
 8008580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008584:	f7f8 fbc0 	bl	8000d08 <__aeabi_uldivmod>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4613      	mov	r3, r2
 800858e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008590:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	3301      	adds	r3, #1
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80085a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085aa:	e002      	b.n	80085b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085ac:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80085ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3750      	adds	r7, #80	@ 0x50
 80085b8:	46bd      	mov	sp, r7
 80085ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085be:	bf00      	nop
 80085c0:	40023800 	.word	0x40023800
 80085c4:	00f42400 	.word	0x00f42400
 80085c8:	007a1200 	.word	0x007a1200

080085cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085d0:	4b03      	ldr	r3, [pc, #12]	@ (80085e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80085d2:	681b      	ldr	r3, [r3, #0]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20002388 	.word	0x20002388

080085e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085e8:	f7ff fff0 	bl	80085cc <HAL_RCC_GetHCLKFreq>
 80085ec:	4602      	mov	r2, r0
 80085ee:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	0a9b      	lsrs	r3, r3, #10
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	4903      	ldr	r1, [pc, #12]	@ (8008608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085fa:	5ccb      	ldrb	r3, [r1, r3]
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40023800 	.word	0x40023800
 8008608:	080233a0 	.word	0x080233a0

0800860c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008610:	f7ff ffdc 	bl	80085cc <HAL_RCC_GetHCLKFreq>
 8008614:	4602      	mov	r2, r0
 8008616:	4b05      	ldr	r3, [pc, #20]	@ (800862c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	0b5b      	lsrs	r3, r3, #13
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	4903      	ldr	r1, [pc, #12]	@ (8008630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008622:	5ccb      	ldrb	r3, [r1, r3]
 8008624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008628:	4618      	mov	r0, r3
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40023800 	.word	0x40023800
 8008630:	080233a0 	.word	0x080233a0

08008634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	220f      	movs	r2, #15
 8008642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008644:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <HAL_RCC_GetClockConfig+0x5c>)
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 0203 	and.w	r2, r3, #3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008650:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <HAL_RCC_GetClockConfig+0x5c>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800865c:	4b0c      	ldr	r3, [pc, #48]	@ (8008690 <HAL_RCC_GetClockConfig+0x5c>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008668:	4b09      	ldr	r3, [pc, #36]	@ (8008690 <HAL_RCC_GetClockConfig+0x5c>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	08db      	lsrs	r3, r3, #3
 800866e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008676:	4b07      	ldr	r3, [pc, #28]	@ (8008694 <HAL_RCC_GetClockConfig+0x60>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0207 	and.w	r2, r3, #7
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	601a      	str	r2, [r3, #0]
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40023800 	.word	0x40023800
 8008694:	40023c00 	.word	0x40023c00

08008698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e041      	b.n	800872e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fc ff42 	bl	8005548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f000 fd8c 	bl	80091f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e04e      	b.n	80087ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a23      	ldr	r2, [pc, #140]	@ (80087fc <HAL_TIM_Base_Start_IT+0xc4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d022      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877a:	d01d      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1f      	ldr	r2, [pc, #124]	@ (8008800 <HAL_TIM_Base_Start_IT+0xc8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1e      	ldr	r2, [pc, #120]	@ (8008804 <HAL_TIM_Base_Start_IT+0xcc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1c      	ldr	r2, [pc, #112]	@ (8008808 <HAL_TIM_Base_Start_IT+0xd0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <HAL_TIM_Base_Start_IT+0xd4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a19      	ldr	r2, [pc, #100]	@ (8008810 <HAL_TIM_Base_Start_IT+0xd8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a18      	ldr	r2, [pc, #96]	@ (8008814 <HAL_TIM_Base_Start_IT+0xdc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d111      	bne.n	80087dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d010      	beq.n	80087ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0201 	orr.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087da:	e007      	b.n	80087ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800
 8008808:	40000c00 	.word	0x40000c00
 800880c:	40010400 	.word	0x40010400
 8008810:	40014000 	.word	0x40014000
 8008814:	40001800 	.word	0x40001800

08008818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e041      	b.n	80088ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fc fe60 	bl	8005504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f000 fccc 	bl	80091f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d109      	bne.n	80088dc <HAL_TIM_PWM_Start+0x24>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	bf14      	ite	ne
 80088d4:	2301      	movne	r3, #1
 80088d6:	2300      	moveq	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	e022      	b.n	8008922 <HAL_TIM_PWM_Start+0x6a>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d109      	bne.n	80088f6 <HAL_TIM_PWM_Start+0x3e>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	bf14      	ite	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2300      	moveq	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	e015      	b.n	8008922 <HAL_TIM_PWM_Start+0x6a>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d109      	bne.n	8008910 <HAL_TIM_PWM_Start+0x58>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e008      	b.n	8008922 <HAL_TIM_PWM_Start+0x6a>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	bf14      	ite	ne
 800891c:	2301      	movne	r3, #1
 800891e:	2300      	moveq	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e07c      	b.n	8008a24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <HAL_TIM_PWM_Start+0x82>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008938:	e013      	b.n	8008962 <HAL_TIM_PWM_Start+0xaa>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b04      	cmp	r3, #4
 800893e:	d104      	bne.n	800894a <HAL_TIM_PWM_Start+0x92>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008948:	e00b      	b.n	8008962 <HAL_TIM_PWM_Start+0xaa>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b08      	cmp	r3, #8
 800894e:	d104      	bne.n	800895a <HAL_TIM_PWM_Start+0xa2>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008958:	e003      	b.n	8008962 <HAL_TIM_PWM_Start+0xaa>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2201      	movs	r2, #1
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 ff38 	bl	80097e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a2d      	ldr	r2, [pc, #180]	@ (8008a2c <HAL_TIM_PWM_Start+0x174>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_TIM_PWM_Start+0xcc>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a30 <HAL_TIM_PWM_Start+0x178>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d101      	bne.n	8008988 <HAL_TIM_PWM_Start+0xd0>
 8008984:	2301      	movs	r3, #1
 8008986:	e000      	b.n	800898a <HAL_TIM_PWM_Start+0xd2>
 8008988:	2300      	movs	r3, #0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d007      	beq.n	800899e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800899c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a22      	ldr	r2, [pc, #136]	@ (8008a2c <HAL_TIM_PWM_Start+0x174>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d022      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089b0:	d01d      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a34 <HAL_TIM_PWM_Start+0x17c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d018      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a38 <HAL_TIM_PWM_Start+0x180>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d013      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a1c      	ldr	r2, [pc, #112]	@ (8008a3c <HAL_TIM_PWM_Start+0x184>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00e      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a16      	ldr	r2, [pc, #88]	@ (8008a30 <HAL_TIM_PWM_Start+0x178>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a18      	ldr	r2, [pc, #96]	@ (8008a40 <HAL_TIM_PWM_Start+0x188>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d004      	beq.n	80089ee <HAL_TIM_PWM_Start+0x136>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a16      	ldr	r2, [pc, #88]	@ (8008a44 <HAL_TIM_PWM_Start+0x18c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d111      	bne.n	8008a12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b06      	cmp	r3, #6
 80089fe:	d010      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a10:	e007      	b.n	8008a22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0201 	orr.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40010400 	.word	0x40010400
 8008a34:	40000400 	.word	0x40000400
 8008a38:	40000800 	.word	0x40000800
 8008a3c:	40000c00 	.word	0x40000c00
 8008a40:	40014000 	.word	0x40014000
 8008a44:	40001800 	.word	0x40001800

08008a48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e097      	b.n	8008b8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7fc fd8f 	bl	8005594 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f000 fba9 	bl	80091f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	4313      	orrs	r3, r2
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008ae8:	f023 030c 	bic.w	r3, r3, #12
 8008aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008af4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	4313      	orrs	r3, r2
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	011a      	lsls	r2, r3, #4
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	031b      	lsls	r3, r3, #12
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008b2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ba4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d110      	bne.n	8008be6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d102      	bne.n	8008bd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bca:	7b7b      	ldrb	r3, [r7, #13]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d001      	beq.n	8008bd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e069      	b.n	8008ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be4:	e031      	b.n	8008c4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d110      	bne.n	8008c0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d102      	bne.n	8008bf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bf2:	7b3b      	ldrb	r3, [r7, #12]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d001      	beq.n	8008bfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e055      	b.n	8008ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c0c:	e01d      	b.n	8008c4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d108      	bne.n	8008c26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d105      	bne.n	8008c26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c1a:	7b7b      	ldrb	r3, [r7, #13]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d102      	bne.n	8008c26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c20:	7b3b      	ldrb	r3, [r7, #12]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d001      	beq.n	8008c2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e03e      	b.n	8008ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_TIM_Encoder_Start+0xc4>
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d008      	beq.n	8008c68 <HAL_TIM_Encoder_Start+0xd4>
 8008c56:	e00f      	b.n	8008c78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fdbd 	bl	80097e0 <TIM_CCxChannelCmd>
      break;
 8008c66:	e016      	b.n	8008c96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	2104      	movs	r1, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fdb5 	bl	80097e0 <TIM_CCxChannelCmd>
      break;
 8008c76:	e00e      	b.n	8008c96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	2100      	movs	r1, #0
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 fdad 	bl	80097e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	2104      	movs	r1, #4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fda6 	bl	80097e0 <TIM_CCxChannelCmd>
      break;
 8008c94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0201 	orr.w	r2, r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d020      	beq.n	8008d14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01b      	beq.n	8008d14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0202 	mvn.w	r2, #2
 8008ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa5b 	bl	80091b6 <HAL_TIM_IC_CaptureCallback>
 8008d00:	e005      	b.n	8008d0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa4d 	bl	80091a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa5e 	bl	80091ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d020      	beq.n	8008d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01b      	beq.n	8008d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0204 	mvn.w	r2, #4
 8008d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2202      	movs	r2, #2
 8008d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa35 	bl	80091b6 <HAL_TIM_IC_CaptureCallback>
 8008d4c:	e005      	b.n	8008d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa27 	bl	80091a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fa38 	bl	80091ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d020      	beq.n	8008dac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01b      	beq.n	8008dac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f06f 0208 	mvn.w	r2, #8
 8008d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa0f 	bl	80091b6 <HAL_TIM_IC_CaptureCallback>
 8008d98:	e005      	b.n	8008da6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa01 	bl	80091a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fa12 	bl	80091ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f003 0310 	and.w	r3, r3, #16
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d020      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01b      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f06f 0210 	mvn.w	r2, #16
 8008dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2208      	movs	r2, #8
 8008dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f9e9 	bl	80091b6 <HAL_TIM_IC_CaptureCallback>
 8008de4:	e005      	b.n	8008df2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f9db 	bl	80091a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9ec 	bl	80091ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0201 	mvn.w	r2, #1
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7fb fe76 	bl	8004b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00c      	beq.n	8008e40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d007      	beq.n	8008e40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fdce 	bl	80099dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f9bd 	bl	80091de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0220 	mvn.w	r2, #32
 8008e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fda0 	bl	80099c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e88:	bf00      	nop
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e0ae      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b0c      	cmp	r3, #12
 8008eba:	f200 809f 	bhi.w	8008ffc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008ef9 	.word	0x08008ef9
 8008ec8:	08008ffd 	.word	0x08008ffd
 8008ecc:	08008ffd 	.word	0x08008ffd
 8008ed0:	08008ffd 	.word	0x08008ffd
 8008ed4:	08008f39 	.word	0x08008f39
 8008ed8:	08008ffd 	.word	0x08008ffd
 8008edc:	08008ffd 	.word	0x08008ffd
 8008ee0:	08008ffd 	.word	0x08008ffd
 8008ee4:	08008f7b 	.word	0x08008f7b
 8008ee8:	08008ffd 	.word	0x08008ffd
 8008eec:	08008ffd 	.word	0x08008ffd
 8008ef0:	08008ffd 	.word	0x08008ffd
 8008ef4:	08008fbb 	.word	0x08008fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fa24 	bl	800934c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0208 	orr.w	r2, r2, #8
 8008f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0204 	bic.w	r2, r2, #4
 8008f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6999      	ldr	r1, [r3, #24]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	619a      	str	r2, [r3, #24]
      break;
 8008f36:	e064      	b.n	8009002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fa74 	bl	800942c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6999      	ldr	r1, [r3, #24]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	619a      	str	r2, [r3, #24]
      break;
 8008f78:	e043      	b.n	8009002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fac9 	bl	8009518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	69da      	ldr	r2, [r3, #28]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0208 	orr.w	r2, r2, #8
 8008f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0204 	bic.w	r2, r2, #4
 8008fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	61da      	str	r2, [r3, #28]
      break;
 8008fb8:	e023      	b.n	8009002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fb1d 	bl	8009600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69da      	ldr	r2, [r3, #28]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69d9      	ldr	r1, [r3, #28]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	021a      	lsls	r2, r3, #8
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	61da      	str	r2, [r3, #28]
      break;
 8008ffa:	e002      	b.n	8009002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8009000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_TIM_ConfigClockSource+0x1c>
 800902c:	2302      	movs	r3, #2
 800902e:	e0b4      	b.n	800919a <HAL_TIM_ConfigClockSource+0x186>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800904e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009068:	d03e      	beq.n	80090e8 <HAL_TIM_ConfigClockSource+0xd4>
 800906a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800906e:	f200 8087 	bhi.w	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009076:	f000 8086 	beq.w	8009186 <HAL_TIM_ConfigClockSource+0x172>
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907e:	d87f      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 8009080:	2b70      	cmp	r3, #112	@ 0x70
 8009082:	d01a      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0xa6>
 8009084:	2b70      	cmp	r3, #112	@ 0x70
 8009086:	d87b      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 8009088:	2b60      	cmp	r3, #96	@ 0x60
 800908a:	d050      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x11a>
 800908c:	2b60      	cmp	r3, #96	@ 0x60
 800908e:	d877      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 8009090:	2b50      	cmp	r3, #80	@ 0x50
 8009092:	d03c      	beq.n	800910e <HAL_TIM_ConfigClockSource+0xfa>
 8009094:	2b50      	cmp	r3, #80	@ 0x50
 8009096:	d873      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 8009098:	2b40      	cmp	r3, #64	@ 0x40
 800909a:	d058      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x13a>
 800909c:	2b40      	cmp	r3, #64	@ 0x40
 800909e:	d86f      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 80090a0:	2b30      	cmp	r3, #48	@ 0x30
 80090a2:	d064      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15a>
 80090a4:	2b30      	cmp	r3, #48	@ 0x30
 80090a6:	d86b      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d060      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15a>
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d867      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d05c      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15a>
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d05a      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15a>
 80090b8:	e062      	b.n	8009180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090ca:	f000 fb69 	bl	80097a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	609a      	str	r2, [r3, #8]
      break;
 80090e6:	e04f      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090f8:	f000 fb52 	bl	80097a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800910a:	609a      	str	r2, [r3, #8]
      break;
 800910c:	e03c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800911a:	461a      	mov	r2, r3
 800911c:	f000 fac6 	bl	80096ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2150      	movs	r1, #80	@ 0x50
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fb1f 	bl	800976a <TIM_ITRx_SetConfig>
      break;
 800912c:	e02c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800913a:	461a      	mov	r2, r3
 800913c:	f000 fae5 	bl	800970a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2160      	movs	r1, #96	@ 0x60
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fb0f 	bl	800976a <TIM_ITRx_SetConfig>
      break;
 800914c:	e01c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800915a:	461a      	mov	r2, r3
 800915c:	f000 faa6 	bl	80096ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2140      	movs	r1, #64	@ 0x40
 8009166:	4618      	mov	r0, r3
 8009168:	f000 faff 	bl	800976a <TIM_ITRx_SetConfig>
      break;
 800916c:	e00c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f000 faf6 	bl	800976a <TIM_ITRx_SetConfig>
      break;
 800917e:	e003      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	73fb      	strb	r3, [r7, #15]
      break;
 8009184:	e000      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091be:	bf00      	nop
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091d2:	bf00      	nop
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
	...

080091f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a46      	ldr	r2, [pc, #280]	@ (8009320 <TIM_Base_SetConfig+0x12c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009212:	d00f      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a43      	ldr	r2, [pc, #268]	@ (8009324 <TIM_Base_SetConfig+0x130>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00b      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a42      	ldr	r2, [pc, #264]	@ (8009328 <TIM_Base_SetConfig+0x134>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a41      	ldr	r2, [pc, #260]	@ (800932c <TIM_Base_SetConfig+0x138>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a40      	ldr	r2, [pc, #256]	@ (8009330 <TIM_Base_SetConfig+0x13c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d108      	bne.n	8009246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800923a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a35      	ldr	r2, [pc, #212]	@ (8009320 <TIM_Base_SetConfig+0x12c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d02b      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009254:	d027      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a32      	ldr	r2, [pc, #200]	@ (8009324 <TIM_Base_SetConfig+0x130>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d023      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a31      	ldr	r2, [pc, #196]	@ (8009328 <TIM_Base_SetConfig+0x134>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d01f      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a30      	ldr	r2, [pc, #192]	@ (800932c <TIM_Base_SetConfig+0x138>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d01b      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a2f      	ldr	r2, [pc, #188]	@ (8009330 <TIM_Base_SetConfig+0x13c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d017      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a2e      	ldr	r2, [pc, #184]	@ (8009334 <TIM_Base_SetConfig+0x140>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d013      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a2d      	ldr	r2, [pc, #180]	@ (8009338 <TIM_Base_SetConfig+0x144>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00f      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a2c      	ldr	r2, [pc, #176]	@ (800933c <TIM_Base_SetConfig+0x148>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00b      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a2b      	ldr	r2, [pc, #172]	@ (8009340 <TIM_Base_SetConfig+0x14c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d007      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a2a      	ldr	r2, [pc, #168]	@ (8009344 <TIM_Base_SetConfig+0x150>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d003      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a29      	ldr	r2, [pc, #164]	@ (8009348 <TIM_Base_SetConfig+0x154>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d108      	bne.n	80092b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a10      	ldr	r2, [pc, #64]	@ (8009320 <TIM_Base_SetConfig+0x12c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_Base_SetConfig+0xf8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a12      	ldr	r2, [pc, #72]	@ (8009330 <TIM_Base_SetConfig+0x13c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d103      	bne.n	80092f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b01      	cmp	r3, #1
 8009304:	d105      	bne.n	8009312 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f023 0201 	bic.w	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	611a      	str	r2, [r3, #16]
  }
}
 8009312:	bf00      	nop
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	40010000 	.word	0x40010000
 8009324:	40000400 	.word	0x40000400
 8009328:	40000800 	.word	0x40000800
 800932c:	40000c00 	.word	0x40000c00
 8009330:	40010400 	.word	0x40010400
 8009334:	40014000 	.word	0x40014000
 8009338:	40014400 	.word	0x40014400
 800933c:	40014800 	.word	0x40014800
 8009340:	40001800 	.word	0x40001800
 8009344:	40001c00 	.word	0x40001c00
 8009348:	40002000 	.word	0x40002000

0800934c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	f023 0201 	bic.w	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0303 	bic.w	r3, r3, #3
 8009382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f023 0302 	bic.w	r3, r3, #2
 8009394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4313      	orrs	r3, r2
 800939e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a20      	ldr	r2, [pc, #128]	@ (8009424 <TIM_OC1_SetConfig+0xd8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d003      	beq.n	80093b0 <TIM_OC1_SetConfig+0x64>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009428 <TIM_OC1_SetConfig+0xdc>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d10c      	bne.n	80093ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f023 0308 	bic.w	r3, r3, #8
 80093b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	4313      	orrs	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f023 0304 	bic.w	r3, r3, #4
 80093c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a15      	ldr	r2, [pc, #84]	@ (8009424 <TIM_OC1_SetConfig+0xd8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_OC1_SetConfig+0x8e>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a14      	ldr	r2, [pc, #80]	@ (8009428 <TIM_OC1_SetConfig+0xdc>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d111      	bne.n	80093fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	621a      	str	r2, [r3, #32]
}
 8009418:	bf00      	nop
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	40010000 	.word	0x40010000
 8009428:	40010400 	.word	0x40010400

0800942c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	f023 0210 	bic.w	r2, r3, #16
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800945a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f023 0320 	bic.w	r3, r3, #32
 8009476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a22      	ldr	r2, [pc, #136]	@ (8009510 <TIM_OC2_SetConfig+0xe4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d003      	beq.n	8009494 <TIM_OC2_SetConfig+0x68>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a21      	ldr	r2, [pc, #132]	@ (8009514 <TIM_OC2_SetConfig+0xe8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d10d      	bne.n	80094b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800949a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a17      	ldr	r2, [pc, #92]	@ (8009510 <TIM_OC2_SetConfig+0xe4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC2_SetConfig+0x94>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a16      	ldr	r2, [pc, #88]	@ (8009514 <TIM_OC2_SetConfig+0xe8>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d113      	bne.n	80094e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	621a      	str	r2, [r3, #32]
}
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40010400 	.word	0x40010400

08009518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	4313      	orrs	r3, r2
 800956c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a21      	ldr	r2, [pc, #132]	@ (80095f8 <TIM_OC3_SetConfig+0xe0>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d003      	beq.n	800957e <TIM_OC3_SetConfig+0x66>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a20      	ldr	r2, [pc, #128]	@ (80095fc <TIM_OC3_SetConfig+0xe4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d10d      	bne.n	800959a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a16      	ldr	r2, [pc, #88]	@ (80095f8 <TIM_OC3_SetConfig+0xe0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d003      	beq.n	80095aa <TIM_OC3_SetConfig+0x92>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a15      	ldr	r2, [pc, #84]	@ (80095fc <TIM_OC3_SetConfig+0xe4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d113      	bne.n	80095d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	621a      	str	r2, [r3, #32]
}
 80095ec:	bf00      	nop
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	40010000 	.word	0x40010000
 80095fc:	40010400 	.word	0x40010400

08009600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800964a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	031b      	lsls	r3, r3, #12
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a12      	ldr	r2, [pc, #72]	@ (80096a4 <TIM_OC4_SetConfig+0xa4>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <TIM_OC4_SetConfig+0x68>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a11      	ldr	r2, [pc, #68]	@ (80096a8 <TIM_OC4_SetConfig+0xa8>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d109      	bne.n	800967c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800966e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	019b      	lsls	r3, r3, #6
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	4313      	orrs	r3, r2
 800967a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	621a      	str	r2, [r3, #32]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40010400 	.word	0x40010400

080096ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	f023 0201 	bic.w	r2, r3, #1
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f023 030a 	bic.w	r3, r3, #10
 80096e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	621a      	str	r2, [r3, #32]
}
 80096fe:	bf00      	nop
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800970a:	b480      	push	{r7}
 800970c:	b087      	sub	sp, #28
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	f023 0210 	bic.w	r2, r3, #16
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	031b      	lsls	r3, r3, #12
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4313      	orrs	r3, r2
 800973e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009746:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	4313      	orrs	r3, r2
 8009750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	621a      	str	r2, [r3, #32]
}
 800975e:	bf00      	nop
 8009760:	371c      	adds	r7, #28
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800976a:	b480      	push	{r7}
 800976c:	b085      	sub	sp, #20
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4313      	orrs	r3, r2
 8009788:	f043 0307 	orr.w	r3, r3, #7
 800978c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	609a      	str	r2, [r3, #8]
}
 8009794:	bf00      	nop
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	021a      	lsls	r2, r3, #8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	609a      	str	r2, [r3, #8]
}
 80097d4:	bf00      	nop
 80097d6:	371c      	adds	r7, #28
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f003 031f 	and.w	r3, r3, #31
 80097f2:	2201      	movs	r2, #1
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	43db      	mvns	r3, r3
 8009802:	401a      	ands	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1a      	ldr	r2, [r3, #32]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	f003 031f 	and.w	r3, r3, #31
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	fa01 f303 	lsl.w	r3, r1, r3
 8009818:	431a      	orrs	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	621a      	str	r2, [r3, #32]
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
	...

0800982c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009840:	2302      	movs	r3, #2
 8009842:	e05a      	b.n	80098fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a21      	ldr	r2, [pc, #132]	@ (8009908 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d022      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009890:	d01d      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a1d      	ldr	r2, [pc, #116]	@ (800990c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d018      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d013      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00e      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a18      	ldr	r2, [pc, #96]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d009      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a17      	ldr	r2, [pc, #92]	@ (800991c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d004      	beq.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a15      	ldr	r2, [pc, #84]	@ (8009920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d10c      	bne.n	80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40010000 	.word	0x40010000
 800990c:	40000400 	.word	0x40000400
 8009910:	40000800 	.word	0x40000800
 8009914:	40000c00 	.word	0x40000c00
 8009918:	40010400 	.word	0x40010400
 800991c:	40014000 	.word	0x40014000
 8009920:	40001800 	.word	0x40001800

08009924 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800993c:	2302      	movs	r3, #2
 800993e:	e03d      	b.n	80099bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e042      	b.n	8009a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7fb ff4e 	bl	80058b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2224      	movs	r2, #36	@ 0x24
 8009a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f8f7 	bl	800ac28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	691a      	ldr	r2, [r3, #16]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	695a      	ldr	r2, [r3, #20]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	@ 0x28
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d175      	bne.n	8009b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_UART_Transmit+0x2c>
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e06e      	b.n	8009b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2221      	movs	r2, #33	@ 0x21
 8009aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ace:	f7fc fda1 	bl	8006614 <HAL_GetTick>
 8009ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	88fa      	ldrh	r2, [r7, #6]
 8009ad8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	88fa      	ldrh	r2, [r7, #6]
 8009ade:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae8:	d108      	bne.n	8009afc <HAL_UART_Transmit+0x6c>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e003      	b.n	8009b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b04:	e02e      	b.n	8009b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2180      	movs	r1, #128	@ 0x80
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 fd96 	bl	800a642 <UART_WaitOnFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d005      	beq.n	8009b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e03a      	b.n	8009b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10b      	bne.n	8009b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	3302      	adds	r3, #2
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e007      	b.n	8009b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3301      	adds	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1cb      	bne.n	8009b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2200      	movs	r2, #0
 8009b76:	2140      	movs	r1, #64	@ 0x40
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fd62 	bl	800a642 <UART_WaitOnFlagUntilTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e006      	b.n	8009b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	e000      	b.n	8009b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009b9c:	2302      	movs	r3, #2
  }
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d112      	bne.n	8009be6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_UART_Receive_IT+0x26>
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e00b      	b.n	8009be8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bd6:	88fb      	ldrh	r3, [r7, #6]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	68b9      	ldr	r1, [r7, #8]
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 fd89 	bl	800a6f4 <UART_Start_Receive_IT>
 8009be2:	4603      	mov	r3, r0
 8009be4:	e000      	b.n	8009be8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009be6:	2302      	movs	r3, #2
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08c      	sub	sp, #48	@ 0x30
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b20      	cmp	r3, #32
 8009c08:	d156      	bne.n	8009cb8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <HAL_UART_Transmit_DMA+0x26>
 8009c10:	88fb      	ldrh	r3, [r7, #6]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e04f      	b.n	8009cba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	88fa      	ldrh	r2, [r7, #6]
 8009c2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2221      	movs	r2, #33	@ 0x21
 8009c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3e:	4a21      	ldr	r2, [pc, #132]	@ (8009cc4 <HAL_UART_Transmit_DMA+0xd4>)
 8009c40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c46:	4a20      	ldr	r2, [pc, #128]	@ (8009cc8 <HAL_UART_Transmit_DMA+0xd8>)
 8009c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ccc <HAL_UART_Transmit_DMA+0xdc>)
 8009c50:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c56:	2200      	movs	r2, #0
 8009c58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009c5a:	f107 0308 	add.w	r3, r7, #8
 8009c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	6819      	ldr	r1, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	461a      	mov	r2, r3
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	f7fc fe8f 	bl	8006994 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3314      	adds	r3, #20
 8009c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3314      	adds	r3, #20
 8009c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	6a39      	ldr	r1, [r7, #32]
 8009ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e5      	bne.n	8009c80 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3730      	adds	r7, #48	@ 0x30
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0800a391 	.word	0x0800a391
 8009cc8:	0800a42b 	.word	0x0800a42b
 8009ccc:	0800a5af 	.word	0x0800a5af

08009cd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d112      	bne.n	8009d10 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <HAL_UART_Receive_DMA+0x26>
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e00b      	b.n	8009d12 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	461a      	mov	r2, r3
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fd2e 	bl	800a768 <UART_Start_Receive_DMA>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	e000      	b.n	8009d12 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009d10:	2302      	movs	r3, #2
  }
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b090      	sub	sp, #64	@ 0x40
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d30:	2b80      	cmp	r3, #128	@ 0x80
 8009d32:	bf0c      	ite	eq
 8009d34:	2301      	moveq	r3, #1
 8009d36:	2300      	movne	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b21      	cmp	r3, #33	@ 0x21
 8009d46:	d128      	bne.n	8009d9a <HAL_UART_DMAStop+0x80>
 8009d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d025      	beq.n	8009d9a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3314      	adds	r3, #20
 8009d54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3314      	adds	r3, #20
 8009d6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e5      	bne.n	8009d4e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fc fe58 	bl	8006a44 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fd81 	bl	800a89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da4:	2b40      	cmp	r3, #64	@ 0x40
 8009da6:	bf0c      	ite	eq
 8009da8:	2301      	moveq	r3, #1
 8009daa:	2300      	movne	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b22      	cmp	r3, #34	@ 0x22
 8009dba:	d128      	bne.n	8009e0e <HAL_UART_DMAStop+0xf4>
 8009dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d025      	beq.n	8009e0e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3314      	adds	r3, #20
 8009de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009de2:	61fa      	str	r2, [r7, #28]
 8009de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	69b9      	ldr	r1, [r7, #24]
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	617b      	str	r3, [r7, #20]
   return(result);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fc fe1e 	bl	8006a44 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fd6f 	bl	800a8ec <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3740      	adds	r7, #64	@ 0x40
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10f      	bne.n	8009e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <HAL_UART_IRQHandler+0x66>
 8009e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fe17 	bl	800aaaa <UART_Receive_IT>
      return;
 8009e7c:	e25b      	b.n	800a336 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 80de 	beq.w	800a044 <HAL_UART_IRQHandler+0x22c>
 8009e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d106      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80d1 	beq.w	800a044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xae>
 8009eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ebe:	f043 0201 	orr.w	r2, r3, #1
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eca:	f003 0304 	and.w	r3, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <HAL_UART_IRQHandler+0xd2>
 8009ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee2:	f043 0202 	orr.w	r2, r3, #2
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <HAL_UART_IRQHandler+0xf6>
 8009ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f06:	f043 0204 	orr.w	r2, r3, #4
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d011      	beq.n	8009f3e <HAL_UART_IRQHandler+0x126>
 8009f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d105      	bne.n	8009f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f36:	f043 0208 	orr.w	r2, r3, #8
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 81f2 	beq.w	800a32c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d008      	beq.n	8009f66 <HAL_UART_IRQHandler+0x14e>
 8009f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fda2 	bl	800aaaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f70:	2b40      	cmp	r3, #64	@ 0x40
 8009f72:	bf0c      	ite	eq
 8009f74:	2301      	moveq	r3, #1
 8009f76:	2300      	movne	r3, #0
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d103      	bne.n	8009f92 <HAL_UART_IRQHandler+0x17a>
 8009f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d04f      	beq.n	800a032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fcaa 	bl	800a8ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa2:	2b40      	cmp	r3, #64	@ 0x40
 8009fa4:	d141      	bne.n	800a02a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3314      	adds	r3, #20
 8009fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3314      	adds	r3, #20
 8009fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1d9      	bne.n	8009fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d013      	beq.n	800a022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ffe:	4a7e      	ldr	r2, [pc, #504]	@ (800a1f8 <HAL_UART_IRQHandler+0x3e0>)
 800a000:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a006:	4618      	mov	r0, r3
 800a008:	f7fc fd8c 	bl	8006b24 <HAL_DMA_Abort_IT>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a020:	e00e      	b.n	800a040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7f7 f92a 	bl	800127c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a028:	e00a      	b.n	800a040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7f7 f926 	bl	800127c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a030:	e006      	b.n	800a040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7f7 f922 	bl	800127c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a03e:	e175      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a040:	bf00      	nop
    return;
 800a042:	e173      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a048:	2b01      	cmp	r3, #1
 800a04a:	f040 814f 	bne.w	800a2ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 8148 	beq.w	800a2ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8141 	beq.w	800a2ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a06a:	2300      	movs	r3, #0
 800a06c:	60bb      	str	r3, [r7, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	60bb      	str	r3, [r7, #8]
 800a07e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a08a:	2b40      	cmp	r3, #64	@ 0x40
 800a08c:	f040 80b6 	bne.w	800a1fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a09c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8145 	beq.w	800a330 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f080 813e 	bcs.w	800a330 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a0ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0c6:	f000 8088 	beq.w	800a1da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a0e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a0f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a102:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1d9      	bne.n	800a0ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3314      	adds	r3, #20
 800a11c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a128:	f023 0301 	bic.w	r3, r3, #1
 800a12c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3314      	adds	r3, #20
 800a136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a13a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a13e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a142:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a14c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e1      	bne.n	800a116 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3314      	adds	r3, #20
 800a158:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3314      	adds	r3, #20
 800a172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a176:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a178:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a17c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e3      	bne.n	800a152 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a1a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1aa:	f023 0310 	bic.w	r3, r3, #16
 800a1ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a1bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a1be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e3      	bne.n	800a198 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fc fc35 	bl	8006a44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8c1 	bl	800a378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1f6:	e09b      	b.n	800a330 <HAL_UART_IRQHandler+0x518>
 800a1f8:	0800a9b3 	.word	0x0800a9b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a204:	b29b      	uxth	r3, r3
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a210:	b29b      	uxth	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 808e 	beq.w	800a334 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 8089 	beq.w	800a334 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	330c      	adds	r3, #12
 800a228:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a238:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	330c      	adds	r3, #12
 800a242:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a246:	647a      	str	r2, [r7, #68]	@ 0x44
 800a248:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a24c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e3      	bne.n	800a222 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3314      	adds	r3, #20
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	623b      	str	r3, [r7, #32]
   return(result);
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3314      	adds	r3, #20
 800a27a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a27e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e3      	bne.n	800a25a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2220      	movs	r2, #32
 800a296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	330c      	adds	r3, #12
 800a2a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	e853 3f00 	ldrex	r3, [r3]
 800a2ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0310 	bic.w	r3, r3, #16
 800a2b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	330c      	adds	r3, #12
 800a2c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a2c4:	61fa      	str	r2, [r7, #28]
 800a2c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	69b9      	ldr	r1, [r7, #24]
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e3      	bne.n	800a2a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f847 	bl	800a378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2ea:	e023      	b.n	800a334 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d009      	beq.n	800a30c <HAL_UART_IRQHandler+0x4f4>
 800a2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a300:	2b00      	cmp	r3, #0
 800a302:	d003      	beq.n	800a30c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb68 	bl	800a9da <UART_Transmit_IT>
    return;
 800a30a:	e014      	b.n	800a336 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00e      	beq.n	800a336 <HAL_UART_IRQHandler+0x51e>
 800a318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fba8 	bl	800aa7a <UART_EndTransmit_IT>
    return;
 800a32a:	e004      	b.n	800a336 <HAL_UART_IRQHandler+0x51e>
    return;
 800a32c:	bf00      	nop
 800a32e:	e002      	b.n	800a336 <HAL_UART_IRQHandler+0x51e>
      return;
 800a330:	bf00      	nop
 800a332:	e000      	b.n	800a336 <HAL_UART_IRQHandler+0x51e>
      return;
 800a334:	bf00      	nop
  }
}
 800a336:	37e8      	adds	r7, #232	@ 0xe8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b090      	sub	sp, #64	@ 0x40
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d137      	bne.n	800a41c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3314      	adds	r3, #20
 800a3b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e5      	bne.n	800a3b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	330c      	adds	r3, #12
 800a3ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	330c      	adds	r3, #12
 800a404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a406:	61fa      	str	r2, [r7, #28]
 800a408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	69b9      	ldr	r1, [r7, #24]
 800a40c:	69fa      	ldr	r2, [r7, #28]
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	617b      	str	r3, [r7, #20]
   return(result);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a41a:	e002      	b.n	800a422 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a41c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a41e:	f7ff ff8d 	bl	800a33c <HAL_UART_TxCpltCallback>
}
 800a422:	bf00      	nop
 800a424:	3740      	adds	r7, #64	@ 0x40
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a436:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7ff ff89 	bl	800a350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b09c      	sub	sp, #112	@ 0x70
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a452:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d172      	bne.n	800a548 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a464:	2200      	movs	r2, #0
 800a466:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	330c      	adds	r3, #12
 800a46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a47a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a47e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	330c      	adds	r3, #12
 800a486:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a488:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a48a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a48e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3314      	adds	r3, #20
 800a4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	f023 0301 	bic.w	r3, r3, #1
 800a4b2:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3314      	adds	r3, #20
 800a4ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a4bc:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e5      	bne.n	800a49c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3314      	adds	r3, #20
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4da:	e853 3f00 	ldrex	r3, [r3]
 800a4de:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3314      	adds	r3, #20
 800a4ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4f0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4f8:	e841 2300 	strex	r3, r2, [r1]
 800a4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e5      	bne.n	800a4d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a506:	2220      	movs	r2, #32
 800a508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a510:	2b01      	cmp	r3, #1
 800a512:	d119      	bne.n	800a548 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	330c      	adds	r3, #12
 800a51a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60fb      	str	r3, [r7, #12]
   return(result);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0310 	bic.w	r3, r3, #16
 800a52a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	330c      	adds	r3, #12
 800a532:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a534:	61fa      	str	r2, [r7, #28]
 800a536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	69b9      	ldr	r1, [r7, #24]
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	617b      	str	r3, [r7, #20]
   return(result);
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e5      	bne.n	800a514 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a54a:	2200      	movs	r2, #0
 800a54c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a54e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a552:	2b01      	cmp	r3, #1
 800a554:	d106      	bne.n	800a564 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a55a:	4619      	mov	r1, r3
 800a55c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a55e:	f7ff ff0b 	bl	800a378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a562:	e002      	b.n	800a56a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a564:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a566:	f7fb ffa5 	bl	80064b4 <HAL_UART_RxCpltCallback>
}
 800a56a:	bf00      	nop
 800a56c:	3770      	adds	r7, #112	@ 0x70
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d108      	bne.n	800a5a0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	b29b      	uxth	r3, r3
 800a596:	4619      	mov	r1, r3
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff feed 	bl	800a378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a59e:	e002      	b.n	800a5a6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fedf 	bl	800a364 <HAL_UART_RxHalfCpltCallback>
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ca:	2b80      	cmp	r3, #128	@ 0x80
 800a5cc:	bf0c      	ite	eq
 800a5ce:	2301      	moveq	r3, #1
 800a5d0:	2300      	movne	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b21      	cmp	r3, #33	@ 0x21
 800a5e0:	d108      	bne.n	800a5f4 <UART_DMAError+0x46>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a5ee:	68b8      	ldr	r0, [r7, #8]
 800a5f0:	f000 f954 	bl	800a89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fe:	2b40      	cmp	r3, #64	@ 0x40
 800a600:	bf0c      	ite	eq
 800a602:	2301      	moveq	r3, #1
 800a604:	2300      	movne	r3, #0
 800a606:	b2db      	uxtb	r3, r3
 800a608:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b22      	cmp	r3, #34	@ 0x22
 800a614:	d108      	bne.n	800a628 <UART_DMAError+0x7a>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2200      	movs	r2, #0
 800a620:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a622:	68b8      	ldr	r0, [r7, #8]
 800a624:	f000 f962 	bl	800a8ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a62c:	f043 0210 	orr.w	r2, r3, #16
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a634:	68b8      	ldr	r0, [r7, #8]
 800a636:	f7f6 fe21 	bl	800127c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	4613      	mov	r3, r2
 800a650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a652:	e03b      	b.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d037      	beq.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65c:	f7fb ffda 	bl	8006614 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	6a3a      	ldr	r2, [r7, #32]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d302      	bcc.n	800a672 <UART_WaitOnFlagUntilTimeout+0x30>
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e03a      	b.n	800a6ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	d023      	beq.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b80      	cmp	r3, #128	@ 0x80
 800a688:	d020      	beq.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b40      	cmp	r3, #64	@ 0x40
 800a68e:	d01d      	beq.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0308 	and.w	r3, r3, #8
 800a69a:	2b08      	cmp	r3, #8
 800a69c:	d116      	bne.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	617b      	str	r3, [r7, #20]
 800a6b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f919 	bl	800a8ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e00f      	b.n	800a6ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	bf0c      	ite	eq
 800a6dc:	2301      	moveq	r3, #1
 800a6de:	2300      	movne	r3, #0
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d0b4      	beq.n	800a654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	88fa      	ldrh	r2, [r7, #6]
 800a70c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	88fa      	ldrh	r2, [r7, #6]
 800a712:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2222      	movs	r2, #34	@ 0x22
 800a71e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d007      	beq.n	800a73a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a738:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	695a      	ldr	r2, [r3, #20]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68da      	ldr	r2, [r3, #12]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f042 0220 	orr.w	r2, r2, #32
 800a758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b098      	sub	sp, #96	@ 0x60
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	4613      	mov	r3, r2
 800a774:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	88fa      	ldrh	r2, [r7, #6]
 800a780:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2222      	movs	r2, #34	@ 0x22
 800a78c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a794:	4a3e      	ldr	r2, [pc, #248]	@ (800a890 <UART_Start_Receive_DMA+0x128>)
 800a796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a79c:	4a3d      	ldr	r2, [pc, #244]	@ (800a894 <UART_Start_Receive_DMA+0x12c>)
 800a79e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a4:	4a3c      	ldr	r2, [pc, #240]	@ (800a898 <UART_Start_Receive_DMA+0x130>)
 800a7a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	f7fc f8e4 	bl	8006994 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	613b      	str	r3, [r7, #16]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d019      	beq.n	800a81e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	330c      	adds	r3, #12
 800a7f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f4:	e853 3f00 	ldrex	r3, [r3]
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a800:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	330c      	adds	r3, #12
 800a808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a80a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a80c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a812:	e841 2300 	strex	r3, r2, [r1]
 800a816:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1e5      	bne.n	800a7ea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3314      	adds	r3, #20
 800a824:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	657b      	str	r3, [r7, #84]	@ 0x54
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3314      	adds	r3, #20
 800a83c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a83e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e5      	bne.n	800a81e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3314      	adds	r3, #20
 800a858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	617b      	str	r3, [r7, #20]
   return(result);
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a868:	653b      	str	r3, [r7, #80]	@ 0x50
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3314      	adds	r3, #20
 800a870:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a872:	627a      	str	r2, [r7, #36]	@ 0x24
 800a874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6a39      	ldr	r1, [r7, #32]
 800a878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e5      	bne.n	800a852 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3760      	adds	r7, #96	@ 0x60
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	0800a447 	.word	0x0800a447
 800a894:	0800a573 	.word	0x0800a573
 800a898:	0800a5af 	.word	0x0800a5af

0800a89c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b089      	sub	sp, #36	@ 0x24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	330c      	adds	r3, #12
 800a8aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	330c      	adds	r3, #12
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	61ba      	str	r2, [r7, #24]
 800a8c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	6979      	ldr	r1, [r7, #20]
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e5      	bne.n	800a8a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a8e0:	bf00      	nop
 800a8e2:	3724      	adds	r7, #36	@ 0x24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b095      	sub	sp, #84	@ 0x54
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	330c      	adds	r3, #12
 800a8fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a90a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	330c      	adds	r3, #12
 800a912:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a914:	643a      	str	r2, [r7, #64]	@ 0x40
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a91a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e5      	bne.n	800a8f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3314      	adds	r3, #20
 800a92e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	e853 3f00 	ldrex	r3, [r3]
 800a936:	61fb      	str	r3, [r7, #28]
   return(result);
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	f023 0301 	bic.w	r3, r3, #1
 800a93e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3314      	adds	r3, #20
 800a946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a948:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a94a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a94e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e5      	bne.n	800a928 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a960:	2b01      	cmp	r3, #1
 800a962:	d119      	bne.n	800a998 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	330c      	adds	r3, #12
 800a96a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	60bb      	str	r3, [r7, #8]
   return(result);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f023 0310 	bic.w	r3, r3, #16
 800a97a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	330c      	adds	r3, #12
 800a982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a984:	61ba      	str	r2, [r7, #24]
 800a986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	6979      	ldr	r1, [r7, #20]
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	613b      	str	r3, [r7, #16]
   return(result);
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e5      	bne.n	800a964 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2220      	movs	r2, #32
 800a99c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a9a6:	bf00      	nop
 800a9a8:	3754      	adds	r7, #84	@ 0x54
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7f6 fc55 	bl	800127c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9d2:	bf00      	nop
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b21      	cmp	r3, #33	@ 0x21
 800a9ec:	d13e      	bne.n	800aa6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9f6:	d114      	bne.n	800aa22 <UART_Transmit_IT+0x48>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d110      	bne.n	800aa22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	1c9a      	adds	r2, r3, #2
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	621a      	str	r2, [r3, #32]
 800aa20:	e008      	b.n	800aa34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	1c59      	adds	r1, r3, #1
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	6211      	str	r1, [r2, #32]
 800aa2c:	781a      	ldrb	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	4619      	mov	r1, r3
 800aa42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10f      	bne.n	800aa68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68da      	ldr	r2, [r3, #12]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	e000      	b.n	800aa6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa6c:	2302      	movs	r3, #2
  }
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff fc4e 	bl	800a33c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b08c      	sub	sp, #48	@ 0x30
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b22      	cmp	r3, #34	@ 0x22
 800aabc:	f040 80ae 	bne.w	800ac1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aac8:	d117      	bne.n	800aafa <UART_Receive_IT+0x50>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d113      	bne.n	800aafa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aada:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	1c9a      	adds	r2, r3, #2
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	629a      	str	r2, [r3, #40]	@ 0x28
 800aaf8:	e026      	b.n	800ab48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ab00:	2300      	movs	r3, #0
 800ab02:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab0c:	d007      	beq.n	800ab1e <UART_Receive_IT+0x74>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10a      	bne.n	800ab2c <UART_Receive_IT+0x82>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d106      	bne.n	800ab2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	e008      	b.n	800ab3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4619      	mov	r1, r3
 800ab56:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d15d      	bne.n	800ac18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0220 	bic.w	r2, r2, #32
 800ab6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	695a      	ldr	r2, [r3, #20]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f022 0201 	bic.w	r2, r2, #1
 800ab8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2220      	movs	r2, #32
 800ab90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d135      	bne.n	800ac0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	330c      	adds	r3, #12
 800abae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	613b      	str	r3, [r7, #16]
   return(result);
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f023 0310 	bic.w	r3, r3, #16
 800abbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	330c      	adds	r3, #12
 800abc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abc8:	623a      	str	r2, [r7, #32]
 800abca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	69f9      	ldr	r1, [r7, #28]
 800abce:	6a3a      	ldr	r2, [r7, #32]
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e5      	bne.n	800aba8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0310 	and.w	r3, r3, #16
 800abe6:	2b10      	cmp	r3, #16
 800abe8:	d10a      	bne.n	800ac00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff fbb6 	bl	800a378 <HAL_UARTEx_RxEventCallback>
 800ac0c:	e002      	b.n	800ac14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7fb fc50 	bl	80064b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	e002      	b.n	800ac1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e000      	b.n	800ac1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ac1c:	2302      	movs	r3, #2
  }
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3730      	adds	r7, #48	@ 0x30
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
	...

0800ac28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac2c:	b0c0      	sub	sp, #256	@ 0x100
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ac40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac44:	68d9      	ldr	r1, [r3, #12]
 800ac46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	ea40 0301 	orr.w	r3, r0, r1
 800ac50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	431a      	orrs	r2, r3
 800ac68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ac80:	f021 010c 	bic.w	r1, r1, #12
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ac9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca2:	6999      	ldr	r1, [r3, #24]
 800aca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	ea40 0301 	orr.w	r3, r0, r1
 800acae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800acb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b8f      	ldr	r3, [pc, #572]	@ (800aef4 <UART_SetConfig+0x2cc>)
 800acb8:	429a      	cmp	r2, r3
 800acba:	d005      	beq.n	800acc8 <UART_SetConfig+0xa0>
 800acbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4b8d      	ldr	r3, [pc, #564]	@ (800aef8 <UART_SetConfig+0x2d0>)
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d104      	bne.n	800acd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acc8:	f7fd fca0 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 800accc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800acd0:	e003      	b.n	800acda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800acd2:	f7fd fc87 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 800acd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ace4:	f040 810c 	bne.w	800af00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ace8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acec:	2200      	movs	r2, #0
 800acee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800acf2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800acf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800acfa:	4622      	mov	r2, r4
 800acfc:	462b      	mov	r3, r5
 800acfe:	1891      	adds	r1, r2, r2
 800ad00:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ad02:	415b      	adcs	r3, r3
 800ad04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	eb12 0801 	adds.w	r8, r2, r1
 800ad10:	4629      	mov	r1, r5
 800ad12:	eb43 0901 	adc.w	r9, r3, r1
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	f04f 0300 	mov.w	r3, #0
 800ad1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad2a:	4690      	mov	r8, r2
 800ad2c:	4699      	mov	r9, r3
 800ad2e:	4623      	mov	r3, r4
 800ad30:	eb18 0303 	adds.w	r3, r8, r3
 800ad34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad38:	462b      	mov	r3, r5
 800ad3a:	eb49 0303 	adc.w	r3, r9, r3
 800ad3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ad52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ad56:	460b      	mov	r3, r1
 800ad58:	18db      	adds	r3, r3, r3
 800ad5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	eb42 0303 	adc.w	r3, r2, r3
 800ad62:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ad68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ad6c:	f7f5 ffcc 	bl	8000d08 <__aeabi_uldivmod>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4b61      	ldr	r3, [pc, #388]	@ (800aefc <UART_SetConfig+0x2d4>)
 800ad76:	fba3 2302 	umull	r2, r3, r3, r2
 800ad7a:	095b      	lsrs	r3, r3, #5
 800ad7c:	011c      	lsls	r4, r3, #4
 800ad7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ad8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ad90:	4642      	mov	r2, r8
 800ad92:	464b      	mov	r3, r9
 800ad94:	1891      	adds	r1, r2, r2
 800ad96:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ad98:	415b      	adcs	r3, r3
 800ad9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ada0:	4641      	mov	r1, r8
 800ada2:	eb12 0a01 	adds.w	sl, r2, r1
 800ada6:	4649      	mov	r1, r9
 800ada8:	eb43 0b01 	adc.w	fp, r3, r1
 800adac:	f04f 0200 	mov.w	r2, #0
 800adb0:	f04f 0300 	mov.w	r3, #0
 800adb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800adb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800adbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adc0:	4692      	mov	sl, r2
 800adc2:	469b      	mov	fp, r3
 800adc4:	4643      	mov	r3, r8
 800adc6:	eb1a 0303 	adds.w	r3, sl, r3
 800adca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adce:	464b      	mov	r3, r9
 800add0:	eb4b 0303 	adc.w	r3, fp, r3
 800add4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800add8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ade4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ade8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800adec:	460b      	mov	r3, r1
 800adee:	18db      	adds	r3, r3, r3
 800adf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800adf2:	4613      	mov	r3, r2
 800adf4:	eb42 0303 	adc.w	r3, r2, r3
 800adf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800adfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ae02:	f7f5 ff81 	bl	8000d08 <__aeabi_uldivmod>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4b3b      	ldr	r3, [pc, #236]	@ (800aefc <UART_SetConfig+0x2d4>)
 800ae0e:	fba3 2301 	umull	r2, r3, r3, r1
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	2264      	movs	r2, #100	@ 0x64
 800ae16:	fb02 f303 	mul.w	r3, r2, r3
 800ae1a:	1acb      	subs	r3, r1, r3
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ae22:	4b36      	ldr	r3, [pc, #216]	@ (800aefc <UART_SetConfig+0x2d4>)
 800ae24:	fba3 2302 	umull	r2, r3, r3, r2
 800ae28:	095b      	lsrs	r3, r3, #5
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ae30:	441c      	add	r4, r3
 800ae32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ae40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ae44:	4642      	mov	r2, r8
 800ae46:	464b      	mov	r3, r9
 800ae48:	1891      	adds	r1, r2, r2
 800ae4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ae4c:	415b      	adcs	r3, r3
 800ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ae54:	4641      	mov	r1, r8
 800ae56:	1851      	adds	r1, r2, r1
 800ae58:	6339      	str	r1, [r7, #48]	@ 0x30
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	414b      	adcs	r3, r1
 800ae5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae60:	f04f 0200 	mov.w	r2, #0
 800ae64:	f04f 0300 	mov.w	r3, #0
 800ae68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	00cb      	lsls	r3, r1, #3
 800ae70:	4651      	mov	r1, sl
 800ae72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae76:	4651      	mov	r1, sl
 800ae78:	00ca      	lsls	r2, r1, #3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4603      	mov	r3, r0
 800ae80:	4642      	mov	r2, r8
 800ae82:	189b      	adds	r3, r3, r2
 800ae84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae88:	464b      	mov	r3, r9
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	eb42 0303 	adc.w	r3, r2, r3
 800ae90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aea0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aea8:	460b      	mov	r3, r1
 800aeaa:	18db      	adds	r3, r3, r3
 800aeac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeae:	4613      	mov	r3, r2
 800aeb0:	eb42 0303 	adc.w	r3, r2, r3
 800aeb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aeba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aebe:	f7f5 ff23 	bl	8000d08 <__aeabi_uldivmod>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4b0d      	ldr	r3, [pc, #52]	@ (800aefc <UART_SetConfig+0x2d4>)
 800aec8:	fba3 1302 	umull	r1, r3, r3, r2
 800aecc:	095b      	lsrs	r3, r3, #5
 800aece:	2164      	movs	r1, #100	@ 0x64
 800aed0:	fb01 f303 	mul.w	r3, r1, r3
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	3332      	adds	r3, #50	@ 0x32
 800aeda:	4a08      	ldr	r2, [pc, #32]	@ (800aefc <UART_SetConfig+0x2d4>)
 800aedc:	fba2 2303 	umull	r2, r3, r2, r3
 800aee0:	095b      	lsrs	r3, r3, #5
 800aee2:	f003 0207 	and.w	r2, r3, #7
 800aee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4422      	add	r2, r4
 800aeee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aef0:	e106      	b.n	800b100 <UART_SetConfig+0x4d8>
 800aef2:	bf00      	nop
 800aef4:	40011000 	.word	0x40011000
 800aef8:	40011400 	.word	0x40011400
 800aefc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af04:	2200      	movs	r2, #0
 800af06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800af0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800af0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800af12:	4642      	mov	r2, r8
 800af14:	464b      	mov	r3, r9
 800af16:	1891      	adds	r1, r2, r2
 800af18:	6239      	str	r1, [r7, #32]
 800af1a:	415b      	adcs	r3, r3
 800af1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af22:	4641      	mov	r1, r8
 800af24:	1854      	adds	r4, r2, r1
 800af26:	4649      	mov	r1, r9
 800af28:	eb43 0501 	adc.w	r5, r3, r1
 800af2c:	f04f 0200 	mov.w	r2, #0
 800af30:	f04f 0300 	mov.w	r3, #0
 800af34:	00eb      	lsls	r3, r5, #3
 800af36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af3a:	00e2      	lsls	r2, r4, #3
 800af3c:	4614      	mov	r4, r2
 800af3e:	461d      	mov	r5, r3
 800af40:	4643      	mov	r3, r8
 800af42:	18e3      	adds	r3, r4, r3
 800af44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af48:	464b      	mov	r3, r9
 800af4a:	eb45 0303 	adc.w	r3, r5, r3
 800af4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800af62:	f04f 0200 	mov.w	r2, #0
 800af66:	f04f 0300 	mov.w	r3, #0
 800af6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800af6e:	4629      	mov	r1, r5
 800af70:	008b      	lsls	r3, r1, #2
 800af72:	4621      	mov	r1, r4
 800af74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af78:	4621      	mov	r1, r4
 800af7a:	008a      	lsls	r2, r1, #2
 800af7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800af80:	f7f5 fec2 	bl	8000d08 <__aeabi_uldivmod>
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	4b60      	ldr	r3, [pc, #384]	@ (800b10c <UART_SetConfig+0x4e4>)
 800af8a:	fba3 2302 	umull	r2, r3, r3, r2
 800af8e:	095b      	lsrs	r3, r3, #5
 800af90:	011c      	lsls	r4, r3, #4
 800af92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af96:	2200      	movs	r2, #0
 800af98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800afa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800afa4:	4642      	mov	r2, r8
 800afa6:	464b      	mov	r3, r9
 800afa8:	1891      	adds	r1, r2, r2
 800afaa:	61b9      	str	r1, [r7, #24]
 800afac:	415b      	adcs	r3, r3
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afb4:	4641      	mov	r1, r8
 800afb6:	1851      	adds	r1, r2, r1
 800afb8:	6139      	str	r1, [r7, #16]
 800afba:	4649      	mov	r1, r9
 800afbc:	414b      	adcs	r3, r1
 800afbe:	617b      	str	r3, [r7, #20]
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	f04f 0300 	mov.w	r3, #0
 800afc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afcc:	4659      	mov	r1, fp
 800afce:	00cb      	lsls	r3, r1, #3
 800afd0:	4651      	mov	r1, sl
 800afd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afd6:	4651      	mov	r1, sl
 800afd8:	00ca      	lsls	r2, r1, #3
 800afda:	4610      	mov	r0, r2
 800afdc:	4619      	mov	r1, r3
 800afde:	4603      	mov	r3, r0
 800afe0:	4642      	mov	r2, r8
 800afe2:	189b      	adds	r3, r3, r2
 800afe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afe8:	464b      	mov	r3, r9
 800afea:	460a      	mov	r2, r1
 800afec:	eb42 0303 	adc.w	r3, r2, r3
 800aff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800affe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b000:	f04f 0200 	mov.w	r2, #0
 800b004:	f04f 0300 	mov.w	r3, #0
 800b008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b00c:	4649      	mov	r1, r9
 800b00e:	008b      	lsls	r3, r1, #2
 800b010:	4641      	mov	r1, r8
 800b012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b016:	4641      	mov	r1, r8
 800b018:	008a      	lsls	r2, r1, #2
 800b01a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b01e:	f7f5 fe73 	bl	8000d08 <__aeabi_uldivmod>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4611      	mov	r1, r2
 800b028:	4b38      	ldr	r3, [pc, #224]	@ (800b10c <UART_SetConfig+0x4e4>)
 800b02a:	fba3 2301 	umull	r2, r3, r3, r1
 800b02e:	095b      	lsrs	r3, r3, #5
 800b030:	2264      	movs	r2, #100	@ 0x64
 800b032:	fb02 f303 	mul.w	r3, r2, r3
 800b036:	1acb      	subs	r3, r1, r3
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	3332      	adds	r3, #50	@ 0x32
 800b03c:	4a33      	ldr	r2, [pc, #204]	@ (800b10c <UART_SetConfig+0x4e4>)
 800b03e:	fba2 2303 	umull	r2, r3, r2, r3
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b048:	441c      	add	r4, r3
 800b04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b04e:	2200      	movs	r2, #0
 800b050:	673b      	str	r3, [r7, #112]	@ 0x70
 800b052:	677a      	str	r2, [r7, #116]	@ 0x74
 800b054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b058:	4642      	mov	r2, r8
 800b05a:	464b      	mov	r3, r9
 800b05c:	1891      	adds	r1, r2, r2
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	415b      	adcs	r3, r3
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b068:	4641      	mov	r1, r8
 800b06a:	1851      	adds	r1, r2, r1
 800b06c:	6039      	str	r1, [r7, #0]
 800b06e:	4649      	mov	r1, r9
 800b070:	414b      	adcs	r3, r1
 800b072:	607b      	str	r3, [r7, #4]
 800b074:	f04f 0200 	mov.w	r2, #0
 800b078:	f04f 0300 	mov.w	r3, #0
 800b07c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b080:	4659      	mov	r1, fp
 800b082:	00cb      	lsls	r3, r1, #3
 800b084:	4651      	mov	r1, sl
 800b086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b08a:	4651      	mov	r1, sl
 800b08c:	00ca      	lsls	r2, r1, #3
 800b08e:	4610      	mov	r0, r2
 800b090:	4619      	mov	r1, r3
 800b092:	4603      	mov	r3, r0
 800b094:	4642      	mov	r2, r8
 800b096:	189b      	adds	r3, r3, r2
 800b098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b09a:	464b      	mov	r3, r9
 800b09c:	460a      	mov	r2, r1
 800b09e:	eb42 0303 	adc.w	r3, r2, r3
 800b0a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ae:	667a      	str	r2, [r7, #100]	@ 0x64
 800b0b0:	f04f 0200 	mov.w	r2, #0
 800b0b4:	f04f 0300 	mov.w	r3, #0
 800b0b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b0bc:	4649      	mov	r1, r9
 800b0be:	008b      	lsls	r3, r1, #2
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	008a      	lsls	r2, r1, #2
 800b0ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b0ce:	f7f5 fe1b 	bl	8000d08 <__aeabi_uldivmod>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b10c <UART_SetConfig+0x4e4>)
 800b0d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0dc:	095b      	lsrs	r3, r3, #5
 800b0de:	2164      	movs	r1, #100	@ 0x64
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	011b      	lsls	r3, r3, #4
 800b0e8:	3332      	adds	r3, #50	@ 0x32
 800b0ea:	4a08      	ldr	r2, [pc, #32]	@ (800b10c <UART_SetConfig+0x4e4>)
 800b0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f0:	095b      	lsrs	r3, r3, #5
 800b0f2:	f003 020f 	and.w	r2, r3, #15
 800b0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4422      	add	r2, r4
 800b0fe:	609a      	str	r2, [r3, #8]
}
 800b100:	bf00      	nop
 800b102:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b106:	46bd      	mov	sp, r7
 800b108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b10c:	51eb851f 	.word	0x51eb851f

0800b110 <__NVIC_SetPriority>:
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	6039      	str	r1, [r7, #0]
 800b11a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b11c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b120:	2b00      	cmp	r3, #0
 800b122:	db0a      	blt.n	800b13a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	b2da      	uxtb	r2, r3
 800b128:	490c      	ldr	r1, [pc, #48]	@ (800b15c <__NVIC_SetPriority+0x4c>)
 800b12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b12e:	0112      	lsls	r2, r2, #4
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	440b      	add	r3, r1
 800b134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b138:	e00a      	b.n	800b150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	4908      	ldr	r1, [pc, #32]	@ (800b160 <__NVIC_SetPriority+0x50>)
 800b140:	79fb      	ldrb	r3, [r7, #7]
 800b142:	f003 030f 	and.w	r3, r3, #15
 800b146:	3b04      	subs	r3, #4
 800b148:	0112      	lsls	r2, r2, #4
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	440b      	add	r3, r1
 800b14e:	761a      	strb	r2, [r3, #24]
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	e000e100 	.word	0xe000e100
 800b160:	e000ed00 	.word	0xe000ed00

0800b164 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b168:	4b05      	ldr	r3, [pc, #20]	@ (800b180 <SysTick_Handler+0x1c>)
 800b16a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b16c:	f001 fdb4 	bl	800ccd8 <xTaskGetSchedulerState>
 800b170:	4603      	mov	r3, r0
 800b172:	2b01      	cmp	r3, #1
 800b174:	d001      	beq.n	800b17a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b176:	f002 fbaf 	bl	800d8d8 <xPortSysTickHandler>
  }
}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	e000e010 	.word	0xe000e010

0800b184 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b188:	2100      	movs	r1, #0
 800b18a:	f06f 0004 	mvn.w	r0, #4
 800b18e:	f7ff ffbf 	bl	800b110 <__NVIC_SetPriority>
#endif
}
 800b192:	bf00      	nop
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b19e:	f3ef 8305 	mrs	r3, IPSR
 800b1a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b1a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b1aa:	f06f 0305 	mvn.w	r3, #5
 800b1ae:	607b      	str	r3, [r7, #4]
 800b1b0:	e00c      	b.n	800b1cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b1dc <osKernelInitialize+0x44>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b1ba:	4b08      	ldr	r3, [pc, #32]	@ (800b1dc <osKernelInitialize+0x44>)
 800b1bc:	2201      	movs	r2, #1
 800b1be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	607b      	str	r3, [r7, #4]
 800b1c4:	e002      	b.n	800b1cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1cc:	687b      	ldr	r3, [r7, #4]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	2000db0c 	.word	0x2000db0c

0800b1e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1e6:	f3ef 8305 	mrs	r3, IPSR
 800b1ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b1ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b1f2:	f06f 0305 	mvn.w	r3, #5
 800b1f6:	607b      	str	r3, [r7, #4]
 800b1f8:	e010      	b.n	800b21c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b228 <osKernelStart+0x48>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d109      	bne.n	800b216 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b202:	f7ff ffbf 	bl	800b184 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b206:	4b08      	ldr	r3, [pc, #32]	@ (800b228 <osKernelStart+0x48>)
 800b208:	2202      	movs	r2, #2
 800b20a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b20c:	f001 f8ee 	bl	800c3ec <vTaskStartScheduler>
      stat = osOK;
 800b210:	2300      	movs	r3, #0
 800b212:	607b      	str	r3, [r7, #4]
 800b214:	e002      	b.n	800b21c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b216:	f04f 33ff 	mov.w	r3, #4294967295
 800b21a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b21c:	687b      	ldr	r3, [r7, #4]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	2000db0c 	.word	0x2000db0c

0800b22c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08e      	sub	sp, #56	@ 0x38
 800b230:	af04      	add	r7, sp, #16
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b238:	2300      	movs	r3, #0
 800b23a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b23c:	f3ef 8305 	mrs	r3, IPSR
 800b240:	617b      	str	r3, [r7, #20]
  return(result);
 800b242:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b244:	2b00      	cmp	r3, #0
 800b246:	d17e      	bne.n	800b346 <osThreadNew+0x11a>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d07b      	beq.n	800b346 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b24e:	2380      	movs	r3, #128	@ 0x80
 800b250:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b252:	2318      	movs	r3, #24
 800b254:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b25a:	f04f 33ff 	mov.w	r3, #4294967295
 800b25e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d045      	beq.n	800b2f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <osThreadNew+0x48>
        name = attr->name;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <osThreadNew+0x6e>
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2b38      	cmp	r3, #56	@ 0x38
 800b28c:	d805      	bhi.n	800b29a <osThreadNew+0x6e>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <osThreadNew+0x72>
        return (NULL);
 800b29a:	2300      	movs	r3, #0
 800b29c:	e054      	b.n	800b348 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	089b      	lsrs	r3, r3, #2
 800b2ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <osThreadNew+0xa8>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	2b5b      	cmp	r3, #91	@ 0x5b
 800b2bc:	d90a      	bls.n	800b2d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d006      	beq.n	800b2d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d002      	beq.n	800b2d4 <osThreadNew+0xa8>
        mem = 1;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	e010      	b.n	800b2f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10c      	bne.n	800b2f6 <osThreadNew+0xca>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d108      	bne.n	800b2f6 <osThreadNew+0xca>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d104      	bne.n	800b2f6 <osThreadNew+0xca>
          mem = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61bb      	str	r3, [r7, #24]
 800b2f0:	e001      	b.n	800b2f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d110      	bne.n	800b31e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b304:	9202      	str	r2, [sp, #8]
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	6a3a      	ldr	r2, [r7, #32]
 800b310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 fe1a 	bl	800bf4c <xTaskCreateStatic>
 800b318:	4603      	mov	r3, r0
 800b31a:	613b      	str	r3, [r7, #16]
 800b31c:	e013      	b.n	800b346 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d110      	bne.n	800b346 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	b29a      	uxth	r2, r3
 800b328:	f107 0310 	add.w	r3, r7, #16
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 fe68 	bl	800c00c <xTaskCreate>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d001      	beq.n	800b346 <osThreadNew+0x11a>
            hTask = NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b346:	693b      	ldr	r3, [r7, #16]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3728      	adds	r7, #40	@ 0x28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b358:	f3ef 8305 	mrs	r3, IPSR
 800b35c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b35e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <osDelay+0x1c>
    stat = osErrorISR;
 800b364:	f06f 0305 	mvn.w	r3, #5
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	e007      	b.n	800b37c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 f802 	bl	800c380 <vTaskDelay>
    }
  }

  return (stat);
 800b37c:	68fb      	ldr	r3, [r7, #12]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4a07      	ldr	r2, [pc, #28]	@ (800b3b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	4a06      	ldr	r2, [pc, #24]	@ (800b3b8 <vApplicationGetIdleTaskMemory+0x30>)
 800b39e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2280      	movs	r2, #128	@ 0x80
 800b3a4:	601a      	str	r2, [r3, #0]
}
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	2000db10 	.word	0x2000db10
 800b3b8:	2000db6c 	.word	0x2000db6c

0800b3bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4a07      	ldr	r2, [pc, #28]	@ (800b3e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b3cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4a06      	ldr	r2, [pc, #24]	@ (800b3ec <vApplicationGetTimerTaskMemory+0x30>)
 800b3d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b3da:	601a      	str	r2, [r3, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	2000dd6c 	.word	0x2000dd6c
 800b3ec:	2000ddc8 	.word	0x2000ddc8

0800b3f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f103 0208 	add.w	r2, r3, #8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f04f 32ff 	mov.w	r2, #4294967295
 800b408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f103 0208 	add.w	r2, r3, #8
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f103 0208 	add.w	r2, r3, #8
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	689a      	ldr	r2, [r3, #8]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	601a      	str	r2, [r3, #0]
}
 800b486:	bf00      	nop
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b492:	b480      	push	{r7}
 800b494:	b085      	sub	sp, #20
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a8:	d103      	bne.n	800b4b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e00c      	b.n	800b4cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	e002      	b.n	800b4c0 <vListInsert+0x2e>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d2f6      	bcs.n	800b4ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	601a      	str	r2, [r3, #0]
}
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	6892      	ldr	r2, [r2, #8]
 800b51a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	6852      	ldr	r2, [r2, #4]
 800b524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d103      	bne.n	800b538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689a      	ldr	r2, [r3, #8]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	1e5a      	subs	r2, r3, #1
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10b      	bne.n	800b584 <xQueueGenericReset+0x2c>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	60bb      	str	r3, [r7, #8]
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	e7fd      	b.n	800b580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b584:	f002 f918 	bl	800d7b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b590:	68f9      	ldr	r1, [r7, #12]
 800b592:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	441a      	add	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	68f9      	ldr	r1, [r7, #12]
 800b5b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b5ba:	fb01 f303 	mul.w	r3, r1, r3
 800b5be:	441a      	add	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	22ff      	movs	r2, #255	@ 0xff
 800b5c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	22ff      	movs	r2, #255	@ 0xff
 800b5d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d114      	bne.n	800b604 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01a      	beq.n	800b618 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3310      	adds	r3, #16
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f001 f98e 	bl	800c908 <xTaskRemoveFromEventList>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d012      	beq.n	800b618 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b628 <xQueueGenericReset+0xd0>)
 800b5f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	e009      	b.n	800b618 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	3310      	adds	r3, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fef1 	bl	800b3f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3324      	adds	r3, #36	@ 0x24
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff feec 	bl	800b3f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b618:	f002 f900 	bl	800d81c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b61c:	2301      	movs	r3, #1
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08e      	sub	sp, #56	@ 0x38
 800b630:	af02      	add	r7, sp, #8
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10b      	bne.n	800b658 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b652:	bf00      	nop
 800b654:	bf00      	nop
 800b656:	e7fd      	b.n	800b654 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	e7fd      	b.n	800b672 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <xQueueGenericCreateStatic+0x56>
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <xQueueGenericCreateStatic+0x5a>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <xQueueGenericCreateStatic+0x5c>
 800b686:	2300      	movs	r3, #0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10b      	bne.n	800b6a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	623b      	str	r3, [r7, #32]
}
 800b69e:	bf00      	nop
 800b6a0:	bf00      	nop
 800b6a2:	e7fd      	b.n	800b6a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d102      	bne.n	800b6b0 <xQueueGenericCreateStatic+0x84>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <xQueueGenericCreateStatic+0x88>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e000      	b.n	800b6b6 <xQueueGenericCreateStatic+0x8a>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10b      	bne.n	800b6d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	61fb      	str	r3, [r7, #28]
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	e7fd      	b.n	800b6ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6d2:	2350      	movs	r3, #80	@ 0x50
 800b6d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b50      	cmp	r3, #80	@ 0x50
 800b6da:	d00b      	beq.n	800b6f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	61bb      	str	r3, [r7, #24]
}
 800b6ee:	bf00      	nop
 800b6f0:	bf00      	nop
 800b6f2:	e7fd      	b.n	800b6f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b6f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00d      	beq.n	800b71c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b702:	2201      	movs	r2, #1
 800b704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b708:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	4613      	mov	r3, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	68b9      	ldr	r1, [r7, #8]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 f805 	bl	800b726 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	3730      	adds	r7, #48	@ 0x30
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
 800b732:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d103      	bne.n	800b742 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e002      	b.n	800b748 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b754:	2101      	movs	r1, #1
 800b756:	69b8      	ldr	r0, [r7, #24]
 800b758:	f7ff fefe 	bl	800b558 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	78fa      	ldrb	r2, [r7, #3]
 800b760:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08e      	sub	sp, #56	@ 0x38
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b77a:	2300      	movs	r3, #0
 800b77c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10b      	bne.n	800b7a0 <xQueueGenericSend+0x34>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	e7fd      	b.n	800b79c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d103      	bne.n	800b7ae <xQueueGenericSend+0x42>
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <xQueueGenericSend+0x46>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <xQueueGenericSend+0x48>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10b      	bne.n	800b7d0 <xQueueGenericSend+0x64>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	e7fd      	b.n	800b7cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d103      	bne.n	800b7de <xQueueGenericSend+0x72>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d101      	bne.n	800b7e2 <xQueueGenericSend+0x76>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e000      	b.n	800b7e4 <xQueueGenericSend+0x78>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10b      	bne.n	800b800 <xQueueGenericSend+0x94>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	623b      	str	r3, [r7, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	e7fd      	b.n	800b7fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b800:	f001 fa6a 	bl	800ccd8 <xTaskGetSchedulerState>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <xQueueGenericSend+0xa4>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <xQueueGenericSend+0xa8>
 800b810:	2301      	movs	r3, #1
 800b812:	e000      	b.n	800b816 <xQueueGenericSend+0xaa>
 800b814:	2300      	movs	r3, #0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10b      	bne.n	800b832 <xQueueGenericSend+0xc6>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	61fb      	str	r3, [r7, #28]
}
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b832:	f001 ffc1 	bl	800d7b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b83e:	429a      	cmp	r2, r3
 800b840:	d302      	bcc.n	800b848 <xQueueGenericSend+0xdc>
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b02      	cmp	r3, #2
 800b846:	d129      	bne.n	800b89c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b84e:	f000 fa0f 	bl	800bc70 <prvCopyDataToQueue>
 800b852:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d010      	beq.n	800b87e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85e:	3324      	adds	r3, #36	@ 0x24
 800b860:	4618      	mov	r0, r3
 800b862:	f001 f851 	bl	800c908 <xTaskRemoveFromEventList>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d013      	beq.n	800b894 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b86c:	4b3f      	ldr	r3, [pc, #252]	@ (800b96c <xQueueGenericSend+0x200>)
 800b86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	e00a      	b.n	800b894 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d007      	beq.n	800b894 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b884:	4b39      	ldr	r3, [pc, #228]	@ (800b96c <xQueueGenericSend+0x200>)
 800b886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b894:	f001 ffc2 	bl	800d81c <vPortExitCritical>
				return pdPASS;
 800b898:	2301      	movs	r3, #1
 800b89a:	e063      	b.n	800b964 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d103      	bne.n	800b8aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8a2:	f001 ffbb 	bl	800d81c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	e05c      	b.n	800b964 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d106      	bne.n	800b8be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8b0:	f107 0314 	add.w	r3, r7, #20
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f001 f8b3 	bl	800ca20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8be:	f001 ffad 	bl	800d81c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8c2:	f000 fdfb 	bl	800c4bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8c6:	f001 ff77 	bl	800d7b8 <vPortEnterCritical>
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8d0:	b25b      	sxtb	r3, r3
 800b8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d6:	d103      	bne.n	800b8e0 <xQueueGenericSend+0x174>
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8e6:	b25b      	sxtb	r3, r3
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d103      	bne.n	800b8f6 <xQueueGenericSend+0x18a>
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8f6:	f001 ff91 	bl	800d81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8fa:	1d3a      	adds	r2, r7, #4
 800b8fc:	f107 0314 	add.w	r3, r7, #20
 800b900:	4611      	mov	r1, r2
 800b902:	4618      	mov	r0, r3
 800b904:	f001 f8a2 	bl	800ca4c <xTaskCheckForTimeOut>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d124      	bne.n	800b958 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b90e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b910:	f000 faa6 	bl	800be60 <prvIsQueueFull>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d018      	beq.n	800b94c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	3310      	adds	r3, #16
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f000 ff9e 	bl	800c864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b92a:	f000 fa31 	bl	800bd90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b92e:	f000 fdd3 	bl	800c4d8 <xTaskResumeAll>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	f47f af7c 	bne.w	800b832 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b93a:	4b0c      	ldr	r3, [pc, #48]	@ (800b96c <xQueueGenericSend+0x200>)
 800b93c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	e772      	b.n	800b832 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b94c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b94e:	f000 fa1f 	bl	800bd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b952:	f000 fdc1 	bl	800c4d8 <xTaskResumeAll>
 800b956:	e76c      	b.n	800b832 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b95a:	f000 fa19 	bl	800bd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b95e:	f000 fdbb 	bl	800c4d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b964:	4618      	mov	r0, r3
 800b966:	3738      	adds	r7, #56	@ 0x38
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	e000ed04 	.word	0xe000ed04

0800b970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b090      	sub	sp, #64	@ 0x40
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d103      	bne.n	800b9ae <xQueueGenericSendFromISR+0x3e>
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <xQueueGenericSendFromISR+0x42>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueGenericSendFromISR+0x44>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10b      	bne.n	800b9d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b9ca:	bf00      	nop
 800b9cc:	bf00      	nop
 800b9ce:	e7fd      	b.n	800b9cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d103      	bne.n	800b9de <xQueueGenericSendFromISR+0x6e>
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d101      	bne.n	800b9e2 <xQueueGenericSendFromISR+0x72>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e000      	b.n	800b9e4 <xQueueGenericSendFromISR+0x74>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10b      	bne.n	800ba00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	623b      	str	r3, [r7, #32]
}
 800b9fa:	bf00      	nop
 800b9fc:	bf00      	nop
 800b9fe:	e7fd      	b.n	800b9fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba00:	f001 ffba 	bl	800d978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba04:	f3ef 8211 	mrs	r2, BASEPRI
 800ba08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	61fa      	str	r2, [r7, #28]
 800ba1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d302      	bcc.n	800ba32 <xQueueGenericSendFromISR+0xc2>
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d12f      	bne.n	800ba92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	68b9      	ldr	r1, [r7, #8]
 800ba46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba48:	f000 f912 	bl	800bc70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d112      	bne.n	800ba7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d016      	beq.n	800ba8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba60:	3324      	adds	r3, #36	@ 0x24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 ff50 	bl	800c908 <xTaskRemoveFromEventList>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00e      	beq.n	800ba8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	e007      	b.n	800ba8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ba80:	3301      	adds	r3, #1
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	b25a      	sxtb	r2, r3
 800ba86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ba90:	e001      	b.n	800ba96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800baa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3740      	adds	r7, #64	@ 0x40
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08c      	sub	sp, #48	@ 0x30
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10b      	bne.n	800bade <xQueueReceive+0x32>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	623b      	str	r3, [r7, #32]
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	e7fd      	b.n	800bada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d103      	bne.n	800baec <xQueueReceive+0x40>
 800bae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <xQueueReceive+0x44>
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <xQueueReceive+0x46>
 800baf0:	2300      	movs	r3, #0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10b      	bne.n	800bb0e <xQueueReceive+0x62>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	61fb      	str	r3, [r7, #28]
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	e7fd      	b.n	800bb0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb0e:	f001 f8e3 	bl	800ccd8 <xTaskGetSchedulerState>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d102      	bne.n	800bb1e <xQueueReceive+0x72>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <xQueueReceive+0x76>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <xQueueReceive+0x78>
 800bb22:	2300      	movs	r3, #0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <xQueueReceive+0x94>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	61bb      	str	r3, [r7, #24]
}
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	e7fd      	b.n	800bb3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb40:	f001 fe3a 	bl	800d7b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01f      	beq.n	800bb90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb54:	f000 f8f6 	bl	800bd44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5a:	1e5a      	subs	r2, r3, #1
 800bb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00f      	beq.n	800bb88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6a:	3310      	adds	r3, #16
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 fecb 	bl	800c908 <xTaskRemoveFromEventList>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d007      	beq.n	800bb88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb78:	4b3c      	ldr	r3, [pc, #240]	@ (800bc6c <xQueueReceive+0x1c0>)
 800bb7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb88:	f001 fe48 	bl	800d81c <vPortExitCritical>
				return pdPASS;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e069      	b.n	800bc64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d103      	bne.n	800bb9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb96:	f001 fe41 	bl	800d81c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e062      	b.n	800bc64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d106      	bne.n	800bbb2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bba4:	f107 0310 	add.w	r3, r7, #16
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 ff39 	bl	800ca20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbb2:	f001 fe33 	bl	800d81c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbb6:	f000 fc81 	bl	800c4bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbba:	f001 fdfd 	bl	800d7b8 <vPortEnterCritical>
 800bbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbc4:	b25b      	sxtb	r3, r3
 800bbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbca:	d103      	bne.n	800bbd4 <xQueueReceive+0x128>
 800bbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbda:	b25b      	sxtb	r3, r3
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe0:	d103      	bne.n	800bbea <xQueueReceive+0x13e>
 800bbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbea:	f001 fe17 	bl	800d81c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbee:	1d3a      	adds	r2, r7, #4
 800bbf0:	f107 0310 	add.w	r3, r7, #16
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 ff28 	bl	800ca4c <xTaskCheckForTimeOut>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d123      	bne.n	800bc4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc04:	f000 f916 	bl	800be34 <prvIsQueueEmpty>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d017      	beq.n	800bc3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc10:	3324      	adds	r3, #36	@ 0x24
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fe24 	bl	800c864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc1e:	f000 f8b7 	bl	800bd90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc22:	f000 fc59 	bl	800c4d8 <xTaskResumeAll>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d189      	bne.n	800bb40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bc6c <xQueueReceive+0x1c0>)
 800bc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	e780      	b.n	800bb40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc40:	f000 f8a6 	bl	800bd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc44:	f000 fc48 	bl	800c4d8 <xTaskResumeAll>
 800bc48:	e77a      	b.n	800bb40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc4c:	f000 f8a0 	bl	800bd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc50:	f000 fc42 	bl	800c4d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc56:	f000 f8ed 	bl	800be34 <prvIsQueueEmpty>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f43f af6f 	beq.w	800bb40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3730      	adds	r7, #48	@ 0x30
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	e000ed04 	.word	0xe000ed04

0800bc70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10d      	bne.n	800bcaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d14d      	bne.n	800bd32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 f83a 	bl	800cd14 <xTaskPriorityDisinherit>
 800bca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	609a      	str	r2, [r3, #8]
 800bca8:	e043      	b.n	800bd32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d119      	bne.n	800bce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6858      	ldr	r0, [r3, #4]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcb8:	461a      	mov	r2, r3
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	f011 fcd5 	bl	801d66a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcc8:	441a      	add	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d32b      	bcc.n	800bd32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	605a      	str	r2, [r3, #4]
 800bce2:	e026      	b.n	800bd32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68d8      	ldr	r0, [r3, #12]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcec:	461a      	mov	r2, r3
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	f011 fcbb 	bl	801d66a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	68da      	ldr	r2, [r3, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcfc:	425b      	negs	r3, r3
 800bcfe:	441a      	add	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68da      	ldr	r2, [r3, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d207      	bcs.n	800bd20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd18:	425b      	negs	r3, r3
 800bd1a:	441a      	add	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d105      	bne.n	800bd32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bd3a:	697b      	ldr	r3, [r7, #20]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d018      	beq.n	800bd88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68da      	ldr	r2, [r3, #12]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd5e:	441a      	add	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68da      	ldr	r2, [r3, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d303      	bcc.n	800bd78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68d9      	ldr	r1, [r3, #12]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd80:	461a      	mov	r2, r3
 800bd82:	6838      	ldr	r0, [r7, #0]
 800bd84:	f011 fc71 	bl	801d66a <memcpy>
	}
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd98:	f001 fd0e 	bl	800d7b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bda2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bda4:	e011      	b.n	800bdca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d012      	beq.n	800bdd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3324      	adds	r3, #36	@ 0x24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 fda8 	bl	800c908 <xTaskRemoveFromEventList>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdbe:	f000 fea9 	bl	800cb14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	dce9      	bgt.n	800bda6 <prvUnlockQueue+0x16>
 800bdd2:	e000      	b.n	800bdd6 <prvUnlockQueue+0x46>
					break;
 800bdd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	22ff      	movs	r2, #255	@ 0xff
 800bdda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bdde:	f001 fd1d 	bl	800d81c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bde2:	f001 fce9 	bl	800d7b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bdec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdee:	e011      	b.n	800be14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d012      	beq.n	800be1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fd83 	bl	800c908 <xTaskRemoveFromEventList>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be08:	f000 fe84 	bl	800cb14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	3b01      	subs	r3, #1
 800be10:	b2db      	uxtb	r3, r3
 800be12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dce9      	bgt.n	800bdf0 <prvUnlockQueue+0x60>
 800be1c:	e000      	b.n	800be20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	22ff      	movs	r2, #255	@ 0xff
 800be24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800be28:	f001 fcf8 	bl	800d81c <vPortExitCritical>
}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be3c:	f001 fcbc 	bl	800d7b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be44:	2b00      	cmp	r3, #0
 800be46:	d102      	bne.n	800be4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	e001      	b.n	800be52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be52:	f001 fce3 	bl	800d81c <vPortExitCritical>

	return xReturn;
 800be56:	68fb      	ldr	r3, [r7, #12]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be68:	f001 fca6 	bl	800d7b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be74:	429a      	cmp	r2, r3
 800be76:	d102      	bne.n	800be7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be78:	2301      	movs	r3, #1
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	e001      	b.n	800be82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be82:	f001 fccb 	bl	800d81c <vPortExitCritical>

	return xReturn;
 800be86:	68fb      	ldr	r3, [r7, #12]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be9a:	2300      	movs	r3, #0
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	e014      	b.n	800beca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bea0:	4a0f      	ldr	r2, [pc, #60]	@ (800bee0 <vQueueAddToRegistry+0x50>)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10b      	bne.n	800bec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800beac:	490c      	ldr	r1, [pc, #48]	@ (800bee0 <vQueueAddToRegistry+0x50>)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800beb6:	4a0a      	ldr	r2, [pc, #40]	@ (800bee0 <vQueueAddToRegistry+0x50>)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	00db      	lsls	r3, r3, #3
 800bebc:	4413      	add	r3, r2
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bec2:	e006      	b.n	800bed2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3301      	adds	r3, #1
 800bec8:	60fb      	str	r3, [r7, #12]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b07      	cmp	r3, #7
 800bece:	d9e7      	bls.n	800bea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bed0:	bf00      	nop
 800bed2:	bf00      	nop
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	2000e1c8 	.word	0x2000e1c8

0800bee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bef4:	f001 fc60 	bl	800d7b8 <vPortEnterCritical>
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800befe:	b25b      	sxtb	r3, r3
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf04:	d103      	bne.n	800bf0e <vQueueWaitForMessageRestricted+0x2a>
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1a:	d103      	bne.n	800bf24 <vQueueWaitForMessageRestricted+0x40>
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf24:	f001 fc7a 	bl	800d81c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d106      	bne.n	800bf3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	3324      	adds	r3, #36	@ 0x24
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fcb9 	bl	800c8b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf3e:	6978      	ldr	r0, [r7, #20]
 800bf40:	f7ff ff26 	bl	800bd90 <prvUnlockQueue>
	}
 800bf44:	bf00      	nop
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	@ 0x38
 800bf50:	af04      	add	r7, sp, #16
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10b      	bne.n	800bf78 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	623b      	str	r3, [r7, #32]
}
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
 800bf76:	e7fd      	b.n	800bf74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10b      	bne.n	800bf96 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	61fb      	str	r3, [r7, #28]
}
 800bf90:	bf00      	nop
 800bf92:	bf00      	nop
 800bf94:	e7fd      	b.n	800bf92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf96:	235c      	movs	r3, #92	@ 0x5c
 800bf98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bf9e:	d00b      	beq.n	800bfb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	61bb      	str	r3, [r7, #24]
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	e7fd      	b.n	800bfb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d01e      	beq.n	800bffe <xTaskCreateStatic+0xb2>
 800bfc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d01b      	beq.n	800bffe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfd8:	2300      	movs	r3, #0
 800bfda:	9303      	str	r3, [sp, #12]
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfde:	9302      	str	r3, [sp, #8]
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 f850 	bl	800c096 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bff8:	f000 f8de 	bl	800c1b8 <prvAddNewTaskToReadyList>
 800bffc:	e001      	b.n	800c002 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c002:	697b      	ldr	r3, [r7, #20]
	}
 800c004:	4618      	mov	r0, r3
 800c006:	3728      	adds	r7, #40	@ 0x28
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08c      	sub	sp, #48	@ 0x30
 800c010:	af04      	add	r7, sp, #16
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	603b      	str	r3, [r7, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c01c:	88fb      	ldrh	r3, [r7, #6]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fceb 	bl	800d9fc <pvPortMalloc>
 800c026:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00e      	beq.n	800c04c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c02e:	205c      	movs	r0, #92	@ 0x5c
 800c030:	f001 fce4 	bl	800d9fc <pvPortMalloc>
 800c034:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	631a      	str	r2, [r3, #48]	@ 0x30
 800c042:	e005      	b.n	800c050 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c044:	6978      	ldr	r0, [r7, #20]
 800c046:	f001 fda7 	bl	800db98 <vPortFree>
 800c04a:	e001      	b.n	800c050 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c04c:	2300      	movs	r3, #0
 800c04e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d017      	beq.n	800c086 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c05e:	88fa      	ldrh	r2, [r7, #6]
 800c060:	2300      	movs	r3, #0
 800c062:	9303      	str	r3, [sp, #12]
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	9302      	str	r3, [sp, #8]
 800c068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f80e 	bl	800c096 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c07a:	69f8      	ldr	r0, [r7, #28]
 800c07c:	f000 f89c 	bl	800c1b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c080:	2301      	movs	r3, #1
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	e002      	b.n	800c08c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c086:	f04f 33ff 	mov.w	r3, #4294967295
 800c08a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c08c:	69bb      	ldr	r3, [r7, #24]
	}
 800c08e:	4618      	mov	r0, r3
 800c090:	3720      	adds	r7, #32
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b088      	sub	sp, #32
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
 800c0a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	21a5      	movs	r1, #165	@ 0xa5
 800c0b0:	f011 f9fc 	bl	801d4ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	f023 0307 	bic.w	r3, r3, #7
 800c0cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	617b      	str	r3, [r7, #20]
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	e7fd      	b.n	800c0ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d01f      	beq.n	800c136 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	61fb      	str	r3, [r7, #28]
 800c0fa:	e012      	b.n	800c122 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	7819      	ldrb	r1, [r3, #0]
 800c104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	4413      	add	r3, r2
 800c10a:	3334      	adds	r3, #52	@ 0x34
 800c10c:	460a      	mov	r2, r1
 800c10e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	4413      	add	r3, r2
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d006      	beq.n	800c12a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	3301      	adds	r3, #1
 800c120:	61fb      	str	r3, [r7, #28]
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	2b0f      	cmp	r3, #15
 800c126:	d9e9      	bls.n	800c0fc <prvInitialiseNewTask+0x66>
 800c128:	e000      	b.n	800c12c <prvInitialiseNewTask+0x96>
			{
				break;
 800c12a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c134:	e003      	b.n	800c13e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c140:	2b37      	cmp	r3, #55	@ 0x37
 800c142:	d901      	bls.n	800c148 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c144:	2337      	movs	r3, #55	@ 0x37
 800c146:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c14c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c152:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c156:	2200      	movs	r2, #0
 800c158:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15c:	3304      	adds	r3, #4
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff f966 	bl	800b430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c166:	3318      	adds	r3, #24
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff f961 	bl	800b430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c176:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c182:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	2200      	movs	r2, #0
 800c188:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	68f9      	ldr	r1, [r7, #12]
 800c196:	69b8      	ldr	r0, [r7, #24]
 800c198:	f001 f9da 	bl	800d550 <pxPortInitialiseStack>
 800c19c:	4602      	mov	r2, r0
 800c19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1ae:	bf00      	nop
 800c1b0:	3720      	adds	r7, #32
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1c0:	f001 fafa 	bl	800d7b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c1c4:	4b2d      	ldr	r3, [pc, #180]	@ (800c27c <prvAddNewTaskToReadyList+0xc4>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	4a2c      	ldr	r2, [pc, #176]	@ (800c27c <prvAddNewTaskToReadyList+0xc4>)
 800c1cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c1ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c280 <prvAddNewTaskToReadyList+0xc8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d109      	bne.n	800c1ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1d6:	4a2a      	ldr	r2, [pc, #168]	@ (800c280 <prvAddNewTaskToReadyList+0xc8>)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1dc:	4b27      	ldr	r3, [pc, #156]	@ (800c27c <prvAddNewTaskToReadyList+0xc4>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d110      	bne.n	800c206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1e4:	f000 fcba 	bl	800cb5c <prvInitialiseTaskLists>
 800c1e8:	e00d      	b.n	800c206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1ea:	4b26      	ldr	r3, [pc, #152]	@ (800c284 <prvAddNewTaskToReadyList+0xcc>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1f2:	4b23      	ldr	r3, [pc, #140]	@ (800c280 <prvAddNewTaskToReadyList+0xc8>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d802      	bhi.n	800c206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c200:	4a1f      	ldr	r2, [pc, #124]	@ (800c280 <prvAddNewTaskToReadyList+0xc8>)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c206:	4b20      	ldr	r3, [pc, #128]	@ (800c288 <prvAddNewTaskToReadyList+0xd0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	4a1e      	ldr	r2, [pc, #120]	@ (800c288 <prvAddNewTaskToReadyList+0xd0>)
 800c20e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c210:	4b1d      	ldr	r3, [pc, #116]	@ (800c288 <prvAddNewTaskToReadyList+0xd0>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c21c:	4b1b      	ldr	r3, [pc, #108]	@ (800c28c <prvAddNewTaskToReadyList+0xd4>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	429a      	cmp	r2, r3
 800c222:	d903      	bls.n	800c22c <prvAddNewTaskToReadyList+0x74>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c228:	4a18      	ldr	r2, [pc, #96]	@ (800c28c <prvAddNewTaskToReadyList+0xd4>)
 800c22a:	6013      	str	r3, [r2, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c230:	4613      	mov	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	4a15      	ldr	r2, [pc, #84]	@ (800c290 <prvAddNewTaskToReadyList+0xd8>)
 800c23a:	441a      	add	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	3304      	adds	r3, #4
 800c240:	4619      	mov	r1, r3
 800c242:	4610      	mov	r0, r2
 800c244:	f7ff f901 	bl	800b44a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c248:	f001 fae8 	bl	800d81c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c24c:	4b0d      	ldr	r3, [pc, #52]	@ (800c284 <prvAddNewTaskToReadyList+0xcc>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00e      	beq.n	800c272 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c254:	4b0a      	ldr	r3, [pc, #40]	@ (800c280 <prvAddNewTaskToReadyList+0xc8>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25e:	429a      	cmp	r2, r3
 800c260:	d207      	bcs.n	800c272 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c262:	4b0c      	ldr	r3, [pc, #48]	@ (800c294 <prvAddNewTaskToReadyList+0xdc>)
 800c264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c272:	bf00      	nop
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	2000e6dc 	.word	0x2000e6dc
 800c280:	2000e208 	.word	0x2000e208
 800c284:	2000e6e8 	.word	0x2000e6e8
 800c288:	2000e6f8 	.word	0x2000e6f8
 800c28c:	2000e6e4 	.word	0x2000e6e4
 800c290:	2000e20c 	.word	0x2000e20c
 800c294:	e000ed04 	.word	0xe000ed04

0800c298 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c2a0:	f001 fa8a 	bl	800d7b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d102      	bne.n	800c2b0 <vTaskDelete+0x18>
 800c2aa:	4b2d      	ldr	r3, [pc, #180]	@ (800c360 <vTaskDelete+0xc8>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	e000      	b.n	800c2b2 <vTaskDelete+0x1a>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3304      	adds	r3, #4
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff f923 	bl	800b504 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d004      	beq.n	800c2d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3318      	adds	r3, #24
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff f91a 	bl	800b504 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c2d0:	4b24      	ldr	r3, [pc, #144]	@ (800c364 <vTaskDelete+0xcc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	4a23      	ldr	r2, [pc, #140]	@ (800c364 <vTaskDelete+0xcc>)
 800c2d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c2da:	4b21      	ldr	r3, [pc, #132]	@ (800c360 <vTaskDelete+0xc8>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d10b      	bne.n	800c2fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	481f      	ldr	r0, [pc, #124]	@ (800c368 <vTaskDelete+0xd0>)
 800c2ec:	f7ff f8ad 	bl	800b44a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800c36c <vTaskDelete+0xd4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	4a1d      	ldr	r2, [pc, #116]	@ (800c36c <vTaskDelete+0xd4>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	e009      	b.n	800c310 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c2fc:	4b1c      	ldr	r3, [pc, #112]	@ (800c370 <vTaskDelete+0xd8>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3b01      	subs	r3, #1
 800c302:	4a1b      	ldr	r2, [pc, #108]	@ (800c370 <vTaskDelete+0xd8>)
 800c304:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 fc96 	bl	800cc38 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c30c:	f000 fcc4 	bl	800cc98 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c310:	f001 fa84 	bl	800d81c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c314:	4b17      	ldr	r3, [pc, #92]	@ (800c374 <vTaskDelete+0xdc>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d01c      	beq.n	800c356 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800c31c:	4b10      	ldr	r3, [pc, #64]	@ (800c360 <vTaskDelete+0xc8>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	429a      	cmp	r2, r3
 800c324:	d117      	bne.n	800c356 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c326:	4b14      	ldr	r3, [pc, #80]	@ (800c378 <vTaskDelete+0xe0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00b      	beq.n	800c346 <vTaskDelete+0xae>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	60bb      	str	r3, [r7, #8]
}
 800c340:	bf00      	nop
 800c342:	bf00      	nop
 800c344:	e7fd      	b.n	800c342 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800c346:	4b0d      	ldr	r3, [pc, #52]	@ (800c37c <vTaskDelete+0xe4>)
 800c348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c356:	bf00      	nop
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	2000e208 	.word	0x2000e208
 800c364:	2000e6f8 	.word	0x2000e6f8
 800c368:	2000e6b0 	.word	0x2000e6b0
 800c36c:	2000e6c4 	.word	0x2000e6c4
 800c370:	2000e6dc 	.word	0x2000e6dc
 800c374:	2000e6e8 	.word	0x2000e6e8
 800c378:	2000e704 	.word	0x2000e704
 800c37c:	e000ed04 	.word	0xe000ed04

0800c380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c388:	2300      	movs	r3, #0
 800c38a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d018      	beq.n	800c3c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c392:	4b14      	ldr	r3, [pc, #80]	@ (800c3e4 <vTaskDelay+0x64>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00b      	beq.n	800c3b2 <vTaskDelay+0x32>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	60bb      	str	r3, [r7, #8]
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	e7fd      	b.n	800c3ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c3b2:	f000 f883 	bl	800c4bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fd1b 	bl	800cdf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3be:	f000 f88b 	bl	800c4d8 <xTaskResumeAll>
 800c3c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d107      	bne.n	800c3da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c3ca:	4b07      	ldr	r3, [pc, #28]	@ (800c3e8 <vTaskDelay+0x68>)
 800c3cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	2000e704 	.word	0x2000e704
 800c3e8:	e000ed04 	.word	0xe000ed04

0800c3ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08a      	sub	sp, #40	@ 0x28
 800c3f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	1d39      	adds	r1, r7, #4
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe ffc0 	bl	800b388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	9202      	str	r2, [sp, #8]
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	2300      	movs	r3, #0
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	2300      	movs	r3, #0
 800c418:	460a      	mov	r2, r1
 800c41a:	4922      	ldr	r1, [pc, #136]	@ (800c4a4 <vTaskStartScheduler+0xb8>)
 800c41c:	4822      	ldr	r0, [pc, #136]	@ (800c4a8 <vTaskStartScheduler+0xbc>)
 800c41e:	f7ff fd95 	bl	800bf4c <xTaskCreateStatic>
 800c422:	4603      	mov	r3, r0
 800c424:	4a21      	ldr	r2, [pc, #132]	@ (800c4ac <vTaskStartScheduler+0xc0>)
 800c426:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c428:	4b20      	ldr	r3, [pc, #128]	@ (800c4ac <vTaskStartScheduler+0xc0>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c430:	2301      	movs	r3, #1
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	e001      	b.n	800c43a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d102      	bne.n	800c446 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c440:	f000 fd2c 	bl	800ce9c <xTimerCreateTimerTask>
 800c444:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d116      	bne.n	800c47a <vTaskStartScheduler+0x8e>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	613b      	str	r3, [r7, #16]
}
 800c45e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c460:	4b13      	ldr	r3, [pc, #76]	@ (800c4b0 <vTaskStartScheduler+0xc4>)
 800c462:	f04f 32ff 	mov.w	r2, #4294967295
 800c466:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c468:	4b12      	ldr	r3, [pc, #72]	@ (800c4b4 <vTaskStartScheduler+0xc8>)
 800c46a:	2201      	movs	r2, #1
 800c46c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c46e:	4b12      	ldr	r3, [pc, #72]	@ (800c4b8 <vTaskStartScheduler+0xcc>)
 800c470:	2200      	movs	r2, #0
 800c472:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c474:	f001 f8fc 	bl	800d670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c478:	e00f      	b.n	800c49a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c480:	d10b      	bne.n	800c49a <vTaskStartScheduler+0xae>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	60fb      	str	r3, [r7, #12]
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	e7fd      	b.n	800c496 <vTaskStartScheduler+0xaa>
}
 800c49a:	bf00      	nop
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	080221bc 	.word	0x080221bc
 800c4a8:	0800cb2d 	.word	0x0800cb2d
 800c4ac:	2000e700 	.word	0x2000e700
 800c4b0:	2000e6fc 	.word	0x2000e6fc
 800c4b4:	2000e6e8 	.word	0x2000e6e8
 800c4b8:	2000e6e0 	.word	0x2000e6e0

0800c4bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c4c0:	4b04      	ldr	r3, [pc, #16]	@ (800c4d4 <vTaskSuspendAll+0x18>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	4a03      	ldr	r2, [pc, #12]	@ (800c4d4 <vTaskSuspendAll+0x18>)
 800c4c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c4ca:	bf00      	nop
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	2000e704 	.word	0x2000e704

0800c4d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4e6:	4b42      	ldr	r3, [pc, #264]	@ (800c5f0 <xTaskResumeAll+0x118>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10b      	bne.n	800c506 <xTaskResumeAll+0x2e>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	603b      	str	r3, [r7, #0]
}
 800c500:	bf00      	nop
 800c502:	bf00      	nop
 800c504:	e7fd      	b.n	800c502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c506:	f001 f957 	bl	800d7b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c50a:	4b39      	ldr	r3, [pc, #228]	@ (800c5f0 <xTaskResumeAll+0x118>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3b01      	subs	r3, #1
 800c510:	4a37      	ldr	r2, [pc, #220]	@ (800c5f0 <xTaskResumeAll+0x118>)
 800c512:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c514:	4b36      	ldr	r3, [pc, #216]	@ (800c5f0 <xTaskResumeAll+0x118>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d162      	bne.n	800c5e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c51c:	4b35      	ldr	r3, [pc, #212]	@ (800c5f4 <xTaskResumeAll+0x11c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d05e      	beq.n	800c5e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c524:	e02f      	b.n	800c586 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c526:	4b34      	ldr	r3, [pc, #208]	@ (800c5f8 <xTaskResumeAll+0x120>)
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3318      	adds	r3, #24
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe ffe6 	bl	800b504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe ffe1 	bl	800b504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c546:	4b2d      	ldr	r3, [pc, #180]	@ (800c5fc <xTaskResumeAll+0x124>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d903      	bls.n	800c556 <xTaskResumeAll+0x7e>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	4a2a      	ldr	r2, [pc, #168]	@ (800c5fc <xTaskResumeAll+0x124>)
 800c554:	6013      	str	r3, [r2, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c55a:	4613      	mov	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4a27      	ldr	r2, [pc, #156]	@ (800c600 <xTaskResumeAll+0x128>)
 800c564:	441a      	add	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3304      	adds	r3, #4
 800c56a:	4619      	mov	r1, r3
 800c56c:	4610      	mov	r0, r2
 800c56e:	f7fe ff6c 	bl	800b44a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c576:	4b23      	ldr	r3, [pc, #140]	@ (800c604 <xTaskResumeAll+0x12c>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d302      	bcc.n	800c586 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c580:	4b21      	ldr	r3, [pc, #132]	@ (800c608 <xTaskResumeAll+0x130>)
 800c582:	2201      	movs	r2, #1
 800c584:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c586:	4b1c      	ldr	r3, [pc, #112]	@ (800c5f8 <xTaskResumeAll+0x120>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1cb      	bne.n	800c526 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c594:	f000 fb80 	bl	800cc98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c598:	4b1c      	ldr	r3, [pc, #112]	@ (800c60c <xTaskResumeAll+0x134>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d010      	beq.n	800c5c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5a4:	f000 f846 	bl	800c634 <xTaskIncrementTick>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c5ae:	4b16      	ldr	r3, [pc, #88]	@ (800c608 <xTaskResumeAll+0x130>)
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1f1      	bne.n	800c5a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c5c0:	4b12      	ldr	r3, [pc, #72]	@ (800c60c <xTaskResumeAll+0x134>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5c6:	4b10      	ldr	r3, [pc, #64]	@ (800c608 <xTaskResumeAll+0x130>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d009      	beq.n	800c5e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c610 <xTaskResumeAll+0x138>)
 800c5d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e2:	f001 f91b 	bl	800d81c <vPortExitCritical>

	return xAlreadyYielded;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	2000e704 	.word	0x2000e704
 800c5f4:	2000e6dc 	.word	0x2000e6dc
 800c5f8:	2000e69c 	.word	0x2000e69c
 800c5fc:	2000e6e4 	.word	0x2000e6e4
 800c600:	2000e20c 	.word	0x2000e20c
 800c604:	2000e208 	.word	0x2000e208
 800c608:	2000e6f0 	.word	0x2000e6f0
 800c60c:	2000e6ec 	.word	0x2000e6ec
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c61a:	4b05      	ldr	r3, [pc, #20]	@ (800c630 <xTaskGetTickCount+0x1c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c620:	687b      	ldr	r3, [r7, #4]
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	2000e6e0 	.word	0x2000e6e0

0800c634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c63a:	2300      	movs	r3, #0
 800c63c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c63e:	4b4f      	ldr	r3, [pc, #316]	@ (800c77c <xTaskIncrementTick+0x148>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f040 8090 	bne.w	800c768 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c648:	4b4d      	ldr	r3, [pc, #308]	@ (800c780 <xTaskIncrementTick+0x14c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3301      	adds	r3, #1
 800c64e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c650:	4a4b      	ldr	r2, [pc, #300]	@ (800c780 <xTaskIncrementTick+0x14c>)
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d121      	bne.n	800c6a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c65c:	4b49      	ldr	r3, [pc, #292]	@ (800c784 <xTaskIncrementTick+0x150>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00b      	beq.n	800c67e <xTaskIncrementTick+0x4a>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c66a:	f383 8811 	msr	BASEPRI, r3
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	603b      	str	r3, [r7, #0]
}
 800c678:	bf00      	nop
 800c67a:	bf00      	nop
 800c67c:	e7fd      	b.n	800c67a <xTaskIncrementTick+0x46>
 800c67e:	4b41      	ldr	r3, [pc, #260]	@ (800c784 <xTaskIncrementTick+0x150>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60fb      	str	r3, [r7, #12]
 800c684:	4b40      	ldr	r3, [pc, #256]	@ (800c788 <xTaskIncrementTick+0x154>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a3e      	ldr	r2, [pc, #248]	@ (800c784 <xTaskIncrementTick+0x150>)
 800c68a:	6013      	str	r3, [r2, #0]
 800c68c:	4a3e      	ldr	r2, [pc, #248]	@ (800c788 <xTaskIncrementTick+0x154>)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	4b3e      	ldr	r3, [pc, #248]	@ (800c78c <xTaskIncrementTick+0x158>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3301      	adds	r3, #1
 800c698:	4a3c      	ldr	r2, [pc, #240]	@ (800c78c <xTaskIncrementTick+0x158>)
 800c69a:	6013      	str	r3, [r2, #0]
 800c69c:	f000 fafc 	bl	800cc98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6a0:	4b3b      	ldr	r3, [pc, #236]	@ (800c790 <xTaskIncrementTick+0x15c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d349      	bcc.n	800c73e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6aa:	4b36      	ldr	r3, [pc, #216]	@ (800c784 <xTaskIncrementTick+0x150>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d104      	bne.n	800c6be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6b4:	4b36      	ldr	r3, [pc, #216]	@ (800c790 <xTaskIncrementTick+0x15c>)
 800c6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ba:	601a      	str	r2, [r3, #0]
					break;
 800c6bc:	e03f      	b.n	800c73e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6be:	4b31      	ldr	r3, [pc, #196]	@ (800c784 <xTaskIncrementTick+0x150>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d203      	bcs.n	800c6de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6d6:	4a2e      	ldr	r2, [pc, #184]	@ (800c790 <xTaskIncrementTick+0x15c>)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6dc:	e02f      	b.n	800c73e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe ff0e 	bl	800b504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d004      	beq.n	800c6fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	3318      	adds	r3, #24
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe ff05 	bl	800b504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fe:	4b25      	ldr	r3, [pc, #148]	@ (800c794 <xTaskIncrementTick+0x160>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	429a      	cmp	r2, r3
 800c704:	d903      	bls.n	800c70e <xTaskIncrementTick+0xda>
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70a:	4a22      	ldr	r2, [pc, #136]	@ (800c794 <xTaskIncrementTick+0x160>)
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4a1f      	ldr	r2, [pc, #124]	@ (800c798 <xTaskIncrementTick+0x164>)
 800c71c:	441a      	add	r2, r3
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	3304      	adds	r3, #4
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f7fe fe90 	bl	800b44a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c72e:	4b1b      	ldr	r3, [pc, #108]	@ (800c79c <xTaskIncrementTick+0x168>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c734:	429a      	cmp	r2, r3
 800c736:	d3b8      	bcc.n	800c6aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c738:	2301      	movs	r3, #1
 800c73a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c73c:	e7b5      	b.n	800c6aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c73e:	4b17      	ldr	r3, [pc, #92]	@ (800c79c <xTaskIncrementTick+0x168>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c744:	4914      	ldr	r1, [pc, #80]	@ (800c798 <xTaskIncrementTick+0x164>)
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	440b      	add	r3, r1
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d901      	bls.n	800c75a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c756:	2301      	movs	r3, #1
 800c758:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c75a:	4b11      	ldr	r3, [pc, #68]	@ (800c7a0 <xTaskIncrementTick+0x16c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d007      	beq.n	800c772 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c762:	2301      	movs	r3, #1
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	e004      	b.n	800c772 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c768:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <xTaskIncrementTick+0x170>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3301      	adds	r3, #1
 800c76e:	4a0d      	ldr	r2, [pc, #52]	@ (800c7a4 <xTaskIncrementTick+0x170>)
 800c770:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c772:	697b      	ldr	r3, [r7, #20]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	2000e704 	.word	0x2000e704
 800c780:	2000e6e0 	.word	0x2000e6e0
 800c784:	2000e694 	.word	0x2000e694
 800c788:	2000e698 	.word	0x2000e698
 800c78c:	2000e6f4 	.word	0x2000e6f4
 800c790:	2000e6fc 	.word	0x2000e6fc
 800c794:	2000e6e4 	.word	0x2000e6e4
 800c798:	2000e20c 	.word	0x2000e20c
 800c79c:	2000e208 	.word	0x2000e208
 800c7a0:	2000e6f0 	.word	0x2000e6f0
 800c7a4:	2000e6ec 	.word	0x2000e6ec

0800c7a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7ae:	4b28      	ldr	r3, [pc, #160]	@ (800c850 <vTaskSwitchContext+0xa8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7b6:	4b27      	ldr	r3, [pc, #156]	@ (800c854 <vTaskSwitchContext+0xac>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7bc:	e042      	b.n	800c844 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c7be:	4b25      	ldr	r3, [pc, #148]	@ (800c854 <vTaskSwitchContext+0xac>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7c4:	4b24      	ldr	r3, [pc, #144]	@ (800c858 <vTaskSwitchContext+0xb0>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]
 800c7ca:	e011      	b.n	800c7f0 <vTaskSwitchContext+0x48>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10b      	bne.n	800c7ea <vTaskSwitchContext+0x42>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	607b      	str	r3, [r7, #4]
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop
 800c7e8:	e7fd      	b.n	800c7e6 <vTaskSwitchContext+0x3e>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	491a      	ldr	r1, [pc, #104]	@ (800c85c <vTaskSwitchContext+0xb4>)
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	440b      	add	r3, r1
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0e3      	beq.n	800c7cc <vTaskSwitchContext+0x24>
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4a13      	ldr	r2, [pc, #76]	@ (800c85c <vTaskSwitchContext+0xb4>)
 800c810:	4413      	add	r3, r2
 800c812:	60bb      	str	r3, [r7, #8]
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	605a      	str	r2, [r3, #4]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	685a      	ldr	r2, [r3, #4]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	3308      	adds	r3, #8
 800c826:	429a      	cmp	r2, r3
 800c828:	d104      	bne.n	800c834 <vTaskSwitchContext+0x8c>
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	605a      	str	r2, [r3, #4]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	4a09      	ldr	r2, [pc, #36]	@ (800c860 <vTaskSwitchContext+0xb8>)
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	4a06      	ldr	r2, [pc, #24]	@ (800c858 <vTaskSwitchContext+0xb0>)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6013      	str	r3, [r2, #0]
}
 800c844:	bf00      	nop
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	2000e704 	.word	0x2000e704
 800c854:	2000e6f0 	.word	0x2000e6f0
 800c858:	2000e6e4 	.word	0x2000e6e4
 800c85c:	2000e20c 	.word	0x2000e20c
 800c860:	2000e208 	.word	0x2000e208

0800c864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10b      	bne.n	800c88c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	60fb      	str	r3, [r7, #12]
}
 800c886:	bf00      	nop
 800c888:	bf00      	nop
 800c88a:	e7fd      	b.n	800c888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c88c:	4b07      	ldr	r3, [pc, #28]	@ (800c8ac <vTaskPlaceOnEventList+0x48>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3318      	adds	r3, #24
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7fe fdfc 	bl	800b492 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c89a:	2101      	movs	r1, #1
 800c89c:	6838      	ldr	r0, [r7, #0]
 800c89e:	f000 faa9 	bl	800cdf4 <prvAddCurrentTaskToDelayedList>
}
 800c8a2:	bf00      	nop
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	2000e208 	.word	0x2000e208

0800c8b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10b      	bne.n	800c8da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	617b      	str	r3, [r7, #20]
}
 800c8d4:	bf00      	nop
 800c8d6:	bf00      	nop
 800c8d8:	e7fd      	b.n	800c8d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8da:	4b0a      	ldr	r3, [pc, #40]	@ (800c904 <vTaskPlaceOnEventListRestricted+0x54>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3318      	adds	r3, #24
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f7fe fdb1 	bl	800b44a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d002      	beq.n	800c8f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	68b8      	ldr	r0, [r7, #8]
 800c8f8:	f000 fa7c 	bl	800cdf4 <prvAddCurrentTaskToDelayedList>
	}
 800c8fc:	bf00      	nop
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	2000e208 	.word	0x2000e208

0800c908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10b      	bne.n	800c936 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	60fb      	str	r3, [r7, #12]
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	e7fd      	b.n	800c932 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	3318      	adds	r3, #24
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fe fde2 	bl	800b504 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c940:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b8 <xTaskRemoveFromEventList+0xb0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d11d      	bne.n	800c984 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	3304      	adds	r3, #4
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fdd9 	bl	800b504 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c956:	4b19      	ldr	r3, [pc, #100]	@ (800c9bc <xTaskRemoveFromEventList+0xb4>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d903      	bls.n	800c966 <xTaskRemoveFromEventList+0x5e>
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c962:	4a16      	ldr	r2, [pc, #88]	@ (800c9bc <xTaskRemoveFromEventList+0xb4>)
 800c964:	6013      	str	r3, [r2, #0]
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4a13      	ldr	r2, [pc, #76]	@ (800c9c0 <xTaskRemoveFromEventList+0xb8>)
 800c974:	441a      	add	r2, r3
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	3304      	adds	r3, #4
 800c97a:	4619      	mov	r1, r3
 800c97c:	4610      	mov	r0, r2
 800c97e:	f7fe fd64 	bl	800b44a <vListInsertEnd>
 800c982:	e005      	b.n	800c990 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	3318      	adds	r3, #24
 800c988:	4619      	mov	r1, r3
 800c98a:	480e      	ldr	r0, [pc, #56]	@ (800c9c4 <xTaskRemoveFromEventList+0xbc>)
 800c98c:	f7fe fd5d 	bl	800b44a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c994:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c8 <xTaskRemoveFromEventList+0xc0>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d905      	bls.n	800c9aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9cc <xTaskRemoveFromEventList+0xc4>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	e001      	b.n	800c9ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9ae:	697b      	ldr	r3, [r7, #20]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	2000e704 	.word	0x2000e704
 800c9bc:	2000e6e4 	.word	0x2000e6e4
 800c9c0:	2000e20c 	.word	0x2000e20c
 800c9c4:	2000e69c 	.word	0x2000e69c
 800c9c8:	2000e208 	.word	0x2000e208
 800c9cc:	2000e6f0 	.word	0x2000e6f0

0800c9d0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10b      	bne.n	800c9f6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	60fb      	str	r3, [r7, #12]
}
 800c9f0:	bf00      	nop
 800c9f2:	bf00      	nop
 800c9f4:	e7fd      	b.n	800c9f2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c9f6:	f000 fedf 	bl	800d7b8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9fa:	4b07      	ldr	r3, [pc, #28]	@ (800ca18 <vTaskSetTimeOutState+0x48>)
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ca02:	4b06      	ldr	r3, [pc, #24]	@ (800ca1c <vTaskSetTimeOutState+0x4c>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ca0a:	f000 ff07 	bl	800d81c <vPortExitCritical>
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	2000e6f4 	.word	0x2000e6f4
 800ca1c:	2000e6e0 	.word	0x2000e6e0

0800ca20 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca28:	4b06      	ldr	r3, [pc, #24]	@ (800ca44 <vTaskInternalSetTimeOutState+0x24>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca30:	4b05      	ldr	r3, [pc, #20]	@ (800ca48 <vTaskInternalSetTimeOutState+0x28>)
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	605a      	str	r2, [r3, #4]
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	2000e6f4 	.word	0x2000e6f4
 800ca48:	2000e6e0 	.word	0x2000e6e0

0800ca4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b088      	sub	sp, #32
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10b      	bne.n	800ca74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	613b      	str	r3, [r7, #16]
}
 800ca6e:	bf00      	nop
 800ca70:	bf00      	nop
 800ca72:	e7fd      	b.n	800ca70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d10b      	bne.n	800ca92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ca7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7e:	f383 8811 	msr	BASEPRI, r3
 800ca82:	f3bf 8f6f 	isb	sy
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	60fb      	str	r3, [r7, #12]
}
 800ca8c:	bf00      	nop
 800ca8e:	bf00      	nop
 800ca90:	e7fd      	b.n	800ca8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ca92:	f000 fe91 	bl	800d7b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca96:	4b1d      	ldr	r3, [pc, #116]	@ (800cb0c <xTaskCheckForTimeOut+0xc0>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caae:	d102      	bne.n	800cab6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cab0:	2300      	movs	r3, #0
 800cab2:	61fb      	str	r3, [r7, #28]
 800cab4:	e023      	b.n	800cafe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	4b15      	ldr	r3, [pc, #84]	@ (800cb10 <xTaskCheckForTimeOut+0xc4>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d007      	beq.n	800cad2 <xTaskCheckForTimeOut+0x86>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d302      	bcc.n	800cad2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cacc:	2301      	movs	r3, #1
 800cace:	61fb      	str	r3, [r7, #28]
 800cad0:	e015      	b.n	800cafe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d20b      	bcs.n	800caf4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	1ad2      	subs	r2, r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ff99 	bl	800ca20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
 800caf2:	e004      	b.n	800cafe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cafa:	2301      	movs	r3, #1
 800cafc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cafe:	f000 fe8d 	bl	800d81c <vPortExitCritical>

	return xReturn;
 800cb02:	69fb      	ldr	r3, [r7, #28]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3720      	adds	r7, #32
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	2000e6e0 	.word	0x2000e6e0
 800cb10:	2000e6f4 	.word	0x2000e6f4

0800cb14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb18:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <vTaskMissedYield+0x14>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]
}
 800cb1e:	bf00      	nop
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	2000e6f0 	.word	0x2000e6f0

0800cb2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb34:	f000 f852 	bl	800cbdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb38:	4b06      	ldr	r3, [pc, #24]	@ (800cb54 <prvIdleTask+0x28>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d9f9      	bls.n	800cb34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb40:	4b05      	ldr	r3, [pc, #20]	@ (800cb58 <prvIdleTask+0x2c>)
 800cb42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb50:	e7f0      	b.n	800cb34 <prvIdleTask+0x8>
 800cb52:	bf00      	nop
 800cb54:	2000e20c 	.word	0x2000e20c
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb62:	2300      	movs	r3, #0
 800cb64:	607b      	str	r3, [r7, #4]
 800cb66:	e00c      	b.n	800cb82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4a12      	ldr	r2, [pc, #72]	@ (800cbbc <prvInitialiseTaskLists+0x60>)
 800cb74:	4413      	add	r3, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe fc3a 	bl	800b3f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	607b      	str	r3, [r7, #4]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b37      	cmp	r3, #55	@ 0x37
 800cb86:	d9ef      	bls.n	800cb68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb88:	480d      	ldr	r0, [pc, #52]	@ (800cbc0 <prvInitialiseTaskLists+0x64>)
 800cb8a:	f7fe fc31 	bl	800b3f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb8e:	480d      	ldr	r0, [pc, #52]	@ (800cbc4 <prvInitialiseTaskLists+0x68>)
 800cb90:	f7fe fc2e 	bl	800b3f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb94:	480c      	ldr	r0, [pc, #48]	@ (800cbc8 <prvInitialiseTaskLists+0x6c>)
 800cb96:	f7fe fc2b 	bl	800b3f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb9a:	480c      	ldr	r0, [pc, #48]	@ (800cbcc <prvInitialiseTaskLists+0x70>)
 800cb9c:	f7fe fc28 	bl	800b3f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cba0:	480b      	ldr	r0, [pc, #44]	@ (800cbd0 <prvInitialiseTaskLists+0x74>)
 800cba2:	f7fe fc25 	bl	800b3f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cba6:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd4 <prvInitialiseTaskLists+0x78>)
 800cba8:	4a05      	ldr	r2, [pc, #20]	@ (800cbc0 <prvInitialiseTaskLists+0x64>)
 800cbaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbac:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd8 <prvInitialiseTaskLists+0x7c>)
 800cbae:	4a05      	ldr	r2, [pc, #20]	@ (800cbc4 <prvInitialiseTaskLists+0x68>)
 800cbb0:	601a      	str	r2, [r3, #0]
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	2000e20c 	.word	0x2000e20c
 800cbc0:	2000e66c 	.word	0x2000e66c
 800cbc4:	2000e680 	.word	0x2000e680
 800cbc8:	2000e69c 	.word	0x2000e69c
 800cbcc:	2000e6b0 	.word	0x2000e6b0
 800cbd0:	2000e6c8 	.word	0x2000e6c8
 800cbd4:	2000e694 	.word	0x2000e694
 800cbd8:	2000e698 	.word	0x2000e698

0800cbdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbe2:	e019      	b.n	800cc18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbe4:	f000 fde8 	bl	800d7b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe8:	4b10      	ldr	r3, [pc, #64]	@ (800cc2c <prvCheckTasksWaitingTermination+0x50>)
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fc85 	bl	800b504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbfa:	4b0d      	ldr	r3, [pc, #52]	@ (800cc30 <prvCheckTasksWaitingTermination+0x54>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	4a0b      	ldr	r2, [pc, #44]	@ (800cc30 <prvCheckTasksWaitingTermination+0x54>)
 800cc02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc04:	4b0b      	ldr	r3, [pc, #44]	@ (800cc34 <prvCheckTasksWaitingTermination+0x58>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	4a0a      	ldr	r2, [pc, #40]	@ (800cc34 <prvCheckTasksWaitingTermination+0x58>)
 800cc0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc0e:	f000 fe05 	bl	800d81c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f810 	bl	800cc38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc18:	4b06      	ldr	r3, [pc, #24]	@ (800cc34 <prvCheckTasksWaitingTermination+0x58>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e1      	bne.n	800cbe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2000e6b0 	.word	0x2000e6b0
 800cc30:	2000e6dc 	.word	0x2000e6dc
 800cc34:	2000e6c4 	.word	0x2000e6c4

0800cc38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d108      	bne.n	800cc5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 ffa2 	bl	800db98 <vPortFree>
				vPortFree( pxTCB );
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 ff9f 	bl	800db98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc5a:	e019      	b.n	800cc90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d103      	bne.n	800cc6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 ff96 	bl	800db98 <vPortFree>
	}
 800cc6c:	e010      	b.n	800cc90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d00b      	beq.n	800cc90 <prvDeleteTCB+0x58>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	60fb      	str	r3, [r7, #12]
}
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
 800cc8e:	e7fd      	b.n	800cc8c <prvDeleteTCB+0x54>
	}
 800cc90:	bf00      	nop
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd0 <prvResetNextTaskUnblockTime+0x38>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d104      	bne.n	800ccb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cca8:	4b0a      	ldr	r3, [pc, #40]	@ (800ccd4 <prvResetNextTaskUnblockTime+0x3c>)
 800ccaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ccae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ccb0:	e008      	b.n	800ccc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb2:	4b07      	ldr	r3, [pc, #28]	@ (800ccd0 <prvResetNextTaskUnblockTime+0x38>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	4a04      	ldr	r2, [pc, #16]	@ (800ccd4 <prvResetNextTaskUnblockTime+0x3c>)
 800ccc2:	6013      	str	r3, [r2, #0]
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr
 800ccd0:	2000e694 	.word	0x2000e694
 800ccd4:	2000e6fc 	.word	0x2000e6fc

0800ccd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccde:	4b0b      	ldr	r3, [pc, #44]	@ (800cd0c <xTaskGetSchedulerState+0x34>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d102      	bne.n	800ccec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cce6:	2301      	movs	r3, #1
 800cce8:	607b      	str	r3, [r7, #4]
 800ccea:	e008      	b.n	800ccfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccec:	4b08      	ldr	r3, [pc, #32]	@ (800cd10 <xTaskGetSchedulerState+0x38>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	607b      	str	r3, [r7, #4]
 800ccf8:	e001      	b.n	800ccfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccfe:	687b      	ldr	r3, [r7, #4]
	}
 800cd00:	4618      	mov	r0, r3
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	2000e6e8 	.word	0x2000e6e8
 800cd10:	2000e704 	.word	0x2000e704

0800cd14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d058      	beq.n	800cddc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd2a:	4b2f      	ldr	r3, [pc, #188]	@ (800cde8 <xTaskPriorityDisinherit+0xd4>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	693a      	ldr	r2, [r7, #16]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d00b      	beq.n	800cd4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	60fb      	str	r3, [r7, #12]
}
 800cd46:	bf00      	nop
 800cd48:	bf00      	nop
 800cd4a:	e7fd      	b.n	800cd48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10b      	bne.n	800cd6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	60bb      	str	r3, [r7, #8]
}
 800cd66:	bf00      	nop
 800cd68:	bf00      	nop
 800cd6a:	e7fd      	b.n	800cd68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd70:	1e5a      	subs	r2, r3, #1
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d02c      	beq.n	800cddc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d128      	bne.n	800cddc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fe fbb8 	bl	800b504 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdac:	4b0f      	ldr	r3, [pc, #60]	@ (800cdec <xTaskPriorityDisinherit+0xd8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d903      	bls.n	800cdbc <xTaskPriorityDisinherit+0xa8>
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb8:	4a0c      	ldr	r2, [pc, #48]	@ (800cdec <xTaskPriorityDisinherit+0xd8>)
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4a09      	ldr	r2, [pc, #36]	@ (800cdf0 <xTaskPriorityDisinherit+0xdc>)
 800cdca:	441a      	add	r2, r3
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	f7fe fb39 	bl	800b44a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cddc:	697b      	ldr	r3, [r7, #20]
	}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3718      	adds	r7, #24
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	2000e208 	.word	0x2000e208
 800cdec:	2000e6e4 	.word	0x2000e6e4
 800cdf0:	2000e20c 	.word	0x2000e20c

0800cdf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdfe:	4b21      	ldr	r3, [pc, #132]	@ (800ce84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce04:	4b20      	ldr	r3, [pc, #128]	@ (800ce88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe fb7a 	bl	800b504 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d10a      	bne.n	800ce2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d007      	beq.n	800ce2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4619      	mov	r1, r3
 800ce26:	4819      	ldr	r0, [pc, #100]	@ (800ce8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ce28:	f7fe fb0f 	bl	800b44a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce2c:	e026      	b.n	800ce7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4413      	add	r3, r2
 800ce34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce36:	4b14      	ldr	r3, [pc, #80]	@ (800ce88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d209      	bcs.n	800ce5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce46:	4b12      	ldr	r3, [pc, #72]	@ (800ce90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	4619      	mov	r1, r3
 800ce52:	4610      	mov	r0, r2
 800ce54:	f7fe fb1d 	bl	800b492 <vListInsert>
}
 800ce58:	e010      	b.n	800ce7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ce94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3304      	adds	r3, #4
 800ce64:	4619      	mov	r1, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	f7fe fb13 	bl	800b492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d202      	bcs.n	800ce7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce76:	4a08      	ldr	r2, [pc, #32]	@ (800ce98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	6013      	str	r3, [r2, #0]
}
 800ce7c:	bf00      	nop
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	2000e6e0 	.word	0x2000e6e0
 800ce88:	2000e208 	.word	0x2000e208
 800ce8c:	2000e6c8 	.word	0x2000e6c8
 800ce90:	2000e698 	.word	0x2000e698
 800ce94:	2000e694 	.word	0x2000e694
 800ce98:	2000e6fc 	.word	0x2000e6fc

0800ce9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	@ 0x28
 800cea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cea6:	f000 fb13 	bl	800d4d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ceaa:	4b1d      	ldr	r3, [pc, #116]	@ (800cf20 <xTimerCreateTimerTask+0x84>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d021      	beq.n	800cef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ceba:	1d3a      	adds	r2, r7, #4
 800cebc:	f107 0108 	add.w	r1, r7, #8
 800cec0:	f107 030c 	add.w	r3, r7, #12
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe fa79 	bl	800b3bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ceca:	6879      	ldr	r1, [r7, #4]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	9202      	str	r2, [sp, #8]
 800ced2:	9301      	str	r3, [sp, #4]
 800ced4:	2302      	movs	r3, #2
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	2300      	movs	r3, #0
 800ceda:	460a      	mov	r2, r1
 800cedc:	4911      	ldr	r1, [pc, #68]	@ (800cf24 <xTimerCreateTimerTask+0x88>)
 800cede:	4812      	ldr	r0, [pc, #72]	@ (800cf28 <xTimerCreateTimerTask+0x8c>)
 800cee0:	f7ff f834 	bl	800bf4c <xTaskCreateStatic>
 800cee4:	4603      	mov	r3, r0
 800cee6:	4a11      	ldr	r2, [pc, #68]	@ (800cf2c <xTimerCreateTimerTask+0x90>)
 800cee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ceea:	4b10      	ldr	r3, [pc, #64]	@ (800cf2c <xTimerCreateTimerTask+0x90>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cef2:	2301      	movs	r3, #1
 800cef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10b      	bne.n	800cf14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	613b      	str	r3, [r7, #16]
}
 800cf0e:	bf00      	nop
 800cf10:	bf00      	nop
 800cf12:	e7fd      	b.n	800cf10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf14:	697b      	ldr	r3, [r7, #20]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	2000e738 	.word	0x2000e738
 800cf24:	080221c4 	.word	0x080221c4
 800cf28:	0800d069 	.word	0x0800d069
 800cf2c:	2000e73c 	.word	0x2000e73c

0800cf30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08a      	sub	sp, #40	@ 0x28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10b      	bne.n	800cf60 <xTimerGenericCommand+0x30>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	623b      	str	r3, [r7, #32]
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	e7fd      	b.n	800cf5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf60:	4b19      	ldr	r3, [pc, #100]	@ (800cfc8 <xTimerGenericCommand+0x98>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d02a      	beq.n	800cfbe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b05      	cmp	r3, #5
 800cf78:	dc18      	bgt.n	800cfac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf7a:	f7ff fead 	bl	800ccd8 <xTaskGetSchedulerState>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d109      	bne.n	800cf98 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf84:	4b10      	ldr	r3, [pc, #64]	@ (800cfc8 <xTimerGenericCommand+0x98>)
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	f107 0110 	add.w	r1, r7, #16
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf90:	f7fe fbec 	bl	800b76c <xQueueGenericSend>
 800cf94:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf96:	e012      	b.n	800cfbe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf98:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <xTimerGenericCommand+0x98>)
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	f107 0110 	add.w	r1, r7, #16
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f7fe fbe2 	bl	800b76c <xQueueGenericSend>
 800cfa8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cfaa:	e008      	b.n	800cfbe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cfac:	4b06      	ldr	r3, [pc, #24]	@ (800cfc8 <xTimerGenericCommand+0x98>)
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	f107 0110 	add.w	r1, r7, #16
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	f7fe fcda 	bl	800b970 <xQueueGenericSendFromISR>
 800cfbc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3728      	adds	r7, #40	@ 0x28
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	2000e738 	.word	0x2000e738

0800cfcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b088      	sub	sp, #32
 800cfd0:	af02      	add	r7, sp, #8
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd6:	4b23      	ldr	r3, [pc, #140]	@ (800d064 <prvProcessExpiredTimer+0x98>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fa8d 	bl	800b504 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cff0:	f003 0304 	and.w	r3, r3, #4
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d023      	beq.n	800d040 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	699a      	ldr	r2, [r3, #24]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	18d1      	adds	r1, r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	683a      	ldr	r2, [r7, #0]
 800d004:	6978      	ldr	r0, [r7, #20]
 800d006:	f000 f8d5 	bl	800d1b4 <prvInsertTimerInActiveList>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d020      	beq.n	800d052 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d010:	2300      	movs	r3, #0
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	2300      	movs	r3, #0
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	2100      	movs	r1, #0
 800d01a:	6978      	ldr	r0, [r7, #20]
 800d01c:	f7ff ff88 	bl	800cf30 <xTimerGenericCommand>
 800d020:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d114      	bne.n	800d052 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	60fb      	str	r3, [r7, #12]
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d046:	f023 0301 	bic.w	r3, r3, #1
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	6a1b      	ldr	r3, [r3, #32]
 800d056:	6978      	ldr	r0, [r7, #20]
 800d058:	4798      	blx	r3
}
 800d05a:	bf00      	nop
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	2000e730 	.word	0x2000e730

0800d068 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d070:	f107 0308 	add.w	r3, r7, #8
 800d074:	4618      	mov	r0, r3
 800d076:	f000 f859 	bl	800d12c <prvGetNextExpireTime>
 800d07a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	4619      	mov	r1, r3
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f000 f805 	bl	800d090 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d086:	f000 f8d7 	bl	800d238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d08a:	bf00      	nop
 800d08c:	e7f0      	b.n	800d070 <prvTimerTask+0x8>
	...

0800d090 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d09a:	f7ff fa0f 	bl	800c4bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d09e:	f107 0308 	add.w	r3, r7, #8
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 f866 	bl	800d174 <prvSampleTimeNow>
 800d0a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d130      	bne.n	800d112 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <prvProcessTimerOrBlockTask+0x3c>
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d806      	bhi.n	800d0cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d0be:	f7ff fa0b 	bl	800c4d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d0c2:	68f9      	ldr	r1, [r7, #12]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff ff81 	bl	800cfcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d0ca:	e024      	b.n	800d116 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d008      	beq.n	800d0e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0d2:	4b13      	ldr	r3, [pc, #76]	@ (800d120 <prvProcessTimerOrBlockTask+0x90>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d101      	bne.n	800d0e0 <prvProcessTimerOrBlockTask+0x50>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e000      	b.n	800d0e2 <prvProcessTimerOrBlockTask+0x52>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d124 <prvProcessTimerOrBlockTask+0x94>)
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	f7fe fef7 	bl	800bee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0f6:	f7ff f9ef 	bl	800c4d8 <xTaskResumeAll>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10a      	bne.n	800d116 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d100:	4b09      	ldr	r3, [pc, #36]	@ (800d128 <prvProcessTimerOrBlockTask+0x98>)
 800d102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	f3bf 8f6f 	isb	sy
}
 800d110:	e001      	b.n	800d116 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d112:	f7ff f9e1 	bl	800c4d8 <xTaskResumeAll>
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	2000e734 	.word	0x2000e734
 800d124:	2000e738 	.word	0x2000e738
 800d128:	e000ed04 	.word	0xe000ed04

0800d12c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d134:	4b0e      	ldr	r3, [pc, #56]	@ (800d170 <prvGetNextExpireTime+0x44>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <prvGetNextExpireTime+0x16>
 800d13e:	2201      	movs	r2, #1
 800d140:	e000      	b.n	800d144 <prvGetNextExpireTime+0x18>
 800d142:	2200      	movs	r2, #0
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d150:	4b07      	ldr	r3, [pc, #28]	@ (800d170 <prvGetNextExpireTime+0x44>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	e001      	b.n	800d160 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d15c:	2300      	movs	r3, #0
 800d15e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d160:	68fb      	ldr	r3, [r7, #12]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3714      	adds	r7, #20
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	2000e730 	.word	0x2000e730

0800d174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d17c:	f7ff fa4a 	bl	800c614 <xTaskGetTickCount>
 800d180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d182:	4b0b      	ldr	r3, [pc, #44]	@ (800d1b0 <prvSampleTimeNow+0x3c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d205      	bcs.n	800d198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d18c:	f000 f93a 	bl	800d404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	e002      	b.n	800d19e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d19e:	4a04      	ldr	r2, [pc, #16]	@ (800d1b0 <prvSampleTimeNow+0x3c>)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000e740 	.word	0x2000e740

0800d1b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d812      	bhi.n	800d200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	1ad2      	subs	r2, r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d302      	bcc.n	800d1ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	617b      	str	r3, [r7, #20]
 800d1ec:	e01b      	b.n	800d226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1ee:	4b10      	ldr	r3, [pc, #64]	@ (800d230 <prvInsertTimerInActiveList+0x7c>)
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	f7fe f94a 	bl	800b492 <vListInsert>
 800d1fe:	e012      	b.n	800d226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	429a      	cmp	r2, r3
 800d206:	d206      	bcs.n	800d216 <prvInsertTimerInActiveList+0x62>
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d302      	bcc.n	800d216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d210:	2301      	movs	r3, #1
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	e007      	b.n	800d226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d216:	4b07      	ldr	r3, [pc, #28]	@ (800d234 <prvInsertTimerInActiveList+0x80>)
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	3304      	adds	r3, #4
 800d21e:	4619      	mov	r1, r3
 800d220:	4610      	mov	r0, r2
 800d222:	f7fe f936 	bl	800b492 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d226:	697b      	ldr	r3, [r7, #20]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	2000e734 	.word	0x2000e734
 800d234:	2000e730 	.word	0x2000e730

0800d238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08e      	sub	sp, #56	@ 0x38
 800d23c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d23e:	e0ce      	b.n	800d3de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	da19      	bge.n	800d27a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d246:	1d3b      	adds	r3, r7, #4
 800d248:	3304      	adds	r3, #4
 800d24a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10b      	bne.n	800d26a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	61fb      	str	r3, [r7, #28]
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	e7fd      	b.n	800d266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d270:	6850      	ldr	r0, [r2, #4]
 800d272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d274:	6892      	ldr	r2, [r2, #8]
 800d276:	4611      	mov	r1, r2
 800d278:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f2c0 80ae 	blt.w	800d3de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d290:	3304      	adds	r3, #4
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe f936 	bl	800b504 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d298:	463b      	mov	r3, r7
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff ff6a 	bl	800d174 <prvSampleTimeNow>
 800d2a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b09      	cmp	r3, #9
 800d2a6:	f200 8097 	bhi.w	800d3d8 <prvProcessReceivedCommands+0x1a0>
 800d2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b0 <prvProcessReceivedCommands+0x78>)
 800d2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b0:	0800d2d9 	.word	0x0800d2d9
 800d2b4:	0800d2d9 	.word	0x0800d2d9
 800d2b8:	0800d2d9 	.word	0x0800d2d9
 800d2bc:	0800d34f 	.word	0x0800d34f
 800d2c0:	0800d363 	.word	0x0800d363
 800d2c4:	0800d3af 	.word	0x0800d3af
 800d2c8:	0800d2d9 	.word	0x0800d2d9
 800d2cc:	0800d2d9 	.word	0x0800d2d9
 800d2d0:	0800d34f 	.word	0x0800d34f
 800d2d4:	0800d363 	.word	0x0800d363
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2de:	f043 0301 	orr.w	r3, r3, #1
 800d2e2:	b2da      	uxtb	r2, r3
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	18d1      	adds	r1, r2, r3
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2f8:	f7ff ff5c 	bl	800d1b4 <prvInsertTimerInActiveList>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d06c      	beq.n	800d3dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d308:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d310:	f003 0304 	and.w	r3, r3, #4
 800d314:	2b00      	cmp	r3, #0
 800d316:	d061      	beq.n	800d3dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	441a      	add	r2, r3
 800d320:	2300      	movs	r3, #0
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	2300      	movs	r3, #0
 800d326:	2100      	movs	r1, #0
 800d328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d32a:	f7ff fe01 	bl	800cf30 <xTimerGenericCommand>
 800d32e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d152      	bne.n	800d3dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	61bb      	str	r3, [r7, #24]
}
 800d348:	bf00      	nop
 800d34a:	bf00      	nop
 800d34c:	e7fd      	b.n	800d34a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d354:	f023 0301 	bic.w	r3, r3, #1
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d360:	e03d      	b.n	800d3de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d368:	f043 0301 	orr.w	r3, r3, #1
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d370:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d374:	68ba      	ldr	r2, [r7, #8]
 800d376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d378:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10b      	bne.n	800d39a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	617b      	str	r3, [r7, #20]
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	e7fd      	b.n	800d396 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	18d1      	adds	r1, r2, r3
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3a8:	f7ff ff04 	bl	800d1b4 <prvInsertTimerInActiveList>
					break;
 800d3ac:	e017      	b.n	800d3de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3b4:	f003 0302 	and.w	r3, r3, #2
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d103      	bne.n	800d3c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d3bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3be:	f000 fbeb 	bl	800db98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d3c2:	e00c      	b.n	800d3de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3ca:	f023 0301 	bic.w	r3, r3, #1
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d3d6:	e002      	b.n	800d3de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d3d8:	bf00      	nop
 800d3da:	e000      	b.n	800d3de <prvProcessReceivedCommands+0x1a6>
					break;
 800d3dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3de:	4b08      	ldr	r3, [pc, #32]	@ (800d400 <prvProcessReceivedCommands+0x1c8>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	1d39      	adds	r1, r7, #4
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fb60 	bl	800baac <xQueueReceive>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f47f af26 	bne.w	800d240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop
 800d3f8:	3730      	adds	r7, #48	@ 0x30
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	2000e738 	.word	0x2000e738

0800d404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b088      	sub	sp, #32
 800d408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d40a:	e049      	b.n	800d4a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d40c:	4b2e      	ldr	r3, [pc, #184]	@ (800d4c8 <prvSwitchTimerLists+0xc4>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d416:	4b2c      	ldr	r3, [pc, #176]	@ (800d4c8 <prvSwitchTimerLists+0xc4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3304      	adds	r3, #4
 800d424:	4618      	mov	r0, r3
 800d426:	f7fe f86d 	bl	800b504 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d02f      	beq.n	800d4a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	693a      	ldr	r2, [r7, #16]
 800d446:	4413      	add	r3, r2
 800d448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d90e      	bls.n	800d470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d45e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c8 <prvSwitchTimerLists+0xc4>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3304      	adds	r3, #4
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fe f812 	bl	800b492 <vListInsert>
 800d46e:	e017      	b.n	800d4a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d470:	2300      	movs	r3, #0
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	2300      	movs	r3, #0
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	2100      	movs	r1, #0
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f7ff fd58 	bl	800cf30 <xTimerGenericCommand>
 800d480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10b      	bne.n	800d4a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	603b      	str	r3, [r7, #0]
}
 800d49a:	bf00      	nop
 800d49c:	bf00      	nop
 800d49e:	e7fd      	b.n	800d49c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d4a0:	4b09      	ldr	r3, [pc, #36]	@ (800d4c8 <prvSwitchTimerLists+0xc4>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1b0      	bne.n	800d40c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d4aa:	4b07      	ldr	r3, [pc, #28]	@ (800d4c8 <prvSwitchTimerLists+0xc4>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d4b0:	4b06      	ldr	r3, [pc, #24]	@ (800d4cc <prvSwitchTimerLists+0xc8>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a04      	ldr	r2, [pc, #16]	@ (800d4c8 <prvSwitchTimerLists+0xc4>)
 800d4b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d4b8:	4a04      	ldr	r2, [pc, #16]	@ (800d4cc <prvSwitchTimerLists+0xc8>)
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	6013      	str	r3, [r2, #0]
}
 800d4be:	bf00      	nop
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	2000e730 	.word	0x2000e730
 800d4cc:	2000e734 	.word	0x2000e734

0800d4d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d4d6:	f000 f96f 	bl	800d7b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d4da:	4b15      	ldr	r3, [pc, #84]	@ (800d530 <prvCheckForValidListAndQueue+0x60>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d120      	bne.n	800d524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d4e2:	4814      	ldr	r0, [pc, #80]	@ (800d534 <prvCheckForValidListAndQueue+0x64>)
 800d4e4:	f7fd ff84 	bl	800b3f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d4e8:	4813      	ldr	r0, [pc, #76]	@ (800d538 <prvCheckForValidListAndQueue+0x68>)
 800d4ea:	f7fd ff81 	bl	800b3f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4ee:	4b13      	ldr	r3, [pc, #76]	@ (800d53c <prvCheckForValidListAndQueue+0x6c>)
 800d4f0:	4a10      	ldr	r2, [pc, #64]	@ (800d534 <prvCheckForValidListAndQueue+0x64>)
 800d4f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4f4:	4b12      	ldr	r3, [pc, #72]	@ (800d540 <prvCheckForValidListAndQueue+0x70>)
 800d4f6:	4a10      	ldr	r2, [pc, #64]	@ (800d538 <prvCheckForValidListAndQueue+0x68>)
 800d4f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	4b11      	ldr	r3, [pc, #68]	@ (800d544 <prvCheckForValidListAndQueue+0x74>)
 800d500:	4a11      	ldr	r2, [pc, #68]	@ (800d548 <prvCheckForValidListAndQueue+0x78>)
 800d502:	2110      	movs	r1, #16
 800d504:	200a      	movs	r0, #10
 800d506:	f7fe f891 	bl	800b62c <xQueueGenericCreateStatic>
 800d50a:	4603      	mov	r3, r0
 800d50c:	4a08      	ldr	r2, [pc, #32]	@ (800d530 <prvCheckForValidListAndQueue+0x60>)
 800d50e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d510:	4b07      	ldr	r3, [pc, #28]	@ (800d530 <prvCheckForValidListAndQueue+0x60>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d005      	beq.n	800d524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d518:	4b05      	ldr	r3, [pc, #20]	@ (800d530 <prvCheckForValidListAndQueue+0x60>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	490b      	ldr	r1, [pc, #44]	@ (800d54c <prvCheckForValidListAndQueue+0x7c>)
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fe fcb6 	bl	800be90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d524:	f000 f97a 	bl	800d81c <vPortExitCritical>
}
 800d528:	bf00      	nop
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	2000e738 	.word	0x2000e738
 800d534:	2000e708 	.word	0x2000e708
 800d538:	2000e71c 	.word	0x2000e71c
 800d53c:	2000e730 	.word	0x2000e730
 800d540:	2000e734 	.word	0x2000e734
 800d544:	2000e7e4 	.word	0x2000e7e4
 800d548:	2000e744 	.word	0x2000e744
 800d54c:	080221cc 	.word	0x080221cc

0800d550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3b04      	subs	r3, #4
 800d560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	3b04      	subs	r3, #4
 800d56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	f023 0201 	bic.w	r2, r3, #1
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	3b04      	subs	r3, #4
 800d57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d580:	4a0c      	ldr	r2, [pc, #48]	@ (800d5b4 <pxPortInitialiseStack+0x64>)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3b14      	subs	r3, #20
 800d58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3b04      	subs	r3, #4
 800d596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f06f 0202 	mvn.w	r2, #2
 800d59e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	3b20      	subs	r3, #32
 800d5a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	0800d5b9 	.word	0x0800d5b9

0800d5b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5c2:	4b13      	ldr	r3, [pc, #76]	@ (800d610 <prvTaskExitError+0x58>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ca:	d00b      	beq.n	800d5e4 <prvTaskExitError+0x2c>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	60fb      	str	r3, [r7, #12]
}
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
 800d5e2:	e7fd      	b.n	800d5e0 <prvTaskExitError+0x28>
	__asm volatile
 800d5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	60bb      	str	r3, [r7, #8]
}
 800d5f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5f8:	bf00      	nop
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d0fc      	beq.n	800d5fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d600:	bf00      	nop
 800d602:	bf00      	nop
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	20002394 	.word	0x20002394
	...

0800d620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d620:	4b07      	ldr	r3, [pc, #28]	@ (800d640 <pxCurrentTCBConst2>)
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	6808      	ldr	r0, [r1, #0]
 800d626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62a:	f380 8809 	msr	PSP, r0
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f04f 0000 	mov.w	r0, #0
 800d636:	f380 8811 	msr	BASEPRI, r0
 800d63a:	4770      	bx	lr
 800d63c:	f3af 8000 	nop.w

0800d640 <pxCurrentTCBConst2>:
 800d640:	2000e208 	.word	0x2000e208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop

0800d648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d648:	4808      	ldr	r0, [pc, #32]	@ (800d66c <prvPortStartFirstTask+0x24>)
 800d64a:	6800      	ldr	r0, [r0, #0]
 800d64c:	6800      	ldr	r0, [r0, #0]
 800d64e:	f380 8808 	msr	MSP, r0
 800d652:	f04f 0000 	mov.w	r0, #0
 800d656:	f380 8814 	msr	CONTROL, r0
 800d65a:	b662      	cpsie	i
 800d65c:	b661      	cpsie	f
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	df00      	svc	0
 800d668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d66a:	bf00      	nop
 800d66c:	e000ed08 	.word	0xe000ed08

0800d670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d676:	4b47      	ldr	r3, [pc, #284]	@ (800d794 <xPortStartScheduler+0x124>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a47      	ldr	r2, [pc, #284]	@ (800d798 <xPortStartScheduler+0x128>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d10b      	bne.n	800d698 <xPortStartScheduler+0x28>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	613b      	str	r3, [r7, #16]
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	e7fd      	b.n	800d694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d698:	4b3e      	ldr	r3, [pc, #248]	@ (800d794 <xPortStartScheduler+0x124>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a3f      	ldr	r2, [pc, #252]	@ (800d79c <xPortStartScheduler+0x12c>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d10b      	bne.n	800d6ba <xPortStartScheduler+0x4a>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	60fb      	str	r3, [r7, #12]
}
 800d6b4:	bf00      	nop
 800d6b6:	bf00      	nop
 800d6b8:	e7fd      	b.n	800d6b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6ba:	4b39      	ldr	r3, [pc, #228]	@ (800d7a0 <xPortStartScheduler+0x130>)
 800d6bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	22ff      	movs	r2, #255	@ 0xff
 800d6ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	4b31      	ldr	r3, [pc, #196]	@ (800d7a4 <xPortStartScheduler+0x134>)
 800d6e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6e2:	4b31      	ldr	r3, [pc, #196]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d6e4:	2207      	movs	r2, #7
 800d6e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6e8:	e009      	b.n	800d6fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d6ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	4a2d      	ldr	r2, [pc, #180]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d6f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6f4:	78fb      	ldrb	r3, [r7, #3]
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	b2db      	uxtb	r3, r3
 800d702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d706:	2b80      	cmp	r3, #128	@ 0x80
 800d708:	d0ef      	beq.n	800d6ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d70a:	4b27      	ldr	r3, [pc, #156]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f1c3 0307 	rsb	r3, r3, #7
 800d712:	2b04      	cmp	r3, #4
 800d714:	d00b      	beq.n	800d72e <xPortStartScheduler+0xbe>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	60bb      	str	r3, [r7, #8]
}
 800d728:	bf00      	nop
 800d72a:	bf00      	nop
 800d72c:	e7fd      	b.n	800d72a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d72e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	021b      	lsls	r3, r3, #8
 800d734:	4a1c      	ldr	r2, [pc, #112]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d738:	4b1b      	ldr	r3, [pc, #108]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d740:	4a19      	ldr	r2, [pc, #100]	@ (800d7a8 <xPortStartScheduler+0x138>)
 800d742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	b2da      	uxtb	r2, r3
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d74c:	4b17      	ldr	r3, [pc, #92]	@ (800d7ac <xPortStartScheduler+0x13c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a16      	ldr	r2, [pc, #88]	@ (800d7ac <xPortStartScheduler+0x13c>)
 800d752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d758:	4b14      	ldr	r3, [pc, #80]	@ (800d7ac <xPortStartScheduler+0x13c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a13      	ldr	r2, [pc, #76]	@ (800d7ac <xPortStartScheduler+0x13c>)
 800d75e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d764:	f000 f8da 	bl	800d91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d768:	4b11      	ldr	r3, [pc, #68]	@ (800d7b0 <xPortStartScheduler+0x140>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d76e:	f000 f8f9 	bl	800d964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d772:	4b10      	ldr	r3, [pc, #64]	@ (800d7b4 <xPortStartScheduler+0x144>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a0f      	ldr	r2, [pc, #60]	@ (800d7b4 <xPortStartScheduler+0x144>)
 800d778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d77c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d77e:	f7ff ff63 	bl	800d648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d782:	f7ff f811 	bl	800c7a8 <vTaskSwitchContext>
	prvTaskExitError();
 800d786:	f7ff ff17 	bl	800d5b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	e000ed00 	.word	0xe000ed00
 800d798:	410fc271 	.word	0x410fc271
 800d79c:	410fc270 	.word	0x410fc270
 800d7a0:	e000e400 	.word	0xe000e400
 800d7a4:	2000e834 	.word	0x2000e834
 800d7a8:	2000e838 	.word	0x2000e838
 800d7ac:	e000ed20 	.word	0xe000ed20
 800d7b0:	20002394 	.word	0x20002394
 800d7b4:	e000ef34 	.word	0xe000ef34

0800d7b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	607b      	str	r3, [r7, #4]
}
 800d7d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7d2:	4b10      	ldr	r3, [pc, #64]	@ (800d814 <vPortEnterCritical+0x5c>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	4a0e      	ldr	r2, [pc, #56]	@ (800d814 <vPortEnterCritical+0x5c>)
 800d7da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d814 <vPortEnterCritical+0x5c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d110      	bne.n	800d806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d818 <vPortEnterCritical+0x60>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00b      	beq.n	800d806 <vPortEnterCritical+0x4e>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	603b      	str	r3, [r7, #0]
}
 800d800:	bf00      	nop
 800d802:	bf00      	nop
 800d804:	e7fd      	b.n	800d802 <vPortEnterCritical+0x4a>
	}
}
 800d806:	bf00      	nop
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	20002394 	.word	0x20002394
 800d818:	e000ed04 	.word	0xe000ed04

0800d81c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d822:	4b12      	ldr	r3, [pc, #72]	@ (800d86c <vPortExitCritical+0x50>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10b      	bne.n	800d842 <vPortExitCritical+0x26>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	607b      	str	r3, [r7, #4]
}
 800d83c:	bf00      	nop
 800d83e:	bf00      	nop
 800d840:	e7fd      	b.n	800d83e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d842:	4b0a      	ldr	r3, [pc, #40]	@ (800d86c <vPortExitCritical+0x50>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3b01      	subs	r3, #1
 800d848:	4a08      	ldr	r2, [pc, #32]	@ (800d86c <vPortExitCritical+0x50>)
 800d84a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d84c:	4b07      	ldr	r3, [pc, #28]	@ (800d86c <vPortExitCritical+0x50>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d105      	bne.n	800d860 <vPortExitCritical+0x44>
 800d854:	2300      	movs	r3, #0
 800d856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f383 8811 	msr	BASEPRI, r3
}
 800d85e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	20002394 	.word	0x20002394

0800d870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d870:	f3ef 8009 	mrs	r0, PSP
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	4b15      	ldr	r3, [pc, #84]	@ (800d8d0 <pxCurrentTCBConst>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	f01e 0f10 	tst.w	lr, #16
 800d880:	bf08      	it	eq
 800d882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88a:	6010      	str	r0, [r2, #0]
 800d88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d894:	f380 8811 	msr	BASEPRI, r0
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f7fe ff82 	bl	800c7a8 <vTaskSwitchContext>
 800d8a4:	f04f 0000 	mov.w	r0, #0
 800d8a8:	f380 8811 	msr	BASEPRI, r0
 800d8ac:	bc09      	pop	{r0, r3}
 800d8ae:	6819      	ldr	r1, [r3, #0]
 800d8b0:	6808      	ldr	r0, [r1, #0]
 800d8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b6:	f01e 0f10 	tst.w	lr, #16
 800d8ba:	bf08      	it	eq
 800d8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8c0:	f380 8809 	msr	PSP, r0
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	f3af 8000 	nop.w

0800d8d0 <pxCurrentTCBConst>:
 800d8d0:	2000e208 	.word	0x2000e208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop

0800d8d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	607b      	str	r3, [r7, #4]
}
 800d8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8f2:	f7fe fe9f 	bl	800c634 <xTaskIncrementTick>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d003      	beq.n	800d904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8fc:	4b06      	ldr	r3, [pc, #24]	@ (800d918 <xPortSysTickHandler+0x40>)
 800d8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	2300      	movs	r3, #0
 800d906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	f383 8811 	msr	BASEPRI, r3
}
 800d90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	e000ed04 	.word	0xe000ed04

0800d91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d920:	4b0b      	ldr	r3, [pc, #44]	@ (800d950 <vPortSetupTimerInterrupt+0x34>)
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d926:	4b0b      	ldr	r3, [pc, #44]	@ (800d954 <vPortSetupTimerInterrupt+0x38>)
 800d928:	2200      	movs	r2, #0
 800d92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d92c:	4b0a      	ldr	r3, [pc, #40]	@ (800d958 <vPortSetupTimerInterrupt+0x3c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a0a      	ldr	r2, [pc, #40]	@ (800d95c <vPortSetupTimerInterrupt+0x40>)
 800d932:	fba2 2303 	umull	r2, r3, r2, r3
 800d936:	099b      	lsrs	r3, r3, #6
 800d938:	4a09      	ldr	r2, [pc, #36]	@ (800d960 <vPortSetupTimerInterrupt+0x44>)
 800d93a:	3b01      	subs	r3, #1
 800d93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d93e:	4b04      	ldr	r3, [pc, #16]	@ (800d950 <vPortSetupTimerInterrupt+0x34>)
 800d940:	2207      	movs	r2, #7
 800d942:	601a      	str	r2, [r3, #0]
}
 800d944:	bf00      	nop
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	e000e010 	.word	0xe000e010
 800d954:	e000e018 	.word	0xe000e018
 800d958:	20002388 	.word	0x20002388
 800d95c:	10624dd3 	.word	0x10624dd3
 800d960:	e000e014 	.word	0xe000e014

0800d964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d974 <vPortEnableVFP+0x10>
 800d968:	6801      	ldr	r1, [r0, #0]
 800d96a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d96e:	6001      	str	r1, [r0, #0]
 800d970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d972:	bf00      	nop
 800d974:	e000ed88 	.word	0xe000ed88

0800d978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d97e:	f3ef 8305 	mrs	r3, IPSR
 800d982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b0f      	cmp	r3, #15
 800d988:	d915      	bls.n	800d9b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d98a:	4a18      	ldr	r2, [pc, #96]	@ (800d9ec <vPortValidateInterruptPriority+0x74>)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	4413      	add	r3, r2
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d994:	4b16      	ldr	r3, [pc, #88]	@ (800d9f0 <vPortValidateInterruptPriority+0x78>)
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	7afa      	ldrb	r2, [r7, #11]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d20b      	bcs.n	800d9b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	607b      	str	r3, [r7, #4]
}
 800d9b0:	bf00      	nop
 800d9b2:	bf00      	nop
 800d9b4:	e7fd      	b.n	800d9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d9f4 <vPortValidateInterruptPriority+0x7c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d9be:	4b0e      	ldr	r3, [pc, #56]	@ (800d9f8 <vPortValidateInterruptPriority+0x80>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d90b      	bls.n	800d9de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	603b      	str	r3, [r7, #0]
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	e7fd      	b.n	800d9da <vPortValidateInterruptPriority+0x62>
	}
 800d9de:	bf00      	nop
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	e000e3f0 	.word	0xe000e3f0
 800d9f0:	2000e834 	.word	0x2000e834
 800d9f4:	e000ed0c 	.word	0xe000ed0c
 800d9f8:	2000e838 	.word	0x2000e838

0800d9fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b08a      	sub	sp, #40	@ 0x28
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da08:	f7fe fd58 	bl	800c4bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da0c:	4b5c      	ldr	r3, [pc, #368]	@ (800db80 <pvPortMalloc+0x184>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da14:	f000 f924 	bl	800dc60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da18:	4b5a      	ldr	r3, [pc, #360]	@ (800db84 <pvPortMalloc+0x188>)
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4013      	ands	r3, r2
 800da20:	2b00      	cmp	r3, #0
 800da22:	f040 8095 	bne.w	800db50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d01e      	beq.n	800da6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800da2c:	2208      	movs	r2, #8
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4413      	add	r3, r2
 800da32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d015      	beq.n	800da6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f023 0307 	bic.w	r3, r3, #7
 800da44:	3308      	adds	r3, #8
 800da46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00b      	beq.n	800da6a <pvPortMalloc+0x6e>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	617b      	str	r3, [r7, #20]
}
 800da64:	bf00      	nop
 800da66:	bf00      	nop
 800da68:	e7fd      	b.n	800da66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d06f      	beq.n	800db50 <pvPortMalloc+0x154>
 800da70:	4b45      	ldr	r3, [pc, #276]	@ (800db88 <pvPortMalloc+0x18c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	429a      	cmp	r2, r3
 800da78:	d86a      	bhi.n	800db50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da7a:	4b44      	ldr	r3, [pc, #272]	@ (800db8c <pvPortMalloc+0x190>)
 800da7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da7e:	4b43      	ldr	r3, [pc, #268]	@ (800db8c <pvPortMalloc+0x190>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da84:	e004      	b.n	800da90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800da86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	429a      	cmp	r2, r3
 800da98:	d903      	bls.n	800daa2 <pvPortMalloc+0xa6>
 800da9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1f1      	bne.n	800da86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800daa2:	4b37      	ldr	r3, [pc, #220]	@ (800db80 <pvPortMalloc+0x184>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d051      	beq.n	800db50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2208      	movs	r2, #8
 800dab2:	4413      	add	r3, r2
 800dab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	1ad2      	subs	r2, r2, r3
 800dac6:	2308      	movs	r3, #8
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	429a      	cmp	r2, r3
 800dacc:	d920      	bls.n	800db10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4413      	add	r3, r2
 800dad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	f003 0307 	and.w	r3, r3, #7
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00b      	beq.n	800daf8 <pvPortMalloc+0xfc>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	613b      	str	r3, [r7, #16]
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	e7fd      	b.n	800daf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800daf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	1ad2      	subs	r2, r2, r3
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db0a:	69b8      	ldr	r0, [r7, #24]
 800db0c:	f000 f90a 	bl	800dd24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db10:	4b1d      	ldr	r3, [pc, #116]	@ (800db88 <pvPortMalloc+0x18c>)
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	4a1b      	ldr	r2, [pc, #108]	@ (800db88 <pvPortMalloc+0x18c>)
 800db1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db1e:	4b1a      	ldr	r3, [pc, #104]	@ (800db88 <pvPortMalloc+0x18c>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	4b1b      	ldr	r3, [pc, #108]	@ (800db90 <pvPortMalloc+0x194>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d203      	bcs.n	800db32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db2a:	4b17      	ldr	r3, [pc, #92]	@ (800db88 <pvPortMalloc+0x18c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a18      	ldr	r2, [pc, #96]	@ (800db90 <pvPortMalloc+0x194>)
 800db30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	4b13      	ldr	r3, [pc, #76]	@ (800db84 <pvPortMalloc+0x188>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	431a      	orrs	r2, r3
 800db3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db46:	4b13      	ldr	r3, [pc, #76]	@ (800db94 <pvPortMalloc+0x198>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	3301      	adds	r3, #1
 800db4c:	4a11      	ldr	r2, [pc, #68]	@ (800db94 <pvPortMalloc+0x198>)
 800db4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db50:	f7fe fcc2 	bl	800c4d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00b      	beq.n	800db76 <pvPortMalloc+0x17a>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	60fb      	str	r3, [r7, #12]
}
 800db70:	bf00      	nop
 800db72:	bf00      	nop
 800db74:	e7fd      	b.n	800db72 <pvPortMalloc+0x176>
	return pvReturn;
 800db76:	69fb      	ldr	r3, [r7, #28]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3728      	adds	r7, #40	@ 0x28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	20013664 	.word	0x20013664
 800db84:	20013678 	.word	0x20013678
 800db88:	20013668 	.word	0x20013668
 800db8c:	2001365c 	.word	0x2001365c
 800db90:	2001366c 	.word	0x2001366c
 800db94:	20013670 	.word	0x20013670

0800db98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d04f      	beq.n	800dc4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbaa:	2308      	movs	r3, #8
 800dbac:	425b      	negs	r3, r3
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4b25      	ldr	r3, [pc, #148]	@ (800dc54 <vPortFree+0xbc>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10b      	bne.n	800dbde <vPortFree+0x46>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	60fb      	str	r3, [r7, #12]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00b      	beq.n	800dbfe <vPortFree+0x66>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	60bb      	str	r3, [r7, #8]
}
 800dbf8:	bf00      	nop
 800dbfa:	bf00      	nop
 800dbfc:	e7fd      	b.n	800dbfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	4b14      	ldr	r3, [pc, #80]	@ (800dc54 <vPortFree+0xbc>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4013      	ands	r3, r2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d01e      	beq.n	800dc4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d11a      	bne.n	800dc4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	4b0e      	ldr	r3, [pc, #56]	@ (800dc54 <vPortFree+0xbc>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	43db      	mvns	r3, r3
 800dc1e:	401a      	ands	r2, r3
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc24:	f7fe fc4a 	bl	800c4bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc58 <vPortFree+0xc0>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4413      	add	r3, r2
 800dc32:	4a09      	ldr	r2, [pc, #36]	@ (800dc58 <vPortFree+0xc0>)
 800dc34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc36:	6938      	ldr	r0, [r7, #16]
 800dc38:	f000 f874 	bl	800dd24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc3c:	4b07      	ldr	r3, [pc, #28]	@ (800dc5c <vPortFree+0xc4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3301      	adds	r3, #1
 800dc42:	4a06      	ldr	r2, [pc, #24]	@ (800dc5c <vPortFree+0xc4>)
 800dc44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc46:	f7fe fc47 	bl	800c4d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc4a:	bf00      	nop
 800dc4c:	3718      	adds	r7, #24
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20013678 	.word	0x20013678
 800dc58:	20013668 	.word	0x20013668
 800dc5c:	20013674 	.word	0x20013674

0800dc60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc66:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800dc6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc6c:	4b27      	ldr	r3, [pc, #156]	@ (800dd0c <prvHeapInit+0xac>)
 800dc6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00c      	beq.n	800dc94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	3307      	adds	r3, #7
 800dc7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f023 0307 	bic.w	r3, r3, #7
 800dc86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	4a1f      	ldr	r2, [pc, #124]	@ (800dd0c <prvHeapInit+0xac>)
 800dc90:	4413      	add	r3, r2
 800dc92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc98:	4a1d      	ldr	r2, [pc, #116]	@ (800dd10 <prvHeapInit+0xb0>)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc9e:	4b1c      	ldr	r3, [pc, #112]	@ (800dd10 <prvHeapInit+0xb0>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	4413      	add	r3, r2
 800dcaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dcac:	2208      	movs	r2, #8
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	1a9b      	subs	r3, r3, r2
 800dcb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f023 0307 	bic.w	r3, r3, #7
 800dcba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4a15      	ldr	r2, [pc, #84]	@ (800dd14 <prvHeapInit+0xb4>)
 800dcc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcc2:	4b14      	ldr	r3, [pc, #80]	@ (800dd14 <prvHeapInit+0xb4>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dcca:	4b12      	ldr	r3, [pc, #72]	@ (800dd14 <prvHeapInit+0xb4>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	1ad2      	subs	r2, r2, r3
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dce0:	4b0c      	ldr	r3, [pc, #48]	@ (800dd14 <prvHeapInit+0xb4>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	4a0a      	ldr	r2, [pc, #40]	@ (800dd18 <prvHeapInit+0xb8>)
 800dcee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	4a09      	ldr	r2, [pc, #36]	@ (800dd1c <prvHeapInit+0xbc>)
 800dcf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcf8:	4b09      	ldr	r3, [pc, #36]	@ (800dd20 <prvHeapInit+0xc0>)
 800dcfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dcfe:	601a      	str	r2, [r3, #0]
}
 800dd00:	bf00      	nop
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	2000e83c 	.word	0x2000e83c
 800dd10:	2001365c 	.word	0x2001365c
 800dd14:	20013664 	.word	0x20013664
 800dd18:	2001366c 	.word	0x2001366c
 800dd1c:	20013668 	.word	0x20013668
 800dd20:	20013678 	.word	0x20013678

0800dd24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd2c:	4b28      	ldr	r3, [pc, #160]	@ (800ddd0 <prvInsertBlockIntoFreeList+0xac>)
 800dd2e:	60fb      	str	r3, [r7, #12]
 800dd30:	e002      	b.n	800dd38 <prvInsertBlockIntoFreeList+0x14>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d8f7      	bhi.n	800dd32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d108      	bne.n	800dd66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	441a      	add	r2, r3
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	441a      	add	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d118      	bne.n	800ddac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	4b15      	ldr	r3, [pc, #84]	@ (800ddd4 <prvInsertBlockIntoFreeList+0xb0>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d00d      	beq.n	800dda2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685a      	ldr	r2, [r3, #4]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	441a      	add	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	e008      	b.n	800ddb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dda2:	4b0c      	ldr	r3, [pc, #48]	@ (800ddd4 <prvInsertBlockIntoFreeList+0xb0>)
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	e003      	b.n	800ddb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d002      	beq.n	800ddc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddc2:	bf00      	nop
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	2001365c 	.word	0x2001365c
 800ddd4:	20013664 	.word	0x20013664

0800ddd8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ddd8:	4b04      	ldr	r3, [pc, #16]	@ (800ddec <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	b10a      	cbz	r2, 800dde2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ddde:	4803      	ldr	r0, [pc, #12]	@ (800ddec <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800dde0:	4770      	bx	lr
 800dde2:	4a03      	ldr	r2, [pc, #12]	@ (800ddf0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800dde4:	4801      	ldr	r0, [pc, #4]	@ (800ddec <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800dde6:	6812      	ldr	r2, [r2, #0]
 800dde8:	601a      	str	r2, [r3, #0]
 800ddea:	4770      	bx	lr
 800ddec:	200023a0 	.word	0x200023a0
 800ddf0:	20002488 	.word	0x20002488

0800ddf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ddf4:	4a02      	ldr	r2, [pc, #8]	@ (800de00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ddf6:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ddf8:	6812      	ldr	r2, [r2, #0]
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	20002488 	.word	0x20002488
 800de04:	200023a0 	.word	0x200023a0

0800de08 <get_serialized_size_geometry_msgs__msg__Twist>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	4604      	mov	r4, r0
 800de0c:	b148      	cbz	r0, 800de22 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800de0e:	460d      	mov	r5, r1
 800de10:	f000 f86e 	bl	800def0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800de14:	4606      	mov	r6, r0
 800de16:	1829      	adds	r1, r5, r0
 800de18:	f104 0018 	add.w	r0, r4, #24
 800de1c:	f000 f868 	bl	800def0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800de20:	4430      	add	r0, r6
 800de22:	bd70      	pop	{r4, r5, r6, pc}

0800de24 <_Twist__cdr_deserialize>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	460c      	mov	r4, r1
 800de28:	b189      	cbz	r1, 800de4e <_Twist__cdr_deserialize+0x2a>
 800de2a:	4605      	mov	r5, r0
 800de2c:	f000 f8ec 	bl	800e008 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800de30:	6843      	ldr	r3, [r0, #4]
 800de32:	4621      	mov	r1, r4
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	4628      	mov	r0, r5
 800de38:	4798      	blx	r3
 800de3a:	f000 f8e5 	bl	800e008 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800de3e:	6843      	ldr	r3, [r0, #4]
 800de40:	f104 0118 	add.w	r1, r4, #24
 800de44:	4628      	mov	r0, r5
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de4c:	4718      	bx	r3
 800de4e:	4608      	mov	r0, r1
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	bf00      	nop

0800de54 <_Twist__cdr_serialize>:
 800de54:	b510      	push	{r4, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	9101      	str	r1, [sp, #4]
 800de5a:	b190      	cbz	r0, 800de82 <_Twist__cdr_serialize+0x2e>
 800de5c:	4604      	mov	r4, r0
 800de5e:	f000 f8d3 	bl	800e008 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800de62:	6843      	ldr	r3, [r0, #4]
 800de64:	9901      	ldr	r1, [sp, #4]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	4620      	mov	r0, r4
 800de6a:	4798      	blx	r3
 800de6c:	f000 f8cc 	bl	800e008 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800de70:	6843      	ldr	r3, [r0, #4]
 800de72:	9901      	ldr	r1, [sp, #4]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	f104 0018 	add.w	r0, r4, #24
 800de7a:	b002      	add	sp, #8
 800de7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de80:	4718      	bx	r3
 800de82:	b002      	add	sp, #8
 800de84:	bd10      	pop	{r4, pc}
 800de86:	bf00      	nop

0800de88 <_Twist__get_serialized_size>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4604      	mov	r4, r0
 800de8c:	b148      	cbz	r0, 800dea2 <_Twist__get_serialized_size+0x1a>
 800de8e:	2100      	movs	r1, #0
 800de90:	f000 f82e 	bl	800def0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800de94:	4605      	mov	r5, r0
 800de96:	4601      	mov	r1, r0
 800de98:	f104 0018 	add.w	r0, r4, #24
 800de9c:	f000 f828 	bl	800def0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800dea0:	4428      	add	r0, r5
 800dea2:	bd38      	pop	{r3, r4, r5, pc}

0800dea4 <_Twist__max_serialized_size>:
 800dea4:	b510      	push	{r4, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	2301      	movs	r3, #1
 800deaa:	2100      	movs	r1, #0
 800deac:	f10d 0007 	add.w	r0, sp, #7
 800deb0:	f88d 3007 	strb.w	r3, [sp, #7]
 800deb4:	f000 f88c 	bl	800dfd0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800deb8:	4604      	mov	r4, r0
 800deba:	4601      	mov	r1, r0
 800debc:	f10d 0007 	add.w	r0, sp, #7
 800dec0:	f000 f886 	bl	800dfd0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800dec4:	4420      	add	r0, r4
 800dec6:	b002      	add	sp, #8
 800dec8:	bd10      	pop	{r4, pc}
 800deca:	bf00      	nop

0800decc <max_serialized_size_geometry_msgs__msg__Twist>:
 800decc:	2301      	movs	r3, #1
 800dece:	b570      	push	{r4, r5, r6, lr}
 800ded0:	7003      	strb	r3, [r0, #0]
 800ded2:	4605      	mov	r5, r0
 800ded4:	460e      	mov	r6, r1
 800ded6:	f000 f87b 	bl	800dfd0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800deda:	4604      	mov	r4, r0
 800dedc:	1831      	adds	r1, r6, r0
 800dede:	4628      	mov	r0, r5
 800dee0:	f000 f876 	bl	800dfd0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800dee4:	4420      	add	r0, r4
 800dee6:	bd70      	pop	{r4, r5, r6, pc}

0800dee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800dee8:	4800      	ldr	r0, [pc, #0]	@ (800deec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800deea:	4770      	bx	lr
 800deec:	200023b8 	.word	0x200023b8

0800def0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800def0:	b1b8      	cbz	r0, 800df22 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800def2:	b538      	push	{r3, r4, r5, lr}
 800def4:	460d      	mov	r5, r1
 800def6:	4628      	mov	r0, r5
 800def8:	2108      	movs	r1, #8
 800defa:	f001 fb9d 	bl	800f638 <ucdr_alignment>
 800defe:	f105 0308 	add.w	r3, r5, #8
 800df02:	181c      	adds	r4, r3, r0
 800df04:	2108      	movs	r1, #8
 800df06:	4620      	mov	r0, r4
 800df08:	f001 fb96 	bl	800f638 <ucdr_alignment>
 800df0c:	3008      	adds	r0, #8
 800df0e:	4404      	add	r4, r0
 800df10:	2108      	movs	r1, #8
 800df12:	4620      	mov	r0, r4
 800df14:	f001 fb90 	bl	800f638 <ucdr_alignment>
 800df18:	f1c5 0508 	rsb	r5, r5, #8
 800df1c:	4428      	add	r0, r5
 800df1e:	4420      	add	r0, r4
 800df20:	bd38      	pop	{r3, r4, r5, pc}
 800df22:	4770      	bx	lr

0800df24 <_Vector3__cdr_deserialize>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	460c      	mov	r4, r1
 800df28:	b171      	cbz	r1, 800df48 <_Vector3__cdr_deserialize+0x24>
 800df2a:	4605      	mov	r5, r0
 800df2c:	f001 f998 	bl	800f260 <ucdr_deserialize_double>
 800df30:	f104 0108 	add.w	r1, r4, #8
 800df34:	4628      	mov	r0, r5
 800df36:	f001 f993 	bl	800f260 <ucdr_deserialize_double>
 800df3a:	f104 0110 	add.w	r1, r4, #16
 800df3e:	4628      	mov	r0, r5
 800df40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df44:	f001 b98c 	b.w	800f260 <ucdr_deserialize_double>
 800df48:	4608      	mov	r0, r1
 800df4a:	bd38      	pop	{r3, r4, r5, pc}

0800df4c <_Vector3__cdr_serialize>:
 800df4c:	b198      	cbz	r0, 800df76 <_Vector3__cdr_serialize+0x2a>
 800df4e:	b538      	push	{r3, r4, r5, lr}
 800df50:	ed90 0b00 	vldr	d0, [r0]
 800df54:	460d      	mov	r5, r1
 800df56:	4604      	mov	r4, r0
 800df58:	4608      	mov	r0, r1
 800df5a:	f000 ffdf 	bl	800ef1c <ucdr_serialize_double>
 800df5e:	ed94 0b02 	vldr	d0, [r4, #8]
 800df62:	4628      	mov	r0, r5
 800df64:	f000 ffda 	bl	800ef1c <ucdr_serialize_double>
 800df68:	ed94 0b04 	vldr	d0, [r4, #16]
 800df6c:	4628      	mov	r0, r5
 800df6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df72:	f000 bfd3 	b.w	800ef1c <ucdr_serialize_double>
 800df76:	4770      	bx	lr

0800df78 <_Vector3__get_serialized_size>:
 800df78:	b198      	cbz	r0, 800dfa2 <_Vector3__get_serialized_size+0x2a>
 800df7a:	b510      	push	{r4, lr}
 800df7c:	2108      	movs	r1, #8
 800df7e:	2000      	movs	r0, #0
 800df80:	f001 fb5a 	bl	800f638 <ucdr_alignment>
 800df84:	f100 0408 	add.w	r4, r0, #8
 800df88:	2108      	movs	r1, #8
 800df8a:	4620      	mov	r0, r4
 800df8c:	f001 fb54 	bl	800f638 <ucdr_alignment>
 800df90:	3008      	adds	r0, #8
 800df92:	4404      	add	r4, r0
 800df94:	2108      	movs	r1, #8
 800df96:	4620      	mov	r0, r4
 800df98:	f001 fb4e 	bl	800f638 <ucdr_alignment>
 800df9c:	3008      	adds	r0, #8
 800df9e:	4420      	add	r0, r4
 800dfa0:	bd10      	pop	{r4, pc}
 800dfa2:	4770      	bx	lr

0800dfa4 <_Vector3__max_serialized_size>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	2108      	movs	r1, #8
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f001 fb45 	bl	800f638 <ucdr_alignment>
 800dfae:	f100 0508 	add.w	r5, r0, #8
 800dfb2:	2108      	movs	r1, #8
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	f001 fb3f 	bl	800f638 <ucdr_alignment>
 800dfba:	f100 0408 	add.w	r4, r0, #8
 800dfbe:	442c      	add	r4, r5
 800dfc0:	2108      	movs	r1, #8
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f001 fb38 	bl	800f638 <ucdr_alignment>
 800dfc8:	3008      	adds	r0, #8
 800dfca:	4420      	add	r0, r4
 800dfcc:	bd38      	pop	{r3, r4, r5, pc}
 800dfce:	bf00      	nop

0800dfd0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	460c      	mov	r4, r1
 800dfd6:	7003      	strb	r3, [r0, #0]
 800dfd8:	2108      	movs	r1, #8
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f001 fb2c 	bl	800f638 <ucdr_alignment>
 800dfe0:	f104 0508 	add.w	r5, r4, #8
 800dfe4:	1946      	adds	r6, r0, r5
 800dfe6:	2108      	movs	r1, #8
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f001 fb25 	bl	800f638 <ucdr_alignment>
 800dfee:	f100 0508 	add.w	r5, r0, #8
 800dff2:	4435      	add	r5, r6
 800dff4:	2108      	movs	r1, #8
 800dff6:	4628      	mov	r0, r5
 800dff8:	f001 fb1e 	bl	800f638 <ucdr_alignment>
 800dffc:	f1c4 0408 	rsb	r4, r4, #8
 800e000:	4420      	add	r0, r4
 800e002:	4428      	add	r0, r5
 800e004:	bd70      	pop	{r4, r5, r6, pc}
 800e006:	bf00      	nop

0800e008 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e008:	4800      	ldr	r0, [pc, #0]	@ (800e00c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800e00a:	4770      	bx	lr
 800e00c:	200023ec 	.word	0x200023ec

0800e010 <ucdr_serialize_bool>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	460d      	mov	r5, r1
 800e014:	2101      	movs	r1, #1
 800e016:	4604      	mov	r4, r0
 800e018:	f001 fac2 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e01c:	b148      	cbz	r0, 800e032 <ucdr_serialize_bool+0x22>
 800e01e:	68a3      	ldr	r3, [r4, #8]
 800e020:	701d      	strb	r5, [r3, #0]
 800e022:	68a2      	ldr	r2, [r4, #8]
 800e024:	6923      	ldr	r3, [r4, #16]
 800e026:	2101      	movs	r1, #1
 800e028:	440a      	add	r2, r1
 800e02a:	440b      	add	r3, r1
 800e02c:	60a2      	str	r2, [r4, #8]
 800e02e:	6123      	str	r3, [r4, #16]
 800e030:	7561      	strb	r1, [r4, #21]
 800e032:	7da0      	ldrb	r0, [r4, #22]
 800e034:	f080 0001 	eor.w	r0, r0, #1
 800e038:	bd38      	pop	{r3, r4, r5, pc}
 800e03a:	bf00      	nop

0800e03c <ucdr_deserialize_bool>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	460d      	mov	r5, r1
 800e040:	2101      	movs	r1, #1
 800e042:	4604      	mov	r4, r0
 800e044:	f001 faac 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e048:	b160      	cbz	r0, 800e064 <ucdr_deserialize_bool+0x28>
 800e04a:	68a2      	ldr	r2, [r4, #8]
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e052:	3900      	subs	r1, #0
 800e054:	bf18      	it	ne
 800e056:	2101      	movne	r1, #1
 800e058:	7029      	strb	r1, [r5, #0]
 800e05a:	3301      	adds	r3, #1
 800e05c:	2101      	movs	r1, #1
 800e05e:	60a2      	str	r2, [r4, #8]
 800e060:	6123      	str	r3, [r4, #16]
 800e062:	7561      	strb	r1, [r4, #21]
 800e064:	7da0      	ldrb	r0, [r4, #22]
 800e066:	f080 0001 	eor.w	r0, r0, #1
 800e06a:	bd38      	pop	{r3, r4, r5, pc}

0800e06c <ucdr_serialize_uint8_t>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	460d      	mov	r5, r1
 800e070:	2101      	movs	r1, #1
 800e072:	4604      	mov	r4, r0
 800e074:	f001 fa94 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e078:	b148      	cbz	r0, 800e08e <ucdr_serialize_uint8_t+0x22>
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	701d      	strb	r5, [r3, #0]
 800e07e:	68a2      	ldr	r2, [r4, #8]
 800e080:	6923      	ldr	r3, [r4, #16]
 800e082:	2101      	movs	r1, #1
 800e084:	440a      	add	r2, r1
 800e086:	440b      	add	r3, r1
 800e088:	60a2      	str	r2, [r4, #8]
 800e08a:	6123      	str	r3, [r4, #16]
 800e08c:	7561      	strb	r1, [r4, #21]
 800e08e:	7da0      	ldrb	r0, [r4, #22]
 800e090:	f080 0001 	eor.w	r0, r0, #1
 800e094:	bd38      	pop	{r3, r4, r5, pc}
 800e096:	bf00      	nop

0800e098 <ucdr_deserialize_uint8_t>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	460d      	mov	r5, r1
 800e09c:	2101      	movs	r1, #1
 800e09e:	4604      	mov	r4, r0
 800e0a0:	f001 fa7e 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e0a4:	b150      	cbz	r0, 800e0bc <ucdr_deserialize_uint8_t+0x24>
 800e0a6:	68a3      	ldr	r3, [r4, #8]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	702b      	strb	r3, [r5, #0]
 800e0ac:	68a2      	ldr	r2, [r4, #8]
 800e0ae:	6923      	ldr	r3, [r4, #16]
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	440a      	add	r2, r1
 800e0b4:	440b      	add	r3, r1
 800e0b6:	60a2      	str	r2, [r4, #8]
 800e0b8:	6123      	str	r3, [r4, #16]
 800e0ba:	7561      	strb	r1, [r4, #21]
 800e0bc:	7da0      	ldrb	r0, [r4, #22]
 800e0be:	f080 0001 	eor.w	r0, r0, #1
 800e0c2:	bd38      	pop	{r3, r4, r5, pc}

0800e0c4 <ucdr_serialize_uint16_t>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	b082      	sub	sp, #8
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	2102      	movs	r1, #2
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e0d4:	f001 fab8 	bl	800f648 <ucdr_buffer_alignment>
 800e0d8:	4601      	mov	r1, r0
 800e0da:	4620      	mov	r0, r4
 800e0dc:	7d67      	ldrb	r7, [r4, #21]
 800e0de:	f001 faf7 	bl	800f6d0 <ucdr_advance_buffer>
 800e0e2:	2102      	movs	r1, #2
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f001 fa4f 	bl	800f588 <ucdr_check_buffer_available_for>
 800e0ea:	bb78      	cbnz	r0, 800e14c <ucdr_serialize_uint16_t+0x88>
 800e0ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e0f0:	42ab      	cmp	r3, r5
 800e0f2:	d926      	bls.n	800e142 <ucdr_serialize_uint16_t+0x7e>
 800e0f4:	1b5e      	subs	r6, r3, r5
 800e0f6:	60a3      	str	r3, [r4, #8]
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	f1c6 0802 	rsb	r8, r6, #2
 800e0fe:	4433      	add	r3, r6
 800e100:	6123      	str	r3, [r4, #16]
 800e102:	4641      	mov	r1, r8
 800e104:	4620      	mov	r0, r4
 800e106:	f001 fa4b 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d03b      	beq.n	800e186 <ucdr_serialize_uint16_t+0xc2>
 800e10e:	7d23      	ldrb	r3, [r4, #20]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d04a      	beq.n	800e1aa <ucdr_serialize_uint16_t+0xe6>
 800e114:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e118:	702b      	strb	r3, [r5, #0]
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	d040      	beq.n	800e1a0 <ucdr_serialize_uint16_t+0xdc>
 800e11e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e122:	706b      	strb	r3, [r5, #1]
 800e124:	6923      	ldr	r3, [r4, #16]
 800e126:	68a2      	ldr	r2, [r4, #8]
 800e128:	7da0      	ldrb	r0, [r4, #22]
 800e12a:	3302      	adds	r3, #2
 800e12c:	1b9e      	subs	r6, r3, r6
 800e12e:	4442      	add	r2, r8
 800e130:	2302      	movs	r3, #2
 800e132:	f080 0001 	eor.w	r0, r0, #1
 800e136:	60a2      	str	r2, [r4, #8]
 800e138:	6126      	str	r6, [r4, #16]
 800e13a:	7563      	strb	r3, [r4, #21]
 800e13c:	b002      	add	sp, #8
 800e13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e142:	2102      	movs	r1, #2
 800e144:	4620      	mov	r0, r4
 800e146:	f001 fa2b 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e14a:	b190      	cbz	r0, 800e172 <ucdr_serialize_uint16_t+0xae>
 800e14c:	7d23      	ldrb	r3, [r4, #20]
 800e14e:	2b01      	cmp	r3, #1
 800e150:	68a3      	ldr	r3, [r4, #8]
 800e152:	d014      	beq.n	800e17e <ucdr_serialize_uint16_t+0xba>
 800e154:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e158:	701a      	strb	r2, [r3, #0]
 800e15a:	68a3      	ldr	r3, [r4, #8]
 800e15c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e160:	705a      	strb	r2, [r3, #1]
 800e162:	68a2      	ldr	r2, [r4, #8]
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	3202      	adds	r2, #2
 800e168:	3302      	adds	r3, #2
 800e16a:	2102      	movs	r1, #2
 800e16c:	60a2      	str	r2, [r4, #8]
 800e16e:	6123      	str	r3, [r4, #16]
 800e170:	7561      	strb	r1, [r4, #21]
 800e172:	7da0      	ldrb	r0, [r4, #22]
 800e174:	f080 0001 	eor.w	r0, r0, #1
 800e178:	b002      	add	sp, #8
 800e17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e182:	801a      	strh	r2, [r3, #0]
 800e184:	e7ed      	b.n	800e162 <ucdr_serialize_uint16_t+0x9e>
 800e186:	68a2      	ldr	r2, [r4, #8]
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	7da0      	ldrb	r0, [r4, #22]
 800e18c:	7567      	strb	r7, [r4, #21]
 800e18e:	1b92      	subs	r2, r2, r6
 800e190:	1b9b      	subs	r3, r3, r6
 800e192:	f080 0001 	eor.w	r0, r0, #1
 800e196:	60a2      	str	r2, [r4, #8]
 800e198:	6123      	str	r3, [r4, #16]
 800e19a:	b002      	add	sp, #8
 800e19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a0:	68a3      	ldr	r3, [r4, #8]
 800e1a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e1a6:	701a      	strb	r2, [r3, #0]
 800e1a8:	e7bc      	b.n	800e124 <ucdr_serialize_uint16_t+0x60>
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f10d 0506 	add.w	r5, sp, #6
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	4632      	mov	r2, r6
 800e1b4:	f00f fa59 	bl	801d66a <memcpy>
 800e1b8:	68a0      	ldr	r0, [r4, #8]
 800e1ba:	4642      	mov	r2, r8
 800e1bc:	19a9      	adds	r1, r5, r6
 800e1be:	f00f fa54 	bl	801d66a <memcpy>
 800e1c2:	e7af      	b.n	800e124 <ucdr_serialize_uint16_t+0x60>

0800e1c4 <ucdr_serialize_endian_uint16_t>:
 800e1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	460d      	mov	r5, r1
 800e1cc:	2102      	movs	r1, #2
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e1d4:	f001 fa38 	bl	800f648 <ucdr_buffer_alignment>
 800e1d8:	4601      	mov	r1, r0
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e1e0:	f001 fa76 	bl	800f6d0 <ucdr_advance_buffer>
 800e1e4:	2102      	movs	r1, #2
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f001 f9ce 	bl	800f588 <ucdr_check_buffer_available_for>
 800e1ec:	bb70      	cbnz	r0, 800e24c <ucdr_serialize_endian_uint16_t+0x88>
 800e1ee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e1f2:	42be      	cmp	r6, r7
 800e1f4:	d925      	bls.n	800e242 <ucdr_serialize_endian_uint16_t+0x7e>
 800e1f6:	6923      	ldr	r3, [r4, #16]
 800e1f8:	60a6      	str	r6, [r4, #8]
 800e1fa:	1bf6      	subs	r6, r6, r7
 800e1fc:	4433      	add	r3, r6
 800e1fe:	f1c6 0902 	rsb	r9, r6, #2
 800e202:	6123      	str	r3, [r4, #16]
 800e204:	4649      	mov	r1, r9
 800e206:	4620      	mov	r0, r4
 800e208:	f001 f9ca 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d039      	beq.n	800e284 <ucdr_serialize_endian_uint16_t+0xc0>
 800e210:	2d01      	cmp	r5, #1
 800e212:	d04a      	beq.n	800e2aa <ucdr_serialize_endian_uint16_t+0xe6>
 800e214:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e218:	703b      	strb	r3, [r7, #0]
 800e21a:	2e00      	cmp	r6, #0
 800e21c:	d040      	beq.n	800e2a0 <ucdr_serialize_endian_uint16_t+0xdc>
 800e21e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e222:	707b      	strb	r3, [r7, #1]
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	68a2      	ldr	r2, [r4, #8]
 800e228:	7da0      	ldrb	r0, [r4, #22]
 800e22a:	3302      	adds	r3, #2
 800e22c:	444a      	add	r2, r9
 800e22e:	1b9b      	subs	r3, r3, r6
 800e230:	2102      	movs	r1, #2
 800e232:	f080 0001 	eor.w	r0, r0, #1
 800e236:	60a2      	str	r2, [r4, #8]
 800e238:	6123      	str	r3, [r4, #16]
 800e23a:	7561      	strb	r1, [r4, #21]
 800e23c:	b003      	add	sp, #12
 800e23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e242:	2102      	movs	r1, #2
 800e244:	4620      	mov	r0, r4
 800e246:	f001 f9ab 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e24a:	b188      	cbz	r0, 800e270 <ucdr_serialize_endian_uint16_t+0xac>
 800e24c:	2d01      	cmp	r5, #1
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	d014      	beq.n	800e27c <ucdr_serialize_endian_uint16_t+0xb8>
 800e252:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e256:	701a      	strb	r2, [r3, #0]
 800e258:	68a3      	ldr	r3, [r4, #8]
 800e25a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e25e:	705a      	strb	r2, [r3, #1]
 800e260:	68a2      	ldr	r2, [r4, #8]
 800e262:	6923      	ldr	r3, [r4, #16]
 800e264:	3202      	adds	r2, #2
 800e266:	3302      	adds	r3, #2
 800e268:	2102      	movs	r1, #2
 800e26a:	60a2      	str	r2, [r4, #8]
 800e26c:	6123      	str	r3, [r4, #16]
 800e26e:	7561      	strb	r1, [r4, #21]
 800e270:	7da0      	ldrb	r0, [r4, #22]
 800e272:	f080 0001 	eor.w	r0, r0, #1
 800e276:	b003      	add	sp, #12
 800e278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e27c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e280:	801a      	strh	r2, [r3, #0]
 800e282:	e7ed      	b.n	800e260 <ucdr_serialize_endian_uint16_t+0x9c>
 800e284:	68a2      	ldr	r2, [r4, #8]
 800e286:	6923      	ldr	r3, [r4, #16]
 800e288:	7da0      	ldrb	r0, [r4, #22]
 800e28a:	f884 8015 	strb.w	r8, [r4, #21]
 800e28e:	1b92      	subs	r2, r2, r6
 800e290:	1b9b      	subs	r3, r3, r6
 800e292:	f080 0001 	eor.w	r0, r0, #1
 800e296:	60a2      	str	r2, [r4, #8]
 800e298:	6123      	str	r3, [r4, #16]
 800e29a:	b003      	add	sp, #12
 800e29c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a0:	68a3      	ldr	r3, [r4, #8]
 800e2a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2a6:	701a      	strb	r2, [r3, #0]
 800e2a8:	e7bc      	b.n	800e224 <ucdr_serialize_endian_uint16_t+0x60>
 800e2aa:	f10d 0506 	add.w	r5, sp, #6
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	f00f f9d9 	bl	801d66a <memcpy>
 800e2b8:	68a0      	ldr	r0, [r4, #8]
 800e2ba:	464a      	mov	r2, r9
 800e2bc:	19a9      	adds	r1, r5, r6
 800e2be:	f00f f9d4 	bl	801d66a <memcpy>
 800e2c2:	e7af      	b.n	800e224 <ucdr_serialize_endian_uint16_t+0x60>

0800e2c4 <ucdr_deserialize_uint16_t>:
 800e2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	2102      	movs	r1, #2
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	f001 f9bb 	bl	800f648 <ucdr_buffer_alignment>
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e2da:	f001 f9f9 	bl	800f6d0 <ucdr_advance_buffer>
 800e2de:	2102      	movs	r1, #2
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f001 f951 	bl	800f588 <ucdr_check_buffer_available_for>
 800e2e6:	bb60      	cbnz	r0, 800e342 <ucdr_deserialize_uint16_t+0x7e>
 800e2e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e2ec:	42be      	cmp	r6, r7
 800e2ee:	d923      	bls.n	800e338 <ucdr_deserialize_uint16_t+0x74>
 800e2f0:	6923      	ldr	r3, [r4, #16]
 800e2f2:	60a6      	str	r6, [r4, #8]
 800e2f4:	1bf6      	subs	r6, r6, r7
 800e2f6:	4433      	add	r3, r6
 800e2f8:	f1c6 0902 	rsb	r9, r6, #2
 800e2fc:	6123      	str	r3, [r4, #16]
 800e2fe:	4649      	mov	r1, r9
 800e300:	4620      	mov	r0, r4
 800e302:	f001 f94d 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e306:	2800      	cmp	r0, #0
 800e308:	d034      	beq.n	800e374 <ucdr_deserialize_uint16_t+0xb0>
 800e30a:	7d23      	ldrb	r3, [r4, #20]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d042      	beq.n	800e396 <ucdr_deserialize_uint16_t+0xd2>
 800e310:	787b      	ldrb	r3, [r7, #1]
 800e312:	702b      	strb	r3, [r5, #0]
 800e314:	2e00      	cmp	r6, #0
 800e316:	d03a      	beq.n	800e38e <ucdr_deserialize_uint16_t+0xca>
 800e318:	783b      	ldrb	r3, [r7, #0]
 800e31a:	706b      	strb	r3, [r5, #1]
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	68a2      	ldr	r2, [r4, #8]
 800e320:	7da0      	ldrb	r0, [r4, #22]
 800e322:	2102      	movs	r1, #2
 800e324:	3302      	adds	r3, #2
 800e326:	444a      	add	r2, r9
 800e328:	1b9b      	subs	r3, r3, r6
 800e32a:	7561      	strb	r1, [r4, #21]
 800e32c:	60a2      	str	r2, [r4, #8]
 800e32e:	6123      	str	r3, [r4, #16]
 800e330:	f080 0001 	eor.w	r0, r0, #1
 800e334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e338:	2102      	movs	r1, #2
 800e33a:	4620      	mov	r0, r4
 800e33c:	f001 f930 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e340:	b180      	cbz	r0, 800e364 <ucdr_deserialize_uint16_t+0xa0>
 800e342:	7d23      	ldrb	r3, [r4, #20]
 800e344:	2b01      	cmp	r3, #1
 800e346:	68a3      	ldr	r3, [r4, #8]
 800e348:	d011      	beq.n	800e36e <ucdr_deserialize_uint16_t+0xaa>
 800e34a:	785b      	ldrb	r3, [r3, #1]
 800e34c:	702b      	strb	r3, [r5, #0]
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	706b      	strb	r3, [r5, #1]
 800e354:	68a2      	ldr	r2, [r4, #8]
 800e356:	6923      	ldr	r3, [r4, #16]
 800e358:	3202      	adds	r2, #2
 800e35a:	3302      	adds	r3, #2
 800e35c:	2102      	movs	r1, #2
 800e35e:	60a2      	str	r2, [r4, #8]
 800e360:	6123      	str	r3, [r4, #16]
 800e362:	7561      	strb	r1, [r4, #21]
 800e364:	7da0      	ldrb	r0, [r4, #22]
 800e366:	f080 0001 	eor.w	r0, r0, #1
 800e36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e36e:	881b      	ldrh	r3, [r3, #0]
 800e370:	802b      	strh	r3, [r5, #0]
 800e372:	e7ef      	b.n	800e354 <ucdr_deserialize_uint16_t+0x90>
 800e374:	68a2      	ldr	r2, [r4, #8]
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	7da0      	ldrb	r0, [r4, #22]
 800e37a:	f884 8015 	strb.w	r8, [r4, #21]
 800e37e:	1b92      	subs	r2, r2, r6
 800e380:	1b9b      	subs	r3, r3, r6
 800e382:	60a2      	str	r2, [r4, #8]
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	f080 0001 	eor.w	r0, r0, #1
 800e38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	706b      	strb	r3, [r5, #1]
 800e394:	e7c2      	b.n	800e31c <ucdr_deserialize_uint16_t+0x58>
 800e396:	4639      	mov	r1, r7
 800e398:	4632      	mov	r2, r6
 800e39a:	4628      	mov	r0, r5
 800e39c:	f00f f965 	bl	801d66a <memcpy>
 800e3a0:	68a1      	ldr	r1, [r4, #8]
 800e3a2:	464a      	mov	r2, r9
 800e3a4:	19a8      	adds	r0, r5, r6
 800e3a6:	f00f f960 	bl	801d66a <memcpy>
 800e3aa:	e7b7      	b.n	800e31c <ucdr_deserialize_uint16_t+0x58>

0800e3ac <ucdr_deserialize_endian_uint16_t>:
 800e3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b0:	460e      	mov	r6, r1
 800e3b2:	2102      	movs	r1, #2
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	4615      	mov	r5, r2
 800e3b8:	f001 f946 	bl	800f648 <ucdr_buffer_alignment>
 800e3bc:	4601      	mov	r1, r0
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e3c4:	f001 f984 	bl	800f6d0 <ucdr_advance_buffer>
 800e3c8:	2102      	movs	r1, #2
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f001 f8dc 	bl	800f588 <ucdr_check_buffer_available_for>
 800e3d0:	bb70      	cbnz	r0, 800e430 <ucdr_deserialize_endian_uint16_t+0x84>
 800e3d2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800e3d6:	4547      	cmp	r7, r8
 800e3d8:	d925      	bls.n	800e426 <ucdr_deserialize_endian_uint16_t+0x7a>
 800e3da:	6923      	ldr	r3, [r4, #16]
 800e3dc:	60a7      	str	r7, [r4, #8]
 800e3de:	eba7 0708 	sub.w	r7, r7, r8
 800e3e2:	443b      	add	r3, r7
 800e3e4:	f1c7 0a02 	rsb	sl, r7, #2
 800e3e8:	6123      	str	r3, [r4, #16]
 800e3ea:	4651      	mov	r1, sl
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f001 f8d7 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d034      	beq.n	800e460 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e3f6:	2e01      	cmp	r6, #1
 800e3f8:	d043      	beq.n	800e482 <ucdr_deserialize_endian_uint16_t+0xd6>
 800e3fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e3fe:	702b      	strb	r3, [r5, #0]
 800e400:	2f00      	cmp	r7, #0
 800e402:	d03a      	beq.n	800e47a <ucdr_deserialize_endian_uint16_t+0xce>
 800e404:	f898 3000 	ldrb.w	r3, [r8]
 800e408:	706b      	strb	r3, [r5, #1]
 800e40a:	6923      	ldr	r3, [r4, #16]
 800e40c:	68a2      	ldr	r2, [r4, #8]
 800e40e:	7da0      	ldrb	r0, [r4, #22]
 800e410:	2102      	movs	r1, #2
 800e412:	3302      	adds	r3, #2
 800e414:	4452      	add	r2, sl
 800e416:	1bdb      	subs	r3, r3, r7
 800e418:	7561      	strb	r1, [r4, #21]
 800e41a:	60a2      	str	r2, [r4, #8]
 800e41c:	6123      	str	r3, [r4, #16]
 800e41e:	f080 0001 	eor.w	r0, r0, #1
 800e422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e426:	2102      	movs	r1, #2
 800e428:	4620      	mov	r0, r4
 800e42a:	f001 f8b9 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e42e:	b178      	cbz	r0, 800e450 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e430:	2e01      	cmp	r6, #1
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	d011      	beq.n	800e45a <ucdr_deserialize_endian_uint16_t+0xae>
 800e436:	785b      	ldrb	r3, [r3, #1]
 800e438:	702b      	strb	r3, [r5, #0]
 800e43a:	68a3      	ldr	r3, [r4, #8]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	706b      	strb	r3, [r5, #1]
 800e440:	68a2      	ldr	r2, [r4, #8]
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	3202      	adds	r2, #2
 800e446:	3302      	adds	r3, #2
 800e448:	2102      	movs	r1, #2
 800e44a:	60a2      	str	r2, [r4, #8]
 800e44c:	6123      	str	r3, [r4, #16]
 800e44e:	7561      	strb	r1, [r4, #21]
 800e450:	7da0      	ldrb	r0, [r4, #22]
 800e452:	f080 0001 	eor.w	r0, r0, #1
 800e456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	802b      	strh	r3, [r5, #0]
 800e45e:	e7ef      	b.n	800e440 <ucdr_deserialize_endian_uint16_t+0x94>
 800e460:	68a2      	ldr	r2, [r4, #8]
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	7da0      	ldrb	r0, [r4, #22]
 800e466:	f884 9015 	strb.w	r9, [r4, #21]
 800e46a:	1bd2      	subs	r2, r2, r7
 800e46c:	1bdb      	subs	r3, r3, r7
 800e46e:	60a2      	str	r2, [r4, #8]
 800e470:	6123      	str	r3, [r4, #16]
 800e472:	f080 0001 	eor.w	r0, r0, #1
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	68a3      	ldr	r3, [r4, #8]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	706b      	strb	r3, [r5, #1]
 800e480:	e7c3      	b.n	800e40a <ucdr_deserialize_endian_uint16_t+0x5e>
 800e482:	4641      	mov	r1, r8
 800e484:	463a      	mov	r2, r7
 800e486:	4628      	mov	r0, r5
 800e488:	f00f f8ef 	bl	801d66a <memcpy>
 800e48c:	68a1      	ldr	r1, [r4, #8]
 800e48e:	4652      	mov	r2, sl
 800e490:	19e8      	adds	r0, r5, r7
 800e492:	f00f f8ea 	bl	801d66a <memcpy>
 800e496:	e7b8      	b.n	800e40a <ucdr_deserialize_endian_uint16_t+0x5e>

0800e498 <ucdr_serialize_uint32_t>:
 800e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	4604      	mov	r4, r0
 800e4a0:	9101      	str	r1, [sp, #4]
 800e4a2:	2104      	movs	r1, #4
 800e4a4:	f001 f8d0 	bl	800f648 <ucdr_buffer_alignment>
 800e4a8:	4601      	mov	r1, r0
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	7d67      	ldrb	r7, [r4, #21]
 800e4ae:	f001 f90f 	bl	800f6d0 <ucdr_advance_buffer>
 800e4b2:	2104      	movs	r1, #4
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f001 f867 	bl	800f588 <ucdr_check_buffer_available_for>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d139      	bne.n	800e532 <ucdr_serialize_uint32_t+0x9a>
 800e4be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e4c2:	42ab      	cmp	r3, r5
 800e4c4:	d930      	bls.n	800e528 <ucdr_serialize_uint32_t+0x90>
 800e4c6:	1b5e      	subs	r6, r3, r5
 800e4c8:	60a3      	str	r3, [r4, #8]
 800e4ca:	6923      	ldr	r3, [r4, #16]
 800e4cc:	f1c6 0804 	rsb	r8, r6, #4
 800e4d0:	4433      	add	r3, r6
 800e4d2:	6123      	str	r3, [r4, #16]
 800e4d4:	4641      	mov	r1, r8
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f001 f862 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d04c      	beq.n	800e57a <ucdr_serialize_uint32_t+0xe2>
 800e4e0:	7d23      	ldrb	r3, [r4, #20]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d063      	beq.n	800e5ae <ucdr_serialize_uint32_t+0x116>
 800e4e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4ea:	702b      	strb	r3, [r5, #0]
 800e4ec:	2e00      	cmp	r6, #0
 800e4ee:	d051      	beq.n	800e594 <ucdr_serialize_uint32_t+0xfc>
 800e4f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4f4:	706b      	strb	r3, [r5, #1]
 800e4f6:	2e01      	cmp	r6, #1
 800e4f8:	d050      	beq.n	800e59c <ucdr_serialize_uint32_t+0x104>
 800e4fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4fe:	70ab      	strb	r3, [r5, #2]
 800e500:	2e02      	cmp	r6, #2
 800e502:	d04f      	beq.n	800e5a4 <ucdr_serialize_uint32_t+0x10c>
 800e504:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e508:	70eb      	strb	r3, [r5, #3]
 800e50a:	6923      	ldr	r3, [r4, #16]
 800e50c:	68a2      	ldr	r2, [r4, #8]
 800e50e:	7da0      	ldrb	r0, [r4, #22]
 800e510:	3304      	adds	r3, #4
 800e512:	1b9e      	subs	r6, r3, r6
 800e514:	4442      	add	r2, r8
 800e516:	2304      	movs	r3, #4
 800e518:	f080 0001 	eor.w	r0, r0, #1
 800e51c:	60a2      	str	r2, [r4, #8]
 800e51e:	6126      	str	r6, [r4, #16]
 800e520:	7563      	strb	r3, [r4, #21]
 800e522:	b002      	add	sp, #8
 800e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e528:	2104      	movs	r1, #4
 800e52a:	4620      	mov	r0, r4
 800e52c:	f001 f838 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e530:	b1d0      	cbz	r0, 800e568 <ucdr_serialize_uint32_t+0xd0>
 800e532:	7d23      	ldrb	r3, [r4, #20]
 800e534:	2b01      	cmp	r3, #1
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	d01c      	beq.n	800e574 <ucdr_serialize_uint32_t+0xdc>
 800e53a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e546:	705a      	strb	r2, [r3, #1]
 800e548:	68a3      	ldr	r3, [r4, #8]
 800e54a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e54e:	709a      	strb	r2, [r3, #2]
 800e550:	68a3      	ldr	r3, [r4, #8]
 800e552:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e556:	70da      	strb	r2, [r3, #3]
 800e558:	68a2      	ldr	r2, [r4, #8]
 800e55a:	6923      	ldr	r3, [r4, #16]
 800e55c:	3204      	adds	r2, #4
 800e55e:	3304      	adds	r3, #4
 800e560:	2104      	movs	r1, #4
 800e562:	60a2      	str	r2, [r4, #8]
 800e564:	6123      	str	r3, [r4, #16]
 800e566:	7561      	strb	r1, [r4, #21]
 800e568:	7da0      	ldrb	r0, [r4, #22]
 800e56a:	f080 0001 	eor.w	r0, r0, #1
 800e56e:	b002      	add	sp, #8
 800e570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e574:	9a01      	ldr	r2, [sp, #4]
 800e576:	601a      	str	r2, [r3, #0]
 800e578:	e7ee      	b.n	800e558 <ucdr_serialize_uint32_t+0xc0>
 800e57a:	68a2      	ldr	r2, [r4, #8]
 800e57c:	6923      	ldr	r3, [r4, #16]
 800e57e:	7da0      	ldrb	r0, [r4, #22]
 800e580:	7567      	strb	r7, [r4, #21]
 800e582:	1b92      	subs	r2, r2, r6
 800e584:	1b9b      	subs	r3, r3, r6
 800e586:	f080 0001 	eor.w	r0, r0, #1
 800e58a:	60a2      	str	r2, [r4, #8]
 800e58c:	6123      	str	r3, [r4, #16]
 800e58e:	b002      	add	sp, #8
 800e590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e594:	68a3      	ldr	r3, [r4, #8]
 800e596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e59a:	701a      	strb	r2, [r3, #0]
 800e59c:	68a3      	ldr	r3, [r4, #8]
 800e59e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5a2:	701a      	strb	r2, [r3, #0]
 800e5a4:	68a3      	ldr	r3, [r4, #8]
 800e5a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5aa:	701a      	strb	r2, [r3, #0]
 800e5ac:	e7ad      	b.n	800e50a <ucdr_serialize_uint32_t+0x72>
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	ad01      	add	r5, sp, #4
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	f00f f858 	bl	801d66a <memcpy>
 800e5ba:	68a0      	ldr	r0, [r4, #8]
 800e5bc:	4642      	mov	r2, r8
 800e5be:	19a9      	adds	r1, r5, r6
 800e5c0:	f00f f853 	bl	801d66a <memcpy>
 800e5c4:	e7a1      	b.n	800e50a <ucdr_serialize_uint32_t+0x72>
 800e5c6:	bf00      	nop

0800e5c8 <ucdr_serialize_endian_uint32_t>:
 800e5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	460d      	mov	r5, r1
 800e5d0:	2104      	movs	r1, #4
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	9201      	str	r2, [sp, #4]
 800e5d6:	f001 f837 	bl	800f648 <ucdr_buffer_alignment>
 800e5da:	4601      	mov	r1, r0
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e5e2:	f001 f875 	bl	800f6d0 <ucdr_advance_buffer>
 800e5e6:	2104      	movs	r1, #4
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f000 ffcd 	bl	800f588 <ucdr_check_buffer_available_for>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d138      	bne.n	800e664 <ucdr_serialize_endian_uint32_t+0x9c>
 800e5f2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e5f6:	42b7      	cmp	r7, r6
 800e5f8:	d92f      	bls.n	800e65a <ucdr_serialize_endian_uint32_t+0x92>
 800e5fa:	6923      	ldr	r3, [r4, #16]
 800e5fc:	60a7      	str	r7, [r4, #8]
 800e5fe:	1bbf      	subs	r7, r7, r6
 800e600:	443b      	add	r3, r7
 800e602:	f1c7 0904 	rsb	r9, r7, #4
 800e606:	6123      	str	r3, [r4, #16]
 800e608:	4649      	mov	r1, r9
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 ffc8 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e610:	2800      	cmp	r0, #0
 800e612:	d04a      	beq.n	800e6aa <ucdr_serialize_endian_uint32_t+0xe2>
 800e614:	2d01      	cmp	r5, #1
 800e616:	d063      	beq.n	800e6e0 <ucdr_serialize_endian_uint32_t+0x118>
 800e618:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e61c:	7033      	strb	r3, [r6, #0]
 800e61e:	2f00      	cmp	r7, #0
 800e620:	d051      	beq.n	800e6c6 <ucdr_serialize_endian_uint32_t+0xfe>
 800e622:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e626:	7073      	strb	r3, [r6, #1]
 800e628:	2f01      	cmp	r7, #1
 800e62a:	d050      	beq.n	800e6ce <ucdr_serialize_endian_uint32_t+0x106>
 800e62c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e630:	70b3      	strb	r3, [r6, #2]
 800e632:	2f02      	cmp	r7, #2
 800e634:	d04f      	beq.n	800e6d6 <ucdr_serialize_endian_uint32_t+0x10e>
 800e636:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e63a:	70f3      	strb	r3, [r6, #3]
 800e63c:	6923      	ldr	r3, [r4, #16]
 800e63e:	68a2      	ldr	r2, [r4, #8]
 800e640:	7da0      	ldrb	r0, [r4, #22]
 800e642:	3304      	adds	r3, #4
 800e644:	444a      	add	r2, r9
 800e646:	1bdb      	subs	r3, r3, r7
 800e648:	2104      	movs	r1, #4
 800e64a:	f080 0001 	eor.w	r0, r0, #1
 800e64e:	60a2      	str	r2, [r4, #8]
 800e650:	6123      	str	r3, [r4, #16]
 800e652:	7561      	strb	r1, [r4, #21]
 800e654:	b003      	add	sp, #12
 800e656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e65a:	2104      	movs	r1, #4
 800e65c:	4620      	mov	r0, r4
 800e65e:	f000 ff9f 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e662:	b1c8      	cbz	r0, 800e698 <ucdr_serialize_endian_uint32_t+0xd0>
 800e664:	2d01      	cmp	r5, #1
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	d01c      	beq.n	800e6a4 <ucdr_serialize_endian_uint32_t+0xdc>
 800e66a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e66e:	701a      	strb	r2, [r3, #0]
 800e670:	68a3      	ldr	r3, [r4, #8]
 800e672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e676:	705a      	strb	r2, [r3, #1]
 800e678:	68a3      	ldr	r3, [r4, #8]
 800e67a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e67e:	709a      	strb	r2, [r3, #2]
 800e680:	68a3      	ldr	r3, [r4, #8]
 800e682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e686:	70da      	strb	r2, [r3, #3]
 800e688:	68a2      	ldr	r2, [r4, #8]
 800e68a:	6923      	ldr	r3, [r4, #16]
 800e68c:	3204      	adds	r2, #4
 800e68e:	3304      	adds	r3, #4
 800e690:	2104      	movs	r1, #4
 800e692:	60a2      	str	r2, [r4, #8]
 800e694:	6123      	str	r3, [r4, #16]
 800e696:	7561      	strb	r1, [r4, #21]
 800e698:	7da0      	ldrb	r0, [r4, #22]
 800e69a:	f080 0001 	eor.w	r0, r0, #1
 800e69e:	b003      	add	sp, #12
 800e6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a4:	9a01      	ldr	r2, [sp, #4]
 800e6a6:	601a      	str	r2, [r3, #0]
 800e6a8:	e7ee      	b.n	800e688 <ucdr_serialize_endian_uint32_t+0xc0>
 800e6aa:	68a2      	ldr	r2, [r4, #8]
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	7da0      	ldrb	r0, [r4, #22]
 800e6b0:	f884 8015 	strb.w	r8, [r4, #21]
 800e6b4:	1bd2      	subs	r2, r2, r7
 800e6b6:	1bdb      	subs	r3, r3, r7
 800e6b8:	f080 0001 	eor.w	r0, r0, #1
 800e6bc:	60a2      	str	r2, [r4, #8]
 800e6be:	6123      	str	r3, [r4, #16]
 800e6c0:	b003      	add	sp, #12
 800e6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6c6:	68a3      	ldr	r3, [r4, #8]
 800e6c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6cc:	701a      	strb	r2, [r3, #0]
 800e6ce:	68a3      	ldr	r3, [r4, #8]
 800e6d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e6d4:	701a      	strb	r2, [r3, #0]
 800e6d6:	68a3      	ldr	r3, [r4, #8]
 800e6d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6dc:	701a      	strb	r2, [r3, #0]
 800e6de:	e7ad      	b.n	800e63c <ucdr_serialize_endian_uint32_t+0x74>
 800e6e0:	ad01      	add	r5, sp, #4
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	463a      	mov	r2, r7
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f00e ffbf 	bl	801d66a <memcpy>
 800e6ec:	68a0      	ldr	r0, [r4, #8]
 800e6ee:	464a      	mov	r2, r9
 800e6f0:	19e9      	adds	r1, r5, r7
 800e6f2:	f00e ffba 	bl	801d66a <memcpy>
 800e6f6:	e7a1      	b.n	800e63c <ucdr_serialize_endian_uint32_t+0x74>

0800e6f8 <ucdr_deserialize_uint32_t>:
 800e6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6fc:	460d      	mov	r5, r1
 800e6fe:	2104      	movs	r1, #4
 800e700:	4604      	mov	r4, r0
 800e702:	f000 ffa1 	bl	800f648 <ucdr_buffer_alignment>
 800e706:	4601      	mov	r1, r0
 800e708:	4620      	mov	r0, r4
 800e70a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e70e:	f000 ffdf 	bl	800f6d0 <ucdr_advance_buffer>
 800e712:	2104      	movs	r1, #4
 800e714:	4620      	mov	r0, r4
 800e716:	f000 ff37 	bl	800f588 <ucdr_check_buffer_available_for>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d138      	bne.n	800e790 <ucdr_deserialize_uint32_t+0x98>
 800e71e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e722:	42b7      	cmp	r7, r6
 800e724:	d92f      	bls.n	800e786 <ucdr_deserialize_uint32_t+0x8e>
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	60a7      	str	r7, [r4, #8]
 800e72a:	1bbf      	subs	r7, r7, r6
 800e72c:	443b      	add	r3, r7
 800e72e:	f1c7 0904 	rsb	r9, r7, #4
 800e732:	6123      	str	r3, [r4, #16]
 800e734:	4649      	mov	r1, r9
 800e736:	4620      	mov	r0, r4
 800e738:	f000 ff32 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d046      	beq.n	800e7ce <ucdr_deserialize_uint32_t+0xd6>
 800e740:	7d23      	ldrb	r3, [r4, #20]
 800e742:	2b01      	cmp	r3, #1
 800e744:	d05c      	beq.n	800e800 <ucdr_deserialize_uint32_t+0x108>
 800e746:	78f3      	ldrb	r3, [r6, #3]
 800e748:	702b      	strb	r3, [r5, #0]
 800e74a:	2f00      	cmp	r7, #0
 800e74c:	d04c      	beq.n	800e7e8 <ucdr_deserialize_uint32_t+0xf0>
 800e74e:	78b3      	ldrb	r3, [r6, #2]
 800e750:	706b      	strb	r3, [r5, #1]
 800e752:	2f01      	cmp	r7, #1
 800e754:	f105 0302 	add.w	r3, r5, #2
 800e758:	d04a      	beq.n	800e7f0 <ucdr_deserialize_uint32_t+0xf8>
 800e75a:	7873      	ldrb	r3, [r6, #1]
 800e75c:	70ab      	strb	r3, [r5, #2]
 800e75e:	2f02      	cmp	r7, #2
 800e760:	f105 0303 	add.w	r3, r5, #3
 800e764:	d048      	beq.n	800e7f8 <ucdr_deserialize_uint32_t+0x100>
 800e766:	7833      	ldrb	r3, [r6, #0]
 800e768:	70eb      	strb	r3, [r5, #3]
 800e76a:	6923      	ldr	r3, [r4, #16]
 800e76c:	68a2      	ldr	r2, [r4, #8]
 800e76e:	7da0      	ldrb	r0, [r4, #22]
 800e770:	2104      	movs	r1, #4
 800e772:	3304      	adds	r3, #4
 800e774:	444a      	add	r2, r9
 800e776:	1bdb      	subs	r3, r3, r7
 800e778:	7561      	strb	r1, [r4, #21]
 800e77a:	60a2      	str	r2, [r4, #8]
 800e77c:	6123      	str	r3, [r4, #16]
 800e77e:	f080 0001 	eor.w	r0, r0, #1
 800e782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e786:	2104      	movs	r1, #4
 800e788:	4620      	mov	r0, r4
 800e78a:	f000 ff09 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e78e:	b1b0      	cbz	r0, 800e7be <ucdr_deserialize_uint32_t+0xc6>
 800e790:	7d23      	ldrb	r3, [r4, #20]
 800e792:	2b01      	cmp	r3, #1
 800e794:	68a3      	ldr	r3, [r4, #8]
 800e796:	d017      	beq.n	800e7c8 <ucdr_deserialize_uint32_t+0xd0>
 800e798:	78db      	ldrb	r3, [r3, #3]
 800e79a:	702b      	strb	r3, [r5, #0]
 800e79c:	68a3      	ldr	r3, [r4, #8]
 800e79e:	789b      	ldrb	r3, [r3, #2]
 800e7a0:	706b      	strb	r3, [r5, #1]
 800e7a2:	68a3      	ldr	r3, [r4, #8]
 800e7a4:	785b      	ldrb	r3, [r3, #1]
 800e7a6:	70ab      	strb	r3, [r5, #2]
 800e7a8:	68a3      	ldr	r3, [r4, #8]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	70eb      	strb	r3, [r5, #3]
 800e7ae:	68a2      	ldr	r2, [r4, #8]
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	3204      	adds	r2, #4
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	2104      	movs	r1, #4
 800e7b8:	60a2      	str	r2, [r4, #8]
 800e7ba:	6123      	str	r3, [r4, #16]
 800e7bc:	7561      	strb	r1, [r4, #21]
 800e7be:	7da0      	ldrb	r0, [r4, #22]
 800e7c0:	f080 0001 	eor.w	r0, r0, #1
 800e7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	602b      	str	r3, [r5, #0]
 800e7cc:	e7ef      	b.n	800e7ae <ucdr_deserialize_uint32_t+0xb6>
 800e7ce:	68a2      	ldr	r2, [r4, #8]
 800e7d0:	6923      	ldr	r3, [r4, #16]
 800e7d2:	7da0      	ldrb	r0, [r4, #22]
 800e7d4:	f884 8015 	strb.w	r8, [r4, #21]
 800e7d8:	1bd2      	subs	r2, r2, r7
 800e7da:	1bdb      	subs	r3, r3, r7
 800e7dc:	60a2      	str	r2, [r4, #8]
 800e7de:	6123      	str	r3, [r4, #16]
 800e7e0:	f080 0001 	eor.w	r0, r0, #1
 800e7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	789b      	ldrb	r3, [r3, #2]
 800e7ec:	706b      	strb	r3, [r5, #1]
 800e7ee:	1cab      	adds	r3, r5, #2
 800e7f0:	68a2      	ldr	r2, [r4, #8]
 800e7f2:	7852      	ldrb	r2, [r2, #1]
 800e7f4:	f803 2b01 	strb.w	r2, [r3], #1
 800e7f8:	68a2      	ldr	r2, [r4, #8]
 800e7fa:	7812      	ldrb	r2, [r2, #0]
 800e7fc:	701a      	strb	r2, [r3, #0]
 800e7fe:	e7b4      	b.n	800e76a <ucdr_deserialize_uint32_t+0x72>
 800e800:	4631      	mov	r1, r6
 800e802:	463a      	mov	r2, r7
 800e804:	4628      	mov	r0, r5
 800e806:	f00e ff30 	bl	801d66a <memcpy>
 800e80a:	68a1      	ldr	r1, [r4, #8]
 800e80c:	464a      	mov	r2, r9
 800e80e:	19e8      	adds	r0, r5, r7
 800e810:	f00e ff2b 	bl	801d66a <memcpy>
 800e814:	e7a9      	b.n	800e76a <ucdr_deserialize_uint32_t+0x72>
 800e816:	bf00      	nop

0800e818 <ucdr_deserialize_endian_uint32_t>:
 800e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e81c:	460e      	mov	r6, r1
 800e81e:	2104      	movs	r1, #4
 800e820:	4604      	mov	r4, r0
 800e822:	4615      	mov	r5, r2
 800e824:	f000 ff10 	bl	800f648 <ucdr_buffer_alignment>
 800e828:	4601      	mov	r1, r0
 800e82a:	4620      	mov	r0, r4
 800e82c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e830:	f000 ff4e 	bl	800f6d0 <ucdr_advance_buffer>
 800e834:	2104      	movs	r1, #4
 800e836:	4620      	mov	r0, r4
 800e838:	f000 fea6 	bl	800f588 <ucdr_check_buffer_available_for>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d13c      	bne.n	800e8ba <ucdr_deserialize_endian_uint32_t+0xa2>
 800e840:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e844:	42bb      	cmp	r3, r7
 800e846:	d933      	bls.n	800e8b0 <ucdr_deserialize_endian_uint32_t+0x98>
 800e848:	eba3 0807 	sub.w	r8, r3, r7
 800e84c:	60a3      	str	r3, [r4, #8]
 800e84e:	6923      	ldr	r3, [r4, #16]
 800e850:	f1c8 0a04 	rsb	sl, r8, #4
 800e854:	4443      	add	r3, r8
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	4651      	mov	r1, sl
 800e85a:	4620      	mov	r0, r4
 800e85c:	f000 fea0 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e860:	2800      	cmp	r0, #0
 800e862:	d048      	beq.n	800e8f6 <ucdr_deserialize_endian_uint32_t+0xde>
 800e864:	2e01      	cmp	r6, #1
 800e866:	d061      	beq.n	800e92c <ucdr_deserialize_endian_uint32_t+0x114>
 800e868:	78fb      	ldrb	r3, [r7, #3]
 800e86a:	702b      	strb	r3, [r5, #0]
 800e86c:	f1b8 0f00 	cmp.w	r8, #0
 800e870:	d050      	beq.n	800e914 <ucdr_deserialize_endian_uint32_t+0xfc>
 800e872:	78bb      	ldrb	r3, [r7, #2]
 800e874:	706b      	strb	r3, [r5, #1]
 800e876:	f1b8 0f01 	cmp.w	r8, #1
 800e87a:	f105 0302 	add.w	r3, r5, #2
 800e87e:	d04d      	beq.n	800e91c <ucdr_deserialize_endian_uint32_t+0x104>
 800e880:	787b      	ldrb	r3, [r7, #1]
 800e882:	70ab      	strb	r3, [r5, #2]
 800e884:	f1b8 0f02 	cmp.w	r8, #2
 800e888:	f105 0303 	add.w	r3, r5, #3
 800e88c:	d04a      	beq.n	800e924 <ucdr_deserialize_endian_uint32_t+0x10c>
 800e88e:	783b      	ldrb	r3, [r7, #0]
 800e890:	70eb      	strb	r3, [r5, #3]
 800e892:	6923      	ldr	r3, [r4, #16]
 800e894:	68a2      	ldr	r2, [r4, #8]
 800e896:	7da0      	ldrb	r0, [r4, #22]
 800e898:	2104      	movs	r1, #4
 800e89a:	3304      	adds	r3, #4
 800e89c:	4452      	add	r2, sl
 800e89e:	eba3 0308 	sub.w	r3, r3, r8
 800e8a2:	7561      	strb	r1, [r4, #21]
 800e8a4:	60a2      	str	r2, [r4, #8]
 800e8a6:	6123      	str	r3, [r4, #16]
 800e8a8:	f080 0001 	eor.w	r0, r0, #1
 800e8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b0:	2104      	movs	r1, #4
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 fe74 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e8b8:	b1a8      	cbz	r0, 800e8e6 <ucdr_deserialize_endian_uint32_t+0xce>
 800e8ba:	2e01      	cmp	r6, #1
 800e8bc:	68a3      	ldr	r3, [r4, #8]
 800e8be:	d017      	beq.n	800e8f0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e8c0:	78db      	ldrb	r3, [r3, #3]
 800e8c2:	702b      	strb	r3, [r5, #0]
 800e8c4:	68a3      	ldr	r3, [r4, #8]
 800e8c6:	789b      	ldrb	r3, [r3, #2]
 800e8c8:	706b      	strb	r3, [r5, #1]
 800e8ca:	68a3      	ldr	r3, [r4, #8]
 800e8cc:	785b      	ldrb	r3, [r3, #1]
 800e8ce:	70ab      	strb	r3, [r5, #2]
 800e8d0:	68a3      	ldr	r3, [r4, #8]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	70eb      	strb	r3, [r5, #3]
 800e8d6:	68a2      	ldr	r2, [r4, #8]
 800e8d8:	6923      	ldr	r3, [r4, #16]
 800e8da:	3204      	adds	r2, #4
 800e8dc:	3304      	adds	r3, #4
 800e8de:	2104      	movs	r1, #4
 800e8e0:	60a2      	str	r2, [r4, #8]
 800e8e2:	6123      	str	r3, [r4, #16]
 800e8e4:	7561      	strb	r1, [r4, #21]
 800e8e6:	7da0      	ldrb	r0, [r4, #22]
 800e8e8:	f080 0001 	eor.w	r0, r0, #1
 800e8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	602b      	str	r3, [r5, #0]
 800e8f4:	e7ef      	b.n	800e8d6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800e8f6:	68a2      	ldr	r2, [r4, #8]
 800e8f8:	6923      	ldr	r3, [r4, #16]
 800e8fa:	7da0      	ldrb	r0, [r4, #22]
 800e8fc:	f884 9015 	strb.w	r9, [r4, #21]
 800e900:	eba2 0208 	sub.w	r2, r2, r8
 800e904:	eba3 0308 	sub.w	r3, r3, r8
 800e908:	60a2      	str	r2, [r4, #8]
 800e90a:	6123      	str	r3, [r4, #16]
 800e90c:	f080 0001 	eor.w	r0, r0, #1
 800e910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e914:	68a3      	ldr	r3, [r4, #8]
 800e916:	789b      	ldrb	r3, [r3, #2]
 800e918:	706b      	strb	r3, [r5, #1]
 800e91a:	1cab      	adds	r3, r5, #2
 800e91c:	68a2      	ldr	r2, [r4, #8]
 800e91e:	7852      	ldrb	r2, [r2, #1]
 800e920:	f803 2b01 	strb.w	r2, [r3], #1
 800e924:	68a2      	ldr	r2, [r4, #8]
 800e926:	7812      	ldrb	r2, [r2, #0]
 800e928:	701a      	strb	r2, [r3, #0]
 800e92a:	e7b2      	b.n	800e892 <ucdr_deserialize_endian_uint32_t+0x7a>
 800e92c:	4639      	mov	r1, r7
 800e92e:	4642      	mov	r2, r8
 800e930:	4628      	mov	r0, r5
 800e932:	f00e fe9a 	bl	801d66a <memcpy>
 800e936:	68a1      	ldr	r1, [r4, #8]
 800e938:	4652      	mov	r2, sl
 800e93a:	eb05 0008 	add.w	r0, r5, r8
 800e93e:	f00e fe94 	bl	801d66a <memcpy>
 800e942:	e7a6      	b.n	800e892 <ucdr_deserialize_endian_uint32_t+0x7a>

0800e944 <ucdr_serialize_uint64_t>:
 800e944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e948:	2108      	movs	r1, #8
 800e94a:	b082      	sub	sp, #8
 800e94c:	4604      	mov	r4, r0
 800e94e:	e9cd 2300 	strd	r2, r3, [sp]
 800e952:	f000 fe79 	bl	800f648 <ucdr_buffer_alignment>
 800e956:	4601      	mov	r1, r0
 800e958:	4620      	mov	r0, r4
 800e95a:	7d67      	ldrb	r7, [r4, #21]
 800e95c:	f000 feb8 	bl	800f6d0 <ucdr_advance_buffer>
 800e960:	2108      	movs	r1, #8
 800e962:	4620      	mov	r0, r4
 800e964:	f000 fe10 	bl	800f588 <ucdr_check_buffer_available_for>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d14e      	bne.n	800ea0a <ucdr_serialize_uint64_t+0xc6>
 800e96c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e970:	42ab      	cmp	r3, r5
 800e972:	d945      	bls.n	800ea00 <ucdr_serialize_uint64_t+0xbc>
 800e974:	1b5e      	subs	r6, r3, r5
 800e976:	60a3      	str	r3, [r4, #8]
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	f1c6 0808 	rsb	r8, r6, #8
 800e97e:	4433      	add	r3, r6
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	4641      	mov	r1, r8
 800e984:	4620      	mov	r0, r4
 800e986:	f000 fe0b 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d074      	beq.n	800ea78 <ucdr_serialize_uint64_t+0x134>
 800e98e:	7d23      	ldrb	r3, [r4, #20]
 800e990:	2b01      	cmp	r3, #1
 800e992:	f000 809b 	beq.w	800eacc <ucdr_serialize_uint64_t+0x188>
 800e996:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e99a:	702b      	strb	r3, [r5, #0]
 800e99c:	2e00      	cmp	r6, #0
 800e99e:	d078      	beq.n	800ea92 <ucdr_serialize_uint64_t+0x14e>
 800e9a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e9a4:	706b      	strb	r3, [r5, #1]
 800e9a6:	2e01      	cmp	r6, #1
 800e9a8:	d077      	beq.n	800ea9a <ucdr_serialize_uint64_t+0x156>
 800e9aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e9ae:	70ab      	strb	r3, [r5, #2]
 800e9b0:	2e02      	cmp	r6, #2
 800e9b2:	d076      	beq.n	800eaa2 <ucdr_serialize_uint64_t+0x15e>
 800e9b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e9b8:	70eb      	strb	r3, [r5, #3]
 800e9ba:	2e03      	cmp	r6, #3
 800e9bc:	d075      	beq.n	800eaaa <ucdr_serialize_uint64_t+0x166>
 800e9be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e9c2:	712b      	strb	r3, [r5, #4]
 800e9c4:	2e04      	cmp	r6, #4
 800e9c6:	d074      	beq.n	800eab2 <ucdr_serialize_uint64_t+0x16e>
 800e9c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e9cc:	716b      	strb	r3, [r5, #5]
 800e9ce:	2e05      	cmp	r6, #5
 800e9d0:	d073      	beq.n	800eaba <ucdr_serialize_uint64_t+0x176>
 800e9d2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e9d6:	71ab      	strb	r3, [r5, #6]
 800e9d8:	2e06      	cmp	r6, #6
 800e9da:	d072      	beq.n	800eac2 <ucdr_serialize_uint64_t+0x17e>
 800e9dc:	f89d 3000 	ldrb.w	r3, [sp]
 800e9e0:	71eb      	strb	r3, [r5, #7]
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	68a2      	ldr	r2, [r4, #8]
 800e9e6:	7da0      	ldrb	r0, [r4, #22]
 800e9e8:	3308      	adds	r3, #8
 800e9ea:	1b9e      	subs	r6, r3, r6
 800e9ec:	4442      	add	r2, r8
 800e9ee:	2308      	movs	r3, #8
 800e9f0:	f080 0001 	eor.w	r0, r0, #1
 800e9f4:	60a2      	str	r2, [r4, #8]
 800e9f6:	6126      	str	r6, [r4, #16]
 800e9f8:	7563      	strb	r3, [r4, #21]
 800e9fa:	b002      	add	sp, #8
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	2108      	movs	r1, #8
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 fdcc 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ea08:	b350      	cbz	r0, 800ea60 <ucdr_serialize_uint64_t+0x11c>
 800ea0a:	7d23      	ldrb	r3, [r4, #20]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d02d      	beq.n	800ea6c <ucdr_serialize_uint64_t+0x128>
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea16:	701a      	strb	r2, [r3, #0]
 800ea18:	68a3      	ldr	r3, [r4, #8]
 800ea1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea1e:	705a      	strb	r2, [r3, #1]
 800ea20:	68a3      	ldr	r3, [r4, #8]
 800ea22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ea26:	709a      	strb	r2, [r3, #2]
 800ea28:	68a3      	ldr	r3, [r4, #8]
 800ea2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea2e:	70da      	strb	r2, [r3, #3]
 800ea30:	68a3      	ldr	r3, [r4, #8]
 800ea32:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ea36:	711a      	strb	r2, [r3, #4]
 800ea38:	68a3      	ldr	r3, [r4, #8]
 800ea3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ea3e:	715a      	strb	r2, [r3, #5]
 800ea40:	68a3      	ldr	r3, [r4, #8]
 800ea42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ea46:	719a      	strb	r2, [r3, #6]
 800ea48:	68a3      	ldr	r3, [r4, #8]
 800ea4a:	f89d 2000 	ldrb.w	r2, [sp]
 800ea4e:	71da      	strb	r2, [r3, #7]
 800ea50:	68a2      	ldr	r2, [r4, #8]
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	3208      	adds	r2, #8
 800ea56:	3308      	adds	r3, #8
 800ea58:	2108      	movs	r1, #8
 800ea5a:	60a2      	str	r2, [r4, #8]
 800ea5c:	6123      	str	r3, [r4, #16]
 800ea5e:	7561      	strb	r1, [r4, #21]
 800ea60:	7da0      	ldrb	r0, [r4, #22]
 800ea62:	f080 0001 	eor.w	r0, r0, #1
 800ea66:	b002      	add	sp, #8
 800ea68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea6c:	466b      	mov	r3, sp
 800ea6e:	cb03      	ldmia	r3!, {r0, r1}
 800ea70:	68a3      	ldr	r3, [r4, #8]
 800ea72:	6018      	str	r0, [r3, #0]
 800ea74:	6059      	str	r1, [r3, #4]
 800ea76:	e7eb      	b.n	800ea50 <ucdr_serialize_uint64_t+0x10c>
 800ea78:	68a2      	ldr	r2, [r4, #8]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	7da0      	ldrb	r0, [r4, #22]
 800ea7e:	7567      	strb	r7, [r4, #21]
 800ea80:	1b92      	subs	r2, r2, r6
 800ea82:	1b9b      	subs	r3, r3, r6
 800ea84:	f080 0001 	eor.w	r0, r0, #1
 800ea88:	60a2      	str	r2, [r4, #8]
 800ea8a:	6123      	str	r3, [r4, #16]
 800ea8c:	b002      	add	sp, #8
 800ea8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea92:	68a3      	ldr	r3, [r4, #8]
 800ea94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea98:	701a      	strb	r2, [r3, #0]
 800ea9a:	68a3      	ldr	r3, [r4, #8]
 800ea9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eaa0:	701a      	strb	r2, [r3, #0]
 800eaa2:	68a3      	ldr	r3, [r4, #8]
 800eaa4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	68a3      	ldr	r3, [r4, #8]
 800eaac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eab8:	701a      	strb	r2, [r3, #0]
 800eaba:	68a3      	ldr	r3, [r4, #8]
 800eabc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eac0:	701a      	strb	r2, [r3, #0]
 800eac2:	68a3      	ldr	r3, [r4, #8]
 800eac4:	f89d 2000 	ldrb.w	r2, [sp]
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	e78a      	b.n	800e9e2 <ucdr_serialize_uint64_t+0x9e>
 800eacc:	4628      	mov	r0, r5
 800eace:	466d      	mov	r5, sp
 800ead0:	4629      	mov	r1, r5
 800ead2:	4632      	mov	r2, r6
 800ead4:	f00e fdc9 	bl	801d66a <memcpy>
 800ead8:	68a0      	ldr	r0, [r4, #8]
 800eada:	4642      	mov	r2, r8
 800eadc:	19a9      	adds	r1, r5, r6
 800eade:	f00e fdc4 	bl	801d66a <memcpy>
 800eae2:	e77e      	b.n	800e9e2 <ucdr_serialize_uint64_t+0x9e>

0800eae4 <ucdr_serialize_int16_t>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	460b      	mov	r3, r1
 800eaec:	2102      	movs	r1, #2
 800eaee:	4604      	mov	r4, r0
 800eaf0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eaf4:	f000 fda8 	bl	800f648 <ucdr_buffer_alignment>
 800eaf8:	4601      	mov	r1, r0
 800eafa:	4620      	mov	r0, r4
 800eafc:	7d67      	ldrb	r7, [r4, #21]
 800eafe:	f000 fde7 	bl	800f6d0 <ucdr_advance_buffer>
 800eb02:	2102      	movs	r1, #2
 800eb04:	4620      	mov	r0, r4
 800eb06:	f000 fd3f 	bl	800f588 <ucdr_check_buffer_available_for>
 800eb0a:	bb78      	cbnz	r0, 800eb6c <ucdr_serialize_int16_t+0x88>
 800eb0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eb10:	42ab      	cmp	r3, r5
 800eb12:	d926      	bls.n	800eb62 <ucdr_serialize_int16_t+0x7e>
 800eb14:	1b5e      	subs	r6, r3, r5
 800eb16:	60a3      	str	r3, [r4, #8]
 800eb18:	6923      	ldr	r3, [r4, #16]
 800eb1a:	f1c6 0802 	rsb	r8, r6, #2
 800eb1e:	4433      	add	r3, r6
 800eb20:	6123      	str	r3, [r4, #16]
 800eb22:	4641      	mov	r1, r8
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fd3b 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d03b      	beq.n	800eba6 <ucdr_serialize_int16_t+0xc2>
 800eb2e:	7d23      	ldrb	r3, [r4, #20]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d04a      	beq.n	800ebca <ucdr_serialize_int16_t+0xe6>
 800eb34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb38:	702b      	strb	r3, [r5, #0]
 800eb3a:	2e00      	cmp	r6, #0
 800eb3c:	d040      	beq.n	800ebc0 <ucdr_serialize_int16_t+0xdc>
 800eb3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb42:	706b      	strb	r3, [r5, #1]
 800eb44:	6923      	ldr	r3, [r4, #16]
 800eb46:	68a2      	ldr	r2, [r4, #8]
 800eb48:	7da0      	ldrb	r0, [r4, #22]
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	1b9e      	subs	r6, r3, r6
 800eb4e:	4442      	add	r2, r8
 800eb50:	2302      	movs	r3, #2
 800eb52:	f080 0001 	eor.w	r0, r0, #1
 800eb56:	60a2      	str	r2, [r4, #8]
 800eb58:	6126      	str	r6, [r4, #16]
 800eb5a:	7563      	strb	r3, [r4, #21]
 800eb5c:	b002      	add	sp, #8
 800eb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb62:	2102      	movs	r1, #2
 800eb64:	4620      	mov	r0, r4
 800eb66:	f000 fd1b 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800eb6a:	b190      	cbz	r0, 800eb92 <ucdr_serialize_int16_t+0xae>
 800eb6c:	7d23      	ldrb	r3, [r4, #20]
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	68a3      	ldr	r3, [r4, #8]
 800eb72:	d014      	beq.n	800eb9e <ucdr_serialize_int16_t+0xba>
 800eb74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb78:	701a      	strb	r2, [r3, #0]
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb80:	705a      	strb	r2, [r3, #1]
 800eb82:	68a2      	ldr	r2, [r4, #8]
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	3202      	adds	r2, #2
 800eb88:	3302      	adds	r3, #2
 800eb8a:	2102      	movs	r1, #2
 800eb8c:	60a2      	str	r2, [r4, #8]
 800eb8e:	6123      	str	r3, [r4, #16]
 800eb90:	7561      	strb	r1, [r4, #21]
 800eb92:	7da0      	ldrb	r0, [r4, #22]
 800eb94:	f080 0001 	eor.w	r0, r0, #1
 800eb98:	b002      	add	sp, #8
 800eb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eba2:	801a      	strh	r2, [r3, #0]
 800eba4:	e7ed      	b.n	800eb82 <ucdr_serialize_int16_t+0x9e>
 800eba6:	68a2      	ldr	r2, [r4, #8]
 800eba8:	6923      	ldr	r3, [r4, #16]
 800ebaa:	7da0      	ldrb	r0, [r4, #22]
 800ebac:	7567      	strb	r7, [r4, #21]
 800ebae:	1b92      	subs	r2, r2, r6
 800ebb0:	1b9b      	subs	r3, r3, r6
 800ebb2:	f080 0001 	eor.w	r0, r0, #1
 800ebb6:	60a2      	str	r2, [r4, #8]
 800ebb8:	6123      	str	r3, [r4, #16]
 800ebba:	b002      	add	sp, #8
 800ebbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebc6:	701a      	strb	r2, [r3, #0]
 800ebc8:	e7bc      	b.n	800eb44 <ucdr_serialize_int16_t+0x60>
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f10d 0506 	add.w	r5, sp, #6
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	4632      	mov	r2, r6
 800ebd4:	f00e fd49 	bl	801d66a <memcpy>
 800ebd8:	68a0      	ldr	r0, [r4, #8]
 800ebda:	4642      	mov	r2, r8
 800ebdc:	19a9      	adds	r1, r5, r6
 800ebde:	f00e fd44 	bl	801d66a <memcpy>
 800ebe2:	e7af      	b.n	800eb44 <ucdr_serialize_int16_t+0x60>

0800ebe4 <ucdr_deserialize_int16_t>:
 800ebe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe8:	460d      	mov	r5, r1
 800ebea:	2102      	movs	r1, #2
 800ebec:	4604      	mov	r4, r0
 800ebee:	f000 fd2b 	bl	800f648 <ucdr_buffer_alignment>
 800ebf2:	4601      	mov	r1, r0
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ebfa:	f000 fd69 	bl	800f6d0 <ucdr_advance_buffer>
 800ebfe:	2102      	movs	r1, #2
 800ec00:	4620      	mov	r0, r4
 800ec02:	f000 fcc1 	bl	800f588 <ucdr_check_buffer_available_for>
 800ec06:	bb60      	cbnz	r0, 800ec62 <ucdr_deserialize_int16_t+0x7e>
 800ec08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec0c:	42be      	cmp	r6, r7
 800ec0e:	d923      	bls.n	800ec58 <ucdr_deserialize_int16_t+0x74>
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	60a6      	str	r6, [r4, #8]
 800ec14:	1bf6      	subs	r6, r6, r7
 800ec16:	4433      	add	r3, r6
 800ec18:	f1c6 0902 	rsb	r9, r6, #2
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	4649      	mov	r1, r9
 800ec20:	4620      	mov	r0, r4
 800ec22:	f000 fcbd 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d034      	beq.n	800ec94 <ucdr_deserialize_int16_t+0xb0>
 800ec2a:	7d23      	ldrb	r3, [r4, #20]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d042      	beq.n	800ecb6 <ucdr_deserialize_int16_t+0xd2>
 800ec30:	787b      	ldrb	r3, [r7, #1]
 800ec32:	702b      	strb	r3, [r5, #0]
 800ec34:	2e00      	cmp	r6, #0
 800ec36:	d03a      	beq.n	800ecae <ucdr_deserialize_int16_t+0xca>
 800ec38:	783b      	ldrb	r3, [r7, #0]
 800ec3a:	706b      	strb	r3, [r5, #1]
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	68a2      	ldr	r2, [r4, #8]
 800ec40:	7da0      	ldrb	r0, [r4, #22]
 800ec42:	2102      	movs	r1, #2
 800ec44:	3302      	adds	r3, #2
 800ec46:	444a      	add	r2, r9
 800ec48:	1b9b      	subs	r3, r3, r6
 800ec4a:	7561      	strb	r1, [r4, #21]
 800ec4c:	60a2      	str	r2, [r4, #8]
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	f080 0001 	eor.w	r0, r0, #1
 800ec54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec58:	2102      	movs	r1, #2
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f000 fca0 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ec60:	b180      	cbz	r0, 800ec84 <ucdr_deserialize_int16_t+0xa0>
 800ec62:	7d23      	ldrb	r3, [r4, #20]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	68a3      	ldr	r3, [r4, #8]
 800ec68:	d011      	beq.n	800ec8e <ucdr_deserialize_int16_t+0xaa>
 800ec6a:	785b      	ldrb	r3, [r3, #1]
 800ec6c:	702b      	strb	r3, [r5, #0]
 800ec6e:	68a3      	ldr	r3, [r4, #8]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	706b      	strb	r3, [r5, #1]
 800ec74:	68a2      	ldr	r2, [r4, #8]
 800ec76:	6923      	ldr	r3, [r4, #16]
 800ec78:	3202      	adds	r2, #2
 800ec7a:	3302      	adds	r3, #2
 800ec7c:	2102      	movs	r1, #2
 800ec7e:	60a2      	str	r2, [r4, #8]
 800ec80:	6123      	str	r3, [r4, #16]
 800ec82:	7561      	strb	r1, [r4, #21]
 800ec84:	7da0      	ldrb	r0, [r4, #22]
 800ec86:	f080 0001 	eor.w	r0, r0, #1
 800ec8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	802b      	strh	r3, [r5, #0]
 800ec92:	e7ef      	b.n	800ec74 <ucdr_deserialize_int16_t+0x90>
 800ec94:	68a2      	ldr	r2, [r4, #8]
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	7da0      	ldrb	r0, [r4, #22]
 800ec9a:	f884 8015 	strb.w	r8, [r4, #21]
 800ec9e:	1b92      	subs	r2, r2, r6
 800eca0:	1b9b      	subs	r3, r3, r6
 800eca2:	60a2      	str	r2, [r4, #8]
 800eca4:	6123      	str	r3, [r4, #16]
 800eca6:	f080 0001 	eor.w	r0, r0, #1
 800ecaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	706b      	strb	r3, [r5, #1]
 800ecb4:	e7c2      	b.n	800ec3c <ucdr_deserialize_int16_t+0x58>
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	4632      	mov	r2, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f00e fcd5 	bl	801d66a <memcpy>
 800ecc0:	68a1      	ldr	r1, [r4, #8]
 800ecc2:	464a      	mov	r2, r9
 800ecc4:	19a8      	adds	r0, r5, r6
 800ecc6:	f00e fcd0 	bl	801d66a <memcpy>
 800ecca:	e7b7      	b.n	800ec3c <ucdr_deserialize_int16_t+0x58>

0800eccc <ucdr_serialize_int32_t>:
 800eccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	9101      	str	r1, [sp, #4]
 800ecd6:	2104      	movs	r1, #4
 800ecd8:	f000 fcb6 	bl	800f648 <ucdr_buffer_alignment>
 800ecdc:	4601      	mov	r1, r0
 800ecde:	4620      	mov	r0, r4
 800ece0:	7d67      	ldrb	r7, [r4, #21]
 800ece2:	f000 fcf5 	bl	800f6d0 <ucdr_advance_buffer>
 800ece6:	2104      	movs	r1, #4
 800ece8:	4620      	mov	r0, r4
 800ecea:	f000 fc4d 	bl	800f588 <ucdr_check_buffer_available_for>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d139      	bne.n	800ed66 <ucdr_serialize_int32_t+0x9a>
 800ecf2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ecf6:	42ab      	cmp	r3, r5
 800ecf8:	d930      	bls.n	800ed5c <ucdr_serialize_int32_t+0x90>
 800ecfa:	1b5e      	subs	r6, r3, r5
 800ecfc:	60a3      	str	r3, [r4, #8]
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	f1c6 0804 	rsb	r8, r6, #4
 800ed04:	4433      	add	r3, r6
 800ed06:	6123      	str	r3, [r4, #16]
 800ed08:	4641      	mov	r1, r8
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fc48 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d04c      	beq.n	800edae <ucdr_serialize_int32_t+0xe2>
 800ed14:	7d23      	ldrb	r3, [r4, #20]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d063      	beq.n	800ede2 <ucdr_serialize_int32_t+0x116>
 800ed1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed1e:	702b      	strb	r3, [r5, #0]
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	d051      	beq.n	800edc8 <ucdr_serialize_int32_t+0xfc>
 800ed24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ed28:	706b      	strb	r3, [r5, #1]
 800ed2a:	2e01      	cmp	r6, #1
 800ed2c:	d050      	beq.n	800edd0 <ucdr_serialize_int32_t+0x104>
 800ed2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ed32:	70ab      	strb	r3, [r5, #2]
 800ed34:	2e02      	cmp	r6, #2
 800ed36:	d04f      	beq.n	800edd8 <ucdr_serialize_int32_t+0x10c>
 800ed38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ed3c:	70eb      	strb	r3, [r5, #3]
 800ed3e:	6923      	ldr	r3, [r4, #16]
 800ed40:	68a2      	ldr	r2, [r4, #8]
 800ed42:	7da0      	ldrb	r0, [r4, #22]
 800ed44:	3304      	adds	r3, #4
 800ed46:	1b9e      	subs	r6, r3, r6
 800ed48:	4442      	add	r2, r8
 800ed4a:	2304      	movs	r3, #4
 800ed4c:	f080 0001 	eor.w	r0, r0, #1
 800ed50:	60a2      	str	r2, [r4, #8]
 800ed52:	6126      	str	r6, [r4, #16]
 800ed54:	7563      	strb	r3, [r4, #21]
 800ed56:	b002      	add	sp, #8
 800ed58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5c:	2104      	movs	r1, #4
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 fc1e 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ed64:	b1d0      	cbz	r0, 800ed9c <ucdr_serialize_int32_t+0xd0>
 800ed66:	7d23      	ldrb	r3, [r4, #20]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	68a3      	ldr	r3, [r4, #8]
 800ed6c:	d01c      	beq.n	800eda8 <ucdr_serialize_int32_t+0xdc>
 800ed6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ed72:	701a      	strb	r2, [r3, #0]
 800ed74:	68a3      	ldr	r3, [r4, #8]
 800ed76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed7a:	705a      	strb	r2, [r3, #1]
 800ed7c:	68a3      	ldr	r3, [r4, #8]
 800ed7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ed82:	709a      	strb	r2, [r3, #2]
 800ed84:	68a3      	ldr	r3, [r4, #8]
 800ed86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ed8a:	70da      	strb	r2, [r3, #3]
 800ed8c:	68a2      	ldr	r2, [r4, #8]
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	3204      	adds	r2, #4
 800ed92:	3304      	adds	r3, #4
 800ed94:	2104      	movs	r1, #4
 800ed96:	60a2      	str	r2, [r4, #8]
 800ed98:	6123      	str	r3, [r4, #16]
 800ed9a:	7561      	strb	r1, [r4, #21]
 800ed9c:	7da0      	ldrb	r0, [r4, #22]
 800ed9e:	f080 0001 	eor.w	r0, r0, #1
 800eda2:	b002      	add	sp, #8
 800eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda8:	9a01      	ldr	r2, [sp, #4]
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	e7ee      	b.n	800ed8c <ucdr_serialize_int32_t+0xc0>
 800edae:	68a2      	ldr	r2, [r4, #8]
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	7da0      	ldrb	r0, [r4, #22]
 800edb4:	7567      	strb	r7, [r4, #21]
 800edb6:	1b92      	subs	r2, r2, r6
 800edb8:	1b9b      	subs	r3, r3, r6
 800edba:	f080 0001 	eor.w	r0, r0, #1
 800edbe:	60a2      	str	r2, [r4, #8]
 800edc0:	6123      	str	r3, [r4, #16]
 800edc2:	b002      	add	sp, #8
 800edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800edce:	701a      	strb	r2, [r3, #0]
 800edd0:	68a3      	ldr	r3, [r4, #8]
 800edd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800edd6:	701a      	strb	r2, [r3, #0]
 800edd8:	68a3      	ldr	r3, [r4, #8]
 800edda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800edde:	701a      	strb	r2, [r3, #0]
 800ede0:	e7ad      	b.n	800ed3e <ucdr_serialize_int32_t+0x72>
 800ede2:	4628      	mov	r0, r5
 800ede4:	ad01      	add	r5, sp, #4
 800ede6:	4629      	mov	r1, r5
 800ede8:	4632      	mov	r2, r6
 800edea:	f00e fc3e 	bl	801d66a <memcpy>
 800edee:	68a0      	ldr	r0, [r4, #8]
 800edf0:	4642      	mov	r2, r8
 800edf2:	19a9      	adds	r1, r5, r6
 800edf4:	f00e fc39 	bl	801d66a <memcpy>
 800edf8:	e7a1      	b.n	800ed3e <ucdr_serialize_int32_t+0x72>
 800edfa:	bf00      	nop

0800edfc <ucdr_deserialize_int32_t>:
 800edfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee00:	460d      	mov	r5, r1
 800ee02:	2104      	movs	r1, #4
 800ee04:	4604      	mov	r4, r0
 800ee06:	f000 fc1f 	bl	800f648 <ucdr_buffer_alignment>
 800ee0a:	4601      	mov	r1, r0
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee12:	f000 fc5d 	bl	800f6d0 <ucdr_advance_buffer>
 800ee16:	2104      	movs	r1, #4
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f000 fbb5 	bl	800f588 <ucdr_check_buffer_available_for>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d138      	bne.n	800ee94 <ucdr_deserialize_int32_t+0x98>
 800ee22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ee26:	42b7      	cmp	r7, r6
 800ee28:	d92f      	bls.n	800ee8a <ucdr_deserialize_int32_t+0x8e>
 800ee2a:	6923      	ldr	r3, [r4, #16]
 800ee2c:	60a7      	str	r7, [r4, #8]
 800ee2e:	1bbf      	subs	r7, r7, r6
 800ee30:	443b      	add	r3, r7
 800ee32:	f1c7 0904 	rsb	r9, r7, #4
 800ee36:	6123      	str	r3, [r4, #16]
 800ee38:	4649      	mov	r1, r9
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 fbb0 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d046      	beq.n	800eed2 <ucdr_deserialize_int32_t+0xd6>
 800ee44:	7d23      	ldrb	r3, [r4, #20]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d05c      	beq.n	800ef04 <ucdr_deserialize_int32_t+0x108>
 800ee4a:	78f3      	ldrb	r3, [r6, #3]
 800ee4c:	702b      	strb	r3, [r5, #0]
 800ee4e:	2f00      	cmp	r7, #0
 800ee50:	d04c      	beq.n	800eeec <ucdr_deserialize_int32_t+0xf0>
 800ee52:	78b3      	ldrb	r3, [r6, #2]
 800ee54:	706b      	strb	r3, [r5, #1]
 800ee56:	2f01      	cmp	r7, #1
 800ee58:	f105 0302 	add.w	r3, r5, #2
 800ee5c:	d04a      	beq.n	800eef4 <ucdr_deserialize_int32_t+0xf8>
 800ee5e:	7873      	ldrb	r3, [r6, #1]
 800ee60:	70ab      	strb	r3, [r5, #2]
 800ee62:	2f02      	cmp	r7, #2
 800ee64:	f105 0303 	add.w	r3, r5, #3
 800ee68:	d048      	beq.n	800eefc <ucdr_deserialize_int32_t+0x100>
 800ee6a:	7833      	ldrb	r3, [r6, #0]
 800ee6c:	70eb      	strb	r3, [r5, #3]
 800ee6e:	6923      	ldr	r3, [r4, #16]
 800ee70:	68a2      	ldr	r2, [r4, #8]
 800ee72:	7da0      	ldrb	r0, [r4, #22]
 800ee74:	2104      	movs	r1, #4
 800ee76:	3304      	adds	r3, #4
 800ee78:	444a      	add	r2, r9
 800ee7a:	1bdb      	subs	r3, r3, r7
 800ee7c:	7561      	strb	r1, [r4, #21]
 800ee7e:	60a2      	str	r2, [r4, #8]
 800ee80:	6123      	str	r3, [r4, #16]
 800ee82:	f080 0001 	eor.w	r0, r0, #1
 800ee86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee8a:	2104      	movs	r1, #4
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fb87 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ee92:	b1b0      	cbz	r0, 800eec2 <ucdr_deserialize_int32_t+0xc6>
 800ee94:	7d23      	ldrb	r3, [r4, #20]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	68a3      	ldr	r3, [r4, #8]
 800ee9a:	d017      	beq.n	800eecc <ucdr_deserialize_int32_t+0xd0>
 800ee9c:	78db      	ldrb	r3, [r3, #3]
 800ee9e:	702b      	strb	r3, [r5, #0]
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	789b      	ldrb	r3, [r3, #2]
 800eea4:	706b      	strb	r3, [r5, #1]
 800eea6:	68a3      	ldr	r3, [r4, #8]
 800eea8:	785b      	ldrb	r3, [r3, #1]
 800eeaa:	70ab      	strb	r3, [r5, #2]
 800eeac:	68a3      	ldr	r3, [r4, #8]
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	70eb      	strb	r3, [r5, #3]
 800eeb2:	68a2      	ldr	r2, [r4, #8]
 800eeb4:	6923      	ldr	r3, [r4, #16]
 800eeb6:	3204      	adds	r2, #4
 800eeb8:	3304      	adds	r3, #4
 800eeba:	2104      	movs	r1, #4
 800eebc:	60a2      	str	r2, [r4, #8]
 800eebe:	6123      	str	r3, [r4, #16]
 800eec0:	7561      	strb	r1, [r4, #21]
 800eec2:	7da0      	ldrb	r0, [r4, #22]
 800eec4:	f080 0001 	eor.w	r0, r0, #1
 800eec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	602b      	str	r3, [r5, #0]
 800eed0:	e7ef      	b.n	800eeb2 <ucdr_deserialize_int32_t+0xb6>
 800eed2:	68a2      	ldr	r2, [r4, #8]
 800eed4:	6923      	ldr	r3, [r4, #16]
 800eed6:	7da0      	ldrb	r0, [r4, #22]
 800eed8:	f884 8015 	strb.w	r8, [r4, #21]
 800eedc:	1bd2      	subs	r2, r2, r7
 800eede:	1bdb      	subs	r3, r3, r7
 800eee0:	60a2      	str	r2, [r4, #8]
 800eee2:	6123      	str	r3, [r4, #16]
 800eee4:	f080 0001 	eor.w	r0, r0, #1
 800eee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeec:	68a3      	ldr	r3, [r4, #8]
 800eeee:	789b      	ldrb	r3, [r3, #2]
 800eef0:	706b      	strb	r3, [r5, #1]
 800eef2:	1cab      	adds	r3, r5, #2
 800eef4:	68a2      	ldr	r2, [r4, #8]
 800eef6:	7852      	ldrb	r2, [r2, #1]
 800eef8:	f803 2b01 	strb.w	r2, [r3], #1
 800eefc:	68a2      	ldr	r2, [r4, #8]
 800eefe:	7812      	ldrb	r2, [r2, #0]
 800ef00:	701a      	strb	r2, [r3, #0]
 800ef02:	e7b4      	b.n	800ee6e <ucdr_deserialize_int32_t+0x72>
 800ef04:	4631      	mov	r1, r6
 800ef06:	463a      	mov	r2, r7
 800ef08:	4628      	mov	r0, r5
 800ef0a:	f00e fbae 	bl	801d66a <memcpy>
 800ef0e:	68a1      	ldr	r1, [r4, #8]
 800ef10:	464a      	mov	r2, r9
 800ef12:	19e8      	adds	r0, r5, r7
 800ef14:	f00e fba9 	bl	801d66a <memcpy>
 800ef18:	e7a9      	b.n	800ee6e <ucdr_deserialize_int32_t+0x72>
 800ef1a:	bf00      	nop

0800ef1c <ucdr_serialize_double>:
 800ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef20:	2108      	movs	r1, #8
 800ef22:	b082      	sub	sp, #8
 800ef24:	4604      	mov	r4, r0
 800ef26:	ed8d 0b00 	vstr	d0, [sp]
 800ef2a:	f000 fb8d 	bl	800f648 <ucdr_buffer_alignment>
 800ef2e:	4601      	mov	r1, r0
 800ef30:	4620      	mov	r0, r4
 800ef32:	7d67      	ldrb	r7, [r4, #21]
 800ef34:	f000 fbcc 	bl	800f6d0 <ucdr_advance_buffer>
 800ef38:	2108      	movs	r1, #8
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f000 fb24 	bl	800f588 <ucdr_check_buffer_available_for>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d14e      	bne.n	800efe2 <ucdr_serialize_double+0xc6>
 800ef44:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ef48:	42ab      	cmp	r3, r5
 800ef4a:	d945      	bls.n	800efd8 <ucdr_serialize_double+0xbc>
 800ef4c:	1b5e      	subs	r6, r3, r5
 800ef4e:	60a3      	str	r3, [r4, #8]
 800ef50:	6923      	ldr	r3, [r4, #16]
 800ef52:	f1c6 0808 	rsb	r8, r6, #8
 800ef56:	4433      	add	r3, r6
 800ef58:	6123      	str	r3, [r4, #16]
 800ef5a:	4641      	mov	r1, r8
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f000 fb1f 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d074      	beq.n	800f050 <ucdr_serialize_double+0x134>
 800ef66:	7d23      	ldrb	r3, [r4, #20]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	f000 809b 	beq.w	800f0a4 <ucdr_serialize_double+0x188>
 800ef6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef72:	702b      	strb	r3, [r5, #0]
 800ef74:	2e00      	cmp	r6, #0
 800ef76:	d078      	beq.n	800f06a <ucdr_serialize_double+0x14e>
 800ef78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef7c:	706b      	strb	r3, [r5, #1]
 800ef7e:	2e01      	cmp	r6, #1
 800ef80:	d077      	beq.n	800f072 <ucdr_serialize_double+0x156>
 800ef82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef86:	70ab      	strb	r3, [r5, #2]
 800ef88:	2e02      	cmp	r6, #2
 800ef8a:	d076      	beq.n	800f07a <ucdr_serialize_double+0x15e>
 800ef8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef90:	70eb      	strb	r3, [r5, #3]
 800ef92:	2e03      	cmp	r6, #3
 800ef94:	d075      	beq.n	800f082 <ucdr_serialize_double+0x166>
 800ef96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ef9a:	712b      	strb	r3, [r5, #4]
 800ef9c:	2e04      	cmp	r6, #4
 800ef9e:	d074      	beq.n	800f08a <ucdr_serialize_double+0x16e>
 800efa0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800efa4:	716b      	strb	r3, [r5, #5]
 800efa6:	2e05      	cmp	r6, #5
 800efa8:	d073      	beq.n	800f092 <ucdr_serialize_double+0x176>
 800efaa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800efae:	71ab      	strb	r3, [r5, #6]
 800efb0:	2e06      	cmp	r6, #6
 800efb2:	d072      	beq.n	800f09a <ucdr_serialize_double+0x17e>
 800efb4:	f89d 3000 	ldrb.w	r3, [sp]
 800efb8:	71eb      	strb	r3, [r5, #7]
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	68a2      	ldr	r2, [r4, #8]
 800efbe:	7da0      	ldrb	r0, [r4, #22]
 800efc0:	3308      	adds	r3, #8
 800efc2:	1b9e      	subs	r6, r3, r6
 800efc4:	4442      	add	r2, r8
 800efc6:	2308      	movs	r3, #8
 800efc8:	f080 0001 	eor.w	r0, r0, #1
 800efcc:	60a2      	str	r2, [r4, #8]
 800efce:	6126      	str	r6, [r4, #16]
 800efd0:	7563      	strb	r3, [r4, #21]
 800efd2:	b002      	add	sp, #8
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	2108      	movs	r1, #8
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 fae0 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800efe0:	b350      	cbz	r0, 800f038 <ucdr_serialize_double+0x11c>
 800efe2:	7d23      	ldrb	r3, [r4, #20]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d02d      	beq.n	800f044 <ucdr_serialize_double+0x128>
 800efe8:	68a3      	ldr	r3, [r4, #8]
 800efea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800efee:	701a      	strb	r2, [r3, #0]
 800eff0:	68a3      	ldr	r3, [r4, #8]
 800eff2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eff6:	705a      	strb	r2, [r3, #1]
 800eff8:	68a3      	ldr	r3, [r4, #8]
 800effa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800effe:	709a      	strb	r2, [r3, #2]
 800f000:	68a3      	ldr	r3, [r4, #8]
 800f002:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f006:	70da      	strb	r2, [r3, #3]
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f00e:	711a      	strb	r2, [r3, #4]
 800f010:	68a3      	ldr	r3, [r4, #8]
 800f012:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f016:	715a      	strb	r2, [r3, #5]
 800f018:	68a3      	ldr	r3, [r4, #8]
 800f01a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f01e:	719a      	strb	r2, [r3, #6]
 800f020:	68a3      	ldr	r3, [r4, #8]
 800f022:	f89d 2000 	ldrb.w	r2, [sp]
 800f026:	71da      	strb	r2, [r3, #7]
 800f028:	68a2      	ldr	r2, [r4, #8]
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	3208      	adds	r2, #8
 800f02e:	3308      	adds	r3, #8
 800f030:	2108      	movs	r1, #8
 800f032:	60a2      	str	r2, [r4, #8]
 800f034:	6123      	str	r3, [r4, #16]
 800f036:	7561      	strb	r1, [r4, #21]
 800f038:	7da0      	ldrb	r0, [r4, #22]
 800f03a:	f080 0001 	eor.w	r0, r0, #1
 800f03e:	b002      	add	sp, #8
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	466b      	mov	r3, sp
 800f046:	cb03      	ldmia	r3!, {r0, r1}
 800f048:	68a3      	ldr	r3, [r4, #8]
 800f04a:	6018      	str	r0, [r3, #0]
 800f04c:	6059      	str	r1, [r3, #4]
 800f04e:	e7eb      	b.n	800f028 <ucdr_serialize_double+0x10c>
 800f050:	68a2      	ldr	r2, [r4, #8]
 800f052:	6923      	ldr	r3, [r4, #16]
 800f054:	7da0      	ldrb	r0, [r4, #22]
 800f056:	7567      	strb	r7, [r4, #21]
 800f058:	1b92      	subs	r2, r2, r6
 800f05a:	1b9b      	subs	r3, r3, r6
 800f05c:	f080 0001 	eor.w	r0, r0, #1
 800f060:	60a2      	str	r2, [r4, #8]
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	b002      	add	sp, #8
 800f066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f070:	701a      	strb	r2, [r3, #0]
 800f072:	68a3      	ldr	r3, [r4, #8]
 800f074:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f078:	701a      	strb	r2, [r3, #0]
 800f07a:	68a3      	ldr	r3, [r4, #8]
 800f07c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f080:	701a      	strb	r2, [r3, #0]
 800f082:	68a3      	ldr	r3, [r4, #8]
 800f084:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f088:	701a      	strb	r2, [r3, #0]
 800f08a:	68a3      	ldr	r3, [r4, #8]
 800f08c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	68a3      	ldr	r3, [r4, #8]
 800f094:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	68a3      	ldr	r3, [r4, #8]
 800f09c:	f89d 2000 	ldrb.w	r2, [sp]
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	e78a      	b.n	800efba <ucdr_serialize_double+0x9e>
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	466d      	mov	r5, sp
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	4632      	mov	r2, r6
 800f0ac:	f00e fadd 	bl	801d66a <memcpy>
 800f0b0:	68a0      	ldr	r0, [r4, #8]
 800f0b2:	4642      	mov	r2, r8
 800f0b4:	19a9      	adds	r1, r5, r6
 800f0b6:	f00e fad8 	bl	801d66a <memcpy>
 800f0ba:	e77e      	b.n	800efba <ucdr_serialize_double+0x9e>

0800f0bc <ucdr_serialize_endian_double>:
 800f0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0c0:	460e      	mov	r6, r1
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	2108      	movs	r1, #8
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	ed8d 0b00 	vstr	d0, [sp]
 800f0cc:	f000 fabc 	bl	800f648 <ucdr_buffer_alignment>
 800f0d0:	4601      	mov	r1, r0
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f0d8:	f000 fafa 	bl	800f6d0 <ucdr_advance_buffer>
 800f0dc:	2108      	movs	r1, #8
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f000 fa52 	bl	800f588 <ucdr_check_buffer_available_for>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d14d      	bne.n	800f184 <ucdr_serialize_endian_double+0xc8>
 800f0e8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800f0ec:	42bd      	cmp	r5, r7
 800f0ee:	d944      	bls.n	800f17a <ucdr_serialize_endian_double+0xbe>
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	60a5      	str	r5, [r4, #8]
 800f0f4:	1bed      	subs	r5, r5, r7
 800f0f6:	442b      	add	r3, r5
 800f0f8:	f1c5 0908 	rsb	r9, r5, #8
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	4649      	mov	r1, r9
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fa4d 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800f106:	2800      	cmp	r0, #0
 800f108:	d072      	beq.n	800f1f0 <ucdr_serialize_endian_double+0x134>
 800f10a:	2e01      	cmp	r6, #1
 800f10c:	f000 809b 	beq.w	800f246 <ucdr_serialize_endian_double+0x18a>
 800f110:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f114:	703b      	strb	r3, [r7, #0]
 800f116:	2d00      	cmp	r5, #0
 800f118:	d078      	beq.n	800f20c <ucdr_serialize_endian_double+0x150>
 800f11a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f11e:	707b      	strb	r3, [r7, #1]
 800f120:	2d01      	cmp	r5, #1
 800f122:	d077      	beq.n	800f214 <ucdr_serialize_endian_double+0x158>
 800f124:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f128:	70bb      	strb	r3, [r7, #2]
 800f12a:	2d02      	cmp	r5, #2
 800f12c:	d076      	beq.n	800f21c <ucdr_serialize_endian_double+0x160>
 800f12e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f132:	70fb      	strb	r3, [r7, #3]
 800f134:	2d03      	cmp	r5, #3
 800f136:	d075      	beq.n	800f224 <ucdr_serialize_endian_double+0x168>
 800f138:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f13c:	713b      	strb	r3, [r7, #4]
 800f13e:	2d04      	cmp	r5, #4
 800f140:	d074      	beq.n	800f22c <ucdr_serialize_endian_double+0x170>
 800f142:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f146:	717b      	strb	r3, [r7, #5]
 800f148:	2d05      	cmp	r5, #5
 800f14a:	d073      	beq.n	800f234 <ucdr_serialize_endian_double+0x178>
 800f14c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f150:	71bb      	strb	r3, [r7, #6]
 800f152:	2d06      	cmp	r5, #6
 800f154:	d072      	beq.n	800f23c <ucdr_serialize_endian_double+0x180>
 800f156:	f89d 3000 	ldrb.w	r3, [sp]
 800f15a:	71fb      	strb	r3, [r7, #7]
 800f15c:	6923      	ldr	r3, [r4, #16]
 800f15e:	68a2      	ldr	r2, [r4, #8]
 800f160:	7da0      	ldrb	r0, [r4, #22]
 800f162:	3308      	adds	r3, #8
 800f164:	1b5d      	subs	r5, r3, r5
 800f166:	444a      	add	r2, r9
 800f168:	2308      	movs	r3, #8
 800f16a:	f080 0001 	eor.w	r0, r0, #1
 800f16e:	60a2      	str	r2, [r4, #8]
 800f170:	6125      	str	r5, [r4, #16]
 800f172:	7563      	strb	r3, [r4, #21]
 800f174:	b003      	add	sp, #12
 800f176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f17a:	2108      	movs	r1, #8
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 fa0f 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800f182:	b348      	cbz	r0, 800f1d8 <ucdr_serialize_endian_double+0x11c>
 800f184:	2e01      	cmp	r6, #1
 800f186:	d02d      	beq.n	800f1e4 <ucdr_serialize_endian_double+0x128>
 800f188:	68a3      	ldr	r3, [r4, #8]
 800f18a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f18e:	701a      	strb	r2, [r3, #0]
 800f190:	68a3      	ldr	r3, [r4, #8]
 800f192:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f196:	705a      	strb	r2, [r3, #1]
 800f198:	68a3      	ldr	r3, [r4, #8]
 800f19a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f19e:	709a      	strb	r2, [r3, #2]
 800f1a0:	68a3      	ldr	r3, [r4, #8]
 800f1a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1a6:	70da      	strb	r2, [r3, #3]
 800f1a8:	68a3      	ldr	r3, [r4, #8]
 800f1aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f1ae:	711a      	strb	r2, [r3, #4]
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f1b6:	715a      	strb	r2, [r3, #5]
 800f1b8:	68a3      	ldr	r3, [r4, #8]
 800f1ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f1be:	719a      	strb	r2, [r3, #6]
 800f1c0:	68a3      	ldr	r3, [r4, #8]
 800f1c2:	f89d 2000 	ldrb.w	r2, [sp]
 800f1c6:	71da      	strb	r2, [r3, #7]
 800f1c8:	68a2      	ldr	r2, [r4, #8]
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	3208      	adds	r2, #8
 800f1ce:	3308      	adds	r3, #8
 800f1d0:	2108      	movs	r1, #8
 800f1d2:	60a2      	str	r2, [r4, #8]
 800f1d4:	6123      	str	r3, [r4, #16]
 800f1d6:	7561      	strb	r1, [r4, #21]
 800f1d8:	7da0      	ldrb	r0, [r4, #22]
 800f1da:	f080 0001 	eor.w	r0, r0, #1
 800f1de:	b003      	add	sp, #12
 800f1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e4:	466b      	mov	r3, sp
 800f1e6:	cb03      	ldmia	r3!, {r0, r1}
 800f1e8:	68a3      	ldr	r3, [r4, #8]
 800f1ea:	6018      	str	r0, [r3, #0]
 800f1ec:	6059      	str	r1, [r3, #4]
 800f1ee:	e7eb      	b.n	800f1c8 <ucdr_serialize_endian_double+0x10c>
 800f1f0:	68a2      	ldr	r2, [r4, #8]
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	7da0      	ldrb	r0, [r4, #22]
 800f1f6:	f884 8015 	strb.w	r8, [r4, #21]
 800f1fa:	1b52      	subs	r2, r2, r5
 800f1fc:	1b5b      	subs	r3, r3, r5
 800f1fe:	f080 0001 	eor.w	r0, r0, #1
 800f202:	60a2      	str	r2, [r4, #8]
 800f204:	6123      	str	r3, [r4, #16]
 800f206:	b003      	add	sp, #12
 800f208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f20c:	68a3      	ldr	r3, [r4, #8]
 800f20e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f212:	701a      	strb	r2, [r3, #0]
 800f214:	68a3      	ldr	r3, [r4, #8]
 800f216:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f21a:	701a      	strb	r2, [r3, #0]
 800f21c:	68a3      	ldr	r3, [r4, #8]
 800f21e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	68a3      	ldr	r3, [r4, #8]
 800f226:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f22a:	701a      	strb	r2, [r3, #0]
 800f22c:	68a3      	ldr	r3, [r4, #8]
 800f22e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f232:	701a      	strb	r2, [r3, #0]
 800f234:	68a3      	ldr	r3, [r4, #8]
 800f236:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f23a:	701a      	strb	r2, [r3, #0]
 800f23c:	68a3      	ldr	r3, [r4, #8]
 800f23e:	f89d 2000 	ldrb.w	r2, [sp]
 800f242:	701a      	strb	r2, [r3, #0]
 800f244:	e78a      	b.n	800f15c <ucdr_serialize_endian_double+0xa0>
 800f246:	466e      	mov	r6, sp
 800f248:	4631      	mov	r1, r6
 800f24a:	462a      	mov	r2, r5
 800f24c:	4638      	mov	r0, r7
 800f24e:	f00e fa0c 	bl	801d66a <memcpy>
 800f252:	68a0      	ldr	r0, [r4, #8]
 800f254:	464a      	mov	r2, r9
 800f256:	1971      	adds	r1, r6, r5
 800f258:	f00e fa07 	bl	801d66a <memcpy>
 800f25c:	e77e      	b.n	800f15c <ucdr_serialize_endian_double+0xa0>
 800f25e:	bf00      	nop

0800f260 <ucdr_deserialize_double>:
 800f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f264:	460d      	mov	r5, r1
 800f266:	2108      	movs	r1, #8
 800f268:	4604      	mov	r4, r0
 800f26a:	f000 f9ed 	bl	800f648 <ucdr_buffer_alignment>
 800f26e:	4601      	mov	r1, r0
 800f270:	4620      	mov	r0, r4
 800f272:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f276:	f000 fa2b 	bl	800f6d0 <ucdr_advance_buffer>
 800f27a:	2108      	movs	r1, #8
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 f983 	bl	800f588 <ucdr_check_buffer_available_for>
 800f282:	2800      	cmp	r0, #0
 800f284:	d151      	bne.n	800f32a <ucdr_deserialize_double+0xca>
 800f286:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f28a:	42be      	cmp	r6, r7
 800f28c:	d948      	bls.n	800f320 <ucdr_deserialize_double+0xc0>
 800f28e:	6923      	ldr	r3, [r4, #16]
 800f290:	60a6      	str	r6, [r4, #8]
 800f292:	1bf6      	subs	r6, r6, r7
 800f294:	4433      	add	r3, r6
 800f296:	f1c6 0808 	rsb	r8, r6, #8
 800f29a:	6123      	str	r3, [r4, #16]
 800f29c:	4641      	mov	r1, r8
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f000 f97e 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d06d      	beq.n	800f384 <ucdr_deserialize_double+0x124>
 800f2a8:	7d23      	ldrb	r3, [r4, #20]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	f000 8093 	beq.w	800f3d6 <ucdr_deserialize_double+0x176>
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	702b      	strb	r3, [r5, #0]
 800f2b4:	2e00      	cmp	r6, #0
 800f2b6:	d072      	beq.n	800f39e <ucdr_deserialize_double+0x13e>
 800f2b8:	79bb      	ldrb	r3, [r7, #6]
 800f2ba:	706b      	strb	r3, [r5, #1]
 800f2bc:	2e01      	cmp	r6, #1
 800f2be:	f105 0302 	add.w	r3, r5, #2
 800f2c2:	d070      	beq.n	800f3a6 <ucdr_deserialize_double+0x146>
 800f2c4:	797b      	ldrb	r3, [r7, #5]
 800f2c6:	70ab      	strb	r3, [r5, #2]
 800f2c8:	2e02      	cmp	r6, #2
 800f2ca:	f105 0303 	add.w	r3, r5, #3
 800f2ce:	d06e      	beq.n	800f3ae <ucdr_deserialize_double+0x14e>
 800f2d0:	793b      	ldrb	r3, [r7, #4]
 800f2d2:	70eb      	strb	r3, [r5, #3]
 800f2d4:	2e03      	cmp	r6, #3
 800f2d6:	f105 0304 	add.w	r3, r5, #4
 800f2da:	d06c      	beq.n	800f3b6 <ucdr_deserialize_double+0x156>
 800f2dc:	78fb      	ldrb	r3, [r7, #3]
 800f2de:	712b      	strb	r3, [r5, #4]
 800f2e0:	2e04      	cmp	r6, #4
 800f2e2:	f105 0305 	add.w	r3, r5, #5
 800f2e6:	d06a      	beq.n	800f3be <ucdr_deserialize_double+0x15e>
 800f2e8:	78bb      	ldrb	r3, [r7, #2]
 800f2ea:	716b      	strb	r3, [r5, #5]
 800f2ec:	2e05      	cmp	r6, #5
 800f2ee:	f105 0306 	add.w	r3, r5, #6
 800f2f2:	d068      	beq.n	800f3c6 <ucdr_deserialize_double+0x166>
 800f2f4:	787b      	ldrb	r3, [r7, #1]
 800f2f6:	71ab      	strb	r3, [r5, #6]
 800f2f8:	2e06      	cmp	r6, #6
 800f2fa:	f105 0307 	add.w	r3, r5, #7
 800f2fe:	d066      	beq.n	800f3ce <ucdr_deserialize_double+0x16e>
 800f300:	783b      	ldrb	r3, [r7, #0]
 800f302:	71eb      	strb	r3, [r5, #7]
 800f304:	6923      	ldr	r3, [r4, #16]
 800f306:	68a2      	ldr	r2, [r4, #8]
 800f308:	7da0      	ldrb	r0, [r4, #22]
 800f30a:	3308      	adds	r3, #8
 800f30c:	1b9e      	subs	r6, r3, r6
 800f30e:	2308      	movs	r3, #8
 800f310:	4442      	add	r2, r8
 800f312:	7563      	strb	r3, [r4, #21]
 800f314:	60a2      	str	r2, [r4, #8]
 800f316:	6126      	str	r6, [r4, #16]
 800f318:	f080 0001 	eor.w	r0, r0, #1
 800f31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f320:	2108      	movs	r1, #8
 800f322:	4620      	mov	r0, r4
 800f324:	f000 f93c 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800f328:	b310      	cbz	r0, 800f370 <ucdr_deserialize_double+0x110>
 800f32a:	7d23      	ldrb	r3, [r4, #20]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	68a3      	ldr	r3, [r4, #8]
 800f330:	d023      	beq.n	800f37a <ucdr_deserialize_double+0x11a>
 800f332:	79db      	ldrb	r3, [r3, #7]
 800f334:	702b      	strb	r3, [r5, #0]
 800f336:	68a3      	ldr	r3, [r4, #8]
 800f338:	799b      	ldrb	r3, [r3, #6]
 800f33a:	706b      	strb	r3, [r5, #1]
 800f33c:	68a3      	ldr	r3, [r4, #8]
 800f33e:	795b      	ldrb	r3, [r3, #5]
 800f340:	70ab      	strb	r3, [r5, #2]
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	791b      	ldrb	r3, [r3, #4]
 800f346:	70eb      	strb	r3, [r5, #3]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	78db      	ldrb	r3, [r3, #3]
 800f34c:	712b      	strb	r3, [r5, #4]
 800f34e:	68a3      	ldr	r3, [r4, #8]
 800f350:	789b      	ldrb	r3, [r3, #2]
 800f352:	716b      	strb	r3, [r5, #5]
 800f354:	68a3      	ldr	r3, [r4, #8]
 800f356:	785b      	ldrb	r3, [r3, #1]
 800f358:	71ab      	strb	r3, [r5, #6]
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	71eb      	strb	r3, [r5, #7]
 800f360:	68a2      	ldr	r2, [r4, #8]
 800f362:	6923      	ldr	r3, [r4, #16]
 800f364:	3208      	adds	r2, #8
 800f366:	3308      	adds	r3, #8
 800f368:	2108      	movs	r1, #8
 800f36a:	60a2      	str	r2, [r4, #8]
 800f36c:	6123      	str	r3, [r4, #16]
 800f36e:	7561      	strb	r1, [r4, #21]
 800f370:	7da0      	ldrb	r0, [r4, #22]
 800f372:	f080 0001 	eor.w	r0, r0, #1
 800f376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	606b      	str	r3, [r5, #4]
 800f380:	602a      	str	r2, [r5, #0]
 800f382:	e7ed      	b.n	800f360 <ucdr_deserialize_double+0x100>
 800f384:	68a2      	ldr	r2, [r4, #8]
 800f386:	6923      	ldr	r3, [r4, #16]
 800f388:	7da0      	ldrb	r0, [r4, #22]
 800f38a:	f884 9015 	strb.w	r9, [r4, #21]
 800f38e:	1b92      	subs	r2, r2, r6
 800f390:	1b9b      	subs	r3, r3, r6
 800f392:	60a2      	str	r2, [r4, #8]
 800f394:	6123      	str	r3, [r4, #16]
 800f396:	f080 0001 	eor.w	r0, r0, #1
 800f39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f39e:	68a3      	ldr	r3, [r4, #8]
 800f3a0:	799b      	ldrb	r3, [r3, #6]
 800f3a2:	706b      	strb	r3, [r5, #1]
 800f3a4:	1cab      	adds	r3, r5, #2
 800f3a6:	68a2      	ldr	r2, [r4, #8]
 800f3a8:	7952      	ldrb	r2, [r2, #5]
 800f3aa:	f803 2b01 	strb.w	r2, [r3], #1
 800f3ae:	68a2      	ldr	r2, [r4, #8]
 800f3b0:	7912      	ldrb	r2, [r2, #4]
 800f3b2:	f803 2b01 	strb.w	r2, [r3], #1
 800f3b6:	68a2      	ldr	r2, [r4, #8]
 800f3b8:	78d2      	ldrb	r2, [r2, #3]
 800f3ba:	f803 2b01 	strb.w	r2, [r3], #1
 800f3be:	68a2      	ldr	r2, [r4, #8]
 800f3c0:	7892      	ldrb	r2, [r2, #2]
 800f3c2:	f803 2b01 	strb.w	r2, [r3], #1
 800f3c6:	68a2      	ldr	r2, [r4, #8]
 800f3c8:	7852      	ldrb	r2, [r2, #1]
 800f3ca:	f803 2b01 	strb.w	r2, [r3], #1
 800f3ce:	68a2      	ldr	r2, [r4, #8]
 800f3d0:	7812      	ldrb	r2, [r2, #0]
 800f3d2:	701a      	strb	r2, [r3, #0]
 800f3d4:	e796      	b.n	800f304 <ucdr_deserialize_double+0xa4>
 800f3d6:	4639      	mov	r1, r7
 800f3d8:	4632      	mov	r2, r6
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f00e f945 	bl	801d66a <memcpy>
 800f3e0:	68a1      	ldr	r1, [r4, #8]
 800f3e2:	4642      	mov	r2, r8
 800f3e4:	19a8      	adds	r0, r5, r6
 800f3e6:	f00e f940 	bl	801d66a <memcpy>
 800f3ea:	e78b      	b.n	800f304 <ucdr_deserialize_double+0xa4>

0800f3ec <ucdr_deserialize_endian_double>:
 800f3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f0:	460f      	mov	r7, r1
 800f3f2:	2108      	movs	r1, #8
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	4615      	mov	r5, r2
 800f3f8:	f000 f926 	bl	800f648 <ucdr_buffer_alignment>
 800f3fc:	4601      	mov	r1, r0
 800f3fe:	4620      	mov	r0, r4
 800f400:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f404:	f000 f964 	bl	800f6d0 <ucdr_advance_buffer>
 800f408:	2108      	movs	r1, #8
 800f40a:	4620      	mov	r0, r4
 800f40c:	f000 f8bc 	bl	800f588 <ucdr_check_buffer_available_for>
 800f410:	2800      	cmp	r0, #0
 800f412:	d159      	bne.n	800f4c8 <ucdr_deserialize_endian_double+0xdc>
 800f414:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800f418:	4546      	cmp	r6, r8
 800f41a:	d950      	bls.n	800f4be <ucdr_deserialize_endian_double+0xd2>
 800f41c:	6923      	ldr	r3, [r4, #16]
 800f41e:	60a6      	str	r6, [r4, #8]
 800f420:	eba6 0608 	sub.w	r6, r6, r8
 800f424:	4433      	add	r3, r6
 800f426:	f1c6 0a08 	rsb	sl, r6, #8
 800f42a:	6123      	str	r3, [r4, #16]
 800f42c:	4651      	mov	r1, sl
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 f8b6 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800f434:	2800      	cmp	r0, #0
 800f436:	d073      	beq.n	800f520 <ucdr_deserialize_endian_double+0x134>
 800f438:	2f01      	cmp	r7, #1
 800f43a:	f000 809a 	beq.w	800f572 <ucdr_deserialize_endian_double+0x186>
 800f43e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800f442:	702b      	strb	r3, [r5, #0]
 800f444:	2e00      	cmp	r6, #0
 800f446:	d078      	beq.n	800f53a <ucdr_deserialize_endian_double+0x14e>
 800f448:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f44c:	706b      	strb	r3, [r5, #1]
 800f44e:	2e01      	cmp	r6, #1
 800f450:	f105 0302 	add.w	r3, r5, #2
 800f454:	d075      	beq.n	800f542 <ucdr_deserialize_endian_double+0x156>
 800f456:	f898 3005 	ldrb.w	r3, [r8, #5]
 800f45a:	70ab      	strb	r3, [r5, #2]
 800f45c:	2e02      	cmp	r6, #2
 800f45e:	f105 0303 	add.w	r3, r5, #3
 800f462:	d072      	beq.n	800f54a <ucdr_deserialize_endian_double+0x15e>
 800f464:	f898 3004 	ldrb.w	r3, [r8, #4]
 800f468:	70eb      	strb	r3, [r5, #3]
 800f46a:	2e03      	cmp	r6, #3
 800f46c:	f105 0304 	add.w	r3, r5, #4
 800f470:	d06f      	beq.n	800f552 <ucdr_deserialize_endian_double+0x166>
 800f472:	f898 3003 	ldrb.w	r3, [r8, #3]
 800f476:	712b      	strb	r3, [r5, #4]
 800f478:	2e04      	cmp	r6, #4
 800f47a:	f105 0305 	add.w	r3, r5, #5
 800f47e:	d06c      	beq.n	800f55a <ucdr_deserialize_endian_double+0x16e>
 800f480:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f484:	716b      	strb	r3, [r5, #5]
 800f486:	2e05      	cmp	r6, #5
 800f488:	f105 0306 	add.w	r3, r5, #6
 800f48c:	d069      	beq.n	800f562 <ucdr_deserialize_endian_double+0x176>
 800f48e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f492:	71ab      	strb	r3, [r5, #6]
 800f494:	2e06      	cmp	r6, #6
 800f496:	f105 0307 	add.w	r3, r5, #7
 800f49a:	d066      	beq.n	800f56a <ucdr_deserialize_endian_double+0x17e>
 800f49c:	f898 3000 	ldrb.w	r3, [r8]
 800f4a0:	71eb      	strb	r3, [r5, #7]
 800f4a2:	6923      	ldr	r3, [r4, #16]
 800f4a4:	68a2      	ldr	r2, [r4, #8]
 800f4a6:	7da0      	ldrb	r0, [r4, #22]
 800f4a8:	3308      	adds	r3, #8
 800f4aa:	1b9e      	subs	r6, r3, r6
 800f4ac:	2308      	movs	r3, #8
 800f4ae:	4452      	add	r2, sl
 800f4b0:	7563      	strb	r3, [r4, #21]
 800f4b2:	60a2      	str	r2, [r4, #8]
 800f4b4:	6126      	str	r6, [r4, #16]
 800f4b6:	f080 0001 	eor.w	r0, r0, #1
 800f4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4be:	2108      	movs	r1, #8
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 f86d 	bl	800f5a0 <ucdr_check_final_buffer_behavior>
 800f4c6:	b308      	cbz	r0, 800f50c <ucdr_deserialize_endian_double+0x120>
 800f4c8:	2f01      	cmp	r7, #1
 800f4ca:	68a3      	ldr	r3, [r4, #8]
 800f4cc:	d023      	beq.n	800f516 <ucdr_deserialize_endian_double+0x12a>
 800f4ce:	79db      	ldrb	r3, [r3, #7]
 800f4d0:	702b      	strb	r3, [r5, #0]
 800f4d2:	68a3      	ldr	r3, [r4, #8]
 800f4d4:	799b      	ldrb	r3, [r3, #6]
 800f4d6:	706b      	strb	r3, [r5, #1]
 800f4d8:	68a3      	ldr	r3, [r4, #8]
 800f4da:	795b      	ldrb	r3, [r3, #5]
 800f4dc:	70ab      	strb	r3, [r5, #2]
 800f4de:	68a3      	ldr	r3, [r4, #8]
 800f4e0:	791b      	ldrb	r3, [r3, #4]
 800f4e2:	70eb      	strb	r3, [r5, #3]
 800f4e4:	68a3      	ldr	r3, [r4, #8]
 800f4e6:	78db      	ldrb	r3, [r3, #3]
 800f4e8:	712b      	strb	r3, [r5, #4]
 800f4ea:	68a3      	ldr	r3, [r4, #8]
 800f4ec:	789b      	ldrb	r3, [r3, #2]
 800f4ee:	716b      	strb	r3, [r5, #5]
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	785b      	ldrb	r3, [r3, #1]
 800f4f4:	71ab      	strb	r3, [r5, #6]
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	71eb      	strb	r3, [r5, #7]
 800f4fc:	68a2      	ldr	r2, [r4, #8]
 800f4fe:	6923      	ldr	r3, [r4, #16]
 800f500:	3208      	adds	r2, #8
 800f502:	3308      	adds	r3, #8
 800f504:	2108      	movs	r1, #8
 800f506:	60a2      	str	r2, [r4, #8]
 800f508:	6123      	str	r3, [r4, #16]
 800f50a:	7561      	strb	r1, [r4, #21]
 800f50c:	7da0      	ldrb	r0, [r4, #22]
 800f50e:	f080 0001 	eor.w	r0, r0, #1
 800f512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	606b      	str	r3, [r5, #4]
 800f51c:	602a      	str	r2, [r5, #0]
 800f51e:	e7ed      	b.n	800f4fc <ucdr_deserialize_endian_double+0x110>
 800f520:	68a2      	ldr	r2, [r4, #8]
 800f522:	6923      	ldr	r3, [r4, #16]
 800f524:	7da0      	ldrb	r0, [r4, #22]
 800f526:	f884 9015 	strb.w	r9, [r4, #21]
 800f52a:	1b92      	subs	r2, r2, r6
 800f52c:	1b9b      	subs	r3, r3, r6
 800f52e:	60a2      	str	r2, [r4, #8]
 800f530:	6123      	str	r3, [r4, #16]
 800f532:	f080 0001 	eor.w	r0, r0, #1
 800f536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	799b      	ldrb	r3, [r3, #6]
 800f53e:	706b      	strb	r3, [r5, #1]
 800f540:	1cab      	adds	r3, r5, #2
 800f542:	68a2      	ldr	r2, [r4, #8]
 800f544:	7952      	ldrb	r2, [r2, #5]
 800f546:	f803 2b01 	strb.w	r2, [r3], #1
 800f54a:	68a2      	ldr	r2, [r4, #8]
 800f54c:	7912      	ldrb	r2, [r2, #4]
 800f54e:	f803 2b01 	strb.w	r2, [r3], #1
 800f552:	68a2      	ldr	r2, [r4, #8]
 800f554:	78d2      	ldrb	r2, [r2, #3]
 800f556:	f803 2b01 	strb.w	r2, [r3], #1
 800f55a:	68a2      	ldr	r2, [r4, #8]
 800f55c:	7892      	ldrb	r2, [r2, #2]
 800f55e:	f803 2b01 	strb.w	r2, [r3], #1
 800f562:	68a2      	ldr	r2, [r4, #8]
 800f564:	7852      	ldrb	r2, [r2, #1]
 800f566:	f803 2b01 	strb.w	r2, [r3], #1
 800f56a:	68a2      	ldr	r2, [r4, #8]
 800f56c:	7812      	ldrb	r2, [r2, #0]
 800f56e:	701a      	strb	r2, [r3, #0]
 800f570:	e797      	b.n	800f4a2 <ucdr_deserialize_endian_double+0xb6>
 800f572:	4641      	mov	r1, r8
 800f574:	4632      	mov	r2, r6
 800f576:	4628      	mov	r0, r5
 800f578:	f00e f877 	bl	801d66a <memcpy>
 800f57c:	68a1      	ldr	r1, [r4, #8]
 800f57e:	4652      	mov	r2, sl
 800f580:	19a8      	adds	r0, r5, r6
 800f582:	f00e f872 	bl	801d66a <memcpy>
 800f586:	e78c      	b.n	800f4a2 <ucdr_deserialize_endian_double+0xb6>

0800f588 <ucdr_check_buffer_available_for>:
 800f588:	7d83      	ldrb	r3, [r0, #22]
 800f58a:	b93b      	cbnz	r3, 800f59c <ucdr_check_buffer_available_for+0x14>
 800f58c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f590:	4419      	add	r1, r3
 800f592:	4288      	cmp	r0, r1
 800f594:	bf34      	ite	cc
 800f596:	2000      	movcc	r0, #0
 800f598:	2001      	movcs	r0, #1
 800f59a:	4770      	bx	lr
 800f59c:	2000      	movs	r0, #0
 800f59e:	4770      	bx	lr

0800f5a0 <ucdr_check_final_buffer_behavior>:
 800f5a0:	7d83      	ldrb	r3, [r0, #22]
 800f5a2:	b943      	cbnz	r3, 800f5b6 <ucdr_check_final_buffer_behavior+0x16>
 800f5a4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f5a8:	4291      	cmp	r1, r2
 800f5aa:	b510      	push	{r4, lr}
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	d205      	bcs.n	800f5bc <ucdr_check_final_buffer_behavior+0x1c>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	bd10      	pop	{r4, pc}
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	4770      	bx	lr
 800f5bc:	6982      	ldr	r2, [r0, #24]
 800f5be:	b13a      	cbz	r2, 800f5d0 <ucdr_check_final_buffer_behavior+0x30>
 800f5c0:	69c1      	ldr	r1, [r0, #28]
 800f5c2:	4790      	blx	r2
 800f5c4:	f080 0301 	eor.w	r3, r0, #1
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	75a0      	strb	r0, [r4, #22]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	bd10      	pop	{r4, pc}
 800f5d0:	2001      	movs	r0, #1
 800f5d2:	75a0      	strb	r0, [r4, #22]
 800f5d4:	e7fa      	b.n	800f5cc <ucdr_check_final_buffer_behavior+0x2c>
 800f5d6:	bf00      	nop

0800f5d8 <ucdr_set_on_full_buffer_callback>:
 800f5d8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop

0800f5e0 <ucdr_init_buffer_origin_offset_endian>:
 800f5e0:	b410      	push	{r4}
 800f5e2:	9c01      	ldr	r4, [sp, #4]
 800f5e4:	6001      	str	r1, [r0, #0]
 800f5e6:	440a      	add	r2, r1
 800f5e8:	6042      	str	r2, [r0, #4]
 800f5ea:	190a      	adds	r2, r1, r4
 800f5ec:	441c      	add	r4, r3
 800f5ee:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f5f2:	6082      	str	r2, [r0, #8]
 800f5f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f5f8:	7503      	strb	r3, [r0, #20]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f604:	7542      	strb	r2, [r0, #21]
 800f606:	7582      	strb	r2, [r0, #22]
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop

0800f60c <ucdr_init_buffer_origin_offset>:
 800f60c:	b510      	push	{r4, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	9c04      	ldr	r4, [sp, #16]
 800f612:	9400      	str	r4, [sp, #0]
 800f614:	2401      	movs	r4, #1
 800f616:	9401      	str	r4, [sp, #4]
 800f618:	f7ff ffe2 	bl	800f5e0 <ucdr_init_buffer_origin_offset_endian>
 800f61c:	b002      	add	sp, #8
 800f61e:	bd10      	pop	{r4, pc}

0800f620 <ucdr_init_buffer_origin>:
 800f620:	b510      	push	{r4, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	2400      	movs	r4, #0
 800f626:	9400      	str	r4, [sp, #0]
 800f628:	f7ff fff0 	bl	800f60c <ucdr_init_buffer_origin_offset>
 800f62c:	b002      	add	sp, #8
 800f62e:	bd10      	pop	{r4, pc}

0800f630 <ucdr_init_buffer>:
 800f630:	2300      	movs	r3, #0
 800f632:	f7ff bff5 	b.w	800f620 <ucdr_init_buffer_origin>
 800f636:	bf00      	nop

0800f638 <ucdr_alignment>:
 800f638:	fbb0 f3f1 	udiv	r3, r0, r1
 800f63c:	fb03 0011 	mls	r0, r3, r1, r0
 800f640:	1a08      	subs	r0, r1, r0
 800f642:	3901      	subs	r1, #1
 800f644:	4008      	ands	r0, r1
 800f646:	4770      	bx	lr

0800f648 <ucdr_buffer_alignment>:
 800f648:	7d43      	ldrb	r3, [r0, #21]
 800f64a:	428b      	cmp	r3, r1
 800f64c:	d208      	bcs.n	800f660 <ucdr_buffer_alignment+0x18>
 800f64e:	6900      	ldr	r0, [r0, #16]
 800f650:	fbb0 f3f1 	udiv	r3, r0, r1
 800f654:	fb01 0013 	mls	r0, r1, r3, r0
 800f658:	1a08      	subs	r0, r1, r0
 800f65a:	3901      	subs	r1, #1
 800f65c:	4008      	ands	r0, r1
 800f65e:	4770      	bx	lr
 800f660:	2000      	movs	r0, #0
 800f662:	4770      	bx	lr

0800f664 <ucdr_align_to>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	4604      	mov	r4, r0
 800f668:	460d      	mov	r5, r1
 800f66a:	f7ff ffed 	bl	800f648 <ucdr_buffer_alignment>
 800f66e:	68a3      	ldr	r3, [r4, #8]
 800f670:	6921      	ldr	r1, [r4, #16]
 800f672:	7565      	strb	r5, [r4, #21]
 800f674:	181a      	adds	r2, r3, r0
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	4293      	cmp	r3, r2
 800f67a:	4408      	add	r0, r1
 800f67c:	bf28      	it	cs
 800f67e:	4613      	movcs	r3, r2
 800f680:	6120      	str	r0, [r4, #16]
 800f682:	60a3      	str	r3, [r4, #8]
 800f684:	bd38      	pop	{r3, r4, r5, pc}
 800f686:	bf00      	nop

0800f688 <ucdr_buffer_length>:
 800f688:	6882      	ldr	r2, [r0, #8]
 800f68a:	6800      	ldr	r0, [r0, #0]
 800f68c:	1a10      	subs	r0, r2, r0
 800f68e:	4770      	bx	lr

0800f690 <ucdr_buffer_remaining>:
 800f690:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f694:	1a10      	subs	r0, r2, r0
 800f696:	4770      	bx	lr

0800f698 <ucdr_check_final_buffer_behavior_array>:
 800f698:	b538      	push	{r3, r4, r5, lr}
 800f69a:	7d83      	ldrb	r3, [r0, #22]
 800f69c:	b963      	cbnz	r3, 800f6b8 <ucdr_check_final_buffer_behavior_array+0x20>
 800f69e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	460d      	mov	r5, r1
 800f6a8:	d308      	bcc.n	800f6bc <ucdr_check_final_buffer_behavior_array+0x24>
 800f6aa:	b139      	cbz	r1, 800f6bc <ucdr_check_final_buffer_behavior_array+0x24>
 800f6ac:	6983      	ldr	r3, [r0, #24]
 800f6ae:	b163      	cbz	r3, 800f6ca <ucdr_check_final_buffer_behavior_array+0x32>
 800f6b0:	69c1      	ldr	r1, [r0, #28]
 800f6b2:	4798      	blx	r3
 800f6b4:	75a0      	strb	r0, [r4, #22]
 800f6b6:	b108      	cbz	r0, 800f6bc <ucdr_check_final_buffer_behavior_array+0x24>
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	bd38      	pop	{r3, r4, r5, pc}
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f7ff ffe7 	bl	800f690 <ucdr_buffer_remaining>
 800f6c2:	42a8      	cmp	r0, r5
 800f6c4:	bf28      	it	cs
 800f6c6:	4628      	movcs	r0, r5
 800f6c8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	7583      	strb	r3, [r0, #22]
 800f6ce:	e7f3      	b.n	800f6b8 <ucdr_check_final_buffer_behavior_array+0x20>

0800f6d0 <ucdr_advance_buffer>:
 800f6d0:	b538      	push	{r3, r4, r5, lr}
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	460d      	mov	r5, r1
 800f6d6:	f7ff ff57 	bl	800f588 <ucdr_check_buffer_available_for>
 800f6da:	b178      	cbz	r0, 800f6fc <ucdr_advance_buffer+0x2c>
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	68a2      	ldr	r2, [r4, #8]
 800f6e0:	442b      	add	r3, r5
 800f6e2:	6123      	str	r3, [r4, #16]
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	442a      	add	r2, r5
 800f6e8:	7563      	strb	r3, [r4, #21]
 800f6ea:	60a2      	str	r2, [r4, #8]
 800f6ec:	bd38      	pop	{r3, r4, r5, pc}
 800f6ee:	68a2      	ldr	r2, [r4, #8]
 800f6f0:	6923      	ldr	r3, [r4, #16]
 800f6f2:	4402      	add	r2, r0
 800f6f4:	4403      	add	r3, r0
 800f6f6:	1a2d      	subs	r5, r5, r0
 800f6f8:	60a2      	str	r2, [r4, #8]
 800f6fa:	6123      	str	r3, [r4, #16]
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	2201      	movs	r2, #1
 800f700:	4620      	mov	r0, r4
 800f702:	f7ff ffc9 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 800f706:	2800      	cmp	r0, #0
 800f708:	d1f1      	bne.n	800f6ee <ucdr_advance_buffer+0x1e>
 800f70a:	2301      	movs	r3, #1
 800f70c:	7563      	strb	r3, [r4, #21]
 800f70e:	bd38      	pop	{r3, r4, r5, pc}

0800f710 <micro_ros_string_utilities_set>:
 800f710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f712:	b08b      	sub	sp, #44	@ 0x2c
 800f714:	4604      	mov	r4, r0
 800f716:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800f718:	a801      	add	r0, sp, #4
 800f71a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f71e:	a805      	add	r0, sp, #20
 800f720:	f003 fa9e 	bl	8012c60 <rcutils_get_default_allocator>
 800f724:	4638      	mov	r0, r7
 800f726:	f7f0 fdb3 	bl	8000290 <strlen>
 800f72a:	9e03      	ldr	r6, [sp, #12]
 800f72c:	9b01      	ldr	r3, [sp, #4]
 800f72e:	42b0      	cmp	r0, r6
 800f730:	4605      	mov	r5, r0
 800f732:	d80a      	bhi.n	800f74a <micro_ros_string_utilities_set+0x3a>
 800f734:	1c42      	adds	r2, r0, #1
 800f736:	4639      	mov	r1, r7
 800f738:	4618      	mov	r0, r3
 800f73a:	f00d ff96 	bl	801d66a <memcpy>
 800f73e:	e9c4 0500 	strd	r0, r5, [r4]
 800f742:	4620      	mov	r0, r4
 800f744:	60a6      	str	r6, [r4, #8]
 800f746:	b00b      	add	sp, #44	@ 0x2c
 800f748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74a:	1c46      	adds	r6, r0, #1
 800f74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f74e:	4618      	mov	r0, r3
 800f750:	4631      	mov	r1, r6
 800f752:	9b07      	ldr	r3, [sp, #28]
 800f754:	4798      	blx	r3
 800f756:	4632      	mov	r2, r6
 800f758:	4603      	mov	r3, r0
 800f75a:	e7ec      	b.n	800f736 <micro_ros_string_utilities_set+0x26>

0800f75c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800f75c:	4b04      	ldr	r3, [pc, #16]	@ (800f770 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	b10a      	cbz	r2, 800f766 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800f762:	4803      	ldr	r0, [pc, #12]	@ (800f770 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800f764:	4770      	bx	lr
 800f766:	4a03      	ldr	r2, [pc, #12]	@ (800f774 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800f768:	4801      	ldr	r0, [pc, #4]	@ (800f770 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800f76a:	6812      	ldr	r2, [r2, #0]
 800f76c:	601a      	str	r2, [r3, #0]
 800f76e:	4770      	bx	lr
 800f770:	20002428 	.word	0x20002428
 800f774:	20002488 	.word	0x20002488

0800f778 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800f778:	4a02      	ldr	r2, [pc, #8]	@ (800f784 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800f77a:	4b03      	ldr	r3, [pc, #12]	@ (800f788 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800f77c:	6812      	ldr	r2, [r2, #0]
 800f77e:	601a      	str	r2, [r3, #0]
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	20002488 	.word	0x20002488
 800f788:	20002428 	.word	0x20002428

0800f78c <get_serialized_size_nav_msgs__msg__Odometry>:
 800f78c:	b5d0      	push	{r4, r6, r7, lr}
 800f78e:	4604      	mov	r4, r0
 800f790:	b1c0      	cbz	r0, 800f7c4 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800f792:	460f      	mov	r7, r1
 800f794:	f005 ff1e 	bl	80155d4 <get_serialized_size_std_msgs__msg__Header>
 800f798:	183e      	adds	r6, r7, r0
 800f79a:	2104      	movs	r1, #4
 800f79c:	4630      	mov	r0, r6
 800f79e:	f7ff ff4b 	bl	800f638 <ucdr_alignment>
 800f7a2:	69a3      	ldr	r3, [r4, #24]
 800f7a4:	3305      	adds	r3, #5
 800f7a6:	4403      	add	r3, r0
 800f7a8:	441e      	add	r6, r3
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	f104 0020 	add.w	r0, r4, #32
 800f7b0:	f006 f892 	bl	80158d8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800f7b4:	4406      	add	r6, r0
 800f7b6:	4631      	mov	r1, r6
 800f7b8:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800f7bc:	f006 f8fc 	bl	80159b8 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800f7c0:	1bc0      	subs	r0, r0, r7
 800f7c2:	4430      	add	r0, r6
 800f7c4:	bdd0      	pop	{r4, r6, r7, pc}
 800f7c6:	bf00      	nop

0800f7c8 <_Odometry__cdr_deserialize>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	b082      	sub	sp, #8
 800f7ce:	b351      	cbz	r1, 800f826 <_Odometry__cdr_deserialize+0x5e>
 800f7d0:	4605      	mov	r5, r0
 800f7d2:	f005 ff81 	bl	80156d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f7d6:	6843      	ldr	r3, [r0, #4]
 800f7d8:	4621      	mov	r1, r4
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	4628      	mov	r0, r5
 800f7de:	4798      	blx	r3
 800f7e0:	69e6      	ldr	r6, [r4, #28]
 800f7e2:	6961      	ldr	r1, [r4, #20]
 800f7e4:	ab01      	add	r3, sp, #4
 800f7e6:	4632      	mov	r2, r6
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	f006 fb3d 	bl	8015e68 <ucdr_deserialize_sequence_char>
 800f7ee:	b9a8      	cbnz	r0, 800f81c <_Odometry__cdr_deserialize+0x54>
 800f7f0:	9a01      	ldr	r2, [sp, #4]
 800f7f2:	4296      	cmp	r6, r2
 800f7f4:	d31a      	bcc.n	800f82c <_Odometry__cdr_deserialize+0x64>
 800f7f6:	f006 f8db 	bl	80159b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800f7fa:	6843      	ldr	r3, [r0, #4]
 800f7fc:	f104 0120 	add.w	r1, r4, #32
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	4628      	mov	r0, r5
 800f804:	4798      	blx	r3
 800f806:	f006 f943 	bl	8015a90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800f80a:	6843      	ldr	r3, [r0, #4]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800f812:	4628      	mov	r0, r5
 800f814:	b002      	add	sp, #8
 800f816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f81a:	4718      	bx	r3
 800f81c:	9b01      	ldr	r3, [sp, #4]
 800f81e:	b103      	cbz	r3, 800f822 <_Odometry__cdr_deserialize+0x5a>
 800f820:	3b01      	subs	r3, #1
 800f822:	61a3      	str	r3, [r4, #24]
 800f824:	e7e7      	b.n	800f7f6 <_Odometry__cdr_deserialize+0x2e>
 800f826:	4608      	mov	r0, r1
 800f828:	b002      	add	sp, #8
 800f82a:	bd70      	pop	{r4, r5, r6, pc}
 800f82c:	2101      	movs	r1, #1
 800f82e:	75a8      	strb	r0, [r5, #22]
 800f830:	7569      	strb	r1, [r5, #21]
 800f832:	61a0      	str	r0, [r4, #24]
 800f834:	4628      	mov	r0, r5
 800f836:	f7ff ff15 	bl	800f664 <ucdr_align_to>
 800f83a:	9901      	ldr	r1, [sp, #4]
 800f83c:	4628      	mov	r0, r5
 800f83e:	f7ff ff47 	bl	800f6d0 <ucdr_advance_buffer>
 800f842:	e7d8      	b.n	800f7f6 <_Odometry__cdr_deserialize+0x2e>

0800f844 <_Odometry__cdr_serialize>:
 800f844:	b348      	cbz	r0, 800f89a <_Odometry__cdr_serialize+0x56>
 800f846:	b570      	push	{r4, r5, r6, lr}
 800f848:	4604      	mov	r4, r0
 800f84a:	460e      	mov	r6, r1
 800f84c:	f005 ff44 	bl	80156d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f850:	6843      	ldr	r3, [r0, #4]
 800f852:	4631      	mov	r1, r6
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	4620      	mov	r0, r4
 800f858:	4798      	blx	r3
 800f85a:	6965      	ldr	r5, [r4, #20]
 800f85c:	b1d5      	cbz	r5, 800f894 <_Odometry__cdr_serialize+0x50>
 800f85e:	4628      	mov	r0, r5
 800f860:	f7f0 fd16 	bl	8000290 <strlen>
 800f864:	1c42      	adds	r2, r0, #1
 800f866:	4629      	mov	r1, r5
 800f868:	61a0      	str	r0, [r4, #24]
 800f86a:	4630      	mov	r0, r6
 800f86c:	f006 faea 	bl	8015e44 <ucdr_serialize_sequence_char>
 800f870:	f006 f89e 	bl	80159b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800f874:	6843      	ldr	r3, [r0, #4]
 800f876:	4631      	mov	r1, r6
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	f104 0020 	add.w	r0, r4, #32
 800f87e:	4798      	blx	r3
 800f880:	f006 f906 	bl	8015a90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800f884:	6843      	ldr	r3, [r0, #4]
 800f886:	4631      	mov	r1, r6
 800f888:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f892:	4718      	bx	r3
 800f894:	462a      	mov	r2, r5
 800f896:	4628      	mov	r0, r5
 800f898:	e7e5      	b.n	800f866 <_Odometry__cdr_serialize+0x22>
 800f89a:	4770      	bx	lr

0800f89c <_Odometry__max_serialized_size>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	f10d 0007 	add.w	r0, sp, #7
 800f8a8:	f88d 3007 	strb.w	r3, [sp, #7]
 800f8ac:	f005 ff0a 	bl	80156c4 <max_serialized_size_std_msgs__msg__Header>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	4601      	mov	r1, r0
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	f10d 0007 	add.w	r0, sp, #7
 800f8ba:	f88d 3007 	strb.w	r3, [sp, #7]
 800f8be:	f006 f867 	bl	8015990 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800f8c2:	4404      	add	r4, r0
 800f8c4:	4621      	mov	r1, r4
 800f8c6:	f10d 0007 	add.w	r0, sp, #7
 800f8ca:	f006 f8d1 	bl	8015a70 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800f8ce:	4420      	add	r0, r4
 800f8d0:	b002      	add	sp, #8
 800f8d2:	bd10      	pop	{r4, pc}

0800f8d4 <_Odometry__get_serialized_size>:
 800f8d4:	b5d0      	push	{r4, r6, r7, lr}
 800f8d6:	4604      	mov	r4, r0
 800f8d8:	b1b8      	cbz	r0, 800f90a <_Odometry__get_serialized_size+0x36>
 800f8da:	2100      	movs	r1, #0
 800f8dc:	f005 fe7a 	bl	80155d4 <get_serialized_size_std_msgs__msg__Header>
 800f8e0:	2104      	movs	r1, #4
 800f8e2:	4607      	mov	r7, r0
 800f8e4:	f7ff fea8 	bl	800f638 <ucdr_alignment>
 800f8e8:	69a3      	ldr	r3, [r4, #24]
 800f8ea:	1d5a      	adds	r2, r3, #5
 800f8ec:	19d3      	adds	r3, r2, r7
 800f8ee:	4606      	mov	r6, r0
 800f8f0:	441e      	add	r6, r3
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	f104 0020 	add.w	r0, r4, #32
 800f8f8:	f005 ffee 	bl	80158d8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800f8fc:	4406      	add	r6, r0
 800f8fe:	4631      	mov	r1, r6
 800f900:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800f904:	f006 f858 	bl	80159b8 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800f908:	4430      	add	r0, r6
 800f90a:	bdd0      	pop	{r4, r6, r7, pc}

0800f90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800f90c:	4800      	ldr	r0, [pc, #0]	@ (800f910 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800f90e:	4770      	bx	lr
 800f910:	20002440 	.word	0x20002440

0800f914 <_rclc_check_for_new_data>:
 800f914:	2800      	cmp	r0, #0
 800f916:	d046      	beq.n	800f9a6 <_rclc_check_for_new_data+0x92>
 800f918:	b510      	push	{r4, lr}
 800f91a:	7802      	ldrb	r2, [r0, #0]
 800f91c:	b084      	sub	sp, #16
 800f91e:	4603      	mov	r3, r0
 800f920:	2a0a      	cmp	r2, #10
 800f922:	d842      	bhi.n	800f9aa <_rclc_check_for_new_data+0x96>
 800f924:	e8df f002 	tbb	[pc, r2]
 800f928:	14181212 	.word	0x14181212
 800f92c:	06060614 	.word	0x06060614
 800f930:	2e1a      	.short	0x2e1a
 800f932:	16          	.byte	0x16
 800f933:	00          	.byte	0x00
 800f934:	6a0a      	ldr	r2, [r1, #32]
 800f936:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f938:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f93c:	2000      	movs	r0, #0
 800f93e:	1a12      	subs	r2, r2, r0
 800f940:	bf18      	it	ne
 800f942:	2201      	movne	r2, #1
 800f944:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f948:	b004      	add	sp, #16
 800f94a:	bd10      	pop	{r4, pc}
 800f94c:	680a      	ldr	r2, [r1, #0]
 800f94e:	e7f2      	b.n	800f936 <_rclc_check_for_new_data+0x22>
 800f950:	698a      	ldr	r2, [r1, #24]
 800f952:	e7f0      	b.n	800f936 <_rclc_check_for_new_data+0x22>
 800f954:	688a      	ldr	r2, [r1, #8]
 800f956:	e7ee      	b.n	800f936 <_rclc_check_for_new_data+0x22>
 800f958:	690a      	ldr	r2, [r1, #16]
 800f95a:	e7ec      	b.n	800f936 <_rclc_check_for_new_data+0x22>
 800f95c:	685c      	ldr	r4, [r3, #4]
 800f95e:	4608      	mov	r0, r1
 800f960:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f964:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f968:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f96c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f976:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f97a:	f104 0110 	add.w	r1, r4, #16
 800f97e:	f00a f9d7 	bl	8019d30 <rcl_action_client_wait_set_get_entities_ready>
 800f982:	e7e1      	b.n	800f948 <_rclc_check_for_new_data+0x34>
 800f984:	685c      	ldr	r4, [r3, #4]
 800f986:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f98a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f98e:	e9cd 3200 	strd	r3, r2, [sp]
 800f992:	4608      	mov	r0, r1
 800f994:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f998:	f104 0220 	add.w	r2, r4, #32
 800f99c:	f104 0110 	add.w	r1, r4, #16
 800f9a0:	f00a fbde 	bl	801a160 <rcl_action_server_wait_set_get_entities_ready>
 800f9a4:	e7d0      	b.n	800f948 <_rclc_check_for_new_data+0x34>
 800f9a6:	200b      	movs	r0, #11
 800f9a8:	4770      	bx	lr
 800f9aa:	2001      	movs	r0, #1
 800f9ac:	e7cc      	b.n	800f948 <_rclc_check_for_new_data+0x34>
 800f9ae:	bf00      	nop

0800f9b0 <_rclc_take_new_data>:
 800f9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9b2:	b099      	sub	sp, #100	@ 0x64
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	f000 8088 	beq.w	800faca <_rclc_take_new_data+0x11a>
 800f9ba:	7803      	ldrb	r3, [r0, #0]
 800f9bc:	4604      	mov	r4, r0
 800f9be:	2b0a      	cmp	r3, #10
 800f9c0:	f200 8167 	bhi.w	800fc92 <_rclc_take_new_data+0x2e2>
 800f9c4:	e8df f003 	tbb	[pc, r3]
 800f9c8:	44152d2d 	.word	0x44152d2d
 800f9cc:	19191944 	.word	0x19191944
 800f9d0:	065a      	.short	0x065a
 800f9d2:	15          	.byte	0x15
 800f9d3:	00          	.byte	0x00
 800f9d4:	6840      	ldr	r0, [r0, #4]
 800f9d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f040 80b2 	bne.w	800fb44 <_rclc_take_new_data+0x194>
 800f9e0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 80e4 	bne.w	800fbb2 <_rclc_take_new_data+0x202>
 800f9ea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d16f      	bne.n	800fad2 <_rclc_take_new_data+0x122>
 800f9f2:	2500      	movs	r5, #0
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	b019      	add	sp, #100	@ 0x64
 800f9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f9fc:	6a0b      	ldr	r3, [r1, #32]
 800f9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0f5      	beq.n	800f9f2 <_rclc_take_new_data+0x42>
 800fa06:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800fa0a:	f104 0110 	add.w	r1, r4, #16
 800fa0e:	f001 fea1 	bl	8011754 <rcl_take_request>
 800fa12:	4605      	mov	r5, r0
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d0ec      	beq.n	800f9f2 <_rclc_take_new_data+0x42>
 800fa18:	f240 2359 	movw	r3, #601	@ 0x259
 800fa1c:	4298      	cmp	r0, r3
 800fa1e:	d013      	beq.n	800fa48 <_rclc_take_new_data+0x98>
 800fa20:	e029      	b.n	800fa76 <_rclc_take_new_data+0xc6>
 800fa22:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fa24:	680b      	ldr	r3, [r1, #0]
 800fa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d0e1      	beq.n	800f9f2 <_rclc_take_new_data+0x42>
 800fa2e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800fa32:	2300      	movs	r3, #0
 800fa34:	aa0a      	add	r2, sp, #40	@ 0x28
 800fa36:	f002 f88f 	bl	8011b58 <rcl_take>
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d0d9      	beq.n	800f9f4 <_rclc_take_new_data+0x44>
 800fa40:	f240 1391 	movw	r3, #401	@ 0x191
 800fa44:	4298      	cmp	r0, r3
 800fa46:	d116      	bne.n	800fa76 <_rclc_take_new_data+0xc6>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800fa4e:	e7d1      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fa50:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fa52:	698b      	ldr	r3, [r1, #24]
 800fa54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0ca      	beq.n	800f9f2 <_rclc_take_new_data+0x42>
 800fa5c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800fa60:	f104 0110 	add.w	r1, r4, #16
 800fa64:	f000 fe0c 	bl	8010680 <rcl_take_response>
 800fa68:	4605      	mov	r5, r0
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d0c1      	beq.n	800f9f2 <_rclc_take_new_data+0x42>
 800fa6e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fa72:	4298      	cmp	r0, r3
 800fa74:	d0be      	beq.n	800f9f4 <_rclc_take_new_data+0x44>
 800fa76:	f003 f9e3 	bl	8012e40 <rcutils_reset_error>
 800fa7a:	e7bb      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fa7c:	6840      	ldr	r0, [r0, #4]
 800fa7e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d17d      	bne.n	800fb82 <_rclc_take_new_data+0x1d2>
 800fa86:	69c3      	ldr	r3, [r0, #28]
 800fa88:	b11b      	cbz	r3, 800fa92 <_rclc_take_new_data+0xe2>
 800fa8a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d144      	bne.n	800fb1c <_rclc_take_new_data+0x16c>
 800fa92:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f040 80ac 	bne.w	800fbf4 <_rclc_take_new_data+0x244>
 800fa9c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d0a6      	beq.n	800f9f2 <_rclc_take_new_data+0x42>
 800faa4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800faa6:	a90a      	add	r1, sp, #40	@ 0x28
 800faa8:	3010      	adds	r0, #16
 800faaa:	f00a f819 	bl	8019ae0 <rcl_action_take_result_response>
 800faae:	4605      	mov	r5, r0
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d1e0      	bne.n	800fa76 <_rclc_take_new_data+0xc6>
 800fab4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fab8:	6860      	ldr	r0, [r4, #4]
 800faba:	f00a fc75 	bl	801a3a8 <rclc_action_find_handle_by_result_request_sequence_number>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d098      	beq.n	800f9f4 <_rclc_take_new_data+0x44>
 800fac2:	2301      	movs	r3, #1
 800fac4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800fac8:	e794      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800faca:	250b      	movs	r5, #11
 800facc:	4628      	mov	r0, r5
 800face:	b019      	add	sp, #100	@ 0x64
 800fad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad2:	ae04      	add	r6, sp, #16
 800fad4:	aa0a      	add	r2, sp, #40	@ 0x28
 800fad6:	3010      	adds	r0, #16
 800fad8:	4631      	mov	r1, r6
 800fada:	f00a fa75 	bl	8019fc8 <rcl_action_take_cancel_request>
 800fade:	4605      	mov	r5, r0
 800fae0:	2800      	cmp	r0, #0
 800fae2:	d1c8      	bne.n	800fa76 <_rclc_take_new_data+0xc6>
 800fae4:	6860      	ldr	r0, [r4, #4]
 800fae6:	a90a      	add	r1, sp, #40	@ 0x28
 800fae8:	f00a fc1c 	bl	801a324 <rclc_action_find_goal_handle_by_uuid>
 800faec:	4607      	mov	r7, r0
 800faee:	2800      	cmp	r0, #0
 800faf0:	f000 80bb 	beq.w	800fc6a <_rclc_take_new_data+0x2ba>
 800faf4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800faf8:	2101      	movs	r1, #1
 800fafa:	f00a fb9d 	bl	801a238 <rcl_action_transition_goal_state>
 800fafe:	2803      	cmp	r0, #3
 800fb00:	4684      	mov	ip, r0
 800fb02:	f040 80a7 	bne.w	800fc54 <_rclc_take_new_data+0x2a4>
 800fb06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fb08:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800fb0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb0e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fb12:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb16:	f887 c008 	strb.w	ip, [r7, #8]
 800fb1a:	e76b      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fb1c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fb1e:	3010      	adds	r0, #16
 800fb20:	f00a f85e 	bl	8019be0 <rcl_action_take_feedback>
 800fb24:	4605      	mov	r5, r0
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d1a5      	bne.n	800fa76 <_rclc_take_new_data+0xc6>
 800fb2a:	6860      	ldr	r0, [r4, #4]
 800fb2c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fb2e:	f00a fbf9 	bl	801a324 <rclc_action_find_goal_handle_by_uuid>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2800      	cmp	r0, #0
 800fb36:	f000 80a3 	beq.w	800fc80 <_rclc_take_new_data+0x2d0>
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	6860      	ldr	r0, [r4, #4]
 800fb3e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800fb42:	e7a6      	b.n	800fa92 <_rclc_take_new_data+0xe2>
 800fb44:	f00a fbc8 	bl	801a2d8 <rclc_action_take_goal_handle>
 800fb48:	4606      	mov	r6, r0
 800fb4a:	6860      	ldr	r0, [r4, #4]
 800fb4c:	2e00      	cmp	r6, #0
 800fb4e:	f43f af47 	beq.w	800f9e0 <_rclc_take_new_data+0x30>
 800fb52:	6070      	str	r0, [r6, #4]
 800fb54:	69f2      	ldr	r2, [r6, #28]
 800fb56:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fb5a:	3010      	adds	r0, #16
 800fb5c:	f00a f97c 	bl	8019e58 <rcl_action_take_goal_request>
 800fb60:	4605      	mov	r5, r0
 800fb62:	2800      	cmp	r0, #0
 800fb64:	f040 808e 	bne.w	800fc84 <_rclc_take_new_data+0x2d4>
 800fb68:	69f7      	ldr	r7, [r6, #28]
 800fb6a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fb6c:	7235      	strb	r5, [r6, #8]
 800fb6e:	f8c6 0009 	str.w	r0, [r6, #9]
 800fb72:	f8c6 100d 	str.w	r1, [r6, #13]
 800fb76:	6860      	ldr	r0, [r4, #4]
 800fb78:	f8c6 2011 	str.w	r2, [r6, #17]
 800fb7c:	f8c6 3015 	str.w	r3, [r6, #21]
 800fb80:	e72e      	b.n	800f9e0 <_rclc_take_new_data+0x30>
 800fb82:	aa04      	add	r2, sp, #16
 800fb84:	a90a      	add	r1, sp, #40	@ 0x28
 800fb86:	3010      	adds	r0, #16
 800fb88:	f009 ff32 	bl	80199f0 <rcl_action_take_goal_response>
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	f47f af71 	bne.w	800fa76 <_rclc_take_new_data+0xc6>
 800fb94:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fb98:	6860      	ldr	r0, [r4, #4]
 800fb9a:	f00a fbf3 	bl	801a384 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fb9e:	b130      	cbz	r0, 800fbae <_rclc_take_new_data+0x1fe>
 800fba0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fba4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fba8:	2201      	movs	r2, #1
 800fbaa:	f880 2020 	strb.w	r2, [r0, #32]
 800fbae:	6860      	ldr	r0, [r4, #4]
 800fbb0:	e769      	b.n	800fa86 <_rclc_take_new_data+0xd6>
 800fbb2:	aa04      	add	r2, sp, #16
 800fbb4:	3010      	adds	r0, #16
 800fbb6:	a90a      	add	r1, sp, #40	@ 0x28
 800fbb8:	f00a f9c6 	bl	8019f48 <rcl_action_take_result_request>
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f47f af59 	bne.w	800fa76 <_rclc_take_new_data+0xc6>
 800fbc4:	6860      	ldr	r0, [r4, #4]
 800fbc6:	a904      	add	r1, sp, #16
 800fbc8:	f00a fbac 	bl	801a324 <rclc_action_find_goal_handle_by_uuid>
 800fbcc:	4607      	mov	r7, r0
 800fbce:	b160      	cbz	r0, 800fbea <_rclc_take_new_data+0x23a>
 800fbd0:	ad0a      	add	r5, sp, #40	@ 0x28
 800fbd2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800fbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fbda:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fbde:	f04f 0c02 	mov.w	ip, #2
 800fbe2:	e886 0003 	stmia.w	r6, {r0, r1}
 800fbe6:	f887 c008 	strb.w	ip, [r7, #8]
 800fbea:	6860      	ldr	r0, [r4, #4]
 800fbec:	2300      	movs	r3, #0
 800fbee:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800fbf2:	e6fa      	b.n	800f9ea <_rclc_take_new_data+0x3a>
 800fbf4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800fbf8:	a90a      	add	r1, sp, #40	@ 0x28
 800fbfa:	3010      	adds	r0, #16
 800fbfc:	f009 ffb0 	bl	8019b60 <rcl_action_take_cancel_response>
 800fc00:	4605      	mov	r5, r0
 800fc02:	2800      	cmp	r0, #0
 800fc04:	f47f af37 	bne.w	800fa76 <_rclc_take_new_data+0xc6>
 800fc08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fc0c:	6860      	ldr	r0, [r4, #4]
 800fc0e:	f00a fbdd 	bl	801a3cc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800fc12:	4606      	mov	r6, r0
 800fc14:	6860      	ldr	r0, [r4, #4]
 800fc16:	2e00      	cmp	r6, #0
 800fc18:	f43f af40 	beq.w	800fa9c <_rclc_take_new_data+0xec>
 800fc1c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fc1e:	2701      	movs	r7, #1
 800fc20:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f43f af3a 	beq.w	800fa9c <_rclc_take_new_data+0xec>
 800fc28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fc2a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fc2e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fc32:	f00a fb77 	bl	801a324 <rclc_action_find_goal_handle_by_uuid>
 800fc36:	b138      	cbz	r0, 800fc48 <_rclc_take_new_data+0x298>
 800fc38:	6860      	ldr	r0, [r4, #4]
 800fc3a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fc3c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800fc40:	3501      	adds	r5, #1
 800fc42:	42ab      	cmp	r3, r5
 800fc44:	d8f0      	bhi.n	800fc28 <_rclc_take_new_data+0x278>
 800fc46:	e729      	b.n	800fa9c <_rclc_take_new_data+0xec>
 800fc48:	6860      	ldr	r0, [r4, #4]
 800fc4a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fc4c:	3501      	adds	r5, #1
 800fc4e:	42ab      	cmp	r3, r5
 800fc50:	d8ea      	bhi.n	800fc28 <_rclc_take_new_data+0x278>
 800fc52:	e723      	b.n	800fa9c <_rclc_take_new_data+0xec>
 800fc54:	ab06      	add	r3, sp, #24
 800fc56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc5c:	2103      	movs	r1, #3
 800fc5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fc62:	6860      	ldr	r0, [r4, #4]
 800fc64:	f00a fc28 	bl	801a4b8 <rclc_action_server_goal_cancel_reject>
 800fc68:	e6c4      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fc6a:	ab06      	add	r3, sp, #24
 800fc6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc72:	2102      	movs	r1, #2
 800fc74:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fc78:	6860      	ldr	r0, [r4, #4]
 800fc7a:	f00a fc1d 	bl	801a4b8 <rclc_action_server_goal_cancel_reject>
 800fc7e:	e6b9      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fc80:	6860      	ldr	r0, [r4, #4]
 800fc82:	e706      	b.n	800fa92 <_rclc_take_new_data+0xe2>
 800fc84:	6860      	ldr	r0, [r4, #4]
 800fc86:	4631      	mov	r1, r6
 800fc88:	f00a fb36 	bl	801a2f8 <rclc_action_remove_used_goal_handle>
 800fc8c:	f003 f8d8 	bl	8012e40 <rcutils_reset_error>
 800fc90:	e6b0      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fc92:	2501      	movs	r5, #1
 800fc94:	e6ae      	b.n	800f9f4 <_rclc_take_new_data+0x44>
 800fc96:	bf00      	nop

0800fc98 <_rclc_execute.part.0>:
 800fc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc9a:	7803      	ldrb	r3, [r0, #0]
 800fc9c:	b087      	sub	sp, #28
 800fc9e:	4604      	mov	r4, r0
 800fca0:	2b0a      	cmp	r3, #10
 800fca2:	f200 8136 	bhi.w	800ff12 <_rclc_execute.part.0+0x27a>
 800fca6:	e8df f003 	tbb	[pc, r3]
 800fcaa:	435e      	.short	0x435e
 800fcac:	06a1664f 	.word	0x06a1664f
 800fcb0:	6c1e0606 	.word	0x6c1e0606
 800fcb4:	59          	.byte	0x59
 800fcb5:	00          	.byte	0x00
 800fcb6:	2b06      	cmp	r3, #6
 800fcb8:	f000 8122 	beq.w	800ff00 <_rclc_execute.part.0+0x268>
 800fcbc:	2b07      	cmp	r3, #7
 800fcbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fcc0:	f040 8118 	bne.w	800fef4 <_rclc_execute.part.0+0x25c>
 800fcc4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800fcc8:	6880      	ldr	r0, [r0, #8]
 800fcca:	4798      	blx	r3
 800fccc:	f104 0110 	add.w	r1, r4, #16
 800fcd0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fcd2:	6860      	ldr	r0, [r4, #4]
 800fcd4:	f001 fd8e 	bl	80117f4 <rcl_send_response>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d033      	beq.n	800fd44 <_rclc_execute.part.0+0xac>
 800fcdc:	9005      	str	r0, [sp, #20]
 800fcde:	f003 f8af 	bl	8012e40 <rcutils_reset_error>
 800fce2:	9805      	ldr	r0, [sp, #20]
 800fce4:	e02e      	b.n	800fd44 <_rclc_execute.part.0+0xac>
 800fce6:	6840      	ldr	r0, [r0, #4]
 800fce8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f000 8086 	beq.w	800fdfe <_rclc_execute.part.0+0x166>
 800fcf2:	2600      	movs	r6, #0
 800fcf4:	2701      	movs	r7, #1
 800fcf6:	e004      	b.n	800fd02 <_rclc_execute.part.0+0x6a>
 800fcf8:	f00a fac8 	bl	801a28c <rclc_action_send_result_request>
 800fcfc:	b998      	cbnz	r0, 800fd26 <_rclc_execute.part.0+0x8e>
 800fcfe:	722f      	strb	r7, [r5, #8]
 800fd00:	6860      	ldr	r0, [r4, #4]
 800fd02:	f00a fb75 	bl	801a3f0 <rclc_action_find_first_handle_with_goal_response>
 800fd06:	4605      	mov	r5, r0
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d077      	beq.n	800fdfc <_rclc_execute.part.0+0x164>
 800fd0c:	6863      	ldr	r3, [r4, #4]
 800fd0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd10:	699b      	ldr	r3, [r3, #24]
 800fd12:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800fd16:	f885 6020 	strb.w	r6, [r5, #32]
 800fd1a:	4798      	blx	r3
 800fd1c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800fd20:	4628      	mov	r0, r5
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1e8      	bne.n	800fcf8 <_rclc_execute.part.0+0x60>
 800fd26:	6860      	ldr	r0, [r4, #4]
 800fd28:	4629      	mov	r1, r5
 800fd2a:	f00a fae5 	bl	801a2f8 <rclc_action_remove_used_goal_handle>
 800fd2e:	e7e7      	b.n	800fd00 <_rclc_execute.part.0+0x68>
 800fd30:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800fd34:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800fd38:	2d00      	cmp	r5, #0
 800fd3a:	f000 80c9 	beq.w	800fed0 <_rclc_execute.part.0+0x238>
 800fd3e:	6880      	ldr	r0, [r0, #8]
 800fd40:	4798      	blx	r3
 800fd42:	2000      	movs	r0, #0
 800fd44:	b007      	add	sp, #28
 800fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd48:	6840      	ldr	r0, [r0, #4]
 800fd4a:	f002 f813 	bl	8011d74 <rcl_timer_call>
 800fd4e:	f240 3321 	movw	r3, #801	@ 0x321
 800fd52:	4298      	cmp	r0, r3
 800fd54:	d004      	beq.n	800fd60 <_rclc_execute.part.0+0xc8>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d0f4      	beq.n	800fd44 <_rclc_execute.part.0+0xac>
 800fd5a:	e7bf      	b.n	800fcdc <_rclc_execute.part.0+0x44>
 800fd5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fd5e:	4798      	blx	r3
 800fd60:	2000      	movs	r0, #0
 800fd62:	b007      	add	sp, #28
 800fd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd66:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800fd6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fd6c:	b925      	cbnz	r5, 800fd78 <_rclc_execute.part.0+0xe0>
 800fd6e:	4628      	mov	r0, r5
 800fd70:	4798      	blx	r3
 800fd72:	4628      	mov	r0, r5
 800fd74:	e7e6      	b.n	800fd44 <_rclc_execute.part.0+0xac>
 800fd76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fd78:	68a0      	ldr	r0, [r4, #8]
 800fd7a:	4798      	blx	r3
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	b007      	add	sp, #28
 800fd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd82:	6840      	ldr	r0, [r0, #4]
 800fd84:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fd88:	bb3b      	cbnz	r3, 800fdda <_rclc_execute.part.0+0x142>
 800fd8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d07b      	beq.n	800fe8a <_rclc_execute.part.0+0x1f2>
 800fd92:	f640 0634 	movw	r6, #2100	@ 0x834
 800fd96:	2701      	movs	r7, #1
 800fd98:	e007      	b.n	800fdaa <_rclc_execute.part.0+0x112>
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f00a fb40 	bl	801a420 <rclc_action_server_response_goal_request>
 800fda0:	6860      	ldr	r0, [r4, #4]
 800fda2:	4629      	mov	r1, r5
 800fda4:	f00a faa8 	bl	801a2f8 <rclc_action_remove_used_goal_handle>
 800fda8:	6860      	ldr	r0, [r4, #4]
 800fdaa:	2100      	movs	r1, #0
 800fdac:	f00a fad2 	bl	801a354 <rclc_action_find_first_handle_by_status>
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d066      	beq.n	800fe84 <_rclc_execute.part.0+0x1ec>
 800fdb6:	6863      	ldr	r3, [r4, #4]
 800fdb8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fdba:	699b      	ldr	r3, [r3, #24]
 800fdbc:	4798      	blx	r3
 800fdbe:	42b0      	cmp	r0, r6
 800fdc0:	f04f 0100 	mov.w	r1, #0
 800fdc4:	d1e9      	bne.n	800fd9a <_rclc_execute.part.0+0x102>
 800fdc6:	2101      	movs	r1, #1
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f00a fb29 	bl	801a420 <rclc_action_server_response_goal_request>
 800fdce:	722f      	strb	r7, [r5, #8]
 800fdd0:	e7ea      	b.n	800fda8 <_rclc_execute.part.0+0x110>
 800fdd2:	6848      	ldr	r0, [r1, #4]
 800fdd4:	f00a fa90 	bl	801a2f8 <rclc_action_remove_used_goal_handle>
 800fdd8:	6860      	ldr	r0, [r4, #4]
 800fdda:	f00a fac7 	bl	801a36c <rclc_action_find_first_terminated_handle>
 800fdde:	4601      	mov	r1, r0
 800fde0:	2800      	cmp	r0, #0
 800fde2:	d1f6      	bne.n	800fdd2 <_rclc_execute.part.0+0x13a>
 800fde4:	6860      	ldr	r0, [r4, #4]
 800fde6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800fdea:	e7ce      	b.n	800fd8a <_rclc_execute.part.0+0xf2>
 800fdec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fdee:	6880      	ldr	r0, [r0, #8]
 800fdf0:	f104 0110 	add.w	r1, r4, #16
 800fdf4:	4798      	blx	r3
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	b007      	add	sp, #28
 800fdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdfc:	6860      	ldr	r0, [r4, #4]
 800fdfe:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fe02:	b18b      	cbz	r3, 800fe28 <_rclc_execute.part.0+0x190>
 800fe04:	68c5      	ldr	r5, [r0, #12]
 800fe06:	b32d      	cbz	r5, 800fe54 <_rclc_execute.part.0+0x1bc>
 800fe08:	2600      	movs	r6, #0
 800fe0a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800fe0e:	b143      	cbz	r3, 800fe22 <_rclc_execute.part.0+0x18a>
 800fe10:	69c3      	ldr	r3, [r0, #28]
 800fe12:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800fe16:	b123      	cbz	r3, 800fe22 <_rclc_execute.part.0+0x18a>
 800fe18:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fe1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	4798      	blx	r3
 800fe20:	6860      	ldr	r0, [r4, #4]
 800fe22:	682d      	ldr	r5, [r5, #0]
 800fe24:	2d00      	cmp	r5, #0
 800fe26:	d1f0      	bne.n	800fe0a <_rclc_execute.part.0+0x172>
 800fe28:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fe2c:	b193      	cbz	r3, 800fe54 <_rclc_execute.part.0+0x1bc>
 800fe2e:	68c5      	ldr	r5, [r0, #12]
 800fe30:	b185      	cbz	r5, 800fe54 <_rclc_execute.part.0+0x1bc>
 800fe32:	2600      	movs	r6, #0
 800fe34:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800fe38:	b14b      	cbz	r3, 800fe4e <_rclc_execute.part.0+0x1b6>
 800fe3a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fe3c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800fe40:	b12b      	cbz	r3, 800fe4e <_rclc_execute.part.0+0x1b6>
 800fe42:	4628      	mov	r0, r5
 800fe44:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800fe48:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe4a:	4798      	blx	r3
 800fe4c:	6860      	ldr	r0, [r4, #4]
 800fe4e:	682d      	ldr	r5, [r5, #0]
 800fe50:	2d00      	cmp	r5, #0
 800fe52:	d1ef      	bne.n	800fe34 <_rclc_execute.part.0+0x19c>
 800fe54:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d081      	beq.n	800fd60 <_rclc_execute.part.0+0xc8>
 800fe5c:	2700      	movs	r7, #0
 800fe5e:	e00b      	b.n	800fe78 <_rclc_execute.part.0+0x1e0>
 800fe60:	6863      	ldr	r3, [r4, #4]
 800fe62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fe66:	6a1e      	ldr	r6, [r3, #32]
 800fe68:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800fe6c:	47b0      	blx	r6
 800fe6e:	6860      	ldr	r0, [r4, #4]
 800fe70:	4629      	mov	r1, r5
 800fe72:	f00a fa41 	bl	801a2f8 <rclc_action_remove_used_goal_handle>
 800fe76:	6860      	ldr	r0, [r4, #4]
 800fe78:	f00a fac6 	bl	801a408 <rclc_action_find_first_handle_with_result_response>
 800fe7c:	4605      	mov	r5, r0
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d1ee      	bne.n	800fe60 <_rclc_execute.part.0+0x1c8>
 800fe82:	e76d      	b.n	800fd60 <_rclc_execute.part.0+0xc8>
 800fe84:	6860      	ldr	r0, [r4, #4]
 800fe86:	f880 5020 	strb.w	r5, [r0, #32]
 800fe8a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f43f af66 	beq.w	800fd60 <_rclc_execute.part.0+0xc8>
 800fe94:	68c5      	ldr	r5, [r0, #12]
 800fe96:	b1b5      	cbz	r5, 800fec6 <_rclc_execute.part.0+0x22e>
 800fe98:	2602      	movs	r6, #2
 800fe9a:	e001      	b.n	800fea0 <_rclc_execute.part.0+0x208>
 800fe9c:	682d      	ldr	r5, [r5, #0]
 800fe9e:	b195      	cbz	r5, 800fec6 <_rclc_execute.part.0+0x22e>
 800fea0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d1f9      	bne.n	800fe9c <_rclc_execute.part.0+0x204>
 800fea8:	69c3      	ldr	r3, [r0, #28]
 800feaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800feac:	4628      	mov	r0, r5
 800feae:	4798      	blx	r3
 800feb0:	4603      	mov	r3, r0
 800feb2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800feb6:	4628      	mov	r0, r5
 800feb8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800febc:	b163      	cbz	r3, 800fed8 <_rclc_execute.part.0+0x240>
 800febe:	f00a facf 	bl	801a460 <rclc_action_server_goal_cancel_accept>
 800fec2:	6860      	ldr	r0, [r4, #4]
 800fec4:	e7ea      	b.n	800fe9c <_rclc_execute.part.0+0x204>
 800fec6:	2300      	movs	r3, #0
 800fec8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fecc:	4618      	mov	r0, r3
 800fece:	e739      	b.n	800fd44 <_rclc_execute.part.0+0xac>
 800fed0:	4628      	mov	r0, r5
 800fed2:	4798      	blx	r3
 800fed4:	4628      	mov	r0, r5
 800fed6:	e735      	b.n	800fd44 <_rclc_execute.part.0+0xac>
 800fed8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800feda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fede:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800fee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fee6:	6860      	ldr	r0, [r4, #4]
 800fee8:	2101      	movs	r1, #1
 800feea:	f00a fae5 	bl	801a4b8 <rclc_action_server_goal_cancel_reject>
 800feee:	722e      	strb	r6, [r5, #8]
 800fef0:	6860      	ldr	r0, [r4, #4]
 800fef2:	e7d3      	b.n	800fe9c <_rclc_execute.part.0+0x204>
 800fef4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fef6:	6880      	ldr	r0, [r0, #8]
 800fef8:	4798      	blx	r3
 800fefa:	f104 0110 	add.w	r1, r4, #16
 800fefe:	e6e7      	b.n	800fcd0 <_rclc_execute.part.0+0x38>
 800ff00:	f100 0110 	add.w	r1, r0, #16
 800ff04:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ff06:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ff08:	6880      	ldr	r0, [r0, #8]
 800ff0a:	9105      	str	r1, [sp, #20]
 800ff0c:	4798      	blx	r3
 800ff0e:	9905      	ldr	r1, [sp, #20]
 800ff10:	e6de      	b.n	800fcd0 <_rclc_execute.part.0+0x38>
 800ff12:	2001      	movs	r0, #1
 800ff14:	e716      	b.n	800fd44 <_rclc_execute.part.0+0xac>
 800ff16:	bf00      	nop

0800ff18 <rclc_executor_trigger_any>:
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d03f      	beq.n	800ff9c <rclc_executor_trigger_any+0x84>
 800ff1c:	2900      	cmp	r1, #0
 800ff1e:	d03e      	beq.n	800ff9e <rclc_executor_trigger_any+0x86>
 800ff20:	4603      	mov	r3, r0
 800ff22:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ff26:	2200      	movs	r2, #0
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d037      	beq.n	800ff9c <rclc_executor_trigger_any+0x84>
 800ff2c:	b430      	push	{r4, r5}
 800ff2e:	f893 c000 	ldrb.w	ip, [r3]
 800ff32:	f1bc 0f08 	cmp.w	ip, #8
 800ff36:	d11e      	bne.n	800ff76 <rclc_executor_trigger_any+0x5e>
 800ff38:	685c      	ldr	r4, [r3, #4]
 800ff3a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ff3c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ff40:	d105      	bne.n	800ff4e <rclc_executor_trigger_any+0x36>
 800ff42:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ff46:	b910      	cbnz	r0, 800ff4e <rclc_executor_trigger_any+0x36>
 800ff48:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ff4c:	b128      	cbz	r0, 800ff5a <rclc_executor_trigger_any+0x42>
 800ff4e:	bc30      	pop	{r4, r5}
 800ff50:	4770      	bx	lr
 800ff52:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d1f9      	bne.n	800ff4e <rclc_executor_trigger_any+0x36>
 800ff5a:	3201      	adds	r2, #1
 800ff5c:	4291      	cmp	r1, r2
 800ff5e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ff62:	d018      	beq.n	800ff96 <rclc_executor_trigger_any+0x7e>
 800ff64:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0f0      	beq.n	800ff4e <rclc_executor_trigger_any+0x36>
 800ff6c:	f893 c000 	ldrb.w	ip, [r3]
 800ff70:	f1bc 0f08 	cmp.w	ip, #8
 800ff74:	d0e0      	beq.n	800ff38 <rclc_executor_trigger_any+0x20>
 800ff76:	f1bc 0f09 	cmp.w	ip, #9
 800ff7a:	d1ea      	bne.n	800ff52 <rclc_executor_trigger_any+0x3a>
 800ff7c:	685c      	ldr	r4, [r3, #4]
 800ff7e:	6a25      	ldr	r5, [r4, #32]
 800ff80:	2d00      	cmp	r5, #0
 800ff82:	d1e4      	bne.n	800ff4e <rclc_executor_trigger_any+0x36>
 800ff84:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d1e0      	bne.n	800ff4e <rclc_executor_trigger_any+0x36>
 800ff8c:	3201      	adds	r2, #1
 800ff8e:	4291      	cmp	r1, r2
 800ff90:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ff94:	d1e6      	bne.n	800ff64 <rclc_executor_trigger_any+0x4c>
 800ff96:	2000      	movs	r0, #0
 800ff98:	bc30      	pop	{r4, r5}
 800ff9a:	4770      	bx	lr
 800ff9c:	4770      	bx	lr
 800ff9e:	4608      	mov	r0, r1
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	0000      	movs	r0, r0
	...

0800ffa8 <rclc_executor_init>:
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d05f      	beq.n	801006c <rclc_executor_init+0xc4>
 800ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb0:	460c      	mov	r4, r1
 800ffb2:	b0b2      	sub	sp, #200	@ 0xc8
 800ffb4:	2900      	cmp	r1, #0
 800ffb6:	d051      	beq.n	801005c <rclc_executor_init+0xb4>
 800ffb8:	4605      	mov	r5, r0
 800ffba:	4618      	mov	r0, r3
 800ffbc:	4616      	mov	r6, r2
 800ffbe:	461f      	mov	r7, r3
 800ffc0:	f002 fe5c 	bl	8012c7c <rcutils_allocator_is_valid>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d049      	beq.n	801005c <rclc_executor_init+0xb4>
 800ffc8:	2e00      	cmp	r6, #0
 800ffca:	d047      	beq.n	801005c <rclc_executor_init+0xb4>
 800ffcc:	492c      	ldr	r1, [pc, #176]	@ (8010080 <rclc_executor_init+0xd8>)
 800ffce:	2290      	movs	r2, #144	@ 0x90
 800ffd0:	a80e      	add	r0, sp, #56	@ 0x38
 800ffd2:	f00d fb4a 	bl	801d66a <memcpy>
 800ffd6:	a90e      	add	r1, sp, #56	@ 0x38
 800ffd8:	2290      	movs	r2, #144	@ 0x90
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f00d fb45 	bl	801d66a <memcpy>
 800ffe0:	606c      	str	r4, [r5, #4]
 800ffe2:	4668      	mov	r0, sp
 800ffe4:	60ee      	str	r6, [r5, #12]
 800ffe6:	466c      	mov	r4, sp
 800ffe8:	f002 f836 	bl	8012058 <rcl_get_zero_initialized_wait_set>
 800ffec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffee:	f105 0c18 	add.w	ip, r5, #24
 800fff2:	f8d7 8000 	ldr.w	r8, [r7]
 800fff6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fffc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010002:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010006:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010078 <rclc_executor_init+0xd0>
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	f8cc 3000 	str.w	r3, [ip]
 8010010:	6939      	ldr	r1, [r7, #16]
 8010012:	616f      	str	r7, [r5, #20]
 8010014:	ed85 7b1c 	vstr	d7, [r5, #112]	@ 0x70
 8010018:	01b0      	lsls	r0, r6, #6
 801001a:	47c0      	blx	r8
 801001c:	60a8      	str	r0, [r5, #8]
 801001e:	b338      	cbz	r0, 8010070 <rclc_executor_init+0xc8>
 8010020:	2400      	movs	r4, #0
 8010022:	e000      	b.n	8010026 <rclc_executor_init+0x7e>
 8010024:	68a8      	ldr	r0, [r5, #8]
 8010026:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801002a:	4631      	mov	r1, r6
 801002c:	3401      	adds	r4, #1
 801002e:	f000 fa6b 	bl	8010508 <rclc_executor_handle_init>
 8010032:	42a6      	cmp	r6, r4
 8010034:	d1f6      	bne.n	8010024 <rclc_executor_init+0x7c>
 8010036:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 801003a:	f000 fa5b 	bl	80104f4 <rclc_executor_handle_counters_zero_init>
 801003e:	4a11      	ldr	r2, [pc, #68]	@ (8010084 <rclc_executor_init+0xdc>)
 8010040:	68ab      	ldr	r3, [r5, #8]
 8010042:	2000      	movs	r0, #0
 8010044:	e9c5 2020 	strd	r2, r0, [r5, #128]	@ 0x80
 8010048:	b163      	cbz	r3, 8010064 <rclc_executor_init+0xbc>
 801004a:	696b      	ldr	r3, [r5, #20]
 801004c:	b153      	cbz	r3, 8010064 <rclc_executor_init+0xbc>
 801004e:	68eb      	ldr	r3, [r5, #12]
 8010050:	b143      	cbz	r3, 8010064 <rclc_executor_init+0xbc>
 8010052:	f885 0088 	strb.w	r0, [r5, #136]	@ 0x88
 8010056:	b032      	add	sp, #200	@ 0xc8
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	200b      	movs	r0, #11
 801005e:	b032      	add	sp, #200	@ 0xc8
 8010060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010064:	4618      	mov	r0, r3
 8010066:	b032      	add	sp, #200	@ 0xc8
 8010068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006c:	200b      	movs	r0, #11
 801006e:	4770      	bx	lr
 8010070:	200a      	movs	r0, #10
 8010072:	e7f4      	b.n	801005e <rclc_executor_init+0xb6>
 8010074:	f3af 8000 	nop.w
 8010078:	3b9aca00 	.word	0x3b9aca00
 801007c:	00000000 	.word	0x00000000
 8010080:	08023608 	.word	0x08023608
 8010084:	0800ff19 	.word	0x0800ff19

08010088 <rclc_executor_add_subscription>:
 8010088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008a:	f89d e018 	ldrb.w	lr, [sp, #24]
 801008e:	b338      	cbz	r0, 80100e0 <rclc_executor_add_subscription+0x58>
 8010090:	b331      	cbz	r1, 80100e0 <rclc_executor_add_subscription+0x58>
 8010092:	b32a      	cbz	r2, 80100e0 <rclc_executor_add_subscription+0x58>
 8010094:	b323      	cbz	r3, 80100e0 <rclc_executor_add_subscription+0x58>
 8010096:	4604      	mov	r4, r0
 8010098:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 801009c:	42a8      	cmp	r0, r5
 801009e:	d301      	bcc.n	80100a4 <rclc_executor_add_subscription+0x1c>
 80100a0:	2001      	movs	r0, #1
 80100a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100a4:	68a6      	ldr	r6, [r4, #8]
 80100a6:	0187      	lsls	r7, r0, #6
 80100a8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 80100ac:	2500      	movs	r5, #0
 80100ae:	55f5      	strb	r5, [r6, r7]
 80100b0:	3001      	adds	r0, #1
 80100b2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 80100b6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 80100ba:	2301      	movs	r3, #1
 80100bc:	f104 0518 	add.w	r5, r4, #24
 80100c0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 80100c4:	f88c e001 	strb.w	lr, [ip, #1]
 80100c8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 80100cc:	6120      	str	r0, [r4, #16]
 80100ce:	4628      	mov	r0, r5
 80100d0:	f001 ffd6 	bl	8012080 <rcl_wait_set_is_valid>
 80100d4:	b930      	cbnz	r0, 80100e4 <rclc_executor_add_subscription+0x5c>
 80100d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80100d8:	3301      	adds	r3, #1
 80100da:	2000      	movs	r0, #0
 80100dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80100de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e0:	200b      	movs	r0, #11
 80100e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e4:	4628      	mov	r0, r5
 80100e6:	f001 ffd1 	bl	801208c <rcl_wait_set_fini>
 80100ea:	2800      	cmp	r0, #0
 80100ec:	d0f3      	beq.n	80100d6 <rclc_executor_add_subscription+0x4e>
 80100ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100f0 <rclc_executor_prepare>:
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d044      	beq.n	801017e <rclc_executor_prepare+0x8e>
 80100f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100f6:	f100 0518 	add.w	r5, r0, #24
 80100fa:	b09b      	sub	sp, #108	@ 0x6c
 80100fc:	4604      	mov	r4, r0
 80100fe:	4628      	mov	r0, r5
 8010100:	f001 ffbe 	bl	8012080 <rcl_wait_set_is_valid>
 8010104:	b110      	cbz	r0, 801010c <rclc_executor_prepare+0x1c>
 8010106:	2000      	movs	r0, #0
 8010108:	b01b      	add	sp, #108	@ 0x6c
 801010a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801010c:	4628      	mov	r0, r5
 801010e:	f001 ffbd 	bl	801208c <rcl_wait_set_fini>
 8010112:	2800      	cmp	r0, #0
 8010114:	d130      	bne.n	8010178 <rclc_executor_prepare+0x88>
 8010116:	a80c      	add	r0, sp, #48	@ 0x30
 8010118:	f001 ff9e 	bl	8012058 <rcl_get_zero_initialized_wait_set>
 801011c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010120:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010124:	46ae      	mov	lr, r5
 8010126:	6967      	ldr	r7, [r4, #20]
 8010128:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801012c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010130:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010134:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010138:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801013c:	f8dc 3000 	ldr.w	r3, [ip]
 8010140:	f8ce 3000 	str.w	r3, [lr]
 8010144:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010146:	ae04      	add	r6, sp, #16
 8010148:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	6862      	ldr	r2, [r4, #4]
 801014e:	6033      	str	r3, [r6, #0]
 8010150:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8010152:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8010154:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010158:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 801015c:	e9cd 2100 	strd	r2, r1, [sp]
 8010160:	4628      	mov	r0, r5
 8010162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010164:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8010166:	f002 fa8f 	bl	8012688 <rcl_wait_set_init>
 801016a:	2800      	cmp	r0, #0
 801016c:	d0cc      	beq.n	8010108 <rclc_executor_prepare+0x18>
 801016e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010170:	f002 fe66 	bl	8012e40 <rcutils_reset_error>
 8010174:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010176:	e7c7      	b.n	8010108 <rclc_executor_prepare+0x18>
 8010178:	f002 fe62 	bl	8012e40 <rcutils_reset_error>
 801017c:	e7cb      	b.n	8010116 <rclc_executor_prepare+0x26>
 801017e:	200b      	movs	r0, #11
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop

08010184 <rclc_executor_spin_some.part.0>:
 8010184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010188:	f100 0618 	add.w	r6, r0, #24
 801018c:	b083      	sub	sp, #12
 801018e:	4691      	mov	r9, r2
 8010190:	4698      	mov	r8, r3
 8010192:	4605      	mov	r5, r0
 8010194:	f7ff ffac 	bl	80100f0 <rclc_executor_prepare>
 8010198:	4630      	mov	r0, r6
 801019a:	f002 f843 	bl	8012224 <rcl_wait_set_clear>
 801019e:	4607      	mov	r7, r0
 80101a0:	2800      	cmp	r0, #0
 80101a2:	f040 80ed 	bne.w	8010380 <rclc_executor_spin_some.part.0+0x1fc>
 80101a6:	68eb      	ldr	r3, [r5, #12]
 80101a8:	4604      	mov	r4, r0
 80101aa:	b303      	cbz	r3, 80101ee <rclc_executor_spin_some.part.0+0x6a>
 80101ac:	68a9      	ldr	r1, [r5, #8]
 80101ae:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80101b2:	01a2      	lsls	r2, r4, #6
 80101b4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80101b8:	b1cb      	cbz	r3, 80101ee <rclc_executor_spin_some.part.0+0x6a>
 80101ba:	5c8b      	ldrb	r3, [r1, r2]
 80101bc:	2b0a      	cmp	r3, #10
 80101be:	f200 80d8 	bhi.w	8010372 <rclc_executor_spin_some.part.0+0x1ee>
 80101c2:	e8df f003 	tbb	[pc, r3]
 80101c6:	9c9c      	.short	0x9c9c
 80101c8:	068c8ca7 	.word	0x068c8ca7
 80101cc:	bdc90606 	.word	0xbdc90606
 80101d0:	b2          	.byte	0xb2
 80101d1:	00          	.byte	0x00
 80101d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80101d6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80101da:	4630      	mov	r0, r6
 80101dc:	f002 fb6a 	bl	80128b4 <rcl_wait_set_add_service>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	f040 8086 	bne.w	80102f2 <rclc_executor_spin_some.part.0+0x16e>
 80101e6:	68eb      	ldr	r3, [r5, #12]
 80101e8:	3401      	adds	r4, #1
 80101ea:	429c      	cmp	r4, r3
 80101ec:	d3de      	bcc.n	80101ac <rclc_executor_spin_some.part.0+0x28>
 80101ee:	4643      	mov	r3, r8
 80101f0:	464a      	mov	r2, r9
 80101f2:	4630      	mov	r0, r6
 80101f4:	f002 fb8c 	bl	8012910 <rcl_wait>
 80101f8:	f895 3088 	ldrb.w	r3, [r5, #136]	@ 0x88
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f000 80c7 	beq.w	8010390 <rclc_executor_spin_some.part.0+0x20c>
 8010202:	2b01      	cmp	r3, #1
 8010204:	f040 80b5 	bne.w	8010372 <rclc_executor_spin_some.part.0+0x1ee>
 8010208:	68eb      	ldr	r3, [r5, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	f000 8159 	beq.w	80104c2 <rclc_executor_spin_some.part.0+0x33e>
 8010210:	2400      	movs	r4, #0
 8010212:	46a0      	mov	r8, r4
 8010214:	f240 1991 	movw	r9, #401	@ 0x191
 8010218:	e00a      	b.n	8010230 <rclc_executor_spin_some.part.0+0xac>
 801021a:	f7ff fb7b 	bl	800f914 <_rclc_check_for_new_data>
 801021e:	4604      	mov	r4, r0
 8010220:	b110      	cbz	r0, 8010228 <rclc_executor_spin_some.part.0+0xa4>
 8010222:	4548      	cmp	r0, r9
 8010224:	f040 80b2 	bne.w	801038c <rclc_executor_spin_some.part.0+0x208>
 8010228:	68eb      	ldr	r3, [r5, #12]
 801022a:	4598      	cmp	r8, r3
 801022c:	f080 8126 	bcs.w	801047c <rclc_executor_spin_some.part.0+0x2f8>
 8010230:	68aa      	ldr	r2, [r5, #8]
 8010232:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010236:	4631      	mov	r1, r6
 8010238:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801023c:	f108 0801 	add.w	r8, r8, #1
 8010240:	f1bc 0f00 	cmp.w	ip, #0
 8010244:	d1e9      	bne.n	801021a <rclc_executor_spin_some.part.0+0x96>
 8010246:	4619      	mov	r1, r3
 8010248:	4610      	mov	r0, r2
 801024a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	@ 0x80
 801024e:	4798      	blx	r3
 8010250:	2800      	cmp	r0, #0
 8010252:	f000 809b 	beq.w	801038c <rclc_executor_spin_some.part.0+0x208>
 8010256:	68eb      	ldr	r3, [r5, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 8097 	beq.w	801038c <rclc_executor_spin_some.part.0+0x208>
 801025e:	f04f 0800 	mov.w	r8, #0
 8010262:	f240 1991 	movw	r9, #401	@ 0x191
 8010266:	e009      	b.n	801027c <rclc_executor_spin_some.part.0+0xf8>
 8010268:	f7ff fba2 	bl	800f9b0 <_rclc_take_new_data>
 801026c:	4604      	mov	r4, r0
 801026e:	b110      	cbz	r0, 8010276 <rclc_executor_spin_some.part.0+0xf2>
 8010270:	4548      	cmp	r0, r9
 8010272:	f040 808b 	bne.w	801038c <rclc_executor_spin_some.part.0+0x208>
 8010276:	68eb      	ldr	r3, [r5, #12]
 8010278:	4598      	cmp	r8, r3
 801027a:	d209      	bcs.n	8010290 <rclc_executor_spin_some.part.0+0x10c>
 801027c:	68a8      	ldr	r0, [r5, #8]
 801027e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010282:	4631      	mov	r1, r6
 8010284:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8010288:	f108 0801 	add.w	r8, r8, #1
 801028c:	2a00      	cmp	r2, #0
 801028e:	d1eb      	bne.n	8010268 <rclc_executor_spin_some.part.0+0xe4>
 8010290:	2600      	movs	r6, #0
 8010292:	b97b      	cbnz	r3, 80102b4 <rclc_executor_spin_some.part.0+0x130>
 8010294:	e07a      	b.n	801038c <rclc_executor_spin_some.part.0+0x208>
 8010296:	f812 200c 	ldrb.w	r2, [r2, ip]
 801029a:	2a08      	cmp	r2, #8
 801029c:	f000 80fd 	beq.w	801049a <rclc_executor_spin_some.part.0+0x316>
 80102a0:	2a09      	cmp	r2, #9
 80102a2:	f000 80ef 	beq.w	8010484 <rclc_executor_spin_some.part.0+0x300>
 80102a6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80102aa:	b98a      	cbnz	r2, 80102d0 <rclc_executor_spin_some.part.0+0x14c>
 80102ac:	3601      	adds	r6, #1
 80102ae:	429e      	cmp	r6, r3
 80102b0:	d262      	bcs.n	8010378 <rclc_executor_spin_some.part.0+0x1f4>
 80102b2:	2400      	movs	r4, #0
 80102b4:	68aa      	ldr	r2, [r5, #8]
 80102b6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80102ba:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80102be:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80102c2:	2900      	cmp	r1, #0
 80102c4:	d062      	beq.n	801038c <rclc_executor_spin_some.part.0+0x208>
 80102c6:	7841      	ldrb	r1, [r0, #1]
 80102c8:	2900      	cmp	r1, #0
 80102ca:	d0e4      	beq.n	8010296 <rclc_executor_spin_some.part.0+0x112>
 80102cc:	2901      	cmp	r1, #1
 80102ce:	d1ed      	bne.n	80102ac <rclc_executor_spin_some.part.0+0x128>
 80102d0:	f7ff fce2 	bl	800fc98 <_rclc_execute.part.0>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	f040 80b6 	bne.w	8010446 <rclc_executor_spin_some.part.0+0x2c2>
 80102da:	68eb      	ldr	r3, [r5, #12]
 80102dc:	e7e6      	b.n	80102ac <rclc_executor_spin_some.part.0+0x128>
 80102de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102e6:	4630      	mov	r0, r6
 80102e8:	f002 fab8 	bl	801285c <rcl_wait_set_add_client>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	f43f af7a 	beq.w	80101e6 <rclc_executor_spin_some.part.0+0x62>
 80102f2:	9001      	str	r0, [sp, #4]
 80102f4:	f002 fda4 	bl	8012e40 <rcutils_reset_error>
 80102f8:	9801      	ldr	r0, [sp, #4]
 80102fa:	4607      	mov	r7, r0
 80102fc:	e03c      	b.n	8010378 <rclc_executor_spin_some.part.0+0x1f4>
 80102fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010302:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010306:	4630      	mov	r0, r6
 8010308:	f001 ff60 	bl	80121cc <rcl_wait_set_add_subscription>
 801030c:	2800      	cmp	r0, #0
 801030e:	f43f af6a 	beq.w	80101e6 <rclc_executor_spin_some.part.0+0x62>
 8010312:	e7ee      	b.n	80102f2 <rclc_executor_spin_some.part.0+0x16e>
 8010314:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010318:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801031c:	4630      	mov	r0, r6
 801031e:	f002 fa6d 	bl	80127fc <rcl_wait_set_add_timer>
 8010322:	2800      	cmp	r0, #0
 8010324:	f43f af5f 	beq.w	80101e6 <rclc_executor_spin_some.part.0+0x62>
 8010328:	e7e3      	b.n	80102f2 <rclc_executor_spin_some.part.0+0x16e>
 801032a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801032e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010332:	4630      	mov	r0, r6
 8010334:	f002 fa36 	bl	80127a4 <rcl_wait_set_add_guard_condition>
 8010338:	2800      	cmp	r0, #0
 801033a:	f43f af54 	beq.w	80101e6 <rclc_executor_spin_some.part.0+0x62>
 801033e:	e7d8      	b.n	80102f2 <rclc_executor_spin_some.part.0+0x16e>
 8010340:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010344:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010348:	3110      	adds	r1, #16
 801034a:	4630      	mov	r0, r6
 801034c:	f009 feb4 	bl	801a0b8 <rcl_action_wait_set_add_action_server>
 8010350:	2800      	cmp	r0, #0
 8010352:	f43f af48 	beq.w	80101e6 <rclc_executor_spin_some.part.0+0x62>
 8010356:	e7cc      	b.n	80102f2 <rclc_executor_spin_some.part.0+0x16e>
 8010358:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801035c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010360:	3110      	adds	r1, #16
 8010362:	2300      	movs	r3, #0
 8010364:	4630      	mov	r0, r6
 8010366:	f009 fc7f 	bl	8019c68 <rcl_action_wait_set_add_action_client>
 801036a:	2800      	cmp	r0, #0
 801036c:	f43f af3b 	beq.w	80101e6 <rclc_executor_spin_some.part.0+0x62>
 8010370:	e7bf      	b.n	80102f2 <rclc_executor_spin_some.part.0+0x16e>
 8010372:	f002 fd65 	bl	8012e40 <rcutils_reset_error>
 8010376:	2701      	movs	r7, #1
 8010378:	4638      	mov	r0, r7
 801037a:	b003      	add	sp, #12
 801037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010380:	f002 fd5e 	bl	8012e40 <rcutils_reset_error>
 8010384:	4638      	mov	r0, r7
 8010386:	b003      	add	sp, #12
 8010388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801038c:	4627      	mov	r7, r4
 801038e:	e7f3      	b.n	8010378 <rclc_executor_spin_some.part.0+0x1f4>
 8010390:	68eb      	ldr	r3, [r5, #12]
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 8092 	beq.w	80104bc <rclc_executor_spin_some.part.0+0x338>
 8010398:	2400      	movs	r4, #0
 801039a:	46a0      	mov	r8, r4
 801039c:	f240 1991 	movw	r9, #401	@ 0x191
 80103a0:	e008      	b.n	80103b4 <rclc_executor_spin_some.part.0+0x230>
 80103a2:	f7ff fab7 	bl	800f914 <_rclc_check_for_new_data>
 80103a6:	4604      	mov	r4, r0
 80103a8:	b108      	cbz	r0, 80103ae <rclc_executor_spin_some.part.0+0x22a>
 80103aa:	4548      	cmp	r0, r9
 80103ac:	d1ee      	bne.n	801038c <rclc_executor_spin_some.part.0+0x208>
 80103ae:	68eb      	ldr	r3, [r5, #12]
 80103b0:	4598      	cmp	r8, r3
 80103b2:	d265      	bcs.n	8010480 <rclc_executor_spin_some.part.0+0x2fc>
 80103b4:	68aa      	ldr	r2, [r5, #8]
 80103b6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80103ba:	4631      	mov	r1, r6
 80103bc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80103c0:	f108 0801 	add.w	r8, r8, #1
 80103c4:	f1bc 0f00 	cmp.w	ip, #0
 80103c8:	d1eb      	bne.n	80103a2 <rclc_executor_spin_some.part.0+0x21e>
 80103ca:	4619      	mov	r1, r3
 80103cc:	4610      	mov	r0, r2
 80103ce:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	@ 0x80
 80103d2:	4798      	blx	r3
 80103d4:	2800      	cmp	r0, #0
 80103d6:	d0d9      	beq.n	801038c <rclc_executor_spin_some.part.0+0x208>
 80103d8:	68eb      	ldr	r3, [r5, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d0d6      	beq.n	801038c <rclc_executor_spin_some.part.0+0x208>
 80103de:	f04f 0800 	mov.w	r8, #0
 80103e2:	f240 1991 	movw	r9, #401	@ 0x191
 80103e6:	f240 2a59 	movw	sl, #601	@ 0x259
 80103ea:	e00e      	b.n	801040a <rclc_executor_spin_some.part.0+0x286>
 80103ec:	f813 300b 	ldrb.w	r3, [r3, fp]
 80103f0:	2b08      	cmp	r3, #8
 80103f2:	d033      	beq.n	801045c <rclc_executor_spin_some.part.0+0x2d8>
 80103f4:	2b09      	cmp	r3, #9
 80103f6:	d028      	beq.n	801044a <rclc_executor_spin_some.part.0+0x2c6>
 80103f8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80103fc:	b9fb      	cbnz	r3, 801043e <rclc_executor_spin_some.part.0+0x2ba>
 80103fe:	68eb      	ldr	r3, [r5, #12]
 8010400:	f108 0801 	add.w	r8, r8, #1
 8010404:	4598      	cmp	r8, r3
 8010406:	d2b7      	bcs.n	8010378 <rclc_executor_spin_some.part.0+0x1f4>
 8010408:	2400      	movs	r4, #0
 801040a:	68a8      	ldr	r0, [r5, #8]
 801040c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010410:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8010414:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010418:	2b00      	cmp	r3, #0
 801041a:	d0b7      	beq.n	801038c <rclc_executor_spin_some.part.0+0x208>
 801041c:	4631      	mov	r1, r6
 801041e:	f7ff fac7 	bl	800f9b0 <_rclc_take_new_data>
 8010422:	b118      	cbz	r0, 801042c <rclc_executor_spin_some.part.0+0x2a8>
 8010424:	4548      	cmp	r0, r9
 8010426:	d001      	beq.n	801042c <rclc_executor_spin_some.part.0+0x2a8>
 8010428:	4550      	cmp	r0, sl
 801042a:	d10c      	bne.n	8010446 <rclc_executor_spin_some.part.0+0x2c2>
 801042c:	68ab      	ldr	r3, [r5, #8]
 801042e:	eb13 000b 	adds.w	r0, r3, fp
 8010432:	d021      	beq.n	8010478 <rclc_executor_spin_some.part.0+0x2f4>
 8010434:	7842      	ldrb	r2, [r0, #1]
 8010436:	2a00      	cmp	r2, #0
 8010438:	d0d8      	beq.n	80103ec <rclc_executor_spin_some.part.0+0x268>
 801043a:	2a01      	cmp	r2, #1
 801043c:	d1df      	bne.n	80103fe <rclc_executor_spin_some.part.0+0x27a>
 801043e:	f7ff fc2b 	bl	800fc98 <_rclc_execute.part.0>
 8010442:	2800      	cmp	r0, #0
 8010444:	d0db      	beq.n	80103fe <rclc_executor_spin_some.part.0+0x27a>
 8010446:	4607      	mov	r7, r0
 8010448:	e796      	b.n	8010378 <rclc_executor_spin_some.part.0+0x1f4>
 801044a:	6843      	ldr	r3, [r0, #4]
 801044c:	6a1a      	ldr	r2, [r3, #32]
 801044e:	2a00      	cmp	r2, #0
 8010450:	d1f5      	bne.n	801043e <rclc_executor_spin_some.part.0+0x2ba>
 8010452:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010456:	2b00      	cmp	r3, #0
 8010458:	d0d1      	beq.n	80103fe <rclc_executor_spin_some.part.0+0x27a>
 801045a:	e7f0      	b.n	801043e <rclc_executor_spin_some.part.0+0x2ba>
 801045c:	6843      	ldr	r3, [r0, #4]
 801045e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010460:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8010464:	d1eb      	bne.n	801043e <rclc_executor_spin_some.part.0+0x2ba>
 8010466:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801046a:	2a00      	cmp	r2, #0
 801046c:	d1e7      	bne.n	801043e <rclc_executor_spin_some.part.0+0x2ba>
 801046e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010472:	2b00      	cmp	r3, #0
 8010474:	d0c3      	beq.n	80103fe <rclc_executor_spin_some.part.0+0x27a>
 8010476:	e7e2      	b.n	801043e <rclc_executor_spin_some.part.0+0x2ba>
 8010478:	270b      	movs	r7, #11
 801047a:	e77d      	b.n	8010378 <rclc_executor_spin_some.part.0+0x1f4>
 801047c:	68aa      	ldr	r2, [r5, #8]
 801047e:	e6e2      	b.n	8010246 <rclc_executor_spin_some.part.0+0xc2>
 8010480:	68aa      	ldr	r2, [r5, #8]
 8010482:	e7a2      	b.n	80103ca <rclc_executor_spin_some.part.0+0x246>
 8010484:	6842      	ldr	r2, [r0, #4]
 8010486:	6a11      	ldr	r1, [r2, #32]
 8010488:	2900      	cmp	r1, #0
 801048a:	f47f af21 	bne.w	80102d0 <rclc_executor_spin_some.part.0+0x14c>
 801048e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010492:	2a00      	cmp	r2, #0
 8010494:	f43f af0a 	beq.w	80102ac <rclc_executor_spin_some.part.0+0x128>
 8010498:	e71a      	b.n	80102d0 <rclc_executor_spin_some.part.0+0x14c>
 801049a:	6842      	ldr	r2, [r0, #4]
 801049c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801049e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80104a2:	f47f af15 	bne.w	80102d0 <rclc_executor_spin_some.part.0+0x14c>
 80104a6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80104aa:	2900      	cmp	r1, #0
 80104ac:	f47f af10 	bne.w	80102d0 <rclc_executor_spin_some.part.0+0x14c>
 80104b0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80104b4:	2a00      	cmp	r2, #0
 80104b6:	f43f aef9 	beq.w	80102ac <rclc_executor_spin_some.part.0+0x128>
 80104ba:	e709      	b.n	80102d0 <rclc_executor_spin_some.part.0+0x14c>
 80104bc:	68aa      	ldr	r2, [r5, #8]
 80104be:	461c      	mov	r4, r3
 80104c0:	e783      	b.n	80103ca <rclc_executor_spin_some.part.0+0x246>
 80104c2:	68aa      	ldr	r2, [r5, #8]
 80104c4:	461c      	mov	r4, r3
 80104c6:	e6be      	b.n	8010246 <rclc_executor_spin_some.part.0+0xc2>

080104c8 <rclc_executor_spin_some>:
 80104c8:	b190      	cbz	r0, 80104f0 <rclc_executor_spin_some+0x28>
 80104ca:	b570      	push	{r4, r5, r6, lr}
 80104cc:	4604      	mov	r4, r0
 80104ce:	6840      	ldr	r0, [r0, #4]
 80104d0:	4616      	mov	r6, r2
 80104d2:	461d      	mov	r5, r3
 80104d4:	f000 f9a0 	bl	8010818 <rcl_context_is_valid>
 80104d8:	b130      	cbz	r0, 80104e8 <rclc_executor_spin_some+0x20>
 80104da:	4632      	mov	r2, r6
 80104dc:	462b      	mov	r3, r5
 80104de:	4620      	mov	r0, r4
 80104e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104e4:	f7ff be4e 	b.w	8010184 <rclc_executor_spin_some.part.0>
 80104e8:	f002 fcaa 	bl	8012e40 <rcutils_reset_error>
 80104ec:	2001      	movs	r0, #1
 80104ee:	bd70      	pop	{r4, r5, r6, pc}
 80104f0:	200b      	movs	r0, #11
 80104f2:	4770      	bx	lr

080104f4 <rclc_executor_handle_counters_zero_init>:
 80104f4:	b130      	cbz	r0, 8010504 <rclc_executor_handle_counters_zero_init+0x10>
 80104f6:	b508      	push	{r3, lr}
 80104f8:	2220      	movs	r2, #32
 80104fa:	2100      	movs	r1, #0
 80104fc:	f00c ffd6 	bl	801d4ac <memset>
 8010500:	2000      	movs	r0, #0
 8010502:	bd08      	pop	{r3, pc}
 8010504:	200b      	movs	r0, #11
 8010506:	4770      	bx	lr

08010508 <rclc_executor_handle_init>:
 8010508:	b168      	cbz	r0, 8010526 <rclc_executor_handle_init+0x1e>
 801050a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8010530 <rclc_executor_handle_init+0x28>
 801050e:	2300      	movs	r3, #0
 8010510:	220b      	movs	r2, #11
 8010512:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8010516:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801051a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 801051e:	8002      	strh	r2, [r0, #0]
 8010520:	8703      	strh	r3, [r0, #56]	@ 0x38
 8010522:	4618      	mov	r0, r3
 8010524:	4770      	bx	lr
 8010526:	200b      	movs	r0, #11
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop
 801052c:	f3af 8000 	nop.w
	...

08010538 <rclc_support_init>:
 8010538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801053c:	b086      	sub	sp, #24
 801053e:	b3b8      	cbz	r0, 80105b0 <rclc_support_init+0x78>
 8010540:	461c      	mov	r4, r3
 8010542:	b3ab      	cbz	r3, 80105b0 <rclc_support_init+0x78>
 8010544:	460f      	mov	r7, r1
 8010546:	4690      	mov	r8, r2
 8010548:	4606      	mov	r6, r0
 801054a:	f000 fb69 	bl	8010c20 <rcl_get_zero_initialized_init_options>
 801054e:	f104 030c 	add.w	r3, r4, #12
 8010552:	9005      	str	r0, [sp, #20]
 8010554:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010558:	e88d 0003 	stmia.w	sp, {r0, r1}
 801055c:	a805      	add	r0, sp, #20
 801055e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010562:	f000 fb5f 	bl	8010c24 <rcl_init_options_init>
 8010566:	4605      	mov	r5, r0
 8010568:	b9e0      	cbnz	r0, 80105a4 <rclc_support_init+0x6c>
 801056a:	ad02      	add	r5, sp, #8
 801056c:	4628      	mov	r0, r5
 801056e:	f000 f949 	bl	8010804 <rcl_get_zero_initialized_context>
 8010572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010576:	4633      	mov	r3, r6
 8010578:	e886 0003 	stmia.w	r6, {r0, r1}
 801057c:	aa05      	add	r2, sp, #20
 801057e:	4641      	mov	r1, r8
 8010580:	4638      	mov	r0, r7
 8010582:	f000 fa17 	bl	80109b4 <rcl_init>
 8010586:	4605      	mov	r5, r0
 8010588:	b9b8      	cbnz	r0, 80105ba <rclc_support_init+0x82>
 801058a:	60b4      	str	r4, [r6, #8]
 801058c:	4622      	mov	r2, r4
 801058e:	f106 010c 	add.w	r1, r6, #12
 8010592:	2003      	movs	r0, #3
 8010594:	f001 fb6a 	bl	8011c6c <rcl_clock_init>
 8010598:	4605      	mov	r5, r0
 801059a:	b970      	cbnz	r0, 80105ba <rclc_support_init+0x82>
 801059c:	a805      	add	r0, sp, #20
 801059e:	f000 fb9d 	bl	8010cdc <rcl_init_options_fini>
 80105a2:	b108      	cbz	r0, 80105a8 <rclc_support_init+0x70>
 80105a4:	f002 fc4c 	bl	8012e40 <rcutils_reset_error>
 80105a8:	4628      	mov	r0, r5
 80105aa:	b006      	add	sp, #24
 80105ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b0:	250b      	movs	r5, #11
 80105b2:	4628      	mov	r0, r5
 80105b4:	b006      	add	sp, #24
 80105b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ba:	f002 fc41 	bl	8012e40 <rcutils_reset_error>
 80105be:	a805      	add	r0, sp, #20
 80105c0:	f000 fb8c 	bl	8010cdc <rcl_init_options_fini>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d0ef      	beq.n	80105a8 <rclc_support_init+0x70>
 80105c8:	e7ec      	b.n	80105a4 <rclc_support_init+0x6c>
 80105ca:	bf00      	nop

080105cc <rcl_client_get_rmw_handle>:
 80105cc:	b118      	cbz	r0, 80105d6 <rcl_client_get_rmw_handle+0xa>
 80105ce:	6800      	ldr	r0, [r0, #0]
 80105d0:	b108      	cbz	r0, 80105d6 <rcl_client_get_rmw_handle+0xa>
 80105d2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80105d6:	4770      	bx	lr

080105d8 <rcl_send_request>:
 80105d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105da:	b08b      	sub	sp, #44	@ 0x2c
 80105dc:	b1e8      	cbz	r0, 801061a <rcl_send_request+0x42>
 80105de:	4604      	mov	r4, r0
 80105e0:	6800      	ldr	r0, [r0, #0]
 80105e2:	b1d0      	cbz	r0, 801061a <rcl_send_request+0x42>
 80105e4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80105e8:	b1bb      	cbz	r3, 801061a <rcl_send_request+0x42>
 80105ea:	460f      	mov	r7, r1
 80105ec:	b1d1      	cbz	r1, 8010624 <rcl_send_request+0x4c>
 80105ee:	4616      	mov	r6, r2
 80105f0:	b1c2      	cbz	r2, 8010624 <rcl_send_request+0x4c>
 80105f2:	2105      	movs	r1, #5
 80105f4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80105f8:	f002 fb4e 	bl	8012c98 <__atomic_load_8>
 80105fc:	6823      	ldr	r3, [r4, #0]
 80105fe:	e9c6 0100 	strd	r0, r1, [r6]
 8010602:	4632      	mov	r2, r6
 8010604:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010608:	4639      	mov	r1, r7
 801060a:	f003 fc93 	bl	8013f34 <rmw_send_request>
 801060e:	4605      	mov	r5, r0
 8010610:	b160      	cbz	r0, 801062c <rcl_send_request+0x54>
 8010612:	2501      	movs	r5, #1
 8010614:	4628      	mov	r0, r5
 8010616:	b00b      	add	sp, #44	@ 0x2c
 8010618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801061a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801061e:	4628      	mov	r0, r5
 8010620:	b00b      	add	sp, #44	@ 0x2c
 8010622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010624:	250b      	movs	r5, #11
 8010626:	4628      	mov	r0, r5
 8010628:	b00b      	add	sp, #44	@ 0x2c
 801062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062c:	6820      	ldr	r0, [r4, #0]
 801062e:	2305      	movs	r3, #5
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010636:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801063a:	f002 fb99 	bl	8012d70 <__atomic_exchange_8>
 801063e:	6823      	ldr	r3, [r4, #0]
 8010640:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010644:	2a00      	cmp	r2, #0
 8010646:	d0e5      	beq.n	8010614 <rcl_send_request+0x3c>
 8010648:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801064c:	a905      	add	r1, sp, #20
 801064e:	f002 ff5b 	bl	8013508 <rmw_get_gid_for_client>
 8010652:	b970      	cbnz	r0, 8010672 <rcl_send_request+0x9a>
 8010654:	6822      	ldr	r2, [r4, #0]
 8010656:	ab06      	add	r3, sp, #24
 8010658:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 801065c:	9302      	str	r3, [sp, #8]
 801065e:	4629      	mov	r1, r5
 8010660:	e9d6 4500 	ldrd	r4, r5, [r6]
 8010664:	463a      	mov	r2, r7
 8010666:	e9cd 4500 	strd	r4, r5, [sp]
 801066a:	f001 f8fd 	bl	8011868 <rcl_send_service_event_message>
 801066e:	4605      	mov	r5, r0
 8010670:	e7d0      	b.n	8010614 <rcl_send_request+0x3c>
 8010672:	f000 f8b3 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010676:	4605      	mov	r5, r0
 8010678:	e7cc      	b.n	8010614 <rcl_send_request+0x3c>
 801067a:	bf00      	nop
 801067c:	0000      	movs	r0, r0
	...

08010680 <rcl_take_response>:
 8010680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010682:	468e      	mov	lr, r1
 8010684:	460c      	mov	r4, r1
 8010686:	4616      	mov	r6, r2
 8010688:	4605      	mov	r5, r0
 801068a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801068e:	b095      	sub	sp, #84	@ 0x54
 8010690:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8010694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010698:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801069c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80106a0:	2d00      	cmp	r5, #0
 80106a2:	d042      	beq.n	801072a <rcl_take_response+0xaa>
 80106a4:	682b      	ldr	r3, [r5, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d03f      	beq.n	801072a <rcl_take_response+0xaa>
 80106aa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d03b      	beq.n	801072a <rcl_take_response+0xaa>
 80106b2:	2e00      	cmp	r6, #0
 80106b4:	d03c      	beq.n	8010730 <rcl_take_response+0xb0>
 80106b6:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8010748 <rcl_take_response+0xc8>
 80106ba:	2300      	movs	r3, #0
 80106bc:	f88d 3013 	strb.w	r3, [sp, #19]
 80106c0:	4632      	mov	r2, r6
 80106c2:	f10d 0313 	add.w	r3, sp, #19
 80106c6:	a90a      	add	r1, sp, #40	@ 0x28
 80106c8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80106cc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80106d0:	f003 fd38 	bl	8014144 <rmw_take_response>
 80106d4:	4607      	mov	r7, r0
 80106d6:	bb68      	cbnz	r0, 8010734 <rcl_take_response+0xb4>
 80106d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80106dc:	b363      	cbz	r3, 8010738 <rcl_take_response+0xb8>
 80106de:	682b      	ldr	r3, [r5, #0]
 80106e0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80106e4:	b19a      	cbz	r2, 801070e <rcl_take_response+0x8e>
 80106e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80106ea:	a905      	add	r1, sp, #20
 80106ec:	f002 ff0c 	bl	8013508 <rmw_get_gid_for_client>
 80106f0:	bb28      	cbnz	r0, 801073e <rcl_take_response+0xbe>
 80106f2:	682a      	ldr	r2, [r5, #0]
 80106f4:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80106f8:	4632      	mov	r2, r6
 80106fa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	@ 0x48
 80106fe:	ab06      	add	r3, sp, #24
 8010700:	e9cd 6700 	strd	r6, r7, [sp]
 8010704:	9302      	str	r3, [sp, #8]
 8010706:	2103      	movs	r1, #3
 8010708:	f001 f8ae 	bl	8011868 <rcl_send_service_event_message>
 801070c:	4607      	mov	r7, r0
 801070e:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8010712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010716:	46a4      	mov	ip, r4
 8010718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801071c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010720:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010724:	4638      	mov	r0, r7
 8010726:	b015      	add	sp, #84	@ 0x54
 8010728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801072a:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 801072e:	e7ee      	b.n	801070e <rcl_take_response+0x8e>
 8010730:	270b      	movs	r7, #11
 8010732:	e7ec      	b.n	801070e <rcl_take_response+0x8e>
 8010734:	2701      	movs	r7, #1
 8010736:	e7ea      	b.n	801070e <rcl_take_response+0x8e>
 8010738:	f240 17f5 	movw	r7, #501	@ 0x1f5
 801073c:	e7e7      	b.n	801070e <rcl_take_response+0x8e>
 801073e:	f000 f84d 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010742:	4607      	mov	r7, r0
 8010744:	e7e3      	b.n	801070e <rcl_take_response+0x8e>
 8010746:	bf00      	nop
	...

08010750 <rcl_client_is_valid>:
 8010750:	b130      	cbz	r0, 8010760 <rcl_client_is_valid+0x10>
 8010752:	6800      	ldr	r0, [r0, #0]
 8010754:	b120      	cbz	r0, 8010760 <rcl_client_is_valid+0x10>
 8010756:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801075a:	3800      	subs	r0, #0
 801075c:	bf18      	it	ne
 801075e:	2001      	movne	r0, #1
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop

08010764 <rclc_node_init_default>:
 8010764:	b3b8      	cbz	r0, 80107d6 <rclc_node_init_default+0x72>
 8010766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801076a:	460d      	mov	r5, r1
 801076c:	b0a3      	sub	sp, #140	@ 0x8c
 801076e:	b329      	cbz	r1, 80107bc <rclc_node_init_default+0x58>
 8010770:	4616      	mov	r6, r2
 8010772:	b31a      	cbz	r2, 80107bc <rclc_node_init_default+0x58>
 8010774:	461f      	mov	r7, r3
 8010776:	b30b      	cbz	r3, 80107bc <rclc_node_init_default+0x58>
 8010778:	f10d 0810 	add.w	r8, sp, #16
 801077c:	4604      	mov	r4, r0
 801077e:	4640      	mov	r0, r8
 8010780:	f000 fb56 	bl	8010e30 <rcl_get_zero_initialized_node>
 8010784:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010788:	f10d 0918 	add.w	r9, sp, #24
 801078c:	e884 0003 	stmia.w	r4, {r0, r1}
 8010790:	4648      	mov	r0, r9
 8010792:	f000 fce5 	bl	8011160 <rcl_node_get_default_options>
 8010796:	4640      	mov	r0, r8
 8010798:	f000 fb4a 	bl	8010e30 <rcl_get_zero_initialized_node>
 801079c:	f8cd 9000 	str.w	r9, [sp]
 80107a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80107a4:	463b      	mov	r3, r7
 80107a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80107aa:	4632      	mov	r2, r6
 80107ac:	4629      	mov	r1, r5
 80107ae:	4620      	mov	r0, r4
 80107b0:	f000 fb48 	bl	8010e44 <rcl_node_init>
 80107b4:	b930      	cbnz	r0, 80107c4 <rclc_node_init_default+0x60>
 80107b6:	b023      	add	sp, #140	@ 0x8c
 80107b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107bc:	200b      	movs	r0, #11
 80107be:	b023      	add	sp, #140	@ 0x8c
 80107c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107c4:	9003      	str	r0, [sp, #12]
 80107c6:	f002 fb3b 	bl	8012e40 <rcutils_reset_error>
 80107ca:	f002 fb39 	bl	8012e40 <rcutils_reset_error>
 80107ce:	9803      	ldr	r0, [sp, #12]
 80107d0:	b023      	add	sp, #140	@ 0x8c
 80107d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107d6:	200b      	movs	r0, #11
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop

080107dc <rcl_convert_rmw_ret_to_rcl_ret>:
 80107dc:	280b      	cmp	r0, #11
 80107de:	dc0d      	bgt.n	80107fc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80107e0:	2800      	cmp	r0, #0
 80107e2:	db09      	blt.n	80107f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80107e4:	280b      	cmp	r0, #11
 80107e6:	d807      	bhi.n	80107f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80107e8:	e8df f000 	tbb	[pc, r0]
 80107ec:	07060607 	.word	0x07060607
 80107f0:	06060606 	.word	0x06060606
 80107f4:	07070606 	.word	0x07070606
 80107f8:	2001      	movs	r0, #1
 80107fa:	4770      	bx	lr
 80107fc:	28cb      	cmp	r0, #203	@ 0xcb
 80107fe:	bf18      	it	ne
 8010800:	2001      	movne	r0, #1
 8010802:	4770      	bx	lr

08010804 <rcl_get_zero_initialized_context>:
 8010804:	4a03      	ldr	r2, [pc, #12]	@ (8010814 <rcl_get_zero_initialized_context+0x10>)
 8010806:	4603      	mov	r3, r0
 8010808:	e892 0003 	ldmia.w	r2, {r0, r1}
 801080c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010810:	4618      	mov	r0, r3
 8010812:	4770      	bx	lr
 8010814:	08023698 	.word	0x08023698

08010818 <rcl_context_is_valid>:
 8010818:	b118      	cbz	r0, 8010822 <rcl_context_is_valid+0xa>
 801081a:	6840      	ldr	r0, [r0, #4]
 801081c:	3800      	subs	r0, #0
 801081e:	bf18      	it	ne
 8010820:	2001      	movne	r0, #1
 8010822:	4770      	bx	lr

08010824 <__cleanup_context>:
 8010824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010828:	4606      	mov	r6, r0
 801082a:	6800      	ldr	r0, [r0, #0]
 801082c:	2300      	movs	r3, #0
 801082e:	6073      	str	r3, [r6, #4]
 8010830:	2800      	cmp	r0, #0
 8010832:	d049      	beq.n	80108c8 <__cleanup_context+0xa4>
 8010834:	6947      	ldr	r7, [r0, #20]
 8010836:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801083a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801083e:	b137      	cbz	r7, 801084e <__cleanup_context+0x2a>
 8010840:	3014      	adds	r0, #20
 8010842:	f000 fa4b 	bl	8010cdc <rcl_init_options_fini>
 8010846:	4607      	mov	r7, r0
 8010848:	2800      	cmp	r0, #0
 801084a:	d144      	bne.n	80108d6 <__cleanup_context+0xb2>
 801084c:	6830      	ldr	r0, [r6, #0]
 801084e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010850:	b143      	cbz	r3, 8010864 <__cleanup_context+0x40>
 8010852:	3028      	adds	r0, #40	@ 0x28
 8010854:	f003 f884 	bl	8013960 <rmw_context_fini>
 8010858:	b118      	cbz	r0, 8010862 <__cleanup_context+0x3e>
 801085a:	2f00      	cmp	r7, #0
 801085c:	d03e      	beq.n	80108dc <__cleanup_context+0xb8>
 801085e:	f002 faef 	bl	8012e40 <rcutils_reset_error>
 8010862:	6830      	ldr	r0, [r6, #0]
 8010864:	6a03      	ldr	r3, [r0, #32]
 8010866:	b1db      	cbz	r3, 80108a0 <__cleanup_context+0x7c>
 8010868:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801086c:	2a01      	cmp	r2, #1
 801086e:	f17c 0100 	sbcs.w	r1, ip, #0
 8010872:	db11      	blt.n	8010898 <__cleanup_context+0x74>
 8010874:	2400      	movs	r4, #0
 8010876:	4625      	mov	r5, r4
 8010878:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801087c:	4649      	mov	r1, r9
 801087e:	b1b8      	cbz	r0, 80108b0 <__cleanup_context+0x8c>
 8010880:	47c0      	blx	r8
 8010882:	6833      	ldr	r3, [r6, #0]
 8010884:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010888:	3401      	adds	r4, #1
 801088a:	f145 0500 	adc.w	r5, r5, #0
 801088e:	4294      	cmp	r4, r2
 8010890:	eb75 010c 	sbcs.w	r1, r5, ip
 8010894:	6a1b      	ldr	r3, [r3, #32]
 8010896:	dbef      	blt.n	8010878 <__cleanup_context+0x54>
 8010898:	4618      	mov	r0, r3
 801089a:	4649      	mov	r1, r9
 801089c:	47c0      	blx	r8
 801089e:	6830      	ldr	r0, [r6, #0]
 80108a0:	4649      	mov	r1, r9
 80108a2:	47c0      	blx	r8
 80108a4:	2300      	movs	r3, #0
 80108a6:	e9c6 3300 	strd	r3, r3, [r6]
 80108aa:	4638      	mov	r0, r7
 80108ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108b0:	3401      	adds	r4, #1
 80108b2:	f145 0500 	adc.w	r5, r5, #0
 80108b6:	4294      	cmp	r4, r2
 80108b8:	eb75 010c 	sbcs.w	r1, r5, ip
 80108bc:	dbdc      	blt.n	8010878 <__cleanup_context+0x54>
 80108be:	4618      	mov	r0, r3
 80108c0:	4649      	mov	r1, r9
 80108c2:	47c0      	blx	r8
 80108c4:	6830      	ldr	r0, [r6, #0]
 80108c6:	e7eb      	b.n	80108a0 <__cleanup_context+0x7c>
 80108c8:	4607      	mov	r7, r0
 80108ca:	2300      	movs	r3, #0
 80108cc:	e9c6 3300 	strd	r3, r3, [r6]
 80108d0:	4638      	mov	r0, r7
 80108d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d6:	f002 fab3 	bl	8012e40 <rcutils_reset_error>
 80108da:	e7b7      	b.n	801084c <__cleanup_context+0x28>
 80108dc:	f7ff ff7e 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 80108e0:	4607      	mov	r7, r0
 80108e2:	e7bc      	b.n	801085e <__cleanup_context+0x3a>

080108e4 <rclc_publisher_init_default>:
 80108e4:	b368      	cbz	r0, 8010942 <rclc_publisher_init_default+0x5e>
 80108e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ea:	460d      	mov	r5, r1
 80108ec:	b0a0      	sub	sp, #128	@ 0x80
 80108ee:	b321      	cbz	r1, 801093a <rclc_publisher_init_default+0x56>
 80108f0:	4616      	mov	r6, r2
 80108f2:	b312      	cbz	r2, 801093a <rclc_publisher_init_default+0x56>
 80108f4:	461f      	mov	r7, r3
 80108f6:	b303      	cbz	r3, 801093a <rclc_publisher_init_default+0x56>
 80108f8:	4604      	mov	r4, r0
 80108fa:	f000 fd05 	bl	8011308 <rcl_get_zero_initialized_publisher>
 80108fe:	f10d 0810 	add.w	r8, sp, #16
 8010902:	6020      	str	r0, [r4, #0]
 8010904:	4640      	mov	r0, r8
 8010906:	f000 fd9d 	bl	8011444 <rcl_publisher_get_default_options>
 801090a:	490f      	ldr	r1, [pc, #60]	@ (8010948 <rclc_publisher_init_default+0x64>)
 801090c:	2250      	movs	r2, #80	@ 0x50
 801090e:	4640      	mov	r0, r8
 8010910:	f00c feab 	bl	801d66a <memcpy>
 8010914:	f8cd 8000 	str.w	r8, [sp]
 8010918:	463b      	mov	r3, r7
 801091a:	4632      	mov	r2, r6
 801091c:	4629      	mov	r1, r5
 801091e:	4620      	mov	r0, r4
 8010920:	f000 fcf8 	bl	8011314 <rcl_publisher_init>
 8010924:	b910      	cbnz	r0, 801092c <rclc_publisher_init_default+0x48>
 8010926:	b020      	add	sp, #128	@ 0x80
 8010928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801092c:	9003      	str	r0, [sp, #12]
 801092e:	f002 fa87 	bl	8012e40 <rcutils_reset_error>
 8010932:	9803      	ldr	r0, [sp, #12]
 8010934:	b020      	add	sp, #128	@ 0x80
 8010936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801093a:	200b      	movs	r0, #11
 801093c:	b020      	add	sp, #128	@ 0x80
 801093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010942:	200b      	movs	r0, #11
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	080236a0 	.word	0x080236a0

0801094c <rclc_subscription_init_default>:
 801094c:	b368      	cbz	r0, 80109aa <rclc_subscription_init_default+0x5e>
 801094e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010952:	460d      	mov	r5, r1
 8010954:	b0a2      	sub	sp, #136	@ 0x88
 8010956:	b321      	cbz	r1, 80109a2 <rclc_subscription_init_default+0x56>
 8010958:	4616      	mov	r6, r2
 801095a:	b312      	cbz	r2, 80109a2 <rclc_subscription_init_default+0x56>
 801095c:	461f      	mov	r7, r3
 801095e:	b303      	cbz	r3, 80109a2 <rclc_subscription_init_default+0x56>
 8010960:	4604      	mov	r4, r0
 8010962:	f001 f819 	bl	8011998 <rcl_get_zero_initialized_subscription>
 8010966:	f10d 0810 	add.w	r8, sp, #16
 801096a:	6020      	str	r0, [r4, #0]
 801096c:	4640      	mov	r0, r8
 801096e:	f001 f8c1 	bl	8011af4 <rcl_subscription_get_default_options>
 8010972:	490f      	ldr	r1, [pc, #60]	@ (80109b0 <rclc_subscription_init_default+0x64>)
 8010974:	2250      	movs	r2, #80	@ 0x50
 8010976:	4640      	mov	r0, r8
 8010978:	f00c fe77 	bl	801d66a <memcpy>
 801097c:	f8cd 8000 	str.w	r8, [sp]
 8010980:	463b      	mov	r3, r7
 8010982:	4632      	mov	r2, r6
 8010984:	4629      	mov	r1, r5
 8010986:	4620      	mov	r0, r4
 8010988:	f001 f80c 	bl	80119a4 <rcl_subscription_init>
 801098c:	b910      	cbnz	r0, 8010994 <rclc_subscription_init_default+0x48>
 801098e:	b022      	add	sp, #136	@ 0x88
 8010990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010994:	9003      	str	r0, [sp, #12]
 8010996:	f002 fa53 	bl	8012e40 <rcutils_reset_error>
 801099a:	9803      	ldr	r0, [sp, #12]
 801099c:	b022      	add	sp, #136	@ 0x88
 801099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a2:	200b      	movs	r0, #11
 80109a4:	b022      	add	sp, #136	@ 0x88
 80109a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109aa:	200b      	movs	r0, #11
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	080236f0 	.word	0x080236f0

080109b4 <rcl_init>:
 80109b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b8:	1e05      	subs	r5, r0, #0
 80109ba:	b0a7      	sub	sp, #156	@ 0x9c
 80109bc:	460e      	mov	r6, r1
 80109be:	4690      	mov	r8, r2
 80109c0:	461f      	mov	r7, r3
 80109c2:	f340 809d 	ble.w	8010b00 <rcl_init+0x14c>
 80109c6:	2900      	cmp	r1, #0
 80109c8:	f000 809d 	beq.w	8010b06 <rcl_init+0x152>
 80109cc:	f1a1 0e04 	sub.w	lr, r1, #4
 80109d0:	f04f 0c00 	mov.w	ip, #0
 80109d4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80109d8:	f10c 0c01 	add.w	ip, ip, #1
 80109dc:	2c00      	cmp	r4, #0
 80109de:	f000 8092 	beq.w	8010b06 <rcl_init+0x152>
 80109e2:	4565      	cmp	r5, ip
 80109e4:	d1f6      	bne.n	80109d4 <rcl_init+0x20>
 80109e6:	f1b8 0f00 	cmp.w	r8, #0
 80109ea:	f000 808c 	beq.w	8010b06 <rcl_init+0x152>
 80109ee:	f8d8 4000 	ldr.w	r4, [r8]
 80109f2:	2c00      	cmp	r4, #0
 80109f4:	f000 8087 	beq.w	8010b06 <rcl_init+0x152>
 80109f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109fa:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 80109fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a02:	6823      	ldr	r3, [r4, #0]
 8010a04:	f8cc 3000 	str.w	r3, [ip]
 8010a08:	a821      	add	r0, sp, #132	@ 0x84
 8010a0a:	f002 f937 	bl	8012c7c <rcutils_allocator_is_valid>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d079      	beq.n	8010b06 <rcl_init+0x152>
 8010a12:	2f00      	cmp	r7, #0
 8010a14:	d077      	beq.n	8010b06 <rcl_init+0x152>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d179      	bne.n	8010b10 <rcl_init+0x15c>
 8010a1c:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8010a20:	2198      	movs	r1, #152	@ 0x98
 8010a22:	2001      	movs	r0, #1
 8010a24:	4798      	blx	r3
 8010a26:	4604      	mov	r4, r0
 8010a28:	6038      	str	r0, [r7, #0]
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	f000 80cd 	beq.w	8010bca <rcl_init+0x216>
 8010a30:	a802      	add	r0, sp, #8
 8010a32:	f002 fceb 	bl	801340c <rmw_get_zero_initialized_context>
 8010a36:	a902      	add	r1, sp, #8
 8010a38:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010a3c:	2270      	movs	r2, #112	@ 0x70
 8010a3e:	f00c fe14 	bl	801d66a <memcpy>
 8010a42:	f10d 0c84 	add.w	ip, sp, #132	@ 0x84
 8010a46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a4a:	f8d7 e000 	ldr.w	lr, [r7]
 8010a4e:	4674      	mov	r4, lr
 8010a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a52:	f8dc 3000 	ldr.w	r3, [ip]
 8010a56:	6023      	str	r3, [r4, #0]
 8010a58:	f10e 0114 	add.w	r1, lr, #20
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	f000 f967 	bl	8010d30 <rcl_init_options_copy>
 8010a62:	4604      	mov	r4, r0
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d144      	bne.n	8010af2 <rcl_init+0x13e>
 8010a68:	f8d7 9000 	ldr.w	r9, [r7]
 8010a6c:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8010a70:	f8c9 0020 	str.w	r0, [r9, #32]
 8010a74:	f8c9 5018 	str.w	r5, [r9, #24]
 8010a78:	f8c9 a01c 	str.w	sl, [r9, #28]
 8010a7c:	2d00      	cmp	r5, #0
 8010a7e:	d04e      	beq.n	8010b1e <rcl_init+0x16a>
 8010a80:	2e00      	cmp	r6, #0
 8010a82:	d04c      	beq.n	8010b1e <rcl_init+0x16a>
 8010a84:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8010a88:	2104      	movs	r1, #4
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	4798      	blx	r3
 8010a8e:	f8c9 0020 	str.w	r0, [r9, #32]
 8010a92:	f8d7 9000 	ldr.w	r9, [r7]
 8010a96:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010a9a:	46cb      	mov	fp, r9
 8010a9c:	b343      	cbz	r3, 8010af0 <rcl_init+0x13c>
 8010a9e:	2d01      	cmp	r5, #1
 8010aa0:	f17a 0300 	sbcs.w	r3, sl, #0
 8010aa4:	db3b      	blt.n	8010b1e <rcl_init+0x16a>
 8010aa6:	2400      	movs	r4, #0
 8010aa8:	3e04      	subs	r6, #4
 8010aaa:	46a1      	mov	r9, r4
 8010aac:	e00b      	b.n	8010ac6 <rcl_init+0x112>
 8010aae:	6831      	ldr	r1, [r6, #0]
 8010ab0:	f00c fddb 	bl	801d66a <memcpy>
 8010ab4:	3401      	adds	r4, #1
 8010ab6:	f149 0900 	adc.w	r9, r9, #0
 8010aba:	45ca      	cmp	sl, r9
 8010abc:	bf08      	it	eq
 8010abe:	42a5      	cmpeq	r5, r4
 8010ac0:	d02b      	beq.n	8010b1a <rcl_init+0x166>
 8010ac2:	f8d7 b000 	ldr.w	fp, [r7]
 8010ac6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010aca:	f7ef fbe1 	bl	8000290 <strlen>
 8010ace:	1c42      	adds	r2, r0, #1
 8010ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ad2:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8010ad4:	f8db b020 	ldr.w	fp, [fp, #32]
 8010ad8:	9201      	str	r2, [sp, #4]
 8010ada:	4610      	mov	r0, r2
 8010adc:	4798      	blx	r3
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8010ae4:	6a1b      	ldr	r3, [r3, #32]
 8010ae6:	9a01      	ldr	r2, [sp, #4]
 8010ae8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d1de      	bne.n	8010aae <rcl_init+0xfa>
 8010af0:	240a      	movs	r4, #10
 8010af2:	4638      	mov	r0, r7
 8010af4:	f7ff fe96 	bl	8010824 <__cleanup_context>
 8010af8:	4620      	mov	r0, r4
 8010afa:	b027      	add	sp, #156	@ 0x9c
 8010afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b00:	2900      	cmp	r1, #0
 8010b02:	f43f af70 	beq.w	80109e6 <rcl_init+0x32>
 8010b06:	240b      	movs	r4, #11
 8010b08:	4620      	mov	r0, r4
 8010b0a:	b027      	add	sp, #156	@ 0x9c
 8010b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b10:	2464      	movs	r4, #100	@ 0x64
 8010b12:	4620      	mov	r0, r4
 8010b14:	b027      	add	sp, #156	@ 0x9c
 8010b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b1a:	f8d7 9000 	ldr.w	r9, [r7]
 8010b1e:	493f      	ldr	r1, [pc, #252]	@ (8010c1c <rcl_init+0x268>)
 8010b20:	680b      	ldr	r3, [r1, #0]
 8010b22:	3301      	adds	r3, #1
 8010b24:	d04c      	beq.n	8010bc0 <rcl_init+0x20c>
 8010b26:	600b      	str	r3, [r1, #0]
 8010b28:	461a      	mov	r2, r3
 8010b2a:	2000      	movs	r0, #0
 8010b2c:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8010b30:	607b      	str	r3, [r7, #4]
 8010b32:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010b34:	3301      	adds	r3, #1
 8010b36:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8010b3a:	d05c      	beq.n	8010bf6 <rcl_init+0x242>
 8010b3c:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d044      	beq.n	8010bce <rcl_init+0x21a>
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d04e      	beq.n	8010be6 <rcl_init+0x232>
 8010b48:	f8d8 3000 	ldr.w	r3, [r8]
 8010b4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010b50:	f105 0634 	add.w	r6, r5, #52	@ 0x34
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d059      	beq.n	8010c0c <rcl_init+0x258>
 8010b58:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8010b5a:	b953      	cbnz	r3, 8010b72 <rcl_init+0x1be>
 8010b5c:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8010b60:	2801      	cmp	r0, #1
 8010b62:	d008      	beq.n	8010b76 <rcl_init+0x1c2>
 8010b64:	a921      	add	r1, sp, #132	@ 0x84
 8010b66:	4630      	mov	r0, r6
 8010b68:	f009 fd12 	bl	801a590 <rcl_get_discovery_static_peers>
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d1bf      	bne.n	8010af2 <rcl_init+0x13e>
 8010b72:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8010b76:	f009 fd01 	bl	801a57c <rcl_automatic_discovery_range_to_string>
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	695b      	ldr	r3, [r3, #20]
 8010b7e:	aa20      	add	r2, sp, #128	@ 0x80
 8010b80:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8010b82:	a91f      	add	r1, sp, #124	@ 0x7c
 8010b84:	f001 fa56 	bl	8012034 <rcl_validate_enclave_name>
 8010b88:	4604      	mov	r4, r0
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	d1b1      	bne.n	8010af2 <rcl_init+0x13e>
 8010b8e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010b90:	bb7b      	cbnz	r3, 8010bf2 <rcl_init+0x23e>
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	694b      	ldr	r3, [r1, #20]
 8010b96:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8010b98:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010b9c:	f000 fd84 	bl	80116a8 <rcl_get_security_options_from_environment>
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d1a5      	bne.n	8010af2 <rcl_init+0x13e>
 8010ba6:	6839      	ldr	r1, [r7, #0]
 8010ba8:	6948      	ldr	r0, [r1, #20]
 8010baa:	3128      	adds	r1, #40	@ 0x28
 8010bac:	3018      	adds	r0, #24
 8010bae:	f002 fda1 	bl	80136f4 <rmw_init>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d0a7      	beq.n	8010b08 <rcl_init+0x154>
 8010bb8:	f7ff fe10 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	e798      	b.n	8010af2 <rcl_init+0x13e>
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	600a      	str	r2, [r1, #0]
 8010bc6:	4613      	mov	r3, r2
 8010bc8:	e7b0      	b.n	8010b2c <rcl_init+0x178>
 8010bca:	240a      	movs	r4, #10
 8010bcc:	e79c      	b.n	8010b08 <rcl_init+0x154>
 8010bce:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8010bd2:	f000 f909 	bl	8010de8 <rcl_get_localhost_only>
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d18a      	bne.n	8010af2 <rcl_init+0x13e>
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8010be2:	6955      	ldr	r5, [r2, #20]
 8010be4:	e7ae      	b.n	8010b44 <rcl_init+0x190>
 8010be6:	2002      	movs	r0, #2
 8010be8:	2300      	movs	r3, #0
 8010bea:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 8010bee:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8010bf0:	e7c1      	b.n	8010b76 <rcl_init+0x1c2>
 8010bf2:	2401      	movs	r4, #1
 8010bf4:	e77d      	b.n	8010af2 <rcl_init+0x13e>
 8010bf6:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8010bfa:	f009 fd2f 	bl	801a65c <rcl_get_default_domain_id>
 8010bfe:	4604      	mov	r4, r0
 8010c00:	2800      	cmp	r0, #0
 8010c02:	f47f af76 	bne.w	8010af2 <rcl_init+0x13e>
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	695d      	ldr	r5, [r3, #20]
 8010c0a:	e797      	b.n	8010b3c <rcl_init+0x188>
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f009 fc73 	bl	801a4f8 <rcl_get_automatic_discovery_range>
 8010c12:	4604      	mov	r4, r0
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d09f      	beq.n	8010b58 <rcl_init+0x1a4>
 8010c18:	e76b      	b.n	8010af2 <rcl_init+0x13e>
 8010c1a:	bf00      	nop
 8010c1c:	2001367c 	.word	0x2001367c

08010c20 <rcl_get_zero_initialized_init_options>:
 8010c20:	2000      	movs	r0, #0
 8010c22:	4770      	bx	lr

08010c24 <rcl_init_options_init>:
 8010c24:	b084      	sub	sp, #16
 8010c26:	b570      	push	{r4, r5, r6, lr}
 8010c28:	b09e      	sub	sp, #120	@ 0x78
 8010c2a:	ad23      	add	r5, sp, #140	@ 0x8c
 8010c2c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d046      	beq.n	8010cc2 <rcl_init_options_init+0x9e>
 8010c34:	6803      	ldr	r3, [r0, #0]
 8010c36:	4604      	mov	r4, r0
 8010c38:	b133      	cbz	r3, 8010c48 <rcl_init_options_init+0x24>
 8010c3a:	2564      	movs	r5, #100	@ 0x64
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	b01e      	add	sp, #120	@ 0x78
 8010c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c44:	b004      	add	sp, #16
 8010c46:	4770      	bx	lr
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f002 f817 	bl	8012c7c <rcutils_allocator_is_valid>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d037      	beq.n	8010cc2 <rcl_init_options_init+0x9e>
 8010c52:	46ae      	mov	lr, r5
 8010c54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c58:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010c5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c60:	f8de 3000 	ldr.w	r3, [lr]
 8010c64:	f8cc 3000 	str.w	r3, [ip]
 8010c68:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8010c6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010c6c:	2070      	movs	r0, #112	@ 0x70
 8010c6e:	4798      	blx	r3
 8010c70:	4606      	mov	r6, r0
 8010c72:	6020      	str	r0, [r4, #0]
 8010c74:	b338      	cbz	r0, 8010cc6 <rcl_init_options_init+0xa2>
 8010c76:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010c7a:	4686      	mov	lr, r0
 8010c7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c84:	f8dc 3000 	ldr.w	r3, [ip]
 8010c88:	f8ce 3000 	str.w	r3, [lr]
 8010c8c:	a802      	add	r0, sp, #8
 8010c8e:	f002 fbcd 	bl	801342c <rmw_get_zero_initialized_init_options>
 8010c92:	2258      	movs	r2, #88	@ 0x58
 8010c94:	a902      	add	r1, sp, #8
 8010c96:	f106 0018 	add.w	r0, r6, #24
 8010c9a:	f00c fce6 	bl	801d66a <memcpy>
 8010c9e:	ab26      	add	r3, sp, #152	@ 0x98
 8010ca0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010ca4:	6826      	ldr	r6, [r4, #0]
 8010ca6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010caa:	f106 0018 	add.w	r0, r6, #24
 8010cae:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010cb2:	f002 fc4d 	bl	8013550 <rmw_init_options_init>
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	b938      	cbnz	r0, 8010cca <rcl_init_options_init+0xa6>
 8010cba:	6823      	ldr	r3, [r4, #0]
 8010cbc:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 8010cc0:	e7bc      	b.n	8010c3c <rcl_init_options_init+0x18>
 8010cc2:	250b      	movs	r5, #11
 8010cc4:	e7ba      	b.n	8010c3c <rcl_init_options_init+0x18>
 8010cc6:	250a      	movs	r5, #10
 8010cc8:	e7b8      	b.n	8010c3c <rcl_init_options_init+0x18>
 8010cca:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8010ccc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010cce:	6820      	ldr	r0, [r4, #0]
 8010cd0:	4798      	blx	r3
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f7ff fd82 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010cd8:	4605      	mov	r5, r0
 8010cda:	e7af      	b.n	8010c3c <rcl_init_options_init+0x18>

08010cdc <rcl_init_options_fini>:
 8010cdc:	b530      	push	{r4, r5, lr}
 8010cde:	b087      	sub	sp, #28
 8010ce0:	b1f0      	cbz	r0, 8010d20 <rcl_init_options_fini+0x44>
 8010ce2:	6803      	ldr	r3, [r0, #0]
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	b1db      	cbz	r3, 8010d20 <rcl_init_options_fini+0x44>
 8010ce8:	469c      	mov	ip, r3
 8010cea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cee:	f10d 0e04 	add.w	lr, sp, #4
 8010cf2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010cf6:	f8dc 3000 	ldr.w	r3, [ip]
 8010cfa:	f8ce 3000 	str.w	r3, [lr]
 8010cfe:	a801      	add	r0, sp, #4
 8010d00:	f001 ffbc 	bl	8012c7c <rcutils_allocator_is_valid>
 8010d04:	b160      	cbz	r0, 8010d20 <rcl_init_options_fini+0x44>
 8010d06:	6820      	ldr	r0, [r4, #0]
 8010d08:	3018      	adds	r0, #24
 8010d0a:	f002 fcbd 	bl	8013688 <rmw_init_options_fini>
 8010d0e:	4605      	mov	r5, r0
 8010d10:	b950      	cbnz	r0, 8010d28 <rcl_init_options_fini+0x4c>
 8010d12:	6820      	ldr	r0, [r4, #0]
 8010d14:	9b02      	ldr	r3, [sp, #8]
 8010d16:	9905      	ldr	r1, [sp, #20]
 8010d18:	4798      	blx	r3
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	b007      	add	sp, #28
 8010d1e:	bd30      	pop	{r4, r5, pc}
 8010d20:	250b      	movs	r5, #11
 8010d22:	4628      	mov	r0, r5
 8010d24:	b007      	add	sp, #28
 8010d26:	bd30      	pop	{r4, r5, pc}
 8010d28:	f7ff fd58 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010d2c:	4605      	mov	r5, r0
 8010d2e:	e7f8      	b.n	8010d22 <rcl_init_options_fini+0x46>

08010d30 <rcl_init_options_copy>:
 8010d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d32:	b09d      	sub	sp, #116	@ 0x74
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d04a      	beq.n	8010dce <rcl_init_options_copy+0x9e>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	6800      	ldr	r0, [r0, #0]
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d046      	beq.n	8010dce <rcl_init_options_copy+0x9e>
 8010d40:	460d      	mov	r5, r1
 8010d42:	f001 ff9b 	bl	8012c7c <rcutils_allocator_is_valid>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	d041      	beq.n	8010dce <rcl_init_options_copy+0x9e>
 8010d4a:	2d00      	cmp	r5, #0
 8010d4c:	d03f      	beq.n	8010dce <rcl_init_options_copy+0x9e>
 8010d4e:	682b      	ldr	r3, [r5, #0]
 8010d50:	b11b      	cbz	r3, 8010d5a <rcl_init_options_copy+0x2a>
 8010d52:	2464      	movs	r4, #100	@ 0x64
 8010d54:	4620      	mov	r0, r4
 8010d56:	b01d      	add	sp, #116	@ 0x74
 8010d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d5a:	6826      	ldr	r6, [r4, #0]
 8010d5c:	46b6      	mov	lr, r6
 8010d5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d62:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010d66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d6a:	f8de 3000 	ldr.w	r3, [lr]
 8010d6e:	6837      	ldr	r7, [r6, #0]
 8010d70:	f8cc 3000 	str.w	r3, [ip]
 8010d74:	4619      	mov	r1, r3
 8010d76:	2070      	movs	r0, #112	@ 0x70
 8010d78:	47b8      	blx	r7
 8010d7a:	4606      	mov	r6, r0
 8010d7c:	6028      	str	r0, [r5, #0]
 8010d7e:	b350      	cbz	r0, 8010dd6 <rcl_init_options_copy+0xa6>
 8010d80:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010d84:	4686      	mov	lr, r0
 8010d86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8010d92:	f8ce 3000 	str.w	r3, [lr]
 8010d96:	4668      	mov	r0, sp
 8010d98:	f002 fb48 	bl	801342c <rmw_get_zero_initialized_init_options>
 8010d9c:	2258      	movs	r2, #88	@ 0x58
 8010d9e:	4669      	mov	r1, sp
 8010da0:	f106 0018 	add.w	r0, r6, #24
 8010da4:	f00c fc61 	bl	801d66a <memcpy>
 8010da8:	6820      	ldr	r0, [r4, #0]
 8010daa:	6829      	ldr	r1, [r5, #0]
 8010dac:	3018      	adds	r0, #24
 8010dae:	3118      	adds	r1, #24
 8010db0:	f002 fc36 	bl	8013620 <rmw_init_options_copy>
 8010db4:	4604      	mov	r4, r0
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d0cc      	beq.n	8010d54 <rcl_init_options_copy+0x24>
 8010dba:	f002 f829 	bl	8012e10 <rcutils_get_error_string>
 8010dbe:	f002 f83f 	bl	8012e40 <rcutils_reset_error>
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f7ff ff8a 	bl	8010cdc <rcl_init_options_fini>
 8010dc8:	b138      	cbz	r0, 8010dda <rcl_init_options_copy+0xaa>
 8010dca:	4604      	mov	r4, r0
 8010dcc:	e7c2      	b.n	8010d54 <rcl_init_options_copy+0x24>
 8010dce:	240b      	movs	r4, #11
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	b01d      	add	sp, #116	@ 0x74
 8010dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd6:	240a      	movs	r4, #10
 8010dd8:	e7bc      	b.n	8010d54 <rcl_init_options_copy+0x24>
 8010dda:	4620      	mov	r0, r4
 8010ddc:	b01d      	add	sp, #116	@ 0x74
 8010dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010de2:	f7ff bcfb 	b.w	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010de6:	bf00      	nop

08010de8 <rcl_get_localhost_only>:
 8010de8:	b510      	push	{r4, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	2300      	movs	r3, #0
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	b1c0      	cbz	r0, 8010e24 <rcl_get_localhost_only+0x3c>
 8010df2:	4604      	mov	r4, r0
 8010df4:	a901      	add	r1, sp, #4
 8010df6:	480d      	ldr	r0, [pc, #52]	@ (8010e2c <rcl_get_localhost_only+0x44>)
 8010df8:	f001 fff2 	bl	8012de0 <rcutils_get_env>
 8010dfc:	b110      	cbz	r0, 8010e04 <rcl_get_localhost_only+0x1c>
 8010dfe:	2001      	movs	r0, #1
 8010e00:	b002      	add	sp, #8
 8010e02:	bd10      	pop	{r4, pc}
 8010e04:	9b01      	ldr	r3, [sp, #4]
 8010e06:	b10b      	cbz	r3, 8010e0c <rcl_get_localhost_only+0x24>
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	b923      	cbnz	r3, 8010e16 <rcl_get_localhost_only+0x2e>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	4618      	mov	r0, r3
 8010e10:	7023      	strb	r3, [r4, #0]
 8010e12:	b002      	add	sp, #8
 8010e14:	bd10      	pop	{r4, pc}
 8010e16:	2b31      	cmp	r3, #49	@ 0x31
 8010e18:	bf0c      	ite	eq
 8010e1a:	2301      	moveq	r3, #1
 8010e1c:	2302      	movne	r3, #2
 8010e1e:	7023      	strb	r3, [r4, #0]
 8010e20:	b002      	add	sp, #8
 8010e22:	bd10      	pop	{r4, pc}
 8010e24:	200b      	movs	r0, #11
 8010e26:	b002      	add	sp, #8
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	bf00      	nop
 8010e2c:	08023740 	.word	0x08023740

08010e30 <rcl_get_zero_initialized_node>:
 8010e30:	4a03      	ldr	r2, [pc, #12]	@ (8010e40 <rcl_get_zero_initialized_node+0x10>)
 8010e32:	4603      	mov	r3, r0
 8010e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e38:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	4770      	bx	lr
 8010e40:	0802378c 	.word	0x0802378c

08010e44 <rcl_node_init>:
 8010e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e48:	b0ab      	sub	sp, #172	@ 0xac
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8010e50:	a825      	add	r0, sp, #148	@ 0x94
 8010e52:	460e      	mov	r6, r1
 8010e54:	4615      	mov	r5, r2
 8010e56:	461f      	mov	r7, r3
 8010e58:	f009 fe28 	bl	801aaac <rcl_guard_condition_get_default_options>
 8010e5c:	f1b8 0f00 	cmp.w	r8, #0
 8010e60:	f000 80e6 	beq.w	8011030 <rcl_node_init+0x1ec>
 8010e64:	4640      	mov	r0, r8
 8010e66:	f001 ff09 	bl	8012c7c <rcutils_allocator_is_valid>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	f000 80e0 	beq.w	8011030 <rcl_node_init+0x1ec>
 8010e70:	2e00      	cmp	r6, #0
 8010e72:	f000 80dd 	beq.w	8011030 <rcl_node_init+0x1ec>
 8010e76:	2d00      	cmp	r5, #0
 8010e78:	f000 80da 	beq.w	8011030 <rcl_node_init+0x1ec>
 8010e7c:	2c00      	cmp	r4, #0
 8010e7e:	f000 80d7 	beq.w	8011030 <rcl_node_init+0x1ec>
 8010e82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010e86:	f1b9 0f00 	cmp.w	r9, #0
 8010e8a:	f040 80fd 	bne.w	8011088 <rcl_node_init+0x244>
 8010e8e:	2f00      	cmp	r7, #0
 8010e90:	f000 80ce 	beq.w	8011030 <rcl_node_init+0x1ec>
 8010e94:	4638      	mov	r0, r7
 8010e96:	f7ff fcbf 	bl	8010818 <rcl_context_is_valid>
 8010e9a:	4682      	mov	sl, r0
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	f000 80cd 	beq.w	801103c <rcl_node_init+0x1f8>
 8010ea2:	464a      	mov	r2, r9
 8010ea4:	a924      	add	r1, sp, #144	@ 0x90
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 8010eac:	f004 fa5e 	bl	801536c <rmw_validate_node_name>
 8010eb0:	4681      	mov	r9, r0
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	f040 80be 	bne.w	8011034 <rcl_node_init+0x1f0>
 8010eb8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	f040 80f0 	bne.w	80110a0 <rcl_node_init+0x25c>
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	f7ef f9e5 	bl	8000290 <strlen>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	f040 80bb 	bne.w	8011042 <rcl_node_init+0x1fe>
 8010ecc:	4d7c      	ldr	r5, [pc, #496]	@ (80110c0 <rcl_node_init+0x27c>)
 8010ece:	a924      	add	r1, sp, #144	@ 0x90
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f004 fa2c 	bl	8015330 <rmw_validate_namespace>
 8010ed8:	4681      	mov	r9, r0
 8010eda:	2800      	cmp	r0, #0
 8010edc:	f040 80aa 	bne.w	8011034 <rcl_node_init+0x1f0>
 8010ee0:	4682      	mov	sl, r0
 8010ee2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	f040 80e0 	bne.w	80110aa <rcl_node_init+0x266>
 8010eea:	f8d8 3000 	ldr.w	r3, [r8]
 8010eee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010ef2:	2080      	movs	r0, #128	@ 0x80
 8010ef4:	4798      	blx	r3
 8010ef6:	4681      	mov	r9, r0
 8010ef8:	6060      	str	r0, [r4, #4]
 8010efa:	2800      	cmp	r0, #0
 8010efc:	f000 80ca 	beq.w	8011094 <rcl_node_init+0x250>
 8010f00:	2200      	movs	r2, #0
 8010f02:	2300      	movs	r3, #0
 8010f04:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8010f08:	e9c9 231e 	strd	r2, r3, [r9, #120]	@ 0x78
 8010f0c:	a808      	add	r0, sp, #32
 8010f0e:	f000 f927 	bl	8011160 <rcl_node_get_default_options>
 8010f12:	a908      	add	r1, sp, #32
 8010f14:	4648      	mov	r0, r9
 8010f16:	2270      	movs	r2, #112	@ 0x70
 8010f18:	f00c fba7 	bl	801d66a <memcpy>
 8010f1c:	6861      	ldr	r1, [r4, #4]
 8010f1e:	6027      	str	r7, [r4, #0]
 8010f20:	4640      	mov	r0, r8
 8010f22:	f000 f92b 	bl	801117c <rcl_node_options_copy>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d158      	bne.n	8010fdc <rcl_node_init+0x198>
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f7ef f9b0 	bl	8000290 <strlen>
 8010f30:	4428      	add	r0, r5
 8010f32:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010f36:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010f3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	bf0c      	ite	eq
 8010f44:	4b5f      	ldreq	r3, [pc, #380]	@ (80110c4 <rcl_node_init+0x280>)
 8010f46:	4b60      	ldrne	r3, [pc, #384]	@ (80110c8 <rcl_node_init+0x284>)
 8010f48:	9302      	str	r3, [sp, #8]
 8010f4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010f54:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010f58:	f001 ff9e 	bl	8012e98 <rcutils_format_string_limit>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	f8c9 007c 	str.w	r0, [r9, #124]	@ 0x7c
 8010f62:	6818      	ldr	r0, [r3, #0]
 8010f64:	4631      	mov	r1, r6
 8010f66:	3028      	adds	r0, #40	@ 0x28
 8010f68:	462a      	mov	r2, r5
 8010f6a:	6866      	ldr	r6, [r4, #4]
 8010f6c:	f002 fda4 	bl	8013ab8 <rmw_create_node>
 8010f70:	6863      	ldr	r3, [r4, #4]
 8010f72:	6730      	str	r0, [r6, #112]	@ 0x70
 8010f74:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d032      	beq.n	8010fe0 <rcl_node_init+0x19c>
 8010f7a:	f002 fe31 	bl	8013be0 <rmw_node_get_graph_guard_condition>
 8010f7e:	4681      	mov	r9, r0
 8010f80:	b360      	cbz	r0, 8010fdc <rcl_node_init+0x198>
 8010f82:	f8d8 3000 	ldr.w	r3, [r8]
 8010f86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010f8a:	6866      	ldr	r6, [r4, #4]
 8010f8c:	2008      	movs	r0, #8
 8010f8e:	4798      	blx	r3
 8010f90:	6863      	ldr	r3, [r4, #4]
 8010f92:	6770      	str	r0, [r6, #116]	@ 0x74
 8010f94:	f8d3 b074 	ldr.w	fp, [r3, #116]	@ 0x74
 8010f98:	f1bb 0f00 	cmp.w	fp, #0
 8010f9c:	d020      	beq.n	8010fe0 <rcl_node_init+0x19c>
 8010f9e:	a806      	add	r0, sp, #24
 8010fa0:	f009 fcf4 	bl	801a98c <rcl_get_zero_initialized_guard_condition>
 8010fa4:	a806      	add	r0, sp, #24
 8010fa6:	c803      	ldmia	r0, {r0, r1}
 8010fa8:	6863      	ldr	r3, [r4, #4]
 8010faa:	46c4      	mov	ip, r8
 8010fac:	f8d3 e074 	ldr.w	lr, [r3, #116]	@ 0x74
 8010fb0:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010fb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fb8:	ae25      	add	r6, sp, #148	@ 0x94
 8010fba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010fbc:	f8dc 3000 	ldr.w	r3, [ip]
 8010fc0:	6033      	str	r3, [r6, #0]
 8010fc2:	ab2a      	add	r3, sp, #168	@ 0xa8
 8010fc4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010fc8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010fcc:	4649      	mov	r1, r9
 8010fce:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8010fd0:	463a      	mov	r2, r7
 8010fd2:	4670      	mov	r0, lr
 8010fd4:	f009 fce4 	bl	801a9a0 <rcl_guard_condition_init_from_rmw>
 8010fd8:	4681      	mov	r9, r0
 8010fda:	b328      	cbz	r0, 8011028 <rcl_node_init+0x1e4>
 8010fdc:	6863      	ldr	r3, [r4, #4]
 8010fde:	b1f3      	cbz	r3, 801101e <rcl_node_init+0x1da>
 8010fe0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8010fe2:	b128      	cbz	r0, 8010ff0 <rcl_node_init+0x1ac>
 8010fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fe8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010fec:	4798      	blx	r3
 8010fee:	6863      	ldr	r3, [r4, #4]
 8010ff0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8010ff2:	b110      	cbz	r0, 8010ffa <rcl_node_init+0x1b6>
 8010ff4:	f002 fd78 	bl	8013ae8 <rmw_destroy_node>
 8010ff8:	6863      	ldr	r3, [r4, #4]
 8010ffa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010ffc:	b148      	cbz	r0, 8011012 <rcl_node_init+0x1ce>
 8010ffe:	f009 fd2f 	bl	801aa60 <rcl_guard_condition_fini>
 8011002:	6863      	ldr	r3, [r4, #4]
 8011004:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011008:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801100a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801100e:	4798      	blx	r3
 8011010:	6863      	ldr	r3, [r4, #4]
 8011012:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011016:	4618      	mov	r0, r3
 8011018:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801101c:	4798      	blx	r3
 801101e:	2300      	movs	r3, #0
 8011020:	e9c4 3300 	strd	r3, r3, [r4]
 8011024:	f04f 0901 	mov.w	r9, #1
 8011028:	f1ba 0f00 	cmp.w	sl, #0
 801102c:	d125      	bne.n	801107a <rcl_node_init+0x236>
 801102e:	e001      	b.n	8011034 <rcl_node_init+0x1f0>
 8011030:	f04f 090b 	mov.w	r9, #11
 8011034:	4648      	mov	r0, r9
 8011036:	b02b      	add	sp, #172	@ 0xac
 8011038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011040:	e7f8      	b.n	8011034 <rcl_node_init+0x1f0>
 8011042:	782b      	ldrb	r3, [r5, #0]
 8011044:	2b2f      	cmp	r3, #47	@ 0x2f
 8011046:	f43f af42 	beq.w	8010ece <rcl_node_init+0x8a>
 801104a:	9503      	str	r5, [sp, #12]
 801104c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	4b1e      	ldr	r3, [pc, #120]	@ (80110cc <rcl_node_init+0x288>)
 8011054:	9302      	str	r3, [sp, #8]
 8011056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801105a:	9301      	str	r3, [sp, #4]
 801105c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011060:	f001 ff1a 	bl	8012e98 <rcutils_format_string_limit>
 8011064:	4605      	mov	r5, r0
 8011066:	b340      	cbz	r0, 80110ba <rcl_node_init+0x276>
 8011068:	2200      	movs	r2, #0
 801106a:	a924      	add	r1, sp, #144	@ 0x90
 801106c:	9224      	str	r2, [sp, #144]	@ 0x90
 801106e:	f004 f95f 	bl	8015330 <rmw_validate_namespace>
 8011072:	4681      	mov	r9, r0
 8011074:	2800      	cmp	r0, #0
 8011076:	f43f af34 	beq.w	8010ee2 <rcl_node_init+0x9e>
 801107a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801107e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011082:	4628      	mov	r0, r5
 8011084:	4798      	blx	r3
 8011086:	e7d5      	b.n	8011034 <rcl_node_init+0x1f0>
 8011088:	f04f 0964 	mov.w	r9, #100	@ 0x64
 801108c:	4648      	mov	r0, r9
 801108e:	b02b      	add	sp, #172	@ 0xac
 8011090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011094:	f04f 090a 	mov.w	r9, #10
 8011098:	f1ba 0f00 	cmp.w	sl, #0
 801109c:	d1ed      	bne.n	801107a <rcl_node_init+0x236>
 801109e:	e7c9      	b.n	8011034 <rcl_node_init+0x1f0>
 80110a0:	f004 f9b6 	bl	8015410 <rmw_node_name_validation_result_string>
 80110a4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80110a8:	e7c4      	b.n	8011034 <rcl_node_init+0x1f0>
 80110aa:	f004 f953 	bl	8015354 <rmw_namespace_validation_result_string>
 80110ae:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80110b2:	f1ba 0f00 	cmp.w	sl, #0
 80110b6:	d1e0      	bne.n	801107a <rcl_node_init+0x236>
 80110b8:	e7bc      	b.n	8011034 <rcl_node_init+0x1f0>
 80110ba:	f04f 090a 	mov.w	r9, #10
 80110be:	e7b9      	b.n	8011034 <rcl_node_init+0x1f0>
 80110c0:	08023758 	.word	0x08023758
 80110c4:	08023760 	.word	0x08023760
 80110c8:	08023768 	.word	0x08023768
 80110cc:	0802375c 	.word	0x0802375c

080110d0 <rcl_node_is_valid>:
 80110d0:	b130      	cbz	r0, 80110e0 <rcl_node_is_valid+0x10>
 80110d2:	6843      	ldr	r3, [r0, #4]
 80110d4:	b123      	cbz	r3, 80110e0 <rcl_node_is_valid+0x10>
 80110d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110d8:	b113      	cbz	r3, 80110e0 <rcl_node_is_valid+0x10>
 80110da:	6800      	ldr	r0, [r0, #0]
 80110dc:	f7ff bb9c 	b.w	8010818 <rcl_context_is_valid>
 80110e0:	2000      	movs	r0, #0
 80110e2:	4770      	bx	lr

080110e4 <rcl_node_get_name>:
 80110e4:	b120      	cbz	r0, 80110f0 <rcl_node_get_name+0xc>
 80110e6:	6840      	ldr	r0, [r0, #4]
 80110e8:	b110      	cbz	r0, 80110f0 <rcl_node_get_name+0xc>
 80110ea:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 80110ec:	b100      	cbz	r0, 80110f0 <rcl_node_get_name+0xc>
 80110ee:	6880      	ldr	r0, [r0, #8]
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop

080110f4 <rcl_node_get_namespace>:
 80110f4:	b120      	cbz	r0, 8011100 <rcl_node_get_namespace+0xc>
 80110f6:	6840      	ldr	r0, [r0, #4]
 80110f8:	b110      	cbz	r0, 8011100 <rcl_node_get_namespace+0xc>
 80110fa:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 80110fc:	b100      	cbz	r0, 8011100 <rcl_node_get_namespace+0xc>
 80110fe:	68c0      	ldr	r0, [r0, #12]
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop

08011104 <rcl_node_get_options>:
 8011104:	b128      	cbz	r0, 8011112 <rcl_node_get_options+0xe>
 8011106:	6840      	ldr	r0, [r0, #4]
 8011108:	b118      	cbz	r0, 8011112 <rcl_node_get_options+0xe>
 801110a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801110c:	2b00      	cmp	r3, #0
 801110e:	bf08      	it	eq
 8011110:	2000      	moveq	r0, #0
 8011112:	4770      	bx	lr

08011114 <rcl_node_get_rmw_handle>:
 8011114:	b110      	cbz	r0, 801111c <rcl_node_get_rmw_handle+0x8>
 8011116:	6840      	ldr	r0, [r0, #4]
 8011118:	b100      	cbz	r0, 801111c <rcl_node_get_rmw_handle+0x8>
 801111a:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop

08011120 <rcl_get_disable_loaned_message>:
 8011120:	b510      	push	{r4, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	2300      	movs	r3, #0
 8011126:	9301      	str	r3, [sp, #4]
 8011128:	b1a0      	cbz	r0, 8011154 <rcl_get_disable_loaned_message+0x34>
 801112a:	4604      	mov	r4, r0
 801112c:	a901      	add	r1, sp, #4
 801112e:	480b      	ldr	r0, [pc, #44]	@ (801115c <rcl_get_disable_loaned_message+0x3c>)
 8011130:	f001 fe56 	bl	8012de0 <rcutils_get_env>
 8011134:	b110      	cbz	r0, 801113c <rcl_get_disable_loaned_message+0x1c>
 8011136:	2001      	movs	r0, #1
 8011138:	b002      	add	sp, #8
 801113a:	bd10      	pop	{r4, pc}
 801113c:	9a01      	ldr	r2, [sp, #4]
 801113e:	7813      	ldrb	r3, [r2, #0]
 8011140:	3b31      	subs	r3, #49	@ 0x31
 8011142:	bf08      	it	eq
 8011144:	7853      	ldrbeq	r3, [r2, #1]
 8011146:	fab3 f383 	clz	r3, r3
 801114a:	095b      	lsrs	r3, r3, #5
 801114c:	2000      	movs	r0, #0
 801114e:	7023      	strb	r3, [r4, #0]
 8011150:	b002      	add	sp, #8
 8011152:	bd10      	pop	{r4, pc}
 8011154:	200b      	movs	r0, #11
 8011156:	b002      	add	sp, #8
 8011158:	bd10      	pop	{r4, pc}
 801115a:	bf00      	nop
 801115c:	08023770 	.word	0x08023770

08011160 <rcl_node_get_default_options>:
 8011160:	b510      	push	{r4, lr}
 8011162:	2270      	movs	r2, #112	@ 0x70
 8011164:	4604      	mov	r4, r0
 8011166:	2100      	movs	r1, #0
 8011168:	f00c f9a0 	bl	801d4ac <memset>
 801116c:	4620      	mov	r0, r4
 801116e:	f001 fd77 	bl	8012c60 <rcutils_get_default_allocator>
 8011172:	2301      	movs	r3, #1
 8011174:	7523      	strb	r3, [r4, #20]
 8011176:	4620      	mov	r0, r4
 8011178:	bd10      	pop	{r4, pc}
 801117a:	bf00      	nop

0801117c <rcl_node_options_copy>:
 801117c:	b1d0      	cbz	r0, 80111b4 <rcl_node_options_copy+0x38>
 801117e:	b570      	push	{r4, r5, r6, lr}
 8011180:	460c      	mov	r4, r1
 8011182:	b1a9      	cbz	r1, 80111b0 <rcl_node_options_copy+0x34>
 8011184:	4288      	cmp	r0, r1
 8011186:	4684      	mov	ip, r0
 8011188:	d012      	beq.n	80111b0 <rcl_node_options_copy+0x34>
 801118a:	4605      	mov	r5, r0
 801118c:	8a86      	ldrh	r6, [r0, #20]
 801118e:	468e      	mov	lr, r1
 8011190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011192:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011196:	682b      	ldr	r3, [r5, #0]
 8011198:	f8ce 3000 	str.w	r3, [lr]
 801119c:	f10c 0118 	add.w	r1, ip, #24
 80111a0:	2250      	movs	r2, #80	@ 0x50
 80111a2:	82a6      	strh	r6, [r4, #20]
 80111a4:	f104 0018 	add.w	r0, r4, #24
 80111a8:	f00c fa5f 	bl	801d66a <memcpy>
 80111ac:	2000      	movs	r0, #0
 80111ae:	bd70      	pop	{r4, r5, r6, pc}
 80111b0:	200b      	movs	r0, #11
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	200b      	movs	r0, #11
 80111b6:	4770      	bx	lr

080111b8 <rcl_node_resolve_name>:
 80111b8:	b082      	sub	sp, #8
 80111ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111be:	b091      	sub	sp, #68	@ 0x44
 80111c0:	ac1a      	add	r4, sp, #104	@ 0x68
 80111c2:	e884 000c 	stmia.w	r4, {r2, r3}
 80111c6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80111ca:	2800      	cmp	r0, #0
 80111cc:	d03b      	beq.n	8011246 <rcl_node_resolve_name+0x8e>
 80111ce:	460c      	mov	r4, r1
 80111d0:	4605      	mov	r5, r0
 80111d2:	f7ff ff97 	bl	8011104 <rcl_node_get_options>
 80111d6:	2800      	cmp	r0, #0
 80111d8:	d037      	beq.n	801124a <rcl_node_resolve_name+0x92>
 80111da:	4628      	mov	r0, r5
 80111dc:	f7ff ff82 	bl	80110e4 <rcl_node_get_name>
 80111e0:	4606      	mov	r6, r0
 80111e2:	4628      	mov	r0, r5
 80111e4:	f7ff ff86 	bl	80110f4 <rcl_node_get_namespace>
 80111e8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80111ec:	4681      	mov	r9, r0
 80111ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111f2:	ad0b      	add	r5, sp, #44	@ 0x2c
 80111f4:	46ac      	mov	ip, r5
 80111f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111fa:	f8de 3000 	ldr.w	r3, [lr]
 80111fe:	f8cc 3000 	str.w	r3, [ip]
 8011202:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011204:	b1fb      	cbz	r3, 8011246 <rcl_node_resolve_name+0x8e>
 8011206:	468a      	mov	sl, r1
 8011208:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801120c:	f001 ffa6 	bl	801315c <rcutils_get_zero_initialized_string_map>
 8011210:	ab10      	add	r3, sp, #64	@ 0x40
 8011212:	9008      	str	r0, [sp, #32]
 8011214:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011218:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801121c:	2100      	movs	r1, #0
 801121e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011222:	a808      	add	r0, sp, #32
 8011224:	f001 ffec 	bl	8013200 <rcutils_string_map_init>
 8011228:	4607      	mov	r7, r0
 801122a:	b180      	cbz	r0, 801124e <rcl_node_resolve_name+0x96>
 801122c:	f001 fdf0 	bl	8012e10 <rcutils_get_error_string>
 8011230:	f001 fe06 	bl	8012e40 <rcutils_reset_error>
 8011234:	2f0a      	cmp	r7, #10
 8011236:	bf18      	it	ne
 8011238:	2701      	movne	r7, #1
 801123a:	4638      	mov	r0, r7
 801123c:	b011      	add	sp, #68	@ 0x44
 801123e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011242:	b002      	add	sp, #8
 8011244:	4770      	bx	lr
 8011246:	270b      	movs	r7, #11
 8011248:	e7f7      	b.n	801123a <rcl_node_resolve_name+0x82>
 801124a:	2701      	movs	r7, #1
 801124c:	e7f5      	b.n	801123a <rcl_node_resolve_name+0x82>
 801124e:	9009      	str	r0, [sp, #36]	@ 0x24
 8011250:	9007      	str	r0, [sp, #28]
 8011252:	a808      	add	r0, sp, #32
 8011254:	f009 fb94 	bl	801a980 <rcl_get_default_topic_name_substitutions>
 8011258:	4607      	mov	r7, r0
 801125a:	b1a8      	cbz	r0, 8011288 <rcl_node_resolve_name+0xd0>
 801125c:	280a      	cmp	r0, #10
 801125e:	9c07      	ldr	r4, [sp, #28]
 8011260:	d000      	beq.n	8011264 <rcl_node_resolve_name+0xac>
 8011262:	2701      	movs	r7, #1
 8011264:	a808      	add	r0, sp, #32
 8011266:	f002 f809 	bl	801327c <rcutils_string_map_fini>
 801126a:	2800      	cmp	r0, #0
 801126c:	d13d      	bne.n	80112ea <rcl_node_resolve_name+0x132>
 801126e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011270:	4659      	mov	r1, fp
 8011272:	47d0      	blx	sl
 8011274:	4659      	mov	r1, fp
 8011276:	4620      	mov	r0, r4
 8011278:	47d0      	blx	sl
 801127a:	f1b8 0f00 	cmp.w	r8, #0
 801127e:	d0dc      	beq.n	801123a <rcl_node_resolve_name+0x82>
 8011280:	2f67      	cmp	r7, #103	@ 0x67
 8011282:	bf08      	it	eq
 8011284:	2768      	moveq	r7, #104	@ 0x68
 8011286:	e7d8      	b.n	801123a <rcl_node_resolve_name+0x82>
 8011288:	ab09      	add	r3, sp, #36	@ 0x24
 801128a:	9305      	str	r3, [sp, #20]
 801128c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801128e:	46ec      	mov	ip, sp
 8011290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011294:	682b      	ldr	r3, [r5, #0]
 8011296:	f8cc 3000 	str.w	r3, [ip]
 801129a:	464a      	mov	r2, r9
 801129c:	4631      	mov	r1, r6
 801129e:	4620      	mov	r0, r4
 80112a0:	ab08      	add	r3, sp, #32
 80112a2:	f009 fa0f 	bl	801a6c4 <rcl_expand_topic_name>
 80112a6:	4607      	mov	r7, r0
 80112a8:	b9b8      	cbnz	r0, 80112da <rcl_node_resolve_name+0x122>
 80112aa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80112ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80112ae:	4602      	mov	r2, r0
 80112b0:	a90a      	add	r1, sp, #40	@ 0x28
 80112b2:	4620      	mov	r0, r4
 80112b4:	f003 ff78 	bl	80151a8 <rmw_validate_full_topic_name>
 80112b8:	b988      	cbnz	r0, 80112de <rcl_node_resolve_name+0x126>
 80112ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80112bc:	b9d5      	cbnz	r5, 80112f4 <rcl_node_resolve_name+0x13c>
 80112be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80112c0:	a808      	add	r0, sp, #32
 80112c2:	601c      	str	r4, [r3, #0]
 80112c4:	f001 ffda 	bl	801327c <rcutils_string_map_fini>
 80112c8:	4607      	mov	r7, r0
 80112ca:	b1a8      	cbz	r0, 80112f8 <rcl_node_resolve_name+0x140>
 80112cc:	f001 fda0 	bl	8012e10 <rcutils_get_error_string>
 80112d0:	462c      	mov	r4, r5
 80112d2:	f001 fdb5 	bl	8012e40 <rcutils_reset_error>
 80112d6:	2701      	movs	r7, #1
 80112d8:	e7c9      	b.n	801126e <rcl_node_resolve_name+0xb6>
 80112da:	9c07      	ldr	r4, [sp, #28]
 80112dc:	e7c2      	b.n	8011264 <rcl_node_resolve_name+0xac>
 80112de:	f001 fd97 	bl	8012e10 <rcutils_get_error_string>
 80112e2:	2701      	movs	r7, #1
 80112e4:	f001 fdac 	bl	8012e40 <rcutils_reset_error>
 80112e8:	e7bc      	b.n	8011264 <rcl_node_resolve_name+0xac>
 80112ea:	f001 fd91 	bl	8012e10 <rcutils_get_error_string>
 80112ee:	f001 fda7 	bl	8012e40 <rcutils_reset_error>
 80112f2:	e7bc      	b.n	801126e <rcl_node_resolve_name+0xb6>
 80112f4:	2767      	movs	r7, #103	@ 0x67
 80112f6:	e7b5      	b.n	8011264 <rcl_node_resolve_name+0xac>
 80112f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112fa:	4659      	mov	r1, fp
 80112fc:	47d0      	blx	sl
 80112fe:	4659      	mov	r1, fp
 8011300:	4638      	mov	r0, r7
 8011302:	47d0      	blx	sl
 8011304:	e799      	b.n	801123a <rcl_node_resolve_name+0x82>
 8011306:	bf00      	nop

08011308 <rcl_get_zero_initialized_publisher>:
 8011308:	4b01      	ldr	r3, [pc, #4]	@ (8011310 <rcl_get_zero_initialized_publisher+0x8>)
 801130a:	6818      	ldr	r0, [r3, #0]
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop
 8011310:	08023794 	.word	0x08023794

08011314 <rcl_publisher_init>:
 8011314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011318:	b088      	sub	sp, #32
 801131a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801131c:	2d00      	cmp	r5, #0
 801131e:	d06a      	beq.n	80113f6 <rcl_publisher_init+0xe2>
 8011320:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8011324:	4604      	mov	r4, r0
 8011326:	4648      	mov	r0, r9
 8011328:	460e      	mov	r6, r1
 801132a:	4690      	mov	r8, r2
 801132c:	461f      	mov	r7, r3
 801132e:	f001 fca5 	bl	8012c7c <rcutils_allocator_is_valid>
 8011332:	2800      	cmp	r0, #0
 8011334:	d05f      	beq.n	80113f6 <rcl_publisher_init+0xe2>
 8011336:	2c00      	cmp	r4, #0
 8011338:	d05d      	beq.n	80113f6 <rcl_publisher_init+0xe2>
 801133a:	f8d4 a000 	ldr.w	sl, [r4]
 801133e:	f1ba 0f00 	cmp.w	sl, #0
 8011342:	d004      	beq.n	801134e <rcl_publisher_init+0x3a>
 8011344:	2764      	movs	r7, #100	@ 0x64
 8011346:	4638      	mov	r0, r7
 8011348:	b008      	add	sp, #32
 801134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801134e:	4630      	mov	r0, r6
 8011350:	f7ff febe 	bl	80110d0 <rcl_node_is_valid>
 8011354:	2800      	cmp	r0, #0
 8011356:	d053      	beq.n	8011400 <rcl_publisher_init+0xec>
 8011358:	f1b8 0f00 	cmp.w	r8, #0
 801135c:	d04b      	beq.n	80113f6 <rcl_publisher_init+0xe2>
 801135e:	2f00      	cmp	r7, #0
 8011360:	d049      	beq.n	80113f6 <rcl_publisher_init+0xe2>
 8011362:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8011366:	aa07      	add	r2, sp, #28
 8011368:	9205      	str	r2, [sp, #20]
 801136a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801136e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011372:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011376:	f8cd a01c 	str.w	sl, [sp, #28]
 801137a:	4639      	mov	r1, r7
 801137c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011380:	4630      	mov	r0, r6
 8011382:	f7ff ff19 	bl	80111b8 <rcl_node_resolve_name>
 8011386:	4607      	mov	r7, r0
 8011388:	2800      	cmp	r0, #0
 801138a:	d150      	bne.n	801142e <rcl_publisher_init+0x11a>
 801138c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8011390:	21c8      	movs	r1, #200	@ 0xc8
 8011392:	2001      	movs	r0, #1
 8011394:	4798      	blx	r3
 8011396:	6020      	str	r0, [r4, #0]
 8011398:	2800      	cmp	r0, #0
 801139a:	d04e      	beq.n	801143a <rcl_publisher_init+0x126>
 801139c:	4630      	mov	r0, r6
 801139e:	f7ff feb9 	bl	8011114 <rcl_node_get_rmw_handle>
 80113a2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80113a6:	9300      	str	r3, [sp, #0]
 80113a8:	9a07      	ldr	r2, [sp, #28]
 80113aa:	6827      	ldr	r7, [r4, #0]
 80113ac:	462b      	mov	r3, r5
 80113ae:	4641      	mov	r1, r8
 80113b0:	f002 fc80 	bl	8013cb4 <rmw_create_publisher>
 80113b4:	6823      	ldr	r3, [r4, #0]
 80113b6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80113ba:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80113be:	b370      	cbz	r0, 801141e <rcl_publisher_init+0x10a>
 80113c0:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80113c4:	f002 fd54 	bl	8013e70 <rmw_publisher_get_actual_qos>
 80113c8:	6823      	ldr	r3, [r4, #0]
 80113ca:	4607      	mov	r7, r0
 80113cc:	b9d0      	cbnz	r0, 8011404 <rcl_publisher_init+0xf0>
 80113ce:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80113d2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80113d6:	4629      	mov	r1, r5
 80113d8:	2270      	movs	r2, #112	@ 0x70
 80113da:	4618      	mov	r0, r3
 80113dc:	f00c f945 	bl	801d66a <memcpy>
 80113e0:	6832      	ldr	r2, [r6, #0]
 80113e2:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80113e6:	9807      	ldr	r0, [sp, #28]
 80113e8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80113ea:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80113ec:	4798      	blx	r3
 80113ee:	4638      	mov	r0, r7
 80113f0:	b008      	add	sp, #32
 80113f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f6:	270b      	movs	r7, #11
 80113f8:	4638      	mov	r0, r7
 80113fa:	b008      	add	sp, #32
 80113fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011400:	27c8      	movs	r7, #200	@ 0xc8
 8011402:	e7a0      	b.n	8011346 <rcl_publisher_init+0x32>
 8011404:	b18b      	cbz	r3, 801142a <rcl_publisher_init+0x116>
 8011406:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801140a:	b142      	cbz	r2, 801141e <rcl_publisher_init+0x10a>
 801140c:	4630      	mov	r0, r6
 801140e:	f7ff fe81 	bl	8011114 <rcl_node_get_rmw_handle>
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8011418:	f002 fd3a 	bl	8013e90 <rmw_destroy_publisher>
 801141c:	6823      	ldr	r3, [r4, #0]
 801141e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8011420:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8011422:	4618      	mov	r0, r3
 8011424:	4790      	blx	r2
 8011426:	2300      	movs	r3, #0
 8011428:	6023      	str	r3, [r4, #0]
 801142a:	2701      	movs	r7, #1
 801142c:	e7db      	b.n	80113e6 <rcl_publisher_init+0xd2>
 801142e:	2867      	cmp	r0, #103	@ 0x67
 8011430:	d0d9      	beq.n	80113e6 <rcl_publisher_init+0xd2>
 8011432:	2869      	cmp	r0, #105	@ 0x69
 8011434:	d003      	beq.n	801143e <rcl_publisher_init+0x12a>
 8011436:	280a      	cmp	r0, #10
 8011438:	d1f7      	bne.n	801142a <rcl_publisher_init+0x116>
 801143a:	270a      	movs	r7, #10
 801143c:	e7d3      	b.n	80113e6 <rcl_publisher_init+0xd2>
 801143e:	2767      	movs	r7, #103	@ 0x67
 8011440:	e7d1      	b.n	80113e6 <rcl_publisher_init+0xd2>
 8011442:	bf00      	nop

08011444 <rcl_publisher_get_default_options>:
 8011444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011446:	4d1d      	ldr	r5, [pc, #116]	@ (80114bc <rcl_publisher_get_default_options+0x78>)
 8011448:	491d      	ldr	r1, [pc, #116]	@ (80114c0 <rcl_publisher_get_default_options+0x7c>)
 801144a:	b08b      	sub	sp, #44	@ 0x2c
 801144c:	2250      	movs	r2, #80	@ 0x50
 801144e:	4604      	mov	r4, r0
 8011450:	4628      	mov	r0, r5
 8011452:	f00c f90a 	bl	801d66a <memcpy>
 8011456:	a802      	add	r0, sp, #8
 8011458:	f001 fc02 	bl	8012c60 <rcutils_get_default_allocator>
 801145c:	f10d 0c08 	add.w	ip, sp, #8
 8011460:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011464:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011468:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801146c:	466e      	mov	r6, sp
 801146e:	f8dc 3000 	ldr.w	r3, [ip]
 8011472:	f8ce 3000 	str.w	r3, [lr]
 8011476:	4630      	mov	r0, r6
 8011478:	f003 fde2 	bl	8015040 <rmw_get_default_publisher_options>
 801147c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011480:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8011484:	e883 0003 	stmia.w	r3, {r0, r1}
 8011488:	2700      	movs	r7, #0
 801148a:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 801148e:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8011492:	f7ff fe45 	bl	8011120 <rcl_get_disable_loaned_message>
 8011496:	b958      	cbnz	r0, 80114b0 <rcl_publisher_get_default_options+0x6c>
 8011498:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801149c:	f885 306c 	strb.w	r3, [r5, #108]	@ 0x6c
 80114a0:	4906      	ldr	r1, [pc, #24]	@ (80114bc <rcl_publisher_get_default_options+0x78>)
 80114a2:	2270      	movs	r2, #112	@ 0x70
 80114a4:	4620      	mov	r0, r4
 80114a6:	f00c f8e0 	bl	801d66a <memcpy>
 80114aa:	4620      	mov	r0, r4
 80114ac:	b00b      	add	sp, #44	@ 0x2c
 80114ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114b0:	f001 fcc6 	bl	8012e40 <rcutils_reset_error>
 80114b4:	f885 706c 	strb.w	r7, [r5, #108]	@ 0x6c
 80114b8:	e7f2      	b.n	80114a0 <rcl_publisher_get_default_options+0x5c>
 80114ba:	bf00      	nop
 80114bc:	20013680 	.word	0x20013680
 80114c0:	08023798 	.word	0x08023798

080114c4 <rcl_publish>:
 80114c4:	b1f8      	cbz	r0, 8011506 <rcl_publish+0x42>
 80114c6:	6803      	ldr	r3, [r0, #0]
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	4604      	mov	r4, r0
 80114cc:	b1b3      	cbz	r3, 80114fc <rcl_publish+0x38>
 80114ce:	4616      	mov	r6, r2
 80114d0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80114d4:	b192      	cbz	r2, 80114fc <rcl_publish+0x38>
 80114d6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80114da:	460d      	mov	r5, r1
 80114dc:	f7ff f99c 	bl	8010818 <rcl_context_is_valid>
 80114e0:	b160      	cbz	r0, 80114fc <rcl_publish+0x38>
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80114e8:	b140      	cbz	r0, 80114fc <rcl_publish+0x38>
 80114ea:	b155      	cbz	r5, 8011502 <rcl_publish+0x3e>
 80114ec:	4632      	mov	r2, r6
 80114ee:	4629      	mov	r1, r5
 80114f0:	f002 fb80 	bl	8013bf4 <rmw_publish>
 80114f4:	3800      	subs	r0, #0
 80114f6:	bf18      	it	ne
 80114f8:	2001      	movne	r0, #1
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8011500:	bd70      	pop	{r4, r5, r6, pc}
 8011502:	200b      	movs	r0, #11
 8011504:	bd70      	pop	{r4, r5, r6, pc}
 8011506:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801150a:	4770      	bx	lr

0801150c <rcl_publisher_is_valid>:
 801150c:	b1a0      	cbz	r0, 8011538 <rcl_publisher_is_valid+0x2c>
 801150e:	6803      	ldr	r3, [r0, #0]
 8011510:	b510      	push	{r4, lr}
 8011512:	4604      	mov	r4, r0
 8011514:	b173      	cbz	r3, 8011534 <rcl_publisher_is_valid+0x28>
 8011516:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801151a:	b15a      	cbz	r2, 8011534 <rcl_publisher_is_valid+0x28>
 801151c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8011520:	f7ff f97a 	bl	8010818 <rcl_context_is_valid>
 8011524:	b130      	cbz	r0, 8011534 <rcl_publisher_is_valid+0x28>
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801152c:	3800      	subs	r0, #0
 801152e:	bf18      	it	ne
 8011530:	2001      	movne	r0, #1
 8011532:	bd10      	pop	{r4, pc}
 8011534:	2000      	movs	r0, #0
 8011536:	bd10      	pop	{r4, pc}
 8011538:	2000      	movs	r0, #0
 801153a:	4770      	bx	lr

0801153c <rcl_publisher_is_valid_except_context>:
 801153c:	b130      	cbz	r0, 801154c <rcl_publisher_is_valid_except_context+0x10>
 801153e:	6800      	ldr	r0, [r0, #0]
 8011540:	b120      	cbz	r0, 801154c <rcl_publisher_is_valid_except_context+0x10>
 8011542:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8011546:	3800      	subs	r0, #0
 8011548:	bf18      	it	ne
 801154a:	2001      	movne	r0, #1
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop

08011550 <exact_match_lookup>:
 8011550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011552:	f102 0708 	add.w	r7, r2, #8
 8011556:	460b      	mov	r3, r1
 8011558:	4614      	mov	r4, r2
 801155a:	4606      	mov	r6, r0
 801155c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011560:	b085      	sub	sp, #20
 8011562:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011566:	4618      	mov	r0, r3
 8011568:	4919      	ldr	r1, [pc, #100]	@ (80115d0 <exact_match_lookup+0x80>)
 801156a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801156e:	f001 fc85 	bl	8012e7c <rcutils_join_path>
 8011572:	7833      	ldrb	r3, [r6, #0]
 8011574:	2b2f      	cmp	r3, #47	@ 0x2f
 8011576:	4605      	mov	r5, r0
 8011578:	d023      	beq.n	80115c2 <exact_match_lookup+0x72>
 801157a:	f104 030c 	add.w	r3, r4, #12
 801157e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011582:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011586:	1c70      	adds	r0, r6, #1
 8011588:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801158c:	f001 fc7c 	bl	8012e88 <rcutils_to_native_path>
 8011590:	4606      	mov	r6, r0
 8011592:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011596:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801159a:	4631      	mov	r1, r6
 801159c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80115a0:	4628      	mov	r0, r5
 80115a2:	f001 fc6b 	bl	8012e7c <rcutils_join_path>
 80115a6:	6862      	ldr	r2, [r4, #4]
 80115a8:	6921      	ldr	r1, [r4, #16]
 80115aa:	4603      	mov	r3, r0
 80115ac:	4630      	mov	r0, r6
 80115ae:	461e      	mov	r6, r3
 80115b0:	4790      	blx	r2
 80115b2:	4628      	mov	r0, r5
 80115b4:	6863      	ldr	r3, [r4, #4]
 80115b6:	6921      	ldr	r1, [r4, #16]
 80115b8:	4798      	blx	r3
 80115ba:	4635      	mov	r5, r6
 80115bc:	4628      	mov	r0, r5
 80115be:	b005      	add	sp, #20
 80115c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c2:	7873      	ldrb	r3, [r6, #1]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d1d8      	bne.n	801157a <exact_match_lookup+0x2a>
 80115c8:	4628      	mov	r0, r5
 80115ca:	b005      	add	sp, #20
 80115cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ce:	bf00      	nop
 80115d0:	08023824 	.word	0x08023824

080115d4 <rcl_get_secure_root>:
 80115d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115d8:	b085      	sub	sp, #20
 80115da:	b168      	cbz	r0, 80115f8 <rcl_get_secure_root+0x24>
 80115dc:	4607      	mov	r7, r0
 80115de:	4608      	mov	r0, r1
 80115e0:	460c      	mov	r4, r1
 80115e2:	f001 fb4b 	bl	8012c7c <rcutils_allocator_is_valid>
 80115e6:	b138      	cbz	r0, 80115f8 <rcl_get_secure_root+0x24>
 80115e8:	2300      	movs	r3, #0
 80115ea:	482d      	ldr	r0, [pc, #180]	@ (80116a0 <rcl_get_secure_root+0xcc>)
 80115ec:	9303      	str	r3, [sp, #12]
 80115ee:	a903      	add	r1, sp, #12
 80115f0:	f001 fbf6 	bl	8012de0 <rcutils_get_env>
 80115f4:	4605      	mov	r5, r0
 80115f6:	b120      	cbz	r0, 8011602 <rcl_get_secure_root+0x2e>
 80115f8:	2500      	movs	r5, #0
 80115fa:	4628      	mov	r0, r5
 80115fc:	b005      	add	sp, #20
 80115fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011602:	9b03      	ldr	r3, [sp, #12]
 8011604:	781a      	ldrb	r2, [r3, #0]
 8011606:	2a00      	cmp	r2, #0
 8011608:	d0f6      	beq.n	80115f8 <rcl_get_secure_root+0x24>
 801160a:	f104 090c 	add.w	r9, r4, #12
 801160e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011612:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011616:	4618      	mov	r0, r3
 8011618:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801161c:	f001 fd56 	bl	80130cc <rcutils_strdup>
 8011620:	4680      	mov	r8, r0
 8011622:	2800      	cmp	r0, #0
 8011624:	d0e8      	beq.n	80115f8 <rcl_get_secure_root+0x24>
 8011626:	481f      	ldr	r0, [pc, #124]	@ (80116a4 <rcl_get_secure_root+0xd0>)
 8011628:	9503      	str	r5, [sp, #12]
 801162a:	a903      	add	r1, sp, #12
 801162c:	f001 fbd8 	bl	8012de0 <rcutils_get_env>
 8011630:	b160      	cbz	r0, 801164c <rcl_get_secure_root+0x78>
 8011632:	2600      	movs	r6, #0
 8011634:	6863      	ldr	r3, [r4, #4]
 8011636:	6921      	ldr	r1, [r4, #16]
 8011638:	4630      	mov	r0, r6
 801163a:	4798      	blx	r3
 801163c:	4640      	mov	r0, r8
 801163e:	6863      	ldr	r3, [r4, #4]
 8011640:	6921      	ldr	r1, [r4, #16]
 8011642:	4798      	blx	r3
 8011644:	4628      	mov	r0, r5
 8011646:	b005      	add	sp, #20
 8011648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801164c:	9b03      	ldr	r3, [sp, #12]
 801164e:	781e      	ldrb	r6, [r3, #0]
 8011650:	b1f6      	cbz	r6, 8011690 <rcl_get_secure_root+0xbc>
 8011652:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011656:	e88d 0003 	stmia.w	sp, {r0, r1}
 801165a:	4618      	mov	r0, r3
 801165c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011660:	f001 fd34 	bl	80130cc <rcutils_strdup>
 8011664:	4606      	mov	r6, r0
 8011666:	2800      	cmp	r0, #0
 8011668:	d0e3      	beq.n	8011632 <rcl_get_secure_root+0x5e>
 801166a:	4622      	mov	r2, r4
 801166c:	4641      	mov	r1, r8
 801166e:	f7ff ff6f 	bl	8011550 <exact_match_lookup>
 8011672:	4605      	mov	r5, r0
 8011674:	2d00      	cmp	r5, #0
 8011676:	d0dd      	beq.n	8011634 <rcl_get_secure_root+0x60>
 8011678:	4628      	mov	r0, r5
 801167a:	f001 fbfd 	bl	8012e78 <rcutils_is_directory>
 801167e:	4603      	mov	r3, r0
 8011680:	2800      	cmp	r0, #0
 8011682:	d1d7      	bne.n	8011634 <rcl_get_secure_root+0x60>
 8011684:	4628      	mov	r0, r5
 8011686:	6921      	ldr	r1, [r4, #16]
 8011688:	461d      	mov	r5, r3
 801168a:	6863      	ldr	r3, [r4, #4]
 801168c:	4798      	blx	r3
 801168e:	e7d1      	b.n	8011634 <rcl_get_secure_root+0x60>
 8011690:	4622      	mov	r2, r4
 8011692:	4638      	mov	r0, r7
 8011694:	4641      	mov	r1, r8
 8011696:	f7ff ff5b 	bl	8011550 <exact_match_lookup>
 801169a:	4605      	mov	r5, r0
 801169c:	e7ea      	b.n	8011674 <rcl_get_secure_root+0xa0>
 801169e:	bf00      	nop
 80116a0:	08023830 	.word	0x08023830
 80116a4:	08023848 	.word	0x08023848

080116a8 <rcl_get_security_options_from_environment>:
 80116a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ac:	b082      	sub	sp, #8
 80116ae:	2300      	movs	r3, #0
 80116b0:	4606      	mov	r6, r0
 80116b2:	460f      	mov	r7, r1
 80116b4:	4820      	ldr	r0, [pc, #128]	@ (8011738 <rcl_get_security_options_from_environment+0x90>)
 80116b6:	9301      	str	r3, [sp, #4]
 80116b8:	a901      	add	r1, sp, #4
 80116ba:	4690      	mov	r8, r2
 80116bc:	f001 fb90 	bl	8012de0 <rcutils_get_env>
 80116c0:	b120      	cbz	r0, 80116cc <rcl_get_security_options_from_environment+0x24>
 80116c2:	2501      	movs	r5, #1
 80116c4:	4628      	mov	r0, r5
 80116c6:	b002      	add	sp, #8
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	491b      	ldr	r1, [pc, #108]	@ (801173c <rcl_get_security_options_from_environment+0x94>)
 80116ce:	4604      	mov	r4, r0
 80116d0:	9801      	ldr	r0, [sp, #4]
 80116d2:	f7ee fd7d 	bl	80001d0 <strcmp>
 80116d6:	4605      	mov	r5, r0
 80116d8:	b9e8      	cbnz	r0, 8011716 <rcl_get_security_options_from_environment+0x6e>
 80116da:	9001      	str	r0, [sp, #4]
 80116dc:	f1b8 0f00 	cmp.w	r8, #0
 80116e0:	d020      	beq.n	8011724 <rcl_get_security_options_from_environment+0x7c>
 80116e2:	4817      	ldr	r0, [pc, #92]	@ (8011740 <rcl_get_security_options_from_environment+0x98>)
 80116e4:	a901      	add	r1, sp, #4
 80116e6:	f001 fb7b 	bl	8012de0 <rcutils_get_env>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d1e9      	bne.n	80116c2 <rcl_get_security_options_from_environment+0x1a>
 80116ee:	4915      	ldr	r1, [pc, #84]	@ (8011744 <rcl_get_security_options_from_environment+0x9c>)
 80116f0:	9801      	ldr	r0, [sp, #4]
 80116f2:	f7ee fd6d 	bl	80001d0 <strcmp>
 80116f6:	fab0 f080 	clz	r0, r0
 80116fa:	0940      	lsrs	r0, r0, #5
 80116fc:	f888 0000 	strb.w	r0, [r8]
 8011700:	4639      	mov	r1, r7
 8011702:	4630      	mov	r0, r6
 8011704:	f7ff ff66 	bl	80115d4 <rcl_get_secure_root>
 8011708:	b170      	cbz	r0, 8011728 <rcl_get_security_options_from_environment+0x80>
 801170a:	f8c8 0004 	str.w	r0, [r8, #4]
 801170e:	4628      	mov	r0, r5
 8011710:	b002      	add	sp, #8
 8011712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011716:	4625      	mov	r5, r4
 8011718:	4628      	mov	r0, r5
 801171a:	f888 4000 	strb.w	r4, [r8]
 801171e:	b002      	add	sp, #8
 8011720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011724:	250b      	movs	r5, #11
 8011726:	e7cd      	b.n	80116c4 <rcl_get_security_options_from_environment+0x1c>
 8011728:	f898 5000 	ldrb.w	r5, [r8]
 801172c:	f1a5 0501 	sub.w	r5, r5, #1
 8011730:	fab5 f585 	clz	r5, r5
 8011734:	096d      	lsrs	r5, r5, #5
 8011736:	e7c5      	b.n	80116c4 <rcl_get_security_options_from_environment+0x1c>
 8011738:	080237e8 	.word	0x080237e8
 801173c:	080237fc 	.word	0x080237fc
 8011740:	08023804 	.word	0x08023804
 8011744:	0802381c 	.word	0x0802381c

08011748 <rcl_service_get_rmw_handle>:
 8011748:	b118      	cbz	r0, 8011752 <rcl_service_get_rmw_handle+0xa>
 801174a:	6800      	ldr	r0, [r0, #0]
 801174c:	b108      	cbz	r0, 8011752 <rcl_service_get_rmw_handle+0xa>
 801174e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011752:	4770      	bx	lr

08011754 <rcl_take_request>:
 8011754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011756:	468e      	mov	lr, r1
 8011758:	460c      	mov	r4, r1
 801175a:	4617      	mov	r7, r2
 801175c:	4605      	mov	r5, r0
 801175e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011762:	b091      	sub	sp, #68	@ 0x44
 8011764:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8011768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801176c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011770:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011774:	b30d      	cbz	r5, 80117ba <rcl_take_request+0x66>
 8011776:	682b      	ldr	r3, [r5, #0]
 8011778:	b1fb      	cbz	r3, 80117ba <rcl_take_request+0x66>
 801177a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801177e:	b1e0      	cbz	r0, 80117ba <rcl_take_request+0x66>
 8011780:	b397      	cbz	r7, 80117e8 <rcl_take_request+0x94>
 8011782:	2300      	movs	r3, #0
 8011784:	f88d 3017 	strb.w	r3, [sp, #23]
 8011788:	463a      	mov	r2, r7
 801178a:	f10d 0317 	add.w	r3, sp, #23
 801178e:	a906      	add	r1, sp, #24
 8011790:	f002 fc1e 	bl	8013fd0 <rmw_take_request>
 8011794:	4606      	mov	r6, r0
 8011796:	b198      	cbz	r0, 80117c0 <rcl_take_request+0x6c>
 8011798:	280a      	cmp	r0, #10
 801179a:	bf18      	it	ne
 801179c:	2601      	movne	r6, #1
 801179e:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80117a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80117a6:	46a6      	mov	lr, r4
 80117a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80117ac:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80117b0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80117b4:	4630      	mov	r0, r6
 80117b6:	b011      	add	sp, #68	@ 0x44
 80117b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ba:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80117be:	e7ee      	b.n	801179e <rcl_take_request+0x4a>
 80117c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80117c4:	b193      	cbz	r3, 80117ec <rcl_take_request+0x98>
 80117c6:	682b      	ldr	r3, [r5, #0]
 80117c8:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d0e6      	beq.n	801179e <rcl_take_request+0x4a>
 80117d0:	463a      	mov	r2, r7
 80117d2:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 80117d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80117d8:	e9cd 6700 	strd	r6, r7, [sp]
 80117dc:	9302      	str	r3, [sp, #8]
 80117de:	2101      	movs	r1, #1
 80117e0:	f000 f842 	bl	8011868 <rcl_send_service_event_message>
 80117e4:	4606      	mov	r6, r0
 80117e6:	e7da      	b.n	801179e <rcl_take_request+0x4a>
 80117e8:	260b      	movs	r6, #11
 80117ea:	e7d8      	b.n	801179e <rcl_take_request+0x4a>
 80117ec:	f240 2659 	movw	r6, #601	@ 0x259
 80117f0:	e7d5      	b.n	801179e <rcl_take_request+0x4a>
 80117f2:	bf00      	nop

080117f4 <rcl_send_response>:
 80117f4:	b350      	cbz	r0, 801184c <rcl_send_response+0x58>
 80117f6:	b570      	push	{r4, r5, r6, lr}
 80117f8:	6803      	ldr	r3, [r0, #0]
 80117fa:	b084      	sub	sp, #16
 80117fc:	4604      	mov	r4, r0
 80117fe:	b1cb      	cbz	r3, 8011834 <rcl_send_response+0x40>
 8011800:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011804:	b1b0      	cbz	r0, 8011834 <rcl_send_response+0x40>
 8011806:	460e      	mov	r6, r1
 8011808:	b1e9      	cbz	r1, 8011846 <rcl_send_response+0x52>
 801180a:	4615      	mov	r5, r2
 801180c:	b1da      	cbz	r2, 8011846 <rcl_send_response+0x52>
 801180e:	f002 fc3d 	bl	801408c <rmw_send_response>
 8011812:	b998      	cbnz	r0, 801183c <rcl_send_response+0x48>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801181a:	b16b      	cbz	r3, 8011838 <rcl_send_response+0x44>
 801181c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8011820:	462a      	mov	r2, r5
 8011822:	e9cd 0100 	strd	r0, r1, [sp]
 8011826:	9602      	str	r6, [sp, #8]
 8011828:	2102      	movs	r1, #2
 801182a:	4618      	mov	r0, r3
 801182c:	f000 f81c 	bl	8011868 <rcl_send_service_event_message>
 8011830:	b004      	add	sp, #16
 8011832:	bd70      	pop	{r4, r5, r6, pc}
 8011834:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011838:	b004      	add	sp, #16
 801183a:	bd70      	pop	{r4, r5, r6, pc}
 801183c:	2802      	cmp	r0, #2
 801183e:	bf18      	it	ne
 8011840:	2001      	movne	r0, #1
 8011842:	b004      	add	sp, #16
 8011844:	bd70      	pop	{r4, r5, r6, pc}
 8011846:	200b      	movs	r0, #11
 8011848:	b004      	add	sp, #16
 801184a:	bd70      	pop	{r4, r5, r6, pc}
 801184c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop

08011854 <rcl_service_is_valid>:
 8011854:	b130      	cbz	r0, 8011864 <rcl_service_is_valid+0x10>
 8011856:	6800      	ldr	r0, [r0, #0]
 8011858:	b120      	cbz	r0, 8011864 <rcl_service_is_valid+0x10>
 801185a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801185e:	3800      	subs	r0, #0
 8011860:	bf18      	it	ne
 8011862:	2001      	movne	r0, #1
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop

08011868 <rcl_send_service_event_message>:
 8011868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801186c:	b093      	sub	sp, #76	@ 0x4c
 801186e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011870:	b192      	cbz	r2, 8011898 <rcl_send_service_event_message+0x30>
 8011872:	b18e      	cbz	r6, 8011898 <rcl_send_service_event_message+0x30>
 8011874:	4604      	mov	r4, r0
 8011876:	b150      	cbz	r0, 801188e <rcl_send_service_event_message+0x26>
 8011878:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 801187c:	b13b      	cbz	r3, 801188e <rcl_send_service_event_message+0x26>
 801187e:	68c0      	ldr	r0, [r0, #12]
 8011880:	460f      	mov	r7, r1
 8011882:	4615      	mov	r5, r2
 8011884:	f000 f9e8 	bl	8011c58 <rcl_clock_valid>
 8011888:	b108      	cbz	r0, 801188e <rcl_send_service_event_message+0x26>
 801188a:	7a23      	ldrb	r3, [r4, #8]
 801188c:	b94b      	cbnz	r3, 80118a2 <rcl_send_service_event_message+0x3a>
 801188e:	2401      	movs	r4, #1
 8011890:	4620      	mov	r0, r4
 8011892:	b013      	add	sp, #76	@ 0x4c
 8011894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011898:	240b      	movs	r4, #11
 801189a:	4620      	mov	r0, r4
 801189c:	b013      	add	sp, #76	@ 0x4c
 801189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118a2:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 80118a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118aa:	f10d 0c0c 	add.w	ip, sp, #12
 80118ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118b2:	f8de 3000 	ldr.w	r3, [lr]
 80118b6:	f8cc 3000 	str.w	r3, [ip]
 80118ba:	a803      	add	r0, sp, #12
 80118bc:	f001 f9de 	bl	8012c7c <rcutils_allocator_is_valid>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d0e9      	beq.n	8011898 <rcl_send_service_event_message+0x30>
 80118c4:	6820      	ldr	r0, [r4, #0]
 80118c6:	f7ff fe21 	bl	801150c <rcl_publisher_is_valid>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d05b      	beq.n	8011986 <rcl_send_service_event_message+0x11e>
 80118ce:	4669      	mov	r1, sp
 80118d0:	68e0      	ldr	r0, [r4, #12]
 80118d2:	f000 fa43 	bl	8011d5c <rcl_clock_get_now>
 80118d6:	4601      	mov	r1, r0
 80118d8:	2800      	cmp	r0, #0
 80118da:	d144      	bne.n	8011966 <rcl_send_service_event_message+0xfe>
 80118dc:	2220      	movs	r2, #32
 80118de:	eb0d 0002 	add.w	r0, sp, r2
 80118e2:	f00b fde3 	bl	801d4ac <memset>
 80118e6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80118ea:	a329      	add	r3, pc, #164	@ (adr r3, 8011990 <rcl_send_service_event_message+0x128>)
 80118ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f0:	4640      	mov	r0, r8
 80118f2:	4649      	mov	r1, r9
 80118f4:	f88d 7020 	strb.w	r7, [sp, #32]
 80118f8:	f7ef f9b6 	bl	8000c68 <__aeabi_ldivmod>
 80118fc:	a324      	add	r3, pc, #144	@ (adr r3, 8011990 <rcl_send_service_event_message+0x128>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	9009      	str	r0, [sp, #36]	@ 0x24
 8011904:	4649      	mov	r1, r9
 8011906:	4640      	mov	r0, r8
 8011908:	f7ef f9ae 	bl	8000c68 <__aeabi_ldivmod>
 801190c:	920a      	str	r2, [sp, #40]	@ 0x28
 801190e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	@ 0x68
 8011912:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011916:	7a23      	ldrb	r3, [r4, #8]
 8011918:	6830      	ldr	r0, [r6, #0]
 801191a:	6871      	ldr	r1, [r6, #4]
 801191c:	68b2      	ldr	r2, [r6, #8]
 801191e:	2b01      	cmp	r3, #1
 8011920:	68f3      	ldr	r3, [r6, #12]
 8011922:	bf08      	it	eq
 8011924:	2500      	moveq	r5, #0
 8011926:	ae0b      	add	r6, sp, #44	@ 0x2c
 8011928:	2f01      	cmp	r7, #1
 801192a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801192c:	d81e      	bhi.n	801196c <rcl_send_service_event_message+0x104>
 801192e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011932:	462a      	mov	r2, r5
 8011934:	a808      	add	r0, sp, #32
 8011936:	699d      	ldr	r5, [r3, #24]
 8011938:	a903      	add	r1, sp, #12
 801193a:	2300      	movs	r3, #0
 801193c:	47a8      	blx	r5
 801193e:	4605      	mov	r5, r0
 8011940:	2d00      	cmp	r5, #0
 8011942:	d0a4      	beq.n	801188e <rcl_send_service_event_message+0x26>
 8011944:	6820      	ldr	r0, [r4, #0]
 8011946:	4629      	mov	r1, r5
 8011948:	2200      	movs	r2, #0
 801194a:	f7ff fdbb 	bl	80114c4 <rcl_publish>
 801194e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011952:	a903      	add	r1, sp, #12
 8011954:	4604      	mov	r4, r0
 8011956:	69db      	ldr	r3, [r3, #28]
 8011958:	4628      	mov	r0, r5
 801195a:	4798      	blx	r3
 801195c:	2c00      	cmp	r4, #0
 801195e:	d097      	beq.n	8011890 <rcl_send_service_event_message+0x28>
 8011960:	f001 fa6e 	bl	8012e40 <rcutils_reset_error>
 8011964:	e794      	b.n	8011890 <rcl_send_service_event_message+0x28>
 8011966:	f001 fa6b 	bl	8012e40 <rcutils_reset_error>
 801196a:	e790      	b.n	801188e <rcl_send_service_event_message+0x26>
 801196c:	1eb9      	subs	r1, r7, #2
 801196e:	2901      	cmp	r1, #1
 8011970:	d8f9      	bhi.n	8011966 <rcl_send_service_event_message+0xfe>
 8011972:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011976:	462b      	mov	r3, r5
 8011978:	a808      	add	r0, sp, #32
 801197a:	6995      	ldr	r5, [r2, #24]
 801197c:	a903      	add	r1, sp, #12
 801197e:	2200      	movs	r2, #0
 8011980:	47a8      	blx	r5
 8011982:	4605      	mov	r5, r0
 8011984:	e7dc      	b.n	8011940 <rcl_send_service_event_message+0xd8>
 8011986:	f44f 7496 	mov.w	r4, #300	@ 0x12c
 801198a:	e781      	b.n	8011890 <rcl_send_service_event_message+0x28>
 801198c:	f3af 8000 	nop.w
 8011990:	3b9aca00 	.word	0x3b9aca00
 8011994:	00000000 	.word	0x00000000

08011998 <rcl_get_zero_initialized_subscription>:
 8011998:	4b01      	ldr	r3, [pc, #4]	@ (80119a0 <rcl_get_zero_initialized_subscription+0x8>)
 801199a:	6818      	ldr	r0, [r3, #0]
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	08023868 	.word	0x08023868

080119a4 <rcl_subscription_init>:
 80119a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119a8:	b089      	sub	sp, #36	@ 0x24
 80119aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80119ac:	b1d6      	cbz	r6, 80119e4 <rcl_subscription_init+0x40>
 80119ae:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80119b2:	4604      	mov	r4, r0
 80119b4:	4648      	mov	r0, r9
 80119b6:	460d      	mov	r5, r1
 80119b8:	4690      	mov	r8, r2
 80119ba:	461f      	mov	r7, r3
 80119bc:	f001 f95e 	bl	8012c7c <rcutils_allocator_is_valid>
 80119c0:	b180      	cbz	r0, 80119e4 <rcl_subscription_init+0x40>
 80119c2:	b17c      	cbz	r4, 80119e4 <rcl_subscription_init+0x40>
 80119c4:	4628      	mov	r0, r5
 80119c6:	f7ff fb83 	bl	80110d0 <rcl_node_is_valid>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d054      	beq.n	8011a78 <rcl_subscription_init+0xd4>
 80119ce:	f1b8 0f00 	cmp.w	r8, #0
 80119d2:	d007      	beq.n	80119e4 <rcl_subscription_init+0x40>
 80119d4:	b137      	cbz	r7, 80119e4 <rcl_subscription_init+0x40>
 80119d6:	6823      	ldr	r3, [r4, #0]
 80119d8:	b14b      	cbz	r3, 80119ee <rcl_subscription_init+0x4a>
 80119da:	2764      	movs	r7, #100	@ 0x64
 80119dc:	4638      	mov	r0, r7
 80119de:	b009      	add	sp, #36	@ 0x24
 80119e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119e4:	270b      	movs	r7, #11
 80119e6:	4638      	mov	r0, r7
 80119e8:	b009      	add	sp, #36	@ 0x24
 80119ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80119f2:	aa07      	add	r2, sp, #28
 80119f4:	9205      	str	r2, [sp, #20]
 80119f6:	9307      	str	r3, [sp, #28]
 80119f8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80119fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011a04:	4639      	mov	r1, r7
 8011a06:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	f7ff fbd4 	bl	80111b8 <rcl_node_resolve_name>
 8011a10:	4607      	mov	r7, r0
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d15f      	bne.n	8011ad6 <rcl_subscription_init+0x132>
 8011a16:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011a1a:	21d0      	movs	r1, #208	@ 0xd0
 8011a1c:	2001      	movs	r0, #1
 8011a1e:	4798      	blx	r3
 8011a20:	6020      	str	r0, [r4, #0]
 8011a22:	2800      	cmp	r0, #0
 8011a24:	d05d      	beq.n	8011ae2 <rcl_subscription_init+0x13e>
 8011a26:	4628      	mov	r0, r5
 8011a28:	f7ff fb74 	bl	8011114 <rcl_node_get_rmw_handle>
 8011a2c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	9a07      	ldr	r2, [sp, #28]
 8011a34:	6827      	ldr	r7, [r4, #0]
 8011a36:	4641      	mov	r1, r8
 8011a38:	4633      	mov	r3, r6
 8011a3a:	f002 fc11 	bl	8014260 <rmw_create_subscription>
 8011a3e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 8011a42:	6827      	ldr	r7, [r4, #0]
 8011a44:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8011a48:	b348      	cbz	r0, 8011a9e <rcl_subscription_init+0xfa>
 8011a4a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8011a4e:	f002 fce9 	bl	8014424 <rmw_subscription_get_actual_qos>
 8011a52:	4607      	mov	r7, r0
 8011a54:	b9a8      	cbnz	r0, 8011a82 <rcl_subscription_init+0xde>
 8011a56:	6820      	ldr	r0, [r4, #0]
 8011a58:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011a5c:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 8011a60:	2278      	movs	r2, #120	@ 0x78
 8011a62:	4631      	mov	r1, r6
 8011a64:	f00b fe01 	bl	801d66a <memcpy>
 8011a68:	9807      	ldr	r0, [sp, #28]
 8011a6a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011a6c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011a6e:	4798      	blx	r3
 8011a70:	4638      	mov	r0, r7
 8011a72:	b009      	add	sp, #36	@ 0x24
 8011a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a78:	27c8      	movs	r7, #200	@ 0xc8
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	b009      	add	sp, #36	@ 0x24
 8011a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a82:	6827      	ldr	r7, [r4, #0]
 8011a84:	b32f      	cbz	r7, 8011ad2 <rcl_subscription_init+0x12e>
 8011a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011a8a:	b14b      	cbz	r3, 8011aa0 <rcl_subscription_init+0xfc>
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7ff fb41 	bl	8011114 <rcl_node_get_rmw_handle>
 8011a92:	6823      	ldr	r3, [r4, #0]
 8011a94:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8011a98:	f002 fcd4 	bl	8014444 <rmw_destroy_subscription>
 8011a9c:	6827      	ldr	r7, [r4, #0]
 8011a9e:	b197      	cbz	r7, 8011ac6 <rcl_subscription_init+0x122>
 8011aa0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f001 f8e9 	bl	8012c7c <rcutils_allocator_is_valid>
 8011aaa:	b158      	cbz	r0, 8011ac4 <rcl_subscription_init+0x120>
 8011aac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011aae:	b148      	cbz	r0, 8011ac4 <rcl_subscription_init+0x120>
 8011ab0:	4629      	mov	r1, r5
 8011ab2:	f003 facd 	bl	8015050 <rmw_subscription_content_filter_options_fini>
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	b9b8      	cbnz	r0, 8011aea <rcl_subscription_init+0x146>
 8011aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011abc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011abe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011ac0:	4798      	blx	r3
 8011ac2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8011ac4:	6827      	ldr	r7, [r4, #0]
 8011ac6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011ac8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011aca:	4638      	mov	r0, r7
 8011acc:	4798      	blx	r3
 8011ace:	2300      	movs	r3, #0
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	2701      	movs	r7, #1
 8011ad4:	e7c8      	b.n	8011a68 <rcl_subscription_init+0xc4>
 8011ad6:	2867      	cmp	r0, #103	@ 0x67
 8011ad8:	d0c6      	beq.n	8011a68 <rcl_subscription_init+0xc4>
 8011ada:	2869      	cmp	r0, #105	@ 0x69
 8011adc:	d003      	beq.n	8011ae6 <rcl_subscription_init+0x142>
 8011ade:	280a      	cmp	r0, #10
 8011ae0:	d1f7      	bne.n	8011ad2 <rcl_subscription_init+0x12e>
 8011ae2:	270a      	movs	r7, #10
 8011ae4:	e7c0      	b.n	8011a68 <rcl_subscription_init+0xc4>
 8011ae6:	2767      	movs	r7, #103	@ 0x67
 8011ae8:	e7be      	b.n	8011a68 <rcl_subscription_init+0xc4>
 8011aea:	f7fe fe77 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011aee:	6827      	ldr	r7, [r4, #0]
 8011af0:	e7e9      	b.n	8011ac6 <rcl_subscription_init+0x122>
 8011af2:	bf00      	nop

08011af4 <rcl_subscription_get_default_options>:
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	4c16      	ldr	r4, [pc, #88]	@ (8011b50 <rcl_subscription_get_default_options+0x5c>)
 8011af8:	4916      	ldr	r1, [pc, #88]	@ (8011b54 <rcl_subscription_get_default_options+0x60>)
 8011afa:	b08a      	sub	sp, #40	@ 0x28
 8011afc:	4605      	mov	r5, r0
 8011afe:	2250      	movs	r2, #80	@ 0x50
 8011b00:	4620      	mov	r0, r4
 8011b02:	f00b fdb2 	bl	801d66a <memcpy>
 8011b06:	a804      	add	r0, sp, #16
 8011b08:	f001 f8aa 	bl	8012c60 <rcutils_get_default_allocator>
 8011b0c:	f10d 0c10 	add.w	ip, sp, #16
 8011b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b14:	f104 0e50 	add.w	lr, r4, #80	@ 0x50
 8011b18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011b1c:	466e      	mov	r6, sp
 8011b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8011b22:	f8ce 3000 	str.w	r3, [lr]
 8011b26:	4630      	mov	r0, r6
 8011b28:	f003 faac 	bl	8015084 <rmw_get_default_subscription_options>
 8011b2c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011b30:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 8011b34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011b38:	2301      	movs	r3, #1
 8011b3a:	2278      	movs	r2, #120	@ 0x78
 8011b3c:	4621      	mov	r1, r4
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
 8011b44:	f00b fd91 	bl	801d66a <memcpy>
 8011b48:	4628      	mov	r0, r5
 8011b4a:	b00a      	add	sp, #40	@ 0x28
 8011b4c:	bd70      	pop	{r4, r5, r6, pc}
 8011b4e:	bf00      	nop
 8011b50:	200136f0 	.word	0x200136f0
 8011b54:	08023870 	.word	0x08023870

08011b58 <rcl_take>:
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d04b      	beq.n	8011bf4 <rcl_take+0x9c>
 8011b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b60:	4615      	mov	r5, r2
 8011b62:	6802      	ldr	r2, [r0, #0]
 8011b64:	b0a0      	sub	sp, #128	@ 0x80
 8011b66:	4604      	mov	r4, r0
 8011b68:	2a00      	cmp	r2, #0
 8011b6a:	d03b      	beq.n	8011be4 <rcl_take+0x8c>
 8011b6c:	461f      	mov	r7, r3
 8011b6e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d036      	beq.n	8011be4 <rcl_take+0x8c>
 8011b76:	460e      	mov	r6, r1
 8011b78:	2900      	cmp	r1, #0
 8011b7a:	d039      	beq.n	8011bf0 <rcl_take+0x98>
 8011b7c:	2d00      	cmp	r5, #0
 8011b7e:	d03d      	beq.n	8011bfc <rcl_take+0xa4>
 8011b80:	a802      	add	r0, sp, #8
 8011b82:	f003 fb09 	bl	8015198 <rmw_get_zero_initialized_message_info>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	f10d 0c08 	add.w	ip, sp, #8
 8011b8c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8011b90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b94:	46ae      	mov	lr, r5
 8011b96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011b9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ba2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ba6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011baa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011bae:	462b      	mov	r3, r5
 8011bb0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011bb4:	f04f 0800 	mov.w	r8, #0
 8011bb8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8011bc4:	9700      	str	r7, [sp, #0]
 8011bc6:	f002 fc9d 	bl	8014504 <rmw_take_with_info>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	b9c0      	cbnz	r0, 8011c00 <rcl_take+0xa8>
 8011bce:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8011bd2:	f240 1291 	movw	r2, #401	@ 0x191
 8011bd6:	2900      	cmp	r1, #0
 8011bd8:	bf08      	it	eq
 8011bda:	4613      	moveq	r3, r2
 8011bdc:	4618      	mov	r0, r3
 8011bde:	b020      	add	sp, #128	@ 0x80
 8011be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011be8:	4618      	mov	r0, r3
 8011bea:	b020      	add	sp, #128	@ 0x80
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf0:	230b      	movs	r3, #11
 8011bf2:	e7f3      	b.n	8011bdc <rcl_take+0x84>
 8011bf4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	4770      	bx	lr
 8011bfc:	ad12      	add	r5, sp, #72	@ 0x48
 8011bfe:	e7bf      	b.n	8011b80 <rcl_take+0x28>
 8011c00:	f7fe fdec 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011c04:	4603      	mov	r3, r0
 8011c06:	e7e9      	b.n	8011bdc <rcl_take+0x84>

08011c08 <rcl_subscription_get_rmw_handle>:
 8011c08:	b118      	cbz	r0, 8011c12 <rcl_subscription_get_rmw_handle+0xa>
 8011c0a:	6800      	ldr	r0, [r0, #0]
 8011c0c:	b108      	cbz	r0, 8011c12 <rcl_subscription_get_rmw_handle+0xa>
 8011c0e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011c12:	4770      	bx	lr

08011c14 <rcl_subscription_is_valid>:
 8011c14:	b130      	cbz	r0, 8011c24 <rcl_subscription_is_valid+0x10>
 8011c16:	6800      	ldr	r0, [r0, #0]
 8011c18:	b120      	cbz	r0, 8011c24 <rcl_subscription_is_valid+0x10>
 8011c1a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011c1e:	3800      	subs	r0, #0
 8011c20:	bf18      	it	ne
 8011c22:	2001      	movne	r0, #1
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop

08011c28 <rcl_get_system_time>:
 8011c28:	4608      	mov	r0, r1
 8011c2a:	f001 bb9b 	b.w	8013364 <rcutils_system_time_now>
 8011c2e:	bf00      	nop

08011c30 <rcl_get_steady_time>:
 8011c30:	4608      	mov	r0, r1
 8011c32:	f001 bbc1 	b.w	80133b8 <rcutils_steady_time_now>
 8011c36:	bf00      	nop

08011c38 <rcl_get_ros_time>:
 8011c38:	7a03      	ldrb	r3, [r0, #8]
 8011c3a:	b510      	push	{r4, lr}
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	b133      	cbz	r3, 8011c4e <rcl_get_ros_time+0x16>
 8011c40:	2105      	movs	r1, #5
 8011c42:	f001 f829 	bl	8012c98 <__atomic_load_8>
 8011c46:	e9c4 0100 	strd	r0, r1, [r4]
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	bd10      	pop	{r4, pc}
 8011c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c52:	4608      	mov	r0, r1
 8011c54:	f001 bb86 	b.w	8013364 <rcutils_system_time_now>

08011c58 <rcl_clock_valid>:
 8011c58:	b138      	cbz	r0, 8011c6a <rcl_clock_valid+0x12>
 8011c5a:	7803      	ldrb	r3, [r0, #0]
 8011c5c:	b123      	cbz	r3, 8011c68 <rcl_clock_valid+0x10>
 8011c5e:	68c0      	ldr	r0, [r0, #12]
 8011c60:	3800      	subs	r0, #0
 8011c62:	bf18      	it	ne
 8011c64:	2001      	movne	r0, #1
 8011c66:	4770      	bx	lr
 8011c68:	4618      	mov	r0, r3
 8011c6a:	4770      	bx	lr

08011c6c <rcl_clock_init>:
 8011c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6e:	4605      	mov	r5, r0
 8011c70:	4610      	mov	r0, r2
 8011c72:	4614      	mov	r4, r2
 8011c74:	460e      	mov	r6, r1
 8011c76:	f001 f801 	bl	8012c7c <rcutils_allocator_is_valid>
 8011c7a:	b128      	cbz	r0, 8011c88 <rcl_clock_init+0x1c>
 8011c7c:	2d03      	cmp	r5, #3
 8011c7e:	d803      	bhi.n	8011c88 <rcl_clock_init+0x1c>
 8011c80:	e8df f005 	tbb	[pc, r5]
 8011c84:	06532e1d 	.word	0x06532e1d
 8011c88:	f04f 0c0b 	mov.w	ip, #11
 8011c8c:	4660      	mov	r0, ip
 8011c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c90:	2e00      	cmp	r6, #0
 8011c92:	d0f9      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011c94:	2c00      	cmp	r4, #0
 8011c96:	d0f7      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011c98:	2300      	movs	r3, #0
 8011c9a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011c9e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011d54 <rcl_clock_init+0xe8>
 8011ca2:	6133      	str	r3, [r6, #16]
 8011ca4:	f106 0514 	add.w	r5, r6, #20
 8011ca8:	469c      	mov	ip, r3
 8011caa:	2703      	movs	r7, #3
 8011cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	7037      	strb	r7, [r6, #0]
 8011cb6:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011cba:	4660      	mov	r0, ip
 8011cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cbe:	2e00      	cmp	r6, #0
 8011cc0:	d0e2      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	7033      	strb	r3, [r6, #0]
 8011cc6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011cca:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011cce:	469c      	mov	ip, r3
 8011cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cd2:	f106 0514 	add.w	r5, r6, #20
 8011cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	602b      	str	r3, [r5, #0]
 8011cdc:	4660      	mov	r0, ip
 8011cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce0:	2e00      	cmp	r6, #0
 8011ce2:	d0d1      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011ce4:	2c00      	cmp	r4, #0
 8011ce6:	d0cf      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011ce8:	2700      	movs	r7, #0
 8011cea:	7037      	strb	r7, [r6, #0]
 8011cec:	46a4      	mov	ip, r4
 8011cee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cf2:	f106 0514 	add.w	r5, r6, #20
 8011cf6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011cfa:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011d00:	f8dc 3000 	ldr.w	r3, [ip]
 8011d04:	602b      	str	r3, [r5, #0]
 8011d06:	6921      	ldr	r1, [r4, #16]
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	2010      	movs	r0, #16
 8011d0c:	4798      	blx	r3
 8011d0e:	6130      	str	r0, [r6, #16]
 8011d10:	b1d0      	cbz	r0, 8011d48 <rcl_clock_init+0xdc>
 8011d12:	2200      	movs	r2, #0
 8011d14:	2300      	movs	r3, #0
 8011d16:	e9c0 2300 	strd	r2, r3, [r0]
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	7207      	strb	r7, [r0, #8]
 8011d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8011d50 <rcl_clock_init+0xe4>)
 8011d20:	7033      	strb	r3, [r6, #0]
 8011d22:	46bc      	mov	ip, r7
 8011d24:	60f2      	str	r2, [r6, #12]
 8011d26:	4660      	mov	r0, ip
 8011d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	d0ac      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011d2e:	2c00      	cmp	r4, #0
 8011d30:	d0aa      	beq.n	8011c88 <rcl_clock_init+0x1c>
 8011d32:	2300      	movs	r3, #0
 8011d34:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011d38:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011d58 <rcl_clock_init+0xec>
 8011d3c:	6133      	str	r3, [r6, #16]
 8011d3e:	f106 0514 	add.w	r5, r6, #20
 8011d42:	469c      	mov	ip, r3
 8011d44:	2702      	movs	r7, #2
 8011d46:	e7b1      	b.n	8011cac <rcl_clock_init+0x40>
 8011d48:	f04f 0c0a 	mov.w	ip, #10
 8011d4c:	e79e      	b.n	8011c8c <rcl_clock_init+0x20>
 8011d4e:	bf00      	nop
 8011d50:	08011c39 	.word	0x08011c39
 8011d54:	08011c31 	.word	0x08011c31
 8011d58:	08011c29 	.word	0x08011c29

08011d5c <rcl_clock_get_now>:
 8011d5c:	b140      	cbz	r0, 8011d70 <rcl_clock_get_now+0x14>
 8011d5e:	b139      	cbz	r1, 8011d70 <rcl_clock_get_now+0x14>
 8011d60:	7803      	ldrb	r3, [r0, #0]
 8011d62:	b11b      	cbz	r3, 8011d6c <rcl_clock_get_now+0x10>
 8011d64:	68c3      	ldr	r3, [r0, #12]
 8011d66:	b10b      	cbz	r3, 8011d6c <rcl_clock_get_now+0x10>
 8011d68:	6900      	ldr	r0, [r0, #16]
 8011d6a:	4718      	bx	r3
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	4770      	bx	lr
 8011d70:	200b      	movs	r0, #11
 8011d72:	4770      	bx	lr

08011d74 <rcl_timer_call>:
 8011d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d78:	b087      	sub	sp, #28
 8011d7a:	2800      	cmp	r0, #0
 8011d7c:	d06d      	beq.n	8011e5a <rcl_timer_call+0xe6>
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	4604      	mov	r4, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d063      	beq.n	8011e4e <rcl_timer_call+0xda>
 8011d86:	f3bf 8f5b 	dmb	ish
 8011d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011d8e:	f3bf 8f5b 	dmb	ish
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d150      	bne.n	8011e38 <rcl_timer_call+0xc4>
 8011d96:	6803      	ldr	r3, [r0, #0]
 8011d98:	a904      	add	r1, sp, #16
 8011d9a:	6818      	ldr	r0, [r3, #0]
 8011d9c:	f7ff ffde 	bl	8011d5c <rcl_clock_get_now>
 8011da0:	4605      	mov	r5, r0
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d14a      	bne.n	8011e3c <rcl_timer_call+0xc8>
 8011da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	db4a      	blt.n	8011e44 <rcl_timer_call+0xd0>
 8011dae:	6820      	ldr	r0, [r4, #0]
 8011db0:	f04f 0a05 	mov.w	sl, #5
 8011db4:	f8cd a000 	str.w	sl, [sp]
 8011db8:	3020      	adds	r0, #32
 8011dba:	f000 ffd9 	bl	8012d70 <__atomic_exchange_8>
 8011dbe:	6823      	ldr	r3, [r4, #0]
 8011dc0:	f3bf 8f5b 	dmb	ish
 8011dc4:	4680      	mov	r8, r0
 8011dc6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8011dca:	f3bf 8f5b 	dmb	ish
 8011dce:	6820      	ldr	r0, [r4, #0]
 8011dd0:	4689      	mov	r9, r1
 8011dd2:	3028      	adds	r0, #40	@ 0x28
 8011dd4:	4651      	mov	r1, sl
 8011dd6:	f000 ff5f 	bl	8012c98 <__atomic_load_8>
 8011dda:	4606      	mov	r6, r0
 8011ddc:	6820      	ldr	r0, [r4, #0]
 8011dde:	460f      	mov	r7, r1
 8011de0:	3018      	adds	r0, #24
 8011de2:	4651      	mov	r1, sl
 8011de4:	f000 ff58 	bl	8012c98 <__atomic_load_8>
 8011de8:	1836      	adds	r6, r6, r0
 8011dea:	4602      	mov	r2, r0
 8011dec:	4682      	mov	sl, r0
 8011dee:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8011df2:	eb47 0701 	adc.w	r7, r7, r1
 8011df6:	4286      	cmp	r6, r0
 8011df8:	460b      	mov	r3, r1
 8011dfa:	eb77 010c 	sbcs.w	r1, r7, ip
 8011dfe:	da04      	bge.n	8011e0a <rcl_timer_call+0x96>
 8011e00:	ea53 0102 	orrs.w	r1, r3, r2
 8011e04:	d12e      	bne.n	8011e64 <rcl_timer_call+0xf0>
 8011e06:	4606      	mov	r6, r0
 8011e08:	4667      	mov	r7, ip
 8011e0a:	6820      	ldr	r0, [r4, #0]
 8011e0c:	2105      	movs	r1, #5
 8011e0e:	4632      	mov	r2, r6
 8011e10:	463b      	mov	r3, r7
 8011e12:	3028      	adds	r0, #40	@ 0x28
 8011e14:	9100      	str	r1, [sp, #0]
 8011e16:	f000 ff75 	bl	8012d04 <__atomic_store_8>
 8011e1a:	f1bb 0f00 	cmp.w	fp, #0
 8011e1e:	d00d      	beq.n	8011e3c <rcl_timer_call+0xc8>
 8011e20:	9a04      	ldr	r2, [sp, #16]
 8011e22:	9b05      	ldr	r3, [sp, #20]
 8011e24:	ebb2 0208 	subs.w	r2, r2, r8
 8011e28:	4620      	mov	r0, r4
 8011e2a:	eb63 0309 	sbc.w	r3, r3, r9
 8011e2e:	47d8      	blx	fp
 8011e30:	4628      	mov	r0, r5
 8011e32:	b007      	add	sp, #28
 8011e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e38:	f240 3521 	movw	r5, #801	@ 0x321
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	b007      	add	sp, #28
 8011e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e44:	2501      	movs	r5, #1
 8011e46:	4628      	mov	r0, r5
 8011e48:	b007      	add	sp, #28
 8011e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e4e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011e52:	4628      	mov	r0, r5
 8011e54:	b007      	add	sp, #28
 8011e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5a:	250b      	movs	r5, #11
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	b007      	add	sp, #28
 8011e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e64:	1b80      	subs	r0, r0, r6
 8011e66:	eb6c 0107 	sbc.w	r1, ip, r7
 8011e6a:	3801      	subs	r0, #1
 8011e6c:	f161 0100 	sbc.w	r1, r1, #0
 8011e70:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011e74:	f7ee fef8 	bl	8000c68 <__aeabi_ldivmod>
 8011e78:	9b02      	ldr	r3, [sp, #8]
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	f141 0100 	adc.w	r1, r1, #0
 8011e80:	fb00 f303 	mul.w	r3, r0, r3
 8011e84:	fb01 330a 	mla	r3, r1, sl, r3
 8011e88:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011e8c:	1986      	adds	r6, r0, r6
 8011e8e:	4453      	add	r3, sl
 8011e90:	eb43 0707 	adc.w	r7, r3, r7
 8011e94:	e7b9      	b.n	8011e0a <rcl_timer_call+0x96>
 8011e96:	bf00      	nop

08011e98 <rcl_timer_is_ready>:
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	b378      	cbz	r0, 8011efe <rcl_timer_is_ready+0x66>
 8011e9e:	6803      	ldr	r3, [r0, #0]
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	b383      	cbz	r3, 8011f06 <rcl_timer_is_ready+0x6e>
 8011ea4:	460d      	mov	r5, r1
 8011ea6:	b351      	cbz	r1, 8011efe <rcl_timer_is_ready+0x66>
 8011ea8:	f3bf 8f5b 	dmb	ish
 8011eac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011eb0:	f3bf 8f5b 	dmb	ish
 8011eb4:	b953      	cbnz	r3, 8011ecc <rcl_timer_is_ready+0x34>
 8011eb6:	6803      	ldr	r3, [r0, #0]
 8011eb8:	4669      	mov	r1, sp
 8011eba:	6818      	ldr	r0, [r3, #0]
 8011ebc:	f7ff ff4e 	bl	8011d5c <rcl_clock_get_now>
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	b140      	cbz	r0, 8011ed6 <rcl_timer_is_ready+0x3e>
 8011ec4:	f240 3321 	movw	r3, #801	@ 0x321
 8011ec8:	4298      	cmp	r0, r3
 8011eca:	d101      	bne.n	8011ed0 <rcl_timer_is_ready+0x38>
 8011ecc:	2600      	movs	r6, #0
 8011ece:	702e      	strb	r6, [r5, #0]
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	b002      	add	sp, #8
 8011ed4:	bd70      	pop	{r4, r5, r6, pc}
 8011ed6:	6820      	ldr	r0, [r4, #0]
 8011ed8:	2105      	movs	r1, #5
 8011eda:	3028      	adds	r0, #40	@ 0x28
 8011edc:	f000 fedc 	bl	8012c98 <__atomic_load_8>
 8011ee0:	9b00      	ldr	r3, [sp, #0]
 8011ee2:	1ac0      	subs	r0, r0, r3
 8011ee4:	9b01      	ldr	r3, [sp, #4]
 8011ee6:	eb61 0103 	sbc.w	r1, r1, r3
 8011eea:	2801      	cmp	r0, #1
 8011eec:	f171 0300 	sbcs.w	r3, r1, #0
 8011ef0:	bfb4      	ite	lt
 8011ef2:	2301      	movlt	r3, #1
 8011ef4:	2300      	movge	r3, #0
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	702b      	strb	r3, [r5, #0]
 8011efa:	b002      	add	sp, #8
 8011efc:	bd70      	pop	{r4, r5, r6, pc}
 8011efe:	260b      	movs	r6, #11
 8011f00:	4630      	mov	r0, r6
 8011f02:	b002      	add	sp, #8
 8011f04:	bd70      	pop	{r4, r5, r6, pc}
 8011f06:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011f0a:	e7e1      	b.n	8011ed0 <rcl_timer_is_ready+0x38>

08011f0c <rcl_timer_get_time_until_next_call>:
 8011f0c:	b570      	push	{r4, r5, r6, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	b330      	cbz	r0, 8011f60 <rcl_timer_get_time_until_next_call+0x54>
 8011f12:	6803      	ldr	r3, [r0, #0]
 8011f14:	4604      	mov	r4, r0
 8011f16:	b33b      	cbz	r3, 8011f68 <rcl_timer_get_time_until_next_call+0x5c>
 8011f18:	460d      	mov	r5, r1
 8011f1a:	b309      	cbz	r1, 8011f60 <rcl_timer_get_time_until_next_call+0x54>
 8011f1c:	f3bf 8f5b 	dmb	ish
 8011f20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011f24:	f3bf 8f5b 	dmb	ish
 8011f28:	b9ab      	cbnz	r3, 8011f56 <rcl_timer_get_time_until_next_call+0x4a>
 8011f2a:	6803      	ldr	r3, [r0, #0]
 8011f2c:	4669      	mov	r1, sp
 8011f2e:	6818      	ldr	r0, [r3, #0]
 8011f30:	f7ff ff14 	bl	8011d5c <rcl_clock_get_now>
 8011f34:	4606      	mov	r6, r0
 8011f36:	b958      	cbnz	r0, 8011f50 <rcl_timer_get_time_until_next_call+0x44>
 8011f38:	6820      	ldr	r0, [r4, #0]
 8011f3a:	2105      	movs	r1, #5
 8011f3c:	3028      	adds	r0, #40	@ 0x28
 8011f3e:	f000 feab 	bl	8012c98 <__atomic_load_8>
 8011f42:	9b00      	ldr	r3, [sp, #0]
 8011f44:	1ac0      	subs	r0, r0, r3
 8011f46:	9b01      	ldr	r3, [sp, #4]
 8011f48:	6028      	str	r0, [r5, #0]
 8011f4a:	eb61 0103 	sbc.w	r1, r1, r3
 8011f4e:	6069      	str	r1, [r5, #4]
 8011f50:	4630      	mov	r0, r6
 8011f52:	b002      	add	sp, #8
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	f240 3621 	movw	r6, #801	@ 0x321
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	b002      	add	sp, #8
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	260b      	movs	r6, #11
 8011f62:	4630      	mov	r0, r6
 8011f64:	b002      	add	sp, #8
 8011f66:	bd70      	pop	{r4, r5, r6, pc}
 8011f68:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011f6c:	e7f0      	b.n	8011f50 <rcl_timer_get_time_until_next_call+0x44>
 8011f6e:	bf00      	nop

08011f70 <rcl_timer_get_guard_condition>:
 8011f70:	b130      	cbz	r0, 8011f80 <rcl_timer_get_guard_condition+0x10>
 8011f72:	6800      	ldr	r0, [r0, #0]
 8011f74:	b120      	cbz	r0, 8011f80 <rcl_timer_get_guard_condition+0x10>
 8011f76:	68c3      	ldr	r3, [r0, #12]
 8011f78:	b10b      	cbz	r3, 8011f7e <rcl_timer_get_guard_condition+0xe>
 8011f7a:	3008      	adds	r0, #8
 8011f7c:	4770      	bx	lr
 8011f7e:	4618      	mov	r0, r3
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop

08011f84 <rcl_validate_enclave_name_with_size>:
 8011f84:	b378      	cbz	r0, 8011fe6 <rcl_validate_enclave_name_with_size+0x62>
 8011f86:	b570      	push	{r4, r5, r6, lr}
 8011f88:	4615      	mov	r5, r2
 8011f8a:	b0c2      	sub	sp, #264	@ 0x108
 8011f8c:	b302      	cbz	r2, 8011fd0 <rcl_validate_enclave_name_with_size+0x4c>
 8011f8e:	461e      	mov	r6, r3
 8011f90:	466a      	mov	r2, sp
 8011f92:	ab01      	add	r3, sp, #4
 8011f94:	460c      	mov	r4, r1
 8011f96:	f003 f97d 	bl	8015294 <rmw_validate_namespace_with_size>
 8011f9a:	4684      	mov	ip, r0
 8011f9c:	b9e8      	cbnz	r0, 8011fda <rcl_validate_enclave_name_with_size+0x56>
 8011f9e:	9b00      	ldr	r3, [sp, #0]
 8011fa0:	b923      	cbnz	r3, 8011fac <rcl_validate_enclave_name_with_size+0x28>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	602b      	str	r3, [r5, #0]
 8011fa6:	4660      	mov	r0, ip
 8011fa8:	b042      	add	sp, #264	@ 0x108
 8011faa:	bd70      	pop	{r4, r5, r6, pc}
 8011fac:	2b07      	cmp	r3, #7
 8011fae:	d007      	beq.n	8011fc0 <rcl_validate_enclave_name_with_size+0x3c>
 8011fb0:	1e5a      	subs	r2, r3, #1
 8011fb2:	2a05      	cmp	r2, #5
 8011fb4:	d833      	bhi.n	801201e <rcl_validate_enclave_name_with_size+0x9a>
 8011fb6:	e8df f002 	tbb	[pc, r2]
 8011fba:	2c2f      	.short	0x2c2f
 8011fbc:	1a232629 	.word	0x1a232629
 8011fc0:	2cff      	cmp	r4, #255	@ 0xff
 8011fc2:	d9ee      	bls.n	8011fa2 <rcl_validate_enclave_name_with_size+0x1e>
 8011fc4:	602b      	str	r3, [r5, #0]
 8011fc6:	2e00      	cmp	r6, #0
 8011fc8:	d0ed      	beq.n	8011fa6 <rcl_validate_enclave_name_with_size+0x22>
 8011fca:	23fe      	movs	r3, #254	@ 0xfe
 8011fcc:	6033      	str	r3, [r6, #0]
 8011fce:	e7ea      	b.n	8011fa6 <rcl_validate_enclave_name_with_size+0x22>
 8011fd0:	f04f 0c0b 	mov.w	ip, #11
 8011fd4:	4660      	mov	r0, ip
 8011fd6:	b042      	add	sp, #264	@ 0x108
 8011fd8:	bd70      	pop	{r4, r5, r6, pc}
 8011fda:	f7fe fbff 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011fde:	4684      	mov	ip, r0
 8011fe0:	4660      	mov	r0, ip
 8011fe2:	b042      	add	sp, #264	@ 0x108
 8011fe4:	bd70      	pop	{r4, r5, r6, pc}
 8011fe6:	f04f 0c0b 	mov.w	ip, #11
 8011fea:	4660      	mov	r0, ip
 8011fec:	4770      	bx	lr
 8011fee:	2306      	movs	r3, #6
 8011ff0:	602b      	str	r3, [r5, #0]
 8011ff2:	2e00      	cmp	r6, #0
 8011ff4:	d0d7      	beq.n	8011fa6 <rcl_validate_enclave_name_with_size+0x22>
 8011ff6:	9b01      	ldr	r3, [sp, #4]
 8011ff8:	6033      	str	r3, [r6, #0]
 8011ffa:	4660      	mov	r0, ip
 8011ffc:	b042      	add	sp, #264	@ 0x108
 8011ffe:	bd70      	pop	{r4, r5, r6, pc}
 8012000:	2305      	movs	r3, #5
 8012002:	602b      	str	r3, [r5, #0]
 8012004:	e7f5      	b.n	8011ff2 <rcl_validate_enclave_name_with_size+0x6e>
 8012006:	2304      	movs	r3, #4
 8012008:	602b      	str	r3, [r5, #0]
 801200a:	e7f2      	b.n	8011ff2 <rcl_validate_enclave_name_with_size+0x6e>
 801200c:	2303      	movs	r3, #3
 801200e:	602b      	str	r3, [r5, #0]
 8012010:	e7ef      	b.n	8011ff2 <rcl_validate_enclave_name_with_size+0x6e>
 8012012:	2302      	movs	r3, #2
 8012014:	602b      	str	r3, [r5, #0]
 8012016:	e7ec      	b.n	8011ff2 <rcl_validate_enclave_name_with_size+0x6e>
 8012018:	2301      	movs	r3, #1
 801201a:	602b      	str	r3, [r5, #0]
 801201c:	e7e9      	b.n	8011ff2 <rcl_validate_enclave_name_with_size+0x6e>
 801201e:	4a04      	ldr	r2, [pc, #16]	@ (8012030 <rcl_validate_enclave_name_with_size+0xac>)
 8012020:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012024:	a802      	add	r0, sp, #8
 8012026:	f001 f825 	bl	8013074 <rcutils_snprintf>
 801202a:	f04f 0c01 	mov.w	ip, #1
 801202e:	e7ba      	b.n	8011fa6 <rcl_validate_enclave_name_with_size+0x22>
 8012030:	080238c0 	.word	0x080238c0

08012034 <rcl_validate_enclave_name>:
 8012034:	b168      	cbz	r0, 8012052 <rcl_validate_enclave_name+0x1e>
 8012036:	b570      	push	{r4, r5, r6, lr}
 8012038:	460d      	mov	r5, r1
 801203a:	4616      	mov	r6, r2
 801203c:	4604      	mov	r4, r0
 801203e:	f7ee f927 	bl	8000290 <strlen>
 8012042:	4633      	mov	r3, r6
 8012044:	4601      	mov	r1, r0
 8012046:	462a      	mov	r2, r5
 8012048:	4620      	mov	r0, r4
 801204a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801204e:	f7ff bf99 	b.w	8011f84 <rcl_validate_enclave_name_with_size>
 8012052:	200b      	movs	r0, #11
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <rcl_get_zero_initialized_wait_set>:
 8012058:	b510      	push	{r4, lr}
 801205a:	4c08      	ldr	r4, [pc, #32]	@ (801207c <rcl_get_zero_initialized_wait_set+0x24>)
 801205c:	4686      	mov	lr, r0
 801205e:	4684      	mov	ip, r0
 8012060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012062:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012068:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801206e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	f8cc 3000 	str.w	r3, [ip]
 8012078:	4670      	mov	r0, lr
 801207a:	bd10      	pop	{r4, pc}
 801207c:	08023920 	.word	0x08023920

08012080 <rcl_wait_set_is_valid>:
 8012080:	b118      	cbz	r0, 801208a <rcl_wait_set_is_valid+0xa>
 8012082:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012084:	3800      	subs	r0, #0
 8012086:	bf18      	it	ne
 8012088:	2001      	movne	r0, #1
 801208a:	4770      	bx	lr

0801208c <rcl_wait_set_fini>:
 801208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012090:	b082      	sub	sp, #8
 8012092:	2800      	cmp	r0, #0
 8012094:	f000 8095 	beq.w	80121c2 <rcl_wait_set_fini+0x136>
 8012098:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801209a:	4604      	mov	r4, r0
 801209c:	2e00      	cmp	r6, #0
 801209e:	f000 808c 	beq.w	80121ba <rcl_wait_set_fini+0x12e>
 80120a2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80120a4:	f002 fc1c 	bl	80148e0 <rmw_destroy_wait_set>
 80120a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80120aa:	1e06      	subs	r6, r0, #0
 80120ac:	bf18      	it	ne
 80120ae:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80120b2:	2d00      	cmp	r5, #0
 80120b4:	f000 8081 	beq.w	80121ba <rcl_wait_set_fini+0x12e>
 80120b8:	6820      	ldr	r0, [r4, #0]
 80120ba:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80120be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80120c0:	2700      	movs	r7, #0
 80120c2:	6067      	str	r7, [r4, #4]
 80120c4:	602f      	str	r7, [r5, #0]
 80120c6:	b120      	cbz	r0, 80120d2 <rcl_wait_set_fini+0x46>
 80120c8:	9101      	str	r1, [sp, #4]
 80120ca:	47c0      	blx	r8
 80120cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80120ce:	9901      	ldr	r1, [sp, #4]
 80120d0:	6027      	str	r7, [r4, #0]
 80120d2:	68a8      	ldr	r0, [r5, #8]
 80120d4:	b120      	cbz	r0, 80120e0 <rcl_wait_set_fini+0x54>
 80120d6:	47c0      	blx	r8
 80120d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80120da:	2300      	movs	r3, #0
 80120dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80120e0:	68a0      	ldr	r0, [r4, #8]
 80120e2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80120e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80120e6:	f04f 0800 	mov.w	r8, #0
 80120ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80120ee:	f8c5 800c 	str.w	r8, [r5, #12]
 80120f2:	b128      	cbz	r0, 8012100 <rcl_wait_set_fini+0x74>
 80120f4:	47b8      	blx	r7
 80120f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80120f8:	f8c4 8008 	str.w	r8, [r4, #8]
 80120fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80120fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012100:	6968      	ldr	r0, [r5, #20]
 8012102:	f04f 0800 	mov.w	r8, #0
 8012106:	f8c5 8010 	str.w	r8, [r5, #16]
 801210a:	b128      	cbz	r0, 8012118 <rcl_wait_set_fini+0x8c>
 801210c:	47b8      	blx	r7
 801210e:	f8c5 8014 	str.w	r8, [r5, #20]
 8012112:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012114:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012116:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012118:	6920      	ldr	r0, [r4, #16]
 801211a:	f04f 0800 	mov.w	r8, #0
 801211e:	f8c4 8014 	str.w	r8, [r4, #20]
 8012122:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012126:	b128      	cbz	r0, 8012134 <rcl_wait_set_fini+0xa8>
 8012128:	47b8      	blx	r7
 801212a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801212c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012130:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012132:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012134:	69a0      	ldr	r0, [r4, #24]
 8012136:	f04f 0800 	mov.w	r8, #0
 801213a:	f8c4 801c 	str.w	r8, [r4, #28]
 801213e:	f8c5 8018 	str.w	r8, [r5, #24]
 8012142:	b128      	cbz	r0, 8012150 <rcl_wait_set_fini+0xc4>
 8012144:	9101      	str	r1, [sp, #4]
 8012146:	47b8      	blx	r7
 8012148:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801214a:	9901      	ldr	r1, [sp, #4]
 801214c:	f8c4 8018 	str.w	r8, [r4, #24]
 8012150:	6a28      	ldr	r0, [r5, #32]
 8012152:	b120      	cbz	r0, 801215e <rcl_wait_set_fini+0xd2>
 8012154:	47b8      	blx	r7
 8012156:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012158:	2300      	movs	r3, #0
 801215a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801215e:	6a20      	ldr	r0, [r4, #32]
 8012160:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012164:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012166:	2700      	movs	r7, #0
 8012168:	6267      	str	r7, [r4, #36]	@ 0x24
 801216a:	626f      	str	r7, [r5, #36]	@ 0x24
 801216c:	b120      	cbz	r0, 8012178 <rcl_wait_set_fini+0xec>
 801216e:	9101      	str	r1, [sp, #4]
 8012170:	47c0      	blx	r8
 8012172:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012174:	9901      	ldr	r1, [sp, #4]
 8012176:	6227      	str	r7, [r4, #32]
 8012178:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801217a:	b120      	cbz	r0, 8012186 <rcl_wait_set_fini+0xfa>
 801217c:	47c0      	blx	r8
 801217e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012180:	2300      	movs	r3, #0
 8012182:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012186:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012188:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801218c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801218e:	2700      	movs	r7, #0
 8012190:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8012192:	632f      	str	r7, [r5, #48]	@ 0x30
 8012194:	b120      	cbz	r0, 80121a0 <rcl_wait_set_fini+0x114>
 8012196:	9101      	str	r1, [sp, #4]
 8012198:	47c0      	blx	r8
 801219a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801219c:	9901      	ldr	r1, [sp, #4]
 801219e:	62a7      	str	r7, [r4, #40]	@ 0x28
 80121a0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80121a2:	b120      	cbz	r0, 80121ae <rcl_wait_set_fini+0x122>
 80121a4:	47c0      	blx	r8
 80121a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80121a8:	2300      	movs	r3, #0
 80121aa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80121ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80121b0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80121b2:	4628      	mov	r0, r5
 80121b4:	4798      	blx	r3
 80121b6:	2300      	movs	r3, #0
 80121b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80121ba:	4630      	mov	r0, r6
 80121bc:	b002      	add	sp, #8
 80121be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c2:	260b      	movs	r6, #11
 80121c4:	4630      	mov	r0, r6
 80121c6:	b002      	add	sp, #8
 80121c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121cc <rcl_wait_set_add_subscription>:
 80121cc:	b318      	cbz	r0, 8012216 <rcl_wait_set_add_subscription+0x4a>
 80121ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80121d0:	b570      	push	{r4, r5, r6, lr}
 80121d2:	4604      	mov	r4, r0
 80121d4:	b30b      	cbz	r3, 801221a <rcl_wait_set_add_subscription+0x4e>
 80121d6:	b319      	cbz	r1, 8012220 <rcl_wait_set_add_subscription+0x54>
 80121d8:	681d      	ldr	r5, [r3, #0]
 80121da:	6840      	ldr	r0, [r0, #4]
 80121dc:	4285      	cmp	r5, r0
 80121de:	d217      	bcs.n	8012210 <rcl_wait_set_add_subscription+0x44>
 80121e0:	6820      	ldr	r0, [r4, #0]
 80121e2:	1c6e      	adds	r6, r5, #1
 80121e4:	601e      	str	r6, [r3, #0]
 80121e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80121ea:	b102      	cbz	r2, 80121ee <rcl_wait_set_add_subscription+0x22>
 80121ec:	6015      	str	r5, [r2, #0]
 80121ee:	4608      	mov	r0, r1
 80121f0:	f7ff fd0a 	bl	8011c08 <rcl_subscription_get_rmw_handle>
 80121f4:	b150      	cbz	r0, 801220c <rcl_wait_set_add_subscription+0x40>
 80121f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121f8:	6842      	ldr	r2, [r0, #4]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012200:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012202:	6853      	ldr	r3, [r2, #4]
 8012204:	3301      	adds	r3, #1
 8012206:	2000      	movs	r0, #0
 8012208:	6053      	str	r3, [r2, #4]
 801220a:	bd70      	pop	{r4, r5, r6, pc}
 801220c:	2001      	movs	r0, #1
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	f240 3086 	movw	r0, #902	@ 0x386
 8012214:	bd70      	pop	{r4, r5, r6, pc}
 8012216:	200b      	movs	r0, #11
 8012218:	4770      	bx	lr
 801221a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801221e:	bd70      	pop	{r4, r5, r6, pc}
 8012220:	200b      	movs	r0, #11
 8012222:	bd70      	pop	{r4, r5, r6, pc}

08012224 <rcl_wait_set_clear>:
 8012224:	2800      	cmp	r0, #0
 8012226:	d073      	beq.n	8012310 <rcl_wait_set_clear+0xec>
 8012228:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801222a:	b510      	push	{r4, lr}
 801222c:	4604      	mov	r4, r0
 801222e:	2b00      	cmp	r3, #0
 8012230:	d070      	beq.n	8012314 <rcl_wait_set_clear+0xf0>
 8012232:	6800      	ldr	r0, [r0, #0]
 8012234:	b138      	cbz	r0, 8012246 <rcl_wait_set_clear+0x22>
 8012236:	6862      	ldr	r2, [r4, #4]
 8012238:	2100      	movs	r1, #0
 801223a:	0092      	lsls	r2, r2, #2
 801223c:	f00b f936 	bl	801d4ac <memset>
 8012240:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012242:	2200      	movs	r2, #0
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	68a0      	ldr	r0, [r4, #8]
 8012248:	b138      	cbz	r0, 801225a <rcl_wait_set_clear+0x36>
 801224a:	68e2      	ldr	r2, [r4, #12]
 801224c:	2100      	movs	r1, #0
 801224e:	0092      	lsls	r2, r2, #2
 8012250:	f00b f92c 	bl	801d4ac <memset>
 8012254:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012256:	2200      	movs	r2, #0
 8012258:	60da      	str	r2, [r3, #12]
 801225a:	69a0      	ldr	r0, [r4, #24]
 801225c:	b138      	cbz	r0, 801226e <rcl_wait_set_clear+0x4a>
 801225e:	69e2      	ldr	r2, [r4, #28]
 8012260:	2100      	movs	r1, #0
 8012262:	0092      	lsls	r2, r2, #2
 8012264:	f00b f922 	bl	801d4ac <memset>
 8012268:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801226a:	2200      	movs	r2, #0
 801226c:	619a      	str	r2, [r3, #24]
 801226e:	6a20      	ldr	r0, [r4, #32]
 8012270:	b138      	cbz	r0, 8012282 <rcl_wait_set_clear+0x5e>
 8012272:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012274:	2100      	movs	r1, #0
 8012276:	0092      	lsls	r2, r2, #2
 8012278:	f00b f918 	bl	801d4ac <memset>
 801227c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801227e:	2200      	movs	r2, #0
 8012280:	625a      	str	r2, [r3, #36]	@ 0x24
 8012282:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012284:	b138      	cbz	r0, 8012296 <rcl_wait_set_clear+0x72>
 8012286:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012288:	2100      	movs	r1, #0
 801228a:	0092      	lsls	r2, r2, #2
 801228c:	f00b f90e 	bl	801d4ac <memset>
 8012290:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012292:	2200      	movs	r2, #0
 8012294:	631a      	str	r2, [r3, #48]	@ 0x30
 8012296:	6920      	ldr	r0, [r4, #16]
 8012298:	b138      	cbz	r0, 80122aa <rcl_wait_set_clear+0x86>
 801229a:	6962      	ldr	r2, [r4, #20]
 801229c:	2100      	movs	r1, #0
 801229e:	0092      	lsls	r2, r2, #2
 80122a0:	f00b f904 	bl	801d4ac <memset>
 80122a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122a6:	2200      	movs	r2, #0
 80122a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80122aa:	6898      	ldr	r0, [r3, #8]
 80122ac:	b138      	cbz	r0, 80122be <rcl_wait_set_clear+0x9a>
 80122ae:	685a      	ldr	r2, [r3, #4]
 80122b0:	2100      	movs	r1, #0
 80122b2:	0092      	lsls	r2, r2, #2
 80122b4:	f00b f8fa 	bl	801d4ac <memset>
 80122b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122ba:	2200      	movs	r2, #0
 80122bc:	605a      	str	r2, [r3, #4]
 80122be:	6958      	ldr	r0, [r3, #20]
 80122c0:	b138      	cbz	r0, 80122d2 <rcl_wait_set_clear+0xae>
 80122c2:	691a      	ldr	r2, [r3, #16]
 80122c4:	2100      	movs	r1, #0
 80122c6:	0092      	lsls	r2, r2, #2
 80122c8:	f00b f8f0 	bl	801d4ac <memset>
 80122cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122ce:	2200      	movs	r2, #0
 80122d0:	611a      	str	r2, [r3, #16]
 80122d2:	6a18      	ldr	r0, [r3, #32]
 80122d4:	b138      	cbz	r0, 80122e6 <rcl_wait_set_clear+0xc2>
 80122d6:	69da      	ldr	r2, [r3, #28]
 80122d8:	2100      	movs	r1, #0
 80122da:	0092      	lsls	r2, r2, #2
 80122dc:	f00b f8e6 	bl	801d4ac <memset>
 80122e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122e2:	2200      	movs	r2, #0
 80122e4:	61da      	str	r2, [r3, #28]
 80122e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80122e8:	b138      	cbz	r0, 80122fa <rcl_wait_set_clear+0xd6>
 80122ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80122ec:	2100      	movs	r1, #0
 80122ee:	0092      	lsls	r2, r2, #2
 80122f0:	f00b f8dc 	bl	801d4ac <memset>
 80122f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122f6:	2200      	movs	r2, #0
 80122f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80122fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80122fc:	b138      	cbz	r0, 801230e <rcl_wait_set_clear+0xea>
 80122fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012300:	2100      	movs	r1, #0
 8012302:	0092      	lsls	r2, r2, #2
 8012304:	f00b f8d2 	bl	801d4ac <memset>
 8012308:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801230a:	2000      	movs	r0, #0
 801230c:	6358      	str	r0, [r3, #52]	@ 0x34
 801230e:	bd10      	pop	{r4, pc}
 8012310:	200b      	movs	r0, #11
 8012312:	4770      	bx	lr
 8012314:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012318:	bd10      	pop	{r4, pc}
 801231a:	bf00      	nop

0801231c <rcl_wait_set_resize>:
 801231c:	2800      	cmp	r0, #0
 801231e:	f000 8185 	beq.w	801262c <rcl_wait_set_resize+0x310>
 8012322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012326:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012328:	b083      	sub	sp, #12
 801232a:	4605      	mov	r5, r0
 801232c:	2c00      	cmp	r4, #0
 801232e:	f000 817f 	beq.w	8012630 <rcl_wait_set_resize+0x314>
 8012332:	f04f 0900 	mov.w	r9, #0
 8012336:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801233a:	461f      	mov	r7, r3
 801233c:	4688      	mov	r8, r1
 801233e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8012342:	4616      	mov	r6, r2
 8012344:	f8c0 9004 	str.w	r9, [r0, #4]
 8012348:	f8c4 9000 	str.w	r9, [r4]
 801234c:	2900      	cmp	r1, #0
 801234e:	f000 80bd 	beq.w	80124cc <rcl_wait_set_resize+0x1b0>
 8012352:	008c      	lsls	r4, r1, #2
 8012354:	6800      	ldr	r0, [r0, #0]
 8012356:	9301      	str	r3, [sp, #4]
 8012358:	4652      	mov	r2, sl
 801235a:	4621      	mov	r1, r4
 801235c:	4798      	blx	r3
 801235e:	9b01      	ldr	r3, [sp, #4]
 8012360:	6028      	str	r0, [r5, #0]
 8012362:	2800      	cmp	r0, #0
 8012364:	f000 80cb 	beq.w	80124fe <rcl_wait_set_resize+0x1e2>
 8012368:	4622      	mov	r2, r4
 801236a:	4649      	mov	r1, r9
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	f00b f89d 	bl	801d4ac <memset>
 8012372:	f8c5 8004 	str.w	r8, [r5, #4]
 8012376:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801237a:	9b01      	ldr	r3, [sp, #4]
 801237c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012380:	f8c8 9004 	str.w	r9, [r8, #4]
 8012384:	4652      	mov	r2, sl
 8012386:	4621      	mov	r1, r4
 8012388:	4798      	blx	r3
 801238a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801238c:	f8c8 0008 	str.w	r0, [r8, #8]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	2b00      	cmp	r3, #0
 8012394:	f000 80ac 	beq.w	80124f0 <rcl_wait_set_resize+0x1d4>
 8012398:	4622      	mov	r2, r4
 801239a:	4649      	mov	r1, r9
 801239c:	4618      	mov	r0, r3
 801239e:	f00b f885 	bl	801d4ac <memset>
 80123a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80123a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80123a8:	f04f 0800 	mov.w	r8, #0
 80123ac:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80123b0:	f8c5 800c 	str.w	r8, [r5, #12]
 80123b4:	f8c4 800c 	str.w	r8, [r4, #12]
 80123b8:	2e00      	cmp	r6, #0
 80123ba:	f040 80a4 	bne.w	8012506 <rcl_wait_set_resize+0x1ea>
 80123be:	68a8      	ldr	r0, [r5, #8]
 80123c0:	b128      	cbz	r0, 80123ce <rcl_wait_set_resize+0xb2>
 80123c2:	4649      	mov	r1, r9
 80123c4:	4790      	blx	r2
 80123c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80123c8:	60ae      	str	r6, [r5, #8]
 80123ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80123ce:	f04f 0800 	mov.w	r8, #0
 80123d2:	19f6      	adds	r6, r6, r7
 80123d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80123d8:	f040 80ac 	bne.w	8012534 <rcl_wait_set_resize+0x218>
 80123dc:	6960      	ldr	r0, [r4, #20]
 80123de:	b130      	cbz	r0, 80123ee <rcl_wait_set_resize+0xd2>
 80123e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80123e2:	4649      	mov	r1, r9
 80123e4:	4798      	blx	r3
 80123e6:	6166      	str	r6, [r4, #20]
 80123e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80123ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80123ee:	2600      	movs	r6, #0
 80123f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80123f4:	616e      	str	r6, [r5, #20]
 80123f6:	6426      	str	r6, [r4, #64]	@ 0x40
 80123f8:	2f00      	cmp	r7, #0
 80123fa:	f040 80ad 	bne.w	8012558 <rcl_wait_set_resize+0x23c>
 80123fe:	6928      	ldr	r0, [r5, #16]
 8012400:	b138      	cbz	r0, 8012412 <rcl_wait_set_resize+0xf6>
 8012402:	4649      	mov	r1, r9
 8012404:	47d0      	blx	sl
 8012406:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012408:	612f      	str	r7, [r5, #16]
 801240a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801240e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012412:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012414:	2600      	movs	r6, #0
 8012416:	61ee      	str	r6, [r5, #28]
 8012418:	61a6      	str	r6, [r4, #24]
 801241a:	2b00      	cmp	r3, #0
 801241c:	f040 80af 	bne.w	801257e <rcl_wait_set_resize+0x262>
 8012420:	69a8      	ldr	r0, [r5, #24]
 8012422:	b120      	cbz	r0, 801242e <rcl_wait_set_resize+0x112>
 8012424:	4649      	mov	r1, r9
 8012426:	47d0      	blx	sl
 8012428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801242a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801242c:	61ab      	str	r3, [r5, #24]
 801242e:	6a20      	ldr	r0, [r4, #32]
 8012430:	b128      	cbz	r0, 801243e <rcl_wait_set_resize+0x122>
 8012432:	4649      	mov	r1, r9
 8012434:	47d0      	blx	sl
 8012436:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012438:	2300      	movs	r3, #0
 801243a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801243e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012440:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012442:	2600      	movs	r6, #0
 8012444:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012448:	626e      	str	r6, [r5, #36]	@ 0x24
 801244a:	6266      	str	r6, [r4, #36]	@ 0x24
 801244c:	2b00      	cmp	r3, #0
 801244e:	f000 80b6 	beq.w	80125be <rcl_wait_set_resize+0x2a2>
 8012452:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012456:	6a28      	ldr	r0, [r5, #32]
 8012458:	463a      	mov	r2, r7
 801245a:	4651      	mov	r1, sl
 801245c:	47c8      	blx	r9
 801245e:	6228      	str	r0, [r5, #32]
 8012460:	2800      	cmp	r0, #0
 8012462:	d04c      	beq.n	80124fe <rcl_wait_set_resize+0x1e2>
 8012464:	4652      	mov	r2, sl
 8012466:	4631      	mov	r1, r6
 8012468:	f00b f820 	bl	801d4ac <memset>
 801246c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801246e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012470:	626b      	str	r3, [r5, #36]	@ 0x24
 8012472:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012474:	62a6      	str	r6, [r4, #40]	@ 0x28
 8012476:	463a      	mov	r2, r7
 8012478:	4651      	mov	r1, sl
 801247a:	47c8      	blx	r9
 801247c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801247e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012480:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8012482:	2c00      	cmp	r4, #0
 8012484:	f000 80f0 	beq.w	8012668 <rcl_wait_set_resize+0x34c>
 8012488:	4620      	mov	r0, r4
 801248a:	4652      	mov	r2, sl
 801248c:	4631      	mov	r1, r6
 801248e:	f00b f80d 	bl	801d4ac <memset>
 8012492:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012496:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012498:	2600      	movs	r6, #0
 801249a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801249e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80124a0:	6326      	str	r6, [r4, #48]	@ 0x30
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f040 809d 	bne.w	80125e2 <rcl_wait_set_resize+0x2c6>
 80124a8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80124aa:	b120      	cbz	r0, 80124b6 <rcl_wait_set_resize+0x19a>
 80124ac:	4639      	mov	r1, r7
 80124ae:	47c0      	blx	r8
 80124b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80124b4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80124b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80124b8:	b310      	cbz	r0, 8012500 <rcl_wait_set_resize+0x1e4>
 80124ba:	4639      	mov	r1, r7
 80124bc:	47c0      	blx	r8
 80124be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80124c0:	2000      	movs	r0, #0
 80124c2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80124c6:	b003      	add	sp, #12
 80124c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124cc:	6800      	ldr	r0, [r0, #0]
 80124ce:	b120      	cbz	r0, 80124da <rcl_wait_set_resize+0x1be>
 80124d0:	4651      	mov	r1, sl
 80124d2:	47d8      	blx	fp
 80124d4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80124d6:	f8c5 8000 	str.w	r8, [r5]
 80124da:	68a0      	ldr	r0, [r4, #8]
 80124dc:	2800      	cmp	r0, #0
 80124de:	f43f af61 	beq.w	80123a4 <rcl_wait_set_resize+0x88>
 80124e2:	4651      	mov	r1, sl
 80124e4:	47d8      	blx	fp
 80124e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80124e8:	2300      	movs	r3, #0
 80124ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80124ee:	e759      	b.n	80123a4 <rcl_wait_set_resize+0x88>
 80124f0:	6828      	ldr	r0, [r5, #0]
 80124f2:	9301      	str	r3, [sp, #4]
 80124f4:	4651      	mov	r1, sl
 80124f6:	47d8      	blx	fp
 80124f8:	9b01      	ldr	r3, [sp, #4]
 80124fa:	e9c5 3300 	strd	r3, r3, [r5]
 80124fe:	200a      	movs	r0, #10
 8012500:	b003      	add	sp, #12
 8012502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012506:	00b4      	lsls	r4, r6, #2
 8012508:	68a8      	ldr	r0, [r5, #8]
 801250a:	464a      	mov	r2, r9
 801250c:	4621      	mov	r1, r4
 801250e:	4798      	blx	r3
 8012510:	60a8      	str	r0, [r5, #8]
 8012512:	2800      	cmp	r0, #0
 8012514:	d0f3      	beq.n	80124fe <rcl_wait_set_resize+0x1e2>
 8012516:	4622      	mov	r2, r4
 8012518:	4641      	mov	r1, r8
 801251a:	f00a ffc7 	bl	801d4ac <memset>
 801251e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012520:	60ee      	str	r6, [r5, #12]
 8012522:	f04f 0800 	mov.w	r8, #0
 8012526:	19f6      	adds	r6, r6, r7
 8012528:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801252c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012530:	f43f af54 	beq.w	80123dc <rcl_wait_set_resize+0xc0>
 8012534:	00b6      	lsls	r6, r6, #2
 8012536:	464a      	mov	r2, r9
 8012538:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801253a:	6960      	ldr	r0, [r4, #20]
 801253c:	4631      	mov	r1, r6
 801253e:	4798      	blx	r3
 8012540:	4681      	mov	r9, r0
 8012542:	6160      	str	r0, [r4, #20]
 8012544:	2800      	cmp	r0, #0
 8012546:	d076      	beq.n	8012636 <rcl_wait_set_resize+0x31a>
 8012548:	4632      	mov	r2, r6
 801254a:	4641      	mov	r1, r8
 801254c:	f00a ffae 	bl	801d4ac <memset>
 8012550:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012552:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012556:	e74a      	b.n	80123ee <rcl_wait_set_resize+0xd2>
 8012558:	00bc      	lsls	r4, r7, #2
 801255a:	6928      	ldr	r0, [r5, #16]
 801255c:	464a      	mov	r2, r9
 801255e:	4621      	mov	r1, r4
 8012560:	47c0      	blx	r8
 8012562:	6128      	str	r0, [r5, #16]
 8012564:	2800      	cmp	r0, #0
 8012566:	d0ca      	beq.n	80124fe <rcl_wait_set_resize+0x1e2>
 8012568:	4622      	mov	r2, r4
 801256a:	4631      	mov	r1, r6
 801256c:	f00a ff9e 	bl	801d4ac <memset>
 8012570:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012572:	616f      	str	r7, [r5, #20]
 8012574:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012578:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801257c:	e749      	b.n	8012412 <rcl_wait_set_resize+0xf6>
 801257e:	009c      	lsls	r4, r3, #2
 8012580:	69a8      	ldr	r0, [r5, #24]
 8012582:	464a      	mov	r2, r9
 8012584:	4621      	mov	r1, r4
 8012586:	47c0      	blx	r8
 8012588:	61a8      	str	r0, [r5, #24]
 801258a:	2800      	cmp	r0, #0
 801258c:	d0b7      	beq.n	80124fe <rcl_wait_set_resize+0x1e2>
 801258e:	4622      	mov	r2, r4
 8012590:	4631      	mov	r1, r6
 8012592:	f00a ff8b 	bl	801d4ac <memset>
 8012596:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8012598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801259a:	61eb      	str	r3, [r5, #28]
 801259c:	6a38      	ldr	r0, [r7, #32]
 801259e:	61fe      	str	r6, [r7, #28]
 80125a0:	464a      	mov	r2, r9
 80125a2:	4621      	mov	r1, r4
 80125a4:	47c0      	blx	r8
 80125a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80125a8:	6238      	str	r0, [r7, #32]
 80125aa:	6a1f      	ldr	r7, [r3, #32]
 80125ac:	2f00      	cmp	r7, #0
 80125ae:	d054      	beq.n	801265a <rcl_wait_set_resize+0x33e>
 80125b0:	4622      	mov	r2, r4
 80125b2:	4631      	mov	r1, r6
 80125b4:	4638      	mov	r0, r7
 80125b6:	f00a ff79 	bl	801d4ac <memset>
 80125ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80125bc:	e73f      	b.n	801243e <rcl_wait_set_resize+0x122>
 80125be:	6a28      	ldr	r0, [r5, #32]
 80125c0:	b120      	cbz	r0, 80125cc <rcl_wait_set_resize+0x2b0>
 80125c2:	4639      	mov	r1, r7
 80125c4:	47c0      	blx	r8
 80125c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80125ca:	622b      	str	r3, [r5, #32]
 80125cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80125ce:	2800      	cmp	r0, #0
 80125d0:	f43f af60 	beq.w	8012494 <rcl_wait_set_resize+0x178>
 80125d4:	4639      	mov	r1, r7
 80125d6:	47c0      	blx	r8
 80125d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80125da:	2300      	movs	r3, #0
 80125dc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80125e0:	e758      	b.n	8012494 <rcl_wait_set_resize+0x178>
 80125e2:	009c      	lsls	r4, r3, #2
 80125e4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80125e6:	463a      	mov	r2, r7
 80125e8:	4621      	mov	r1, r4
 80125ea:	47c8      	blx	r9
 80125ec:	62a8      	str	r0, [r5, #40]	@ 0x28
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d085      	beq.n	80124fe <rcl_wait_set_resize+0x1e2>
 80125f2:	4622      	mov	r2, r4
 80125f4:	4631      	mov	r1, r6
 80125f6:	f00a ff59 	bl	801d4ac <memset>
 80125fa:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80125fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012600:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8012602:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012606:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801260a:	463a      	mov	r2, r7
 801260c:	4621      	mov	r1, r4
 801260e:	47c8      	blx	r9
 8012610:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012612:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012618:	b36b      	cbz	r3, 8012676 <rcl_wait_set_resize+0x35a>
 801261a:	4622      	mov	r2, r4
 801261c:	4631      	mov	r1, r6
 801261e:	4618      	mov	r0, r3
 8012620:	f00a ff44 	bl	801d4ac <memset>
 8012624:	4630      	mov	r0, r6
 8012626:	b003      	add	sp, #12
 8012628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801262c:	200b      	movs	r0, #11
 801262e:	4770      	bx	lr
 8012630:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012634:	e764      	b.n	8012500 <rcl_wait_set_resize+0x1e4>
 8012636:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012638:	68a8      	ldr	r0, [r5, #8]
 801263a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801263e:	4798      	blx	r3
 8012640:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012642:	6928      	ldr	r0, [r5, #16]
 8012644:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012646:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012648:	f8c5 900c 	str.w	r9, [r5, #12]
 801264c:	f8c5 9008 	str.w	r9, [r5, #8]
 8012650:	4790      	blx	r2
 8012652:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012656:	200a      	movs	r0, #10
 8012658:	e752      	b.n	8012500 <rcl_wait_set_resize+0x1e4>
 801265a:	69a8      	ldr	r0, [r5, #24]
 801265c:	4649      	mov	r1, r9
 801265e:	47d0      	blx	sl
 8012660:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012664:	200a      	movs	r0, #10
 8012666:	e74b      	b.n	8012500 <rcl_wait_set_resize+0x1e4>
 8012668:	6a28      	ldr	r0, [r5, #32]
 801266a:	4639      	mov	r1, r7
 801266c:	47c0      	blx	r8
 801266e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012672:	200a      	movs	r0, #10
 8012674:	e744      	b.n	8012500 <rcl_wait_set_resize+0x1e4>
 8012676:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	4639      	mov	r1, r7
 801267c:	47c0      	blx	r8
 801267e:	9b01      	ldr	r3, [sp, #4]
 8012680:	200a      	movs	r0, #10
 8012682:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012686:	e73b      	b.n	8012500 <rcl_wait_set_resize+0x1e4>

08012688 <rcl_wait_set_init>:
 8012688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801268c:	b084      	sub	sp, #16
 801268e:	4604      	mov	r4, r0
 8012690:	a810      	add	r0, sp, #64	@ 0x40
 8012692:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8012696:	460f      	mov	r7, r1
 8012698:	4690      	mov	r8, r2
 801269a:	4699      	mov	r9, r3
 801269c:	f000 faee 	bl	8012c7c <rcutils_allocator_is_valid>
 80126a0:	2800      	cmp	r0, #0
 80126a2:	d06b      	beq.n	801277c <rcl_wait_set_init+0xf4>
 80126a4:	2c00      	cmp	r4, #0
 80126a6:	d069      	beq.n	801277c <rcl_wait_set_init+0xf4>
 80126a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80126aa:	b125      	cbz	r5, 80126b6 <rcl_wait_set_init+0x2e>
 80126ac:	2564      	movs	r5, #100	@ 0x64
 80126ae:	4628      	mov	r0, r5
 80126b0:	b004      	add	sp, #16
 80126b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b6:	f1ba 0f00 	cmp.w	sl, #0
 80126ba:	d05f      	beq.n	801277c <rcl_wait_set_init+0xf4>
 80126bc:	4650      	mov	r0, sl
 80126be:	f7fe f8ab 	bl	8010818 <rcl_context_is_valid>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d067      	beq.n	8012796 <rcl_wait_set_init+0x10e>
 80126c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80126c8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80126ca:	205c      	movs	r0, #92	@ 0x5c
 80126cc:	4798      	blx	r3
 80126ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80126d0:	2800      	cmp	r0, #0
 80126d2:	d062      	beq.n	801279a <rcl_wait_set_init+0x112>
 80126d4:	4629      	mov	r1, r5
 80126d6:	225c      	movs	r2, #92	@ 0x5c
 80126d8:	f00a fee8 	bl	801d4ac <memset>
 80126dc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80126e0:	eb03 0e02 	add.w	lr, r3, r2
 80126e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126e6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80126e8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80126ec:	449e      	add	lr, r3
 80126ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126f2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80126f6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80126fa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80126fe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012702:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012706:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801270a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801270e:	f8da a000 	ldr.w	sl, [sl]
 8012712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012714:	44c6      	add	lr, r8
 8012716:	f8dc 3000 	ldr.w	r3, [ip]
 801271a:	602b      	str	r3, [r5, #0]
 801271c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012720:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012724:	f002 f8d2 	bl	80148cc <rmw_create_wait_set>
 8012728:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801272a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801272c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801272e:	b350      	cbz	r0, 8012786 <rcl_wait_set_init+0xfe>
 8012730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012732:	9302      	str	r3, [sp, #8]
 8012734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012736:	9301      	str	r3, [sp, #4]
 8012738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	4642      	mov	r2, r8
 801273e:	464b      	mov	r3, r9
 8012740:	4639      	mov	r1, r7
 8012742:	4620      	mov	r0, r4
 8012744:	f7ff fdea 	bl	801231c <rcl_wait_set_resize>
 8012748:	4605      	mov	r5, r0
 801274a:	2800      	cmp	r0, #0
 801274c:	d0af      	beq.n	80126ae <rcl_wait_set_init+0x26>
 801274e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012750:	bb2b      	cbnz	r3, 801279e <rcl_wait_set_init+0x116>
 8012752:	2600      	movs	r6, #0
 8012754:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012758:	9600      	str	r6, [sp, #0]
 801275a:	4633      	mov	r3, r6
 801275c:	4632      	mov	r2, r6
 801275e:	4631      	mov	r1, r6
 8012760:	4620      	mov	r0, r4
 8012762:	f7ff fddb 	bl	801231c <rcl_wait_set_resize>
 8012766:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012768:	2800      	cmp	r0, #0
 801276a:	d0a0      	beq.n	80126ae <rcl_wait_set_init+0x26>
 801276c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801276e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012770:	4798      	blx	r3
 8012772:	4628      	mov	r0, r5
 8012774:	6326      	str	r6, [r4, #48]	@ 0x30
 8012776:	b004      	add	sp, #16
 8012778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277c:	250b      	movs	r5, #11
 801277e:	4628      	mov	r0, r5
 8012780:	b004      	add	sp, #16
 8012782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012786:	2501      	movs	r5, #1
 8012788:	f002 f8aa 	bl	80148e0 <rmw_destroy_wait_set>
 801278c:	2800      	cmp	r0, #0
 801278e:	bf18      	it	ne
 8012790:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012794:	e7dd      	b.n	8012752 <rcl_wait_set_init+0xca>
 8012796:	2565      	movs	r5, #101	@ 0x65
 8012798:	e789      	b.n	80126ae <rcl_wait_set_init+0x26>
 801279a:	250a      	movs	r5, #10
 801279c:	e787      	b.n	80126ae <rcl_wait_set_init+0x26>
 801279e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80127a0:	e7f2      	b.n	8012788 <rcl_wait_set_init+0x100>
 80127a2:	bf00      	nop

080127a4 <rcl_wait_set_add_guard_condition>:
 80127a4:	b318      	cbz	r0, 80127ee <rcl_wait_set_add_guard_condition+0x4a>
 80127a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	4604      	mov	r4, r0
 80127ac:	b30b      	cbz	r3, 80127f2 <rcl_wait_set_add_guard_condition+0x4e>
 80127ae:	b319      	cbz	r1, 80127f8 <rcl_wait_set_add_guard_condition+0x54>
 80127b0:	68dd      	ldr	r5, [r3, #12]
 80127b2:	68c0      	ldr	r0, [r0, #12]
 80127b4:	4285      	cmp	r5, r0
 80127b6:	d217      	bcs.n	80127e8 <rcl_wait_set_add_guard_condition+0x44>
 80127b8:	68a0      	ldr	r0, [r4, #8]
 80127ba:	1c6e      	adds	r6, r5, #1
 80127bc:	60de      	str	r6, [r3, #12]
 80127be:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80127c2:	b102      	cbz	r2, 80127c6 <rcl_wait_set_add_guard_condition+0x22>
 80127c4:	6015      	str	r5, [r2, #0]
 80127c6:	4608      	mov	r0, r1
 80127c8:	f008 f98c 	bl	801aae4 <rcl_guard_condition_get_rmw_handle>
 80127cc:	b150      	cbz	r0, 80127e4 <rcl_wait_set_add_guard_condition+0x40>
 80127ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127d0:	6842      	ldr	r2, [r0, #4]
 80127d2:	695b      	ldr	r3, [r3, #20]
 80127d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80127da:	6913      	ldr	r3, [r2, #16]
 80127dc:	3301      	adds	r3, #1
 80127de:	2000      	movs	r0, #0
 80127e0:	6113      	str	r3, [r2, #16]
 80127e2:	bd70      	pop	{r4, r5, r6, pc}
 80127e4:	2001      	movs	r0, #1
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	f240 3086 	movw	r0, #902	@ 0x386
 80127ec:	bd70      	pop	{r4, r5, r6, pc}
 80127ee:	200b      	movs	r0, #11
 80127f0:	4770      	bx	lr
 80127f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80127f6:	bd70      	pop	{r4, r5, r6, pc}
 80127f8:	200b      	movs	r0, #11
 80127fa:	bd70      	pop	{r4, r5, r6, pc}

080127fc <rcl_wait_set_add_timer>:
 80127fc:	b328      	cbz	r0, 801284a <rcl_wait_set_add_timer+0x4e>
 80127fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012800:	b570      	push	{r4, r5, r6, lr}
 8012802:	4604      	mov	r4, r0
 8012804:	b31b      	cbz	r3, 801284e <rcl_wait_set_add_timer+0x52>
 8012806:	b329      	cbz	r1, 8012854 <rcl_wait_set_add_timer+0x58>
 8012808:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801280a:	6965      	ldr	r5, [r4, #20]
 801280c:	42a8      	cmp	r0, r5
 801280e:	d219      	bcs.n	8012844 <rcl_wait_set_add_timer+0x48>
 8012810:	6925      	ldr	r5, [r4, #16]
 8012812:	1c46      	adds	r6, r0, #1
 8012814:	641e      	str	r6, [r3, #64]	@ 0x40
 8012816:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801281a:	b102      	cbz	r2, 801281e <rcl_wait_set_add_timer+0x22>
 801281c:	6010      	str	r0, [r2, #0]
 801281e:	4608      	mov	r0, r1
 8012820:	f7ff fba6 	bl	8011f70 <rcl_timer_get_guard_condition>
 8012824:	b168      	cbz	r0, 8012842 <rcl_wait_set_add_timer+0x46>
 8012826:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012828:	68e3      	ldr	r3, [r4, #12]
 801282a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801282c:	3b01      	subs	r3, #1
 801282e:	441d      	add	r5, r3
 8012830:	f008 f958 	bl	801aae4 <rcl_guard_condition_get_rmw_handle>
 8012834:	b180      	cbz	r0, 8012858 <rcl_wait_set_add_timer+0x5c>
 8012836:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012838:	6842      	ldr	r2, [r0, #4]
 801283a:	695b      	ldr	r3, [r3, #20]
 801283c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012840:	2000      	movs	r0, #0
 8012842:	bd70      	pop	{r4, r5, r6, pc}
 8012844:	f240 3086 	movw	r0, #902	@ 0x386
 8012848:	bd70      	pop	{r4, r5, r6, pc}
 801284a:	200b      	movs	r0, #11
 801284c:	4770      	bx	lr
 801284e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012852:	bd70      	pop	{r4, r5, r6, pc}
 8012854:	200b      	movs	r0, #11
 8012856:	bd70      	pop	{r4, r5, r6, pc}
 8012858:	2001      	movs	r0, #1
 801285a:	bd70      	pop	{r4, r5, r6, pc}

0801285c <rcl_wait_set_add_client>:
 801285c:	b318      	cbz	r0, 80128a6 <rcl_wait_set_add_client+0x4a>
 801285e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012860:	b570      	push	{r4, r5, r6, lr}
 8012862:	4604      	mov	r4, r0
 8012864:	b30b      	cbz	r3, 80128aa <rcl_wait_set_add_client+0x4e>
 8012866:	b319      	cbz	r1, 80128b0 <rcl_wait_set_add_client+0x54>
 8012868:	699d      	ldr	r5, [r3, #24]
 801286a:	69c0      	ldr	r0, [r0, #28]
 801286c:	4285      	cmp	r5, r0
 801286e:	d217      	bcs.n	80128a0 <rcl_wait_set_add_client+0x44>
 8012870:	69a0      	ldr	r0, [r4, #24]
 8012872:	1c6e      	adds	r6, r5, #1
 8012874:	619e      	str	r6, [r3, #24]
 8012876:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801287a:	b102      	cbz	r2, 801287e <rcl_wait_set_add_client+0x22>
 801287c:	6015      	str	r5, [r2, #0]
 801287e:	4608      	mov	r0, r1
 8012880:	f7fd fea4 	bl	80105cc <rcl_client_get_rmw_handle>
 8012884:	b150      	cbz	r0, 801289c <rcl_wait_set_add_client+0x40>
 8012886:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012888:	6842      	ldr	r2, [r0, #4]
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012890:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012892:	69d3      	ldr	r3, [r2, #28]
 8012894:	3301      	adds	r3, #1
 8012896:	2000      	movs	r0, #0
 8012898:	61d3      	str	r3, [r2, #28]
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	2001      	movs	r0, #1
 801289e:	bd70      	pop	{r4, r5, r6, pc}
 80128a0:	f240 3086 	movw	r0, #902	@ 0x386
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	200b      	movs	r0, #11
 80128a8:	4770      	bx	lr
 80128aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	200b      	movs	r0, #11
 80128b2:	bd70      	pop	{r4, r5, r6, pc}

080128b4 <rcl_wait_set_add_service>:
 80128b4:	b318      	cbz	r0, 80128fe <rcl_wait_set_add_service+0x4a>
 80128b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80128b8:	b570      	push	{r4, r5, r6, lr}
 80128ba:	4604      	mov	r4, r0
 80128bc:	b30b      	cbz	r3, 8012902 <rcl_wait_set_add_service+0x4e>
 80128be:	b319      	cbz	r1, 8012908 <rcl_wait_set_add_service+0x54>
 80128c0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80128c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80128c4:	4285      	cmp	r5, r0
 80128c6:	d217      	bcs.n	80128f8 <rcl_wait_set_add_service+0x44>
 80128c8:	6a20      	ldr	r0, [r4, #32]
 80128ca:	1c6e      	adds	r6, r5, #1
 80128cc:	625e      	str	r6, [r3, #36]	@ 0x24
 80128ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80128d2:	b102      	cbz	r2, 80128d6 <rcl_wait_set_add_service+0x22>
 80128d4:	6015      	str	r5, [r2, #0]
 80128d6:	4608      	mov	r0, r1
 80128d8:	f7fe ff36 	bl	8011748 <rcl_service_get_rmw_handle>
 80128dc:	b150      	cbz	r0, 80128f4 <rcl_wait_set_add_service+0x40>
 80128de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128e0:	6842      	ldr	r2, [r0, #4]
 80128e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80128e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80128ea:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80128ec:	3301      	adds	r3, #1
 80128ee:	2000      	movs	r0, #0
 80128f0:	6293      	str	r3, [r2, #40]	@ 0x28
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	2001      	movs	r0, #1
 80128f6:	bd70      	pop	{r4, r5, r6, pc}
 80128f8:	f240 3086 	movw	r0, #902	@ 0x386
 80128fc:	bd70      	pop	{r4, r5, r6, pc}
 80128fe:	200b      	movs	r0, #11
 8012900:	4770      	bx	lr
 8012902:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012906:	bd70      	pop	{r4, r5, r6, pc}
 8012908:	200b      	movs	r0, #11
 801290a:	bd70      	pop	{r4, r5, r6, pc}
 801290c:	0000      	movs	r0, r0
	...

08012910 <rcl_wait>:
 8012910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012914:	ed2d 8b02 	vpush	{d8}
 8012918:	b08d      	sub	sp, #52	@ 0x34
 801291a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801291e:	2800      	cmp	r0, #0
 8012920:	f000 8143 	beq.w	8012baa <rcl_wait+0x29a>
 8012924:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012926:	4605      	mov	r5, r0
 8012928:	2e00      	cmp	r6, #0
 801292a:	f000 8112 	beq.w	8012b52 <rcl_wait+0x242>
 801292e:	6843      	ldr	r3, [r0, #4]
 8012930:	b983      	cbnz	r3, 8012954 <rcl_wait+0x44>
 8012932:	68eb      	ldr	r3, [r5, #12]
 8012934:	b973      	cbnz	r3, 8012954 <rcl_wait+0x44>
 8012936:	696b      	ldr	r3, [r5, #20]
 8012938:	b963      	cbnz	r3, 8012954 <rcl_wait+0x44>
 801293a:	69eb      	ldr	r3, [r5, #28]
 801293c:	b953      	cbnz	r3, 8012954 <rcl_wait+0x44>
 801293e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012940:	b943      	cbnz	r3, 8012954 <rcl_wait+0x44>
 8012942:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012944:	b933      	cbnz	r3, 8012954 <rcl_wait+0x44>
 8012946:	f240 3085 	movw	r0, #901	@ 0x385
 801294a:	b00d      	add	sp, #52	@ 0x34
 801294c:	ecbd 8b02 	vpop	{d8}
 8012950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012954:	9b04      	ldr	r3, [sp, #16]
 8012956:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012958:	2b01      	cmp	r3, #1
 801295a:	9b05      	ldr	r3, [sp, #20]
 801295c:	f173 0300 	sbcs.w	r3, r3, #0
 8012960:	f2c0 80f0 	blt.w	8012b44 <rcl_wait+0x234>
 8012964:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012968:	4643      	mov	r3, r8
 801296a:	2a00      	cmp	r2, #0
 801296c:	f000 8133 	beq.w	8012bd6 <rcl_wait+0x2c6>
 8012970:	2400      	movs	r4, #0
 8012972:	4613      	mov	r3, r2
 8012974:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8012be8 <rcl_wait+0x2d8>
 8012978:	46a2      	mov	sl, r4
 801297a:	46a3      	mov	fp, r4
 801297c:	f240 3921 	movw	r9, #801	@ 0x321
 8012980:	4632      	mov	r2, r6
 8012982:	e014      	b.n	80129ae <rcl_wait+0x9e>
 8012984:	2800      	cmp	r0, #0
 8012986:	d1e0      	bne.n	801294a <rcl_wait+0x3a>
 8012988:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801298c:	4542      	cmp	r2, r8
 801298e:	eb73 0107 	sbcs.w	r1, r3, r7
 8012992:	da03      	bge.n	801299c <rcl_wait+0x8c>
 8012994:	4690      	mov	r8, r2
 8012996:	461f      	mov	r7, r3
 8012998:	f04f 0b01 	mov.w	fp, #1
 801299c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801299e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80129a0:	3401      	adds	r4, #1
 80129a2:	f14a 0a00 	adc.w	sl, sl, #0
 80129a6:	429c      	cmp	r4, r3
 80129a8:	f17a 0100 	sbcs.w	r1, sl, #0
 80129ac:	d228      	bcs.n	8012a00 <rcl_wait+0xf0>
 80129ae:	6928      	ldr	r0, [r5, #16]
 80129b0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80129b4:	a908      	add	r1, sp, #32
 80129b6:	00a6      	lsls	r6, r4, #2
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d0f1      	beq.n	80129a0 <rcl_wait+0x90>
 80129bc:	68eb      	ldr	r3, [r5, #12]
 80129be:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80129c2:	4423      	add	r3, r4
 80129c4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80129c8:	f1be 0f00 	cmp.w	lr, #0
 80129cc:	d006      	beq.n	80129dc <rcl_wait+0xcc>
 80129ce:	6913      	ldr	r3, [r2, #16]
 80129d0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80129d4:	3301      	adds	r3, #1
 80129d6:	6113      	str	r3, [r2, #16]
 80129d8:	692b      	ldr	r3, [r5, #16]
 80129da:	5998      	ldr	r0, [r3, r6]
 80129dc:	ed8d 8b08 	vstr	d8, [sp, #32]
 80129e0:	f7ff fa94 	bl	8011f0c <rcl_timer_get_time_until_next_call>
 80129e4:	4548      	cmp	r0, r9
 80129e6:	d1cd      	bne.n	8012984 <rcl_wait+0x74>
 80129e8:	692b      	ldr	r3, [r5, #16]
 80129ea:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80129ec:	2100      	movs	r1, #0
 80129ee:	5199      	str	r1, [r3, r6]
 80129f0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80129f2:	3401      	adds	r4, #1
 80129f4:	f14a 0a00 	adc.w	sl, sl, #0
 80129f8:	429c      	cmp	r4, r3
 80129fa:	f17a 0100 	sbcs.w	r1, sl, #0
 80129fe:	d3d6      	bcc.n	80129ae <rcl_wait+0x9e>
 8012a00:	4616      	mov	r6, r2
 8012a02:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012a06:	4313      	orrs	r3, r2
 8012a08:	46d9      	mov	r9, fp
 8012a0a:	f040 80a9 	bne.w	8012b60 <rcl_wait+0x250>
 8012a0e:	2300      	movs	r3, #0
 8012a10:	2200      	movs	r2, #0
 8012a12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012a16:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012a1a:	ab08      	add	r3, sp, #32
 8012a1c:	9302      	str	r3, [sp, #8]
 8012a1e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012a20:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8012a24:	e9cd 3200 	strd	r3, r2, [sp]
 8012a28:	f106 0110 	add.w	r1, r6, #16
 8012a2c:	f106 031c 	add.w	r3, r6, #28
 8012a30:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8012a34:	1d30      	adds	r0, r6, #4
 8012a36:	f001 fdd1 	bl	80145dc <rmw_wait>
 8012a3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a3e:	4680      	mov	r8, r0
 8012a40:	b1ca      	cbz	r2, 8012a76 <rcl_wait+0x166>
 8012a42:	2400      	movs	r4, #0
 8012a44:	4627      	mov	r7, r4
 8012a46:	692a      	ldr	r2, [r5, #16]
 8012a48:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012a4c:	f10d 011f 	add.w	r1, sp, #31
 8012a50:	00a6      	lsls	r6, r4, #2
 8012a52:	b160      	cbz	r0, 8012a6e <rcl_wait+0x15e>
 8012a54:	f88d 701f 	strb.w	r7, [sp, #31]
 8012a58:	f7ff fa1e 	bl	8011e98 <rcl_timer_is_ready>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	f47f af74 	bne.w	801294a <rcl_wait+0x3a>
 8012a62:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012a66:	b90b      	cbnz	r3, 8012a6c <rcl_wait+0x15c>
 8012a68:	692a      	ldr	r2, [r5, #16]
 8012a6a:	5193      	str	r3, [r2, r6]
 8012a6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a70:	3401      	adds	r4, #1
 8012a72:	42a2      	cmp	r2, r4
 8012a74:	d8e7      	bhi.n	8012a46 <rcl_wait+0x136>
 8012a76:	f038 0002 	bics.w	r0, r8, #2
 8012a7a:	f040 8090 	bne.w	8012b9e <rcl_wait+0x28e>
 8012a7e:	686e      	ldr	r6, [r5, #4]
 8012a80:	4602      	mov	r2, r0
 8012a82:	b91e      	cbnz	r6, 8012a8c <rcl_wait+0x17c>
 8012a84:	e00d      	b.n	8012aa2 <rcl_wait+0x192>
 8012a86:	3201      	adds	r2, #1
 8012a88:	42b2      	cmp	r2, r6
 8012a8a:	d00a      	beq.n	8012aa2 <rcl_wait+0x192>
 8012a8c:	6899      	ldr	r1, [r3, #8]
 8012a8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012a92:	2900      	cmp	r1, #0
 8012a94:	d1f7      	bne.n	8012a86 <rcl_wait+0x176>
 8012a96:	682c      	ldr	r4, [r5, #0]
 8012a98:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012a9c:	3201      	adds	r2, #1
 8012a9e:	42b2      	cmp	r2, r6
 8012aa0:	d1f4      	bne.n	8012a8c <rcl_wait+0x17c>
 8012aa2:	68ee      	ldr	r6, [r5, #12]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	b91e      	cbnz	r6, 8012ab0 <rcl_wait+0x1a0>
 8012aa8:	e00d      	b.n	8012ac6 <rcl_wait+0x1b6>
 8012aaa:	3201      	adds	r2, #1
 8012aac:	42b2      	cmp	r2, r6
 8012aae:	d00a      	beq.n	8012ac6 <rcl_wait+0x1b6>
 8012ab0:	6959      	ldr	r1, [r3, #20]
 8012ab2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ab6:	2900      	cmp	r1, #0
 8012ab8:	d1f7      	bne.n	8012aaa <rcl_wait+0x19a>
 8012aba:	68ac      	ldr	r4, [r5, #8]
 8012abc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ac0:	3201      	adds	r2, #1
 8012ac2:	42b2      	cmp	r2, r6
 8012ac4:	d1f4      	bne.n	8012ab0 <rcl_wait+0x1a0>
 8012ac6:	69ee      	ldr	r6, [r5, #28]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	b91e      	cbnz	r6, 8012ad4 <rcl_wait+0x1c4>
 8012acc:	e00d      	b.n	8012aea <rcl_wait+0x1da>
 8012ace:	3201      	adds	r2, #1
 8012ad0:	42b2      	cmp	r2, r6
 8012ad2:	d00a      	beq.n	8012aea <rcl_wait+0x1da>
 8012ad4:	6a19      	ldr	r1, [r3, #32]
 8012ad6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ada:	2900      	cmp	r1, #0
 8012adc:	d1f7      	bne.n	8012ace <rcl_wait+0x1be>
 8012ade:	69ac      	ldr	r4, [r5, #24]
 8012ae0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012ae4:	3201      	adds	r2, #1
 8012ae6:	42b2      	cmp	r2, r6
 8012ae8:	d1f4      	bne.n	8012ad4 <rcl_wait+0x1c4>
 8012aea:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8012aec:	2200      	movs	r2, #0
 8012aee:	b91e      	cbnz	r6, 8012af8 <rcl_wait+0x1e8>
 8012af0:	e00d      	b.n	8012b0e <rcl_wait+0x1fe>
 8012af2:	3201      	adds	r2, #1
 8012af4:	4296      	cmp	r6, r2
 8012af6:	d00a      	beq.n	8012b0e <rcl_wait+0x1fe>
 8012af8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012afa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012afe:	2900      	cmp	r1, #0
 8012b00:	d1f7      	bne.n	8012af2 <rcl_wait+0x1e2>
 8012b02:	6a2c      	ldr	r4, [r5, #32]
 8012b04:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012b08:	3201      	adds	r2, #1
 8012b0a:	4296      	cmp	r6, r2
 8012b0c:	d1f4      	bne.n	8012af8 <rcl_wait+0x1e8>
 8012b0e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012b10:	2200      	movs	r2, #0
 8012b12:	b91e      	cbnz	r6, 8012b1c <rcl_wait+0x20c>
 8012b14:	e00d      	b.n	8012b32 <rcl_wait+0x222>
 8012b16:	3201      	adds	r2, #1
 8012b18:	42b2      	cmp	r2, r6
 8012b1a:	d00a      	beq.n	8012b32 <rcl_wait+0x222>
 8012b1c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012b1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b22:	2900      	cmp	r1, #0
 8012b24:	d1f7      	bne.n	8012b16 <rcl_wait+0x206>
 8012b26:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012b28:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012b2c:	3201      	adds	r2, #1
 8012b2e:	42b2      	cmp	r2, r6
 8012b30:	d1f4      	bne.n	8012b1c <rcl_wait+0x20c>
 8012b32:	f1b8 0f02 	cmp.w	r8, #2
 8012b36:	f47f af08 	bne.w	801294a <rcl_wait+0x3a>
 8012b3a:	464b      	mov	r3, r9
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	bf08      	it	eq
 8012b40:	2002      	moveq	r0, #2
 8012b42:	e702      	b.n	801294a <rcl_wait+0x3a>
 8012b44:	2a00      	cmp	r2, #0
 8012b46:	d03a      	beq.n	8012bbe <rcl_wait+0x2ae>
 8012b48:	f04f 38ff 	mov.w	r8, #4294967295
 8012b4c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012b50:	e70e      	b.n	8012970 <rcl_wait+0x60>
 8012b52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b56:	b00d      	add	sp, #52	@ 0x34
 8012b58:	ecbd 8b02 	vpop	{d8}
 8012b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b60:	9b04      	ldr	r3, [sp, #16]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	9b05      	ldr	r3, [sp, #20]
 8012b66:	f173 0300 	sbcs.w	r3, r3, #0
 8012b6a:	db24      	blt.n	8012bb6 <rcl_wait+0x2a6>
 8012b6c:	2f00      	cmp	r7, #0
 8012b6e:	bfbc      	itt	lt
 8012b70:	f04f 0800 	movlt.w	r8, #0
 8012b74:	4647      	movlt	r7, r8
 8012b76:	a31e      	add	r3, pc, #120	@ (adr r3, 8012bf0 <rcl_wait+0x2e0>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	4640      	mov	r0, r8
 8012b7e:	4639      	mov	r1, r7
 8012b80:	f7ee f872 	bl	8000c68 <__aeabi_ldivmod>
 8012b84:	a31a      	add	r3, pc, #104	@ (adr r3, 8012bf0 <rcl_wait+0x2e0>)
 8012b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b8e:	4640      	mov	r0, r8
 8012b90:	4639      	mov	r1, r7
 8012b92:	f7ee f869 	bl	8000c68 <__aeabi_ldivmod>
 8012b96:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012b9a:	ab08      	add	r3, sp, #32
 8012b9c:	e73e      	b.n	8012a1c <rcl_wait+0x10c>
 8012b9e:	2001      	movs	r0, #1
 8012ba0:	b00d      	add	sp, #52	@ 0x34
 8012ba2:	ecbd 8b02 	vpop	{d8}
 8012ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012baa:	200b      	movs	r0, #11
 8012bac:	b00d      	add	sp, #52	@ 0x34
 8012bae:	ecbd 8b02 	vpop	{d8}
 8012bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb6:	465b      	mov	r3, fp
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d1d7      	bne.n	8012b6c <rcl_wait+0x25c>
 8012bbc:	e72e      	b.n	8012a1c <rcl_wait+0x10c>
 8012bbe:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012bc2:	430b      	orrs	r3, r1
 8012bc4:	bf08      	it	eq
 8012bc6:	4691      	moveq	r9, r2
 8012bc8:	f43f af21 	beq.w	8012a0e <rcl_wait+0xfe>
 8012bcc:	9b04      	ldr	r3, [sp, #16]
 8012bce:	f04f 38ff 	mov.w	r8, #4294967295
 8012bd2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	9b05      	ldr	r3, [sp, #20]
 8012bda:	f173 0300 	sbcs.w	r3, r3, #0
 8012bde:	f04f 0300 	mov.w	r3, #0
 8012be2:	4699      	mov	r9, r3
 8012be4:	dac2      	bge.n	8012b6c <rcl_wait+0x25c>
 8012be6:	e719      	b.n	8012a1c <rcl_wait+0x10c>
 8012be8:	ffffffff 	.word	0xffffffff
 8012bec:	7fffffff 	.word	0x7fffffff
 8012bf0:	3b9aca00 	.word	0x3b9aca00
 8012bf4:	00000000 	.word	0x00000000

08012bf8 <__default_zero_allocate>:
 8012bf8:	f009 ba86 	b.w	801c108 <calloc>

08012bfc <__default_reallocate>:
 8012bfc:	f009 bc24 	b.w	801c448 <realloc>

08012c00 <__default_deallocate>:
 8012c00:	f009 bb00 	b.w	801c204 <free>

08012c04 <__default_allocate>:
 8012c04:	f009 baf6 	b.w	801c1f4 <malloc>

08012c08 <rcutils_get_zero_initialized_allocator>:
 8012c08:	b510      	push	{r4, lr}
 8012c0a:	4c05      	ldr	r4, [pc, #20]	@ (8012c20 <rcutils_get_zero_initialized_allocator+0x18>)
 8012c0c:	4686      	mov	lr, r0
 8012c0e:	4684      	mov	ip, r0
 8012c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	f8cc 3000 	str.w	r3, [ip]
 8012c1c:	4670      	mov	r0, lr
 8012c1e:	bd10      	pop	{r4, pc}
 8012c20:	08023954 	.word	0x08023954

08012c24 <rcutils_set_default_allocator>:
 8012c24:	b1a8      	cbz	r0, 8012c52 <rcutils_set_default_allocator+0x2e>
 8012c26:	6802      	ldr	r2, [r0, #0]
 8012c28:	b1a2      	cbz	r2, 8012c54 <rcutils_set_default_allocator+0x30>
 8012c2a:	6841      	ldr	r1, [r0, #4]
 8012c2c:	b1a1      	cbz	r1, 8012c58 <rcutils_set_default_allocator+0x34>
 8012c2e:	b410      	push	{r4}
 8012c30:	68c4      	ldr	r4, [r0, #12]
 8012c32:	b164      	cbz	r4, 8012c4e <rcutils_set_default_allocator+0x2a>
 8012c34:	6880      	ldr	r0, [r0, #8]
 8012c36:	b138      	cbz	r0, 8012c48 <rcutils_set_default_allocator+0x24>
 8012c38:	4b08      	ldr	r3, [pc, #32]	@ (8012c5c <rcutils_set_default_allocator+0x38>)
 8012c3a:	601a      	str	r2, [r3, #0]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8012c42:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8012c46:	2001      	movs	r0, #1
 8012c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c4c:	4770      	bx	lr
 8012c4e:	4620      	mov	r0, r4
 8012c50:	e7fa      	b.n	8012c48 <rcutils_set_default_allocator+0x24>
 8012c52:	4770      	bx	lr
 8012c54:	4610      	mov	r0, r2
 8012c56:	4770      	bx	lr
 8012c58:	4608      	mov	r0, r1
 8012c5a:	4770      	bx	lr
 8012c5c:	20002474 	.word	0x20002474

08012c60 <rcutils_get_default_allocator>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	4c05      	ldr	r4, [pc, #20]	@ (8012c78 <rcutils_get_default_allocator+0x18>)
 8012c64:	4686      	mov	lr, r0
 8012c66:	4684      	mov	ip, r0
 8012c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	f8cc 3000 	str.w	r3, [ip]
 8012c74:	4670      	mov	r0, lr
 8012c76:	bd10      	pop	{r4, pc}
 8012c78:	20002474 	.word	0x20002474

08012c7c <rcutils_allocator_is_valid>:
 8012c7c:	b158      	cbz	r0, 8012c96 <rcutils_allocator_is_valid+0x1a>
 8012c7e:	6803      	ldr	r3, [r0, #0]
 8012c80:	b143      	cbz	r3, 8012c94 <rcutils_allocator_is_valid+0x18>
 8012c82:	6843      	ldr	r3, [r0, #4]
 8012c84:	b133      	cbz	r3, 8012c94 <rcutils_allocator_is_valid+0x18>
 8012c86:	68c3      	ldr	r3, [r0, #12]
 8012c88:	b123      	cbz	r3, 8012c94 <rcutils_allocator_is_valid+0x18>
 8012c8a:	6880      	ldr	r0, [r0, #8]
 8012c8c:	3800      	subs	r0, #0
 8012c8e:	bf18      	it	ne
 8012c90:	2001      	movne	r0, #1
 8012c92:	4770      	bx	lr
 8012c94:	4618      	mov	r0, r3
 8012c96:	4770      	bx	lr

08012c98 <__atomic_load_8>:
 8012c98:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012c9c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012ca0:	4a15      	ldr	r2, [pc, #84]	@ (8012cf8 <__atomic_load_8+0x60>)
 8012ca2:	4b16      	ldr	r3, [pc, #88]	@ (8012cfc <__atomic_load_8+0x64>)
 8012ca4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012ca8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012cac:	fb02 f101 	mul.w	r1, r2, r1
 8012cb0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012cb4:	fba3 2301 	umull	r2, r3, r3, r1
 8012cb8:	091b      	lsrs	r3, r3, #4
 8012cba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012cbe:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012cc2:	b4d0      	push	{r4, r6, r7}
 8012cc4:	4c0e      	ldr	r4, [pc, #56]	@ (8012d00 <__atomic_load_8+0x68>)
 8012cc6:	1ac9      	subs	r1, r1, r3
 8012cc8:	1862      	adds	r2, r4, r1
 8012cca:	f04f 0c01 	mov.w	ip, #1
 8012cce:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012cd2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012cd6:	2e00      	cmp	r6, #0
 8012cd8:	d1f9      	bne.n	8012cce <__atomic_load_8+0x36>
 8012cda:	f3bf 8f5b 	dmb	ish
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d1f4      	bne.n	8012cce <__atomic_load_8+0x36>
 8012ce4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012ce8:	f3bf 8f5b 	dmb	ish
 8012cec:	5463      	strb	r3, [r4, r1]
 8012cee:	4630      	mov	r0, r6
 8012cf0:	4639      	mov	r1, r7
 8012cf2:	bcd0      	pop	{r4, r6, r7}
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	27d4eb2d 	.word	0x27d4eb2d
 8012cfc:	b21642c9 	.word	0xb21642c9
 8012d00:	20013768 	.word	0x20013768

08012d04 <__atomic_store_8>:
 8012d04:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012d08:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012d12:	4c14      	ldr	r4, [pc, #80]	@ (8012d64 <__atomic_store_8+0x60>)
 8012d14:	4d14      	ldr	r5, [pc, #80]	@ (8012d68 <__atomic_store_8+0x64>)
 8012d16:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012d1a:	fb04 f101 	mul.w	r1, r4, r1
 8012d1e:	4c13      	ldr	r4, [pc, #76]	@ (8012d6c <__atomic_store_8+0x68>)
 8012d20:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012d24:	fba4 4e01 	umull	r4, lr, r4, r1
 8012d28:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012d2c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012d30:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012d34:	eba1 0e0e 	sub.w	lr, r1, lr
 8012d38:	eb05 0c0e 	add.w	ip, r5, lr
 8012d3c:	f04f 0401 	mov.w	r4, #1
 8012d40:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012d44:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012d48:	2e00      	cmp	r6, #0
 8012d4a:	d1f9      	bne.n	8012d40 <__atomic_store_8+0x3c>
 8012d4c:	f3bf 8f5b 	dmb	ish
 8012d50:	b2c9      	uxtb	r1, r1
 8012d52:	2900      	cmp	r1, #0
 8012d54:	d1f4      	bne.n	8012d40 <__atomic_store_8+0x3c>
 8012d56:	e9c0 2300 	strd	r2, r3, [r0]
 8012d5a:	f3bf 8f5b 	dmb	ish
 8012d5e:	f805 100e 	strb.w	r1, [r5, lr]
 8012d62:	bd70      	pop	{r4, r5, r6, pc}
 8012d64:	27d4eb2d 	.word	0x27d4eb2d
 8012d68:	20013768 	.word	0x20013768
 8012d6c:	b21642c9 	.word	0xb21642c9

08012d70 <__atomic_exchange_8>:
 8012d70:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012d74:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012d78:	4916      	ldr	r1, [pc, #88]	@ (8012dd4 <__atomic_exchange_8+0x64>)
 8012d7a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012d7e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012d82:	fb01 fc0c 	mul.w	ip, r1, ip
 8012d86:	4914      	ldr	r1, [pc, #80]	@ (8012dd8 <__atomic_exchange_8+0x68>)
 8012d88:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	4605      	mov	r5, r0
 8012d90:	fba1 010c 	umull	r0, r1, r1, ip
 8012d94:	0909      	lsrs	r1, r1, #4
 8012d96:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012d9a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8012ddc <__atomic_exchange_8+0x6c>)
 8012da0:	ebac 0c01 	sub.w	ip, ip, r1
 8012da4:	eb06 010c 	add.w	r1, r6, ip
 8012da8:	f04f 0e01 	mov.w	lr, #1
 8012dac:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012db0:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d1f9      	bne.n	8012dac <__atomic_exchange_8+0x3c>
 8012db8:	f3bf 8f5b 	dmb	ish
 8012dbc:	b2e4      	uxtb	r4, r4
 8012dbe:	2c00      	cmp	r4, #0
 8012dc0:	d1f4      	bne.n	8012dac <__atomic_exchange_8+0x3c>
 8012dc2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012dc6:	e9c5 2300 	strd	r2, r3, [r5]
 8012dca:	f3bf 8f5b 	dmb	ish
 8012dce:	f806 400c 	strb.w	r4, [r6, ip]
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	27d4eb2d 	.word	0x27d4eb2d
 8012dd8:	b21642c9 	.word	0xb21642c9
 8012ddc:	20013768 	.word	0x20013768

08012de0 <rcutils_get_env>:
 8012de0:	b168      	cbz	r0, 8012dfe <rcutils_get_env+0x1e>
 8012de2:	b510      	push	{r4, lr}
 8012de4:	460c      	mov	r4, r1
 8012de6:	b129      	cbz	r1, 8012df4 <rcutils_get_env+0x14>
 8012de8:	f009 f9bc 	bl	801c164 <getenv>
 8012dec:	b120      	cbz	r0, 8012df8 <rcutils_get_env+0x18>
 8012dee:	6020      	str	r0, [r4, #0]
 8012df0:	2000      	movs	r0, #0
 8012df2:	bd10      	pop	{r4, pc}
 8012df4:	4803      	ldr	r0, [pc, #12]	@ (8012e04 <rcutils_get_env+0x24>)
 8012df6:	bd10      	pop	{r4, pc}
 8012df8:	4b03      	ldr	r3, [pc, #12]	@ (8012e08 <rcutils_get_env+0x28>)
 8012dfa:	6023      	str	r3, [r4, #0]
 8012dfc:	bd10      	pop	{r4, pc}
 8012dfe:	4803      	ldr	r0, [pc, #12]	@ (8012e0c <rcutils_get_env+0x2c>)
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	08023984 	.word	0x08023984
 8012e08:	08023d28 	.word	0x08023d28
 8012e0c:	08023968 	.word	0x08023968

08012e10 <rcutils_get_error_string>:
 8012e10:	4b06      	ldr	r3, [pc, #24]	@ (8012e2c <rcutils_get_error_string+0x1c>)
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	b13b      	cbz	r3, 8012e26 <rcutils_get_error_string+0x16>
 8012e16:	4b06      	ldr	r3, [pc, #24]	@ (8012e30 <rcutils_get_error_string+0x20>)
 8012e18:	781a      	ldrb	r2, [r3, #0]
 8012e1a:	b90a      	cbnz	r2, 8012e20 <rcutils_get_error_string+0x10>
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	701a      	strb	r2, [r3, #0]
 8012e20:	4b04      	ldr	r3, [pc, #16]	@ (8012e34 <rcutils_get_error_string+0x24>)
 8012e22:	7818      	ldrb	r0, [r3, #0]
 8012e24:	4770      	bx	lr
 8012e26:	4b04      	ldr	r3, [pc, #16]	@ (8012e38 <rcutils_get_error_string+0x28>)
 8012e28:	7818      	ldrb	r0, [r3, #0]
 8012e2a:	4770      	bx	lr
 8012e2c:	2001377f 	.word	0x2001377f
 8012e30:	20013791 	.word	0x20013791
 8012e34:	20013790 	.word	0x20013790
 8012e38:	080239a0 	.word	0x080239a0
 8012e3c:	00000000 	.word	0x00000000

08012e40 <rcutils_reset_error>:
 8012e40:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012e60 <rcutils_reset_error+0x20>
 8012e44:	4a08      	ldr	r2, [pc, #32]	@ (8012e68 <rcutils_reset_error+0x28>)
 8012e46:	4809      	ldr	r0, [pc, #36]	@ (8012e6c <rcutils_reset_error+0x2c>)
 8012e48:	4909      	ldr	r1, [pc, #36]	@ (8012e70 <rcutils_reset_error+0x30>)
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	8013      	strh	r3, [r2, #0]
 8012e4e:	ed82 7b02 	vstr	d7, [r2, #8]
 8012e52:	4a08      	ldr	r2, [pc, #32]	@ (8012e74 <rcutils_reset_error+0x34>)
 8012e54:	7003      	strb	r3, [r0, #0]
 8012e56:	700b      	strb	r3, [r1, #0]
 8012e58:	7013      	strb	r3, [r2, #0]
 8012e5a:	4770      	bx	lr
 8012e5c:	f3af 8000 	nop.w
	...
 8012e68:	20013780 	.word	0x20013780
 8012e6c:	20013791 	.word	0x20013791
 8012e70:	20013790 	.word	0x20013790
 8012e74:	2001377f 	.word	0x2001377f

08012e78 <rcutils_is_directory>:
 8012e78:	2000      	movs	r0, #0
 8012e7a:	4770      	bx	lr

08012e7c <rcutils_join_path>:
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012e82:	2000      	movs	r0, #0
 8012e84:	b002      	add	sp, #8
 8012e86:	4770      	bx	lr

08012e88 <rcutils_to_native_path>:
 8012e88:	b084      	sub	sp, #16
 8012e8a:	a801      	add	r0, sp, #4
 8012e8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012e90:	b004      	add	sp, #16
 8012e92:	2000      	movs	r0, #0
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop

08012e98 <rcutils_format_string_limit>:
 8012e98:	b40f      	push	{r0, r1, r2, r3}
 8012e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e9c:	b083      	sub	sp, #12
 8012e9e:	ac08      	add	r4, sp, #32
 8012ea0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012ea6:	b34e      	cbz	r6, 8012efc <rcutils_format_string_limit+0x64>
 8012ea8:	a808      	add	r0, sp, #32
 8012eaa:	f7ff fee7 	bl	8012c7c <rcutils_allocator_is_valid>
 8012eae:	b328      	cbz	r0, 8012efc <rcutils_format_string_limit+0x64>
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	4608      	mov	r0, r1
 8012eb8:	e9cd 3300 	strd	r3, r3, [sp]
 8012ebc:	f000 f8f4 	bl	80130a8 <rcutils_vsnprintf>
 8012ec0:	1c43      	adds	r3, r0, #1
 8012ec2:	4605      	mov	r5, r0
 8012ec4:	d01a      	beq.n	8012efc <rcutils_format_string_limit+0x64>
 8012ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ec8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012eca:	1c47      	adds	r7, r0, #1
 8012ecc:	429f      	cmp	r7, r3
 8012ece:	bf84      	itt	hi
 8012ed0:	461f      	movhi	r7, r3
 8012ed2:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	9b08      	ldr	r3, [sp, #32]
 8012eda:	4798      	blx	r3
 8012edc:	4604      	mov	r4, r0
 8012ede:	b168      	cbz	r0, 8012efc <rcutils_format_string_limit+0x64>
 8012ee0:	9b01      	ldr	r3, [sp, #4]
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	4639      	mov	r1, r7
 8012ee6:	f000 f8df 	bl	80130a8 <rcutils_vsnprintf>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	db02      	blt.n	8012ef4 <rcutils_format_string_limit+0x5c>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	5563      	strb	r3, [r4, r5]
 8012ef2:	e004      	b.n	8012efe <rcutils_format_string_limit+0x66>
 8012ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ef6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012ef8:	4620      	mov	r0, r4
 8012efa:	4798      	blx	r3
 8012efc:	2400      	movs	r4, #0
 8012efe:	4620      	mov	r0, r4
 8012f00:	b003      	add	sp, #12
 8012f02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f06:	b004      	add	sp, #16
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop

08012f0c <rcutils_repl_str>:
 8012f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f10:	ed2d 8b02 	vpush	{d8}
 8012f14:	b087      	sub	sp, #28
 8012f16:	4680      	mov	r8, r0
 8012f18:	4608      	mov	r0, r1
 8012f1a:	f8cd 8004 	str.w	r8, [sp, #4]
 8012f1e:	ee08 2a10 	vmov	s16, r2
 8012f22:	468a      	mov	sl, r1
 8012f24:	4699      	mov	r9, r3
 8012f26:	f7ed f9b3 	bl	8000290 <strlen>
 8012f2a:	2600      	movs	r6, #0
 8012f2c:	4647      	mov	r7, r8
 8012f2e:	9002      	str	r0, [sp, #8]
 8012f30:	46b3      	mov	fp, r6
 8012f32:	2510      	movs	r5, #16
 8012f34:	46b0      	mov	r8, r6
 8012f36:	e01d      	b.n	8012f74 <rcutils_repl_str+0x68>
 8012f38:	f10b 0b01 	add.w	fp, fp, #1
 8012f3c:	455e      	cmp	r6, fp
 8012f3e:	d211      	bcs.n	8012f64 <rcutils_repl_str+0x58>
 8012f40:	442e      	add	r6, r5
 8012f42:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012f46:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012f4a:	00b1      	lsls	r1, r6, #2
 8012f4c:	4798      	blx	r3
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	f000 8088 	beq.w	8013064 <rcutils_repl_str+0x158>
 8012f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f58:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012f5c:	4680      	mov	r8, r0
 8012f5e:	bf28      	it	cs
 8012f60:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012f64:	9a01      	ldr	r2, [sp, #4]
 8012f66:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8012f6a:	1aa2      	subs	r2, r4, r2
 8012f6c:	f843 2c04 	str.w	r2, [r3, #-4]
 8012f70:	9b02      	ldr	r3, [sp, #8]
 8012f72:	18e7      	adds	r7, r4, r3
 8012f74:	4651      	mov	r1, sl
 8012f76:	4638      	mov	r0, r7
 8012f78:	f00a fad2 	bl	801d520 <strstr>
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	4640      	mov	r0, r8
 8012f80:	2c00      	cmp	r4, #0
 8012f82:	d1d9      	bne.n	8012f38 <rcutils_repl_str+0x2c>
 8012f84:	46b8      	mov	r8, r7
 8012f86:	4607      	mov	r7, r0
 8012f88:	4640      	mov	r0, r8
 8012f8a:	f7ed f981 	bl	8000290 <strlen>
 8012f8e:	9b01      	ldr	r3, [sp, #4]
 8012f90:	eba8 0303 	sub.w	r3, r8, r3
 8012f94:	181c      	adds	r4, r3, r0
 8012f96:	9404      	str	r4, [sp, #16]
 8012f98:	f1bb 0f00 	cmp.w	fp, #0
 8012f9c:	d04a      	beq.n	8013034 <rcutils_repl_str+0x128>
 8012f9e:	ee18 0a10 	vmov	r0, s16
 8012fa2:	f7ed f975 	bl	8000290 <strlen>
 8012fa6:	9b02      	ldr	r3, [sp, #8]
 8012fa8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012fac:	1ac3      	subs	r3, r0, r3
 8012fae:	fb0b 4303 	mla	r3, fp, r3, r4
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	9305      	str	r3, [sp, #20]
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	f8d9 3000 	ldr.w	r3, [r9]
 8012fbc:	1c50      	adds	r0, r2, #1
 8012fbe:	4798      	blx	r3
 8012fc0:	9003      	str	r0, [sp, #12]
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	d04f      	beq.n	8013066 <rcutils_repl_str+0x15a>
 8012fc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012fca:	683a      	ldr	r2, [r7, #0]
 8012fcc:	4641      	mov	r1, r8
 8012fce:	f00a fb4c 	bl	801d66a <memcpy>
 8012fd2:	683d      	ldr	r5, [r7, #0]
 8012fd4:	9b03      	ldr	r3, [sp, #12]
 8012fd6:	9701      	str	r7, [sp, #4]
 8012fd8:	46ba      	mov	sl, r7
 8012fda:	441d      	add	r5, r3
 8012fdc:	9f02      	ldr	r7, [sp, #8]
 8012fde:	f8cd 9008 	str.w	r9, [sp, #8]
 8012fe2:	2401      	movs	r4, #1
 8012fe4:	46d1      	mov	r9, sl
 8012fe6:	ee18 aa10 	vmov	sl, s16
 8012fea:	e00a      	b.n	8013002 <rcutils_repl_str+0xf6>
 8012fec:	f8d9 5000 	ldr.w	r5, [r9]
 8012ff0:	1aaa      	subs	r2, r5, r2
 8012ff2:	1885      	adds	r5, r0, r2
 8012ff4:	f00a fb39 	bl	801d66a <memcpy>
 8012ff8:	45a3      	cmp	fp, r4
 8012ffa:	f104 0201 	add.w	r2, r4, #1
 8012ffe:	d935      	bls.n	801306c <rcutils_repl_str+0x160>
 8013000:	4614      	mov	r4, r2
 8013002:	4632      	mov	r2, r6
 8013004:	4651      	mov	r1, sl
 8013006:	4628      	mov	r0, r5
 8013008:	f00a fb2f 	bl	801d66a <memcpy>
 801300c:	f859 2b04 	ldr.w	r2, [r9], #4
 8013010:	45a3      	cmp	fp, r4
 8013012:	443a      	add	r2, r7
 8013014:	eb05 0006 	add.w	r0, r5, r6
 8013018:	eb08 0102 	add.w	r1, r8, r2
 801301c:	d1e6      	bne.n	8012fec <rcutils_repl_str+0xe0>
 801301e:	9b04      	ldr	r3, [sp, #16]
 8013020:	1a9a      	subs	r2, r3, r2
 8013022:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013026:	f00a fb20 	bl	801d66a <memcpy>
 801302a:	9a03      	ldr	r2, [sp, #12]
 801302c:	9905      	ldr	r1, [sp, #20]
 801302e:	2300      	movs	r3, #0
 8013030:	5453      	strb	r3, [r2, r1]
 8013032:	e00b      	b.n	801304c <rcutils_repl_str+0x140>
 8013034:	4620      	mov	r0, r4
 8013036:	f8d9 3000 	ldr.w	r3, [r9]
 801303a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801303e:	3001      	adds	r0, #1
 8013040:	4798      	blx	r3
 8013042:	9003      	str	r0, [sp, #12]
 8013044:	b110      	cbz	r0, 801304c <rcutils_repl_str+0x140>
 8013046:	9901      	ldr	r1, [sp, #4]
 8013048:	f00a fb07 	bl	801d65a <strcpy>
 801304c:	4638      	mov	r0, r7
 801304e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013052:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013056:	4798      	blx	r3
 8013058:	9803      	ldr	r0, [sp, #12]
 801305a:	b007      	add	sp, #28
 801305c:	ecbd 8b02 	vpop	{d8}
 8013060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013064:	4647      	mov	r7, r8
 8013066:	2300      	movs	r3, #0
 8013068:	9303      	str	r3, [sp, #12]
 801306a:	e7ef      	b.n	801304c <rcutils_repl_str+0x140>
 801306c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8013070:	e7db      	b.n	801302a <rcutils_repl_str+0x11e>
 8013072:	bf00      	nop

08013074 <rcutils_snprintf>:
 8013074:	b40c      	push	{r2, r3}
 8013076:	b530      	push	{r4, r5, lr}
 8013078:	b083      	sub	sp, #12
 801307a:	ab06      	add	r3, sp, #24
 801307c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	b152      	cbz	r2, 801309a <rcutils_snprintf+0x26>
 8013084:	b138      	cbz	r0, 8013096 <rcutils_snprintf+0x22>
 8013086:	b141      	cbz	r1, 801309a <rcutils_snprintf+0x26>
 8013088:	f00a f944 	bl	801d314 <vsniprintf>
 801308c:	b003      	add	sp, #12
 801308e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013092:	b002      	add	sp, #8
 8013094:	4770      	bx	lr
 8013096:	2900      	cmp	r1, #0
 8013098:	d0f6      	beq.n	8013088 <rcutils_snprintf+0x14>
 801309a:	f00a fab1 	bl	801d600 <__errno>
 801309e:	2316      	movs	r3, #22
 80130a0:	6003      	str	r3, [r0, #0]
 80130a2:	f04f 30ff 	mov.w	r0, #4294967295
 80130a6:	e7f1      	b.n	801308c <rcutils_snprintf+0x18>

080130a8 <rcutils_vsnprintf>:
 80130a8:	b570      	push	{r4, r5, r6, lr}
 80130aa:	b13a      	cbz	r2, 80130bc <rcutils_vsnprintf+0x14>
 80130ac:	b120      	cbz	r0, 80130b8 <rcutils_vsnprintf+0x10>
 80130ae:	b129      	cbz	r1, 80130bc <rcutils_vsnprintf+0x14>
 80130b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130b4:	f00a b92e 	b.w	801d314 <vsniprintf>
 80130b8:	2900      	cmp	r1, #0
 80130ba:	d0f9      	beq.n	80130b0 <rcutils_vsnprintf+0x8>
 80130bc:	f00a faa0 	bl	801d600 <__errno>
 80130c0:	2316      	movs	r3, #22
 80130c2:	6003      	str	r3, [r0, #0]
 80130c4:	f04f 30ff 	mov.w	r0, #4294967295
 80130c8:	bd70      	pop	{r4, r5, r6, pc}
 80130ca:	bf00      	nop

080130cc <rcutils_strdup>:
 80130cc:	b084      	sub	sp, #16
 80130ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130d0:	ac07      	add	r4, sp, #28
 80130d2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80130d6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80130d8:	4605      	mov	r5, r0
 80130da:	b1d0      	cbz	r0, 8013112 <rcutils_strdup+0x46>
 80130dc:	460c      	mov	r4, r1
 80130de:	f04f 32ff 	mov.w	r2, #4294967295
 80130e2:	2100      	movs	r1, #0
 80130e4:	f7ed f884 	bl	80001f0 <memchr>
 80130e8:	b180      	cbz	r0, 801310c <rcutils_strdup+0x40>
 80130ea:	1b46      	subs	r6, r0, r5
 80130ec:	1c70      	adds	r0, r6, #1
 80130ee:	4639      	mov	r1, r7
 80130f0:	47a0      	blx	r4
 80130f2:	4604      	mov	r4, r0
 80130f4:	b128      	cbz	r0, 8013102 <rcutils_strdup+0x36>
 80130f6:	4632      	mov	r2, r6
 80130f8:	4629      	mov	r1, r5
 80130fa:	f00a fab6 	bl	801d66a <memcpy>
 80130fe:	2300      	movs	r3, #0
 8013100:	55a3      	strb	r3, [r4, r6]
 8013102:	4620      	mov	r0, r4
 8013104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013108:	b004      	add	sp, #16
 801310a:	4770      	bx	lr
 801310c:	f04f 36ff 	mov.w	r6, #4294967295
 8013110:	e7ed      	b.n	80130ee <rcutils_strdup+0x22>
 8013112:	4604      	mov	r4, r0
 8013114:	e7f5      	b.n	8013102 <rcutils_strdup+0x36>
 8013116:	bf00      	nop

08013118 <rcutils_strndup>:
 8013118:	b082      	sub	sp, #8
 801311a:	b570      	push	{r4, r5, r6, lr}
 801311c:	ac04      	add	r4, sp, #16
 801311e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013122:	4606      	mov	r6, r0
 8013124:	b1b8      	cbz	r0, 8013156 <rcutils_strndup+0x3e>
 8013126:	460c      	mov	r4, r1
 8013128:	460a      	mov	r2, r1
 801312a:	2100      	movs	r1, #0
 801312c:	f7ed f860 	bl	80001f0 <memchr>
 8013130:	b100      	cbz	r0, 8013134 <rcutils_strndup+0x1c>
 8013132:	1b84      	subs	r4, r0, r6
 8013134:	9b04      	ldr	r3, [sp, #16]
 8013136:	9908      	ldr	r1, [sp, #32]
 8013138:	1c60      	adds	r0, r4, #1
 801313a:	4798      	blx	r3
 801313c:	4605      	mov	r5, r0
 801313e:	b128      	cbz	r0, 801314c <rcutils_strndup+0x34>
 8013140:	4622      	mov	r2, r4
 8013142:	4631      	mov	r1, r6
 8013144:	f00a fa91 	bl	801d66a <memcpy>
 8013148:	2300      	movs	r3, #0
 801314a:	552b      	strb	r3, [r5, r4]
 801314c:	4628      	mov	r0, r5
 801314e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013152:	b002      	add	sp, #8
 8013154:	4770      	bx	lr
 8013156:	4605      	mov	r5, r0
 8013158:	e7f8      	b.n	801314c <rcutils_strndup+0x34>
 801315a:	bf00      	nop

0801315c <rcutils_get_zero_initialized_string_map>:
 801315c:	4b01      	ldr	r3, [pc, #4]	@ (8013164 <rcutils_get_zero_initialized_string_map+0x8>)
 801315e:	2000      	movs	r0, #0
 8013160:	6018      	str	r0, [r3, #0]
 8013162:	4770      	bx	lr
 8013164:	20013794 	.word	0x20013794

08013168 <rcutils_string_map_reserve>:
 8013168:	2800      	cmp	r0, #0
 801316a:	d03e      	beq.n	80131ea <rcutils_string_map_reserve+0x82>
 801316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316e:	6805      	ldr	r5, [r0, #0]
 8013170:	460c      	mov	r4, r1
 8013172:	4606      	mov	r6, r0
 8013174:	b12d      	cbz	r5, 8013182 <rcutils_string_map_reserve+0x1a>
 8013176:	68ab      	ldr	r3, [r5, #8]
 8013178:	42a3      	cmp	r3, r4
 801317a:	d904      	bls.n	8013186 <rcutils_string_map_reserve+0x1e>
 801317c:	461c      	mov	r4, r3
 801317e:	2d00      	cmp	r5, #0
 8013180:	d1f9      	bne.n	8013176 <rcutils_string_map_reserve+0xe>
 8013182:	201f      	movs	r0, #31
 8013184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013186:	686b      	ldr	r3, [r5, #4]
 8013188:	42a3      	cmp	r3, r4
 801318a:	d02a      	beq.n	80131e2 <rcutils_string_map_reserve+0x7a>
 801318c:	69e9      	ldr	r1, [r5, #28]
 801318e:	b304      	cbz	r4, 80131d2 <rcutils_string_map_reserve+0x6a>
 8013190:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8013194:	d227      	bcs.n	80131e6 <rcutils_string_map_reserve+0x7e>
 8013196:	00e7      	lsls	r7, r4, #3
 8013198:	460a      	mov	r2, r1
 801319a:	696b      	ldr	r3, [r5, #20]
 801319c:	6828      	ldr	r0, [r5, #0]
 801319e:	4639      	mov	r1, r7
 80131a0:	4798      	blx	r3
 80131a2:	b300      	cbz	r0, 80131e6 <rcutils_string_map_reserve+0x7e>
 80131a4:	6835      	ldr	r5, [r6, #0]
 80131a6:	686a      	ldr	r2, [r5, #4]
 80131a8:	6028      	str	r0, [r5, #0]
 80131aa:	42a2      	cmp	r2, r4
 80131ac:	d216      	bcs.n	80131dc <rcutils_string_map_reserve+0x74>
 80131ae:	43d1      	mvns	r1, r2
 80131b0:	4421      	add	r1, r4
 80131b2:	2909      	cmp	r1, #9
 80131b4:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 80131b8:	d919      	bls.n	80131ee <rcutils_string_map_reserve+0x86>
 80131ba:	0759      	lsls	r1, r3, #29
 80131bc:	d117      	bne.n	80131ee <rcutils_string_map_reserve+0x86>
 80131be:	1aa1      	subs	r1, r4, r2
 80131c0:	2600      	movs	r6, #0
 80131c2:	2200      	movs	r2, #0
 80131c4:	2700      	movs	r7, #0
 80131c6:	3201      	adds	r2, #1
 80131c8:	4291      	cmp	r1, r2
 80131ca:	e8e3 6702 	strd	r6, r7, [r3], #8
 80131ce:	d8fa      	bhi.n	80131c6 <rcutils_string_map_reserve+0x5e>
 80131d0:	e004      	b.n	80131dc <rcutils_string_map_reserve+0x74>
 80131d2:	692b      	ldr	r3, [r5, #16]
 80131d4:	6828      	ldr	r0, [r5, #0]
 80131d6:	4798      	blx	r3
 80131d8:	6835      	ldr	r5, [r6, #0]
 80131da:	602c      	str	r4, [r5, #0]
 80131dc:	606c      	str	r4, [r5, #4]
 80131de:	2000      	movs	r0, #0
 80131e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e2:	2000      	movs	r0, #0
 80131e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e6:	200a      	movs	r0, #10
 80131e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131ea:	200b      	movs	r0, #11
 80131ec:	4770      	bx	lr
 80131ee:	4438      	add	r0, r7
 80131f0:	2200      	movs	r2, #0
 80131f2:	e9c3 2200 	strd	r2, r2, [r3]
 80131f6:	3308      	adds	r3, #8
 80131f8:	4283      	cmp	r3, r0
 80131fa:	d1fa      	bne.n	80131f2 <rcutils_string_map_reserve+0x8a>
 80131fc:	e7ee      	b.n	80131dc <rcutils_string_map_reserve+0x74>
 80131fe:	bf00      	nop

08013200 <rcutils_string_map_init>:
 8013200:	b082      	sub	sp, #8
 8013202:	b570      	push	{r4, r5, r6, lr}
 8013204:	ac04      	add	r4, sp, #16
 8013206:	e884 000c 	stmia.w	r4, {r2, r3}
 801320a:	b378      	cbz	r0, 801326c <rcutils_string_map_init+0x6c>
 801320c:	6806      	ldr	r6, [r0, #0]
 801320e:	4604      	mov	r4, r0
 8013210:	b12e      	cbz	r6, 801321e <rcutils_string_map_init+0x1e>
 8013212:	251e      	movs	r5, #30
 8013214:	4628      	mov	r0, r5
 8013216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801321a:	b002      	add	sp, #8
 801321c:	4770      	bx	lr
 801321e:	a804      	add	r0, sp, #16
 8013220:	460d      	mov	r5, r1
 8013222:	f7ff fd2b 	bl	8012c7c <rcutils_allocator_is_valid>
 8013226:	b308      	cbz	r0, 801326c <rcutils_string_map_init+0x6c>
 8013228:	9b04      	ldr	r3, [sp, #16]
 801322a:	9908      	ldr	r1, [sp, #32]
 801322c:	2020      	movs	r0, #32
 801322e:	4798      	blx	r3
 8013230:	6020      	str	r0, [r4, #0]
 8013232:	b308      	cbz	r0, 8013278 <rcutils_string_map_init+0x78>
 8013234:	f10d 0e10 	add.w	lr, sp, #16
 8013238:	e9c0 6600 	strd	r6, r6, [r0]
 801323c:	6086      	str	r6, [r0, #8]
 801323e:	f100 0c0c 	add.w	ip, r0, #12
 8013242:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801324a:	f8de 3000 	ldr.w	r3, [lr]
 801324e:	f8cc 3000 	str.w	r3, [ip]
 8013252:	4629      	mov	r1, r5
 8013254:	4620      	mov	r0, r4
 8013256:	f7ff ff87 	bl	8013168 <rcutils_string_map_reserve>
 801325a:	4605      	mov	r5, r0
 801325c:	2800      	cmp	r0, #0
 801325e:	d0d9      	beq.n	8013214 <rcutils_string_map_init+0x14>
 8013260:	9b05      	ldr	r3, [sp, #20]
 8013262:	9908      	ldr	r1, [sp, #32]
 8013264:	6820      	ldr	r0, [r4, #0]
 8013266:	4798      	blx	r3
 8013268:	6026      	str	r6, [r4, #0]
 801326a:	e7d3      	b.n	8013214 <rcutils_string_map_init+0x14>
 801326c:	250b      	movs	r5, #11
 801326e:	4628      	mov	r0, r5
 8013270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013274:	b002      	add	sp, #8
 8013276:	4770      	bx	lr
 8013278:	250a      	movs	r5, #10
 801327a:	e7cb      	b.n	8013214 <rcutils_string_map_init+0x14>

0801327c <rcutils_string_map_fini>:
 801327c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013280:	b083      	sub	sp, #12
 8013282:	2800      	cmp	r0, #0
 8013284:	d03e      	beq.n	8013304 <rcutils_string_map_fini+0x88>
 8013286:	6804      	ldr	r4, [r0, #0]
 8013288:	4606      	mov	r6, r0
 801328a:	2c00      	cmp	r4, #0
 801328c:	d036      	beq.n	80132fc <rcutils_string_map_fini+0x80>
 801328e:	6863      	ldr	r3, [r4, #4]
 8013290:	b34b      	cbz	r3, 80132e6 <rcutils_string_map_fini+0x6a>
 8013292:	2500      	movs	r5, #0
 8013294:	6822      	ldr	r2, [r4, #0]
 8013296:	462f      	mov	r7, r5
 8013298:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801329c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80132a0:	b1f0      	cbz	r0, 80132e0 <rcutils_string_map_fini+0x64>
 80132a2:	69e1      	ldr	r1, [r4, #28]
 80132a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80132a8:	9101      	str	r1, [sp, #4]
 80132aa:	47c8      	blx	r9
 80132ac:	6823      	ldr	r3, [r4, #0]
 80132ae:	9901      	ldr	r1, [sp, #4]
 80132b0:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 80132b4:	eb03 0208 	add.w	r2, r3, r8
 80132b8:	3501      	adds	r5, #1
 80132ba:	6850      	ldr	r0, [r2, #4]
 80132bc:	47c8      	blx	r9
 80132be:	6822      	ldr	r2, [r4, #0]
 80132c0:	68a3      	ldr	r3, [r4, #8]
 80132c2:	4442      	add	r2, r8
 80132c4:	3b01      	subs	r3, #1
 80132c6:	6057      	str	r7, [r2, #4]
 80132c8:	60a3      	str	r3, [r4, #8]
 80132ca:	6834      	ldr	r4, [r6, #0]
 80132cc:	6863      	ldr	r3, [r4, #4]
 80132ce:	429d      	cmp	r5, r3
 80132d0:	d209      	bcs.n	80132e6 <rcutils_string_map_fini+0x6a>
 80132d2:	6822      	ldr	r2, [r4, #0]
 80132d4:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 80132d8:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80132dc:	2800      	cmp	r0, #0
 80132de:	d1e0      	bne.n	80132a2 <rcutils_string_map_fini+0x26>
 80132e0:	3501      	adds	r5, #1
 80132e2:	429d      	cmp	r5, r3
 80132e4:	d3d8      	bcc.n	8013298 <rcutils_string_map_fini+0x1c>
 80132e6:	2100      	movs	r1, #0
 80132e8:	4630      	mov	r0, r6
 80132ea:	f7ff ff3d 	bl	8013168 <rcutils_string_map_reserve>
 80132ee:	4604      	mov	r4, r0
 80132f0:	b920      	cbnz	r0, 80132fc <rcutils_string_map_fini+0x80>
 80132f2:	6830      	ldr	r0, [r6, #0]
 80132f4:	6903      	ldr	r3, [r0, #16]
 80132f6:	69c1      	ldr	r1, [r0, #28]
 80132f8:	4798      	blx	r3
 80132fa:	6034      	str	r4, [r6, #0]
 80132fc:	4620      	mov	r0, r4
 80132fe:	b003      	add	sp, #12
 8013300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013304:	240b      	movs	r4, #11
 8013306:	4620      	mov	r0, r4
 8013308:	b003      	add	sp, #12
 801330a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801330e:	bf00      	nop

08013310 <rcutils_string_map_getn>:
 8013310:	b338      	cbz	r0, 8013362 <rcutils_string_map_getn+0x52>
 8013312:	6800      	ldr	r0, [r0, #0]
 8013314:	b328      	cbz	r0, 8013362 <rcutils_string_map_getn+0x52>
 8013316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801331a:	460f      	mov	r7, r1
 801331c:	b1d1      	cbz	r1, 8013354 <rcutils_string_map_getn+0x44>
 801331e:	e9d0 6900 	ldrd	r6, r9, [r0]
 8013322:	f1b9 0f00 	cmp.w	r9, #0
 8013326:	d015      	beq.n	8013354 <rcutils_string_map_getn+0x44>
 8013328:	4690      	mov	r8, r2
 801332a:	2400      	movs	r4, #0
 801332c:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 8013330:	eb06 0ac4 	add.w	sl, r6, r4, lsl #3
 8013334:	4628      	mov	r0, r5
 8013336:	3401      	adds	r4, #1
 8013338:	b155      	cbz	r5, 8013350 <rcutils_string_map_getn+0x40>
 801333a:	f7ec ffa9 	bl	8000290 <strlen>
 801333e:	4540      	cmp	r0, r8
 8013340:	4602      	mov	r2, r0
 8013342:	4629      	mov	r1, r5
 8013344:	bf38      	it	cc
 8013346:	4642      	movcc	r2, r8
 8013348:	4638      	mov	r0, r7
 801334a:	f00a f8c4 	bl	801d4d6 <strncmp>
 801334e:	b120      	cbz	r0, 801335a <rcutils_string_map_getn+0x4a>
 8013350:	45a1      	cmp	r9, r4
 8013352:	d1eb      	bne.n	801332c <rcutils_string_map_getn+0x1c>
 8013354:	2000      	movs	r0, #0
 8013356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801335a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013362:	4770      	bx	lr

08013364 <rcutils_system_time_now>:
 8013364:	b318      	cbz	r0, 80133ae <rcutils_system_time_now+0x4a>
 8013366:	b570      	push	{r4, r5, r6, lr}
 8013368:	b084      	sub	sp, #16
 801336a:	4604      	mov	r4, r0
 801336c:	4669      	mov	r1, sp
 801336e:	2001      	movs	r0, #1
 8013370:	f7f2 ff7a 	bl	8006268 <clock_gettime>
 8013374:	2800      	cmp	r0, #0
 8013376:	db17      	blt.n	80133a8 <rcutils_system_time_now+0x44>
 8013378:	e9dd 3600 	ldrd	r3, r6, [sp]
 801337c:	2e00      	cmp	r6, #0
 801337e:	db13      	blt.n	80133a8 <rcutils_system_time_now+0x44>
 8013380:	9902      	ldr	r1, [sp, #8]
 8013382:	2900      	cmp	r1, #0
 8013384:	db0d      	blt.n	80133a2 <rcutils_system_time_now+0x3e>
 8013386:	4d0b      	ldr	r5, [pc, #44]	@ (80133b4 <rcutils_system_time_now+0x50>)
 8013388:	fba3 3205 	umull	r3, r2, r3, r5
 801338c:	185b      	adds	r3, r3, r1
 801338e:	fb05 2206 	mla	r2, r5, r6, r2
 8013392:	f04f 0000 	mov.w	r0, #0
 8013396:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801339a:	e9c4 3200 	strd	r3, r2, [r4]
 801339e:	b004      	add	sp, #16
 80133a0:	bd70      	pop	{r4, r5, r6, pc}
 80133a2:	ea53 0206 	orrs.w	r2, r3, r6
 80133a6:	d1ee      	bne.n	8013386 <rcutils_system_time_now+0x22>
 80133a8:	2002      	movs	r0, #2
 80133aa:	b004      	add	sp, #16
 80133ac:	bd70      	pop	{r4, r5, r6, pc}
 80133ae:	200b      	movs	r0, #11
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop
 80133b4:	3b9aca00 	.word	0x3b9aca00

080133b8 <rcutils_steady_time_now>:
 80133b8:	b318      	cbz	r0, 8013402 <rcutils_steady_time_now+0x4a>
 80133ba:	b570      	push	{r4, r5, r6, lr}
 80133bc:	b084      	sub	sp, #16
 80133be:	4604      	mov	r4, r0
 80133c0:	4669      	mov	r1, sp
 80133c2:	2000      	movs	r0, #0
 80133c4:	f7f2 ff50 	bl	8006268 <clock_gettime>
 80133c8:	2800      	cmp	r0, #0
 80133ca:	db17      	blt.n	80133fc <rcutils_steady_time_now+0x44>
 80133cc:	e9dd 3600 	ldrd	r3, r6, [sp]
 80133d0:	2e00      	cmp	r6, #0
 80133d2:	db13      	blt.n	80133fc <rcutils_steady_time_now+0x44>
 80133d4:	9902      	ldr	r1, [sp, #8]
 80133d6:	2900      	cmp	r1, #0
 80133d8:	db0d      	blt.n	80133f6 <rcutils_steady_time_now+0x3e>
 80133da:	4d0b      	ldr	r5, [pc, #44]	@ (8013408 <rcutils_steady_time_now+0x50>)
 80133dc:	fba3 3205 	umull	r3, r2, r3, r5
 80133e0:	185b      	adds	r3, r3, r1
 80133e2:	fb05 2206 	mla	r2, r5, r6, r2
 80133e6:	f04f 0000 	mov.w	r0, #0
 80133ea:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80133ee:	e9c4 3200 	strd	r3, r2, [r4]
 80133f2:	b004      	add	sp, #16
 80133f4:	bd70      	pop	{r4, r5, r6, pc}
 80133f6:	ea53 0206 	orrs.w	r2, r3, r6
 80133fa:	d1ee      	bne.n	80133da <rcutils_steady_time_now+0x22>
 80133fc:	2002      	movs	r0, #2
 80133fe:	b004      	add	sp, #16
 8013400:	bd70      	pop	{r4, r5, r6, pc}
 8013402:	200b      	movs	r0, #11
 8013404:	4770      	bx	lr
 8013406:	bf00      	nop
 8013408:	3b9aca00 	.word	0x3b9aca00

0801340c <rmw_get_zero_initialized_context>:
 801340c:	b510      	push	{r4, lr}
 801340e:	4604      	mov	r4, r0
 8013410:	3010      	adds	r0, #16
 8013412:	f000 f80b 	bl	801342c <rmw_get_zero_initialized_init_options>
 8013416:	2300      	movs	r3, #0
 8013418:	2000      	movs	r0, #0
 801341a:	2100      	movs	r1, #0
 801341c:	e9c4 0100 	strd	r0, r1, [r4]
 8013420:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
 8013424:	60a3      	str	r3, [r4, #8]
 8013426:	4620      	mov	r0, r4
 8013428:	bd10      	pop	{r4, pc}
 801342a:	bf00      	nop

0801342c <rmw_get_zero_initialized_init_options>:
 801342c:	b510      	push	{r4, lr}
 801342e:	2258      	movs	r2, #88	@ 0x58
 8013430:	4604      	mov	r4, r0
 8013432:	2100      	movs	r1, #0
 8013434:	f00a f83a 	bl	801d4ac <memset>
 8013438:	f104 0010 	add.w	r0, r4, #16
 801343c:	f001 fe04 	bl	8015048 <rmw_get_default_security_options>
 8013440:	f104 001c 	add.w	r0, r4, #28
 8013444:	f007 fd2a 	bl	801ae9c <rmw_get_zero_initialized_discovery_options>
 8013448:	f04f 33ff 	mov.w	r3, #4294967295
 801344c:	60e3      	str	r3, [r4, #12]
 801344e:	4620      	mov	r0, r4
 8013450:	bd10      	pop	{r4, pc}
 8013452:	bf00      	nop

08013454 <rmw_uros_set_custom_transport>:
 8013454:	b470      	push	{r4, r5, r6}
 8013456:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801345a:	b162      	cbz	r2, 8013476 <rmw_uros_set_custom_transport+0x22>
 801345c:	b15b      	cbz	r3, 8013476 <rmw_uros_set_custom_transport+0x22>
 801345e:	b155      	cbz	r5, 8013476 <rmw_uros_set_custom_transport+0x22>
 8013460:	b14e      	cbz	r6, 8013476 <rmw_uros_set_custom_transport+0x22>
 8013462:	4c06      	ldr	r4, [pc, #24]	@ (801347c <rmw_uros_set_custom_transport+0x28>)
 8013464:	7020      	strb	r0, [r4, #0]
 8013466:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801346a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801346e:	6166      	str	r6, [r4, #20]
 8013470:	2000      	movs	r0, #0
 8013472:	bc70      	pop	{r4, r5, r6}
 8013474:	4770      	bx	lr
 8013476:	200b      	movs	r0, #11
 8013478:	bc70      	pop	{r4, r5, r6}
 801347a:	4770      	bx	lr
 801347c:	20013798 	.word	0x20013798

08013480 <rmw_destroy_client>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	b128      	cbz	r0, 8013490 <rmw_destroy_client+0x10>
 8013484:	4604      	mov	r4, r0
 8013486:	6800      	ldr	r0, [r0, #0]
 8013488:	460d      	mov	r5, r1
 801348a:	f001 fdcb 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 801348e:	b910      	cbnz	r0, 8013496 <rmw_destroy_client+0x16>
 8013490:	2401      	movs	r4, #1
 8013492:	4620      	mov	r0, r4
 8013494:	bd70      	pop	{r4, r5, r6, pc}
 8013496:	6863      	ldr	r3, [r4, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d0f9      	beq.n	8013490 <rmw_destroy_client+0x10>
 801349c:	2d00      	cmp	r5, #0
 801349e:	d0f7      	beq.n	8013490 <rmw_destroy_client+0x10>
 80134a0:	6828      	ldr	r0, [r5, #0]
 80134a2:	f001 fdbf 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 80134a6:	2800      	cmp	r0, #0
 80134a8:	d0f2      	beq.n	8013490 <rmw_destroy_client+0x10>
 80134aa:	686e      	ldr	r6, [r5, #4]
 80134ac:	2e00      	cmp	r6, #0
 80134ae:	d0ef      	beq.n	8013490 <rmw_destroy_client+0x10>
 80134b0:	6864      	ldr	r4, [r4, #4]
 80134b2:	6932      	ldr	r2, [r6, #16]
 80134b4:	6920      	ldr	r0, [r4, #16]
 80134b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80134ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134be:	6819      	ldr	r1, [r3, #0]
 80134c0:	f003 f846 	bl	8016550 <uxr_buffer_cancel_data>
 80134c4:	4602      	mov	r2, r0
 80134c6:	6920      	ldr	r0, [r4, #16]
 80134c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80134cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80134d0:	f001 fd28 	bl	8014f24 <run_xrce_session>
 80134d4:	6920      	ldr	r0, [r4, #16]
 80134d6:	6932      	ldr	r2, [r6, #16]
 80134d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80134dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134e0:	6819      	ldr	r1, [r3, #0]
 80134e2:	f002 fd07 	bl	8015ef4 <uxr_buffer_delete_entity>
 80134e6:	4602      	mov	r2, r0
 80134e8:	6920      	ldr	r0, [r4, #16]
 80134ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80134ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80134f2:	f001 fd17 	bl	8014f24 <run_xrce_session>
 80134f6:	2800      	cmp	r0, #0
 80134f8:	4628      	mov	r0, r5
 80134fa:	bf14      	ite	ne
 80134fc:	2400      	movne	r4, #0
 80134fe:	2402      	moveq	r4, #2
 8013500:	f001 fbfa 	bl	8014cf8 <rmw_uxrce_fini_client_memory>
 8013504:	e7c5      	b.n	8013492 <rmw_destroy_client+0x12>
 8013506:	bf00      	nop

08013508 <rmw_get_gid_for_client>:
 8013508:	b1a8      	cbz	r0, 8013536 <rmw_get_gid_for_client+0x2e>
 801350a:	b538      	push	{r3, r4, r5, lr}
 801350c:	460c      	mov	r4, r1
 801350e:	b1a1      	cbz	r1, 801353a <rmw_get_gid_for_client+0x32>
 8013510:	4605      	mov	r5, r0
 8013512:	6800      	ldr	r0, [r0, #0]
 8013514:	b120      	cbz	r0, 8013520 <rmw_get_gid_for_client+0x18>
 8013516:	4b0a      	ldr	r3, [pc, #40]	@ (8013540 <rmw_get_gid_for_client+0x38>)
 8013518:	6819      	ldr	r1, [r3, #0]
 801351a:	f7ec fe59 	bl	80001d0 <strcmp>
 801351e:	b940      	cbnz	r0, 8013532 <rmw_get_gid_for_client+0x2a>
 8013520:	686b      	ldr	r3, [r5, #4]
 8013522:	2000      	movs	r0, #0
 8013524:	6060      	str	r0, [r4, #4]
 8013526:	60a0      	str	r0, [r4, #8]
 8013528:	60e0      	str	r0, [r4, #12]
 801352a:	6120      	str	r0, [r4, #16]
 801352c:	691b      	ldr	r3, [r3, #16]
 801352e:	6063      	str	r3, [r4, #4]
 8013530:	bd38      	pop	{r3, r4, r5, pc}
 8013532:	200c      	movs	r0, #12
 8013534:	bd38      	pop	{r3, r4, r5, pc}
 8013536:	200b      	movs	r0, #11
 8013538:	4770      	bx	lr
 801353a:	200b      	movs	r0, #11
 801353c:	bd38      	pop	{r3, r4, r5, pc}
 801353e:	bf00      	nop
 8013540:	0802444c 	.word	0x0802444c

08013544 <rmw_get_implementation_identifier>:
 8013544:	4b01      	ldr	r3, [pc, #4]	@ (801354c <rmw_get_implementation_identifier+0x8>)
 8013546:	6818      	ldr	r0, [r3, #0]
 8013548:	4770      	bx	lr
 801354a:	bf00      	nop
 801354c:	0802444c 	.word	0x0802444c

08013550 <rmw_init_options_init>:
 8013550:	b084      	sub	sp, #16
 8013552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013554:	b083      	sub	sp, #12
 8013556:	ad09      	add	r5, sp, #36	@ 0x24
 8013558:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801355c:	b130      	cbz	r0, 801356c <rmw_init_options_init+0x1c>
 801355e:	4604      	mov	r4, r0
 8013560:	4628      	mov	r0, r5
 8013562:	f7ff fb8b 	bl	8012c7c <rcutils_allocator_is_valid>
 8013566:	b108      	cbz	r0, 801356c <rmw_init_options_init+0x1c>
 8013568:	68a6      	ldr	r6, [r4, #8]
 801356a:	b12e      	cbz	r6, 8013578 <rmw_init_options_init+0x28>
 801356c:	200b      	movs	r0, #11
 801356e:	b003      	add	sp, #12
 8013570:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013574:	b004      	add	sp, #16
 8013576:	4770      	bx	lr
 8013578:	2200      	movs	r2, #0
 801357a:	2300      	movs	r3, #0
 801357c:	e9c4 2300 	strd	r2, r3, [r4]
 8013580:	4b22      	ldr	r3, [pc, #136]	@ (801360c <rmw_init_options_init+0xbc>)
 8013582:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801361c <rmw_init_options_init+0xcc>
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	60a3      	str	r3, [r4, #8]
 801358a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801358c:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8013590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013594:	466f      	mov	r7, sp
 8013596:	682b      	ldr	r3, [r5, #0]
 8013598:	f8cc 3000 	str.w	r3, [ip]
 801359c:	4638      	mov	r0, r7
 801359e:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 80135a2:	60e6      	str	r6, [r4, #12]
 80135a4:	f001 fd50 	bl	8015048 <rmw_get_default_security_options>
 80135a8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80135ac:	f104 0310 	add.w	r3, r4, #16
 80135b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80135b4:	2203      	movs	r2, #3
 80135b6:	4816      	ldr	r0, [pc, #88]	@ (8013610 <rmw_init_options_init+0xc0>)
 80135b8:	4916      	ldr	r1, [pc, #88]	@ (8013614 <rmw_init_options_init+0xc4>)
 80135ba:	7626      	strb	r6, [r4, #24]
 80135bc:	f001 fadc 	bl	8014b78 <rmw_uxrce_init_init_options_impl_memory>
 80135c0:	4813      	ldr	r0, [pc, #76]	@ (8013610 <rmw_init_options_init+0xc0>)
 80135c2:	f007 fd89 	bl	801b0d8 <get_memory>
 80135c6:	b1f0      	cbz	r0, 8013606 <rmw_init_options_init+0xb6>
 80135c8:	4a13      	ldr	r2, [pc, #76]	@ (8013618 <rmw_init_options_init+0xc8>)
 80135ca:	6883      	ldr	r3, [r0, #8]
 80135cc:	6851      	ldr	r1, [r2, #4]
 80135ce:	7810      	ldrb	r0, [r2, #0]
 80135d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80135d2:	7418      	strb	r0, [r3, #16]
 80135d4:	6159      	str	r1, [r3, #20]
 80135d6:	68d1      	ldr	r1, [r2, #12]
 80135d8:	61d9      	str	r1, [r3, #28]
 80135da:	6911      	ldr	r1, [r2, #16]
 80135dc:	6219      	str	r1, [r3, #32]
 80135de:	6951      	ldr	r1, [r2, #20]
 80135e0:	6892      	ldr	r2, [r2, #8]
 80135e2:	619a      	str	r2, [r3, #24]
 80135e4:	6259      	str	r1, [r3, #36]	@ 0x24
 80135e6:	f004 ffcd 	bl	8018584 <uxr_nanos>
 80135ea:	f008 fec1 	bl	801c370 <srand>
 80135ee:	f008 feed 	bl	801c3cc <rand>
 80135f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80135f4:	6298      	str	r0, [r3, #40]	@ 0x28
 80135f6:	2800      	cmp	r0, #0
 80135f8:	d0f9      	beq.n	80135ee <rmw_init_options_init+0x9e>
 80135fa:	2000      	movs	r0, #0
 80135fc:	b003      	add	sp, #12
 80135fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013602:	b004      	add	sp, #16
 8013604:	4770      	bx	lr
 8013606:	2001      	movs	r0, #1
 8013608:	e7b1      	b.n	801356e <rmw_init_options_init+0x1e>
 801360a:	bf00      	nop
 801360c:	0802444c 	.word	0x0802444c
 8013610:	200180ac 	.word	0x200180ac
 8013614:	20013948 	.word	0x20013948
 8013618:	20013798 	.word	0x20013798
 801361c:	08023758 	.word	0x08023758

08013620 <rmw_init_options_copy>:
 8013620:	b570      	push	{r4, r5, r6, lr}
 8013622:	b158      	cbz	r0, 801363c <rmw_init_options_copy+0x1c>
 8013624:	460d      	mov	r5, r1
 8013626:	b149      	cbz	r1, 801363c <rmw_init_options_copy+0x1c>
 8013628:	4604      	mov	r4, r0
 801362a:	6880      	ldr	r0, [r0, #8]
 801362c:	b120      	cbz	r0, 8013638 <rmw_init_options_copy+0x18>
 801362e:	4b14      	ldr	r3, [pc, #80]	@ (8013680 <rmw_init_options_copy+0x60>)
 8013630:	6819      	ldr	r1, [r3, #0]
 8013632:	f7ec fdcd 	bl	80001d0 <strcmp>
 8013636:	b9e8      	cbnz	r0, 8013674 <rmw_init_options_copy+0x54>
 8013638:	68ae      	ldr	r6, [r5, #8]
 801363a:	b116      	cbz	r6, 8013642 <rmw_init_options_copy+0x22>
 801363c:	260b      	movs	r6, #11
 801363e:	4630      	mov	r0, r6
 8013640:	bd70      	pop	{r4, r5, r6, pc}
 8013642:	2258      	movs	r2, #88	@ 0x58
 8013644:	4621      	mov	r1, r4
 8013646:	4628      	mov	r0, r5
 8013648:	f00a f80f 	bl	801d66a <memcpy>
 801364c:	480d      	ldr	r0, [pc, #52]	@ (8013684 <rmw_init_options_copy+0x64>)
 801364e:	f007 fd43 	bl	801b0d8 <get_memory>
 8013652:	b190      	cbz	r0, 801367a <rmw_init_options_copy+0x5a>
 8013654:	6883      	ldr	r3, [r0, #8]
 8013656:	656b      	str	r3, [r5, #84]	@ 0x54
 8013658:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801365a:	f102 0c10 	add.w	ip, r2, #16
 801365e:	f103 0510 	add.w	r5, r3, #16
 8013662:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013668:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801366c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013670:	4630      	mov	r0, r6
 8013672:	bd70      	pop	{r4, r5, r6, pc}
 8013674:	260c      	movs	r6, #12
 8013676:	4630      	mov	r0, r6
 8013678:	bd70      	pop	{r4, r5, r6, pc}
 801367a:	2601      	movs	r6, #1
 801367c:	e7df      	b.n	801363e <rmw_init_options_copy+0x1e>
 801367e:	bf00      	nop
 8013680:	0802444c 	.word	0x0802444c
 8013684:	200180ac 	.word	0x200180ac

08013688 <rmw_init_options_fini>:
 8013688:	b368      	cbz	r0, 80136e6 <rmw_init_options_fini+0x5e>
 801368a:	b510      	push	{r4, lr}
 801368c:	4604      	mov	r4, r0
 801368e:	b096      	sub	sp, #88	@ 0x58
 8013690:	3040      	adds	r0, #64	@ 0x40
 8013692:	f7ff faf3 	bl	8012c7c <rcutils_allocator_is_valid>
 8013696:	b1f0      	cbz	r0, 80136d6 <rmw_init_options_fini+0x4e>
 8013698:	68a0      	ldr	r0, [r4, #8]
 801369a:	b120      	cbz	r0, 80136a6 <rmw_init_options_fini+0x1e>
 801369c:	4b13      	ldr	r3, [pc, #76]	@ (80136ec <rmw_init_options_fini+0x64>)
 801369e:	6819      	ldr	r1, [r3, #0]
 80136a0:	f7ec fd96 	bl	80001d0 <strcmp>
 80136a4:	b9e8      	cbnz	r0, 80136e2 <rmw_init_options_fini+0x5a>
 80136a6:	4b12      	ldr	r3, [pc, #72]	@ (80136f0 <rmw_init_options_fini+0x68>)
 80136a8:	6819      	ldr	r1, [r3, #0]
 80136aa:	b1b9      	cbz	r1, 80136dc <rmw_init_options_fini+0x54>
 80136ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80136ae:	e001      	b.n	80136b4 <rmw_init_options_fini+0x2c>
 80136b0:	6849      	ldr	r1, [r1, #4]
 80136b2:	b199      	cbz	r1, 80136dc <rmw_init_options_fini+0x54>
 80136b4:	688b      	ldr	r3, [r1, #8]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d1fa      	bne.n	80136b0 <rmw_init_options_fini+0x28>
 80136ba:	480d      	ldr	r0, [pc, #52]	@ (80136f0 <rmw_init_options_fini+0x68>)
 80136bc:	f007 fd1c 	bl	801b0f8 <put_memory>
 80136c0:	4668      	mov	r0, sp
 80136c2:	f7ff feb3 	bl	801342c <rmw_get_zero_initialized_init_options>
 80136c6:	2258      	movs	r2, #88	@ 0x58
 80136c8:	4669      	mov	r1, sp
 80136ca:	4620      	mov	r0, r4
 80136cc:	f009 ffcd 	bl	801d66a <memcpy>
 80136d0:	2000      	movs	r0, #0
 80136d2:	b016      	add	sp, #88	@ 0x58
 80136d4:	bd10      	pop	{r4, pc}
 80136d6:	200b      	movs	r0, #11
 80136d8:	b016      	add	sp, #88	@ 0x58
 80136da:	bd10      	pop	{r4, pc}
 80136dc:	2001      	movs	r0, #1
 80136de:	b016      	add	sp, #88	@ 0x58
 80136e0:	bd10      	pop	{r4, pc}
 80136e2:	200c      	movs	r0, #12
 80136e4:	e7f5      	b.n	80136d2 <rmw_init_options_fini+0x4a>
 80136e6:	200b      	movs	r0, #11
 80136e8:	4770      	bx	lr
 80136ea:	bf00      	nop
 80136ec:	0802444c 	.word	0x0802444c
 80136f0:	200180ac 	.word	0x200180ac

080136f4 <rmw_init>:
 80136f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136f8:	b083      	sub	sp, #12
 80136fa:	2800      	cmp	r0, #0
 80136fc:	f000 80d3 	beq.w	80138a6 <rmw_init+0x1b2>
 8013700:	460e      	mov	r6, r1
 8013702:	2900      	cmp	r1, #0
 8013704:	f000 80cf 	beq.w	80138a6 <rmw_init+0x1b2>
 8013708:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801370a:	4605      	mov	r5, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	f000 80ca 	beq.w	80138a6 <rmw_init+0x1b2>
 8013712:	4b78      	ldr	r3, [pc, #480]	@ (80138f4 <rmw_init+0x200>)
 8013714:	6880      	ldr	r0, [r0, #8]
 8013716:	681f      	ldr	r7, [r3, #0]
 8013718:	b128      	cbz	r0, 8013726 <rmw_init+0x32>
 801371a:	4639      	mov	r1, r7
 801371c:	f7ec fd58 	bl	80001d0 <strcmp>
 8013720:	2800      	cmp	r0, #0
 8013722:	f040 80ca 	bne.w	80138ba <rmw_init+0x1c6>
 8013726:	e9d5 2300 	ldrd	r2, r3, [r5]
 801372a:	4c73      	ldr	r4, [pc, #460]	@ (80138f8 <rmw_init+0x204>)
 801372c:	4973      	ldr	r1, [pc, #460]	@ (80138fc <rmw_init+0x208>)
 801372e:	4874      	ldr	r0, [pc, #464]	@ (8013900 <rmw_init+0x20c>)
 8013730:	60b7      	str	r7, [r6, #8]
 8013732:	e9c6 2300 	strd	r2, r3, [r6]
 8013736:	68eb      	ldr	r3, [r5, #12]
 8013738:	66b3      	str	r3, [r6, #104]	@ 0x68
 801373a:	2201      	movs	r2, #1
 801373c:	f001 f9bc 	bl	8014ab8 <rmw_uxrce_init_session_memory>
 8013740:	4620      	mov	r0, r4
 8013742:	4970      	ldr	r1, [pc, #448]	@ (8013904 <rmw_init+0x210>)
 8013744:	2204      	movs	r2, #4
 8013746:	f001 f9f7 	bl	8014b38 <rmw_uxrce_init_static_input_buffer_memory>
 801374a:	f04f 0800 	mov.w	r8, #0
 801374e:	486c      	ldr	r0, [pc, #432]	@ (8013900 <rmw_init+0x20c>)
 8013750:	f884 800d 	strb.w	r8, [r4, #13]
 8013754:	f007 fcc0 	bl	801b0d8 <get_memory>
 8013758:	2800      	cmp	r0, #0
 801375a:	f000 80a9 	beq.w	80138b0 <rmw_init+0x1bc>
 801375e:	6884      	ldr	r4, [r0, #8]
 8013760:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8013762:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013764:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013768:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801376c:	9101      	str	r1, [sp, #4]
 801376e:	6a00      	ldr	r0, [r0, #32]
 8013770:	9000      	str	r0, [sp, #0]
 8013772:	f104 0910 	add.w	r9, r4, #16
 8013776:	4661      	mov	r1, ip
 8013778:	4648      	mov	r0, r9
 801377a:	f002 fe39 	bl	80163f0 <uxr_set_custom_transport_callbacks>
 801377e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013782:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013786:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801378a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801378e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013792:	495d      	ldr	r1, [pc, #372]	@ (8013908 <rmw_init+0x214>)
 8013794:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013798:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801379c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80137a0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80137a4:	4859      	ldr	r0, [pc, #356]	@ (801390c <rmw_init+0x218>)
 80137a6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80137aa:	2201      	movs	r2, #1
 80137ac:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80137ae:	f001 f963 	bl	8014a78 <rmw_uxrce_init_node_memory>
 80137b2:	4957      	ldr	r1, [pc, #348]	@ (8013910 <rmw_init+0x21c>)
 80137b4:	4857      	ldr	r0, [pc, #348]	@ (8013914 <rmw_init+0x220>)
 80137b6:	2205      	movs	r2, #5
 80137b8:	f001 f93e 	bl	8014a38 <rmw_uxrce_init_subscription_memory>
 80137bc:	4956      	ldr	r1, [pc, #344]	@ (8013918 <rmw_init+0x224>)
 80137be:	4857      	ldr	r0, [pc, #348]	@ (801391c <rmw_init+0x228>)
 80137c0:	220a      	movs	r2, #10
 80137c2:	f001 f919 	bl	80149f8 <rmw_uxrce_init_publisher_memory>
 80137c6:	4956      	ldr	r1, [pc, #344]	@ (8013920 <rmw_init+0x22c>)
 80137c8:	4856      	ldr	r0, [pc, #344]	@ (8013924 <rmw_init+0x230>)
 80137ca:	2201      	movs	r2, #1
 80137cc:	f001 f8d4 	bl	8014978 <rmw_uxrce_init_service_memory>
 80137d0:	4955      	ldr	r1, [pc, #340]	@ (8013928 <rmw_init+0x234>)
 80137d2:	4856      	ldr	r0, [pc, #344]	@ (801392c <rmw_init+0x238>)
 80137d4:	2201      	movs	r2, #1
 80137d6:	f001 f8ef 	bl	80149b8 <rmw_uxrce_init_client_memory>
 80137da:	4955      	ldr	r1, [pc, #340]	@ (8013930 <rmw_init+0x23c>)
 80137dc:	4855      	ldr	r0, [pc, #340]	@ (8013934 <rmw_init+0x240>)
 80137de:	220f      	movs	r2, #15
 80137e0:	f001 f98a 	bl	8014af8 <rmw_uxrce_init_topic_memory>
 80137e4:	4954      	ldr	r1, [pc, #336]	@ (8013938 <rmw_init+0x244>)
 80137e6:	4855      	ldr	r0, [pc, #340]	@ (801393c <rmw_init+0x248>)
 80137e8:	2203      	movs	r2, #3
 80137ea:	f001 f9c5 	bl	8014b78 <rmw_uxrce_init_init_options_impl_memory>
 80137ee:	4954      	ldr	r1, [pc, #336]	@ (8013940 <rmw_init+0x24c>)
 80137f0:	4854      	ldr	r0, [pc, #336]	@ (8013944 <rmw_init+0x250>)
 80137f2:	2204      	movs	r2, #4
 80137f4:	f001 f9e0 	bl	8014bb8 <rmw_uxrce_init_wait_set_memory>
 80137f8:	4953      	ldr	r1, [pc, #332]	@ (8013948 <rmw_init+0x254>)
 80137fa:	4854      	ldr	r0, [pc, #336]	@ (801394c <rmw_init+0x258>)
 80137fc:	2204      	movs	r2, #4
 80137fe:	f001 f9fb 	bl	8014bf8 <rmw_uxrce_init_guard_condition_memory>
 8013802:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8013804:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8013806:	4642      	mov	r2, r8
 8013808:	f000 fed0 	bl	80145ac <rmw_uxrce_transport_init>
 801380c:	4607      	mov	r7, r0
 801380e:	2800      	cmp	r0, #0
 8013810:	d158      	bne.n	80138c4 <rmw_init+0x1d0>
 8013812:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013814:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013818:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801381a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801381e:	4628      	mov	r0, r5
 8013820:	f003 f81a 	bl	8016858 <uxr_init_session>
 8013824:	494a      	ldr	r1, [pc, #296]	@ (8013950 <rmw_init+0x25c>)
 8013826:	4622      	mov	r2, r4
 8013828:	4628      	mov	r0, r5
 801382a:	f003 f839 	bl	80168a0 <uxr_set_topic_callback>
 801382e:	4949      	ldr	r1, [pc, #292]	@ (8013954 <rmw_init+0x260>)
 8013830:	463a      	mov	r2, r7
 8013832:	4628      	mov	r0, r5
 8013834:	f003 f830 	bl	8016898 <uxr_set_status_callback>
 8013838:	4947      	ldr	r1, [pc, #284]	@ (8013958 <rmw_init+0x264>)
 801383a:	463a      	mov	r2, r7
 801383c:	4628      	mov	r0, r5
 801383e:	f003 f833 	bl	80168a8 <uxr_set_request_callback>
 8013842:	4946      	ldr	r1, [pc, #280]	@ (801395c <rmw_init+0x268>)
 8013844:	463a      	mov	r2, r7
 8013846:	4628      	mov	r0, r5
 8013848:	f003 f832 	bl	80168b0 <uxr_set_reply_callback>
 801384c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013850:	2304      	movs	r3, #4
 8013852:	0092      	lsls	r2, r2, #2
 8013854:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013858:	4628      	mov	r0, r5
 801385a:	f003 f867 	bl	801692c <uxr_create_input_reliable_stream>
 801385e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013862:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013866:	0092      	lsls	r2, r2, #2
 8013868:	2304      	movs	r3, #4
 801386a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801386e:	4628      	mov	r0, r5
 8013870:	f003 f834 	bl	80168dc <uxr_create_output_reliable_stream>
 8013874:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013878:	4628      	mov	r0, r5
 801387a:	f003 f851 	bl	8016920 <uxr_create_input_best_effort_stream>
 801387e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8013882:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013886:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801388a:	3114      	adds	r1, #20
 801388c:	4628      	mov	r0, r5
 801388e:	f003 f813 	bl	80168b8 <uxr_create_output_best_effort_stream>
 8013892:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013896:	4628      	mov	r0, r5
 8013898:	f003 fe06 	bl	80174a8 <uxr_create_session>
 801389c:	b1f8      	cbz	r0, 80138de <rmw_init+0x1ea>
 801389e:	4638      	mov	r0, r7
 80138a0:	b003      	add	sp, #12
 80138a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138a6:	270b      	movs	r7, #11
 80138a8:	4638      	mov	r0, r7
 80138aa:	b003      	add	sp, #12
 80138ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138b0:	2701      	movs	r7, #1
 80138b2:	4638      	mov	r0, r7
 80138b4:	b003      	add	sp, #12
 80138b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138ba:	270c      	movs	r7, #12
 80138bc:	4638      	mov	r0, r7
 80138be:	b003      	add	sp, #12
 80138c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138c4:	4648      	mov	r0, r9
 80138c6:	f002 fdd5 	bl	8016474 <uxr_close_custom_transport>
 80138ca:	480d      	ldr	r0, [pc, #52]	@ (8013900 <rmw_init+0x20c>)
 80138cc:	4621      	mov	r1, r4
 80138ce:	f007 fc13 	bl	801b0f8 <put_memory>
 80138d2:	4638      	mov	r0, r7
 80138d4:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80138d8:	b003      	add	sp, #12
 80138da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138de:	4648      	mov	r0, r9
 80138e0:	f002 fdc8 	bl	8016474 <uxr_close_custom_transport>
 80138e4:	4806      	ldr	r0, [pc, #24]	@ (8013900 <rmw_init+0x20c>)
 80138e6:	4621      	mov	r1, r4
 80138e8:	f007 fc06 	bl	801b0f8 <put_memory>
 80138ec:	66f7      	str	r7, [r6, #108]	@ 0x6c
 80138ee:	2701      	movs	r7, #1
 80138f0:	e7d5      	b.n	801389e <rmw_init+0x1aa>
 80138f2:	bf00      	nop
 80138f4:	0802444c 	.word	0x0802444c
 80138f8:	200180fc 	.word	0x200180fc
 80138fc:	200143a8 	.word	0x200143a8
 8013900:	200180ec 	.word	0x200180ec
 8013904:	20015950 	.word	0x20015950
 8013908:	200139cc 	.word	0x200139cc
 801390c:	200180bc 	.word	0x200180bc
 8013910:	20017a50 	.word	0x20017a50
 8013914:	2001810c 	.word	0x2001810c
 8013918:	20013a70 	.word	0x20013a70
 801391c:	200180cc 	.word	0x200180cc
 8013920:	200142e0 	.word	0x200142e0
 8013924:	200180dc 	.word	0x200180dc
 8013928:	20013800 	.word	0x20013800
 801392c:	200137f0 	.word	0x200137f0
 8013930:	20017e88 	.word	0x20017e88
 8013934:	2001811c 	.word	0x2001811c
 8013938:	20013948 	.word	0x20013948
 801393c:	200180ac 	.word	0x200180ac
 8013940:	2001802c 	.word	0x2001802c
 8013944:	2001812c 	.word	0x2001812c
 8013948:	200138c8 	.word	0x200138c8
 801394c:	2001809c 	.word	0x2001809c
 8013950:	0801af11 	.word	0x0801af11
 8013954:	0801af09 	.word	0x0801af09
 8013958:	0801afa9 	.word	0x0801afa9
 801395c:	0801b045 	.word	0x0801b045

08013960 <rmw_context_fini>:
 8013960:	4b17      	ldr	r3, [pc, #92]	@ (80139c0 <rmw_context_fini+0x60>)
 8013962:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8013964:	b570      	push	{r4, r5, r6, lr}
 8013966:	681c      	ldr	r4, [r3, #0]
 8013968:	4605      	mov	r5, r0
 801396a:	b334      	cbz	r4, 80139ba <rmw_context_fini+0x5a>
 801396c:	2600      	movs	r6, #0
 801396e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8013972:	6902      	ldr	r2, [r0, #16]
 8013974:	428a      	cmp	r2, r1
 8013976:	d018      	beq.n	80139aa <rmw_context_fini+0x4a>
 8013978:	2c00      	cmp	r4, #0
 801397a:	d1f8      	bne.n	801396e <rmw_context_fini+0xe>
 801397c:	b189      	cbz	r1, 80139a2 <rmw_context_fini+0x42>
 801397e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8013982:	789b      	ldrb	r3, [r3, #2]
 8013984:	2b01      	cmp	r3, #1
 8013986:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801398a:	bf14      	ite	ne
 801398c:	210a      	movne	r1, #10
 801398e:	2100      	moveq	r1, #0
 8013990:	f003 fd62 	bl	8017458 <uxr_delete_session_retries>
 8013994:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8013996:	f001 f94f 	bl	8014c38 <rmw_uxrce_fini_session_memory>
 801399a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801399c:	3010      	adds	r0, #16
 801399e:	f002 fd69 	bl	8016474 <uxr_close_custom_transport>
 80139a2:	2300      	movs	r3, #0
 80139a4:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80139a6:	4630      	mov	r0, r6
 80139a8:	bd70      	pop	{r4, r5, r6, pc}
 80139aa:	3018      	adds	r0, #24
 80139ac:	f000 f89c 	bl	8013ae8 <rmw_destroy_node>
 80139b0:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 80139b2:	4606      	mov	r6, r0
 80139b4:	2c00      	cmp	r4, #0
 80139b6:	d1da      	bne.n	801396e <rmw_context_fini+0xe>
 80139b8:	e7e0      	b.n	801397c <rmw_context_fini+0x1c>
 80139ba:	4626      	mov	r6, r4
 80139bc:	e7de      	b.n	801397c <rmw_context_fini+0x1c>
 80139be:	bf00      	nop
 80139c0:	200180bc 	.word	0x200180bc

080139c4 <create_node>:
 80139c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139c8:	b083      	sub	sp, #12
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d05f      	beq.n	8013a8e <create_node+0xca>
 80139ce:	4606      	mov	r6, r0
 80139d0:	4835      	ldr	r0, [pc, #212]	@ (8013aa8 <create_node+0xe4>)
 80139d2:	460f      	mov	r7, r1
 80139d4:	4690      	mov	r8, r2
 80139d6:	461d      	mov	r5, r3
 80139d8:	f007 fb7e 	bl	801b0d8 <get_memory>
 80139dc:	2800      	cmp	r0, #0
 80139de:	d056      	beq.n	8013a8e <create_node+0xca>
 80139e0:	6884      	ldr	r4, [r0, #8]
 80139e2:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80139e4:	6123      	str	r3, [r4, #16]
 80139e6:	f7ff fdad 	bl	8013544 <rmw_get_implementation_identifier>
 80139ea:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80139ee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80139f2:	f8c4 9020 	str.w	r9, [r4, #32]
 80139f6:	4630      	mov	r0, r6
 80139f8:	f7ec fc4a 	bl	8000290 <strlen>
 80139fc:	1c42      	adds	r2, r0, #1
 80139fe:	2a3c      	cmp	r2, #60	@ 0x3c
 8013a00:	f104 0518 	add.w	r5, r4, #24
 8013a04:	d840      	bhi.n	8013a88 <create_node+0xc4>
 8013a06:	4648      	mov	r0, r9
 8013a08:	4631      	mov	r1, r6
 8013a0a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013a0e:	f009 fe2c 	bl	801d66a <memcpy>
 8013a12:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8013a16:	4638      	mov	r0, r7
 8013a18:	f7ec fc3a 	bl	8000290 <strlen>
 8013a1c:	1c42      	adds	r2, r0, #1
 8013a1e:	2a3c      	cmp	r2, #60	@ 0x3c
 8013a20:	d832      	bhi.n	8013a88 <create_node+0xc4>
 8013a22:	4639      	mov	r1, r7
 8013a24:	4648      	mov	r0, r9
 8013a26:	f009 fe20 	bl	801d66a <memcpy>
 8013a2a:	6923      	ldr	r3, [r4, #16]
 8013a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013a30:	2101      	movs	r1, #1
 8013a32:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8013a36:	1842      	adds	r2, r0, r1
 8013a38:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8013a3c:	f002 fd1e 	bl	801647c <uxr_object_id>
 8013a40:	6160      	str	r0, [r4, #20]
 8013a42:	783b      	ldrb	r3, [r7, #0]
 8013a44:	2b2f      	cmp	r3, #47	@ 0x2f
 8013a46:	d127      	bne.n	8013a98 <create_node+0xd4>
 8013a48:	787b      	ldrb	r3, [r7, #1]
 8013a4a:	bb2b      	cbnz	r3, 8013a98 <create_node+0xd4>
 8013a4c:	4a17      	ldr	r2, [pc, #92]	@ (8013aac <create_node+0xe8>)
 8013a4e:	4818      	ldr	r0, [pc, #96]	@ (8013ab0 <create_node+0xec>)
 8013a50:	4633      	mov	r3, r6
 8013a52:	213c      	movs	r1, #60	@ 0x3c
 8013a54:	f009 fb9c 	bl	801d190 <sniprintf>
 8013a58:	6920      	ldr	r0, [r4, #16]
 8013a5a:	4915      	ldr	r1, [pc, #84]	@ (8013ab0 <create_node+0xec>)
 8013a5c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013a60:	9100      	str	r1, [sp, #0]
 8013a62:	2106      	movs	r1, #6
 8013a64:	9101      	str	r1, [sp, #4]
 8013a66:	6811      	ldr	r1, [r2, #0]
 8013a68:	6962      	ldr	r2, [r4, #20]
 8013a6a:	fa1f f388 	uxth.w	r3, r8
 8013a6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a72:	f002 fa8b 	bl	8015f8c <uxr_buffer_create_participant_bin>
 8013a76:	4602      	mov	r2, r0
 8013a78:	6920      	ldr	r0, [r4, #16]
 8013a7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013a7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013a82:	f001 fa4f 	bl	8014f24 <run_xrce_session>
 8013a86:	b918      	cbnz	r0, 8013a90 <create_node+0xcc>
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f001 f8db 	bl	8014c44 <rmw_uxrce_fini_node_memory>
 8013a8e:	2500      	movs	r5, #0
 8013a90:	4628      	mov	r0, r5
 8013a92:	b003      	add	sp, #12
 8013a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a98:	4a06      	ldr	r2, [pc, #24]	@ (8013ab4 <create_node+0xf0>)
 8013a9a:	9600      	str	r6, [sp, #0]
 8013a9c:	463b      	mov	r3, r7
 8013a9e:	213c      	movs	r1, #60	@ 0x3c
 8013aa0:	4803      	ldr	r0, [pc, #12]	@ (8013ab0 <create_node+0xec>)
 8013aa2:	f009 fb75 	bl	801d190 <sniprintf>
 8013aa6:	e7d7      	b.n	8013a58 <create_node+0x94>
 8013aa8:	200180bc 	.word	0x200180bc
 8013aac:	080239b4 	.word	0x080239b4
 8013ab0:	200137b4 	.word	0x200137b4
 8013ab4:	08023768 	.word	0x08023768

08013ab8 <rmw_create_node>:
 8013ab8:	b199      	cbz	r1, 8013ae2 <rmw_create_node+0x2a>
 8013aba:	780b      	ldrb	r3, [r1, #0]
 8013abc:	468c      	mov	ip, r1
 8013abe:	b183      	cbz	r3, 8013ae2 <rmw_create_node+0x2a>
 8013ac0:	b410      	push	{r4}
 8013ac2:	4614      	mov	r4, r2
 8013ac4:	b14a      	cbz	r2, 8013ada <rmw_create_node+0x22>
 8013ac6:	7813      	ldrb	r3, [r2, #0]
 8013ac8:	b13b      	cbz	r3, 8013ada <rmw_create_node+0x22>
 8013aca:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8013acc:	4603      	mov	r3, r0
 8013ace:	4621      	mov	r1, r4
 8013ad0:	4660      	mov	r0, ip
 8013ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ad6:	f7ff bf75 	b.w	80139c4 <create_node>
 8013ada:	2000      	movs	r0, #0
 8013adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ae0:	4770      	bx	lr
 8013ae2:	2000      	movs	r0, #0
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop

08013ae8 <rmw_destroy_node>:
 8013ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aea:	b328      	cbz	r0, 8013b38 <rmw_destroy_node+0x50>
 8013aec:	4607      	mov	r7, r0
 8013aee:	6800      	ldr	r0, [r0, #0]
 8013af0:	b120      	cbz	r0, 8013afc <rmw_destroy_node+0x14>
 8013af2:	4b36      	ldr	r3, [pc, #216]	@ (8013bcc <rmw_destroy_node+0xe4>)
 8013af4:	6819      	ldr	r1, [r3, #0]
 8013af6:	f7ec fb6b 	bl	80001d0 <strcmp>
 8013afa:	b9e8      	cbnz	r0, 8013b38 <rmw_destroy_node+0x50>
 8013afc:	687d      	ldr	r5, [r7, #4]
 8013afe:	b1dd      	cbz	r5, 8013b38 <rmw_destroy_node+0x50>
 8013b00:	4b33      	ldr	r3, [pc, #204]	@ (8013bd0 <rmw_destroy_node+0xe8>)
 8013b02:	681c      	ldr	r4, [r3, #0]
 8013b04:	2c00      	cmp	r4, #0
 8013b06:	d05f      	beq.n	8013bc8 <rmw_destroy_node+0xe0>
 8013b08:	2600      	movs	r6, #0
 8013b0a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b0e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8013b12:	429d      	cmp	r5, r3
 8013b14:	d013      	beq.n	8013b3e <rmw_destroy_node+0x56>
 8013b16:	2c00      	cmp	r4, #0
 8013b18:	d1f7      	bne.n	8013b0a <rmw_destroy_node+0x22>
 8013b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8013bd4 <rmw_destroy_node+0xec>)
 8013b1c:	681c      	ldr	r4, [r3, #0]
 8013b1e:	b1c4      	cbz	r4, 8013b52 <rmw_destroy_node+0x6a>
 8013b20:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b24:	6a0b      	ldr	r3, [r1, #32]
 8013b26:	429d      	cmp	r5, r3
 8013b28:	d1f9      	bne.n	8013b1e <rmw_destroy_node+0x36>
 8013b2a:	317c      	adds	r1, #124	@ 0x7c
 8013b2c:	4638      	mov	r0, r7
 8013b2e:	f000 fc89 	bl	8014444 <rmw_destroy_subscription>
 8013b32:	2801      	cmp	r0, #1
 8013b34:	4606      	mov	r6, r0
 8013b36:	d1f2      	bne.n	8013b1e <rmw_destroy_node+0x36>
 8013b38:	2601      	movs	r6, #1
 8013b3a:	4630      	mov	r0, r6
 8013b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b3e:	3184      	adds	r1, #132	@ 0x84
 8013b40:	4638      	mov	r0, r7
 8013b42:	f000 f9a5 	bl	8013e90 <rmw_destroy_publisher>
 8013b46:	2801      	cmp	r0, #1
 8013b48:	4606      	mov	r6, r0
 8013b4a:	d0f5      	beq.n	8013b38 <rmw_destroy_node+0x50>
 8013b4c:	2c00      	cmp	r4, #0
 8013b4e:	d1dc      	bne.n	8013b0a <rmw_destroy_node+0x22>
 8013b50:	e7e3      	b.n	8013b1a <rmw_destroy_node+0x32>
 8013b52:	4b21      	ldr	r3, [pc, #132]	@ (8013bd8 <rmw_destroy_node+0xf0>)
 8013b54:	681c      	ldr	r4, [r3, #0]
 8013b56:	b16c      	cbz	r4, 8013b74 <rmw_destroy_node+0x8c>
 8013b58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b5c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013b5e:	429d      	cmp	r5, r3
 8013b60:	d1f9      	bne.n	8013b56 <rmw_destroy_node+0x6e>
 8013b62:	317c      	adds	r1, #124	@ 0x7c
 8013b64:	4638      	mov	r0, r7
 8013b66:	f000 fb37 	bl	80141d8 <rmw_destroy_service>
 8013b6a:	2801      	cmp	r0, #1
 8013b6c:	4606      	mov	r6, r0
 8013b6e:	d0e3      	beq.n	8013b38 <rmw_destroy_node+0x50>
 8013b70:	2c00      	cmp	r4, #0
 8013b72:	d1f1      	bne.n	8013b58 <rmw_destroy_node+0x70>
 8013b74:	4b19      	ldr	r3, [pc, #100]	@ (8013bdc <rmw_destroy_node+0xf4>)
 8013b76:	681c      	ldr	r4, [r3, #0]
 8013b78:	b16c      	cbz	r4, 8013b96 <rmw_destroy_node+0xae>
 8013b7a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b7e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013b80:	429d      	cmp	r5, r3
 8013b82:	d1f9      	bne.n	8013b78 <rmw_destroy_node+0x90>
 8013b84:	317c      	adds	r1, #124	@ 0x7c
 8013b86:	4638      	mov	r0, r7
 8013b88:	f7ff fc7a 	bl	8013480 <rmw_destroy_client>
 8013b8c:	2801      	cmp	r0, #1
 8013b8e:	4606      	mov	r6, r0
 8013b90:	d0d2      	beq.n	8013b38 <rmw_destroy_node+0x50>
 8013b92:	2c00      	cmp	r4, #0
 8013b94:	d1f1      	bne.n	8013b7a <rmw_destroy_node+0x92>
 8013b96:	6928      	ldr	r0, [r5, #16]
 8013b98:	696a      	ldr	r2, [r5, #20]
 8013b9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ba2:	6819      	ldr	r1, [r3, #0]
 8013ba4:	f002 f9a6 	bl	8015ef4 <uxr_buffer_delete_entity>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	6928      	ldr	r0, [r5, #16]
 8013bac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013bb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013bb4:	f001 f9b6 	bl	8014f24 <run_xrce_session>
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	bf08      	it	eq
 8013bbc:	2602      	moveq	r6, #2
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	f001 f840 	bl	8014c44 <rmw_uxrce_fini_node_memory>
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc8:	4626      	mov	r6, r4
 8013bca:	e7a6      	b.n	8013b1a <rmw_destroy_node+0x32>
 8013bcc:	0802444c 	.word	0x0802444c
 8013bd0:	200180cc 	.word	0x200180cc
 8013bd4:	2001810c 	.word	0x2001810c
 8013bd8:	200180dc 	.word	0x200180dc
 8013bdc:	200137f0 	.word	0x200137f0

08013be0 <rmw_node_get_graph_guard_condition>:
 8013be0:	6843      	ldr	r3, [r0, #4]
 8013be2:	6918      	ldr	r0, [r3, #16]
 8013be4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop

08013bec <flush_session>:
 8013bec:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8013bee:	f003 ba95 	b.w	801711c <uxr_run_session_until_confirm_delivery>
 8013bf2:	bf00      	nop

08013bf4 <rmw_publish>:
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d053      	beq.n	8013ca0 <rmw_publish+0xac>
 8013bf8:	b570      	push	{r4, r5, r6, lr}
 8013bfa:	460d      	mov	r5, r1
 8013bfc:	b08e      	sub	sp, #56	@ 0x38
 8013bfe:	2900      	cmp	r1, #0
 8013c00:	d04b      	beq.n	8013c9a <rmw_publish+0xa6>
 8013c02:	4604      	mov	r4, r0
 8013c04:	6800      	ldr	r0, [r0, #0]
 8013c06:	f001 fa0d 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d045      	beq.n	8013c9a <rmw_publish+0xa6>
 8013c0e:	6866      	ldr	r6, [r4, #4]
 8013c10:	2e00      	cmp	r6, #0
 8013c12:	d042      	beq.n	8013c9a <rmw_publish+0xa6>
 8013c14:	69b4      	ldr	r4, [r6, #24]
 8013c16:	4628      	mov	r0, r5
 8013c18:	6923      	ldr	r3, [r4, #16]
 8013c1a:	4798      	blx	r3
 8013c1c:	69f3      	ldr	r3, [r6, #28]
 8013c1e:	9005      	str	r0, [sp, #20]
 8013c20:	b113      	cbz	r3, 8013c28 <rmw_publish+0x34>
 8013c22:	a805      	add	r0, sp, #20
 8013c24:	4798      	blx	r3
 8013c26:	9805      	ldr	r0, [sp, #20]
 8013c28:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8013c2c:	691b      	ldr	r3, [r3, #16]
 8013c2e:	9000      	str	r0, [sp, #0]
 8013c30:	6972      	ldr	r2, [r6, #20]
 8013c32:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8013c34:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013c38:	ab06      	add	r3, sp, #24
 8013c3a:	f004 fd43 	bl	80186c4 <uxr_prepare_output_stream>
 8013c3e:	b1d8      	cbz	r0, 8013c78 <rmw_publish+0x84>
 8013c40:	68a3      	ldr	r3, [r4, #8]
 8013c42:	a906      	add	r1, sp, #24
 8013c44:	4628      	mov	r0, r5
 8013c46:	4798      	blx	r3
 8013c48:	6a33      	ldr	r3, [r6, #32]
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	b10b      	cbz	r3, 8013c52 <rmw_publish+0x5e>
 8013c4e:	a806      	add	r0, sp, #24
 8013c50:	4798      	blx	r3
 8013c52:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8013c56:	2b01      	cmp	r3, #1
 8013c58:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8013c5c:	d022      	beq.n	8013ca4 <rmw_publish+0xb0>
 8013c5e:	6918      	ldr	r0, [r3, #16]
 8013c60:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8013c62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c66:	f003 fa59 	bl	801711c <uxr_run_session_until_confirm_delivery>
 8013c6a:	4020      	ands	r0, r4
 8013c6c:	b2c4      	uxtb	r4, r0
 8013c6e:	f084 0001 	eor.w	r0, r4, #1
 8013c72:	b2c0      	uxtb	r0, r0
 8013c74:	b00e      	add	sp, #56	@ 0x38
 8013c76:	bd70      	pop	{r4, r5, r6, pc}
 8013c78:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8013c7c:	6918      	ldr	r0, [r3, #16]
 8013c7e:	9b05      	ldr	r3, [sp, #20]
 8013c80:	9300      	str	r3, [sp, #0]
 8013c82:	4b0b      	ldr	r3, [pc, #44]	@ (8013cb0 <rmw_publish+0xbc>)
 8013c84:	9301      	str	r3, [sp, #4]
 8013c86:	9602      	str	r6, [sp, #8]
 8013c88:	6972      	ldr	r2, [r6, #20]
 8013c8a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8013c8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c90:	ab06      	add	r3, sp, #24
 8013c92:	f004 fd47 	bl	8018724 <uxr_prepare_output_stream_fragmented>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d1d2      	bne.n	8013c40 <rmw_publish+0x4c>
 8013c9a:	2001      	movs	r0, #1
 8013c9c:	b00e      	add	sp, #56	@ 0x38
 8013c9e:	bd70      	pop	{r4, r5, r6, pc}
 8013ca0:	2001      	movs	r0, #1
 8013ca2:	4770      	bx	lr
 8013ca4:	6918      	ldr	r0, [r3, #16]
 8013ca6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013caa:	f002 fe77 	bl	801699c <uxr_flash_output_streams>
 8013cae:	e7de      	b.n	8013c6e <rmw_publish+0x7a>
 8013cb0:	08013bed 	.word	0x08013bed

08013cb4 <rmw_create_publisher>:
 8013cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb8:	b087      	sub	sp, #28
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	f000 80cc 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013cc0:	460e      	mov	r6, r1
 8013cc2:	2900      	cmp	r1, #0
 8013cc4:	f000 80c8 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013cc8:	4604      	mov	r4, r0
 8013cca:	6800      	ldr	r0, [r0, #0]
 8013ccc:	4615      	mov	r5, r2
 8013cce:	4698      	mov	r8, r3
 8013cd0:	f001 f9a8 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f000 80bf 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013cda:	2d00      	cmp	r5, #0
 8013cdc:	f000 80bc 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013ce0:	782b      	ldrb	r3, [r5, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	f000 80b8 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013ce8:	f1b8 0f00 	cmp.w	r8, #0
 8013cec:	f000 80b4 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013cf0:	485c      	ldr	r0, [pc, #368]	@ (8013e64 <rmw_create_publisher+0x1b0>)
 8013cf2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013cf6:	f007 f9ef 	bl	801b0d8 <get_memory>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	f000 80ac 	beq.w	8013e58 <rmw_create_publisher+0x1a4>
 8013d00:	6884      	ldr	r4, [r0, #8]
 8013d02:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8013d06:	f7ff fc1d 	bl	8013544 <rmw_get_implementation_identifier>
 8013d0a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8013d0e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8013d12:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8013d16:	4628      	mov	r0, r5
 8013d18:	f7ec faba 	bl	8000290 <strlen>
 8013d1c:	3001      	adds	r0, #1
 8013d1e:	283c      	cmp	r0, #60	@ 0x3c
 8013d20:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8013d24:	f200 8091 	bhi.w	8013e4a <rmw_create_publisher+0x196>
 8013d28:	4a4f      	ldr	r2, [pc, #316]	@ (8013e68 <rmw_create_publisher+0x1b4>)
 8013d2a:	462b      	mov	r3, r5
 8013d2c:	213c      	movs	r1, #60	@ 0x3c
 8013d2e:	4650      	mov	r0, sl
 8013d30:	f009 fa2e 	bl	801d190 <sniprintf>
 8013d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013d38:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8013d3a:	4641      	mov	r1, r8
 8013d3c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8013d40:	2250      	movs	r2, #80	@ 0x50
 8013d42:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013d46:	f009 fc90 	bl	801d66a <memcpy>
 8013d4a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013d4e:	4947      	ldr	r1, [pc, #284]	@ (8013e6c <rmw_create_publisher+0x1b8>)
 8013d50:	2b02      	cmp	r3, #2
 8013d52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d56:	bf0c      	ite	eq
 8013d58:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8013d5c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8013d60:	67a3      	str	r3, [r4, #120]	@ 0x78
 8013d62:	2300      	movs	r3, #0
 8013d64:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013d68:	4630      	mov	r0, r6
 8013d6a:	f001 fb5d 	bl	8015428 <get_message_typesupport_handle>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d06b      	beq.n	8013e4a <rmw_create_publisher+0x196>
 8013d72:	6842      	ldr	r2, [r0, #4]
 8013d74:	61a2      	str	r2, [r4, #24]
 8013d76:	2a00      	cmp	r2, #0
 8013d78:	d067      	beq.n	8013e4a <rmw_create_publisher+0x196>
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	4643      	mov	r3, r8
 8013d7e:	4648      	mov	r0, r9
 8013d80:	f007 f9f6 	bl	801b170 <create_topic>
 8013d84:	6260      	str	r0, [r4, #36]	@ 0x24
 8013d86:	2800      	cmp	r0, #0
 8013d88:	d063      	beq.n	8013e52 <rmw_create_publisher+0x19e>
 8013d8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d92:	2103      	movs	r1, #3
 8013d94:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8013d98:	1c42      	adds	r2, r0, #1
 8013d9a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8013d9e:	f002 fb6d 	bl	801647c <uxr_object_id>
 8013da2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8013da6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013daa:	6120      	str	r0, [r4, #16]
 8013dac:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8013db0:	6910      	ldr	r0, [r2, #16]
 8013db2:	2506      	movs	r5, #6
 8013db4:	9500      	str	r5, [sp, #0]
 8013db6:	6819      	ldr	r1, [r3, #0]
 8013db8:	6922      	ldr	r2, [r4, #16]
 8013dba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013dbe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013dc2:	f002 f94b 	bl	801605c <uxr_buffer_create_publisher_bin>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013dcc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013dd0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013dd4:	f001 f8a6 	bl	8014f24 <run_xrce_session>
 8013dd8:	b3b8      	cbz	r0, 8013e4a <rmw_create_publisher+0x196>
 8013dda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013de2:	2105      	movs	r1, #5
 8013de4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8013de8:	1c42      	adds	r2, r0, #1
 8013dea:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8013dee:	f002 fb45 	bl	801647c <uxr_object_id>
 8013df2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8013df6:	6160      	str	r0, [r4, #20]
 8013df8:	691e      	ldr	r6, [r3, #16]
 8013dfa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013dfe:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8013e02:	f10d 0a10 	add.w	sl, sp, #16
 8013e06:	4641      	mov	r1, r8
 8013e08:	4650      	mov	r0, sl
 8013e0a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8013e0e:	f001 f8a5 	bl	8014f5c <convert_qos_profile>
 8013e12:	9503      	str	r5, [sp, #12]
 8013e14:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013e18:	9001      	str	r0, [sp, #4]
 8013e1a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013e1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013e22:	9300      	str	r3, [sp, #0]
 8013e24:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8013e28:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8013e2c:	f8d8 1000 	ldr.w	r1, [r8]
 8013e30:	4630      	mov	r0, r6
 8013e32:	f002 f973 	bl	801611c <uxr_buffer_create_datawriter_bin>
 8013e36:	4602      	mov	r2, r0
 8013e38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013e3c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013e40:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013e44:	f001 f86e 	bl	8014f24 <run_xrce_session>
 8013e48:	b938      	cbnz	r0, 8013e5a <rmw_create_publisher+0x1a6>
 8013e4a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013e4c:	b108      	cbz	r0, 8013e52 <rmw_create_publisher+0x19e>
 8013e4e:	f000 ff69 	bl	8014d24 <rmw_uxrce_fini_topic_memory>
 8013e52:	4638      	mov	r0, r7
 8013e54:	f000 ff0e 	bl	8014c74 <rmw_uxrce_fini_publisher_memory>
 8013e58:	2700      	movs	r7, #0
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	b007      	add	sp, #28
 8013e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e62:	bf00      	nop
 8013e64:	200180cc 	.word	0x200180cc
 8013e68:	080239b4 	.word	0x080239b4
 8013e6c:	080234a4 	.word	0x080234a4

08013e70 <rmw_publisher_get_actual_qos>:
 8013e70:	b150      	cbz	r0, 8013e88 <rmw_publisher_get_actual_qos+0x18>
 8013e72:	b508      	push	{r3, lr}
 8013e74:	460b      	mov	r3, r1
 8013e76:	b149      	cbz	r1, 8013e8c <rmw_publisher_get_actual_qos+0x1c>
 8013e78:	6841      	ldr	r1, [r0, #4]
 8013e7a:	2250      	movs	r2, #80	@ 0x50
 8013e7c:	3128      	adds	r1, #40	@ 0x28
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f009 fbf3 	bl	801d66a <memcpy>
 8013e84:	2000      	movs	r0, #0
 8013e86:	bd08      	pop	{r3, pc}
 8013e88:	200b      	movs	r0, #11
 8013e8a:	4770      	bx	lr
 8013e8c:	200b      	movs	r0, #11
 8013e8e:	bd08      	pop	{r3, pc}

08013e90 <rmw_destroy_publisher>:
 8013e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e92:	b128      	cbz	r0, 8013ea0 <rmw_destroy_publisher+0x10>
 8013e94:	4604      	mov	r4, r0
 8013e96:	6800      	ldr	r0, [r0, #0]
 8013e98:	460d      	mov	r5, r1
 8013e9a:	f001 f8c3 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 8013e9e:	b910      	cbnz	r0, 8013ea6 <rmw_destroy_publisher+0x16>
 8013ea0:	2401      	movs	r4, #1
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea6:	6863      	ldr	r3, [r4, #4]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d0f9      	beq.n	8013ea0 <rmw_destroy_publisher+0x10>
 8013eac:	2d00      	cmp	r5, #0
 8013eae:	d0f7      	beq.n	8013ea0 <rmw_destroy_publisher+0x10>
 8013eb0:	6828      	ldr	r0, [r5, #0]
 8013eb2:	f001 f8b7 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d0f2      	beq.n	8013ea0 <rmw_destroy_publisher+0x10>
 8013eba:	686c      	ldr	r4, [r5, #4]
 8013ebc:	2c00      	cmp	r4, #0
 8013ebe:	d0ef      	beq.n	8013ea0 <rmw_destroy_publisher+0x10>
 8013ec0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013ec2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8013ec6:	f007 f9a3 	bl	801b210 <destroy_topic>
 8013eca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8013ece:	6962      	ldr	r2, [r4, #20]
 8013ed0:	6918      	ldr	r0, [r3, #16]
 8013ed2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ed6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013eda:	6819      	ldr	r1, [r3, #0]
 8013edc:	f002 f80a 	bl	8015ef4 <uxr_buffer_delete_entity>
 8013ee0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8013ee4:	6922      	ldr	r2, [r4, #16]
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8013eec:	4604      	mov	r4, r0
 8013eee:	6809      	ldr	r1, [r1, #0]
 8013ef0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013ef4:	f001 fffe 	bl	8015ef4 <uxr_buffer_delete_entity>
 8013ef8:	693e      	ldr	r6, [r7, #16]
 8013efa:	4622      	mov	r2, r4
 8013efc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8013f00:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8013f04:	4604      	mov	r4, r0
 8013f06:	4630      	mov	r0, r6
 8013f08:	f001 f80c 	bl	8014f24 <run_xrce_session>
 8013f0c:	693e      	ldr	r6, [r7, #16]
 8013f0e:	4622      	mov	r2, r4
 8013f10:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8013f14:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8013f18:	4604      	mov	r4, r0
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f001 f802 	bl	8014f24 <run_xrce_session>
 8013f20:	b12c      	cbz	r4, 8013f2e <rmw_destroy_publisher+0x9e>
 8013f22:	b120      	cbz	r0, 8013f2e <rmw_destroy_publisher+0x9e>
 8013f24:	2400      	movs	r4, #0
 8013f26:	4628      	mov	r0, r5
 8013f28:	f000 fea4 	bl	8014c74 <rmw_uxrce_fini_publisher_memory>
 8013f2c:	e7b9      	b.n	8013ea2 <rmw_destroy_publisher+0x12>
 8013f2e:	2402      	movs	r4, #2
 8013f30:	e7f9      	b.n	8013f26 <rmw_destroy_publisher+0x96>
 8013f32:	bf00      	nop

08013f34 <rmw_send_request>:
 8013f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f38:	4604      	mov	r4, r0
 8013f3a:	6800      	ldr	r0, [r0, #0]
 8013f3c:	b08b      	sub	sp, #44	@ 0x2c
 8013f3e:	460e      	mov	r6, r1
 8013f40:	4615      	mov	r5, r2
 8013f42:	b128      	cbz	r0, 8013f50 <rmw_send_request+0x1c>
 8013f44:	4b21      	ldr	r3, [pc, #132]	@ (8013fcc <rmw_send_request+0x98>)
 8013f46:	6819      	ldr	r1, [r3, #0]
 8013f48:	f7ec f942 	bl	80001d0 <strcmp>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d139      	bne.n	8013fc4 <rmw_send_request+0x90>
 8013f50:	6864      	ldr	r4, [r4, #4]
 8013f52:	6963      	ldr	r3, [r4, #20]
 8013f54:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013f58:	689b      	ldr	r3, [r3, #8]
 8013f5a:	4798      	blx	r3
 8013f5c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013f60:	4630      	mov	r0, r6
 8013f62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f66:	4798      	blx	r3
 8013f68:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013f6c:	9000      	str	r0, [sp, #0]
 8013f6e:	6922      	ldr	r2, [r4, #16]
 8013f70:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013f72:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013f76:	ab02      	add	r3, sp, #8
 8013f78:	f004 fba4 	bl	80186c4 <uxr_prepare_output_stream>
 8013f7c:	2700      	movs	r7, #0
 8013f7e:	6028      	str	r0, [r5, #0]
 8013f80:	606f      	str	r7, [r5, #4]
 8013f82:	b198      	cbz	r0, 8013fac <rmw_send_request+0x78>
 8013f84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f88:	a902      	add	r1, sp, #8
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	4798      	blx	r3
 8013f8e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013f92:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d00c      	beq.n	8013fb4 <rmw_send_request+0x80>
 8013f9a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013f9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013fa0:	f003 f8bc 	bl	801711c <uxr_run_session_until_confirm_delivery>
 8013fa4:	4638      	mov	r0, r7
 8013fa6:	b00b      	add	sp, #44	@ 0x2c
 8013fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fac:	2001      	movs	r0, #1
 8013fae:	b00b      	add	sp, #44	@ 0x2c
 8013fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013fb8:	f002 fcf0 	bl	801699c <uxr_flash_output_streams>
 8013fbc:	4638      	mov	r0, r7
 8013fbe:	b00b      	add	sp, #44	@ 0x2c
 8013fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fc4:	200c      	movs	r0, #12
 8013fc6:	b00b      	add	sp, #44	@ 0x2c
 8013fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fcc:	0802444c 	.word	0x0802444c

08013fd0 <rmw_take_request>:
 8013fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fd4:	4605      	mov	r5, r0
 8013fd6:	6800      	ldr	r0, [r0, #0]
 8013fd8:	b089      	sub	sp, #36	@ 0x24
 8013fda:	460c      	mov	r4, r1
 8013fdc:	4690      	mov	r8, r2
 8013fde:	461e      	mov	r6, r3
 8013fe0:	b128      	cbz	r0, 8013fee <rmw_take_request+0x1e>
 8013fe2:	4b28      	ldr	r3, [pc, #160]	@ (8014084 <rmw_take_request+0xb4>)
 8013fe4:	6819      	ldr	r1, [r3, #0]
 8013fe6:	f7ec f8f3 	bl	80001d0 <strcmp>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d146      	bne.n	801407c <rmw_take_request+0xac>
 8013fee:	b10e      	cbz	r6, 8013ff4 <rmw_take_request+0x24>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	7033      	strb	r3, [r6, #0]
 8013ff4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013ff8:	f000 ff16 	bl	8014e28 <rmw_uxrce_clean_expired_static_input_buffer>
 8013ffc:	4648      	mov	r0, r9
 8013ffe:	f000 feed 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014002:	4607      	mov	r7, r0
 8014004:	b3b0      	cbz	r0, 8014074 <rmw_take_request+0xa4>
 8014006:	6885      	ldr	r5, [r0, #8]
 8014008:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801400c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014010:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014014:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014018:	7423      	strb	r3, [r4, #16]
 801401a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801401e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014022:	74e2      	strb	r2, [r4, #19]
 8014024:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014028:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801402c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014030:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014034:	61e1      	str	r1, [r4, #28]
 8014036:	6162      	str	r2, [r4, #20]
 8014038:	61a3      	str	r3, [r4, #24]
 801403a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801403e:	689b      	ldr	r3, [r3, #8]
 8014040:	4798      	blx	r3
 8014042:	6844      	ldr	r4, [r0, #4]
 8014044:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014048:	f105 0110 	add.w	r1, r5, #16
 801404c:	4668      	mov	r0, sp
 801404e:	f7fb faef 	bl	800f630 <ucdr_init_buffer>
 8014052:	68e3      	ldr	r3, [r4, #12]
 8014054:	4641      	mov	r1, r8
 8014056:	4668      	mov	r0, sp
 8014058:	4798      	blx	r3
 801405a:	4639      	mov	r1, r7
 801405c:	4604      	mov	r4, r0
 801405e:	480a      	ldr	r0, [pc, #40]	@ (8014088 <rmw_take_request+0xb8>)
 8014060:	f007 f84a 	bl	801b0f8 <put_memory>
 8014064:	b106      	cbz	r6, 8014068 <rmw_take_request+0x98>
 8014066:	7034      	strb	r4, [r6, #0]
 8014068:	f084 0001 	eor.w	r0, r4, #1
 801406c:	b2c0      	uxtb	r0, r0
 801406e:	b009      	add	sp, #36	@ 0x24
 8014070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014074:	2001      	movs	r0, #1
 8014076:	b009      	add	sp, #36	@ 0x24
 8014078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801407c:	200c      	movs	r0, #12
 801407e:	b009      	add	sp, #36	@ 0x24
 8014080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014084:	0802444c 	.word	0x0802444c
 8014088:	200180fc 	.word	0x200180fc

0801408c <rmw_send_response>:
 801408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801408e:	4605      	mov	r5, r0
 8014090:	6800      	ldr	r0, [r0, #0]
 8014092:	b091      	sub	sp, #68	@ 0x44
 8014094:	460c      	mov	r4, r1
 8014096:	4616      	mov	r6, r2
 8014098:	b128      	cbz	r0, 80140a6 <rmw_send_response+0x1a>
 801409a:	4b29      	ldr	r3, [pc, #164]	@ (8014140 <rmw_send_response+0xb4>)
 801409c:	6819      	ldr	r1, [r3, #0]
 801409e:	f7ec f897 	bl	80001d0 <strcmp>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d141      	bne.n	801412a <rmw_send_response+0x9e>
 80140a6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80140aa:	9306      	str	r3, [sp, #24]
 80140ac:	4623      	mov	r3, r4
 80140ae:	9207      	str	r2, [sp, #28]
 80140b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140b4:	686d      	ldr	r5, [r5, #4]
 80140b6:	789b      	ldrb	r3, [r3, #2]
 80140b8:	68a1      	ldr	r1, [r4, #8]
 80140ba:	f88d 2017 	strb.w	r2, [sp, #23]
 80140be:	f88d 3016 	strb.w	r3, [sp, #22]
 80140c2:	68e2      	ldr	r2, [r4, #12]
 80140c4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80140c8:	6860      	ldr	r0, [r4, #4]
 80140ca:	f8ad 3014 	strh.w	r3, [sp, #20]
 80140ce:	ab02      	add	r3, sp, #8
 80140d0:	c307      	stmia	r3!, {r0, r1, r2}
 80140d2:	696b      	ldr	r3, [r5, #20]
 80140d4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	4798      	blx	r3
 80140da:	6844      	ldr	r4, [r0, #4]
 80140dc:	4630      	mov	r0, r6
 80140de:	6923      	ldr	r3, [r4, #16]
 80140e0:	4798      	blx	r3
 80140e2:	f100 0318 	add.w	r3, r0, #24
 80140e6:	6938      	ldr	r0, [r7, #16]
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	692a      	ldr	r2, [r5, #16]
 80140ec:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80140ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80140f2:	ab08      	add	r3, sp, #32
 80140f4:	f004 fae6 	bl	80186c4 <uxr_prepare_output_stream>
 80140f8:	b910      	cbnz	r0, 8014100 <rmw_send_response+0x74>
 80140fa:	2001      	movs	r0, #1
 80140fc:	b011      	add	sp, #68	@ 0x44
 80140fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014100:	a902      	add	r1, sp, #8
 8014102:	a808      	add	r0, sp, #32
 8014104:	f005 fc24 	bl	8019950 <uxr_serialize_SampleIdentity>
 8014108:	68a3      	ldr	r3, [r4, #8]
 801410a:	a908      	add	r1, sp, #32
 801410c:	4630      	mov	r0, r6
 801410e:	4798      	blx	r3
 8014110:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014114:	6938      	ldr	r0, [r7, #16]
 8014116:	2b01      	cmp	r3, #1
 8014118:	d00a      	beq.n	8014130 <rmw_send_response+0xa4>
 801411a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801411c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014120:	f002 fffc 	bl	801711c <uxr_run_session_until_confirm_delivery>
 8014124:	2000      	movs	r0, #0
 8014126:	b011      	add	sp, #68	@ 0x44
 8014128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801412a:	200c      	movs	r0, #12
 801412c:	b011      	add	sp, #68	@ 0x44
 801412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014130:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014134:	f002 fc32 	bl	801699c <uxr_flash_output_streams>
 8014138:	2000      	movs	r0, #0
 801413a:	b011      	add	sp, #68	@ 0x44
 801413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801413e:	bf00      	nop
 8014140:	0802444c 	.word	0x0802444c

08014144 <rmw_take_response>:
 8014144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014148:	4604      	mov	r4, r0
 801414a:	6800      	ldr	r0, [r0, #0]
 801414c:	b088      	sub	sp, #32
 801414e:	4688      	mov	r8, r1
 8014150:	4617      	mov	r7, r2
 8014152:	461d      	mov	r5, r3
 8014154:	b120      	cbz	r0, 8014160 <rmw_take_response+0x1c>
 8014156:	4b1e      	ldr	r3, [pc, #120]	@ (80141d0 <rmw_take_response+0x8c>)
 8014158:	6819      	ldr	r1, [r3, #0]
 801415a:	f7ec f839 	bl	80001d0 <strcmp>
 801415e:	bb78      	cbnz	r0, 80141c0 <rmw_take_response+0x7c>
 8014160:	b10d      	cbz	r5, 8014166 <rmw_take_response+0x22>
 8014162:	2300      	movs	r3, #0
 8014164:	702b      	strb	r3, [r5, #0]
 8014166:	6864      	ldr	r4, [r4, #4]
 8014168:	f000 fe5e 	bl	8014e28 <rmw_uxrce_clean_expired_static_input_buffer>
 801416c:	4620      	mov	r0, r4
 801416e:	f000 fe35 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014172:	4606      	mov	r6, r0
 8014174:	b340      	cbz	r0, 80141c8 <rmw_take_response+0x84>
 8014176:	6963      	ldr	r3, [r4, #20]
 8014178:	6884      	ldr	r4, [r0, #8]
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014180:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014184:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014188:	4798      	blx	r3
 801418a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801418e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014192:	f104 0110 	add.w	r1, r4, #16
 8014196:	4668      	mov	r0, sp
 8014198:	f7fb fa4a 	bl	800f630 <ucdr_init_buffer>
 801419c:	4639      	mov	r1, r7
 801419e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80141a2:	4668      	mov	r0, sp
 80141a4:	4798      	blx	r3
 80141a6:	4631      	mov	r1, r6
 80141a8:	4604      	mov	r4, r0
 80141aa:	480a      	ldr	r0, [pc, #40]	@ (80141d4 <rmw_take_response+0x90>)
 80141ac:	f006 ffa4 	bl	801b0f8 <put_memory>
 80141b0:	b105      	cbz	r5, 80141b4 <rmw_take_response+0x70>
 80141b2:	702c      	strb	r4, [r5, #0]
 80141b4:	f084 0001 	eor.w	r0, r4, #1
 80141b8:	b2c0      	uxtb	r0, r0
 80141ba:	b008      	add	sp, #32
 80141bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c0:	200c      	movs	r0, #12
 80141c2:	b008      	add	sp, #32
 80141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c8:	2001      	movs	r0, #1
 80141ca:	b008      	add	sp, #32
 80141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d0:	0802444c 	.word	0x0802444c
 80141d4:	200180fc 	.word	0x200180fc

080141d8 <rmw_destroy_service>:
 80141d8:	b570      	push	{r4, r5, r6, lr}
 80141da:	b128      	cbz	r0, 80141e8 <rmw_destroy_service+0x10>
 80141dc:	4604      	mov	r4, r0
 80141de:	6800      	ldr	r0, [r0, #0]
 80141e0:	460d      	mov	r5, r1
 80141e2:	f000 ff1f 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 80141e6:	b910      	cbnz	r0, 80141ee <rmw_destroy_service+0x16>
 80141e8:	2401      	movs	r4, #1
 80141ea:	4620      	mov	r0, r4
 80141ec:	bd70      	pop	{r4, r5, r6, pc}
 80141ee:	6863      	ldr	r3, [r4, #4]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d0f9      	beq.n	80141e8 <rmw_destroy_service+0x10>
 80141f4:	2d00      	cmp	r5, #0
 80141f6:	d0f7      	beq.n	80141e8 <rmw_destroy_service+0x10>
 80141f8:	6828      	ldr	r0, [r5, #0]
 80141fa:	f000 ff13 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d0f2      	beq.n	80141e8 <rmw_destroy_service+0x10>
 8014202:	686e      	ldr	r6, [r5, #4]
 8014204:	2e00      	cmp	r6, #0
 8014206:	d0ef      	beq.n	80141e8 <rmw_destroy_service+0x10>
 8014208:	6864      	ldr	r4, [r4, #4]
 801420a:	6932      	ldr	r2, [r6, #16]
 801420c:	6920      	ldr	r0, [r4, #16]
 801420e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014212:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014216:	6819      	ldr	r1, [r3, #0]
 8014218:	f002 f99a 	bl	8016550 <uxr_buffer_cancel_data>
 801421c:	4602      	mov	r2, r0
 801421e:	6920      	ldr	r0, [r4, #16]
 8014220:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014224:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014228:	f000 fe7c 	bl	8014f24 <run_xrce_session>
 801422c:	6920      	ldr	r0, [r4, #16]
 801422e:	6932      	ldr	r2, [r6, #16]
 8014230:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014234:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014238:	6819      	ldr	r1, [r3, #0]
 801423a:	f001 fe5b 	bl	8015ef4 <uxr_buffer_delete_entity>
 801423e:	4602      	mov	r2, r0
 8014240:	6920      	ldr	r0, [r4, #16]
 8014242:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014246:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801424a:	f000 fe6b 	bl	8014f24 <run_xrce_session>
 801424e:	2800      	cmp	r0, #0
 8014250:	4628      	mov	r0, r5
 8014252:	bf14      	ite	ne
 8014254:	2400      	movne	r4, #0
 8014256:	2402      	moveq	r4, #2
 8014258:	f000 fd38 	bl	8014ccc <rmw_uxrce_fini_service_memory>
 801425c:	e7c5      	b.n	80141ea <rmw_destroy_service+0x12>
 801425e:	bf00      	nop

08014260 <rmw_create_subscription>:
 8014260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014264:	b08d      	sub	sp, #52	@ 0x34
 8014266:	2800      	cmp	r0, #0
 8014268:	f000 80d1 	beq.w	801440e <rmw_create_subscription+0x1ae>
 801426c:	460e      	mov	r6, r1
 801426e:	2900      	cmp	r1, #0
 8014270:	f000 80cd 	beq.w	801440e <rmw_create_subscription+0x1ae>
 8014274:	4604      	mov	r4, r0
 8014276:	6800      	ldr	r0, [r0, #0]
 8014278:	4615      	mov	r5, r2
 801427a:	4698      	mov	r8, r3
 801427c:	f000 fed2 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 8014280:	2800      	cmp	r0, #0
 8014282:	f000 80c4 	beq.w	801440e <rmw_create_subscription+0x1ae>
 8014286:	2d00      	cmp	r5, #0
 8014288:	f000 80c1 	beq.w	801440e <rmw_create_subscription+0x1ae>
 801428c:	782b      	ldrb	r3, [r5, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	f000 80bd 	beq.w	801440e <rmw_create_subscription+0x1ae>
 8014294:	f1b8 0f00 	cmp.w	r8, #0
 8014298:	f000 80b9 	beq.w	801440e <rmw_create_subscription+0x1ae>
 801429c:	485e      	ldr	r0, [pc, #376]	@ (8014418 <rmw_create_subscription+0x1b8>)
 801429e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80142a2:	f006 ff19 	bl	801b0d8 <get_memory>
 80142a6:	4604      	mov	r4, r0
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f000 80b1 	beq.w	8014410 <rmw_create_subscription+0x1b0>
 80142ae:	6887      	ldr	r7, [r0, #8]
 80142b0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80142b4:	f7ff f946 	bl	8013544 <rmw_get_implementation_identifier>
 80142b8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80142bc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80142be:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80142c2:	4628      	mov	r0, r5
 80142c4:	f7eb ffe4 	bl	8000290 <strlen>
 80142c8:	3001      	adds	r0, #1
 80142ca:	283c      	cmp	r0, #60	@ 0x3c
 80142cc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80142d0:	f200 8096 	bhi.w	8014400 <rmw_create_subscription+0x1a0>
 80142d4:	4a51      	ldr	r2, [pc, #324]	@ (801441c <rmw_create_subscription+0x1bc>)
 80142d6:	462b      	mov	r3, r5
 80142d8:	213c      	movs	r1, #60	@ 0x3c
 80142da:	4650      	mov	r0, sl
 80142dc:	f008 ff58 	bl	801d190 <sniprintf>
 80142e0:	4641      	mov	r1, r8
 80142e2:	f8c7 9020 	str.w	r9, [r7, #32]
 80142e6:	2250      	movs	r2, #80	@ 0x50
 80142e8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80142ec:	f009 f9bd 	bl	801d66a <memcpy>
 80142f0:	494b      	ldr	r1, [pc, #300]	@ (8014420 <rmw_create_subscription+0x1c0>)
 80142f2:	4630      	mov	r0, r6
 80142f4:	f001 f898 	bl	8015428 <get_message_typesupport_handle>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	f000 8081 	beq.w	8014400 <rmw_create_subscription+0x1a0>
 80142fe:	6842      	ldr	r2, [r0, #4]
 8014300:	61ba      	str	r2, [r7, #24]
 8014302:	2a00      	cmp	r2, #0
 8014304:	d07c      	beq.n	8014400 <rmw_create_subscription+0x1a0>
 8014306:	4629      	mov	r1, r5
 8014308:	4643      	mov	r3, r8
 801430a:	4648      	mov	r0, r9
 801430c:	f006 ff30 	bl	801b170 <create_topic>
 8014310:	61f8      	str	r0, [r7, #28]
 8014312:	2800      	cmp	r0, #0
 8014314:	d078      	beq.n	8014408 <rmw_create_subscription+0x1a8>
 8014316:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801431a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801431e:	2104      	movs	r1, #4
 8014320:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8014324:	1c42      	adds	r2, r0, #1
 8014326:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801432a:	f002 f8a7 	bl	801647c <uxr_object_id>
 801432e:	6138      	str	r0, [r7, #16]
 8014330:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014334:	2506      	movs	r5, #6
 8014336:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801433a:	9500      	str	r5, [sp, #0]
 801433c:	6819      	ldr	r1, [r3, #0]
 801433e:	693a      	ldr	r2, [r7, #16]
 8014340:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014344:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014348:	f001 feb8 	bl	80160bc <uxr_buffer_create_subscriber_bin>
 801434c:	4602      	mov	r2, r0
 801434e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014352:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014356:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801435a:	f000 fde3 	bl	8014f24 <run_xrce_session>
 801435e:	2800      	cmp	r0, #0
 8014360:	d04e      	beq.n	8014400 <rmw_create_subscription+0x1a0>
 8014362:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801436a:	4629      	mov	r1, r5
 801436c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8014370:	1c42      	adds	r2, r0, #1
 8014372:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8014376:	f002 f881 	bl	801647c <uxr_object_id>
 801437a:	ae08      	add	r6, sp, #32
 801437c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	6178      	str	r0, [r7, #20]
 8014384:	4641      	mov	r1, r8
 8014386:	4630      	mov	r0, r6
 8014388:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801438c:	9305      	str	r3, [sp, #20]
 801438e:	f000 fde5 	bl	8014f5c <convert_qos_profile>
 8014392:	9503      	str	r5, [sp, #12]
 8014394:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014398:	9b05      	ldr	r3, [sp, #20]
 801439a:	9001      	str	r0, [sp, #4]
 801439c:	f8ad 1008 	strh.w	r1, [sp, #8]
 80143a0:	691b      	ldr	r3, [r3, #16]
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80143a8:	f8db 1000 	ldr.w	r1, [fp]
 80143ac:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80143b0:	f001 ff2a 	bl	8016208 <uxr_buffer_create_datareader_bin>
 80143b4:	4602      	mov	r2, r0
 80143b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80143ba:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80143be:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80143c2:	f000 fdaf 	bl	8014f24 <run_xrce_session>
 80143c6:	b1d8      	cbz	r0, 8014400 <rmw_create_subscription+0x1a0>
 80143c8:	f898 3008 	ldrb.w	r3, [r8, #8]
 80143cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80143d0:	2b02      	cmp	r3, #2
 80143d2:	bf0c      	ite	eq
 80143d4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80143d8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80143dc:	9307      	str	r3, [sp, #28]
 80143de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80143e2:	2200      	movs	r2, #0
 80143e4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80143e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80143ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80143ee:	9300      	str	r3, [sp, #0]
 80143f0:	697a      	ldr	r2, [r7, #20]
 80143f2:	9b07      	ldr	r3, [sp, #28]
 80143f4:	6809      	ldr	r1, [r1, #0]
 80143f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80143fa:	f002 f86f 	bl	80164dc <uxr_buffer_request_data>
 80143fe:	e007      	b.n	8014410 <rmw_create_subscription+0x1b0>
 8014400:	69f8      	ldr	r0, [r7, #28]
 8014402:	b108      	cbz	r0, 8014408 <rmw_create_subscription+0x1a8>
 8014404:	f000 fc8e 	bl	8014d24 <rmw_uxrce_fini_topic_memory>
 8014408:	4620      	mov	r0, r4
 801440a:	f000 fc49 	bl	8014ca0 <rmw_uxrce_fini_subscription_memory>
 801440e:	2400      	movs	r4, #0
 8014410:	4620      	mov	r0, r4
 8014412:	b00d      	add	sp, #52	@ 0x34
 8014414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014418:	2001810c 	.word	0x2001810c
 801441c:	080239b4 	.word	0x080239b4
 8014420:	080234a4 	.word	0x080234a4

08014424 <rmw_subscription_get_actual_qos>:
 8014424:	b150      	cbz	r0, 801443c <rmw_subscription_get_actual_qos+0x18>
 8014426:	b508      	push	{r3, lr}
 8014428:	460b      	mov	r3, r1
 801442a:	b149      	cbz	r1, 8014440 <rmw_subscription_get_actual_qos+0x1c>
 801442c:	6841      	ldr	r1, [r0, #4]
 801442e:	2250      	movs	r2, #80	@ 0x50
 8014430:	3128      	adds	r1, #40	@ 0x28
 8014432:	4618      	mov	r0, r3
 8014434:	f009 f919 	bl	801d66a <memcpy>
 8014438:	2000      	movs	r0, #0
 801443a:	bd08      	pop	{r3, pc}
 801443c:	200b      	movs	r0, #11
 801443e:	4770      	bx	lr
 8014440:	200b      	movs	r0, #11
 8014442:	bd08      	pop	{r3, pc}

08014444 <rmw_destroy_subscription>:
 8014444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014446:	b128      	cbz	r0, 8014454 <rmw_destroy_subscription+0x10>
 8014448:	4604      	mov	r4, r0
 801444a:	6800      	ldr	r0, [r0, #0]
 801444c:	460d      	mov	r5, r1
 801444e:	f000 fde9 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 8014452:	b910      	cbnz	r0, 801445a <rmw_destroy_subscription+0x16>
 8014454:	2401      	movs	r4, #1
 8014456:	4620      	mov	r0, r4
 8014458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801445a:	6863      	ldr	r3, [r4, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d0f9      	beq.n	8014454 <rmw_destroy_subscription+0x10>
 8014460:	2d00      	cmp	r5, #0
 8014462:	d0f7      	beq.n	8014454 <rmw_destroy_subscription+0x10>
 8014464:	6828      	ldr	r0, [r5, #0]
 8014466:	f000 fddd 	bl	8015024 <is_uxrce_rmw_identifier_valid>
 801446a:	2800      	cmp	r0, #0
 801446c:	d0f2      	beq.n	8014454 <rmw_destroy_subscription+0x10>
 801446e:	686c      	ldr	r4, [r5, #4]
 8014470:	2c00      	cmp	r4, #0
 8014472:	d0ef      	beq.n	8014454 <rmw_destroy_subscription+0x10>
 8014474:	6a26      	ldr	r6, [r4, #32]
 8014476:	6962      	ldr	r2, [r4, #20]
 8014478:	6930      	ldr	r0, [r6, #16]
 801447a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801447e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014482:	6819      	ldr	r1, [r3, #0]
 8014484:	f002 f864 	bl	8016550 <uxr_buffer_cancel_data>
 8014488:	4602      	mov	r2, r0
 801448a:	6930      	ldr	r0, [r6, #16]
 801448c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014490:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014494:	f000 fd46 	bl	8014f24 <run_xrce_session>
 8014498:	69e0      	ldr	r0, [r4, #28]
 801449a:	f006 feb9 	bl	801b210 <destroy_topic>
 801449e:	6a23      	ldr	r3, [r4, #32]
 80144a0:	6962      	ldr	r2, [r4, #20]
 80144a2:	6918      	ldr	r0, [r3, #16]
 80144a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80144a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80144ac:	6819      	ldr	r1, [r3, #0]
 80144ae:	f001 fd21 	bl	8015ef4 <uxr_buffer_delete_entity>
 80144b2:	6a23      	ldr	r3, [r4, #32]
 80144b4:	6922      	ldr	r2, [r4, #16]
 80144b6:	691b      	ldr	r3, [r3, #16]
 80144b8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80144bc:	4604      	mov	r4, r0
 80144be:	6809      	ldr	r1, [r1, #0]
 80144c0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80144c4:	f001 fd16 	bl	8015ef4 <uxr_buffer_delete_entity>
 80144c8:	6937      	ldr	r7, [r6, #16]
 80144ca:	4622      	mov	r2, r4
 80144cc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80144d0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80144d4:	4604      	mov	r4, r0
 80144d6:	4638      	mov	r0, r7
 80144d8:	f000 fd24 	bl	8014f24 <run_xrce_session>
 80144dc:	6936      	ldr	r6, [r6, #16]
 80144de:	4622      	mov	r2, r4
 80144e0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80144e4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80144e8:	4604      	mov	r4, r0
 80144ea:	4630      	mov	r0, r6
 80144ec:	f000 fd1a 	bl	8014f24 <run_xrce_session>
 80144f0:	b12c      	cbz	r4, 80144fe <rmw_destroy_subscription+0xba>
 80144f2:	b120      	cbz	r0, 80144fe <rmw_destroy_subscription+0xba>
 80144f4:	2400      	movs	r4, #0
 80144f6:	4628      	mov	r0, r5
 80144f8:	f000 fbd2 	bl	8014ca0 <rmw_uxrce_fini_subscription_memory>
 80144fc:	e7ab      	b.n	8014456 <rmw_destroy_subscription+0x12>
 80144fe:	2402      	movs	r4, #2
 8014500:	e7f9      	b.n	80144f6 <rmw_destroy_subscription+0xb2>
 8014502:	bf00      	nop

08014504 <rmw_take_with_info>:
 8014504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014506:	4604      	mov	r4, r0
 8014508:	6800      	ldr	r0, [r0, #0]
 801450a:	b089      	sub	sp, #36	@ 0x24
 801450c:	460f      	mov	r7, r1
 801450e:	4615      	mov	r5, r2
 8014510:	b128      	cbz	r0, 801451e <rmw_take_with_info+0x1a>
 8014512:	4b24      	ldr	r3, [pc, #144]	@ (80145a4 <rmw_take_with_info+0xa0>)
 8014514:	6819      	ldr	r1, [r3, #0]
 8014516:	f7eb fe5b 	bl	80001d0 <strcmp>
 801451a:	2800      	cmp	r0, #0
 801451c:	d13e      	bne.n	801459c <rmw_take_with_info+0x98>
 801451e:	b305      	cbz	r5, 8014562 <rmw_take_with_info+0x5e>
 8014520:	6864      	ldr	r4, [r4, #4]
 8014522:	2300      	movs	r3, #0
 8014524:	702b      	strb	r3, [r5, #0]
 8014526:	f000 fc7f 	bl	8014e28 <rmw_uxrce_clean_expired_static_input_buffer>
 801452a:	4620      	mov	r0, r4
 801452c:	f000 fc56 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014530:	4606      	mov	r6, r0
 8014532:	b1f0      	cbz	r0, 8014572 <rmw_take_with_info+0x6e>
 8014534:	6881      	ldr	r1, [r0, #8]
 8014536:	4668      	mov	r0, sp
 8014538:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801453c:	3110      	adds	r1, #16
 801453e:	f7fb f877 	bl	800f630 <ucdr_init_buffer>
 8014542:	69a3      	ldr	r3, [r4, #24]
 8014544:	4639      	mov	r1, r7
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	4668      	mov	r0, sp
 801454a:	4798      	blx	r3
 801454c:	4631      	mov	r1, r6
 801454e:	4604      	mov	r4, r0
 8014550:	4815      	ldr	r0, [pc, #84]	@ (80145a8 <rmw_take_with_info+0xa4>)
 8014552:	f006 fdd1 	bl	801b0f8 <put_memory>
 8014556:	702c      	strb	r4, [r5, #0]
 8014558:	f084 0001 	eor.w	r0, r4, #1
 801455c:	b2c0      	uxtb	r0, r0
 801455e:	b009      	add	sp, #36	@ 0x24
 8014560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014562:	6864      	ldr	r4, [r4, #4]
 8014564:	f000 fc60 	bl	8014e28 <rmw_uxrce_clean_expired_static_input_buffer>
 8014568:	4620      	mov	r0, r4
 801456a:	f000 fc37 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 801456e:	4605      	mov	r5, r0
 8014570:	b910      	cbnz	r0, 8014578 <rmw_take_with_info+0x74>
 8014572:	2001      	movs	r0, #1
 8014574:	b009      	add	sp, #36	@ 0x24
 8014576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014578:	68a9      	ldr	r1, [r5, #8]
 801457a:	4668      	mov	r0, sp
 801457c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014580:	3110      	adds	r1, #16
 8014582:	f7fb f855 	bl	800f630 <ucdr_init_buffer>
 8014586:	69a3      	ldr	r3, [r4, #24]
 8014588:	4639      	mov	r1, r7
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	4668      	mov	r0, sp
 801458e:	4798      	blx	r3
 8014590:	4629      	mov	r1, r5
 8014592:	4604      	mov	r4, r0
 8014594:	4804      	ldr	r0, [pc, #16]	@ (80145a8 <rmw_take_with_info+0xa4>)
 8014596:	f006 fdaf 	bl	801b0f8 <put_memory>
 801459a:	e7dd      	b.n	8014558 <rmw_take_with_info+0x54>
 801459c:	200c      	movs	r0, #12
 801459e:	b009      	add	sp, #36	@ 0x24
 80145a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145a2:	bf00      	nop
 80145a4:	0802444c 	.word	0x0802444c
 80145a8:	200180fc 	.word	0x200180fc

080145ac <rmw_uxrce_transport_init>:
 80145ac:	b508      	push	{r3, lr}
 80145ae:	b108      	cbz	r0, 80145b4 <rmw_uxrce_transport_init+0x8>
 80145b0:	f100 0210 	add.w	r2, r0, #16
 80145b4:	b139      	cbz	r1, 80145c6 <rmw_uxrce_transport_init+0x1a>
 80145b6:	6949      	ldr	r1, [r1, #20]
 80145b8:	4610      	mov	r0, r2
 80145ba:	f001 ff27 	bl	801640c <uxr_init_custom_transport>
 80145be:	f080 0001 	eor.w	r0, r0, #1
 80145c2:	b2c0      	uxtb	r0, r0
 80145c4:	bd08      	pop	{r3, pc}
 80145c6:	4b04      	ldr	r3, [pc, #16]	@ (80145d8 <rmw_uxrce_transport_init+0x2c>)
 80145c8:	4610      	mov	r0, r2
 80145ca:	6859      	ldr	r1, [r3, #4]
 80145cc:	f001 ff1e 	bl	801640c <uxr_init_custom_transport>
 80145d0:	f080 0001 	eor.w	r0, r0, #1
 80145d4:	b2c0      	uxtb	r0, r0
 80145d6:	bd08      	pop	{r3, pc}
 80145d8:	20013798 	.word	0x20013798

080145dc <rmw_wait>:
 80145dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145e0:	b089      	sub	sp, #36	@ 0x24
 80145e2:	4605      	mov	r5, r0
 80145e4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80145e6:	460e      	mov	r6, r1
 80145e8:	4698      	mov	r8, r3
 80145ea:	4691      	mov	r9, r2
 80145ec:	2a00      	cmp	r2, #0
 80145ee:	f000 810a 	beq.w	8014806 <rmw_wait+0x22a>
 80145f2:	b16c      	cbz	r4, 8014610 <rmw_wait+0x34>
 80145f4:	4bae      	ldr	r3, [pc, #696]	@ (80148b0 <rmw_wait+0x2d4>)
 80145f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80145f8:	af04      	add	r7, sp, #16
 80145fa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80145fe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014602:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014606:	f000 fd43 	bl	8015090 <rmw_time_equal>
 801460a:	2800      	cmp	r0, #0
 801460c:	f000 8127 	beq.w	801485e <rmw_wait+0x282>
 8014610:	f04f 37ff 	mov.w	r7, #4294967295
 8014614:	f000 fc08 	bl	8014e28 <rmw_uxrce_clean_expired_static_input_buffer>
 8014618:	4ba6      	ldr	r3, [pc, #664]	@ (80148b4 <rmw_wait+0x2d8>)
 801461a:	681c      	ldr	r4, [r3, #0]
 801461c:	b14c      	cbz	r4, 8014632 <rmw_wait+0x56>
 801461e:	4623      	mov	r3, r4
 8014620:	2100      	movs	r1, #0
 8014622:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801462a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801462e:	2b00      	cmp	r3, #0
 8014630:	d1f7      	bne.n	8014622 <rmw_wait+0x46>
 8014632:	f1b9 0f00 	cmp.w	r9, #0
 8014636:	d011      	beq.n	801465c <rmw_wait+0x80>
 8014638:	f8d9 1000 	ldr.w	r1, [r9]
 801463c:	b171      	cbz	r1, 801465c <rmw_wait+0x80>
 801463e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014642:	2300      	movs	r3, #0
 8014644:	2001      	movs	r0, #1
 8014646:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801464a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801464c:	6912      	ldr	r2, [r2, #16]
 801464e:	3301      	adds	r3, #1
 8014650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014654:	4299      	cmp	r1, r3
 8014656:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801465a:	d1f4      	bne.n	8014646 <rmw_wait+0x6a>
 801465c:	f1b8 0f00 	cmp.w	r8, #0
 8014660:	d011      	beq.n	8014686 <rmw_wait+0xaa>
 8014662:	f8d8 1000 	ldr.w	r1, [r8]
 8014666:	b171      	cbz	r1, 8014686 <rmw_wait+0xaa>
 8014668:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801466c:	2300      	movs	r3, #0
 801466e:	2001      	movs	r0, #1
 8014670:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014674:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014676:	6912      	ldr	r2, [r2, #16]
 8014678:	3301      	adds	r3, #1
 801467a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801467e:	4299      	cmp	r1, r3
 8014680:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014684:	d1f4      	bne.n	8014670 <rmw_wait+0x94>
 8014686:	b185      	cbz	r5, 80146aa <rmw_wait+0xce>
 8014688:	6829      	ldr	r1, [r5, #0]
 801468a:	b171      	cbz	r1, 80146aa <rmw_wait+0xce>
 801468c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014690:	2300      	movs	r3, #0
 8014692:	2001      	movs	r0, #1
 8014694:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014698:	6a12      	ldr	r2, [r2, #32]
 801469a:	6912      	ldr	r2, [r2, #16]
 801469c:	3301      	adds	r3, #1
 801469e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80146a2:	4299      	cmp	r1, r3
 80146a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80146a8:	d1f4      	bne.n	8014694 <rmw_wait+0xb8>
 80146aa:	b34c      	cbz	r4, 8014700 <rmw_wait+0x124>
 80146ac:	4622      	mov	r2, r4
 80146ae:	2300      	movs	r3, #0
 80146b0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80146b4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80146b8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80146bc:	440b      	add	r3, r1
 80146be:	b2db      	uxtb	r3, r3
 80146c0:	2a00      	cmp	r2, #0
 80146c2:	d1f5      	bne.n	80146b0 <rmw_wait+0xd4>
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	f000 8084 	beq.w	80147d2 <rmw_wait+0x1f6>
 80146ca:	1c7a      	adds	r2, r7, #1
 80146cc:	d00d      	beq.n	80146ea <rmw_wait+0x10e>
 80146ce:	ee07 7a90 	vmov	s15, r7
 80146d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80146d6:	ee07 3a90 	vmov	s15, r3
 80146da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80146e2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80146e6:	ee17 7a90 	vmov	r7, s15
 80146ea:	68a0      	ldr	r0, [r4, #8]
 80146ec:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80146f0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	f040 8090 	bne.w	801481a <rmw_wait+0x23e>
 80146fa:	6864      	ldr	r4, [r4, #4]
 80146fc:	2c00      	cmp	r4, #0
 80146fe:	d1f4      	bne.n	80146ea <rmw_wait+0x10e>
 8014700:	f1b9 0f00 	cmp.w	r9, #0
 8014704:	f000 80bc 	beq.w	8014880 <rmw_wait+0x2a4>
 8014708:	f8d9 7000 	ldr.w	r7, [r9]
 801470c:	2f00      	cmp	r7, #0
 801470e:	f000 808e 	beq.w	801482e <rmw_wait+0x252>
 8014712:	2400      	movs	r4, #0
 8014714:	4627      	mov	r7, r4
 8014716:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801471a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801471e:	f000 fb5d 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014722:	2800      	cmp	r0, #0
 8014724:	d05f      	beq.n	80147e6 <rmw_wait+0x20a>
 8014726:	f8d9 3000 	ldr.w	r3, [r9]
 801472a:	3401      	adds	r4, #1
 801472c:	42a3      	cmp	r3, r4
 801472e:	f04f 0701 	mov.w	r7, #1
 8014732:	d8f0      	bhi.n	8014716 <rmw_wait+0x13a>
 8014734:	f1b8 0f00 	cmp.w	r8, #0
 8014738:	d012      	beq.n	8014760 <rmw_wait+0x184>
 801473a:	f8d8 3000 	ldr.w	r3, [r8]
 801473e:	b17b      	cbz	r3, 8014760 <rmw_wait+0x184>
 8014740:	2400      	movs	r4, #0
 8014742:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014746:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801474a:	f000 fb47 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 801474e:	2800      	cmp	r0, #0
 8014750:	d051      	beq.n	80147f6 <rmw_wait+0x21a>
 8014752:	f8d8 3000 	ldr.w	r3, [r8]
 8014756:	3401      	adds	r4, #1
 8014758:	42a3      	cmp	r3, r4
 801475a:	f04f 0701 	mov.w	r7, #1
 801475e:	d8f0      	bhi.n	8014742 <rmw_wait+0x166>
 8014760:	b1dd      	cbz	r5, 801479a <rmw_wait+0x1be>
 8014762:	682b      	ldr	r3, [r5, #0]
 8014764:	b1cb      	cbz	r3, 801479a <rmw_wait+0x1be>
 8014766:	2400      	movs	r4, #0
 8014768:	686b      	ldr	r3, [r5, #4]
 801476a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801476e:	f000 fb35 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014772:	b158      	cbz	r0, 801478c <rmw_wait+0x1b0>
 8014774:	682b      	ldr	r3, [r5, #0]
 8014776:	3401      	adds	r4, #1
 8014778:	42a3      	cmp	r3, r4
 801477a:	d969      	bls.n	8014850 <rmw_wait+0x274>
 801477c:	686b      	ldr	r3, [r5, #4]
 801477e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014782:	2701      	movs	r7, #1
 8014784:	f000 fb2a 	bl	8014ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014788:	2800      	cmp	r0, #0
 801478a:	d1f3      	bne.n	8014774 <rmw_wait+0x198>
 801478c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8014790:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014794:	3401      	adds	r4, #1
 8014796:	42a3      	cmp	r3, r4
 8014798:	d8e6      	bhi.n	8014768 <rmw_wait+0x18c>
 801479a:	b1a6      	cbz	r6, 80147c6 <rmw_wait+0x1ea>
 801479c:	6834      	ldr	r4, [r6, #0]
 801479e:	b194      	cbz	r4, 80147c6 <rmw_wait+0x1ea>
 80147a0:	2300      	movs	r3, #0
 80147a2:	461d      	mov	r5, r3
 80147a4:	e004      	b.n	80147b0 <rmw_wait+0x1d4>
 80147a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80147aa:	3301      	adds	r3, #1
 80147ac:	42a3      	cmp	r3, r4
 80147ae:	d00a      	beq.n	80147c6 <rmw_wait+0x1ea>
 80147b0:	6870      	ldr	r0, [r6, #4]
 80147b2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80147b6:	7c0a      	ldrb	r2, [r1, #16]
 80147b8:	2a00      	cmp	r2, #0
 80147ba:	d0f4      	beq.n	80147a6 <rmw_wait+0x1ca>
 80147bc:	3301      	adds	r3, #1
 80147be:	42a3      	cmp	r3, r4
 80147c0:	740d      	strb	r5, [r1, #16]
 80147c2:	4617      	mov	r7, r2
 80147c4:	d1f4      	bne.n	80147b0 <rmw_wait+0x1d4>
 80147c6:	2f00      	cmp	r7, #0
 80147c8:	d03e      	beq.n	8014848 <rmw_wait+0x26c>
 80147ca:	2000      	movs	r0, #0
 80147cc:	b009      	add	sp, #36	@ 0x24
 80147ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147d2:	68a0      	ldr	r0, [r4, #8]
 80147d4:	2100      	movs	r1, #0
 80147d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147da:	f002 fc65 	bl	80170a8 <uxr_run_session_timeout>
 80147de:	6864      	ldr	r4, [r4, #4]
 80147e0:	2c00      	cmp	r4, #0
 80147e2:	d1f6      	bne.n	80147d2 <rmw_wait+0x1f6>
 80147e4:	e78c      	b.n	8014700 <rmw_wait+0x124>
 80147e6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80147ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80147ee:	3401      	adds	r4, #1
 80147f0:	42a3      	cmp	r3, r4
 80147f2:	d890      	bhi.n	8014716 <rmw_wait+0x13a>
 80147f4:	e79e      	b.n	8014734 <rmw_wait+0x158>
 80147f6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80147fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80147fe:	3401      	adds	r4, #1
 8014800:	429c      	cmp	r4, r3
 8014802:	d39e      	bcc.n	8014742 <rmw_wait+0x166>
 8014804:	e7ac      	b.n	8014760 <rmw_wait+0x184>
 8014806:	2b00      	cmp	r3, #0
 8014808:	f47f aef3 	bne.w	80145f2 <rmw_wait+0x16>
 801480c:	2800      	cmp	r0, #0
 801480e:	f47f aef0 	bne.w	80145f2 <rmw_wait+0x16>
 8014812:	2900      	cmp	r1, #0
 8014814:	f47f aeed 	bne.w	80145f2 <rmw_wait+0x16>
 8014818:	e7d7      	b.n	80147ca <rmw_wait+0x1ee>
 801481a:	4639      	mov	r1, r7
 801481c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014820:	f002 fc5c 	bl	80170dc <uxr_run_session_until_data>
 8014824:	6864      	ldr	r4, [r4, #4]
 8014826:	2c00      	cmp	r4, #0
 8014828:	f47f af5f 	bne.w	80146ea <rmw_wait+0x10e>
 801482c:	e768      	b.n	8014700 <rmw_wait+0x124>
 801482e:	f1b8 0f00 	cmp.w	r8, #0
 8014832:	d032      	beq.n	801489a <rmw_wait+0x2be>
 8014834:	f8d8 3000 	ldr.w	r3, [r8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d181      	bne.n	8014740 <rmw_wait+0x164>
 801483c:	461f      	mov	r7, r3
 801483e:	2d00      	cmp	r5, #0
 8014840:	d18f      	bne.n	8014762 <rmw_wait+0x186>
 8014842:	462f      	mov	r7, r5
 8014844:	2e00      	cmp	r6, #0
 8014846:	d1a9      	bne.n	801479c <rmw_wait+0x1c0>
 8014848:	2002      	movs	r0, #2
 801484a:	b009      	add	sp, #36	@ 0x24
 801484c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014850:	2e00      	cmp	r6, #0
 8014852:	d0ba      	beq.n	80147ca <rmw_wait+0x1ee>
 8014854:	6834      	ldr	r4, [r6, #0]
 8014856:	2701      	movs	r7, #1
 8014858:	2c00      	cmp	r4, #0
 801485a:	d1a1      	bne.n	80147a0 <rmw_wait+0x1c4>
 801485c:	e7b5      	b.n	80147ca <rmw_wait+0x1ee>
 801485e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014862:	f000 fc69 	bl	8015138 <rmw_time_total_nsec>
 8014866:	2300      	movs	r3, #0
 8014868:	4a13      	ldr	r2, [pc, #76]	@ (80148b8 <rmw_wait+0x2dc>)
 801486a:	f7ec fa4d 	bl	8000d08 <__aeabi_uldivmod>
 801486e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014872:	f171 0300 	sbcs.w	r3, r1, #0
 8014876:	4607      	mov	r7, r0
 8014878:	bfa8      	it	ge
 801487a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801487e:	e6c9      	b.n	8014614 <rmw_wait+0x38>
 8014880:	f1b8 0f00 	cmp.w	r8, #0
 8014884:	d009      	beq.n	801489a <rmw_wait+0x2be>
 8014886:	f8d8 3000 	ldr.w	r3, [r8]
 801488a:	464f      	mov	r7, r9
 801488c:	2b00      	cmp	r3, #0
 801488e:	f47f af57 	bne.w	8014740 <rmw_wait+0x164>
 8014892:	2d00      	cmp	r5, #0
 8014894:	f47f af65 	bne.w	8014762 <rmw_wait+0x186>
 8014898:	e7d3      	b.n	8014842 <rmw_wait+0x266>
 801489a:	b17d      	cbz	r5, 80148bc <rmw_wait+0x2e0>
 801489c:	682b      	ldr	r3, [r5, #0]
 801489e:	4647      	mov	r7, r8
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f47f af60 	bne.w	8014766 <rmw_wait+0x18a>
 80148a6:	2e00      	cmp	r6, #0
 80148a8:	f47f af78 	bne.w	801479c <rmw_wait+0x1c0>
 80148ac:	e7cc      	b.n	8014848 <rmw_wait+0x26c>
 80148ae:	bf00      	nop
 80148b0:	080221d8 	.word	0x080221d8
 80148b4:	200180ec 	.word	0x200180ec
 80148b8:	000f4240 	.word	0x000f4240
 80148bc:	2e00      	cmp	r6, #0
 80148be:	d0c3      	beq.n	8014848 <rmw_wait+0x26c>
 80148c0:	6834      	ldr	r4, [r6, #0]
 80148c2:	462f      	mov	r7, r5
 80148c4:	2c00      	cmp	r4, #0
 80148c6:	f47f af6b 	bne.w	80147a0 <rmw_wait+0x1c4>
 80148ca:	e7bd      	b.n	8014848 <rmw_wait+0x26c>

080148cc <rmw_create_wait_set>:
 80148cc:	b508      	push	{r3, lr}
 80148ce:	4803      	ldr	r0, [pc, #12]	@ (80148dc <rmw_create_wait_set+0x10>)
 80148d0:	f006 fc02 	bl	801b0d8 <get_memory>
 80148d4:	b108      	cbz	r0, 80148da <rmw_create_wait_set+0xe>
 80148d6:	6880      	ldr	r0, [r0, #8]
 80148d8:	3010      	adds	r0, #16
 80148da:	bd08      	pop	{r3, pc}
 80148dc:	2001812c 	.word	0x2001812c

080148e0 <rmw_destroy_wait_set>:
 80148e0:	b508      	push	{r3, lr}
 80148e2:	4b08      	ldr	r3, [pc, #32]	@ (8014904 <rmw_destroy_wait_set+0x24>)
 80148e4:	6819      	ldr	r1, [r3, #0]
 80148e6:	b911      	cbnz	r1, 80148ee <rmw_destroy_wait_set+0xe>
 80148e8:	e00a      	b.n	8014900 <rmw_destroy_wait_set+0x20>
 80148ea:	6849      	ldr	r1, [r1, #4]
 80148ec:	b141      	cbz	r1, 8014900 <rmw_destroy_wait_set+0x20>
 80148ee:	688b      	ldr	r3, [r1, #8]
 80148f0:	3310      	adds	r3, #16
 80148f2:	4298      	cmp	r0, r3
 80148f4:	d1f9      	bne.n	80148ea <rmw_destroy_wait_set+0xa>
 80148f6:	4803      	ldr	r0, [pc, #12]	@ (8014904 <rmw_destroy_wait_set+0x24>)
 80148f8:	f006 fbfe 	bl	801b0f8 <put_memory>
 80148fc:	2000      	movs	r0, #0
 80148fe:	bd08      	pop	{r3, pc}
 8014900:	2001      	movs	r0, #1
 8014902:	bd08      	pop	{r3, pc}
 8014904:	2001812c 	.word	0x2001812c

08014908 <rmw_uros_epoch_synchronized>:
 8014908:	4b03      	ldr	r3, [pc, #12]	@ (8014918 <rmw_uros_epoch_synchronized+0x10>)
 801490a:	6818      	ldr	r0, [r3, #0]
 801490c:	b110      	cbz	r0, 8014914 <rmw_uros_epoch_synchronized+0xc>
 801490e:	6883      	ldr	r3, [r0, #8]
 8014910:	f893 0340 	ldrb.w	r0, [r3, #832]	@ 0x340
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop
 8014918:	200180ec 	.word	0x200180ec

0801491c <rmw_uros_epoch_millis>:
 801491c:	4b05      	ldr	r3, [pc, #20]	@ (8014934 <rmw_uros_epoch_millis+0x18>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	b123      	cbz	r3, 801492c <rmw_uros_epoch_millis+0x10>
 8014922:	6898      	ldr	r0, [r3, #8]
 8014924:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014928:	f002 b81c 	b.w	8016964 <uxr_epoch_millis>
 801492c:	2000      	movs	r0, #0
 801492e:	2100      	movs	r1, #0
 8014930:	4770      	bx	lr
 8014932:	bf00      	nop
 8014934:	200180ec 	.word	0x200180ec

08014938 <rmw_uros_epoch_nanos>:
 8014938:	4b05      	ldr	r3, [pc, #20]	@ (8014950 <rmw_uros_epoch_nanos+0x18>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	b123      	cbz	r3, 8014948 <rmw_uros_epoch_nanos+0x10>
 801493e:	6898      	ldr	r0, [r3, #8]
 8014940:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014944:	f002 b820 	b.w	8016988 <uxr_epoch_nanos>
 8014948:	2000      	movs	r0, #0
 801494a:	2100      	movs	r1, #0
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop
 8014950:	200180ec 	.word	0x200180ec

08014954 <rmw_uros_sync_session>:
 8014954:	b508      	push	{r3, lr}
 8014956:	4b07      	ldr	r3, [pc, #28]	@ (8014974 <rmw_uros_sync_session+0x20>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	b14b      	cbz	r3, 8014970 <rmw_uros_sync_session+0x1c>
 801495c:	4601      	mov	r1, r0
 801495e:	6898      	ldr	r0, [r3, #8]
 8014960:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014964:	f002 fc54 	bl	8017210 <uxr_sync_session>
 8014968:	f080 0001 	eor.w	r0, r0, #1
 801496c:	b2c0      	uxtb	r0, r0
 801496e:	bd08      	pop	{r3, pc}
 8014970:	2001      	movs	r0, #1
 8014972:	bd08      	pop	{r3, pc}
 8014974:	200180ec 	.word	0x200180ec

08014978 <rmw_uxrce_init_service_memory>:
 8014978:	b1e2      	cbz	r2, 80149b4 <rmw_uxrce_init_service_memory+0x3c>
 801497a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801497e:	7b05      	ldrb	r5, [r0, #12]
 8014980:	4606      	mov	r6, r0
 8014982:	b9ad      	cbnz	r5, 80149b0 <rmw_uxrce_init_service_memory+0x38>
 8014984:	23c8      	movs	r3, #200	@ 0xc8
 8014986:	e9c0 5500 	strd	r5, r5, [r0]
 801498a:	6083      	str	r3, [r0, #8]
 801498c:	f240 1301 	movw	r3, #257	@ 0x101
 8014990:	4617      	mov	r7, r2
 8014992:	8183      	strh	r3, [r0, #12]
 8014994:	460c      	mov	r4, r1
 8014996:	46a8      	mov	r8, r5
 8014998:	4621      	mov	r1, r4
 801499a:	4630      	mov	r0, r6
 801499c:	3501      	adds	r5, #1
 801499e:	f006 fbab 	bl	801b0f8 <put_memory>
 80149a2:	42af      	cmp	r7, r5
 80149a4:	60a4      	str	r4, [r4, #8]
 80149a6:	f884 800c 	strb.w	r8, [r4, #12]
 80149aa:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80149ae:	d1f3      	bne.n	8014998 <rmw_uxrce_init_service_memory+0x20>
 80149b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b4:	4770      	bx	lr
 80149b6:	bf00      	nop

080149b8 <rmw_uxrce_init_client_memory>:
 80149b8:	b1e2      	cbz	r2, 80149f4 <rmw_uxrce_init_client_memory+0x3c>
 80149ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149be:	7b05      	ldrb	r5, [r0, #12]
 80149c0:	4606      	mov	r6, r0
 80149c2:	b9ad      	cbnz	r5, 80149f0 <rmw_uxrce_init_client_memory+0x38>
 80149c4:	23c8      	movs	r3, #200	@ 0xc8
 80149c6:	e9c0 5500 	strd	r5, r5, [r0]
 80149ca:	6083      	str	r3, [r0, #8]
 80149cc:	f240 1301 	movw	r3, #257	@ 0x101
 80149d0:	4617      	mov	r7, r2
 80149d2:	8183      	strh	r3, [r0, #12]
 80149d4:	460c      	mov	r4, r1
 80149d6:	46a8      	mov	r8, r5
 80149d8:	4621      	mov	r1, r4
 80149da:	4630      	mov	r0, r6
 80149dc:	3501      	adds	r5, #1
 80149de:	f006 fb8b 	bl	801b0f8 <put_memory>
 80149e2:	42af      	cmp	r7, r5
 80149e4:	60a4      	str	r4, [r4, #8]
 80149e6:	f884 800c 	strb.w	r8, [r4, #12]
 80149ea:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80149ee:	d1f3      	bne.n	80149d8 <rmw_uxrce_init_client_memory+0x20>
 80149f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149f4:	4770      	bx	lr
 80149f6:	bf00      	nop

080149f8 <rmw_uxrce_init_publisher_memory>:
 80149f8:	b1e2      	cbz	r2, 8014a34 <rmw_uxrce_init_publisher_memory+0x3c>
 80149fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149fe:	7b05      	ldrb	r5, [r0, #12]
 8014a00:	4606      	mov	r6, r0
 8014a02:	b9ad      	cbnz	r5, 8014a30 <rmw_uxrce_init_publisher_memory+0x38>
 8014a04:	23d8      	movs	r3, #216	@ 0xd8
 8014a06:	e9c0 5500 	strd	r5, r5, [r0]
 8014a0a:	6083      	str	r3, [r0, #8]
 8014a0c:	f240 1301 	movw	r3, #257	@ 0x101
 8014a10:	4617      	mov	r7, r2
 8014a12:	8183      	strh	r3, [r0, #12]
 8014a14:	460c      	mov	r4, r1
 8014a16:	46a8      	mov	r8, r5
 8014a18:	4621      	mov	r1, r4
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	3501      	adds	r5, #1
 8014a1e:	f006 fb6b 	bl	801b0f8 <put_memory>
 8014a22:	42af      	cmp	r7, r5
 8014a24:	60a4      	str	r4, [r4, #8]
 8014a26:	f884 800c 	strb.w	r8, [r4, #12]
 8014a2a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8014a2e:	d1f3      	bne.n	8014a18 <rmw_uxrce_init_publisher_memory+0x20>
 8014a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a34:	4770      	bx	lr
 8014a36:	bf00      	nop

08014a38 <rmw_uxrce_init_subscription_memory>:
 8014a38:	b1e2      	cbz	r2, 8014a74 <rmw_uxrce_init_subscription_memory+0x3c>
 8014a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a3e:	7b05      	ldrb	r5, [r0, #12]
 8014a40:	4606      	mov	r6, r0
 8014a42:	b9ad      	cbnz	r5, 8014a70 <rmw_uxrce_init_subscription_memory+0x38>
 8014a44:	23d8      	movs	r3, #216	@ 0xd8
 8014a46:	e9c0 5500 	strd	r5, r5, [r0]
 8014a4a:	6083      	str	r3, [r0, #8]
 8014a4c:	f240 1301 	movw	r3, #257	@ 0x101
 8014a50:	4617      	mov	r7, r2
 8014a52:	8183      	strh	r3, [r0, #12]
 8014a54:	460c      	mov	r4, r1
 8014a56:	46a8      	mov	r8, r5
 8014a58:	4621      	mov	r1, r4
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	3501      	adds	r5, #1
 8014a5e:	f006 fb4b 	bl	801b0f8 <put_memory>
 8014a62:	42af      	cmp	r7, r5
 8014a64:	60a4      	str	r4, [r4, #8]
 8014a66:	f884 800c 	strb.w	r8, [r4, #12]
 8014a6a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8014a6e:	d1f3      	bne.n	8014a58 <rmw_uxrce_init_subscription_memory+0x20>
 8014a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop

08014a78 <rmw_uxrce_init_node_memory>:
 8014a78:	b1e2      	cbz	r2, 8014ab4 <rmw_uxrce_init_node_memory+0x3c>
 8014a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a7e:	7b05      	ldrb	r5, [r0, #12]
 8014a80:	4606      	mov	r6, r0
 8014a82:	b9ad      	cbnz	r5, 8014ab0 <rmw_uxrce_init_node_memory+0x38>
 8014a84:	23a4      	movs	r3, #164	@ 0xa4
 8014a86:	e9c0 5500 	strd	r5, r5, [r0]
 8014a8a:	6083      	str	r3, [r0, #8]
 8014a8c:	f240 1301 	movw	r3, #257	@ 0x101
 8014a90:	4617      	mov	r7, r2
 8014a92:	8183      	strh	r3, [r0, #12]
 8014a94:	460c      	mov	r4, r1
 8014a96:	46a8      	mov	r8, r5
 8014a98:	4621      	mov	r1, r4
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	3501      	adds	r5, #1
 8014a9e:	f006 fb2b 	bl	801b0f8 <put_memory>
 8014aa2:	42af      	cmp	r7, r5
 8014aa4:	60a4      	str	r4, [r4, #8]
 8014aa6:	f884 800c 	strb.w	r8, [r4, #12]
 8014aaa:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8014aae:	d1f3      	bne.n	8014a98 <rmw_uxrce_init_node_memory+0x20>
 8014ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop

08014ab8 <rmw_uxrce_init_session_memory>:
 8014ab8:	b1ea      	cbz	r2, 8014af6 <rmw_uxrce_init_session_memory+0x3e>
 8014aba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014abe:	7b05      	ldrb	r5, [r0, #12]
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	b9b5      	cbnz	r5, 8014af2 <rmw_uxrce_init_session_memory+0x3a>
 8014ac4:	e9c0 5500 	strd	r5, r5, [r0]
 8014ac8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8014acc:	f240 1301 	movw	r3, #257	@ 0x101
 8014ad0:	4617      	mov	r7, r2
 8014ad2:	f8c0 8008 	str.w	r8, [r0, #8]
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	8183      	strh	r3, [r0, #12]
 8014ada:	46a9      	mov	r9, r5
 8014adc:	4621      	mov	r1, r4
 8014ade:	4630      	mov	r0, r6
 8014ae0:	3501      	adds	r5, #1
 8014ae2:	f006 fb09 	bl	801b0f8 <put_memory>
 8014ae6:	42af      	cmp	r7, r5
 8014ae8:	60a4      	str	r4, [r4, #8]
 8014aea:	f884 900c 	strb.w	r9, [r4, #12]
 8014aee:	4444      	add	r4, r8
 8014af0:	d1f4      	bne.n	8014adc <rmw_uxrce_init_session_memory+0x24>
 8014af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014af6:	4770      	bx	lr

08014af8 <rmw_uxrce_init_topic_memory>:
 8014af8:	b1e2      	cbz	r2, 8014b34 <rmw_uxrce_init_topic_memory+0x3c>
 8014afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014afe:	7b05      	ldrb	r5, [r0, #12]
 8014b00:	4606      	mov	r6, r0
 8014b02:	b9ad      	cbnz	r5, 8014b30 <rmw_uxrce_init_topic_memory+0x38>
 8014b04:	231c      	movs	r3, #28
 8014b06:	e9c0 5500 	strd	r5, r5, [r0]
 8014b0a:	6083      	str	r3, [r0, #8]
 8014b0c:	f240 1301 	movw	r3, #257	@ 0x101
 8014b10:	4617      	mov	r7, r2
 8014b12:	8183      	strh	r3, [r0, #12]
 8014b14:	460c      	mov	r4, r1
 8014b16:	46a8      	mov	r8, r5
 8014b18:	4621      	mov	r1, r4
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	3501      	adds	r5, #1
 8014b1e:	f006 faeb 	bl	801b0f8 <put_memory>
 8014b22:	42af      	cmp	r7, r5
 8014b24:	60a4      	str	r4, [r4, #8]
 8014b26:	f884 800c 	strb.w	r8, [r4, #12]
 8014b2a:	f104 041c 	add.w	r4, r4, #28
 8014b2e:	d1f3      	bne.n	8014b18 <rmw_uxrce_init_topic_memory+0x20>
 8014b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b34:	4770      	bx	lr
 8014b36:	bf00      	nop

08014b38 <rmw_uxrce_init_static_input_buffer_memory>:
 8014b38:	b1ea      	cbz	r2, 8014b76 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8014b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b3e:	7b05      	ldrb	r5, [r0, #12]
 8014b40:	4606      	mov	r6, r0
 8014b42:	b9b5      	cbnz	r5, 8014b72 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8014b44:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8014b48:	e9c0 5500 	strd	r5, r5, [r0]
 8014b4c:	6083      	str	r3, [r0, #8]
 8014b4e:	f240 1301 	movw	r3, #257	@ 0x101
 8014b52:	4617      	mov	r7, r2
 8014b54:	8183      	strh	r3, [r0, #12]
 8014b56:	460c      	mov	r4, r1
 8014b58:	46a8      	mov	r8, r5
 8014b5a:	4621      	mov	r1, r4
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	3501      	adds	r5, #1
 8014b60:	f006 faca 	bl	801b0f8 <put_memory>
 8014b64:	42af      	cmp	r7, r5
 8014b66:	60a4      	str	r4, [r4, #8]
 8014b68:	f884 800c 	strb.w	r8, [r4, #12]
 8014b6c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8014b70:	d1f3      	bne.n	8014b5a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8014b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b76:	4770      	bx	lr

08014b78 <rmw_uxrce_init_init_options_impl_memory>:
 8014b78:	b1e2      	cbz	r2, 8014bb4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8014b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b7e:	7b05      	ldrb	r5, [r0, #12]
 8014b80:	4606      	mov	r6, r0
 8014b82:	b9ad      	cbnz	r5, 8014bb0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8014b84:	232c      	movs	r3, #44	@ 0x2c
 8014b86:	e9c0 5500 	strd	r5, r5, [r0]
 8014b8a:	6083      	str	r3, [r0, #8]
 8014b8c:	f240 1301 	movw	r3, #257	@ 0x101
 8014b90:	4617      	mov	r7, r2
 8014b92:	8183      	strh	r3, [r0, #12]
 8014b94:	460c      	mov	r4, r1
 8014b96:	46a8      	mov	r8, r5
 8014b98:	4621      	mov	r1, r4
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	3501      	adds	r5, #1
 8014b9e:	f006 faab 	bl	801b0f8 <put_memory>
 8014ba2:	42af      	cmp	r7, r5
 8014ba4:	60a4      	str	r4, [r4, #8]
 8014ba6:	f884 800c 	strb.w	r8, [r4, #12]
 8014baa:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8014bae:	d1f3      	bne.n	8014b98 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8014bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop

08014bb8 <rmw_uxrce_init_wait_set_memory>:
 8014bb8:	b1e2      	cbz	r2, 8014bf4 <rmw_uxrce_init_wait_set_memory+0x3c>
 8014bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bbe:	7b05      	ldrb	r5, [r0, #12]
 8014bc0:	4606      	mov	r6, r0
 8014bc2:	b9ad      	cbnz	r5, 8014bf0 <rmw_uxrce_init_wait_set_memory+0x38>
 8014bc4:	231c      	movs	r3, #28
 8014bc6:	e9c0 5500 	strd	r5, r5, [r0]
 8014bca:	6083      	str	r3, [r0, #8]
 8014bcc:	f240 1301 	movw	r3, #257	@ 0x101
 8014bd0:	4617      	mov	r7, r2
 8014bd2:	8183      	strh	r3, [r0, #12]
 8014bd4:	460c      	mov	r4, r1
 8014bd6:	46a8      	mov	r8, r5
 8014bd8:	4621      	mov	r1, r4
 8014bda:	4630      	mov	r0, r6
 8014bdc:	3501      	adds	r5, #1
 8014bde:	f006 fa8b 	bl	801b0f8 <put_memory>
 8014be2:	42af      	cmp	r7, r5
 8014be4:	60a4      	str	r4, [r4, #8]
 8014be6:	f884 800c 	strb.w	r8, [r4, #12]
 8014bea:	f104 041c 	add.w	r4, r4, #28
 8014bee:	d1f3      	bne.n	8014bd8 <rmw_uxrce_init_wait_set_memory+0x20>
 8014bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf4:	4770      	bx	lr
 8014bf6:	bf00      	nop

08014bf8 <rmw_uxrce_init_guard_condition_memory>:
 8014bf8:	b1e2      	cbz	r2, 8014c34 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8014bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bfe:	7b05      	ldrb	r5, [r0, #12]
 8014c00:	4606      	mov	r6, r0
 8014c02:	b9ad      	cbnz	r5, 8014c30 <rmw_uxrce_init_guard_condition_memory+0x38>
 8014c04:	2320      	movs	r3, #32
 8014c06:	e9c0 5500 	strd	r5, r5, [r0]
 8014c0a:	6083      	str	r3, [r0, #8]
 8014c0c:	f240 1301 	movw	r3, #257	@ 0x101
 8014c10:	4617      	mov	r7, r2
 8014c12:	8183      	strh	r3, [r0, #12]
 8014c14:	460c      	mov	r4, r1
 8014c16:	46a8      	mov	r8, r5
 8014c18:	4621      	mov	r1, r4
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	3501      	adds	r5, #1
 8014c1e:	f006 fa6b 	bl	801b0f8 <put_memory>
 8014c22:	42af      	cmp	r7, r5
 8014c24:	60a4      	str	r4, [r4, #8]
 8014c26:	f884 800c 	strb.w	r8, [r4, #12]
 8014c2a:	f104 0420 	add.w	r4, r4, #32
 8014c2e:	d1f3      	bne.n	8014c18 <rmw_uxrce_init_guard_condition_memory+0x20>
 8014c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c34:	4770      	bx	lr
 8014c36:	bf00      	nop

08014c38 <rmw_uxrce_fini_session_memory>:
 8014c38:	4601      	mov	r1, r0
 8014c3a:	4801      	ldr	r0, [pc, #4]	@ (8014c40 <rmw_uxrce_fini_session_memory+0x8>)
 8014c3c:	f006 ba5c 	b.w	801b0f8 <put_memory>
 8014c40:	200180ec 	.word	0x200180ec

08014c44 <rmw_uxrce_fini_node_memory>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	4604      	mov	r4, r0
 8014c48:	6800      	ldr	r0, [r0, #0]
 8014c4a:	b128      	cbz	r0, 8014c58 <rmw_uxrce_fini_node_memory+0x14>
 8014c4c:	4b07      	ldr	r3, [pc, #28]	@ (8014c6c <rmw_uxrce_fini_node_memory+0x28>)
 8014c4e:	6819      	ldr	r1, [r3, #0]
 8014c50:	f7eb fabe 	bl	80001d0 <strcmp>
 8014c54:	b940      	cbnz	r0, 8014c68 <rmw_uxrce_fini_node_memory+0x24>
 8014c56:	6020      	str	r0, [r4, #0]
 8014c58:	6861      	ldr	r1, [r4, #4]
 8014c5a:	b129      	cbz	r1, 8014c68 <rmw_uxrce_fini_node_memory+0x24>
 8014c5c:	2500      	movs	r5, #0
 8014c5e:	4804      	ldr	r0, [pc, #16]	@ (8014c70 <rmw_uxrce_fini_node_memory+0x2c>)
 8014c60:	610d      	str	r5, [r1, #16]
 8014c62:	f006 fa49 	bl	801b0f8 <put_memory>
 8014c66:	6065      	str	r5, [r4, #4]
 8014c68:	bd38      	pop	{r3, r4, r5, pc}
 8014c6a:	bf00      	nop
 8014c6c:	0802444c 	.word	0x0802444c
 8014c70:	200180bc 	.word	0x200180bc

08014c74 <rmw_uxrce_fini_publisher_memory>:
 8014c74:	b510      	push	{r4, lr}
 8014c76:	4604      	mov	r4, r0
 8014c78:	6800      	ldr	r0, [r0, #0]
 8014c7a:	b128      	cbz	r0, 8014c88 <rmw_uxrce_fini_publisher_memory+0x14>
 8014c7c:	4b06      	ldr	r3, [pc, #24]	@ (8014c98 <rmw_uxrce_fini_publisher_memory+0x24>)
 8014c7e:	6819      	ldr	r1, [r3, #0]
 8014c80:	f7eb faa6 	bl	80001d0 <strcmp>
 8014c84:	b938      	cbnz	r0, 8014c96 <rmw_uxrce_fini_publisher_memory+0x22>
 8014c86:	6020      	str	r0, [r4, #0]
 8014c88:	6861      	ldr	r1, [r4, #4]
 8014c8a:	b121      	cbz	r1, 8014c96 <rmw_uxrce_fini_publisher_memory+0x22>
 8014c8c:	4803      	ldr	r0, [pc, #12]	@ (8014c9c <rmw_uxrce_fini_publisher_memory+0x28>)
 8014c8e:	f006 fa33 	bl	801b0f8 <put_memory>
 8014c92:	2300      	movs	r3, #0
 8014c94:	6063      	str	r3, [r4, #4]
 8014c96:	bd10      	pop	{r4, pc}
 8014c98:	0802444c 	.word	0x0802444c
 8014c9c:	200180cc 	.word	0x200180cc

08014ca0 <rmw_uxrce_fini_subscription_memory>:
 8014ca0:	b510      	push	{r4, lr}
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	6800      	ldr	r0, [r0, #0]
 8014ca6:	b128      	cbz	r0, 8014cb4 <rmw_uxrce_fini_subscription_memory+0x14>
 8014ca8:	4b06      	ldr	r3, [pc, #24]	@ (8014cc4 <rmw_uxrce_fini_subscription_memory+0x24>)
 8014caa:	6819      	ldr	r1, [r3, #0]
 8014cac:	f7eb fa90 	bl	80001d0 <strcmp>
 8014cb0:	b938      	cbnz	r0, 8014cc2 <rmw_uxrce_fini_subscription_memory+0x22>
 8014cb2:	6020      	str	r0, [r4, #0]
 8014cb4:	6861      	ldr	r1, [r4, #4]
 8014cb6:	b121      	cbz	r1, 8014cc2 <rmw_uxrce_fini_subscription_memory+0x22>
 8014cb8:	4803      	ldr	r0, [pc, #12]	@ (8014cc8 <rmw_uxrce_fini_subscription_memory+0x28>)
 8014cba:	f006 fa1d 	bl	801b0f8 <put_memory>
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	6063      	str	r3, [r4, #4]
 8014cc2:	bd10      	pop	{r4, pc}
 8014cc4:	0802444c 	.word	0x0802444c
 8014cc8:	2001810c 	.word	0x2001810c

08014ccc <rmw_uxrce_fini_service_memory>:
 8014ccc:	b510      	push	{r4, lr}
 8014cce:	4604      	mov	r4, r0
 8014cd0:	6800      	ldr	r0, [r0, #0]
 8014cd2:	b128      	cbz	r0, 8014ce0 <rmw_uxrce_fini_service_memory+0x14>
 8014cd4:	4b06      	ldr	r3, [pc, #24]	@ (8014cf0 <rmw_uxrce_fini_service_memory+0x24>)
 8014cd6:	6819      	ldr	r1, [r3, #0]
 8014cd8:	f7eb fa7a 	bl	80001d0 <strcmp>
 8014cdc:	b938      	cbnz	r0, 8014cee <rmw_uxrce_fini_service_memory+0x22>
 8014cde:	6020      	str	r0, [r4, #0]
 8014ce0:	6861      	ldr	r1, [r4, #4]
 8014ce2:	b121      	cbz	r1, 8014cee <rmw_uxrce_fini_service_memory+0x22>
 8014ce4:	4803      	ldr	r0, [pc, #12]	@ (8014cf4 <rmw_uxrce_fini_service_memory+0x28>)
 8014ce6:	f006 fa07 	bl	801b0f8 <put_memory>
 8014cea:	2300      	movs	r3, #0
 8014cec:	6063      	str	r3, [r4, #4]
 8014cee:	bd10      	pop	{r4, pc}
 8014cf0:	0802444c 	.word	0x0802444c
 8014cf4:	200180dc 	.word	0x200180dc

08014cf8 <rmw_uxrce_fini_client_memory>:
 8014cf8:	b510      	push	{r4, lr}
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	6800      	ldr	r0, [r0, #0]
 8014cfe:	b128      	cbz	r0, 8014d0c <rmw_uxrce_fini_client_memory+0x14>
 8014d00:	4b06      	ldr	r3, [pc, #24]	@ (8014d1c <rmw_uxrce_fini_client_memory+0x24>)
 8014d02:	6819      	ldr	r1, [r3, #0]
 8014d04:	f7eb fa64 	bl	80001d0 <strcmp>
 8014d08:	b938      	cbnz	r0, 8014d1a <rmw_uxrce_fini_client_memory+0x22>
 8014d0a:	6020      	str	r0, [r4, #0]
 8014d0c:	6861      	ldr	r1, [r4, #4]
 8014d0e:	b121      	cbz	r1, 8014d1a <rmw_uxrce_fini_client_memory+0x22>
 8014d10:	4803      	ldr	r0, [pc, #12]	@ (8014d20 <rmw_uxrce_fini_client_memory+0x28>)
 8014d12:	f006 f9f1 	bl	801b0f8 <put_memory>
 8014d16:	2300      	movs	r3, #0
 8014d18:	6063      	str	r3, [r4, #4]
 8014d1a:	bd10      	pop	{r4, pc}
 8014d1c:	0802444c 	.word	0x0802444c
 8014d20:	200137f0 	.word	0x200137f0

08014d24 <rmw_uxrce_fini_topic_memory>:
 8014d24:	b510      	push	{r4, lr}
 8014d26:	4604      	mov	r4, r0
 8014d28:	4621      	mov	r1, r4
 8014d2a:	4803      	ldr	r0, [pc, #12]	@ (8014d38 <rmw_uxrce_fini_topic_memory+0x14>)
 8014d2c:	f006 f9e4 	bl	801b0f8 <put_memory>
 8014d30:	2300      	movs	r3, #0
 8014d32:	61a3      	str	r3, [r4, #24]
 8014d34:	bd10      	pop	{r4, pc}
 8014d36:	bf00      	nop
 8014d38:	2001811c 	.word	0x2001811c

08014d3c <rmw_uxrce_get_static_input_buffer_for_entity>:
 8014d3c:	b082      	sub	sp, #8
 8014d3e:	b530      	push	{r4, r5, lr}
 8014d40:	4925      	ldr	r1, [pc, #148]	@ (8014dd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8014d42:	680d      	ldr	r5, [r1, #0]
 8014d44:	ac03      	add	r4, sp, #12
 8014d46:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d4a:	461c      	mov	r4, r3
 8014d4c:	2d00      	cmp	r5, #0
 8014d4e:	d041      	beq.n	8014dd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8014d50:	462b      	mov	r3, r5
 8014d52:	2100      	movs	r1, #0
 8014d54:	689a      	ldr	r2, [r3, #8]
 8014d56:	685b      	ldr	r3, [r3, #4]
 8014d58:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8014d5c:	4290      	cmp	r0, r2
 8014d5e:	bf08      	it	eq
 8014d60:	3101      	addeq	r1, #1
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1f6      	bne.n	8014d54 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8014d66:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014d6a:	2b02      	cmp	r3, #2
 8014d6c:	d029      	beq.n	8014dc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014d6e:	d907      	bls.n	8014d80 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8014d70:	2b03      	cmp	r3, #3
 8014d72:	d005      	beq.n	8014d80 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8014d74:	2100      	movs	r1, #0
 8014d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d7a:	4608      	mov	r0, r1
 8014d7c:	b002      	add	sp, #8
 8014d7e:	4770      	bx	lr
 8014d80:	b314      	cbz	r4, 8014dc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014d82:	428c      	cmp	r4, r1
 8014d84:	d820      	bhi.n	8014dc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014d86:	2d00      	cmp	r5, #0
 8014d88:	d0f4      	beq.n	8014d74 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	f04f 3cff 	mov.w	ip, #4294967295
 8014d90:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8014d94:	e002      	b.n	8014d9c <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8014d96:	686d      	ldr	r5, [r5, #4]
 8014d98:	2d00      	cmp	r5, #0
 8014d9a:	d0ec      	beq.n	8014d76 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8014d9c:	68ab      	ldr	r3, [r5, #8]
 8014d9e:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8014da2:	4290      	cmp	r0, r2
 8014da4:	d1f7      	bne.n	8014d96 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014da6:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8014daa:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8014dae:	4562      	cmp	r2, ip
 8014db0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014db4:	eb73 0e04 	sbcs.w	lr, r3, r4
 8014db8:	daed      	bge.n	8014d96 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014dba:	4694      	mov	ip, r2
 8014dbc:	461c      	mov	r4, r3
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	e7e9      	b.n	8014d96 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014dc2:	b10c      	cbz	r4, 8014dc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014dc4:	428c      	cmp	r4, r1
 8014dc6:	d9d5      	bls.n	8014d74 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8014dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dcc:	4802      	ldr	r0, [pc, #8]	@ (8014dd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8014dce:	b002      	add	sp, #8
 8014dd0:	f006 b982 	b.w	801b0d8 <get_memory>
 8014dd4:	4629      	mov	r1, r5
 8014dd6:	e7c6      	b.n	8014d66 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8014dd8:	200180fc 	.word	0x200180fc

08014ddc <rmw_uxrce_find_static_input_buffer_by_owner>:
 8014ddc:	4b11      	ldr	r3, [pc, #68]	@ (8014e24 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	b530      	push	{r4, r5, lr}
 8014de2:	b1e3      	cbz	r3, 8014e1e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8014de4:	f04f 3eff 	mov.w	lr, #4294967295
 8014de8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8014dec:	2400      	movs	r4, #0
 8014dee:	e001      	b.n	8014df4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	b193      	cbz	r3, 8014e1a <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8014df4:	689a      	ldr	r2, [r3, #8]
 8014df6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8014dfa:	4288      	cmp	r0, r1
 8014dfc:	d1f8      	bne.n	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014dfe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8014e02:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8014e06:	4571      	cmp	r1, lr
 8014e08:	eb72 050c 	sbcs.w	r5, r2, ip
 8014e0c:	daf0      	bge.n	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014e0e:	461c      	mov	r4, r3
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	468e      	mov	lr, r1
 8014e14:	4694      	mov	ip, r2
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d1ec      	bne.n	8014df4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	bd30      	pop	{r4, r5, pc}
 8014e1e:	461c      	mov	r4, r3
 8014e20:	4620      	mov	r0, r4
 8014e22:	bd30      	pop	{r4, r5, pc}
 8014e24:	200180fc 	.word	0x200180fc

08014e28 <rmw_uxrce_clean_expired_static_input_buffer>:
 8014e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8014f20 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014e2e:	ed2d 8b06 	vpush	{d8-d10}
 8014e32:	681f      	ldr	r7, [r3, #0]
 8014e34:	b08d      	sub	sp, #52	@ 0x34
 8014e36:	f7ff fd7f 	bl	8014938 <rmw_uros_epoch_nanos>
 8014e3a:	2f00      	cmp	r7, #0
 8014e3c:	d05d      	beq.n	8014efa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014e3e:	46b8      	mov	r8, r7
 8014e40:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8014f08 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8014e44:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014e48:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8014e4c:	2b04      	cmp	r3, #4
 8014e4e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8014f10 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8014e52:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8014f18 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8014e56:	4681      	mov	r9, r0
 8014e58:	468a      	mov	sl, r1
 8014e5a:	ac04      	add	r4, sp, #16
 8014e5c:	d03f      	beq.n	8014ede <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014e5e:	2b05      	cmp	r3, #5
 8014e60:	d044      	beq.n	8014eec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8014e62:	2b03      	cmp	r3, #3
 8014e64:	d03b      	beq.n	8014ede <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014e66:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014e6a:	ed8d ab06 	vstr	d10, [sp, #24]
 8014e6e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014e72:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8014e76:	ab08      	add	r3, sp, #32
 8014e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014e7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014e7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014e82:	f000 f905 	bl	8015090 <rmw_time_equal>
 8014e86:	b118      	cbz	r0, 8014e90 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8014e88:	ed8d 9b04 	vstr	d9, [sp, #16]
 8014e8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014e90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014e94:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8014e98:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8014e9c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8014ea0:	f000 f94a 	bl	8015138 <rmw_time_total_nsec>
 8014ea4:	1830      	adds	r0, r6, r0
 8014ea6:	eb47 0101 	adc.w	r1, r7, r1
 8014eaa:	4548      	cmp	r0, r9
 8014eac:	eb71 030a 	sbcs.w	r3, r1, sl
 8014eb0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8014eb4:	db05      	blt.n	8014ec2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8014eb6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8014eba:	4591      	cmp	r9, r2
 8014ebc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8014ec0:	da03      	bge.n	8014eca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8014ec2:	4817      	ldr	r0, [pc, #92]	@ (8014f20 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014ec4:	4641      	mov	r1, r8
 8014ec6:	f006 f917 	bl	801b0f8 <put_memory>
 8014eca:	f1bb 0f00 	cmp.w	fp, #0
 8014ece:	d014      	beq.n	8014efa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014ed0:	46d8      	mov	r8, fp
 8014ed2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014ed6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8014eda:	2b04      	cmp	r3, #4
 8014edc:	d1bf      	bne.n	8014e5e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8014ede:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014ee2:	3340      	adds	r3, #64	@ 0x40
 8014ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ee6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014eea:	e7c0      	b.n	8014e6e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014eec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014ef0:	3348      	adds	r3, #72	@ 0x48
 8014ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ef8:	e7b9      	b.n	8014e6e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014efa:	b00d      	add	sp, #52	@ 0x34
 8014efc:	ecbd 8b06 	vpop	{d8-d10}
 8014f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f04:	f3af 8000 	nop.w
	...
 8014f10:	00000001 	.word	0x00000001
 8014f14:	00000000 	.word	0x00000000
 8014f18:	0000001e 	.word	0x0000001e
 8014f1c:	00000000 	.word	0x00000000
 8014f20:	200180fc 	.word	0x200180fc

08014f24 <run_xrce_session>:
 8014f24:	b510      	push	{r4, lr}
 8014f26:	788c      	ldrb	r4, [r1, #2]
 8014f28:	b086      	sub	sp, #24
 8014f2a:	2c01      	cmp	r4, #1
 8014f2c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8014f30:	d00c      	beq.n	8014f4c <run_xrce_session+0x28>
 8014f32:	4619      	mov	r1, r3
 8014f34:	2301      	movs	r3, #1
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	f10d 020e 	add.w	r2, sp, #14
 8014f3c:	f10d 0317 	add.w	r3, sp, #23
 8014f40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f44:	f002 f910 	bl	8017168 <uxr_run_session_until_all_status>
 8014f48:	b006      	add	sp, #24
 8014f4a:	bd10      	pop	{r4, pc}
 8014f4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f50:	f001 fd24 	bl	801699c <uxr_flash_output_streams>
 8014f54:	4620      	mov	r0, r4
 8014f56:	b006      	add	sp, #24
 8014f58:	bd10      	pop	{r4, pc}
 8014f5a:	bf00      	nop

08014f5c <convert_qos_profile>:
 8014f5c:	7a4a      	ldrb	r2, [r1, #9]
 8014f5e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8014f62:	2a02      	cmp	r2, #2
 8014f64:	bf18      	it	ne
 8014f66:	2200      	movne	r2, #0
 8014f68:	7002      	strb	r2, [r0, #0]
 8014f6a:	780a      	ldrb	r2, [r1, #0]
 8014f6c:	8889      	ldrh	r1, [r1, #4]
 8014f6e:	8081      	strh	r1, [r0, #4]
 8014f70:	f1ac 0c02 	sub.w	ip, ip, #2
 8014f74:	f1a2 0202 	sub.w	r2, r2, #2
 8014f78:	fabc fc8c 	clz	ip, ip
 8014f7c:	fab2 f282 	clz	r2, r2
 8014f80:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014f84:	0952      	lsrs	r2, r2, #5
 8014f86:	f880 c001 	strb.w	ip, [r0, #1]
 8014f8a:	7082      	strb	r2, [r0, #2]
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop

08014f90 <generate_type_name>:
 8014f90:	b530      	push	{r4, r5, lr}
 8014f92:	2300      	movs	r3, #0
 8014f94:	700b      	strb	r3, [r1, #0]
 8014f96:	6803      	ldr	r3, [r0, #0]
 8014f98:	b087      	sub	sp, #28
 8014f9a:	4614      	mov	r4, r2
 8014f9c:	b1d3      	cbz	r3, 8014fd4 <generate_type_name+0x44>
 8014f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8014fdc <generate_type_name+0x4c>)
 8014fa0:	4615      	mov	r5, r2
 8014fa2:	9203      	str	r2, [sp, #12]
 8014fa4:	9500      	str	r5, [sp, #0]
 8014fa6:	6842      	ldr	r2, [r0, #4]
 8014fa8:	480d      	ldr	r0, [pc, #52]	@ (8014fe0 <generate_type_name+0x50>)
 8014faa:	9001      	str	r0, [sp, #4]
 8014fac:	4608      	mov	r0, r1
 8014fae:	490d      	ldr	r1, [pc, #52]	@ (8014fe4 <generate_type_name+0x54>)
 8014fb0:	9204      	str	r2, [sp, #16]
 8014fb2:	9105      	str	r1, [sp, #20]
 8014fb4:	9102      	str	r1, [sp, #8]
 8014fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8014fe8 <generate_type_name+0x58>)
 8014fb8:	4621      	mov	r1, r4
 8014fba:	f008 f8e9 	bl	801d190 <sniprintf>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	db05      	blt.n	8014fce <generate_type_name+0x3e>
 8014fc2:	4284      	cmp	r4, r0
 8014fc4:	bfd4      	ite	le
 8014fc6:	2000      	movle	r0, #0
 8014fc8:	2001      	movgt	r0, #1
 8014fca:	b007      	add	sp, #28
 8014fcc:	bd30      	pop	{r4, r5, pc}
 8014fce:	2000      	movs	r0, #0
 8014fd0:	b007      	add	sp, #28
 8014fd2:	bd30      	pop	{r4, r5, pc}
 8014fd4:	4b05      	ldr	r3, [pc, #20]	@ (8014fec <generate_type_name+0x5c>)
 8014fd6:	4a01      	ldr	r2, [pc, #4]	@ (8014fdc <generate_type_name+0x4c>)
 8014fd8:	461d      	mov	r5, r3
 8014fda:	e7e2      	b.n	8014fa2 <generate_type_name+0x12>
 8014fdc:	080239a4 	.word	0x080239a4
 8014fe0:	080239bc 	.word	0x080239bc
 8014fe4:	080239b8 	.word	0x080239b8
 8014fe8:	080239a8 	.word	0x080239a8
 8014fec:	08023d28 	.word	0x08023d28

08014ff0 <generate_topic_name>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	b082      	sub	sp, #8
 8014ff4:	4614      	mov	r4, r2
 8014ff6:	9000      	str	r0, [sp, #0]
 8014ff8:	4b08      	ldr	r3, [pc, #32]	@ (801501c <generate_topic_name+0x2c>)
 8014ffa:	4a09      	ldr	r2, [pc, #36]	@ (8015020 <generate_topic_name+0x30>)
 8014ffc:	4608      	mov	r0, r1
 8014ffe:	4621      	mov	r1, r4
 8015000:	f008 f8c6 	bl	801d190 <sniprintf>
 8015004:	2800      	cmp	r0, #0
 8015006:	db05      	blt.n	8015014 <generate_topic_name+0x24>
 8015008:	4284      	cmp	r4, r0
 801500a:	bfd4      	ite	le
 801500c:	2000      	movle	r0, #0
 801500e:	2001      	movgt	r0, #1
 8015010:	b002      	add	sp, #8
 8015012:	bd10      	pop	{r4, pc}
 8015014:	2000      	movs	r0, #0
 8015016:	b002      	add	sp, #8
 8015018:	bd10      	pop	{r4, pc}
 801501a:	bf00      	nop
 801501c:	080239c0 	.word	0x080239c0
 8015020:	08023760 	.word	0x08023760

08015024 <is_uxrce_rmw_identifier_valid>:
 8015024:	b510      	push	{r4, lr}
 8015026:	4604      	mov	r4, r0
 8015028:	b140      	cbz	r0, 801503c <is_uxrce_rmw_identifier_valid+0x18>
 801502a:	f7fe fa8b 	bl	8013544 <rmw_get_implementation_identifier>
 801502e:	4601      	mov	r1, r0
 8015030:	4620      	mov	r0, r4
 8015032:	f7eb f8cd 	bl	80001d0 <strcmp>
 8015036:	fab0 f080 	clz	r0, r0
 801503a:	0940      	lsrs	r0, r0, #5
 801503c:	bd10      	pop	{r4, pc}
 801503e:	bf00      	nop

08015040 <rmw_get_default_publisher_options>:
 8015040:	2200      	movs	r2, #0
 8015042:	6002      	str	r2, [r0, #0]
 8015044:	7102      	strb	r2, [r0, #4]
 8015046:	4770      	bx	lr

08015048 <rmw_get_default_security_options>:
 8015048:	2200      	movs	r2, #0
 801504a:	7002      	strb	r2, [r0, #0]
 801504c:	6042      	str	r2, [r0, #4]
 801504e:	4770      	bx	lr

08015050 <rmw_subscription_content_filter_options_fini>:
 8015050:	b1b0      	cbz	r0, 8015080 <rmw_subscription_content_filter_options_fini+0x30>
 8015052:	b538      	push	{r3, r4, r5, lr}
 8015054:	4604      	mov	r4, r0
 8015056:	4608      	mov	r0, r1
 8015058:	460d      	mov	r5, r1
 801505a:	f7fd fe0f 	bl	8012c7c <rcutils_allocator_is_valid>
 801505e:	b168      	cbz	r0, 801507c <rmw_subscription_content_filter_options_fini+0x2c>
 8015060:	6820      	ldr	r0, [r4, #0]
 8015062:	b120      	cbz	r0, 801506e <rmw_subscription_content_filter_options_fini+0x1e>
 8015064:	686b      	ldr	r3, [r5, #4]
 8015066:	6929      	ldr	r1, [r5, #16]
 8015068:	4798      	blx	r3
 801506a:	2300      	movs	r3, #0
 801506c:	6023      	str	r3, [r4, #0]
 801506e:	1d20      	adds	r0, r4, #4
 8015070:	f005 feec 	bl	801ae4c <rcutils_string_array_fini>
 8015074:	3800      	subs	r0, #0
 8015076:	bf18      	it	ne
 8015078:	2001      	movne	r0, #1
 801507a:	bd38      	pop	{r3, r4, r5, pc}
 801507c:	200b      	movs	r0, #11
 801507e:	bd38      	pop	{r3, r4, r5, pc}
 8015080:	200b      	movs	r0, #11
 8015082:	4770      	bx	lr

08015084 <rmw_get_default_subscription_options>:
 8015084:	2200      	movs	r2, #0
 8015086:	e9c0 2200 	strd	r2, r2, [r0]
 801508a:	6082      	str	r2, [r0, #8]
 801508c:	4770      	bx	lr
 801508e:	bf00      	nop

08015090 <rmw_time_equal>:
 8015090:	b4f0      	push	{r4, r5, r6, r7}
 8015092:	b084      	sub	sp, #16
 8015094:	ac04      	add	r4, sp, #16
 8015096:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801509a:	4603      	mov	r3, r0
 801509c:	4924      	ldr	r1, [pc, #144]	@ (8015130 <rmw_time_equal+0xa0>)
 801509e:	9e03      	ldr	r6, [sp, #12]
 80150a0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80150a4:	2202      	movs	r2, #2
 80150a6:	4299      	cmp	r1, r3
 80150a8:	41aa      	sbcs	r2, r5
 80150aa:	d330      	bcc.n	801510e <rmw_time_equal+0x7e>
 80150ac:	4c21      	ldr	r4, [pc, #132]	@ (8015134 <rmw_time_equal+0xa4>)
 80150ae:	fba3 3204 	umull	r3, r2, r3, r4
 80150b2:	fb04 2205 	mla	r2, r4, r5, r2
 80150b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150ba:	43dd      	mvns	r5, r3
 80150bc:	1a8c      	subs	r4, r1, r2
 80150be:	4285      	cmp	r5, r0
 80150c0:	41b4      	sbcs	r4, r6
 80150c2:	d332      	bcc.n	801512a <rmw_time_equal+0x9a>
 80150c4:	eb10 0c03 	adds.w	ip, r0, r3
 80150c8:	eb42 0106 	adc.w	r1, r2, r6
 80150cc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80150d0:	4817      	ldr	r0, [pc, #92]	@ (8015130 <rmw_time_equal+0xa0>)
 80150d2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80150d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80150d6:	2202      	movs	r2, #2
 80150d8:	4298      	cmp	r0, r3
 80150da:	41b2      	sbcs	r2, r6
 80150dc:	d31c      	bcc.n	8015118 <rmw_time_equal+0x88>
 80150de:	4c15      	ldr	r4, [pc, #84]	@ (8015134 <rmw_time_equal+0xa4>)
 80150e0:	fba3 3204 	umull	r3, r2, r3, r4
 80150e4:	fb04 2206 	mla	r2, r4, r6, r2
 80150e8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80150ec:	43de      	mvns	r6, r3
 80150ee:	1a84      	subs	r4, r0, r2
 80150f0:	42ae      	cmp	r6, r5
 80150f2:	41bc      	sbcs	r4, r7
 80150f4:	d315      	bcc.n	8015122 <rmw_time_equal+0x92>
 80150f6:	195b      	adds	r3, r3, r5
 80150f8:	eb42 0207 	adc.w	r2, r2, r7
 80150fc:	428a      	cmp	r2, r1
 80150fe:	bf08      	it	eq
 8015100:	4563      	cmpeq	r3, ip
 8015102:	bf0c      	ite	eq
 8015104:	2001      	moveq	r0, #1
 8015106:	2000      	movne	r0, #0
 8015108:	b004      	add	sp, #16
 801510a:	bcf0      	pop	{r4, r5, r6, r7}
 801510c:	4770      	bx	lr
 801510e:	f04f 3cff 	mov.w	ip, #4294967295
 8015112:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015116:	e7d9      	b.n	80150cc <rmw_time_equal+0x3c>
 8015118:	f04f 33ff 	mov.w	r3, #4294967295
 801511c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015120:	e7ec      	b.n	80150fc <rmw_time_equal+0x6c>
 8015122:	f04f 33ff 	mov.w	r3, #4294967295
 8015126:	4602      	mov	r2, r0
 8015128:	e7e8      	b.n	80150fc <rmw_time_equal+0x6c>
 801512a:	f04f 3cff 	mov.w	ip, #4294967295
 801512e:	e7cd      	b.n	80150cc <rmw_time_equal+0x3c>
 8015130:	25c17d04 	.word	0x25c17d04
 8015134:	3b9aca00 	.word	0x3b9aca00

08015138 <rmw_time_total_nsec>:
 8015138:	b470      	push	{r4, r5, r6}
 801513a:	b085      	sub	sp, #20
 801513c:	ac04      	add	r4, sp, #16
 801513e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015142:	4603      	mov	r3, r0
 8015144:	4912      	ldr	r1, [pc, #72]	@ (8015190 <rmw_time_total_nsec+0x58>)
 8015146:	9e03      	ldr	r6, [sp, #12]
 8015148:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801514c:	2202      	movs	r2, #2
 801514e:	4299      	cmp	r1, r3
 8015150:	41aa      	sbcs	r2, r5
 8015152:	d311      	bcc.n	8015178 <rmw_time_total_nsec+0x40>
 8015154:	4c0f      	ldr	r4, [pc, #60]	@ (8015194 <rmw_time_total_nsec+0x5c>)
 8015156:	fba3 3204 	umull	r3, r2, r3, r4
 801515a:	fb04 2205 	mla	r2, r4, r5, r2
 801515e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015162:	43dd      	mvns	r5, r3
 8015164:	1a8c      	subs	r4, r1, r2
 8015166:	4285      	cmp	r5, r0
 8015168:	41b4      	sbcs	r4, r6
 801516a:	d30c      	bcc.n	8015186 <rmw_time_total_nsec+0x4e>
 801516c:	1818      	adds	r0, r3, r0
 801516e:	eb42 0106 	adc.w	r1, r2, r6
 8015172:	b005      	add	sp, #20
 8015174:	bc70      	pop	{r4, r5, r6}
 8015176:	4770      	bx	lr
 8015178:	f04f 30ff 	mov.w	r0, #4294967295
 801517c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015180:	b005      	add	sp, #20
 8015182:	bc70      	pop	{r4, r5, r6}
 8015184:	4770      	bx	lr
 8015186:	f04f 30ff 	mov.w	r0, #4294967295
 801518a:	b005      	add	sp, #20
 801518c:	bc70      	pop	{r4, r5, r6}
 801518e:	4770      	bx	lr
 8015190:	25c17d04 	.word	0x25c17d04
 8015194:	3b9aca00 	.word	0x3b9aca00

08015198 <rmw_get_zero_initialized_message_info>:
 8015198:	b510      	push	{r4, lr}
 801519a:	2238      	movs	r2, #56	@ 0x38
 801519c:	4604      	mov	r4, r0
 801519e:	2100      	movs	r1, #0
 80151a0:	f008 f984 	bl	801d4ac <memset>
 80151a4:	4620      	mov	r0, r4
 80151a6:	bd10      	pop	{r4, pc}

080151a8 <rmw_validate_full_topic_name>:
 80151a8:	2800      	cmp	r0, #0
 80151aa:	d057      	beq.n	801525c <rmw_validate_full_topic_name+0xb4>
 80151ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b0:	460d      	mov	r5, r1
 80151b2:	2900      	cmp	r1, #0
 80151b4:	d054      	beq.n	8015260 <rmw_validate_full_topic_name+0xb8>
 80151b6:	4616      	mov	r6, r2
 80151b8:	4604      	mov	r4, r0
 80151ba:	f7eb f869 	bl	8000290 <strlen>
 80151be:	b148      	cbz	r0, 80151d4 <rmw_validate_full_topic_name+0x2c>
 80151c0:	7823      	ldrb	r3, [r4, #0]
 80151c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80151c4:	d00d      	beq.n	80151e2 <rmw_validate_full_topic_name+0x3a>
 80151c6:	2302      	movs	r3, #2
 80151c8:	602b      	str	r3, [r5, #0]
 80151ca:	b13e      	cbz	r6, 80151dc <rmw_validate_full_topic_name+0x34>
 80151cc:	2000      	movs	r0, #0
 80151ce:	6030      	str	r0, [r6, #0]
 80151d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d4:	2301      	movs	r3, #1
 80151d6:	602b      	str	r3, [r5, #0]
 80151d8:	2e00      	cmp	r6, #0
 80151da:	d1f7      	bne.n	80151cc <rmw_validate_full_topic_name+0x24>
 80151dc:	2000      	movs	r0, #0
 80151de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e2:	1e43      	subs	r3, r0, #1
 80151e4:	5ce2      	ldrb	r2, [r4, r3]
 80151e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80151e8:	d03c      	beq.n	8015264 <rmw_validate_full_topic_name+0xbc>
 80151ea:	1e63      	subs	r3, r4, #1
 80151ec:	eb03 0800 	add.w	r8, r3, r0
 80151f0:	f1c4 0e01 	rsb	lr, r4, #1
 80151f4:	eb0e 0703 	add.w	r7, lr, r3
 80151f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80151fc:	f021 0220 	bic.w	r2, r1, #32
 8015200:	3a41      	subs	r2, #65	@ 0x41
 8015202:	2a19      	cmp	r2, #25
 8015204:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015208:	d90b      	bls.n	8015222 <rmw_validate_full_topic_name+0x7a>
 801520a:	295f      	cmp	r1, #95	@ 0x5f
 801520c:	d009      	beq.n	8015222 <rmw_validate_full_topic_name+0x7a>
 801520e:	f1bc 0f0a 	cmp.w	ip, #10
 8015212:	d906      	bls.n	8015222 <rmw_validate_full_topic_name+0x7a>
 8015214:	2304      	movs	r3, #4
 8015216:	602b      	str	r3, [r5, #0]
 8015218:	2e00      	cmp	r6, #0
 801521a:	d0df      	beq.n	80151dc <rmw_validate_full_topic_name+0x34>
 801521c:	6037      	str	r7, [r6, #0]
 801521e:	2000      	movs	r0, #0
 8015220:	e7d6      	b.n	80151d0 <rmw_validate_full_topic_name+0x28>
 8015222:	4543      	cmp	r3, r8
 8015224:	d1e6      	bne.n	80151f4 <rmw_validate_full_topic_name+0x4c>
 8015226:	4f1a      	ldr	r7, [pc, #104]	@ (8015290 <rmw_validate_full_topic_name+0xe8>)
 8015228:	2301      	movs	r3, #1
 801522a:	e004      	b.n	8015236 <rmw_validate_full_topic_name+0x8e>
 801522c:	4298      	cmp	r0, r3
 801522e:	f104 0401 	add.w	r4, r4, #1
 8015232:	d91c      	bls.n	801526e <rmw_validate_full_topic_name+0xc6>
 8015234:	4613      	mov	r3, r2
 8015236:	4298      	cmp	r0, r3
 8015238:	f103 0201 	add.w	r2, r3, #1
 801523c:	d0f6      	beq.n	801522c <rmw_validate_full_topic_name+0x84>
 801523e:	7821      	ldrb	r1, [r4, #0]
 8015240:	292f      	cmp	r1, #47	@ 0x2f
 8015242:	d1f3      	bne.n	801522c <rmw_validate_full_topic_name+0x84>
 8015244:	7861      	ldrb	r1, [r4, #1]
 8015246:	292f      	cmp	r1, #47	@ 0x2f
 8015248:	d01c      	beq.n	8015284 <rmw_validate_full_topic_name+0xdc>
 801524a:	5dc9      	ldrb	r1, [r1, r7]
 801524c:	0749      	lsls	r1, r1, #29
 801524e:	d5ed      	bpl.n	801522c <rmw_validate_full_topic_name+0x84>
 8015250:	2206      	movs	r2, #6
 8015252:	602a      	str	r2, [r5, #0]
 8015254:	2e00      	cmp	r6, #0
 8015256:	d0c1      	beq.n	80151dc <rmw_validate_full_topic_name+0x34>
 8015258:	6033      	str	r3, [r6, #0]
 801525a:	e7bf      	b.n	80151dc <rmw_validate_full_topic_name+0x34>
 801525c:	200b      	movs	r0, #11
 801525e:	4770      	bx	lr
 8015260:	200b      	movs	r0, #11
 8015262:	e7b5      	b.n	80151d0 <rmw_validate_full_topic_name+0x28>
 8015264:	2203      	movs	r2, #3
 8015266:	602a      	str	r2, [r5, #0]
 8015268:	2e00      	cmp	r6, #0
 801526a:	d1f5      	bne.n	8015258 <rmw_validate_full_topic_name+0xb0>
 801526c:	e7b6      	b.n	80151dc <rmw_validate_full_topic_name+0x34>
 801526e:	28f7      	cmp	r0, #247	@ 0xf7
 8015270:	d802      	bhi.n	8015278 <rmw_validate_full_topic_name+0xd0>
 8015272:	2000      	movs	r0, #0
 8015274:	6028      	str	r0, [r5, #0]
 8015276:	e7ab      	b.n	80151d0 <rmw_validate_full_topic_name+0x28>
 8015278:	2307      	movs	r3, #7
 801527a:	602b      	str	r3, [r5, #0]
 801527c:	2e00      	cmp	r6, #0
 801527e:	d0ad      	beq.n	80151dc <rmw_validate_full_topic_name+0x34>
 8015280:	23f6      	movs	r3, #246	@ 0xf6
 8015282:	e7e9      	b.n	8015258 <rmw_validate_full_topic_name+0xb0>
 8015284:	2205      	movs	r2, #5
 8015286:	602a      	str	r2, [r5, #0]
 8015288:	2e00      	cmp	r6, #0
 801528a:	d1e5      	bne.n	8015258 <rmw_validate_full_topic_name+0xb0>
 801528c:	e7a6      	b.n	80151dc <rmw_validate_full_topic_name+0x34>
 801528e:	bf00      	nop
 8015290:	08024516 	.word	0x08024516

08015294 <rmw_validate_namespace_with_size>:
 8015294:	b340      	cbz	r0, 80152e8 <rmw_validate_namespace_with_size+0x54>
 8015296:	b570      	push	{r4, r5, r6, lr}
 8015298:	4614      	mov	r4, r2
 801529a:	b0c2      	sub	sp, #264	@ 0x108
 801529c:	b332      	cbz	r2, 80152ec <rmw_validate_namespace_with_size+0x58>
 801529e:	2901      	cmp	r1, #1
 80152a0:	460d      	mov	r5, r1
 80152a2:	461e      	mov	r6, r3
 80152a4:	d102      	bne.n	80152ac <rmw_validate_namespace_with_size+0x18>
 80152a6:	7803      	ldrb	r3, [r0, #0]
 80152a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80152aa:	d012      	beq.n	80152d2 <rmw_validate_namespace_with_size+0x3e>
 80152ac:	aa01      	add	r2, sp, #4
 80152ae:	4669      	mov	r1, sp
 80152b0:	f7ff ff7a 	bl	80151a8 <rmw_validate_full_topic_name>
 80152b4:	b978      	cbnz	r0, 80152d6 <rmw_validate_namespace_with_size+0x42>
 80152b6:	9b00      	ldr	r3, [sp, #0]
 80152b8:	b14b      	cbz	r3, 80152ce <rmw_validate_namespace_with_size+0x3a>
 80152ba:	2b07      	cmp	r3, #7
 80152bc:	d007      	beq.n	80152ce <rmw_validate_namespace_with_size+0x3a>
 80152be:	1e5a      	subs	r2, r3, #1
 80152c0:	2a05      	cmp	r2, #5
 80152c2:	d82b      	bhi.n	801531c <rmw_validate_namespace_with_size+0x88>
 80152c4:	e8df f002 	tbb	[pc, r2]
 80152c8:	1e212427 	.word	0x1e212427
 80152cc:	141b      	.short	0x141b
 80152ce:	2df5      	cmp	r5, #245	@ 0xf5
 80152d0:	d803      	bhi.n	80152da <rmw_validate_namespace_with_size+0x46>
 80152d2:	2000      	movs	r0, #0
 80152d4:	6020      	str	r0, [r4, #0]
 80152d6:	b042      	add	sp, #264	@ 0x108
 80152d8:	bd70      	pop	{r4, r5, r6, pc}
 80152da:	2307      	movs	r3, #7
 80152dc:	6023      	str	r3, [r4, #0]
 80152de:	2e00      	cmp	r6, #0
 80152e0:	d0f9      	beq.n	80152d6 <rmw_validate_namespace_with_size+0x42>
 80152e2:	23f4      	movs	r3, #244	@ 0xf4
 80152e4:	6033      	str	r3, [r6, #0]
 80152e6:	e7f6      	b.n	80152d6 <rmw_validate_namespace_with_size+0x42>
 80152e8:	200b      	movs	r0, #11
 80152ea:	4770      	bx	lr
 80152ec:	200b      	movs	r0, #11
 80152ee:	e7f2      	b.n	80152d6 <rmw_validate_namespace_with_size+0x42>
 80152f0:	2306      	movs	r3, #6
 80152f2:	6023      	str	r3, [r4, #0]
 80152f4:	2e00      	cmp	r6, #0
 80152f6:	d0ee      	beq.n	80152d6 <rmw_validate_namespace_with_size+0x42>
 80152f8:	9b01      	ldr	r3, [sp, #4]
 80152fa:	6033      	str	r3, [r6, #0]
 80152fc:	e7eb      	b.n	80152d6 <rmw_validate_namespace_with_size+0x42>
 80152fe:	2305      	movs	r3, #5
 8015300:	6023      	str	r3, [r4, #0]
 8015302:	e7f7      	b.n	80152f4 <rmw_validate_namespace_with_size+0x60>
 8015304:	2304      	movs	r3, #4
 8015306:	6023      	str	r3, [r4, #0]
 8015308:	e7f4      	b.n	80152f4 <rmw_validate_namespace_with_size+0x60>
 801530a:	2303      	movs	r3, #3
 801530c:	6023      	str	r3, [r4, #0]
 801530e:	e7f1      	b.n	80152f4 <rmw_validate_namespace_with_size+0x60>
 8015310:	2302      	movs	r3, #2
 8015312:	6023      	str	r3, [r4, #0]
 8015314:	e7ee      	b.n	80152f4 <rmw_validate_namespace_with_size+0x60>
 8015316:	2301      	movs	r3, #1
 8015318:	6023      	str	r3, [r4, #0]
 801531a:	e7eb      	b.n	80152f4 <rmw_validate_namespace_with_size+0x60>
 801531c:	4a03      	ldr	r2, [pc, #12]	@ (801532c <rmw_validate_namespace_with_size+0x98>)
 801531e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015322:	a802      	add	r0, sp, #8
 8015324:	f7fd fea6 	bl	8013074 <rcutils_snprintf>
 8015328:	2001      	movs	r0, #1
 801532a:	e7d4      	b.n	80152d6 <rmw_validate_namespace_with_size+0x42>
 801532c:	080239c4 	.word	0x080239c4

08015330 <rmw_validate_namespace>:
 8015330:	b168      	cbz	r0, 801534e <rmw_validate_namespace+0x1e>
 8015332:	b570      	push	{r4, r5, r6, lr}
 8015334:	460d      	mov	r5, r1
 8015336:	4616      	mov	r6, r2
 8015338:	4604      	mov	r4, r0
 801533a:	f7ea ffa9 	bl	8000290 <strlen>
 801533e:	4633      	mov	r3, r6
 8015340:	4601      	mov	r1, r0
 8015342:	462a      	mov	r2, r5
 8015344:	4620      	mov	r0, r4
 8015346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801534a:	f7ff bfa3 	b.w	8015294 <rmw_validate_namespace_with_size>
 801534e:	200b      	movs	r0, #11
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop

08015354 <rmw_namespace_validation_result_string>:
 8015354:	2807      	cmp	r0, #7
 8015356:	bf9a      	itte	ls
 8015358:	4b02      	ldrls	r3, [pc, #8]	@ (8015364 <rmw_namespace_validation_result_string+0x10>)
 801535a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801535e:	4802      	ldrhi	r0, [pc, #8]	@ (8015368 <rmw_namespace_validation_result_string+0x14>)
 8015360:	4770      	bx	lr
 8015362:	bf00      	nop
 8015364:	08023bbc 	.word	0x08023bbc
 8015368:	08023a14 	.word	0x08023a14

0801536c <rmw_validate_node_name>:
 801536c:	2800      	cmp	r0, #0
 801536e:	d03b      	beq.n	80153e8 <rmw_validate_node_name+0x7c>
 8015370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015374:	460d      	mov	r5, r1
 8015376:	2900      	cmp	r1, #0
 8015378:	d038      	beq.n	80153ec <rmw_validate_node_name+0x80>
 801537a:	4616      	mov	r6, r2
 801537c:	4604      	mov	r4, r0
 801537e:	f7ea ff87 	bl	8000290 <strlen>
 8015382:	b1e0      	cbz	r0, 80153be <rmw_validate_node_name+0x52>
 8015384:	1e63      	subs	r3, r4, #1
 8015386:	eb03 0800 	add.w	r8, r3, r0
 801538a:	f1c4 0101 	rsb	r1, r4, #1
 801538e:	18cf      	adds	r7, r1, r3
 8015390:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015394:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015398:	f02e 0c20 	bic.w	ip, lr, #32
 801539c:	2a09      	cmp	r2, #9
 801539e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80153a2:	d914      	bls.n	80153ce <rmw_validate_node_name+0x62>
 80153a4:	f1bc 0f19 	cmp.w	ip, #25
 80153a8:	d911      	bls.n	80153ce <rmw_validate_node_name+0x62>
 80153aa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80153ae:	d00e      	beq.n	80153ce <rmw_validate_node_name+0x62>
 80153b0:	2302      	movs	r3, #2
 80153b2:	602b      	str	r3, [r5, #0]
 80153b4:	b106      	cbz	r6, 80153b8 <rmw_validate_node_name+0x4c>
 80153b6:	6037      	str	r7, [r6, #0]
 80153b8:	2000      	movs	r0, #0
 80153ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153be:	2301      	movs	r3, #1
 80153c0:	602b      	str	r3, [r5, #0]
 80153c2:	2e00      	cmp	r6, #0
 80153c4:	d0f8      	beq.n	80153b8 <rmw_validate_node_name+0x4c>
 80153c6:	2000      	movs	r0, #0
 80153c8:	6030      	str	r0, [r6, #0]
 80153ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ce:	4543      	cmp	r3, r8
 80153d0:	d1dd      	bne.n	801538e <rmw_validate_node_name+0x22>
 80153d2:	7822      	ldrb	r2, [r4, #0]
 80153d4:	4b0d      	ldr	r3, [pc, #52]	@ (801540c <rmw_validate_node_name+0xa0>)
 80153d6:	5cd3      	ldrb	r3, [r2, r3]
 80153d8:	f013 0304 	ands.w	r3, r3, #4
 80153dc:	d110      	bne.n	8015400 <rmw_validate_node_name+0x94>
 80153de:	28ff      	cmp	r0, #255	@ 0xff
 80153e0:	d806      	bhi.n	80153f0 <rmw_validate_node_name+0x84>
 80153e2:	602b      	str	r3, [r5, #0]
 80153e4:	4618      	mov	r0, r3
 80153e6:	e7e8      	b.n	80153ba <rmw_validate_node_name+0x4e>
 80153e8:	200b      	movs	r0, #11
 80153ea:	4770      	bx	lr
 80153ec:	200b      	movs	r0, #11
 80153ee:	e7e4      	b.n	80153ba <rmw_validate_node_name+0x4e>
 80153f0:	2204      	movs	r2, #4
 80153f2:	602a      	str	r2, [r5, #0]
 80153f4:	2e00      	cmp	r6, #0
 80153f6:	d0df      	beq.n	80153b8 <rmw_validate_node_name+0x4c>
 80153f8:	22fe      	movs	r2, #254	@ 0xfe
 80153fa:	6032      	str	r2, [r6, #0]
 80153fc:	4618      	mov	r0, r3
 80153fe:	e7dc      	b.n	80153ba <rmw_validate_node_name+0x4e>
 8015400:	2303      	movs	r3, #3
 8015402:	602b      	str	r3, [r5, #0]
 8015404:	2e00      	cmp	r6, #0
 8015406:	d1de      	bne.n	80153c6 <rmw_validate_node_name+0x5a>
 8015408:	e7d6      	b.n	80153b8 <rmw_validate_node_name+0x4c>
 801540a:	bf00      	nop
 801540c:	08024516 	.word	0x08024516

08015410 <rmw_node_name_validation_result_string>:
 8015410:	2804      	cmp	r0, #4
 8015412:	bf9a      	itte	ls
 8015414:	4b02      	ldrls	r3, [pc, #8]	@ (8015420 <rmw_node_name_validation_result_string+0x10>)
 8015416:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801541a:	4802      	ldrhi	r0, [pc, #8]	@ (8015424 <rmw_node_name_validation_result_string+0x14>)
 801541c:	4770      	bx	lr
 801541e:	bf00      	nop
 8015420:	08023cc8 	.word	0x08023cc8
 8015424:	08023bdc 	.word	0x08023bdc

08015428 <get_message_typesupport_handle>:
 8015428:	6883      	ldr	r3, [r0, #8]
 801542a:	4718      	bx	r3

0801542c <get_message_typesupport_handle_function>:
 801542c:	b510      	push	{r4, lr}
 801542e:	4604      	mov	r4, r0
 8015430:	6800      	ldr	r0, [r0, #0]
 8015432:	f7ea fecd 	bl	80001d0 <strcmp>
 8015436:	2800      	cmp	r0, #0
 8015438:	bf0c      	ite	eq
 801543a:	4620      	moveq	r0, r4
 801543c:	2000      	movne	r0, #0
 801543e:	bd10      	pop	{r4, pc}

08015440 <rosidl_runtime_c__String__init>:
 8015440:	b510      	push	{r4, lr}
 8015442:	4604      	mov	r4, r0
 8015444:	b086      	sub	sp, #24
 8015446:	b170      	cbz	r0, 8015466 <rosidl_runtime_c__String__init+0x26>
 8015448:	a801      	add	r0, sp, #4
 801544a:	f7fd fc09 	bl	8012c60 <rcutils_get_default_allocator>
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	9905      	ldr	r1, [sp, #20]
 8015452:	2001      	movs	r0, #1
 8015454:	4798      	blx	r3
 8015456:	6020      	str	r0, [r4, #0]
 8015458:	b128      	cbz	r0, 8015466 <rosidl_runtime_c__String__init+0x26>
 801545a:	2100      	movs	r1, #0
 801545c:	2201      	movs	r2, #1
 801545e:	7001      	strb	r1, [r0, #0]
 8015460:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015464:	4610      	mov	r0, r2
 8015466:	b006      	add	sp, #24
 8015468:	bd10      	pop	{r4, pc}
 801546a:	bf00      	nop

0801546c <rosidl_runtime_c__String__fini>:
 801546c:	b320      	cbz	r0, 80154b8 <rosidl_runtime_c__String__fini+0x4c>
 801546e:	b510      	push	{r4, lr}
 8015470:	6803      	ldr	r3, [r0, #0]
 8015472:	b086      	sub	sp, #24
 8015474:	4604      	mov	r4, r0
 8015476:	b173      	cbz	r3, 8015496 <rosidl_runtime_c__String__fini+0x2a>
 8015478:	6883      	ldr	r3, [r0, #8]
 801547a:	b1f3      	cbz	r3, 80154ba <rosidl_runtime_c__String__fini+0x4e>
 801547c:	a801      	add	r0, sp, #4
 801547e:	f7fd fbef 	bl	8012c60 <rcutils_get_default_allocator>
 8015482:	9b02      	ldr	r3, [sp, #8]
 8015484:	9905      	ldr	r1, [sp, #20]
 8015486:	6820      	ldr	r0, [r4, #0]
 8015488:	4798      	blx	r3
 801548a:	2300      	movs	r3, #0
 801548c:	e9c4 3300 	strd	r3, r3, [r4]
 8015490:	60a3      	str	r3, [r4, #8]
 8015492:	b006      	add	sp, #24
 8015494:	bd10      	pop	{r4, pc}
 8015496:	6843      	ldr	r3, [r0, #4]
 8015498:	b9db      	cbnz	r3, 80154d2 <rosidl_runtime_c__String__fini+0x66>
 801549a:	6883      	ldr	r3, [r0, #8]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d0f8      	beq.n	8015492 <rosidl_runtime_c__String__fini+0x26>
 80154a0:	4b12      	ldr	r3, [pc, #72]	@ (80154ec <rosidl_runtime_c__String__fini+0x80>)
 80154a2:	4813      	ldr	r0, [pc, #76]	@ (80154f0 <rosidl_runtime_c__String__fini+0x84>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	2251      	movs	r2, #81	@ 0x51
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	2101      	movs	r1, #1
 80154ac:	f007 fdf2 	bl	801d094 <fwrite>
 80154b0:	f04f 30ff 	mov.w	r0, #4294967295
 80154b4:	f006 fe44 	bl	801c140 <exit>
 80154b8:	4770      	bx	lr
 80154ba:	4b0c      	ldr	r3, [pc, #48]	@ (80154ec <rosidl_runtime_c__String__fini+0x80>)
 80154bc:	480d      	ldr	r0, [pc, #52]	@ (80154f4 <rosidl_runtime_c__String__fini+0x88>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	224c      	movs	r2, #76	@ 0x4c
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	2101      	movs	r1, #1
 80154c6:	f007 fde5 	bl	801d094 <fwrite>
 80154ca:	f04f 30ff 	mov.w	r0, #4294967295
 80154ce:	f006 fe37 	bl	801c140 <exit>
 80154d2:	4b06      	ldr	r3, [pc, #24]	@ (80154ec <rosidl_runtime_c__String__fini+0x80>)
 80154d4:	4808      	ldr	r0, [pc, #32]	@ (80154f8 <rosidl_runtime_c__String__fini+0x8c>)
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	224e      	movs	r2, #78	@ 0x4e
 80154da:	68db      	ldr	r3, [r3, #12]
 80154dc:	2101      	movs	r1, #1
 80154de:	f007 fdd9 	bl	801d094 <fwrite>
 80154e2:	f04f 30ff 	mov.w	r0, #4294967295
 80154e6:	f006 fe2b 	bl	801c140 <exit>
 80154ea:	bf00      	nop
 80154ec:	200026b0 	.word	0x200026b0
 80154f0:	08023d7c 	.word	0x08023d7c
 80154f4:	08023cdc 	.word	0x08023cdc
 80154f8:	08023d2c 	.word	0x08023d2c

080154fc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80154fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015500:	6805      	ldr	r5, [r0, #0]
 8015502:	4604      	mov	r4, r0
 8015504:	4628      	mov	r0, r5
 8015506:	460e      	mov	r6, r1
 8015508:	f7ea fe62 	bl	80001d0 <strcmp>
 801550c:	b1c8      	cbz	r0, 8015542 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801550e:	4b11      	ldr	r3, [pc, #68]	@ (8015554 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	429d      	cmp	r5, r3
 8015514:	d112      	bne.n	801553c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015516:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801551a:	f8d8 4000 	ldr.w	r4, [r8]
 801551e:	b16c      	cbz	r4, 801553c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015520:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015524:	2700      	movs	r7, #0
 8015526:	3d04      	subs	r5, #4
 8015528:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801552c:	4631      	mov	r1, r6
 801552e:	f7ea fe4f 	bl	80001d0 <strcmp>
 8015532:	00bb      	lsls	r3, r7, #2
 8015534:	b140      	cbz	r0, 8015548 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015536:	3701      	adds	r7, #1
 8015538:	42bc      	cmp	r4, r7
 801553a:	d1f5      	bne.n	8015528 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801553c:	2000      	movs	r0, #0
 801553e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015542:	4620      	mov	r0, r4
 8015544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015548:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801554c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015550:	58d3      	ldr	r3, [r2, r3]
 8015552:	4718      	bx	r3
 8015554:	20002488 	.word	0x20002488

08015558 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8015558:	4b04      	ldr	r3, [pc, #16]	@ (801556c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	b10a      	cbz	r2, 8015562 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801555e:	4803      	ldr	r0, [pc, #12]	@ (801556c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8015560:	4770      	bx	lr
 8015562:	4a03      	ldr	r2, [pc, #12]	@ (8015570 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8015564:	4801      	ldr	r0, [pc, #4]	@ (801556c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8015566:	6812      	ldr	r2, [r2, #0]
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	4770      	bx	lr
 801556c:	20002498 	.word	0x20002498
 8015570:	20002488 	.word	0x20002488

08015574 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8015574:	4a02      	ldr	r2, [pc, #8]	@ (8015580 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8015576:	4b03      	ldr	r3, [pc, #12]	@ (8015584 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8015578:	6812      	ldr	r2, [r2, #0]
 801557a:	601a      	str	r2, [r3, #0]
 801557c:	4770      	bx	lr
 801557e:	bf00      	nop
 8015580:	20002488 	.word	0x20002488
 8015584:	20002498 	.word	0x20002498

08015588 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8015588:	4b04      	ldr	r3, [pc, #16]	@ (801559c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	b10a      	cbz	r2, 8015592 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801558e:	4803      	ldr	r0, [pc, #12]	@ (801559c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8015590:	4770      	bx	lr
 8015592:	4a03      	ldr	r2, [pc, #12]	@ (80155a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8015594:	4801      	ldr	r0, [pc, #4]	@ (801559c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8015596:	6812      	ldr	r2, [r2, #0]
 8015598:	601a      	str	r2, [r3, #0]
 801559a:	4770      	bx	lr
 801559c:	200024b8 	.word	0x200024b8
 80155a0:	20002488 	.word	0x20002488

080155a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80155a4:	4a02      	ldr	r2, [pc, #8]	@ (80155b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 80155a6:	4b03      	ldr	r3, [pc, #12]	@ (80155b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 80155a8:	6812      	ldr	r2, [r2, #0]
 80155aa:	601a      	str	r2, [r3, #0]
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	20002488 	.word	0x20002488
 80155b4:	200024b8 	.word	0x200024b8

080155b8 <_Header__max_serialized_size>:
 80155b8:	b500      	push	{lr}
 80155ba:	b083      	sub	sp, #12
 80155bc:	2301      	movs	r3, #1
 80155be:	2100      	movs	r1, #0
 80155c0:	f10d 0007 	add.w	r0, sp, #7
 80155c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80155c8:	f000 f96e 	bl	80158a8 <max_serialized_size_builtin_interfaces__msg__Time>
 80155cc:	b003      	add	sp, #12
 80155ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80155d2:	bf00      	nop

080155d4 <get_serialized_size_std_msgs__msg__Header>:
 80155d4:	b570      	push	{r4, r5, r6, lr}
 80155d6:	4605      	mov	r5, r0
 80155d8:	b168      	cbz	r0, 80155f6 <get_serialized_size_std_msgs__msg__Header+0x22>
 80155da:	460c      	mov	r4, r1
 80155dc:	f000 f914 	bl	8015808 <get_serialized_size_builtin_interfaces__msg__Time>
 80155e0:	1826      	adds	r6, r4, r0
 80155e2:	2104      	movs	r1, #4
 80155e4:	4630      	mov	r0, r6
 80155e6:	f7fa f827 	bl	800f638 <ucdr_alignment>
 80155ea:	68e9      	ldr	r1, [r5, #12]
 80155ec:	f1c4 0405 	rsb	r4, r4, #5
 80155f0:	440c      	add	r4, r1
 80155f2:	4404      	add	r4, r0
 80155f4:	19a0      	adds	r0, r4, r6
 80155f6:	bd70      	pop	{r4, r5, r6, pc}

080155f8 <_Header__cdr_deserialize>:
 80155f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155fa:	460c      	mov	r4, r1
 80155fc:	b083      	sub	sp, #12
 80155fe:	b1e1      	cbz	r1, 801563a <_Header__cdr_deserialize+0x42>
 8015600:	4606      	mov	r6, r0
 8015602:	f000 f965 	bl	80158d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015606:	6843      	ldr	r3, [r0, #4]
 8015608:	4621      	mov	r1, r4
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	4630      	mov	r0, r6
 801560e:	4798      	blx	r3
 8015610:	6927      	ldr	r7, [r4, #16]
 8015612:	68a1      	ldr	r1, [r4, #8]
 8015614:	ab01      	add	r3, sp, #4
 8015616:	463a      	mov	r2, r7
 8015618:	4630      	mov	r0, r6
 801561a:	f000 fc25 	bl	8015e68 <ucdr_deserialize_sequence_char>
 801561e:	9b01      	ldr	r3, [sp, #4]
 8015620:	4605      	mov	r5, r0
 8015622:	b920      	cbnz	r0, 801562e <_Header__cdr_deserialize+0x36>
 8015624:	429f      	cmp	r7, r3
 8015626:	d30c      	bcc.n	8015642 <_Header__cdr_deserialize+0x4a>
 8015628:	4628      	mov	r0, r5
 801562a:	b003      	add	sp, #12
 801562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801562e:	b103      	cbz	r3, 8015632 <_Header__cdr_deserialize+0x3a>
 8015630:	3b01      	subs	r3, #1
 8015632:	4628      	mov	r0, r5
 8015634:	60e3      	str	r3, [r4, #12]
 8015636:	b003      	add	sp, #12
 8015638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801563a:	460d      	mov	r5, r1
 801563c:	4628      	mov	r0, r5
 801563e:	b003      	add	sp, #12
 8015640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015642:	2101      	movs	r1, #1
 8015644:	75b0      	strb	r0, [r6, #22]
 8015646:	7571      	strb	r1, [r6, #21]
 8015648:	4630      	mov	r0, r6
 801564a:	60e5      	str	r5, [r4, #12]
 801564c:	f7fa f80a 	bl	800f664 <ucdr_align_to>
 8015650:	4630      	mov	r0, r6
 8015652:	9901      	ldr	r1, [sp, #4]
 8015654:	f7fa f83c 	bl	800f6d0 <ucdr_advance_buffer>
 8015658:	4628      	mov	r0, r5
 801565a:	b003      	add	sp, #12
 801565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801565e:	bf00      	nop

08015660 <_Header__cdr_serialize>:
 8015660:	b1f8      	cbz	r0, 80156a2 <_Header__cdr_serialize+0x42>
 8015662:	b570      	push	{r4, r5, r6, lr}
 8015664:	4604      	mov	r4, r0
 8015666:	460d      	mov	r5, r1
 8015668:	f000 f932 	bl	80158d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801566c:	6843      	ldr	r3, [r0, #4]
 801566e:	4629      	mov	r1, r5
 8015670:	689b      	ldr	r3, [r3, #8]
 8015672:	4620      	mov	r0, r4
 8015674:	4798      	blx	r3
 8015676:	68a6      	ldr	r6, [r4, #8]
 8015678:	b156      	cbz	r6, 8015690 <_Header__cdr_serialize+0x30>
 801567a:	4630      	mov	r0, r6
 801567c:	f7ea fe08 	bl	8000290 <strlen>
 8015680:	4631      	mov	r1, r6
 8015682:	60e0      	str	r0, [r4, #12]
 8015684:	1c42      	adds	r2, r0, #1
 8015686:	4628      	mov	r0, r5
 8015688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801568c:	f000 bbda 	b.w	8015e44 <ucdr_serialize_sequence_char>
 8015690:	4630      	mov	r0, r6
 8015692:	60e0      	str	r0, [r4, #12]
 8015694:	4632      	mov	r2, r6
 8015696:	4631      	mov	r1, r6
 8015698:	4628      	mov	r0, r5
 801569a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801569e:	f000 bbd1 	b.w	8015e44 <ucdr_serialize_sequence_char>
 80156a2:	4770      	bx	lr

080156a4 <_Header__get_serialized_size>:
 80156a4:	b538      	push	{r3, r4, r5, lr}
 80156a6:	4604      	mov	r4, r0
 80156a8:	b150      	cbz	r0, 80156c0 <_Header__get_serialized_size+0x1c>
 80156aa:	2100      	movs	r1, #0
 80156ac:	f000 f8ac 	bl	8015808 <get_serialized_size_builtin_interfaces__msg__Time>
 80156b0:	2104      	movs	r1, #4
 80156b2:	4605      	mov	r5, r0
 80156b4:	f7f9 ffc0 	bl	800f638 <ucdr_alignment>
 80156b8:	68e2      	ldr	r2, [r4, #12]
 80156ba:	3205      	adds	r2, #5
 80156bc:	1953      	adds	r3, r2, r5
 80156be:	4418      	add	r0, r3
 80156c0:	bd38      	pop	{r3, r4, r5, pc}
 80156c2:	bf00      	nop

080156c4 <max_serialized_size_std_msgs__msg__Header>:
 80156c4:	b510      	push	{r4, lr}
 80156c6:	2301      	movs	r3, #1
 80156c8:	4604      	mov	r4, r0
 80156ca:	7003      	strb	r3, [r0, #0]
 80156cc:	f000 f8ec 	bl	80158a8 <max_serialized_size_builtin_interfaces__msg__Time>
 80156d0:	2300      	movs	r3, #0
 80156d2:	7023      	strb	r3, [r4, #0]
 80156d4:	bd10      	pop	{r4, pc}
 80156d6:	bf00      	nop

080156d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80156d8:	4800      	ldr	r0, [pc, #0]	@ (80156dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80156da:	4770      	bx	lr
 80156dc:	200024d0 	.word	0x200024d0

080156e0 <_Int32__max_serialized_size>:
 80156e0:	b508      	push	{r3, lr}
 80156e2:	2104      	movs	r1, #4
 80156e4:	2000      	movs	r0, #0
 80156e6:	f7f9 ffa7 	bl	800f638 <ucdr_alignment>
 80156ea:	3004      	adds	r0, #4
 80156ec:	bd08      	pop	{r3, pc}
 80156ee:	bf00      	nop

080156f0 <_Int32__cdr_deserialize>:
 80156f0:	b109      	cbz	r1, 80156f6 <_Int32__cdr_deserialize+0x6>
 80156f2:	f7f9 bb83 	b.w	800edfc <ucdr_deserialize_int32_t>
 80156f6:	4608      	mov	r0, r1
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop

080156fc <get_serialized_size_std_msgs__msg__Int32>:
 80156fc:	b138      	cbz	r0, 801570e <get_serialized_size_std_msgs__msg__Int32+0x12>
 80156fe:	b508      	push	{r3, lr}
 8015700:	460b      	mov	r3, r1
 8015702:	4618      	mov	r0, r3
 8015704:	2104      	movs	r1, #4
 8015706:	f7f9 ff97 	bl	800f638 <ucdr_alignment>
 801570a:	3004      	adds	r0, #4
 801570c:	bd08      	pop	{r3, pc}
 801570e:	4770      	bx	lr

08015710 <_Int32__cdr_serialize>:
 8015710:	460a      	mov	r2, r1
 8015712:	b118      	cbz	r0, 801571c <_Int32__cdr_serialize+0xc>
 8015714:	6801      	ldr	r1, [r0, #0]
 8015716:	4610      	mov	r0, r2
 8015718:	f7f9 bad8 	b.w	800eccc <ucdr_serialize_int32_t>
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop

08015720 <_Int32__get_serialized_size>:
 8015720:	b130      	cbz	r0, 8015730 <_Int32__get_serialized_size+0x10>
 8015722:	b508      	push	{r3, lr}
 8015724:	2104      	movs	r1, #4
 8015726:	2000      	movs	r0, #0
 8015728:	f7f9 ff86 	bl	800f638 <ucdr_alignment>
 801572c:	3004      	adds	r0, #4
 801572e:	bd08      	pop	{r3, pc}
 8015730:	4770      	bx	lr
 8015732:	bf00      	nop

08015734 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8015734:	4800      	ldr	r0, [pc, #0]	@ (8015738 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8015736:	4770      	bx	lr
 8015738:	20002504 	.word	0x20002504

0801573c <_String__max_serialized_size>:
 801573c:	2000      	movs	r0, #0
 801573e:	4770      	bx	lr

08015740 <_String__cdr_serialize>:
 8015740:	b1c0      	cbz	r0, 8015774 <_String__cdr_serialize+0x34>
 8015742:	b570      	push	{r4, r5, r6, lr}
 8015744:	6806      	ldr	r6, [r0, #0]
 8015746:	460d      	mov	r5, r1
 8015748:	4604      	mov	r4, r0
 801574a:	b156      	cbz	r6, 8015762 <_String__cdr_serialize+0x22>
 801574c:	4630      	mov	r0, r6
 801574e:	f7ea fd9f 	bl	8000290 <strlen>
 8015752:	4631      	mov	r1, r6
 8015754:	6060      	str	r0, [r4, #4]
 8015756:	1c42      	adds	r2, r0, #1
 8015758:	4628      	mov	r0, r5
 801575a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801575e:	f000 bb71 	b.w	8015e44 <ucdr_serialize_sequence_char>
 8015762:	4630      	mov	r0, r6
 8015764:	6060      	str	r0, [r4, #4]
 8015766:	4632      	mov	r2, r6
 8015768:	4631      	mov	r1, r6
 801576a:	4628      	mov	r0, r5
 801576c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015770:	f000 bb68 	b.w	8015e44 <ucdr_serialize_sequence_char>
 8015774:	4770      	bx	lr
 8015776:	bf00      	nop

08015778 <get_serialized_size_std_msgs__msg__String>:
 8015778:	b510      	push	{r4, lr}
 801577a:	4604      	mov	r4, r0
 801577c:	b138      	cbz	r0, 801578e <get_serialized_size_std_msgs__msg__String+0x16>
 801577e:	460b      	mov	r3, r1
 8015780:	4618      	mov	r0, r3
 8015782:	2104      	movs	r1, #4
 8015784:	f7f9 ff58 	bl	800f638 <ucdr_alignment>
 8015788:	6863      	ldr	r3, [r4, #4]
 801578a:	3305      	adds	r3, #5
 801578c:	4418      	add	r0, r3
 801578e:	bd10      	pop	{r4, pc}

08015790 <_String__cdr_deserialize>:
 8015790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015792:	460c      	mov	r4, r1
 8015794:	b083      	sub	sp, #12
 8015796:	b1a1      	cbz	r1, 80157c2 <_String__cdr_deserialize+0x32>
 8015798:	688f      	ldr	r7, [r1, #8]
 801579a:	6809      	ldr	r1, [r1, #0]
 801579c:	ab01      	add	r3, sp, #4
 801579e:	463a      	mov	r2, r7
 80157a0:	4606      	mov	r6, r0
 80157a2:	f000 fb61 	bl	8015e68 <ucdr_deserialize_sequence_char>
 80157a6:	9b01      	ldr	r3, [sp, #4]
 80157a8:	4605      	mov	r5, r0
 80157aa:	b920      	cbnz	r0, 80157b6 <_String__cdr_deserialize+0x26>
 80157ac:	429f      	cmp	r7, r3
 80157ae:	d30c      	bcc.n	80157ca <_String__cdr_deserialize+0x3a>
 80157b0:	4628      	mov	r0, r5
 80157b2:	b003      	add	sp, #12
 80157b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157b6:	b103      	cbz	r3, 80157ba <_String__cdr_deserialize+0x2a>
 80157b8:	3b01      	subs	r3, #1
 80157ba:	4628      	mov	r0, r5
 80157bc:	6063      	str	r3, [r4, #4]
 80157be:	b003      	add	sp, #12
 80157c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c2:	460d      	mov	r5, r1
 80157c4:	4628      	mov	r0, r5
 80157c6:	b003      	add	sp, #12
 80157c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ca:	2101      	movs	r1, #1
 80157cc:	75b0      	strb	r0, [r6, #22]
 80157ce:	7571      	strb	r1, [r6, #21]
 80157d0:	4630      	mov	r0, r6
 80157d2:	6065      	str	r5, [r4, #4]
 80157d4:	f7f9 ff46 	bl	800f664 <ucdr_align_to>
 80157d8:	4630      	mov	r0, r6
 80157da:	9901      	ldr	r1, [sp, #4]
 80157dc:	f7f9 ff78 	bl	800f6d0 <ucdr_advance_buffer>
 80157e0:	4628      	mov	r0, r5
 80157e2:	b003      	add	sp, #12
 80157e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157e6:	bf00      	nop

080157e8 <_String__get_serialized_size>:
 80157e8:	b510      	push	{r4, lr}
 80157ea:	4604      	mov	r4, r0
 80157ec:	b130      	cbz	r0, 80157fc <_String__get_serialized_size+0x14>
 80157ee:	2104      	movs	r1, #4
 80157f0:	2000      	movs	r0, #0
 80157f2:	f7f9 ff21 	bl	800f638 <ucdr_alignment>
 80157f6:	6863      	ldr	r3, [r4, #4]
 80157f8:	3305      	adds	r3, #5
 80157fa:	4418      	add	r0, r3
 80157fc:	bd10      	pop	{r4, pc}
 80157fe:	bf00      	nop

08015800 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8015800:	4800      	ldr	r0, [pc, #0]	@ (8015804 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8015802:	4770      	bx	lr
 8015804:	20002538 	.word	0x20002538

08015808 <get_serialized_size_builtin_interfaces__msg__Time>:
 8015808:	b180      	cbz	r0, 801582c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 801580a:	b538      	push	{r3, r4, r5, lr}
 801580c:	460d      	mov	r5, r1
 801580e:	4628      	mov	r0, r5
 8015810:	2104      	movs	r1, #4
 8015812:	f7f9 ff11 	bl	800f638 <ucdr_alignment>
 8015816:	1d2b      	adds	r3, r5, #4
 8015818:	181c      	adds	r4, r3, r0
 801581a:	2104      	movs	r1, #4
 801581c:	4620      	mov	r0, r4
 801581e:	f7f9 ff0b 	bl	800f638 <ucdr_alignment>
 8015822:	f1c5 0504 	rsb	r5, r5, #4
 8015826:	4428      	add	r0, r5
 8015828:	4420      	add	r0, r4
 801582a:	bd38      	pop	{r3, r4, r5, pc}
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop

08015830 <_Time__cdr_deserialize>:
 8015830:	b538      	push	{r3, r4, r5, lr}
 8015832:	460c      	mov	r4, r1
 8015834:	b141      	cbz	r1, 8015848 <_Time__cdr_deserialize+0x18>
 8015836:	4605      	mov	r5, r0
 8015838:	f7f9 fae0 	bl	800edfc <ucdr_deserialize_int32_t>
 801583c:	1d21      	adds	r1, r4, #4
 801583e:	4628      	mov	r0, r5
 8015840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015844:	f7f8 bf58 	b.w	800e6f8 <ucdr_deserialize_uint32_t>
 8015848:	4608      	mov	r0, r1
 801584a:	bd38      	pop	{r3, r4, r5, pc}

0801584c <_Time__cdr_serialize>:
 801584c:	b160      	cbz	r0, 8015868 <_Time__cdr_serialize+0x1c>
 801584e:	b538      	push	{r3, r4, r5, lr}
 8015850:	460d      	mov	r5, r1
 8015852:	4604      	mov	r4, r0
 8015854:	6801      	ldr	r1, [r0, #0]
 8015856:	4628      	mov	r0, r5
 8015858:	f7f9 fa38 	bl	800eccc <ucdr_serialize_int32_t>
 801585c:	6861      	ldr	r1, [r4, #4]
 801585e:	4628      	mov	r0, r5
 8015860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015864:	f7f8 be18 	b.w	800e498 <ucdr_serialize_uint32_t>
 8015868:	4770      	bx	lr
 801586a:	bf00      	nop

0801586c <_Time__get_serialized_size>:
 801586c:	b160      	cbz	r0, 8015888 <_Time__get_serialized_size+0x1c>
 801586e:	b510      	push	{r4, lr}
 8015870:	2104      	movs	r1, #4
 8015872:	2000      	movs	r0, #0
 8015874:	f7f9 fee0 	bl	800f638 <ucdr_alignment>
 8015878:	1d04      	adds	r4, r0, #4
 801587a:	2104      	movs	r1, #4
 801587c:	4620      	mov	r0, r4
 801587e:	f7f9 fedb 	bl	800f638 <ucdr_alignment>
 8015882:	3004      	adds	r0, #4
 8015884:	4420      	add	r0, r4
 8015886:	bd10      	pop	{r4, pc}
 8015888:	4770      	bx	lr
 801588a:	bf00      	nop

0801588c <_Time__max_serialized_size>:
 801588c:	b510      	push	{r4, lr}
 801588e:	2104      	movs	r1, #4
 8015890:	2000      	movs	r0, #0
 8015892:	f7f9 fed1 	bl	800f638 <ucdr_alignment>
 8015896:	1d04      	adds	r4, r0, #4
 8015898:	2104      	movs	r1, #4
 801589a:	4620      	mov	r0, r4
 801589c:	f7f9 fecc 	bl	800f638 <ucdr_alignment>
 80158a0:	3004      	adds	r0, #4
 80158a2:	4420      	add	r0, r4
 80158a4:	bd10      	pop	{r4, pc}
 80158a6:	bf00      	nop

080158a8 <max_serialized_size_builtin_interfaces__msg__Time>:
 80158a8:	b538      	push	{r3, r4, r5, lr}
 80158aa:	460c      	mov	r4, r1
 80158ac:	2301      	movs	r3, #1
 80158ae:	7003      	strb	r3, [r0, #0]
 80158b0:	2104      	movs	r1, #4
 80158b2:	4620      	mov	r0, r4
 80158b4:	f7f9 fec0 	bl	800f638 <ucdr_alignment>
 80158b8:	1d25      	adds	r5, r4, #4
 80158ba:	4405      	add	r5, r0
 80158bc:	2104      	movs	r1, #4
 80158be:	4628      	mov	r0, r5
 80158c0:	f7f9 feba 	bl	800f638 <ucdr_alignment>
 80158c4:	f1c4 0404 	rsb	r4, r4, #4
 80158c8:	4420      	add	r0, r4
 80158ca:	4428      	add	r0, r5
 80158cc:	bd38      	pop	{r3, r4, r5, pc}
 80158ce:	bf00      	nop

080158d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80158d0:	4800      	ldr	r0, [pc, #0]	@ (80158d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80158d2:	4770      	bx	lr
 80158d4:	2000256c 	.word	0x2000256c

080158d8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 80158d8:	b538      	push	{r3, r4, r5, lr}
 80158da:	b158      	cbz	r0, 80158f4 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 80158dc:	460d      	mov	r5, r1
 80158de:	f005 fcb9 	bl	801b254 <get_serialized_size_geometry_msgs__msg__Pose>
 80158e2:	182c      	adds	r4, r5, r0
 80158e4:	2108      	movs	r1, #8
 80158e6:	4620      	mov	r0, r4
 80158e8:	f7f9 fea6 	bl	800f638 <ucdr_alignment>
 80158ec:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 80158f0:	4428      	add	r0, r5
 80158f2:	4420      	add	r0, r4
 80158f4:	bd38      	pop	{r3, r4, r5, pc}
 80158f6:	bf00      	nop

080158f8 <_PoseWithCovariance__cdr_deserialize>:
 80158f8:	b538      	push	{r3, r4, r5, lr}
 80158fa:	460c      	mov	r4, r1
 80158fc:	b179      	cbz	r1, 801591e <_PoseWithCovariance__cdr_deserialize+0x26>
 80158fe:	4605      	mov	r5, r0
 8015900:	f005 fd18 	bl	801b334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8015904:	6843      	ldr	r3, [r0, #4]
 8015906:	4621      	mov	r1, r4
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	4628      	mov	r0, r5
 801590c:	4798      	blx	r3
 801590e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8015912:	4628      	mov	r0, r5
 8015914:	2224      	movs	r2, #36	@ 0x24
 8015916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801591a:	f000 ba3d 	b.w	8015d98 <ucdr_deserialize_array_double>
 801591e:	4608      	mov	r0, r1
 8015920:	bd38      	pop	{r3, r4, r5, pc}
 8015922:	bf00      	nop

08015924 <_PoseWithCovariance__cdr_serialize>:
 8015924:	b188      	cbz	r0, 801594a <_PoseWithCovariance__cdr_serialize+0x26>
 8015926:	b538      	push	{r3, r4, r5, lr}
 8015928:	460d      	mov	r5, r1
 801592a:	4604      	mov	r4, r0
 801592c:	f005 fd02 	bl	801b334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8015930:	6843      	ldr	r3, [r0, #4]
 8015932:	4629      	mov	r1, r5
 8015934:	689b      	ldr	r3, [r3, #8]
 8015936:	4620      	mov	r0, r4
 8015938:	4798      	blx	r3
 801593a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801593e:	4628      	mov	r0, r5
 8015940:	2224      	movs	r2, #36	@ 0x24
 8015942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015946:	f000 b9d3 	b.w	8015cf0 <ucdr_serialize_array_double>
 801594a:	4770      	bx	lr

0801594c <_PoseWithCovariance__get_serialized_size>:
 801594c:	b158      	cbz	r0, 8015966 <_PoseWithCovariance__get_serialized_size+0x1a>
 801594e:	b510      	push	{r4, lr}
 8015950:	2100      	movs	r1, #0
 8015952:	f005 fc7f 	bl	801b254 <get_serialized_size_geometry_msgs__msg__Pose>
 8015956:	2108      	movs	r1, #8
 8015958:	4604      	mov	r4, r0
 801595a:	f7f9 fe6d 	bl	800f638 <ucdr_alignment>
 801595e:	4420      	add	r0, r4
 8015960:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8015964:	bd10      	pop	{r4, pc}
 8015966:	4770      	bx	lr

08015968 <_PoseWithCovariance__max_serialized_size>:
 8015968:	b510      	push	{r4, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	2301      	movs	r3, #1
 801596e:	2100      	movs	r1, #0
 8015970:	f10d 0007 	add.w	r0, sp, #7
 8015974:	f88d 3007 	strb.w	r3, [sp, #7]
 8015978:	f005 fcce 	bl	801b318 <max_serialized_size_geometry_msgs__msg__Pose>
 801597c:	2108      	movs	r1, #8
 801597e:	4604      	mov	r4, r0
 8015980:	f7f9 fe5a 	bl	800f638 <ucdr_alignment>
 8015984:	4420      	add	r0, r4
 8015986:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801598a:	b002      	add	sp, #8
 801598c:	bd10      	pop	{r4, pc}
 801598e:	bf00      	nop

08015990 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	2301      	movs	r3, #1
 8015994:	7003      	strb	r3, [r0, #0]
 8015996:	460c      	mov	r4, r1
 8015998:	f005 fcbe 	bl	801b318 <max_serialized_size_geometry_msgs__msg__Pose>
 801599c:	1825      	adds	r5, r4, r0
 801599e:	2108      	movs	r1, #8
 80159a0:	4628      	mov	r0, r5
 80159a2:	f7f9 fe49 	bl	800f638 <ucdr_alignment>
 80159a6:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 80159aa:	4420      	add	r0, r4
 80159ac:	4428      	add	r0, r5
 80159ae:	bd38      	pop	{r3, r4, r5, pc}

080159b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 80159b0:	4800      	ldr	r0, [pc, #0]	@ (80159b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 80159b2:	4770      	bx	lr
 80159b4:	200025a0 	.word	0x200025a0

080159b8 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 80159b8:	b538      	push	{r3, r4, r5, lr}
 80159ba:	b158      	cbz	r0, 80159d4 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 80159bc:	460d      	mov	r5, r1
 80159be:	f7f8 fa23 	bl	800de08 <get_serialized_size_geometry_msgs__msg__Twist>
 80159c2:	182c      	adds	r4, r5, r0
 80159c4:	2108      	movs	r1, #8
 80159c6:	4620      	mov	r0, r4
 80159c8:	f7f9 fe36 	bl	800f638 <ucdr_alignment>
 80159cc:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 80159d0:	4428      	add	r0, r5
 80159d2:	4420      	add	r0, r4
 80159d4:	bd38      	pop	{r3, r4, r5, pc}
 80159d6:	bf00      	nop

080159d8 <_TwistWithCovariance__cdr_deserialize>:
 80159d8:	b538      	push	{r3, r4, r5, lr}
 80159da:	460c      	mov	r4, r1
 80159dc:	b179      	cbz	r1, 80159fe <_TwistWithCovariance__cdr_deserialize+0x26>
 80159de:	4605      	mov	r5, r0
 80159e0:	f7f8 fa82 	bl	800dee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80159e4:	6843      	ldr	r3, [r0, #4]
 80159e6:	4621      	mov	r1, r4
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	4628      	mov	r0, r5
 80159ec:	4798      	blx	r3
 80159ee:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80159f2:	4628      	mov	r0, r5
 80159f4:	2224      	movs	r2, #36	@ 0x24
 80159f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159fa:	f000 b9cd 	b.w	8015d98 <ucdr_deserialize_array_double>
 80159fe:	4608      	mov	r0, r1
 8015a00:	bd38      	pop	{r3, r4, r5, pc}
 8015a02:	bf00      	nop

08015a04 <_TwistWithCovariance__cdr_serialize>:
 8015a04:	b188      	cbz	r0, 8015a2a <_TwistWithCovariance__cdr_serialize+0x26>
 8015a06:	b538      	push	{r3, r4, r5, lr}
 8015a08:	460d      	mov	r5, r1
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	f7f8 fa6c 	bl	800dee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8015a10:	6843      	ldr	r3, [r0, #4]
 8015a12:	4629      	mov	r1, r5
 8015a14:	689b      	ldr	r3, [r3, #8]
 8015a16:	4620      	mov	r0, r4
 8015a18:	4798      	blx	r3
 8015a1a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015a1e:	4628      	mov	r0, r5
 8015a20:	2224      	movs	r2, #36	@ 0x24
 8015a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a26:	f000 b963 	b.w	8015cf0 <ucdr_serialize_array_double>
 8015a2a:	4770      	bx	lr

08015a2c <_TwistWithCovariance__get_serialized_size>:
 8015a2c:	b158      	cbz	r0, 8015a46 <_TwistWithCovariance__get_serialized_size+0x1a>
 8015a2e:	b510      	push	{r4, lr}
 8015a30:	2100      	movs	r1, #0
 8015a32:	f7f8 f9e9 	bl	800de08 <get_serialized_size_geometry_msgs__msg__Twist>
 8015a36:	2108      	movs	r1, #8
 8015a38:	4604      	mov	r4, r0
 8015a3a:	f7f9 fdfd 	bl	800f638 <ucdr_alignment>
 8015a3e:	4420      	add	r0, r4
 8015a40:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8015a44:	bd10      	pop	{r4, pc}
 8015a46:	4770      	bx	lr

08015a48 <_TwistWithCovariance__max_serialized_size>:
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	2100      	movs	r1, #0
 8015a50:	f10d 0007 	add.w	r0, sp, #7
 8015a54:	f88d 3007 	strb.w	r3, [sp, #7]
 8015a58:	f7f8 fa38 	bl	800decc <max_serialized_size_geometry_msgs__msg__Twist>
 8015a5c:	2108      	movs	r1, #8
 8015a5e:	4604      	mov	r4, r0
 8015a60:	f7f9 fdea 	bl	800f638 <ucdr_alignment>
 8015a64:	4420      	add	r0, r4
 8015a66:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8015a6a:	b002      	add	sp, #8
 8015a6c:	bd10      	pop	{r4, pc}
 8015a6e:	bf00      	nop

08015a70 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8015a70:	b538      	push	{r3, r4, r5, lr}
 8015a72:	2301      	movs	r3, #1
 8015a74:	7003      	strb	r3, [r0, #0]
 8015a76:	460c      	mov	r4, r1
 8015a78:	f7f8 fa28 	bl	800decc <max_serialized_size_geometry_msgs__msg__Twist>
 8015a7c:	1825      	adds	r5, r4, r0
 8015a7e:	2108      	movs	r1, #8
 8015a80:	4628      	mov	r0, r5
 8015a82:	f7f9 fdd9 	bl	800f638 <ucdr_alignment>
 8015a86:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8015a8a:	4420      	add	r0, r4
 8015a8c:	4428      	add	r0, r5
 8015a8e:	bd38      	pop	{r3, r4, r5, pc}

08015a90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8015a90:	4800      	ldr	r0, [pc, #0]	@ (8015a94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 8015a92:	4770      	bx	lr
 8015a94:	200025d4 	.word	0x200025d4

08015a98 <ucdr_serialize_endian_array_char>:
 8015a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	461f      	mov	r7, r3
 8015aa0:	4605      	mov	r5, r0
 8015aa2:	4690      	mov	r8, r2
 8015aa4:	f7f9 fd70 	bl	800f588 <ucdr_check_buffer_available_for>
 8015aa8:	b9e0      	cbnz	r0, 8015ae4 <ucdr_serialize_endian_array_char+0x4c>
 8015aaa:	463e      	mov	r6, r7
 8015aac:	e009      	b.n	8015ac2 <ucdr_serialize_endian_array_char+0x2a>
 8015aae:	68a8      	ldr	r0, [r5, #8]
 8015ab0:	f007 fddb 	bl	801d66a <memcpy>
 8015ab4:	68ab      	ldr	r3, [r5, #8]
 8015ab6:	6928      	ldr	r0, [r5, #16]
 8015ab8:	4423      	add	r3, r4
 8015aba:	4420      	add	r0, r4
 8015abc:	1b36      	subs	r6, r6, r4
 8015abe:	60ab      	str	r3, [r5, #8]
 8015ac0:	6128      	str	r0, [r5, #16]
 8015ac2:	4631      	mov	r1, r6
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	4628      	mov	r0, r5
 8015ac8:	f7f9 fde6 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015acc:	1bb9      	subs	r1, r7, r6
 8015ace:	4441      	add	r1, r8
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d1ea      	bne.n	8015aae <ucdr_serialize_endian_array_char+0x16>
 8015ad8:	2301      	movs	r3, #1
 8015ada:	7da8      	ldrb	r0, [r5, #22]
 8015adc:	756b      	strb	r3, [r5, #21]
 8015ade:	4058      	eors	r0, r3
 8015ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae4:	463a      	mov	r2, r7
 8015ae6:	68a8      	ldr	r0, [r5, #8]
 8015ae8:	4641      	mov	r1, r8
 8015aea:	f007 fdbe 	bl	801d66a <memcpy>
 8015aee:	68aa      	ldr	r2, [r5, #8]
 8015af0:	692b      	ldr	r3, [r5, #16]
 8015af2:	443a      	add	r2, r7
 8015af4:	443b      	add	r3, r7
 8015af6:	60aa      	str	r2, [r5, #8]
 8015af8:	612b      	str	r3, [r5, #16]
 8015afa:	e7ed      	b.n	8015ad8 <ucdr_serialize_endian_array_char+0x40>

08015afc <ucdr_deserialize_endian_array_char>:
 8015afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b00:	4619      	mov	r1, r3
 8015b02:	461f      	mov	r7, r3
 8015b04:	4605      	mov	r5, r0
 8015b06:	4690      	mov	r8, r2
 8015b08:	f7f9 fd3e 	bl	800f588 <ucdr_check_buffer_available_for>
 8015b0c:	b9e0      	cbnz	r0, 8015b48 <ucdr_deserialize_endian_array_char+0x4c>
 8015b0e:	463e      	mov	r6, r7
 8015b10:	e009      	b.n	8015b26 <ucdr_deserialize_endian_array_char+0x2a>
 8015b12:	68a9      	ldr	r1, [r5, #8]
 8015b14:	f007 fda9 	bl	801d66a <memcpy>
 8015b18:	68ab      	ldr	r3, [r5, #8]
 8015b1a:	6928      	ldr	r0, [r5, #16]
 8015b1c:	4423      	add	r3, r4
 8015b1e:	4420      	add	r0, r4
 8015b20:	1b36      	subs	r6, r6, r4
 8015b22:	60ab      	str	r3, [r5, #8]
 8015b24:	6128      	str	r0, [r5, #16]
 8015b26:	2201      	movs	r2, #1
 8015b28:	4631      	mov	r1, r6
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f7f9 fdb4 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015b30:	4604      	mov	r4, r0
 8015b32:	1bb8      	subs	r0, r7, r6
 8015b34:	4440      	add	r0, r8
 8015b36:	4622      	mov	r2, r4
 8015b38:	2c00      	cmp	r4, #0
 8015b3a:	d1ea      	bne.n	8015b12 <ucdr_deserialize_endian_array_char+0x16>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	7da8      	ldrb	r0, [r5, #22]
 8015b40:	756b      	strb	r3, [r5, #21]
 8015b42:	4058      	eors	r0, r3
 8015b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b48:	463a      	mov	r2, r7
 8015b4a:	68a9      	ldr	r1, [r5, #8]
 8015b4c:	4640      	mov	r0, r8
 8015b4e:	f007 fd8c 	bl	801d66a <memcpy>
 8015b52:	68aa      	ldr	r2, [r5, #8]
 8015b54:	692b      	ldr	r3, [r5, #16]
 8015b56:	443a      	add	r2, r7
 8015b58:	443b      	add	r3, r7
 8015b5a:	60aa      	str	r2, [r5, #8]
 8015b5c:	612b      	str	r3, [r5, #16]
 8015b5e:	e7ed      	b.n	8015b3c <ucdr_deserialize_endian_array_char+0x40>

08015b60 <ucdr_serialize_array_uint8_t>:
 8015b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b64:	4688      	mov	r8, r1
 8015b66:	4611      	mov	r1, r2
 8015b68:	4617      	mov	r7, r2
 8015b6a:	4605      	mov	r5, r0
 8015b6c:	f7f9 fd0c 	bl	800f588 <ucdr_check_buffer_available_for>
 8015b70:	b9e0      	cbnz	r0, 8015bac <ucdr_serialize_array_uint8_t+0x4c>
 8015b72:	463e      	mov	r6, r7
 8015b74:	e009      	b.n	8015b8a <ucdr_serialize_array_uint8_t+0x2a>
 8015b76:	68a8      	ldr	r0, [r5, #8]
 8015b78:	f007 fd77 	bl	801d66a <memcpy>
 8015b7c:	68aa      	ldr	r2, [r5, #8]
 8015b7e:	692b      	ldr	r3, [r5, #16]
 8015b80:	4422      	add	r2, r4
 8015b82:	4423      	add	r3, r4
 8015b84:	1b36      	subs	r6, r6, r4
 8015b86:	60aa      	str	r2, [r5, #8]
 8015b88:	612b      	str	r3, [r5, #16]
 8015b8a:	4631      	mov	r1, r6
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	4628      	mov	r0, r5
 8015b90:	f7f9 fd82 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015b94:	1bb9      	subs	r1, r7, r6
 8015b96:	4441      	add	r1, r8
 8015b98:	4604      	mov	r4, r0
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d1ea      	bne.n	8015b76 <ucdr_serialize_array_uint8_t+0x16>
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	7da8      	ldrb	r0, [r5, #22]
 8015ba4:	756b      	strb	r3, [r5, #21]
 8015ba6:	4058      	eors	r0, r3
 8015ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bac:	463a      	mov	r2, r7
 8015bae:	68a8      	ldr	r0, [r5, #8]
 8015bb0:	4641      	mov	r1, r8
 8015bb2:	f007 fd5a 	bl	801d66a <memcpy>
 8015bb6:	68aa      	ldr	r2, [r5, #8]
 8015bb8:	692b      	ldr	r3, [r5, #16]
 8015bba:	443a      	add	r2, r7
 8015bbc:	443b      	add	r3, r7
 8015bbe:	60aa      	str	r2, [r5, #8]
 8015bc0:	612b      	str	r3, [r5, #16]
 8015bc2:	e7ed      	b.n	8015ba0 <ucdr_serialize_array_uint8_t+0x40>

08015bc4 <ucdr_serialize_endian_array_uint8_t>:
 8015bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc8:	4619      	mov	r1, r3
 8015bca:	461f      	mov	r7, r3
 8015bcc:	4605      	mov	r5, r0
 8015bce:	4690      	mov	r8, r2
 8015bd0:	f7f9 fcda 	bl	800f588 <ucdr_check_buffer_available_for>
 8015bd4:	b9e0      	cbnz	r0, 8015c10 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015bd6:	463e      	mov	r6, r7
 8015bd8:	e009      	b.n	8015bee <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015bda:	68a8      	ldr	r0, [r5, #8]
 8015bdc:	f007 fd45 	bl	801d66a <memcpy>
 8015be0:	68ab      	ldr	r3, [r5, #8]
 8015be2:	6928      	ldr	r0, [r5, #16]
 8015be4:	4423      	add	r3, r4
 8015be6:	4420      	add	r0, r4
 8015be8:	1b36      	subs	r6, r6, r4
 8015bea:	60ab      	str	r3, [r5, #8]
 8015bec:	6128      	str	r0, [r5, #16]
 8015bee:	4631      	mov	r1, r6
 8015bf0:	2201      	movs	r2, #1
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	f7f9 fd50 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015bf8:	1bb9      	subs	r1, r7, r6
 8015bfa:	4441      	add	r1, r8
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	4602      	mov	r2, r0
 8015c00:	2800      	cmp	r0, #0
 8015c02:	d1ea      	bne.n	8015bda <ucdr_serialize_endian_array_uint8_t+0x16>
 8015c04:	2301      	movs	r3, #1
 8015c06:	7da8      	ldrb	r0, [r5, #22]
 8015c08:	756b      	strb	r3, [r5, #21]
 8015c0a:	4058      	eors	r0, r3
 8015c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c10:	463a      	mov	r2, r7
 8015c12:	68a8      	ldr	r0, [r5, #8]
 8015c14:	4641      	mov	r1, r8
 8015c16:	f007 fd28 	bl	801d66a <memcpy>
 8015c1a:	68aa      	ldr	r2, [r5, #8]
 8015c1c:	692b      	ldr	r3, [r5, #16]
 8015c1e:	443a      	add	r2, r7
 8015c20:	443b      	add	r3, r7
 8015c22:	60aa      	str	r2, [r5, #8]
 8015c24:	612b      	str	r3, [r5, #16]
 8015c26:	e7ed      	b.n	8015c04 <ucdr_serialize_endian_array_uint8_t+0x40>

08015c28 <ucdr_deserialize_array_uint8_t>:
 8015c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2c:	4688      	mov	r8, r1
 8015c2e:	4611      	mov	r1, r2
 8015c30:	4617      	mov	r7, r2
 8015c32:	4605      	mov	r5, r0
 8015c34:	f7f9 fca8 	bl	800f588 <ucdr_check_buffer_available_for>
 8015c38:	b9e0      	cbnz	r0, 8015c74 <ucdr_deserialize_array_uint8_t+0x4c>
 8015c3a:	463e      	mov	r6, r7
 8015c3c:	e009      	b.n	8015c52 <ucdr_deserialize_array_uint8_t+0x2a>
 8015c3e:	68a9      	ldr	r1, [r5, #8]
 8015c40:	f007 fd13 	bl	801d66a <memcpy>
 8015c44:	68aa      	ldr	r2, [r5, #8]
 8015c46:	692b      	ldr	r3, [r5, #16]
 8015c48:	4422      	add	r2, r4
 8015c4a:	4423      	add	r3, r4
 8015c4c:	1b36      	subs	r6, r6, r4
 8015c4e:	60aa      	str	r2, [r5, #8]
 8015c50:	612b      	str	r3, [r5, #16]
 8015c52:	2201      	movs	r2, #1
 8015c54:	4631      	mov	r1, r6
 8015c56:	4628      	mov	r0, r5
 8015c58:	f7f9 fd1e 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	1bb8      	subs	r0, r7, r6
 8015c60:	4440      	add	r0, r8
 8015c62:	4622      	mov	r2, r4
 8015c64:	2c00      	cmp	r4, #0
 8015c66:	d1ea      	bne.n	8015c3e <ucdr_deserialize_array_uint8_t+0x16>
 8015c68:	2301      	movs	r3, #1
 8015c6a:	7da8      	ldrb	r0, [r5, #22]
 8015c6c:	756b      	strb	r3, [r5, #21]
 8015c6e:	4058      	eors	r0, r3
 8015c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c74:	463a      	mov	r2, r7
 8015c76:	68a9      	ldr	r1, [r5, #8]
 8015c78:	4640      	mov	r0, r8
 8015c7a:	f007 fcf6 	bl	801d66a <memcpy>
 8015c7e:	68aa      	ldr	r2, [r5, #8]
 8015c80:	692b      	ldr	r3, [r5, #16]
 8015c82:	443a      	add	r2, r7
 8015c84:	443b      	add	r3, r7
 8015c86:	60aa      	str	r2, [r5, #8]
 8015c88:	612b      	str	r3, [r5, #16]
 8015c8a:	e7ed      	b.n	8015c68 <ucdr_deserialize_array_uint8_t+0x40>

08015c8c <ucdr_deserialize_endian_array_uint8_t>:
 8015c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c90:	4619      	mov	r1, r3
 8015c92:	461f      	mov	r7, r3
 8015c94:	4605      	mov	r5, r0
 8015c96:	4690      	mov	r8, r2
 8015c98:	f7f9 fc76 	bl	800f588 <ucdr_check_buffer_available_for>
 8015c9c:	b9e0      	cbnz	r0, 8015cd8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015c9e:	463e      	mov	r6, r7
 8015ca0:	e009      	b.n	8015cb6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015ca2:	68a9      	ldr	r1, [r5, #8]
 8015ca4:	f007 fce1 	bl	801d66a <memcpy>
 8015ca8:	68ab      	ldr	r3, [r5, #8]
 8015caa:	6928      	ldr	r0, [r5, #16]
 8015cac:	4423      	add	r3, r4
 8015cae:	4420      	add	r0, r4
 8015cb0:	1b36      	subs	r6, r6, r4
 8015cb2:	60ab      	str	r3, [r5, #8]
 8015cb4:	6128      	str	r0, [r5, #16]
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	4631      	mov	r1, r6
 8015cba:	4628      	mov	r0, r5
 8015cbc:	f7f9 fcec 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	1bb8      	subs	r0, r7, r6
 8015cc4:	4440      	add	r0, r8
 8015cc6:	4622      	mov	r2, r4
 8015cc8:	2c00      	cmp	r4, #0
 8015cca:	d1ea      	bne.n	8015ca2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015ccc:	2301      	movs	r3, #1
 8015cce:	7da8      	ldrb	r0, [r5, #22]
 8015cd0:	756b      	strb	r3, [r5, #21]
 8015cd2:	4058      	eors	r0, r3
 8015cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd8:	463a      	mov	r2, r7
 8015cda:	68a9      	ldr	r1, [r5, #8]
 8015cdc:	4640      	mov	r0, r8
 8015cde:	f007 fcc4 	bl	801d66a <memcpy>
 8015ce2:	68aa      	ldr	r2, [r5, #8]
 8015ce4:	692b      	ldr	r3, [r5, #16]
 8015ce6:	443a      	add	r2, r7
 8015ce8:	443b      	add	r3, r7
 8015cea:	60aa      	str	r2, [r5, #8]
 8015cec:	612b      	str	r3, [r5, #16]
 8015cee:	e7ed      	b.n	8015ccc <ucdr_deserialize_endian_array_uint8_t+0x40>

08015cf0 <ucdr_serialize_array_double>:
 8015cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf4:	460e      	mov	r6, r1
 8015cf6:	2108      	movs	r1, #8
 8015cf8:	4604      	mov	r4, r0
 8015cfa:	4617      	mov	r7, r2
 8015cfc:	f7f9 fca4 	bl	800f648 <ucdr_buffer_alignment>
 8015d00:	4601      	mov	r1, r0
 8015d02:	4620      	mov	r0, r4
 8015d04:	7d65      	ldrb	r5, [r4, #21]
 8015d06:	f7f9 fce3 	bl	800f6d0 <ucdr_advance_buffer>
 8015d0a:	7d21      	ldrb	r1, [r4, #20]
 8015d0c:	7565      	strb	r5, [r4, #21]
 8015d0e:	2901      	cmp	r1, #1
 8015d10:	d010      	beq.n	8015d34 <ucdr_serialize_array_double+0x44>
 8015d12:	b157      	cbz	r7, 8015d2a <ucdr_serialize_array_double+0x3a>
 8015d14:	2500      	movs	r5, #0
 8015d16:	e000      	b.n	8015d1a <ucdr_serialize_array_double+0x2a>
 8015d18:	7d21      	ldrb	r1, [r4, #20]
 8015d1a:	ecb6 0b02 	vldmia	r6!, {d0}
 8015d1e:	4620      	mov	r0, r4
 8015d20:	3501      	adds	r5, #1
 8015d22:	f7f9 f9cb 	bl	800f0bc <ucdr_serialize_endian_double>
 8015d26:	42af      	cmp	r7, r5
 8015d28:	d1f6      	bne.n	8015d18 <ucdr_serialize_array_double+0x28>
 8015d2a:	7da0      	ldrb	r0, [r4, #22]
 8015d2c:	f080 0001 	eor.w	r0, r0, #1
 8015d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d34:	00ff      	lsls	r7, r7, #3
 8015d36:	4639      	mov	r1, r7
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7f9 fc25 	bl	800f588 <ucdr_check_buffer_available_for>
 8015d3e:	b9f8      	cbnz	r0, 8015d80 <ucdr_serialize_array_double+0x90>
 8015d40:	46b8      	mov	r8, r7
 8015d42:	e00a      	b.n	8015d5a <ucdr_serialize_array_double+0x6a>
 8015d44:	68a0      	ldr	r0, [r4, #8]
 8015d46:	f007 fc90 	bl	801d66a <memcpy>
 8015d4a:	68a2      	ldr	r2, [r4, #8]
 8015d4c:	6923      	ldr	r3, [r4, #16]
 8015d4e:	442a      	add	r2, r5
 8015d50:	442b      	add	r3, r5
 8015d52:	eba8 0805 	sub.w	r8, r8, r5
 8015d56:	60a2      	str	r2, [r4, #8]
 8015d58:	6123      	str	r3, [r4, #16]
 8015d5a:	4641      	mov	r1, r8
 8015d5c:	2208      	movs	r2, #8
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f7f9 fc9a 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015d64:	eba7 0108 	sub.w	r1, r7, r8
 8015d68:	4431      	add	r1, r6
 8015d6a:	4605      	mov	r5, r0
 8015d6c:	4602      	mov	r2, r0
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	d1e8      	bne.n	8015d44 <ucdr_serialize_array_double+0x54>
 8015d72:	7da0      	ldrb	r0, [r4, #22]
 8015d74:	2308      	movs	r3, #8
 8015d76:	7563      	strb	r3, [r4, #21]
 8015d78:	f080 0001 	eor.w	r0, r0, #1
 8015d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d80:	463a      	mov	r2, r7
 8015d82:	68a0      	ldr	r0, [r4, #8]
 8015d84:	4631      	mov	r1, r6
 8015d86:	f007 fc70 	bl	801d66a <memcpy>
 8015d8a:	68a2      	ldr	r2, [r4, #8]
 8015d8c:	6923      	ldr	r3, [r4, #16]
 8015d8e:	443a      	add	r2, r7
 8015d90:	441f      	add	r7, r3
 8015d92:	60a2      	str	r2, [r4, #8]
 8015d94:	6127      	str	r7, [r4, #16]
 8015d96:	e7ec      	b.n	8015d72 <ucdr_serialize_array_double+0x82>

08015d98 <ucdr_deserialize_array_double>:
 8015d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d9c:	460e      	mov	r6, r1
 8015d9e:	2108      	movs	r1, #8
 8015da0:	4604      	mov	r4, r0
 8015da2:	4617      	mov	r7, r2
 8015da4:	f7f9 fc50 	bl	800f648 <ucdr_buffer_alignment>
 8015da8:	4601      	mov	r1, r0
 8015daa:	4620      	mov	r0, r4
 8015dac:	7d65      	ldrb	r5, [r4, #21]
 8015dae:	f7f9 fc8f 	bl	800f6d0 <ucdr_advance_buffer>
 8015db2:	7d21      	ldrb	r1, [r4, #20]
 8015db4:	7565      	strb	r5, [r4, #21]
 8015db6:	2901      	cmp	r1, #1
 8015db8:	d011      	beq.n	8015dde <ucdr_deserialize_array_double+0x46>
 8015dba:	b15f      	cbz	r7, 8015dd4 <ucdr_deserialize_array_double+0x3c>
 8015dbc:	2500      	movs	r5, #0
 8015dbe:	e000      	b.n	8015dc2 <ucdr_deserialize_array_double+0x2a>
 8015dc0:	7d21      	ldrb	r1, [r4, #20]
 8015dc2:	4632      	mov	r2, r6
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	3501      	adds	r5, #1
 8015dc8:	f7f9 fb10 	bl	800f3ec <ucdr_deserialize_endian_double>
 8015dcc:	42af      	cmp	r7, r5
 8015dce:	f106 0608 	add.w	r6, r6, #8
 8015dd2:	d1f5      	bne.n	8015dc0 <ucdr_deserialize_array_double+0x28>
 8015dd4:	7da0      	ldrb	r0, [r4, #22]
 8015dd6:	f080 0001 	eor.w	r0, r0, #1
 8015dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dde:	00ff      	lsls	r7, r7, #3
 8015de0:	4639      	mov	r1, r7
 8015de2:	4620      	mov	r0, r4
 8015de4:	f7f9 fbd0 	bl	800f588 <ucdr_check_buffer_available_for>
 8015de8:	b9f8      	cbnz	r0, 8015e2a <ucdr_deserialize_array_double+0x92>
 8015dea:	46b8      	mov	r8, r7
 8015dec:	e00a      	b.n	8015e04 <ucdr_deserialize_array_double+0x6c>
 8015dee:	68a1      	ldr	r1, [r4, #8]
 8015df0:	f007 fc3b 	bl	801d66a <memcpy>
 8015df4:	68a2      	ldr	r2, [r4, #8]
 8015df6:	6923      	ldr	r3, [r4, #16]
 8015df8:	442a      	add	r2, r5
 8015dfa:	442b      	add	r3, r5
 8015dfc:	eba8 0805 	sub.w	r8, r8, r5
 8015e00:	60a2      	str	r2, [r4, #8]
 8015e02:	6123      	str	r3, [r4, #16]
 8015e04:	2208      	movs	r2, #8
 8015e06:	4641      	mov	r1, r8
 8015e08:	4620      	mov	r0, r4
 8015e0a:	f7f9 fc45 	bl	800f698 <ucdr_check_final_buffer_behavior_array>
 8015e0e:	4605      	mov	r5, r0
 8015e10:	eba7 0008 	sub.w	r0, r7, r8
 8015e14:	4430      	add	r0, r6
 8015e16:	462a      	mov	r2, r5
 8015e18:	2d00      	cmp	r5, #0
 8015e1a:	d1e8      	bne.n	8015dee <ucdr_deserialize_array_double+0x56>
 8015e1c:	7da0      	ldrb	r0, [r4, #22]
 8015e1e:	2308      	movs	r3, #8
 8015e20:	7563      	strb	r3, [r4, #21]
 8015e22:	f080 0001 	eor.w	r0, r0, #1
 8015e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e2a:	463a      	mov	r2, r7
 8015e2c:	68a1      	ldr	r1, [r4, #8]
 8015e2e:	4630      	mov	r0, r6
 8015e30:	f007 fc1b 	bl	801d66a <memcpy>
 8015e34:	68a2      	ldr	r2, [r4, #8]
 8015e36:	6923      	ldr	r3, [r4, #16]
 8015e38:	443a      	add	r2, r7
 8015e3a:	441f      	add	r7, r3
 8015e3c:	60a2      	str	r2, [r4, #8]
 8015e3e:	6127      	str	r7, [r4, #16]
 8015e40:	e7ec      	b.n	8015e1c <ucdr_deserialize_array_double+0x84>
 8015e42:	bf00      	nop

08015e44 <ucdr_serialize_sequence_char>:
 8015e44:	b570      	push	{r4, r5, r6, lr}
 8015e46:	4615      	mov	r5, r2
 8015e48:	460e      	mov	r6, r1
 8015e4a:	7d01      	ldrb	r1, [r0, #20]
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	f7f8 fbbb 	bl	800e5c8 <ucdr_serialize_endian_uint32_t>
 8015e52:	b90d      	cbnz	r5, 8015e58 <ucdr_serialize_sequence_char+0x14>
 8015e54:	2001      	movs	r0, #1
 8015e56:	bd70      	pop	{r4, r5, r6, pc}
 8015e58:	7d21      	ldrb	r1, [r4, #20]
 8015e5a:	462b      	mov	r3, r5
 8015e5c:	4632      	mov	r2, r6
 8015e5e:	4620      	mov	r0, r4
 8015e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e64:	f7ff be18 	b.w	8015a98 <ucdr_serialize_endian_array_char>

08015e68 <ucdr_deserialize_sequence_char>:
 8015e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e6c:	461d      	mov	r5, r3
 8015e6e:	4616      	mov	r6, r2
 8015e70:	460f      	mov	r7, r1
 8015e72:	461a      	mov	r2, r3
 8015e74:	7d01      	ldrb	r1, [r0, #20]
 8015e76:	4604      	mov	r4, r0
 8015e78:	f7f8 fcce 	bl	800e818 <ucdr_deserialize_endian_uint32_t>
 8015e7c:	682b      	ldr	r3, [r5, #0]
 8015e7e:	429e      	cmp	r6, r3
 8015e80:	bf3c      	itt	cc
 8015e82:	2201      	movcc	r2, #1
 8015e84:	75a2      	strbcc	r2, [r4, #22]
 8015e86:	b913      	cbnz	r3, 8015e8e <ucdr_deserialize_sequence_char+0x26>
 8015e88:	2001      	movs	r0, #1
 8015e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e8e:	7d21      	ldrb	r1, [r4, #20]
 8015e90:	463a      	mov	r2, r7
 8015e92:	4620      	mov	r0, r4
 8015e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e98:	f7ff be30 	b.w	8015afc <ucdr_deserialize_endian_array_char>

08015e9c <ucdr_serialize_sequence_uint8_t>:
 8015e9c:	b570      	push	{r4, r5, r6, lr}
 8015e9e:	4615      	mov	r5, r2
 8015ea0:	460e      	mov	r6, r1
 8015ea2:	7d01      	ldrb	r1, [r0, #20]
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	f7f8 fb8f 	bl	800e5c8 <ucdr_serialize_endian_uint32_t>
 8015eaa:	b90d      	cbnz	r5, 8015eb0 <ucdr_serialize_sequence_uint8_t+0x14>
 8015eac:	2001      	movs	r0, #1
 8015eae:	bd70      	pop	{r4, r5, r6, pc}
 8015eb0:	7d21      	ldrb	r1, [r4, #20]
 8015eb2:	462b      	mov	r3, r5
 8015eb4:	4632      	mov	r2, r6
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ebc:	f7ff be82 	b.w	8015bc4 <ucdr_serialize_endian_array_uint8_t>

08015ec0 <ucdr_deserialize_sequence_uint8_t>:
 8015ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ec4:	461d      	mov	r5, r3
 8015ec6:	4616      	mov	r6, r2
 8015ec8:	460f      	mov	r7, r1
 8015eca:	461a      	mov	r2, r3
 8015ecc:	7d01      	ldrb	r1, [r0, #20]
 8015ece:	4604      	mov	r4, r0
 8015ed0:	f7f8 fca2 	bl	800e818 <ucdr_deserialize_endian_uint32_t>
 8015ed4:	682b      	ldr	r3, [r5, #0]
 8015ed6:	429e      	cmp	r6, r3
 8015ed8:	bf3c      	itt	cc
 8015eda:	2201      	movcc	r2, #1
 8015edc:	75a2      	strbcc	r2, [r4, #22]
 8015ede:	b913      	cbnz	r3, 8015ee6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8015ee0:	2001      	movs	r0, #1
 8015ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ee6:	7d21      	ldrb	r1, [r4, #20]
 8015ee8:	463a      	mov	r2, r7
 8015eea:	4620      	mov	r0, r4
 8015eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef0:	f7ff becc 	b.w	8015c8c <ucdr_deserialize_endian_array_uint8_t>

08015ef4 <uxr_buffer_delete_entity>:
 8015ef4:	b510      	push	{r4, lr}
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	b08e      	sub	sp, #56	@ 0x38
 8015efa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015efe:	2303      	movs	r3, #3
 8015f00:	9300      	str	r3, [sp, #0]
 8015f02:	2204      	movs	r2, #4
 8015f04:	ab06      	add	r3, sp, #24
 8015f06:	4604      	mov	r4, r0
 8015f08:	9103      	str	r1, [sp, #12]
 8015f0a:	f001 fbab 	bl	8017664 <uxr_prepare_stream_to_write_submessage>
 8015f0e:	b918      	cbnz	r0, 8015f18 <uxr_buffer_delete_entity+0x24>
 8015f10:	4604      	mov	r4, r0
 8015f12:	4620      	mov	r0, r4
 8015f14:	b00e      	add	sp, #56	@ 0x38
 8015f16:	bd10      	pop	{r4, pc}
 8015f18:	9902      	ldr	r1, [sp, #8]
 8015f1a:	aa05      	add	r2, sp, #20
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f001 fcd7 	bl	80178d0 <uxr_init_base_object_request>
 8015f22:	a905      	add	r1, sp, #20
 8015f24:	4604      	mov	r4, r0
 8015f26:	a806      	add	r0, sp, #24
 8015f28:	f003 fbba 	bl	80196a0 <uxr_serialize_DELETE_Payload>
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	b00e      	add	sp, #56	@ 0x38
 8015f30:	bd10      	pop	{r4, pc}
 8015f32:	bf00      	nop

08015f34 <uxr_common_create_entity>:
 8015f34:	b510      	push	{r4, lr}
 8015f36:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015f3a:	b08c      	sub	sp, #48	@ 0x30
 8015f3c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015f40:	f1bc 0f01 	cmp.w	ip, #1
 8015f44:	bf0c      	ite	eq
 8015f46:	f003 0201 	andeq.w	r2, r3, #1
 8015f4a:	2200      	movne	r2, #0
 8015f4c:	330e      	adds	r3, #14
 8015f4e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8015f52:	9101      	str	r1, [sp, #4]
 8015f54:	441a      	add	r2, r3
 8015f56:	2301      	movs	r3, #1
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	9903      	ldr	r1, [sp, #12]
 8015f5c:	ab04      	add	r3, sp, #16
 8015f5e:	b292      	uxth	r2, r2
 8015f60:	4604      	mov	r4, r0
 8015f62:	f001 fb7f 	bl	8017664 <uxr_prepare_stream_to_write_submessage>
 8015f66:	b918      	cbnz	r0, 8015f70 <uxr_common_create_entity+0x3c>
 8015f68:	4604      	mov	r4, r0
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	b00c      	add	sp, #48	@ 0x30
 8015f6e:	bd10      	pop	{r4, pc}
 8015f70:	9902      	ldr	r1, [sp, #8]
 8015f72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015f74:	4620      	mov	r0, r4
 8015f76:	f001 fcab 	bl	80178d0 <uxr_init_base_object_request>
 8015f7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	a804      	add	r0, sp, #16
 8015f80:	f003 faea 	bl	8019558 <uxr_serialize_CREATE_Payload>
 8015f84:	4620      	mov	r0, r4
 8015f86:	b00c      	add	sp, #48	@ 0x30
 8015f88:	bd10      	pop	{r4, pc}
 8015f8a:	bf00      	nop

08015f8c <uxr_buffer_create_participant_bin>:
 8015f8c:	b570      	push	{r4, r5, r6, lr}
 8015f8e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8015f92:	ac11      	add	r4, sp, #68	@ 0x44
 8015f94:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8015f98:	2303      	movs	r3, #3
 8015f9a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015f9e:	7223      	strb	r3, [r4, #8]
 8015fa0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8015fa2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	2100      	movs	r1, #0
 8015faa:	4605      	mov	r5, r0
 8015fac:	7122      	strb	r2, [r4, #4]
 8015fae:	f88d 1014 	strb.w	r1, [sp, #20]
 8015fb2:	b1cb      	cbz	r3, 8015fe8 <uxr_buffer_create_participant_bin+0x5c>
 8015fb4:	f88d 201c 	strb.w	r2, [sp, #28]
 8015fb8:	9308      	str	r3, [sp, #32]
 8015fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015fbe:	a915      	add	r1, sp, #84	@ 0x54
 8015fc0:	a809      	add	r0, sp, #36	@ 0x24
 8015fc2:	f7f9 fb35 	bl	800f630 <ucdr_init_buffer>
 8015fc6:	a905      	add	r1, sp, #20
 8015fc8:	a809      	add	r0, sp, #36	@ 0x24
 8015fca:	f002 fea7 	bl	8018d1c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8015fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fd0:	9600      	str	r6, [sp, #0]
 8015fd2:	9401      	str	r4, [sp, #4]
 8015fd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015fd8:	60e3      	str	r3, [r4, #12]
 8015fda:	4628      	mov	r0, r5
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	f7ff ffa9 	bl	8015f34 <uxr_common_create_entity>
 8015fe2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8015fe6:	bd70      	pop	{r4, r5, r6, pc}
 8015fe8:	f88d 301c 	strb.w	r3, [sp, #28]
 8015fec:	e7e5      	b.n	8015fba <uxr_buffer_create_participant_bin+0x2e>
 8015fee:	bf00      	nop

08015ff0 <uxr_buffer_create_topic_bin>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8015ff6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015ffa:	9105      	str	r1, [sp, #20]
 8015ffc:	4605      	mov	r5, r0
 8015ffe:	a997      	add	r1, sp, #604	@ 0x25c
 8016000:	4618      	mov	r0, r3
 8016002:	2302      	movs	r3, #2
 8016004:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8016008:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801600c:	f000 fa58 	bl	80164c0 <uxr_object_id_to_raw>
 8016010:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8016012:	9306      	str	r3, [sp, #24]
 8016014:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8016016:	930a      	str	r3, [sp, #40]	@ 0x28
 8016018:	2303      	movs	r3, #3
 801601a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801601e:	2301      	movs	r3, #1
 8016020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016024:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016028:	a917      	add	r1, sp, #92	@ 0x5c
 801602a:	2300      	movs	r3, #0
 801602c:	a80b      	add	r0, sp, #44	@ 0x2c
 801602e:	f88d 301c 	strb.w	r3, [sp, #28]
 8016032:	f7f9 fafd 	bl	800f630 <ucdr_init_buffer>
 8016036:	a906      	add	r1, sp, #24
 8016038:	a80b      	add	r0, sp, #44	@ 0x2c
 801603a:	f002 fe91 	bl	8018d60 <uxr_serialize_OBJK_Topic_Binary>
 801603e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016040:	9316      	str	r3, [sp, #88]	@ 0x58
 8016042:	ac13      	add	r4, sp, #76	@ 0x4c
 8016044:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016048:	9600      	str	r6, [sp, #0]
 801604a:	9401      	str	r4, [sp, #4]
 801604c:	b29b      	uxth	r3, r3
 801604e:	4628      	mov	r0, r5
 8016050:	f7ff ff70 	bl	8015f34 <uxr_common_create_entity>
 8016054:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016058:	bd70      	pop	{r4, r5, r6, pc}
 801605a:	bf00      	nop

0801605c <uxr_buffer_create_publisher_bin>:
 801605c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801605e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8016062:	4605      	mov	r5, r0
 8016064:	9105      	str	r1, [sp, #20]
 8016066:	4618      	mov	r0, r3
 8016068:	2603      	movs	r6, #3
 801606a:	a992      	add	r1, sp, #584	@ 0x248
 801606c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016070:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016074:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016078:	f000 fa22 	bl	80164c0 <uxr_object_id_to_raw>
 801607c:	2300      	movs	r3, #0
 801607e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016082:	a912      	add	r1, sp, #72	@ 0x48
 8016084:	a806      	add	r0, sp, #24
 8016086:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801608a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801608e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8016092:	f7f9 facd 	bl	800f630 <ucdr_init_buffer>
 8016096:	a993      	add	r1, sp, #588	@ 0x24c
 8016098:	a806      	add	r0, sp, #24
 801609a:	f002 ff15 	bl	8018ec8 <uxr_serialize_OBJK_Publisher_Binary>
 801609e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80160a2:	ac0e      	add	r4, sp, #56	@ 0x38
 80160a4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80160a8:	9700      	str	r7, [sp, #0]
 80160aa:	9401      	str	r4, [sp, #4]
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	4628      	mov	r0, r5
 80160b0:	f7ff ff40 	bl	8015f34 <uxr_common_create_entity>
 80160b4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80160b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ba:	bf00      	nop

080160bc <uxr_buffer_create_subscriber_bin>:
 80160bc:	b570      	push	{r4, r5, r6, lr}
 80160be:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80160c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80160c6:	9105      	str	r1, [sp, #20]
 80160c8:	4605      	mov	r5, r0
 80160ca:	a992      	add	r1, sp, #584	@ 0x248
 80160cc:	4618      	mov	r0, r3
 80160ce:	2304      	movs	r3, #4
 80160d0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80160d4:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80160d8:	f000 f9f2 	bl	80164c0 <uxr_object_id_to_raw>
 80160dc:	2300      	movs	r3, #0
 80160de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80160e2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80160e6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80160ea:	a912      	add	r1, sp, #72	@ 0x48
 80160ec:	2303      	movs	r3, #3
 80160ee:	a806      	add	r0, sp, #24
 80160f0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80160f4:	f7f9 fa9c 	bl	800f630 <ucdr_init_buffer>
 80160f8:	a993      	add	r1, sp, #588	@ 0x24c
 80160fa:	a806      	add	r0, sp, #24
 80160fc:	f002 ff94 	bl	8019028 <uxr_serialize_OBJK_Subscriber_Binary>
 8016100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016102:	9311      	str	r3, [sp, #68]	@ 0x44
 8016104:	ac0e      	add	r4, sp, #56	@ 0x38
 8016106:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801610a:	9600      	str	r6, [sp, #0]
 801610c:	9401      	str	r4, [sp, #4]
 801610e:	b29b      	uxth	r3, r3
 8016110:	4628      	mov	r0, r5
 8016112:	f7ff ff0f 	bl	8015f34 <uxr_common_create_entity>
 8016116:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801611a:	bd70      	pop	{r4, r5, r6, pc}

0801611c <uxr_buffer_create_datawriter_bin>:
 801611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016120:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8016124:	ac1d      	add	r4, sp, #116	@ 0x74
 8016126:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801612a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801612e:	9105      	str	r1, [sp, #20]
 8016130:	4606      	mov	r6, r0
 8016132:	a9a1      	add	r1, sp, #644	@ 0x284
 8016134:	4618      	mov	r0, r3
 8016136:	2305      	movs	r3, #5
 8016138:	7123      	strb	r3, [r4, #4]
 801613a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801613e:	2703      	movs	r7, #3
 8016140:	f000 f9be 	bl	80164c0 <uxr_object_id_to_raw>
 8016144:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8016146:	7227      	strb	r7, [r4, #8]
 8016148:	a90e      	add	r1, sp, #56	@ 0x38
 801614a:	f000 f9b9 	bl	80164c0 <uxr_object_id_to_raw>
 801614e:	2300      	movs	r3, #0
 8016150:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8016154:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8016158:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801615c:	3d00      	subs	r5, #0
 801615e:	bf18      	it	ne
 8016160:	2501      	movne	r5, #1
 8016162:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8016166:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801616a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801616e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016172:	2301      	movs	r3, #1
 8016174:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8016178:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801617c:	bb8a      	cbnz	r2, 80161e2 <uxr_buffer_create_datawriter_bin+0xc6>
 801617e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016182:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8016186:	f04f 0c13 	mov.w	ip, #19
 801618a:	250b      	movs	r5, #11
 801618c:	2221      	movs	r2, #33	@ 0x21
 801618e:	2111      	movs	r1, #17
 8016190:	2009      	movs	r0, #9
 8016192:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8016196:	b923      	cbnz	r3, 80161a2 <uxr_buffer_create_datawriter_bin+0x86>
 8016198:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801619c:	4672      	mov	r2, lr
 801619e:	4661      	mov	r1, ip
 80161a0:	4628      	mov	r0, r5
 80161a2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80161a6:	2b01      	cmp	r3, #1
 80161a8:	d025      	beq.n	80161f6 <uxr_buffer_create_datawriter_bin+0xda>
 80161aa:	2b03      	cmp	r3, #3
 80161ac:	d029      	beq.n	8016202 <uxr_buffer_create_datawriter_bin+0xe6>
 80161ae:	b32b      	cbz	r3, 80161fc <uxr_buffer_create_datawriter_bin+0xe0>
 80161b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80161b4:	a921      	add	r1, sp, #132	@ 0x84
 80161b6:	a806      	add	r0, sp, #24
 80161b8:	f7f9 fa3a 	bl	800f630 <ucdr_init_buffer>
 80161bc:	a90e      	add	r1, sp, #56	@ 0x38
 80161be:	a806      	add	r0, sp, #24
 80161c0:	f002 ffe4 	bl	801918c <uxr_serialize_OBJK_DataWriter_Binary>
 80161c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161c6:	f8cd 8000 	str.w	r8, [sp]
 80161ca:	9401      	str	r4, [sp, #4]
 80161cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80161d0:	60e3      	str	r3, [r4, #12]
 80161d2:	4630      	mov	r0, r6
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	f7ff fead 	bl	8015f34 <uxr_common_create_entity>
 80161da:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80161de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80161e6:	f04f 0c12 	mov.w	ip, #18
 80161ea:	250a      	movs	r5, #10
 80161ec:	2220      	movs	r2, #32
 80161ee:	2110      	movs	r1, #16
 80161f0:	2008      	movs	r0, #8
 80161f2:	2702      	movs	r7, #2
 80161f4:	e7cd      	b.n	8016192 <uxr_buffer_create_datawriter_bin+0x76>
 80161f6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80161fa:	e7d9      	b.n	80161b0 <uxr_buffer_create_datawriter_bin+0x94>
 80161fc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8016200:	e7d6      	b.n	80161b0 <uxr_buffer_create_datawriter_bin+0x94>
 8016202:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8016206:	e7d3      	b.n	80161b0 <uxr_buffer_create_datawriter_bin+0x94>

08016208 <uxr_buffer_create_datareader_bin>:
 8016208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801620c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8016210:	ac1f      	add	r4, sp, #124	@ 0x7c
 8016212:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016216:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801621a:	9105      	str	r1, [sp, #20]
 801621c:	4606      	mov	r6, r0
 801621e:	a9a3      	add	r1, sp, #652	@ 0x28c
 8016220:	4618      	mov	r0, r3
 8016222:	2306      	movs	r3, #6
 8016224:	7123      	strb	r3, [r4, #4]
 8016226:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801622a:	2703      	movs	r7, #3
 801622c:	f000 f948 	bl	80164c0 <uxr_object_id_to_raw>
 8016230:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8016232:	7227      	strb	r7, [r4, #8]
 8016234:	a90e      	add	r1, sp, #56	@ 0x38
 8016236:	f000 f943 	bl	80164c0 <uxr_object_id_to_raw>
 801623a:	2300      	movs	r3, #0
 801623c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8016240:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8016244:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8016248:	3d00      	subs	r5, #0
 801624a:	bf18      	it	ne
 801624c:	2501      	movne	r5, #1
 801624e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8016252:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8016256:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801625a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801625e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016262:	2301      	movs	r3, #1
 8016264:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8016268:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801626c:	bb8a      	cbnz	r2, 80162d2 <uxr_buffer_create_datareader_bin+0xca>
 801626e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016272:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8016276:	f04f 0c13 	mov.w	ip, #19
 801627a:	250b      	movs	r5, #11
 801627c:	2221      	movs	r2, #33	@ 0x21
 801627e:	2111      	movs	r1, #17
 8016280:	2009      	movs	r0, #9
 8016282:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8016286:	b923      	cbnz	r3, 8016292 <uxr_buffer_create_datareader_bin+0x8a>
 8016288:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801628c:	4672      	mov	r2, lr
 801628e:	4661      	mov	r1, ip
 8016290:	4628      	mov	r0, r5
 8016292:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8016296:	2b01      	cmp	r3, #1
 8016298:	d025      	beq.n	80162e6 <uxr_buffer_create_datareader_bin+0xde>
 801629a:	2b03      	cmp	r3, #3
 801629c:	d029      	beq.n	80162f2 <uxr_buffer_create_datareader_bin+0xea>
 801629e:	b32b      	cbz	r3, 80162ec <uxr_buffer_create_datareader_bin+0xe4>
 80162a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80162a4:	a923      	add	r1, sp, #140	@ 0x8c
 80162a6:	a806      	add	r0, sp, #24
 80162a8:	f7f9 f9c2 	bl	800f630 <ucdr_init_buffer>
 80162ac:	a90e      	add	r1, sp, #56	@ 0x38
 80162ae:	a806      	add	r0, sp, #24
 80162b0:	f002 ff30 	bl	8019114 <uxr_serialize_OBJK_DataReader_Binary>
 80162b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80162b6:	f8cd 8000 	str.w	r8, [sp]
 80162ba:	9401      	str	r4, [sp, #4]
 80162bc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80162c0:	60e3      	str	r3, [r4, #12]
 80162c2:	4630      	mov	r0, r6
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	f7ff fe35 	bl	8015f34 <uxr_common_create_entity>
 80162ca:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80162ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80162d6:	f04f 0c12 	mov.w	ip, #18
 80162da:	250a      	movs	r5, #10
 80162dc:	2220      	movs	r2, #32
 80162de:	2110      	movs	r1, #16
 80162e0:	2008      	movs	r0, #8
 80162e2:	2702      	movs	r7, #2
 80162e4:	e7cd      	b.n	8016282 <uxr_buffer_create_datareader_bin+0x7a>
 80162e6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80162ea:	e7d9      	b.n	80162a0 <uxr_buffer_create_datareader_bin+0x98>
 80162ec:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80162f0:	e7d6      	b.n	80162a0 <uxr_buffer_create_datareader_bin+0x98>
 80162f2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80162f6:	e7d3      	b.n	80162a0 <uxr_buffer_create_datareader_bin+0x98>

080162f8 <get_custom_error>:
 80162f8:	4b01      	ldr	r3, [pc, #4]	@ (8016300 <get_custom_error+0x8>)
 80162fa:	7818      	ldrb	r0, [r3, #0]
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop
 8016300:	2001813c 	.word	0x2001813c

08016304 <recv_custom_msg>:
 8016304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016308:	4693      	mov	fp, r2
 801630a:	b089      	sub	sp, #36	@ 0x24
 801630c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8016310:	9305      	str	r3, [sp, #20]
 8016312:	468a      	mov	sl, r1
 8016314:	2100      	movs	r1, #0
 8016316:	4604      	mov	r4, r0
 8016318:	f88d 101e 	strb.w	r1, [sp, #30]
 801631c:	b322      	cbz	r2, 8016368 <recv_custom_msg+0x64>
 801631e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8016322:	f10d 081f 	add.w	r8, sp, #31
 8016326:	af05      	add	r7, sp, #20
 8016328:	f10d 061e 	add.w	r6, sp, #30
 801632c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8016330:	e002      	b.n	8016338 <recv_custom_msg+0x34>
 8016332:	9b05      	ldr	r3, [sp, #20]
 8016334:	2b00      	cmp	r3, #0
 8016336:	dd0f      	ble.n	8016358 <recv_custom_msg+0x54>
 8016338:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801633c:	4623      	mov	r3, r4
 801633e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016342:	e9cd 5600 	strd	r5, r6, [sp]
 8016346:	4622      	mov	r2, r4
 8016348:	4648      	mov	r0, r9
 801634a:	f001 fcef 	bl	8017d2c <uxr_read_framed_msg>
 801634e:	2800      	cmp	r0, #0
 8016350:	d0ef      	beq.n	8016332 <recv_custom_msg+0x2e>
 8016352:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016356:	b1b3      	cbz	r3, 8016386 <recv_custom_msg+0x82>
 8016358:	4b0f      	ldr	r3, [pc, #60]	@ (8016398 <recv_custom_msg+0x94>)
 801635a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801635e:	701a      	strb	r2, [r3, #0]
 8016360:	2000      	movs	r0, #0
 8016362:	b009      	add	sp, #36	@ 0x24
 8016364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016368:	f10d 021f 	add.w	r2, sp, #31
 801636c:	9200      	str	r2, [sp, #0]
 801636e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8016372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016376:	4601      	mov	r1, r0
 8016378:	47a8      	blx	r5
 801637a:	2800      	cmp	r0, #0
 801637c:	d0ec      	beq.n	8016358 <recv_custom_msg+0x54>
 801637e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1e8      	bne.n	8016358 <recv_custom_msg+0x54>
 8016386:	f8cb 0000 	str.w	r0, [fp]
 801638a:	2001      	movs	r0, #1
 801638c:	f8ca 4000 	str.w	r4, [sl]
 8016390:	b009      	add	sp, #36	@ 0x24
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	bf00      	nop
 8016398:	2001813c 	.word	0x2001813c

0801639c <send_custom_msg>:
 801639c:	b530      	push	{r4, r5, lr}
 801639e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80163a2:	b087      	sub	sp, #28
 80163a4:	4615      	mov	r5, r2
 80163a6:	b974      	cbnz	r4, 80163c6 <send_custom_msg+0x2a>
 80163a8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80163ac:	f10d 0317 	add.w	r3, sp, #23
 80163b0:	47a0      	blx	r4
 80163b2:	b108      	cbz	r0, 80163b8 <send_custom_msg+0x1c>
 80163b4:	42a8      	cmp	r0, r5
 80163b6:	d015      	beq.n	80163e4 <send_custom_msg+0x48>
 80163b8:	4b0c      	ldr	r3, [pc, #48]	@ (80163ec <send_custom_msg+0x50>)
 80163ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80163be:	701a      	strb	r2, [r3, #0]
 80163c0:	2000      	movs	r0, #0
 80163c2:	b007      	add	sp, #28
 80163c4:	bd30      	pop	{r4, r5, pc}
 80163c6:	460b      	mov	r3, r1
 80163c8:	2200      	movs	r2, #0
 80163ca:	f10d 0117 	add.w	r1, sp, #23
 80163ce:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80163d2:	4602      	mov	r2, r0
 80163d4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80163d8:	9500      	str	r5, [sp, #0]
 80163da:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80163de:	f001 faad 	bl	801793c <uxr_write_framed_msg>
 80163e2:	e7e6      	b.n	80163b2 <send_custom_msg+0x16>
 80163e4:	2001      	movs	r0, #1
 80163e6:	b007      	add	sp, #28
 80163e8:	bd30      	pop	{r4, r5, pc}
 80163ea:	bf00      	nop
 80163ec:	2001813c 	.word	0x2001813c

080163f0 <uxr_set_custom_transport_callbacks>:
 80163f0:	b410      	push	{r4}
 80163f2:	9c01      	ldr	r4, [sp, #4]
 80163f4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80163f8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80163fc:	9b02      	ldr	r3, [sp, #8]
 80163fe:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8016402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016406:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801640a:	4770      	bx	lr

0801640c <uxr_init_custom_transport>:
 801640c:	b538      	push	{r3, r4, r5, lr}
 801640e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8016412:	b303      	cbz	r3, 8016456 <uxr_init_custom_transport+0x4a>
 8016414:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016418:	4604      	mov	r4, r0
 801641a:	b1e2      	cbz	r2, 8016456 <uxr_init_custom_transport+0x4a>
 801641c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8016420:	b1ca      	cbz	r2, 8016456 <uxr_init_custom_transport+0x4a>
 8016422:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8016426:	b1b2      	cbz	r2, 8016456 <uxr_init_custom_transport+0x4a>
 8016428:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801642c:	4798      	blx	r3
 801642e:	4605      	mov	r5, r0
 8016430:	b188      	cbz	r0, 8016456 <uxr_init_custom_transport+0x4a>
 8016432:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8016436:	b98b      	cbnz	r3, 801645c <uxr_init_custom_transport+0x50>
 8016438:	490b      	ldr	r1, [pc, #44]	@ (8016468 <uxr_init_custom_transport+0x5c>)
 801643a:	4b0c      	ldr	r3, [pc, #48]	@ (801646c <uxr_init_custom_transport+0x60>)
 801643c:	4a0c      	ldr	r2, [pc, #48]	@ (8016470 <uxr_init_custom_transport+0x64>)
 801643e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8016442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016446:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801644a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801644e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8016452:	4628      	mov	r0, r5
 8016454:	bd38      	pop	{r3, r4, r5, pc}
 8016456:	2500      	movs	r5, #0
 8016458:	4628      	mov	r0, r5
 801645a:	bd38      	pop	{r3, r4, r5, pc}
 801645c:	2100      	movs	r1, #0
 801645e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8016462:	f001 fa65 	bl	8017930 <uxr_init_framing_io>
 8016466:	e7e7      	b.n	8016438 <uxr_init_custom_transport+0x2c>
 8016468:	0801639d 	.word	0x0801639d
 801646c:	08016305 	.word	0x08016305
 8016470:	080162f9 	.word	0x080162f9

08016474 <uxr_close_custom_transport>:
 8016474:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016478:	4718      	bx	r3
 801647a:	bf00      	nop

0801647c <uxr_object_id>:
 801647c:	b082      	sub	sp, #8
 801647e:	2300      	movs	r3, #0
 8016480:	f88d 1006 	strb.w	r1, [sp, #6]
 8016484:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016488:	f360 030f 	bfi	r3, r0, #0, #16
 801648c:	f362 431f 	bfi	r3, r2, #16, #16
 8016490:	4618      	mov	r0, r3
 8016492:	b002      	add	sp, #8
 8016494:	4770      	bx	lr
 8016496:	bf00      	nop

08016498 <uxr_object_id_from_raw>:
 8016498:	7843      	ldrb	r3, [r0, #1]
 801649a:	7801      	ldrb	r1, [r0, #0]
 801649c:	b082      	sub	sp, #8
 801649e:	f003 020f 	and.w	r2, r3, #15
 80164a2:	f88d 2006 	strb.w	r2, [sp, #6]
 80164a6:	091b      	lsrs	r3, r3, #4
 80164a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80164ac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80164b0:	2000      	movs	r0, #0
 80164b2:	f363 000f 	bfi	r0, r3, #0, #16
 80164b6:	f362 401f 	bfi	r0, r2, #16, #16
 80164ba:	b002      	add	sp, #8
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop

080164c0 <uxr_object_id_to_raw>:
 80164c0:	4602      	mov	r2, r0
 80164c2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80164c6:	b082      	sub	sp, #8
 80164c8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80164cc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80164d0:	f881 c000 	strb.w	ip, [r1]
 80164d4:	7048      	strb	r0, [r1, #1]
 80164d6:	b002      	add	sp, #8
 80164d8:	4770      	bx	lr
 80164da:	bf00      	nop

080164dc <uxr_buffer_request_data>:
 80164dc:	b530      	push	{r4, r5, lr}
 80164de:	b095      	sub	sp, #84	@ 0x54
 80164e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80164e4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80164e6:	9303      	str	r3, [sp, #12]
 80164e8:	2200      	movs	r2, #0
 80164ea:	2d00      	cmp	r5, #0
 80164ec:	bf14      	ite	ne
 80164ee:	2101      	movne	r1, #1
 80164f0:	4611      	moveq	r1, r2
 80164f2:	4604      	mov	r4, r0
 80164f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80164f8:	f88d 201d 	strb.w	r2, [sp, #29]
 80164fc:	f88d 201e 	strb.w	r2, [sp, #30]
 8016500:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8016504:	d021      	beq.n	801654a <uxr_buffer_request_data+0x6e>
 8016506:	682a      	ldr	r2, [r5, #0]
 8016508:	686b      	ldr	r3, [r5, #4]
 801650a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801650e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016512:	2210      	movs	r2, #16
 8016514:	2308      	movs	r3, #8
 8016516:	2100      	movs	r1, #0
 8016518:	e9cd 3100 	strd	r3, r1, [sp]
 801651c:	4620      	mov	r0, r4
 801651e:	9905      	ldr	r1, [sp, #20]
 8016520:	ab0c      	add	r3, sp, #48	@ 0x30
 8016522:	f001 f89f 	bl	8017664 <uxr_prepare_stream_to_write_submessage>
 8016526:	b918      	cbnz	r0, 8016530 <uxr_buffer_request_data+0x54>
 8016528:	4604      	mov	r4, r0
 801652a:	4620      	mov	r0, r4
 801652c:	b015      	add	sp, #84	@ 0x54
 801652e:	bd30      	pop	{r4, r5, pc}
 8016530:	9904      	ldr	r1, [sp, #16]
 8016532:	aa06      	add	r2, sp, #24
 8016534:	4620      	mov	r0, r4
 8016536:	f001 f9cb 	bl	80178d0 <uxr_init_base_object_request>
 801653a:	a906      	add	r1, sp, #24
 801653c:	4604      	mov	r4, r0
 801653e:	a80c      	add	r0, sp, #48	@ 0x30
 8016540:	f003 f958 	bl	80197f4 <uxr_serialize_READ_DATA_Payload>
 8016544:	4620      	mov	r0, r4
 8016546:	b015      	add	sp, #84	@ 0x54
 8016548:	bd30      	pop	{r4, r5, pc}
 801654a:	2208      	movs	r2, #8
 801654c:	e7e2      	b.n	8016514 <uxr_buffer_request_data+0x38>
 801654e:	bf00      	nop

08016550 <uxr_buffer_cancel_data>:
 8016550:	b510      	push	{r4, lr}
 8016552:	b094      	sub	sp, #80	@ 0x50
 8016554:	2300      	movs	r3, #0
 8016556:	9202      	str	r2, [sp, #8]
 8016558:	9205      	str	r2, [sp, #20]
 801655a:	9301      	str	r3, [sp, #4]
 801655c:	2201      	movs	r2, #1
 801655e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016562:	f88d 301e 	strb.w	r3, [sp, #30]
 8016566:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801656a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801656e:	2308      	movs	r3, #8
 8016570:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	2210      	movs	r2, #16
 8016578:	ab0c      	add	r3, sp, #48	@ 0x30
 801657a:	4604      	mov	r4, r0
 801657c:	9103      	str	r1, [sp, #12]
 801657e:	f001 f871 	bl	8017664 <uxr_prepare_stream_to_write_submessage>
 8016582:	b918      	cbnz	r0, 801658c <uxr_buffer_cancel_data+0x3c>
 8016584:	4604      	mov	r4, r0
 8016586:	4620      	mov	r0, r4
 8016588:	b014      	add	sp, #80	@ 0x50
 801658a:	bd10      	pop	{r4, pc}
 801658c:	9905      	ldr	r1, [sp, #20]
 801658e:	aa06      	add	r2, sp, #24
 8016590:	4620      	mov	r0, r4
 8016592:	f001 f99d 	bl	80178d0 <uxr_init_base_object_request>
 8016596:	a906      	add	r1, sp, #24
 8016598:	4604      	mov	r4, r0
 801659a:	a80c      	add	r0, sp, #48	@ 0x30
 801659c:	f003 f92a 	bl	80197f4 <uxr_serialize_READ_DATA_Payload>
 80165a0:	4620      	mov	r0, r4
 80165a2:	b014      	add	sp, #80	@ 0x50
 80165a4:	bd10      	pop	{r4, pc}
 80165a6:	bf00      	nop

080165a8 <read_submessage_format>:
 80165a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165ac:	b095      	sub	sp, #84	@ 0x54
 80165ae:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80165b2:	b113      	cbz	r3, 80165ba <read_submessage_format+0x12>
 80165b4:	b015      	add	sp, #84	@ 0x54
 80165b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ba:	460c      	mov	r4, r1
 80165bc:	4615      	mov	r5, r2
 80165be:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80165c2:	4607      	mov	r7, r0
 80165c4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80165c6:	9004      	str	r0, [sp, #16]
 80165c8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80165ca:	9005      	str	r0, [sp, #20]
 80165cc:	1a52      	subs	r2, r2, r1
 80165ce:	a80c      	add	r0, sp, #48	@ 0x30
 80165d0:	4699      	mov	r9, r3
 80165d2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80165d6:	f7f9 f82b 	bl	800f630 <ucdr_init_buffer>
 80165da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80165de:	a80c      	add	r0, sp, #48	@ 0x30
 80165e0:	f7f8 fffa 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 80165e4:	69e2      	ldr	r2, [r4, #28]
 80165e6:	b19a      	cbz	r2, 8016610 <read_submessage_format+0x68>
 80165e8:	f1b8 0f07 	cmp.w	r8, #7
 80165ec:	f882 9014 	strb.w	r9, [r2, #20]
 80165f0:	d040      	beq.n	8016674 <read_submessage_format+0xcc>
 80165f2:	f1b8 0f08 	cmp.w	r8, #8
 80165f6:	d02e      	beq.n	8016656 <read_submessage_format+0xae>
 80165f8:	f1b8 0f06 	cmp.w	r8, #6
 80165fc:	d011      	beq.n	8016622 <read_submessage_format+0x7a>
 80165fe:	2301      	movs	r3, #1
 8016600:	7513      	strb	r3, [r2, #20]
 8016602:	4629      	mov	r1, r5
 8016604:	4620      	mov	r0, r4
 8016606:	f7f9 f863 	bl	800f6d0 <ucdr_advance_buffer>
 801660a:	b015      	add	sp, #84	@ 0x54
 801660c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016610:	f1b8 0f07 	cmp.w	r8, #7
 8016614:	d02e      	beq.n	8016674 <read_submessage_format+0xcc>
 8016616:	f1b8 0f08 	cmp.w	r8, #8
 801661a:	d01c      	beq.n	8016656 <read_submessage_format+0xae>
 801661c:	f1b8 0f06 	cmp.w	r8, #6
 8016620:	d1ef      	bne.n	8016602 <read_submessage_format+0x5a>
 8016622:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8016626:	f1b8 0f00 	cmp.w	r8, #0
 801662a:	d011      	beq.n	8016650 <read_submessage_format+0xa8>
 801662c:	ab0c      	add	r3, sp, #48	@ 0x30
 801662e:	e9cd 3500 	strd	r3, r5, [sp]
 8016632:	2306      	movs	r3, #6
 8016634:	f88d 3016 	strb.w	r3, [sp, #22]
 8016638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801663c:	9302      	str	r3, [sp, #8]
 801663e:	4632      	mov	r2, r6
 8016640:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016644:	4638      	mov	r0, r7
 8016646:	47c0      	blx	r8
 8016648:	2301      	movs	r3, #1
 801664a:	69e2      	ldr	r2, [r4, #28]
 801664c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8016650:	2a00      	cmp	r2, #0
 8016652:	d1d4      	bne.n	80165fe <read_submessage_format+0x56>
 8016654:	e7d5      	b.n	8016602 <read_submessage_format+0x5a>
 8016656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801665a:	2b00      	cmp	r3, #0
 801665c:	d0f8      	beq.n	8016650 <read_submessage_format+0xa8>
 801665e:	a906      	add	r1, sp, #24
 8016660:	a80c      	add	r0, sp, #48	@ 0x30
 8016662:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016666:	f003 f999 	bl	801999c <uxr_deserialize_SampleIdentity>
 801666a:	b9a0      	cbnz	r0, 8016696 <read_submessage_format+0xee>
 801666c:	69e2      	ldr	r2, [r4, #28]
 801666e:	2a00      	cmp	r2, #0
 8016670:	d1c5      	bne.n	80165fe <read_submessage_format+0x56>
 8016672:	e7c6      	b.n	8016602 <read_submessage_format+0x5a>
 8016674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016678:	b13b      	cbz	r3, 801668a <read_submessage_format+0xe2>
 801667a:	a906      	add	r1, sp, #24
 801667c:	a80c      	add	r0, sp, #48	@ 0x30
 801667e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016682:	f002 fe51 	bl	8019328 <uxr_deserialize_BaseObjectRequest>
 8016686:	bb60      	cbnz	r0, 80166e2 <read_submessage_format+0x13a>
 8016688:	69e2      	ldr	r2, [r4, #28]
 801668a:	68a3      	ldr	r3, [r4, #8]
 801668c:	442b      	add	r3, r5
 801668e:	60a3      	str	r3, [r4, #8]
 8016690:	2a00      	cmp	r2, #0
 8016692:	d1b4      	bne.n	80165fe <read_submessage_format+0x56>
 8016694:	e7b5      	b.n	8016602 <read_submessage_format+0x5a>
 8016696:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801669a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801669c:	1a52      	subs	r2, r2, r1
 801669e:	eba8 0803 	sub.w	r8, r8, r3
 80166a2:	a80c      	add	r0, sp, #48	@ 0x30
 80166a4:	f7f8 ffc4 	bl	800f630 <ucdr_init_buffer>
 80166a8:	44a8      	add	r8, r5
 80166aa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80166ae:	a80c      	add	r0, sp, #48	@ 0x30
 80166b0:	f7f8 ff92 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 80166b4:	fa1f f888 	uxth.w	r8, r8
 80166b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80166ba:	9300      	str	r3, [sp, #0]
 80166bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80166c0:	2108      	movs	r1, #8
 80166c2:	f88d 1016 	strb.w	r1, [sp, #22]
 80166c6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80166ca:	9102      	str	r1, [sp, #8]
 80166cc:	ab06      	add	r3, sp, #24
 80166ce:	4632      	mov	r2, r6
 80166d0:	9905      	ldr	r1, [sp, #20]
 80166d2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80166d6:	4638      	mov	r0, r7
 80166d8:	47b0      	blx	r6
 80166da:	2301      	movs	r3, #1
 80166dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80166e0:	e7c4      	b.n	801666c <read_submessage_format+0xc4>
 80166e2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80166e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80166e8:	1a52      	subs	r2, r2, r1
 80166ea:	a80c      	add	r0, sp, #48	@ 0x30
 80166ec:	eba8 0803 	sub.w	r8, r8, r3
 80166f0:	f7f8 ff9e 	bl	800f630 <ucdr_init_buffer>
 80166f4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80166f8:	a80c      	add	r0, sp, #48	@ 0x30
 80166fa:	f7f8 ff6d 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 80166fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016706:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801670a:	44a8      	add	r8, r5
 801670c:	fa1f f888 	uxth.w	r8, r8
 8016710:	f8cd 8004 	str.w	r8, [sp, #4]
 8016714:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016718:	2107      	movs	r1, #7
 801671a:	f88d 1016 	strb.w	r1, [sp, #22]
 801671e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8016722:	9102      	str	r1, [sp, #8]
 8016724:	4632      	mov	r2, r6
 8016726:	b29b      	uxth	r3, r3
 8016728:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801672c:	9905      	ldr	r1, [sp, #20]
 801672e:	4638      	mov	r0, r7
 8016730:	47b0      	blx	r6
 8016732:	2301      	movs	r3, #1
 8016734:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8016738:	e7a6      	b.n	8016688 <read_submessage_format+0xe0>
 801673a:	bf00      	nop

0801673c <on_get_fragmentation_info>:
 801673c:	b500      	push	{lr}
 801673e:	b08b      	sub	sp, #44	@ 0x2c
 8016740:	4601      	mov	r1, r0
 8016742:	2204      	movs	r2, #4
 8016744:	a802      	add	r0, sp, #8
 8016746:	f7f8 ff73 	bl	800f630 <ucdr_init_buffer>
 801674a:	f10d 0305 	add.w	r3, sp, #5
 801674e:	f10d 0206 	add.w	r2, sp, #6
 8016752:	a901      	add	r1, sp, #4
 8016754:	a802      	add	r0, sp, #8
 8016756:	f001 fecf 	bl	80184f8 <uxr_read_submessage_header>
 801675a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801675e:	2b0d      	cmp	r3, #13
 8016760:	d003      	beq.n	801676a <on_get_fragmentation_info+0x2e>
 8016762:	2000      	movs	r0, #0
 8016764:	b00b      	add	sp, #44	@ 0x2c
 8016766:	f85d fb04 	ldr.w	pc, [sp], #4
 801676a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801676e:	f013 0f02 	tst.w	r3, #2
 8016772:	bf14      	ite	ne
 8016774:	2002      	movne	r0, #2
 8016776:	2001      	moveq	r0, #1
 8016778:	b00b      	add	sp, #44	@ 0x2c
 801677a:	f85d fb04 	ldr.w	pc, [sp], #4
 801677e:	bf00      	nop

08016780 <read_submessage_get_info>:
 8016780:	b570      	push	{r4, r5, r6, lr}
 8016782:	2500      	movs	r5, #0
 8016784:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8016788:	4604      	mov	r4, r0
 801678a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801678e:	460e      	mov	r6, r1
 8016790:	a810      	add	r0, sp, #64	@ 0x40
 8016792:	4629      	mov	r1, r5
 8016794:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8016798:	f006 fe88 	bl	801d4ac <memset>
 801679c:	a903      	add	r1, sp, #12
 801679e:	4630      	mov	r0, r6
 80167a0:	f002 ff6a 	bl	8019678 <uxr_deserialize_GET_INFO_Payload>
 80167a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80167a8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80167ac:	4620      	mov	r0, r4
 80167ae:	f001 f887 	bl	80178c0 <uxr_session_header_offset>
 80167b2:	462b      	mov	r3, r5
 80167b4:	9000      	str	r0, [sp, #0]
 80167b6:	220c      	movs	r2, #12
 80167b8:	a905      	add	r1, sp, #20
 80167ba:	a808      	add	r0, sp, #32
 80167bc:	f7f8 ff26 	bl	800f60c <ucdr_init_buffer_origin_offset>
 80167c0:	a910      	add	r1, sp, #64	@ 0x40
 80167c2:	a808      	add	r0, sp, #32
 80167c4:	f002 ffca 	bl	801975c <uxr_serialize_INFO_Payload>
 80167c8:	9b08      	ldr	r3, [sp, #32]
 80167ca:	462a      	mov	r2, r5
 80167cc:	4629      	mov	r1, r5
 80167ce:	4620      	mov	r0, r4
 80167d0:	f001 f820 	bl	8017814 <uxr_stamp_session_header>
 80167d4:	a808      	add	r0, sp, #32
 80167d6:	f7f8 ff57 	bl	800f688 <ucdr_buffer_length>
 80167da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80167dc:	4602      	mov	r2, r0
 80167de:	a905      	add	r1, sp, #20
 80167e0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80167e4:	47a0      	blx	r4
 80167e6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80167ea:	bd70      	pop	{r4, r5, r6, pc}

080167ec <write_submessage_acknack.isra.0>:
 80167ec:	b570      	push	{r4, r5, r6, lr}
 80167ee:	b092      	sub	sp, #72	@ 0x48
 80167f0:	4605      	mov	r5, r0
 80167f2:	460e      	mov	r6, r1
 80167f4:	4614      	mov	r4, r2
 80167f6:	f001 f863 	bl	80178c0 <uxr_session_header_offset>
 80167fa:	a905      	add	r1, sp, #20
 80167fc:	9000      	str	r0, [sp, #0]
 80167fe:	2300      	movs	r3, #0
 8016800:	a80a      	add	r0, sp, #40	@ 0x28
 8016802:	2211      	movs	r2, #17
 8016804:	f7f8 ff02 	bl	800f60c <ucdr_init_buffer_origin_offset>
 8016808:	2218      	movs	r2, #24
 801680a:	fb02 5404 	mla	r4, r2, r4, r5
 801680e:	2300      	movs	r3, #0
 8016810:	2205      	movs	r2, #5
 8016812:	3450      	adds	r4, #80	@ 0x50
 8016814:	210a      	movs	r1, #10
 8016816:	a80a      	add	r0, sp, #40	@ 0x28
 8016818:	f001 fe54 	bl	80184c4 <uxr_buffer_submessage_header>
 801681c:	a903      	add	r1, sp, #12
 801681e:	4620      	mov	r0, r4
 8016820:	f004 fffe 	bl	801b820 <uxr_compute_acknack>
 8016824:	ba40      	rev16	r0, r0
 8016826:	f8ad 000e 	strh.w	r0, [sp, #14]
 801682a:	a903      	add	r1, sp, #12
 801682c:	a80a      	add	r0, sp, #40	@ 0x28
 801682e:	f88d 6010 	strb.w	r6, [sp, #16]
 8016832:	f003 f803 	bl	801983c <uxr_serialize_ACKNACK_Payload>
 8016836:	2200      	movs	r2, #0
 8016838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801683a:	4611      	mov	r1, r2
 801683c:	4628      	mov	r0, r5
 801683e:	f000 ffe9 	bl	8017814 <uxr_stamp_session_header>
 8016842:	a80a      	add	r0, sp, #40	@ 0x28
 8016844:	f7f8 ff20 	bl	800f688 <ucdr_buffer_length>
 8016848:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801684a:	4602      	mov	r2, r0
 801684c:	a905      	add	r1, sp, #20
 801684e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016852:	47a0      	blx	r4
 8016854:	b012      	add	sp, #72	@ 0x48
 8016856:	bd70      	pop	{r4, r5, r6, pc}

08016858 <uxr_init_session>:
 8016858:	b510      	push	{r4, lr}
 801685a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8016890 <uxr_init_session+0x38>
 801685e:	2300      	movs	r3, #0
 8016860:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8016864:	4604      	mov	r4, r0
 8016866:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801686a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801686e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8016872:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8016876:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801687a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801687e:	2181      	movs	r1, #129	@ 0x81
 8016880:	f000 ff34 	bl	80176ec <uxr_init_session_info>
 8016884:	f104 0008 	add.w	r0, r4, #8
 8016888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801688c:	f001 bd36 	b.w	80182fc <uxr_init_stream_storage>
	...

08016898 <uxr_set_status_callback>:
 8016898:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop

080168a0 <uxr_set_topic_callback>:
 80168a0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop

080168a8 <uxr_set_request_callback>:
 80168a8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop

080168b0 <uxr_set_reply_callback>:
 80168b0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80168b4:	4770      	bx	lr
 80168b6:	bf00      	nop

080168b8 <uxr_create_output_best_effort_stream>:
 80168b8:	b510      	push	{r4, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	e9cd 2100 	strd	r2, r1, [sp]
 80168c0:	4604      	mov	r4, r0
 80168c2:	f000 fffd 	bl	80178c0 <uxr_session_header_offset>
 80168c6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80168ca:	4603      	mov	r3, r0
 80168cc:	f104 0008 	add.w	r0, r4, #8
 80168d0:	b004      	add	sp, #16
 80168d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168d6:	f001 bd5b 	b.w	8018390 <uxr_add_output_best_effort_buffer>
 80168da:	bf00      	nop

080168dc <uxr_create_output_reliable_stream>:
 80168dc:	b510      	push	{r4, lr}
 80168de:	b088      	sub	sp, #32
 80168e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80168e4:	4604      	mov	r4, r0
 80168e6:	9303      	str	r3, [sp, #12]
 80168e8:	f000 ffea 	bl	80178c0 <uxr_session_header_offset>
 80168ec:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80168f0:	9000      	str	r0, [sp, #0]
 80168f2:	9905      	ldr	r1, [sp, #20]
 80168f4:	f104 0008 	add.w	r0, r4, #8
 80168f8:	f001 fd5e 	bl	80183b8 <uxr_add_output_reliable_buffer>
 80168fc:	2200      	movs	r2, #0
 80168fe:	b2c3      	uxtb	r3, r0
 8016900:	f363 0207 	bfi	r2, r3, #0, #8
 8016904:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016908:	f363 220f 	bfi	r2, r3, #8, #8
 801690c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016910:	f363 4217 	bfi	r2, r3, #16, #8
 8016914:	0e03      	lsrs	r3, r0, #24
 8016916:	f363 621f 	bfi	r2, r3, #24, #8
 801691a:	4610      	mov	r0, r2
 801691c:	b008      	add	sp, #32
 801691e:	bd10      	pop	{r4, pc}

08016920 <uxr_create_input_best_effort_stream>:
 8016920:	b082      	sub	sp, #8
 8016922:	3008      	adds	r0, #8
 8016924:	b002      	add	sp, #8
 8016926:	f001 bd61 	b.w	80183ec <uxr_add_input_best_effort_buffer>
 801692a:	bf00      	nop

0801692c <uxr_create_input_reliable_stream>:
 801692c:	b510      	push	{r4, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	4c0b      	ldr	r4, [pc, #44]	@ (8016960 <uxr_create_input_reliable_stream+0x34>)
 8016932:	9400      	str	r4, [sp, #0]
 8016934:	3008      	adds	r0, #8
 8016936:	f001 fd6f 	bl	8018418 <uxr_add_input_reliable_buffer>
 801693a:	2200      	movs	r2, #0
 801693c:	b2c3      	uxtb	r3, r0
 801693e:	f363 0207 	bfi	r2, r3, #0, #8
 8016942:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016946:	f363 220f 	bfi	r2, r3, #8, #8
 801694a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801694e:	f363 4217 	bfi	r2, r3, #16, #8
 8016952:	0e03      	lsrs	r3, r0, #24
 8016954:	f363 621f 	bfi	r2, r3, #24, #8
 8016958:	4610      	mov	r0, r2
 801695a:	b004      	add	sp, #16
 801695c:	bd10      	pop	{r4, pc}
 801695e:	bf00      	nop
 8016960:	0801673d 	.word	0x0801673d

08016964 <uxr_epoch_millis>:
 8016964:	b510      	push	{r4, lr}
 8016966:	4604      	mov	r4, r0
 8016968:	f001 fe0c 	bl	8018584 <uxr_nanos>
 801696c:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8016970:	1ac0      	subs	r0, r0, r3
 8016972:	4a04      	ldr	r2, [pc, #16]	@ (8016984 <uxr_epoch_millis+0x20>)
 8016974:	f04f 0300 	mov.w	r3, #0
 8016978:	eb61 0104 	sbc.w	r1, r1, r4
 801697c:	f7ea f974 	bl	8000c68 <__aeabi_ldivmod>
 8016980:	bd10      	pop	{r4, pc}
 8016982:	bf00      	nop
 8016984:	000f4240 	.word	0x000f4240

08016988 <uxr_epoch_nanos>:
 8016988:	b510      	push	{r4, lr}
 801698a:	4604      	mov	r4, r0
 801698c:	f001 fdfa 	bl	8018584 <uxr_nanos>
 8016990:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8016994:	1ac0      	subs	r0, r0, r3
 8016996:	eb61 0102 	sbc.w	r1, r1, r2
 801699a:	bd10      	pop	{r4, pc}

0801699c <uxr_flash_output_streams>:
 801699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a0:	7e03      	ldrb	r3, [r0, #24]
 80169a2:	b084      	sub	sp, #16
 80169a4:	4604      	mov	r4, r0
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d035      	beq.n	8016a16 <uxr_flash_output_streams+0x7a>
 80169aa:	f04f 0900 	mov.w	r9, #0
 80169ae:	4648      	mov	r0, r9
 80169b0:	f10d 0802 	add.w	r8, sp, #2
 80169b4:	af03      	add	r7, sp, #12
 80169b6:	ae02      	add	r6, sp, #8
 80169b8:	e006      	b.n	80169c8 <uxr_flash_output_streams+0x2c>
 80169ba:	7e23      	ldrb	r3, [r4, #24]
 80169bc:	f109 0901 	add.w	r9, r9, #1
 80169c0:	fa5f f089 	uxtb.w	r0, r9
 80169c4:	4283      	cmp	r3, r0
 80169c6:	d926      	bls.n	8016a16 <uxr_flash_output_streams+0x7a>
 80169c8:	2201      	movs	r2, #1
 80169ca:	4611      	mov	r1, r2
 80169cc:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80169d0:	f001 fc40 	bl	8018254 <uxr_stream_id>
 80169d4:	3508      	adds	r5, #8
 80169d6:	4684      	mov	ip, r0
 80169d8:	4643      	mov	r3, r8
 80169da:	463a      	mov	r2, r7
 80169dc:	4631      	mov	r1, r6
 80169de:	4628      	mov	r0, r5
 80169e0:	f8cd c004 	str.w	ip, [sp, #4]
 80169e4:	f004 ffa2 	bl	801b92c <uxr_prepare_best_effort_buffer_to_send>
 80169e8:	2800      	cmp	r0, #0
 80169ea:	d0e6      	beq.n	80169ba <uxr_flash_output_streams+0x1e>
 80169ec:	9b02      	ldr	r3, [sp, #8]
 80169ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80169f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80169f6:	4620      	mov	r0, r4
 80169f8:	f000 ff0c 	bl	8017814 <uxr_stamp_session_header>
 80169fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80169fe:	9a03      	ldr	r2, [sp, #12]
 8016a00:	685d      	ldr	r5, [r3, #4]
 8016a02:	6818      	ldr	r0, [r3, #0]
 8016a04:	9902      	ldr	r1, [sp, #8]
 8016a06:	47a8      	blx	r5
 8016a08:	f109 0901 	add.w	r9, r9, #1
 8016a0c:	7e23      	ldrb	r3, [r4, #24]
 8016a0e:	fa5f f089 	uxtb.w	r0, r9
 8016a12:	4283      	cmp	r3, r0
 8016a14:	d8d8      	bhi.n	80169c8 <uxr_flash_output_streams+0x2c>
 8016a16:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8016a1a:	b38b      	cbz	r3, 8016a80 <uxr_flash_output_streams+0xe4>
 8016a1c:	f04f 0900 	mov.w	r9, #0
 8016a20:	f10d 0802 	add.w	r8, sp, #2
 8016a24:	af03      	add	r7, sp, #12
 8016a26:	ae02      	add	r6, sp, #8
 8016a28:	4648      	mov	r0, r9
 8016a2a:	2201      	movs	r2, #1
 8016a2c:	2102      	movs	r1, #2
 8016a2e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8016a32:	f001 fc0f 	bl	8018254 <uxr_stream_id>
 8016a36:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8016a3a:	3520      	adds	r5, #32
 8016a3c:	9001      	str	r0, [sp, #4]
 8016a3e:	e00d      	b.n	8016a5c <uxr_flash_output_streams+0xc0>
 8016a40:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016a44:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8016a48:	9b02      	ldr	r3, [sp, #8]
 8016a4a:	f000 fee3 	bl	8017814 <uxr_stamp_session_header>
 8016a4e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016a50:	9a03      	ldr	r2, [sp, #12]
 8016a52:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8016a56:	9902      	ldr	r1, [sp, #8]
 8016a58:	6818      	ldr	r0, [r3, #0]
 8016a5a:	47d0      	blx	sl
 8016a5c:	4643      	mov	r3, r8
 8016a5e:	463a      	mov	r2, r7
 8016a60:	4631      	mov	r1, r6
 8016a62:	4628      	mov	r0, r5
 8016a64:	f005 f980 	bl	801bd68 <uxr_prepare_next_reliable_buffer_to_send>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d1e7      	bne.n	8016a40 <uxr_flash_output_streams+0xa4>
 8016a70:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8016a74:	f109 0901 	add.w	r9, r9, #1
 8016a78:	fa5f f089 	uxtb.w	r0, r9
 8016a7c:	4283      	cmp	r3, r0
 8016a7e:	d8d4      	bhi.n	8016a2a <uxr_flash_output_streams+0x8e>
 8016a80:	b004      	add	sp, #16
 8016a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a86:	bf00      	nop

08016a88 <read_submessage_info>:
 8016a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a8c:	460d      	mov	r5, r1
 8016a8e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8016a92:	4669      	mov	r1, sp
 8016a94:	4607      	mov	r7, r0
 8016a96:	4628      	mov	r0, r5
 8016a98:	f002 fcfc 	bl	8019494 <uxr_deserialize_BaseObjectReply>
 8016a9c:	a902      	add	r1, sp, #8
 8016a9e:	4604      	mov	r4, r0
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8016aa6:	f7f7 fac9 	bl	800e03c <ucdr_deserialize_bool>
 8016aaa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8016aae:	4004      	ands	r4, r0
 8016ab0:	b2e4      	uxtb	r4, r4
 8016ab2:	b95b      	cbnz	r3, 8016acc <read_submessage_info+0x44>
 8016ab4:	a987      	add	r1, sp, #540	@ 0x21c
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	f7f7 fac0 	bl	800e03c <ucdr_deserialize_bool>
 8016abc:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8016ac0:	4606      	mov	r6, r0
 8016ac2:	b94b      	cbnz	r3, 8016ad8 <read_submessage_info+0x50>
 8016ac4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8016ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016acc:	a903      	add	r1, sp, #12
 8016ace:	4628      	mov	r0, r5
 8016ad0:	f002 fb88 	bl	80191e4 <uxr_deserialize_ObjectVariant>
 8016ad4:	4004      	ands	r4, r0
 8016ad6:	e7ed      	b.n	8016ab4 <read_submessage_info+0x2c>
 8016ad8:	a988      	add	r1, sp, #544	@ 0x220
 8016ada:	4628      	mov	r0, r5
 8016adc:	f7f7 fadc 	bl	800e098 <ucdr_deserialize_uint8_t>
 8016ae0:	4234      	tst	r4, r6
 8016ae2:	d0ef      	beq.n	8016ac4 <read_submessage_info+0x3c>
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d0ed      	beq.n	8016ac4 <read_submessage_info+0x3c>
 8016ae8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8016aec:	2b0d      	cmp	r3, #13
 8016aee:	d1e9      	bne.n	8016ac4 <read_submessage_info+0x3c>
 8016af0:	a98a      	add	r1, sp, #552	@ 0x228
 8016af2:	4628      	mov	r0, r5
 8016af4:	f7f8 f876 	bl	800ebe4 <ucdr_deserialize_int16_t>
 8016af8:	b140      	cbz	r0, 8016b0c <read_submessage_info+0x84>
 8016afa:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	dd07      	ble.n	8016b12 <read_submessage_info+0x8a>
 8016b02:	f1b8 0f00 	cmp.w	r8, #0
 8016b06:	bf14      	ite	ne
 8016b08:	2001      	movne	r0, #1
 8016b0a:	2002      	moveq	r0, #2
 8016b0c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8016b10:	e7d8      	b.n	8016ac4 <read_submessage_info+0x3c>
 8016b12:	2000      	movs	r0, #0
 8016b14:	e7fa      	b.n	8016b0c <read_submessage_info+0x84>
 8016b16:	bf00      	nop

08016b18 <read_submessage_list>:
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	b097      	sub	sp, #92	@ 0x5c
 8016b1e:	4ec1      	ldr	r6, [pc, #772]	@ (8016e24 <read_submessage_list+0x30c>)
 8016b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b22:	4604      	mov	r4, r0
 8016b24:	460d      	mov	r5, r1
 8016b26:	f04f 0801 	mov.w	r8, #1
 8016b2a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8016b2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8016b30:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8016b34:	4628      	mov	r0, r5
 8016b36:	f001 fcdf 	bl	80184f8 <uxr_read_submessage_header>
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	f000 813e 	beq.w	8016dbc <read_submessage_list+0x2a4>
 8016b40:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8016b44:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8016b48:	3b02      	subs	r3, #2
 8016b4a:	2b0d      	cmp	r3, #13
 8016b4c:	d8ed      	bhi.n	8016b2a <read_submessage_list+0x12>
 8016b4e:	a101      	add	r1, pc, #4	@ (adr r1, 8016b54 <read_submessage_list+0x3c>)
 8016b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016b54:	08016db3 	.word	0x08016db3
 8016b58:	08016b2b 	.word	0x08016b2b
 8016b5c:	08016da3 	.word	0x08016da3
 8016b60:	08016d41 	.word	0x08016d41
 8016b64:	08016d37 	.word	0x08016d37
 8016b68:	08016b2b 	.word	0x08016b2b
 8016b6c:	08016b2b 	.word	0x08016b2b
 8016b70:	08016c97 	.word	0x08016c97
 8016b74:	08016c27 	.word	0x08016c27
 8016b78:	08016be7 	.word	0x08016be7
 8016b7c:	08016b2b 	.word	0x08016b2b
 8016b80:	08016b2b 	.word	0x08016b2b
 8016b84:	08016b2b 	.word	0x08016b2b
 8016b88:	08016b8d 	.word	0x08016b8d
 8016b8c:	a910      	add	r1, sp, #64	@ 0x40
 8016b8e:	4628      	mov	r0, r5
 8016b90:	f002 feb2 	bl	80198f8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8016b94:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8016b98:	f1b9 0f00 	cmp.w	r9, #0
 8016b9c:	f000 8116 	beq.w	8016dcc <read_submessage_list+0x2b4>
 8016ba0:	f001 fcf0 	bl	8018584 <uxr_nanos>
 8016ba4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	460b      	mov	r3, r1
 8016baa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8016bac:	2100      	movs	r1, #0
 8016bae:	468c      	mov	ip, r1
 8016bb0:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8016bb4:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8016bb8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8016bba:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8016bbc:	468c      	mov	ip, r1
 8016bbe:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8016bc2:	46e2      	mov	sl, ip
 8016bc4:	46bc      	mov	ip, r7
 8016bc6:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8016bca:	fbc0 7106 	smlal	r7, r1, r0, r6
 8016bce:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8016bd2:	e9cd 7100 	strd	r7, r1, [sp]
 8016bd6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8016bda:	9106      	str	r1, [sp, #24]
 8016bdc:	4620      	mov	r0, r4
 8016bde:	47c8      	blx	r9
 8016be0:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8016be4:	e7a1      	b.n	8016b2a <read_submessage_list+0x12>
 8016be6:	a910      	add	r1, sp, #64	@ 0x40
 8016be8:	4628      	mov	r0, r5
 8016bea:	f002 fe65 	bl	80198b8 <uxr_deserialize_HEARTBEAT_Payload>
 8016bee:	2100      	movs	r1, #0
 8016bf0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8016bf4:	f001 fb58 	bl	80182a8 <uxr_stream_id_from_raw>
 8016bf8:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8016bfc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016bfe:	4639      	mov	r1, r7
 8016c00:	f104 0008 	add.w	r0, r4, #8
 8016c04:	f001 fc3e 	bl	8018484 <uxr_get_input_reliable_stream>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	d08e      	beq.n	8016b2a <read_submessage_list+0x12>
 8016c0c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8016c10:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8016c14:	f004 fdf8 	bl	801b808 <uxr_process_heartbeat>
 8016c18:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8016c1c:	463a      	mov	r2, r7
 8016c1e:	4620      	mov	r0, r4
 8016c20:	f7ff fde4 	bl	80167ec <write_submessage_acknack.isra.0>
 8016c24:	e781      	b.n	8016b2a <read_submessage_list+0x12>
 8016c26:	a910      	add	r1, sp, #64	@ 0x40
 8016c28:	4628      	mov	r0, r5
 8016c2a:	f002 fe1d 	bl	8019868 <uxr_deserialize_ACKNACK_Payload>
 8016c2e:	2100      	movs	r1, #0
 8016c30:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8016c34:	f001 fb38 	bl	80182a8 <uxr_stream_id_from_raw>
 8016c38:	900d      	str	r0, [sp, #52]	@ 0x34
 8016c3a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8016c3e:	f104 0008 	add.w	r0, r4, #8
 8016c42:	f001 fc0b 	bl	801845c <uxr_get_output_reliable_stream>
 8016c46:	4607      	mov	r7, r0
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	f43f af6e 	beq.w	8016b2a <read_submessage_list+0x12>
 8016c4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8016c52:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8016c56:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8016c5a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8016c5e:	b289      	uxth	r1, r1
 8016c60:	f005 f92c 	bl	801bebc <uxr_process_acknack>
 8016c64:	4638      	mov	r0, r7
 8016c66:	f005 f8e9 	bl	801be3c <uxr_begin_output_nack_buffer_it>
 8016c6a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8016c6e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8016c72:	e006      	b.n	8016c82 <read_submessage_list+0x16a>
 8016c74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016c76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016c78:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016c7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016c7e:	6818      	ldr	r0, [r3, #0]
 8016c80:	47c8      	blx	r9
 8016c82:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8016c86:	aa0f      	add	r2, sp, #60	@ 0x3c
 8016c88:	4651      	mov	r1, sl
 8016c8a:	4638      	mov	r0, r7
 8016c8c:	f005 f8d8 	bl	801be40 <uxr_next_reliable_nack_buffer_to_send>
 8016c90:	2800      	cmp	r0, #0
 8016c92:	d1ef      	bne.n	8016c74 <read_submessage_list+0x15c>
 8016c94:	e749      	b.n	8016b2a <read_submessage_list+0x12>
 8016c96:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8016c9a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8016c9e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8016ca2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8016ca6:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8016caa:	4651      	mov	r1, sl
 8016cac:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016cb0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8016cb4:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8016cb8:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8016cc2:	f002 fb31 	bl	8019328 <uxr_deserialize_BaseObjectRequest>
 8016cc6:	4650      	mov	r0, sl
 8016cc8:	a90f      	add	r1, sp, #60	@ 0x3c
 8016cca:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8016cce:	f000 fe1d 	bl	801790c <uxr_parse_base_object_request>
 8016cd2:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8016cd6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016cd8:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8016cdc:	9110      	str	r1, [sp, #64]	@ 0x40
 8016cde:	3f04      	subs	r7, #4
 8016ce0:	f009 090e 	and.w	r9, r9, #14
 8016ce4:	b2bf      	uxth	r7, r7
 8016ce6:	f1bb 0f00 	cmp.w	fp, #0
 8016cea:	d006      	beq.n	8016cfa <read_submessage_list+0x1e2>
 8016cec:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8016cf0:	9300      	str	r3, [sp, #0]
 8016cf2:	4652      	mov	r2, sl
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	47d8      	blx	fp
 8016cfa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8016cfc:	b16a      	cbz	r2, 8016d1a <read_submessage_list+0x202>
 8016cfe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8016d00:	2100      	movs	r1, #0
 8016d02:	3802      	subs	r0, #2
 8016d04:	e002      	b.n	8016d0c <read_submessage_list+0x1f4>
 8016d06:	3101      	adds	r1, #1
 8016d08:	4291      	cmp	r1, r2
 8016d0a:	d006      	beq.n	8016d1a <read_submessage_list+0x202>
 8016d0c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8016d10:	4553      	cmp	r3, sl
 8016d12:	d1f8      	bne.n	8016d06 <read_submessage_list+0x1ee>
 8016d14:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016d16:	2200      	movs	r2, #0
 8016d18:	545a      	strb	r2, [r3, r1]
 8016d1a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8016d1e:	9102      	str	r1, [sp, #8]
 8016d20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016d22:	9101      	str	r1, [sp, #4]
 8016d24:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8016d26:	9100      	str	r1, [sp, #0]
 8016d28:	464b      	mov	r3, r9
 8016d2a:	463a      	mov	r2, r7
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	4620      	mov	r0, r4
 8016d30:	f7ff fc3a 	bl	80165a8 <read_submessage_format>
 8016d34:	e6f9      	b.n	8016b2a <read_submessage_list+0x12>
 8016d36:	4629      	mov	r1, r5
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f7ff fea5 	bl	8016a88 <read_submessage_info>
 8016d3e:	e6f4      	b.n	8016b2a <read_submessage_list+0x12>
 8016d40:	2a00      	cmp	r2, #0
 8016d42:	d03e      	beq.n	8016dc2 <read_submessage_list+0x2aa>
 8016d44:	a910      	add	r1, sp, #64	@ 0x40
 8016d46:	4628      	mov	r0, r5
 8016d48:	f002 fcea 	bl	8019720 <uxr_deserialize_STATUS_Payload>
 8016d4c:	a90e      	add	r1, sp, #56	@ 0x38
 8016d4e:	aa0d      	add	r2, sp, #52	@ 0x34
 8016d50:	a810      	add	r0, sp, #64	@ 0x40
 8016d52:	f000 fddb 	bl	801790c <uxr_parse_base_object_request>
 8016d56:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8016d5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016d5c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8016d60:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8016d64:	910f      	str	r1, [sp, #60]	@ 0x3c
 8016d66:	f1ba 0f00 	cmp.w	sl, #0
 8016d6a:	d006      	beq.n	8016d7a <read_submessage_list+0x262>
 8016d6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8016d70:	9300      	str	r3, [sp, #0]
 8016d72:	463a      	mov	r2, r7
 8016d74:	464b      	mov	r3, r9
 8016d76:	4620      	mov	r0, r4
 8016d78:	47d0      	blx	sl
 8016d7a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8016d7c:	2a00      	cmp	r2, #0
 8016d7e:	f43f aed4 	beq.w	8016b2a <read_submessage_list+0x12>
 8016d82:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8016d84:	2100      	movs	r1, #0
 8016d86:	3802      	subs	r0, #2
 8016d88:	e003      	b.n	8016d92 <read_submessage_list+0x27a>
 8016d8a:	3101      	adds	r1, #1
 8016d8c:	4291      	cmp	r1, r2
 8016d8e:	f43f aecc 	beq.w	8016b2a <read_submessage_list+0x12>
 8016d92:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8016d96:	42bb      	cmp	r3, r7
 8016d98:	d1f7      	bne.n	8016d8a <read_submessage_list+0x272>
 8016d9a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016d9c:	f803 9001 	strb.w	r9, [r3, r1]
 8016da0:	e6c3      	b.n	8016b2a <read_submessage_list+0x12>
 8016da2:	2a00      	cmp	r2, #0
 8016da4:	f47f aec1 	bne.w	8016b2a <read_submessage_list+0x12>
 8016da8:	4629      	mov	r1, r5
 8016daa:	4620      	mov	r0, r4
 8016dac:	f000 fcf4 	bl	8017798 <uxr_read_create_session_status>
 8016db0:	e6bb      	b.n	8016b2a <read_submessage_list+0x12>
 8016db2:	4629      	mov	r1, r5
 8016db4:	4620      	mov	r0, r4
 8016db6:	f7ff fce3 	bl	8016780 <read_submessage_get_info>
 8016dba:	e6b6      	b.n	8016b2a <read_submessage_list+0x12>
 8016dbc:	b017      	add	sp, #92	@ 0x5c
 8016dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f000 fcf3 	bl	80177b0 <uxr_read_delete_session_status>
 8016dca:	e6ae      	b.n	8016b2a <read_submessage_list+0x12>
 8016dcc:	f001 fbda 	bl	8018584 <uxr_nanos>
 8016dd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016dd2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016dd4:	464f      	mov	r7, r9
 8016dd6:	fbc3 2706 	smlal	r2, r7, r3, r6
 8016dda:	1812      	adds	r2, r2, r0
 8016ddc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016dde:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8016de0:	eb47 0101 	adc.w	r1, r7, r1
 8016de4:	464f      	mov	r7, r9
 8016de6:	fbc3 0706 	smlal	r0, r7, r3, r6
 8016dea:	463b      	mov	r3, r7
 8016dec:	4684      	mov	ip, r0
 8016dee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8016df2:	fbc7 0906 	smlal	r0, r9, r7, r6
 8016df6:	eb1c 0c00 	adds.w	ip, ip, r0
 8016dfa:	464f      	mov	r7, r9
 8016dfc:	eb43 0307 	adc.w	r3, r3, r7
 8016e00:	ebb2 0c0c 	subs.w	ip, r2, ip
 8016e04:	eb61 0303 	sbc.w	r3, r1, r3
 8016e08:	0fda      	lsrs	r2, r3, #31
 8016e0a:	eb12 020c 	adds.w	r2, r2, ip
 8016e0e:	f143 0300 	adc.w	r3, r3, #0
 8016e12:	0852      	lsrs	r2, r2, #1
 8016e14:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8016e18:	105b      	asrs	r3, r3, #1
 8016e1a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8016e1e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8016e22:	e6dd      	b.n	8016be0 <read_submessage_list+0xc8>
 8016e24:	3b9aca00 	.word	0x3b9aca00

08016e28 <listen_message_reliably>:
 8016e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e2c:	1e0b      	subs	r3, r1, #0
 8016e2e:	b09d      	sub	sp, #116	@ 0x74
 8016e30:	bfb8      	it	lt
 8016e32:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8016e36:	4680      	mov	r8, r0
 8016e38:	9305      	str	r3, [sp, #20]
 8016e3a:	f001 fb89 	bl	8018550 <uxr_millis>
 8016e3e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8016e42:	4681      	mov	r9, r0
 8016e44:	2a00      	cmp	r2, #0
 8016e46:	f000 80a1 	beq.w	8016f8c <listen_message_reliably+0x164>
 8016e4a:	2600      	movs	r6, #0
 8016e4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016e50:	f04f 3bff 	mov.w	fp, #4294967295
 8016e54:	9303      	str	r3, [sp, #12]
 8016e56:	4630      	mov	r0, r6
 8016e58:	460f      	mov	r7, r1
 8016e5a:	e00f      	b.n	8016e7c <listen_message_reliably+0x54>
 8016e5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8016e60:	9903      	ldr	r1, [sp, #12]
 8016e62:	455a      	cmp	r2, fp
 8016e64:	f106 0601 	add.w	r6, r6, #1
 8016e68:	eb73 0101 	sbcs.w	r1, r3, r1
 8016e6c:	b2f0      	uxtb	r0, r6
 8016e6e:	da01      	bge.n	8016e74 <listen_message_reliably+0x4c>
 8016e70:	4693      	mov	fp, r2
 8016e72:	9303      	str	r3, [sp, #12]
 8016e74:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016e78:	4283      	cmp	r3, r0
 8016e7a:	d960      	bls.n	8016f3e <listen_message_reliably+0x116>
 8016e7c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8016e80:	2102      	movs	r1, #2
 8016e82:	2201      	movs	r2, #1
 8016e84:	f001 f9e6 	bl	8018254 <uxr_stream_id>
 8016e88:	00e4      	lsls	r4, r4, #3
 8016e8a:	f104 0520 	add.w	r5, r4, #32
 8016e8e:	4445      	add	r5, r8
 8016e90:	4601      	mov	r1, r0
 8016e92:	463b      	mov	r3, r7
 8016e94:	464a      	mov	r2, r9
 8016e96:	4628      	mov	r0, r5
 8016e98:	9109      	str	r1, [sp, #36]	@ 0x24
 8016e9a:	f004 ffa5 	bl	801bde8 <uxr_update_output_stream_heartbeat_timestamp>
 8016e9e:	eb08 0304 	add.w	r3, r8, r4
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d0da      	beq.n	8016e5c <listen_message_reliably+0x34>
 8016ea6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016eaa:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8016eae:	9304      	str	r3, [sp, #16]
 8016eb0:	4640      	mov	r0, r8
 8016eb2:	f000 fd05 	bl	80178c0 <uxr_session_header_offset>
 8016eb6:	3501      	adds	r5, #1
 8016eb8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8016ebc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016ec0:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	2211      	movs	r2, #17
 8016ec8:	9000      	str	r0, [sp, #0]
 8016eca:	a90c      	add	r1, sp, #48	@ 0x30
 8016ecc:	4650      	mov	r0, sl
 8016ece:	f7f8 fb9d 	bl	800f60c <ucdr_init_buffer_origin_offset>
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	2205      	movs	r2, #5
 8016ed6:	210b      	movs	r1, #11
 8016ed8:	4650      	mov	r0, sl
 8016eda:	f001 faf3 	bl	80184c4 <uxr_buffer_submessage_header>
 8016ede:	8968      	ldrh	r0, [r5, #10]
 8016ee0:	2101      	movs	r1, #1
 8016ee2:	f005 f843 	bl	801bf6c <uxr_seq_num_add>
 8016ee6:	892b      	ldrh	r3, [r5, #8]
 8016ee8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016eec:	4602      	mov	r2, r0
 8016eee:	9b04      	ldr	r3, [sp, #16]
 8016ef0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016ef4:	a90a      	add	r1, sp, #40	@ 0x28
 8016ef6:	4650      	mov	r0, sl
 8016ef8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016efc:	f002 fcc8 	bl	8019890 <uxr_serialize_HEARTBEAT_Payload>
 8016f00:	2200      	movs	r2, #0
 8016f02:	4611      	mov	r1, r2
 8016f04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016f06:	4640      	mov	r0, r8
 8016f08:	f000 fc84 	bl	8017814 <uxr_stamp_session_header>
 8016f0c:	4650      	mov	r0, sl
 8016f0e:	f7f8 fbbb 	bl	800f688 <ucdr_buffer_length>
 8016f12:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8016f16:	4602      	mov	r2, r0
 8016f18:	a90c      	add	r1, sp, #48	@ 0x30
 8016f1a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016f1e:	4444      	add	r4, r8
 8016f20:	47a8      	blx	r5
 8016f22:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8016f26:	9903      	ldr	r1, [sp, #12]
 8016f28:	455a      	cmp	r2, fp
 8016f2a:	f106 0601 	add.w	r6, r6, #1
 8016f2e:	eb73 0101 	sbcs.w	r1, r3, r1
 8016f32:	b2f0      	uxtb	r0, r6
 8016f34:	db9c      	blt.n	8016e70 <listen_message_reliably+0x48>
 8016f36:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016f3a:	4283      	cmp	r3, r0
 8016f3c:	d89e      	bhi.n	8016e7c <listen_message_reliably+0x54>
 8016f3e:	9a03      	ldr	r2, [sp, #12]
 8016f40:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016f44:	429a      	cmp	r2, r3
 8016f46:	bf08      	it	eq
 8016f48:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 8016f4c:	d01e      	beq.n	8016f8c <listen_message_reliably+0x164>
 8016f4e:	ebab 0309 	sub.w	r3, fp, r9
 8016f52:	9905      	ldr	r1, [sp, #20]
 8016f54:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	bf08      	it	eq
 8016f5c:	2301      	moveq	r3, #1
 8016f5e:	4299      	cmp	r1, r3
 8016f60:	bfa8      	it	ge
 8016f62:	4619      	movge	r1, r3
 8016f64:	6894      	ldr	r4, [r2, #8]
 8016f66:	6810      	ldr	r0, [r2, #0]
 8016f68:	4689      	mov	r9, r1
 8016f6a:	460b      	mov	r3, r1
 8016f6c:	aa08      	add	r2, sp, #32
 8016f6e:	a907      	add	r1, sp, #28
 8016f70:	47a0      	blx	r4
 8016f72:	b968      	cbnz	r0, 8016f90 <listen_message_reliably+0x168>
 8016f74:	9b05      	ldr	r3, [sp, #20]
 8016f76:	eba3 0309 	sub.w	r3, r3, r9
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	9305      	str	r3, [sp, #20]
 8016f7e:	f73f af5c 	bgt.w	8016e3a <listen_message_reliably+0x12>
 8016f82:	4604      	mov	r4, r0
 8016f84:	4620      	mov	r0, r4
 8016f86:	b01d      	add	sp, #116	@ 0x74
 8016f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f8c:	9b05      	ldr	r3, [sp, #20]
 8016f8e:	e7e0      	b.n	8016f52 <listen_message_reliably+0x12a>
 8016f90:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016f94:	4604      	mov	r4, r0
 8016f96:	a80c      	add	r0, sp, #48	@ 0x30
 8016f98:	f7f8 fb4a 	bl	800f630 <ucdr_init_buffer>
 8016f9c:	2500      	movs	r5, #0
 8016f9e:	f10d 031a 	add.w	r3, sp, #26
 8016fa2:	aa06      	add	r2, sp, #24
 8016fa4:	a90c      	add	r1, sp, #48	@ 0x30
 8016fa6:	4640      	mov	r0, r8
 8016fa8:	f88d 5018 	strb.w	r5, [sp, #24]
 8016fac:	f000 fc46 	bl	801783c <uxr_read_session_header>
 8016fb0:	b918      	cbnz	r0, 8016fba <listen_message_reliably+0x192>
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	b01d      	add	sp, #116	@ 0x74
 8016fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fba:	4629      	mov	r1, r5
 8016fbc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016fc0:	f001 f972 	bl	80182a8 <uxr_stream_id_from_raw>
 8016fc4:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8016fc8:	2d01      	cmp	r5, #1
 8016fca:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8016fce:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8016fd2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016fd6:	d04b      	beq.n	8017070 <listen_message_reliably+0x248>
 8016fd8:	2d02      	cmp	r5, #2
 8016fda:	d00f      	beq.n	8016ffc <listen_message_reliably+0x1d4>
 8016fdc:	2d00      	cmp	r5, #0
 8016fde:	d1e8      	bne.n	8016fb2 <listen_message_reliably+0x18a>
 8016fe0:	4629      	mov	r1, r5
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	f001 f960 	bl	80182a8 <uxr_stream_id_from_raw>
 8016fe8:	a90c      	add	r1, sp, #48	@ 0x30
 8016fea:	4602      	mov	r2, r0
 8016fec:	4640      	mov	r0, r8
 8016fee:	920a      	str	r2, [sp, #40]	@ 0x28
 8016ff0:	f7ff fd92 	bl	8016b18 <read_submessage_list>
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	b01d      	add	sp, #116	@ 0x74
 8016ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ffc:	4631      	mov	r1, r6
 8016ffe:	f108 0008 	add.w	r0, r8, #8
 8017002:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8017006:	f001 fa3d 	bl	8018484 <uxr_get_input_reliable_stream>
 801700a:	4607      	mov	r7, r0
 801700c:	b338      	cbz	r0, 801705e <listen_message_reliably+0x236>
 801700e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017010:	9203      	str	r2, [sp, #12]
 8017012:	a80c      	add	r0, sp, #48	@ 0x30
 8017014:	f7f8 fb3c 	bl	800f690 <ucdr_buffer_remaining>
 8017018:	4603      	mov	r3, r0
 801701a:	f10d 0019 	add.w	r0, sp, #25
 801701e:	9000      	str	r0, [sp, #0]
 8017020:	9a03      	ldr	r2, [sp, #12]
 8017022:	4651      	mov	r1, sl
 8017024:	4638      	mov	r0, r7
 8017026:	f004 faf5 	bl	801b614 <uxr_receive_reliable_message>
 801702a:	b1c0      	cbz	r0, 801705e <listen_message_reliably+0x236>
 801702c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017030:	b393      	cbz	r3, 8017098 <listen_message_reliably+0x270>
 8017032:	ad14      	add	r5, sp, #80	@ 0x50
 8017034:	f04f 0a02 	mov.w	sl, #2
 8017038:	e00a      	b.n	8017050 <listen_message_reliably+0x228>
 801703a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801703e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8017042:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8017046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017048:	4629      	mov	r1, r5
 801704a:	4640      	mov	r0, r8
 801704c:	f7ff fd64 	bl	8016b18 <read_submessage_list>
 8017050:	2204      	movs	r2, #4
 8017052:	4629      	mov	r1, r5
 8017054:	4638      	mov	r0, r7
 8017056:	f004 fb5d 	bl	801b714 <uxr_next_input_reliable_buffer_available>
 801705a:	2800      	cmp	r0, #0
 801705c:	d1ed      	bne.n	801703a <listen_message_reliably+0x212>
 801705e:	4640      	mov	r0, r8
 8017060:	4632      	mov	r2, r6
 8017062:	4649      	mov	r1, r9
 8017064:	f7ff fbc2 	bl	80167ec <write_submessage_acknack.isra.0>
 8017068:	4620      	mov	r0, r4
 801706a:	b01d      	add	sp, #116	@ 0x74
 801706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017070:	4631      	mov	r1, r6
 8017072:	f108 0008 	add.w	r0, r8, #8
 8017076:	f001 f9fb 	bl	8018470 <uxr_get_input_best_effort_stream>
 801707a:	2800      	cmp	r0, #0
 801707c:	d099      	beq.n	8016fb2 <listen_message_reliably+0x18a>
 801707e:	4651      	mov	r1, sl
 8017080:	f004 fa34 	bl	801b4ec <uxr_receive_best_effort_message>
 8017084:	2800      	cmp	r0, #0
 8017086:	d094      	beq.n	8016fb2 <listen_message_reliably+0x18a>
 8017088:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801708c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801708e:	a90c      	add	r1, sp, #48	@ 0x30
 8017090:	4640      	mov	r0, r8
 8017092:	f7ff fd41 	bl	8016b18 <read_submessage_list>
 8017096:	e78c      	b.n	8016fb2 <listen_message_reliably+0x18a>
 8017098:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801709c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801709e:	a90c      	add	r1, sp, #48	@ 0x30
 80170a0:	4640      	mov	r0, r8
 80170a2:	f7ff fd39 	bl	8016b18 <read_submessage_list>
 80170a6:	e7c4      	b.n	8017032 <listen_message_reliably+0x20a>

080170a8 <uxr_run_session_timeout>:
 80170a8:	b570      	push	{r4, r5, r6, lr}
 80170aa:	4604      	mov	r4, r0
 80170ac:	460d      	mov	r5, r1
 80170ae:	f001 fa4f 	bl	8018550 <uxr_millis>
 80170b2:	4606      	mov	r6, r0
 80170b4:	4620      	mov	r0, r4
 80170b6:	f7ff fc71 	bl	801699c <uxr_flash_output_streams>
 80170ba:	4629      	mov	r1, r5
 80170bc:	4620      	mov	r0, r4
 80170be:	f7ff feb3 	bl	8016e28 <listen_message_reliably>
 80170c2:	f001 fa45 	bl	8018550 <uxr_millis>
 80170c6:	1b83      	subs	r3, r0, r6
 80170c8:	1ae9      	subs	r1, r5, r3
 80170ca:	2900      	cmp	r1, #0
 80170cc:	dcf6      	bgt.n	80170bc <uxr_run_session_timeout+0x14>
 80170ce:	f104 0008 	add.w	r0, r4, #8
 80170d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170d6:	f001 b9df 	b.w	8018498 <uxr_output_streams_confirmed>
 80170da:	bf00      	nop

080170dc <uxr_run_session_until_data>:
 80170dc:	b570      	push	{r4, r5, r6, lr}
 80170de:	4604      	mov	r4, r0
 80170e0:	460d      	mov	r5, r1
 80170e2:	f001 fa35 	bl	8018550 <uxr_millis>
 80170e6:	4606      	mov	r6, r0
 80170e8:	4620      	mov	r0, r4
 80170ea:	f7ff fc57 	bl	801699c <uxr_flash_output_streams>
 80170ee:	2300      	movs	r3, #0
 80170f0:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80170f4:	4629      	mov	r1, r5
 80170f6:	e005      	b.n	8017104 <uxr_run_session_until_data+0x28>
 80170f8:	f001 fa2a 	bl	8018550 <uxr_millis>
 80170fc:	1b83      	subs	r3, r0, r6
 80170fe:	1ae9      	subs	r1, r5, r3
 8017100:	2900      	cmp	r1, #0
 8017102:	dd07      	ble.n	8017114 <uxr_run_session_until_data+0x38>
 8017104:	4620      	mov	r0, r4
 8017106:	f7ff fe8f 	bl	8016e28 <listen_message_reliably>
 801710a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801710e:	2800      	cmp	r0, #0
 8017110:	d0f2      	beq.n	80170f8 <uxr_run_session_until_data+0x1c>
 8017112:	bd70      	pop	{r4, r5, r6, pc}
 8017114:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8017118:	bd70      	pop	{r4, r5, r6, pc}
 801711a:	bf00      	nop

0801711c <uxr_run_session_until_confirm_delivery>:
 801711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017120:	4606      	mov	r6, r0
 8017122:	460d      	mov	r5, r1
 8017124:	f001 fa14 	bl	8018550 <uxr_millis>
 8017128:	4607      	mov	r7, r0
 801712a:	4630      	mov	r0, r6
 801712c:	f7ff fc36 	bl	801699c <uxr_flash_output_streams>
 8017130:	2d00      	cmp	r5, #0
 8017132:	f106 0808 	add.w	r8, r6, #8
 8017136:	bfa8      	it	ge
 8017138:	462c      	movge	r4, r5
 801713a:	da07      	bge.n	801714c <uxr_run_session_until_confirm_delivery+0x30>
 801713c:	e00e      	b.n	801715c <uxr_run_session_until_confirm_delivery+0x40>
 801713e:	f7ff fe73 	bl	8016e28 <listen_message_reliably>
 8017142:	f001 fa05 	bl	8018550 <uxr_millis>
 8017146:	1bc3      	subs	r3, r0, r7
 8017148:	1aec      	subs	r4, r5, r3
 801714a:	d407      	bmi.n	801715c <uxr_run_session_until_confirm_delivery+0x40>
 801714c:	4640      	mov	r0, r8
 801714e:	f001 f9a3 	bl	8018498 <uxr_output_streams_confirmed>
 8017152:	4603      	mov	r3, r0
 8017154:	4621      	mov	r1, r4
 8017156:	4630      	mov	r0, r6
 8017158:	2b00      	cmp	r3, #0
 801715a:	d0f0      	beq.n	801713e <uxr_run_session_until_confirm_delivery+0x22>
 801715c:	4640      	mov	r0, r8
 801715e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017162:	f001 b999 	b.w	8018498 <uxr_output_streams_confirmed>
 8017166:	bf00      	nop

08017168 <uxr_run_session_until_all_status>:
 8017168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801716c:	9c08      	ldr	r4, [sp, #32]
 801716e:	4606      	mov	r6, r0
 8017170:	460f      	mov	r7, r1
 8017172:	4691      	mov	r9, r2
 8017174:	461d      	mov	r5, r3
 8017176:	f7ff fc11 	bl	801699c <uxr_flash_output_streams>
 801717a:	b124      	cbz	r4, 8017186 <uxr_run_session_until_all_status+0x1e>
 801717c:	4622      	mov	r2, r4
 801717e:	21ff      	movs	r1, #255	@ 0xff
 8017180:	4628      	mov	r0, r5
 8017182:	f006 f993 	bl	801d4ac <memset>
 8017186:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801718a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801718c:	f001 f9e0 	bl	8018550 <uxr_millis>
 8017190:	3d01      	subs	r5, #1
 8017192:	f1a9 0902 	sub.w	r9, r9, #2
 8017196:	4680      	mov	r8, r0
 8017198:	4639      	mov	r1, r7
 801719a:	4630      	mov	r0, r6
 801719c:	f7ff fe44 	bl	8016e28 <listen_message_reliably>
 80171a0:	f001 f9d6 	bl	8018550 <uxr_millis>
 80171a4:	eba0 0008 	sub.w	r0, r0, r8
 80171a8:	1a39      	subs	r1, r7, r0
 80171aa:	b344      	cbz	r4, 80171fe <uxr_run_session_until_all_status+0x96>
 80171ac:	4628      	mov	r0, r5
 80171ae:	46ac      	mov	ip, r5
 80171b0:	2301      	movs	r3, #1
 80171b2:	e002      	b.n	80171ba <uxr_run_session_until_all_status+0x52>
 80171b4:	42a3      	cmp	r3, r4
 80171b6:	d20d      	bcs.n	80171d4 <uxr_run_session_until_all_status+0x6c>
 80171b8:	3301      	adds	r3, #1
 80171ba:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80171be:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80171c2:	d1f7      	bne.n	80171b4 <uxr_run_session_until_all_status+0x4c>
 80171c4:	42a3      	cmp	r3, r4
 80171c6:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80171ca:	d213      	bcs.n	80171f4 <uxr_run_session_until_all_status+0x8c>
 80171cc:	2a00      	cmp	r2, #0
 80171ce:	d0f3      	beq.n	80171b8 <uxr_run_session_until_all_status+0x50>
 80171d0:	2900      	cmp	r1, #0
 80171d2:	dce2      	bgt.n	801719a <uxr_run_session_until_all_status+0x32>
 80171d4:	2300      	movs	r3, #0
 80171d6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80171d8:	442c      	add	r4, r5
 80171da:	e001      	b.n	80171e0 <uxr_run_session_until_all_status+0x78>
 80171dc:	2b01      	cmp	r3, #1
 80171de:	d812      	bhi.n	8017206 <uxr_run_session_until_all_status+0x9e>
 80171e0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80171e4:	4284      	cmp	r4, r0
 80171e6:	d1f9      	bne.n	80171dc <uxr_run_session_until_all_status+0x74>
 80171e8:	2b01      	cmp	r3, #1
 80171ea:	bf8c      	ite	hi
 80171ec:	2000      	movhi	r0, #0
 80171ee:	2001      	movls	r0, #1
 80171f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171f4:	2900      	cmp	r1, #0
 80171f6:	dded      	ble.n	80171d4 <uxr_run_session_until_all_status+0x6c>
 80171f8:	2a00      	cmp	r2, #0
 80171fa:	d1ce      	bne.n	801719a <uxr_run_session_until_all_status+0x32>
 80171fc:	e7ea      	b.n	80171d4 <uxr_run_session_until_all_status+0x6c>
 80171fe:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8017200:	2001      	movs	r0, #1
 8017202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017206:	2000      	movs	r0, #0
 8017208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801720c:	0000      	movs	r0, r0
	...

08017210 <uxr_sync_session>:
 8017210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017212:	b093      	sub	sp, #76	@ 0x4c
 8017214:	4604      	mov	r4, r0
 8017216:	460d      	mov	r5, r1
 8017218:	f000 fb52 	bl	80178c0 <uxr_session_header_offset>
 801721c:	2214      	movs	r2, #20
 801721e:	eb0d 0102 	add.w	r1, sp, r2
 8017222:	9000      	str	r0, [sp, #0]
 8017224:	2300      	movs	r3, #0
 8017226:	a80a      	add	r0, sp, #40	@ 0x28
 8017228:	f7f8 f9f0 	bl	800f60c <ucdr_init_buffer_origin_offset>
 801722c:	2300      	movs	r3, #0
 801722e:	2208      	movs	r2, #8
 8017230:	210e      	movs	r1, #14
 8017232:	a80a      	add	r0, sp, #40	@ 0x28
 8017234:	f001 f946 	bl	80184c4 <uxr_buffer_submessage_header>
 8017238:	f001 f9a4 	bl	8018584 <uxr_nanos>
 801723c:	a31c      	add	r3, pc, #112	@ (adr r3, 80172b0 <uxr_sync_session+0xa0>)
 801723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017242:	460e      	mov	r6, r1
 8017244:	4607      	mov	r7, r0
 8017246:	f7e9 fd0f 	bl	8000c68 <__aeabi_ldivmod>
 801724a:	4631      	mov	r1, r6
 801724c:	9003      	str	r0, [sp, #12]
 801724e:	a318      	add	r3, pc, #96	@ (adr r3, 80172b0 <uxr_sync_session+0xa0>)
 8017250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017254:	4638      	mov	r0, r7
 8017256:	f7e9 fd07 	bl	8000c68 <__aeabi_ldivmod>
 801725a:	a903      	add	r1, sp, #12
 801725c:	a80a      	add	r0, sp, #40	@ 0x28
 801725e:	9204      	str	r2, [sp, #16]
 8017260:	f002 fb3c 	bl	80198dc <uxr_serialize_TIMESTAMP_Payload>
 8017264:	2200      	movs	r2, #0
 8017266:	4611      	mov	r1, r2
 8017268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801726a:	4620      	mov	r0, r4
 801726c:	f000 fad2 	bl	8017814 <uxr_stamp_session_header>
 8017270:	a80a      	add	r0, sp, #40	@ 0x28
 8017272:	f7f8 fa09 	bl	800f688 <ucdr_buffer_length>
 8017276:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017278:	4602      	mov	r2, r0
 801727a:	a905      	add	r1, sp, #20
 801727c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8017280:	47b0      	blx	r6
 8017282:	f001 f965 	bl	8018550 <uxr_millis>
 8017286:	2300      	movs	r3, #0
 8017288:	4606      	mov	r6, r0
 801728a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801728e:	4629      	mov	r1, r5
 8017290:	e000      	b.n	8017294 <uxr_sync_session+0x84>
 8017292:	b950      	cbnz	r0, 80172aa <uxr_sync_session+0x9a>
 8017294:	4620      	mov	r0, r4
 8017296:	f7ff fdc7 	bl	8016e28 <listen_message_reliably>
 801729a:	f001 f959 	bl	8018550 <uxr_millis>
 801729e:	1b83      	subs	r3, r0, r6
 80172a0:	1ae9      	subs	r1, r5, r3
 80172a2:	2900      	cmp	r1, #0
 80172a4:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80172a8:	dcf3      	bgt.n	8017292 <uxr_sync_session+0x82>
 80172aa:	b013      	add	sp, #76	@ 0x4c
 80172ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172ae:	bf00      	nop
 80172b0:	3b9aca00 	.word	0x3b9aca00
 80172b4:	00000000 	.word	0x00000000

080172b8 <wait_session_status>:
 80172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172bc:	4604      	mov	r4, r0
 80172be:	b09d      	sub	sp, #116	@ 0x74
 80172c0:	20ff      	movs	r0, #255	@ 0xff
 80172c2:	7160      	strb	r0, [r4, #5]
 80172c4:	9303      	str	r3, [sp, #12]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	f000 80b6 	beq.w	8017438 <wait_session_status+0x180>
 80172cc:	468a      	mov	sl, r1
 80172ce:	4691      	mov	r9, r2
 80172d0:	f04f 0b00 	mov.w	fp, #0
 80172d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80172d6:	464a      	mov	r2, r9
 80172d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80172dc:	4651      	mov	r1, sl
 80172de:	47a8      	blx	r5
 80172e0:	f001 f936 	bl	8018550 <uxr_millis>
 80172e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80172e8:	4605      	mov	r5, r0
 80172ea:	e009      	b.n	8017300 <wait_session_status+0x48>
 80172ec:	f001 f930 	bl	8018550 <uxr_millis>
 80172f0:	1b40      	subs	r0, r0, r5
 80172f2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	dd40      	ble.n	801737c <wait_session_status+0xc4>
 80172fa:	7960      	ldrb	r0, [r4, #5]
 80172fc:	28ff      	cmp	r0, #255	@ 0xff
 80172fe:	d145      	bne.n	801738c <wait_session_status+0xd4>
 8017300:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8017302:	a908      	add	r1, sp, #32
 8017304:	6896      	ldr	r6, [r2, #8]
 8017306:	6810      	ldr	r0, [r2, #0]
 8017308:	aa09      	add	r2, sp, #36	@ 0x24
 801730a:	47b0      	blx	r6
 801730c:	2800      	cmp	r0, #0
 801730e:	d0ed      	beq.n	80172ec <wait_session_status+0x34>
 8017310:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8017314:	a80c      	add	r0, sp, #48	@ 0x30
 8017316:	f7f8 f98b 	bl	800f630 <ucdr_init_buffer>
 801731a:	2600      	movs	r6, #0
 801731c:	f10d 031e 	add.w	r3, sp, #30
 8017320:	aa07      	add	r2, sp, #28
 8017322:	a90c      	add	r1, sp, #48	@ 0x30
 8017324:	4620      	mov	r0, r4
 8017326:	f88d 601c 	strb.w	r6, [sp, #28]
 801732a:	f000 fa87 	bl	801783c <uxr_read_session_header>
 801732e:	2800      	cmp	r0, #0
 8017330:	d0dc      	beq.n	80172ec <wait_session_status+0x34>
 8017332:	4631      	mov	r1, r6
 8017334:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017338:	f000 ffb6 	bl	80182a8 <uxr_stream_id_from_raw>
 801733c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017340:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017344:	9302      	str	r3, [sp, #8]
 8017346:	2f01      	cmp	r7, #1
 8017348:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801734c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8017350:	d05c      	beq.n	801740c <wait_session_status+0x154>
 8017352:	2f02      	cmp	r7, #2
 8017354:	d020      	beq.n	8017398 <wait_session_status+0xe0>
 8017356:	2f00      	cmp	r7, #0
 8017358:	d1c8      	bne.n	80172ec <wait_session_status+0x34>
 801735a:	4639      	mov	r1, r7
 801735c:	4638      	mov	r0, r7
 801735e:	f000 ffa3 	bl	80182a8 <uxr_stream_id_from_raw>
 8017362:	a90c      	add	r1, sp, #48	@ 0x30
 8017364:	4602      	mov	r2, r0
 8017366:	900b      	str	r0, [sp, #44]	@ 0x2c
 8017368:	4620      	mov	r0, r4
 801736a:	f7ff fbd5 	bl	8016b18 <read_submessage_list>
 801736e:	f001 f8ef 	bl	8018550 <uxr_millis>
 8017372:	1b40      	subs	r0, r0, r5
 8017374:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8017378:	2b00      	cmp	r3, #0
 801737a:	dcbe      	bgt.n	80172fa <wait_session_status+0x42>
 801737c:	9b03      	ldr	r3, [sp, #12]
 801737e:	7960      	ldrb	r0, [r4, #5]
 8017380:	f10b 0b01 	add.w	fp, fp, #1
 8017384:	455b      	cmp	r3, fp
 8017386:	d001      	beq.n	801738c <wait_session_status+0xd4>
 8017388:	28ff      	cmp	r0, #255	@ 0xff
 801738a:	d0a3      	beq.n	80172d4 <wait_session_status+0x1c>
 801738c:	38ff      	subs	r0, #255	@ 0xff
 801738e:	bf18      	it	ne
 8017390:	2001      	movne	r0, #1
 8017392:	b01d      	add	sp, #116	@ 0x74
 8017394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017398:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801739c:	9304      	str	r3, [sp, #16]
 801739e:	4631      	mov	r1, r6
 80173a0:	f104 0008 	add.w	r0, r4, #8
 80173a4:	f001 f86e 	bl	8018484 <uxr_get_input_reliable_stream>
 80173a8:	4680      	mov	r8, r0
 80173aa:	b348      	cbz	r0, 8017400 <wait_session_status+0x148>
 80173ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80173ae:	9205      	str	r2, [sp, #20]
 80173b0:	a80c      	add	r0, sp, #48	@ 0x30
 80173b2:	f7f8 f96d 	bl	800f690 <ucdr_buffer_remaining>
 80173b6:	4603      	mov	r3, r0
 80173b8:	f10d 001d 	add.w	r0, sp, #29
 80173bc:	9000      	str	r0, [sp, #0]
 80173be:	9a05      	ldr	r2, [sp, #20]
 80173c0:	9902      	ldr	r1, [sp, #8]
 80173c2:	4640      	mov	r0, r8
 80173c4:	f004 f926 	bl	801b614 <uxr_receive_reliable_message>
 80173c8:	b1d0      	cbz	r0, 8017400 <wait_session_status+0x148>
 80173ca:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d03a      	beq.n	8017448 <wait_session_status+0x190>
 80173d2:	9f04      	ldr	r7, [sp, #16]
 80173d4:	e00a      	b.n	80173ec <wait_session_status+0x134>
 80173d6:	f04f 0302 	mov.w	r3, #2
 80173da:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80173de:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80173e2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80173e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80173e8:	f7ff fb96 	bl	8016b18 <read_submessage_list>
 80173ec:	a914      	add	r1, sp, #80	@ 0x50
 80173ee:	2204      	movs	r2, #4
 80173f0:	4640      	mov	r0, r8
 80173f2:	f004 f98f 	bl	801b714 <uxr_next_input_reliable_buffer_available>
 80173f6:	4603      	mov	r3, r0
 80173f8:	a914      	add	r1, sp, #80	@ 0x50
 80173fa:	4620      	mov	r0, r4
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d1ea      	bne.n	80173d6 <wait_session_status+0x11e>
 8017400:	9904      	ldr	r1, [sp, #16]
 8017402:	4632      	mov	r2, r6
 8017404:	4620      	mov	r0, r4
 8017406:	f7ff f9f1 	bl	80167ec <write_submessage_acknack.isra.0>
 801740a:	e76f      	b.n	80172ec <wait_session_status+0x34>
 801740c:	4631      	mov	r1, r6
 801740e:	f104 0008 	add.w	r0, r4, #8
 8017412:	f001 f82d 	bl	8018470 <uxr_get_input_best_effort_stream>
 8017416:	2800      	cmp	r0, #0
 8017418:	f43f af68 	beq.w	80172ec <wait_session_status+0x34>
 801741c:	9902      	ldr	r1, [sp, #8]
 801741e:	f004 f865 	bl	801b4ec <uxr_receive_best_effort_message>
 8017422:	2800      	cmp	r0, #0
 8017424:	f43f af62 	beq.w	80172ec <wait_session_status+0x34>
 8017428:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801742c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801742e:	a90c      	add	r1, sp, #48	@ 0x30
 8017430:	4620      	mov	r0, r4
 8017432:	f7ff fb71 	bl	8016b18 <read_submessage_list>
 8017436:	e759      	b.n	80172ec <wait_session_status+0x34>
 8017438:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801743a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801743e:	47a0      	blx	r4
 8017440:	2001      	movs	r0, #1
 8017442:	b01d      	add	sp, #116	@ 0x74
 8017444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017448:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801744c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801744e:	a90c      	add	r1, sp, #48	@ 0x30
 8017450:	4620      	mov	r0, r4
 8017452:	f7ff fb61 	bl	8016b18 <read_submessage_list>
 8017456:	e7bc      	b.n	80173d2 <wait_session_status+0x11a>

08017458 <uxr_delete_session_retries>:
 8017458:	b530      	push	{r4, r5, lr}
 801745a:	b08f      	sub	sp, #60	@ 0x3c
 801745c:	4604      	mov	r4, r0
 801745e:	460d      	mov	r5, r1
 8017460:	f000 fa2e 	bl	80178c0 <uxr_session_header_offset>
 8017464:	2300      	movs	r3, #0
 8017466:	2210      	movs	r2, #16
 8017468:	9000      	str	r0, [sp, #0]
 801746a:	a902      	add	r1, sp, #8
 801746c:	a806      	add	r0, sp, #24
 801746e:	f7f8 f8cd 	bl	800f60c <ucdr_init_buffer_origin_offset>
 8017472:	a906      	add	r1, sp, #24
 8017474:	4620      	mov	r0, r4
 8017476:	f000 f973 	bl	8017760 <uxr_buffer_delete_session>
 801747a:	2200      	movs	r2, #0
 801747c:	4611      	mov	r1, r2
 801747e:	9b06      	ldr	r3, [sp, #24]
 8017480:	4620      	mov	r0, r4
 8017482:	f000 f9c7 	bl	8017814 <uxr_stamp_session_header>
 8017486:	a806      	add	r0, sp, #24
 8017488:	f7f8 f8fe 	bl	800f688 <ucdr_buffer_length>
 801748c:	462b      	mov	r3, r5
 801748e:	4602      	mov	r2, r0
 8017490:	a902      	add	r1, sp, #8
 8017492:	4620      	mov	r0, r4
 8017494:	f7ff ff10 	bl	80172b8 <wait_session_status>
 8017498:	b118      	cbz	r0, 80174a2 <uxr_delete_session_retries+0x4a>
 801749a:	7960      	ldrb	r0, [r4, #5]
 801749c:	fab0 f080 	clz	r0, r0
 80174a0:	0940      	lsrs	r0, r0, #5
 80174a2:	b00f      	add	sp, #60	@ 0x3c
 80174a4:	bd30      	pop	{r4, r5, pc}
 80174a6:	bf00      	nop

080174a8 <uxr_create_session>:
 80174a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ac:	f100 0b08 	add.w	fp, r0, #8
 80174b0:	b0ab      	sub	sp, #172	@ 0xac
 80174b2:	4604      	mov	r4, r0
 80174b4:	4658      	mov	r0, fp
 80174b6:	f000 ff2b 	bl	8018310 <uxr_reset_stream_storage>
 80174ba:	4620      	mov	r0, r4
 80174bc:	f000 fa00 	bl	80178c0 <uxr_session_header_offset>
 80174c0:	2300      	movs	r3, #0
 80174c2:	9000      	str	r0, [sp, #0]
 80174c4:	221c      	movs	r2, #28
 80174c6:	a90b      	add	r1, sp, #44	@ 0x2c
 80174c8:	a812      	add	r0, sp, #72	@ 0x48
 80174ca:	f7f8 f89f 	bl	800f60c <ucdr_init_buffer_origin_offset>
 80174ce:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80174d0:	8a1a      	ldrh	r2, [r3, #16]
 80174d2:	3a04      	subs	r2, #4
 80174d4:	b292      	uxth	r2, r2
 80174d6:	a912      	add	r1, sp, #72	@ 0x48
 80174d8:	4620      	mov	r0, r4
 80174da:	f000 f917 	bl	801770c <uxr_buffer_create_session>
 80174de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80174e0:	4620      	mov	r0, r4
 80174e2:	f000 f983 	bl	80177ec <uxr_stamp_create_session_header>
 80174e6:	a812      	add	r0, sp, #72	@ 0x48
 80174e8:	f7f8 f8ce 	bl	800f688 <ucdr_buffer_length>
 80174ec:	23ff      	movs	r3, #255	@ 0xff
 80174ee:	7163      	strb	r3, [r4, #5]
 80174f0:	230a      	movs	r3, #10
 80174f2:	46da      	mov	sl, fp
 80174f4:	9303      	str	r3, [sp, #12]
 80174f6:	4683      	mov	fp, r0
 80174f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80174fa:	465a      	mov	r2, fp
 80174fc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017500:	a90b      	add	r1, sp, #44	@ 0x2c
 8017502:	47a8      	blx	r5
 8017504:	f001 f824 	bl	8018550 <uxr_millis>
 8017508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801750c:	4605      	mov	r5, r0
 801750e:	e009      	b.n	8017524 <uxr_create_session+0x7c>
 8017510:	f001 f81e 	bl	8018550 <uxr_millis>
 8017514:	1b40      	subs	r0, r0, r5
 8017516:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801751a:	2b00      	cmp	r3, #0
 801751c:	7962      	ldrb	r2, [r4, #5]
 801751e:	dd38      	ble.n	8017592 <uxr_create_session+0xea>
 8017520:	2aff      	cmp	r2, #255	@ 0xff
 8017522:	d13c      	bne.n	801759e <uxr_create_session+0xf6>
 8017524:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8017526:	a907      	add	r1, sp, #28
 8017528:	6896      	ldr	r6, [r2, #8]
 801752a:	6810      	ldr	r0, [r2, #0]
 801752c:	aa08      	add	r2, sp, #32
 801752e:	47b0      	blx	r6
 8017530:	2800      	cmp	r0, #0
 8017532:	d0ed      	beq.n	8017510 <uxr_create_session+0x68>
 8017534:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017538:	a81a      	add	r0, sp, #104	@ 0x68
 801753a:	f7f8 f879 	bl	800f630 <ucdr_init_buffer>
 801753e:	2600      	movs	r6, #0
 8017540:	f10d 031a 	add.w	r3, sp, #26
 8017544:	aa06      	add	r2, sp, #24
 8017546:	a91a      	add	r1, sp, #104	@ 0x68
 8017548:	4620      	mov	r0, r4
 801754a:	f88d 6018 	strb.w	r6, [sp, #24]
 801754e:	f000 f975 	bl	801783c <uxr_read_session_header>
 8017552:	2800      	cmp	r0, #0
 8017554:	d0dc      	beq.n	8017510 <uxr_create_session+0x68>
 8017556:	4631      	mov	r1, r6
 8017558:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801755c:	f000 fea4 	bl	80182a8 <uxr_stream_id_from_raw>
 8017560:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017564:	2e01      	cmp	r6, #1
 8017566:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801756a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801756e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8017572:	d053      	beq.n	801761c <uxr_create_session+0x174>
 8017574:	2e02      	cmp	r6, #2
 8017576:	d018      	beq.n	80175aa <uxr_create_session+0x102>
 8017578:	2e00      	cmp	r6, #0
 801757a:	d1c9      	bne.n	8017510 <uxr_create_session+0x68>
 801757c:	4631      	mov	r1, r6
 801757e:	4630      	mov	r0, r6
 8017580:	f000 fe92 	bl	80182a8 <uxr_stream_id_from_raw>
 8017584:	a91a      	add	r1, sp, #104	@ 0x68
 8017586:	4602      	mov	r2, r0
 8017588:	900a      	str	r0, [sp, #40]	@ 0x28
 801758a:	4620      	mov	r0, r4
 801758c:	f7ff fac4 	bl	8016b18 <read_submessage_list>
 8017590:	e7be      	b.n	8017510 <uxr_create_session+0x68>
 8017592:	9b03      	ldr	r3, [sp, #12]
 8017594:	3b01      	subs	r3, #1
 8017596:	9303      	str	r3, [sp, #12]
 8017598:	d001      	beq.n	801759e <uxr_create_session+0xf6>
 801759a:	2aff      	cmp	r2, #255	@ 0xff
 801759c:	d0ac      	beq.n	80174f8 <uxr_create_session+0x50>
 801759e:	2a00      	cmp	r2, #0
 80175a0:	d051      	beq.n	8017646 <uxr_create_session+0x19e>
 80175a2:	2000      	movs	r0, #0
 80175a4:	b02b      	add	sp, #172	@ 0xac
 80175a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175aa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80175ae:	9304      	str	r3, [sp, #16]
 80175b0:	4639      	mov	r1, r7
 80175b2:	4650      	mov	r0, sl
 80175b4:	f000 ff66 	bl	8018484 <uxr_get_input_reliable_stream>
 80175b8:	4680      	mov	r8, r0
 80175ba:	b348      	cbz	r0, 8017610 <uxr_create_session+0x168>
 80175bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80175be:	9205      	str	r2, [sp, #20]
 80175c0:	a81a      	add	r0, sp, #104	@ 0x68
 80175c2:	f7f8 f865 	bl	800f690 <ucdr_buffer_remaining>
 80175c6:	4603      	mov	r3, r0
 80175c8:	f10d 0019 	add.w	r0, sp, #25
 80175cc:	9000      	str	r0, [sp, #0]
 80175ce:	9a05      	ldr	r2, [sp, #20]
 80175d0:	4649      	mov	r1, r9
 80175d2:	4640      	mov	r0, r8
 80175d4:	f004 f81e 	bl	801b614 <uxr_receive_reliable_message>
 80175d8:	b1d0      	cbz	r0, 8017610 <uxr_create_session+0x168>
 80175da:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d038      	beq.n	8017654 <uxr_create_session+0x1ac>
 80175e2:	9e04      	ldr	r6, [sp, #16]
 80175e4:	e00a      	b.n	80175fc <uxr_create_session+0x154>
 80175e6:	f04f 0302 	mov.w	r3, #2
 80175ea:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80175ee:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80175f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80175f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80175f8:	f7ff fa8e 	bl	8016b18 <read_submessage_list>
 80175fc:	a922      	add	r1, sp, #136	@ 0x88
 80175fe:	2204      	movs	r2, #4
 8017600:	4640      	mov	r0, r8
 8017602:	f004 f887 	bl	801b714 <uxr_next_input_reliable_buffer_available>
 8017606:	4603      	mov	r3, r0
 8017608:	a922      	add	r1, sp, #136	@ 0x88
 801760a:	4620      	mov	r0, r4
 801760c:	2b00      	cmp	r3, #0
 801760e:	d1ea      	bne.n	80175e6 <uxr_create_session+0x13e>
 8017610:	9904      	ldr	r1, [sp, #16]
 8017612:	463a      	mov	r2, r7
 8017614:	4620      	mov	r0, r4
 8017616:	f7ff f8e9 	bl	80167ec <write_submessage_acknack.isra.0>
 801761a:	e779      	b.n	8017510 <uxr_create_session+0x68>
 801761c:	4639      	mov	r1, r7
 801761e:	4650      	mov	r0, sl
 8017620:	f000 ff26 	bl	8018470 <uxr_get_input_best_effort_stream>
 8017624:	2800      	cmp	r0, #0
 8017626:	f43f af73 	beq.w	8017510 <uxr_create_session+0x68>
 801762a:	4649      	mov	r1, r9
 801762c:	f003 ff5e 	bl	801b4ec <uxr_receive_best_effort_message>
 8017630:	2800      	cmp	r0, #0
 8017632:	f43f af6d 	beq.w	8017510 <uxr_create_session+0x68>
 8017636:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801763a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801763c:	a91a      	add	r1, sp, #104	@ 0x68
 801763e:	4620      	mov	r0, r4
 8017640:	f7ff fa6a 	bl	8016b18 <read_submessage_list>
 8017644:	e764      	b.n	8017510 <uxr_create_session+0x68>
 8017646:	4650      	mov	r0, sl
 8017648:	f000 fe62 	bl	8018310 <uxr_reset_stream_storage>
 801764c:	2001      	movs	r0, #1
 801764e:	b02b      	add	sp, #172	@ 0xac
 8017650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017654:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017658:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801765a:	a91a      	add	r1, sp, #104	@ 0x68
 801765c:	4620      	mov	r0, r4
 801765e:	f7ff fa5b 	bl	8016b18 <read_submessage_list>
 8017662:	e7be      	b.n	80175e2 <uxr_create_session+0x13a>

08017664 <uxr_prepare_stream_to_write_submessage>:
 8017664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017668:	b082      	sub	sp, #8
 801766a:	4682      	mov	sl, r0
 801766c:	4610      	mov	r0, r2
 801766e:	4615      	mov	r5, r2
 8017670:	461e      	mov	r6, r3
 8017672:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8017676:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801767a:	9101      	str	r1, [sp, #4]
 801767c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8017680:	f000 ff60 	bl	8018544 <uxr_submessage_padding>
 8017684:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017688:	f105 0904 	add.w	r9, r5, #4
 801768c:	2b01      	cmp	r3, #1
 801768e:	4481      	add	r9, r0
 8017690:	d01d      	beq.n	80176ce <uxr_prepare_stream_to_write_submessage+0x6a>
 8017692:	2b02      	cmp	r3, #2
 8017694:	d116      	bne.n	80176c4 <uxr_prepare_stream_to_write_submessage+0x60>
 8017696:	4621      	mov	r1, r4
 8017698:	f10a 0008 	add.w	r0, sl, #8
 801769c:	f000 fede 	bl	801845c <uxr_get_output_reliable_stream>
 80176a0:	4604      	mov	r4, r0
 80176a2:	b158      	cbz	r0, 80176bc <uxr_prepare_stream_to_write_submessage+0x58>
 80176a4:	4649      	mov	r1, r9
 80176a6:	4632      	mov	r2, r6
 80176a8:	f004 f9f0 	bl	801ba8c <uxr_prepare_reliable_buffer_to_write>
 80176ac:	4604      	mov	r4, r0
 80176ae:	b12c      	cbz	r4, 80176bc <uxr_prepare_stream_to_write_submessage+0x58>
 80176b0:	4643      	mov	r3, r8
 80176b2:	b2aa      	uxth	r2, r5
 80176b4:	4639      	mov	r1, r7
 80176b6:	4630      	mov	r0, r6
 80176b8:	f000 ff04 	bl	80184c4 <uxr_buffer_submessage_header>
 80176bc:	4620      	mov	r0, r4
 80176be:	b002      	add	sp, #8
 80176c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176c4:	2400      	movs	r4, #0
 80176c6:	4620      	mov	r0, r4
 80176c8:	b002      	add	sp, #8
 80176ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176ce:	4621      	mov	r1, r4
 80176d0:	f10a 0008 	add.w	r0, sl, #8
 80176d4:	f000 feba 	bl	801844c <uxr_get_output_best_effort_stream>
 80176d8:	4604      	mov	r4, r0
 80176da:	2800      	cmp	r0, #0
 80176dc:	d0ee      	beq.n	80176bc <uxr_prepare_stream_to_write_submessage+0x58>
 80176de:	4649      	mov	r1, r9
 80176e0:	4632      	mov	r2, r6
 80176e2:	f004 f903 	bl	801b8ec <uxr_prepare_best_effort_buffer_to_write>
 80176e6:	4604      	mov	r4, r0
 80176e8:	e7e1      	b.n	80176ae <uxr_prepare_stream_to_write_submessage+0x4a>
 80176ea:	bf00      	nop

080176ec <uxr_init_session_info>:
 80176ec:	0e13      	lsrs	r3, r2, #24
 80176ee:	7043      	strb	r3, [r0, #1]
 80176f0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80176f4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80176f8:	7001      	strb	r1, [r0, #0]
 80176fa:	70c3      	strb	r3, [r0, #3]
 80176fc:	2109      	movs	r1, #9
 80176fe:	23ff      	movs	r3, #255	@ 0xff
 8017700:	f880 c002 	strb.w	ip, [r0, #2]
 8017704:	7102      	strb	r2, [r0, #4]
 8017706:	80c1      	strh	r1, [r0, #6]
 8017708:	7143      	strb	r3, [r0, #5]
 801770a:	4770      	bx	lr

0801770c <uxr_buffer_create_session>:
 801770c:	b530      	push	{r4, r5, lr}
 801770e:	b089      	sub	sp, #36	@ 0x24
 8017710:	2300      	movs	r3, #0
 8017712:	4d12      	ldr	r5, [pc, #72]	@ (801775c <uxr_buffer_create_session+0x50>)
 8017714:	9307      	str	r3, [sp, #28]
 8017716:	f8ad 201c 	strh.w	r2, [sp, #28]
 801771a:	2201      	movs	r2, #1
 801771c:	9301      	str	r3, [sp, #4]
 801771e:	80c2      	strh	r2, [r0, #6]
 8017720:	f88d 2004 	strb.w	r2, [sp, #4]
 8017724:	682a      	ldr	r2, [r5, #0]
 8017726:	9200      	str	r2, [sp, #0]
 8017728:	88aa      	ldrh	r2, [r5, #4]
 801772a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801772e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8017732:	9202      	str	r2, [sp, #8]
 8017734:	460c      	mov	r4, r1
 8017736:	7802      	ldrb	r2, [r0, #0]
 8017738:	9303      	str	r3, [sp, #12]
 801773a:	4619      	mov	r1, r3
 801773c:	f88d 200c 	strb.w	r2, [sp, #12]
 8017740:	4620      	mov	r0, r4
 8017742:	2210      	movs	r2, #16
 8017744:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017748:	9306      	str	r3, [sp, #24]
 801774a:	f000 febb 	bl	80184c4 <uxr_buffer_submessage_header>
 801774e:	4669      	mov	r1, sp
 8017750:	4620      	mov	r0, r4
 8017752:	f001 feff 	bl	8019554 <uxr_serialize_CREATE_CLIENT_Payload>
 8017756:	b009      	add	sp, #36	@ 0x24
 8017758:	bd30      	pop	{r4, r5, pc}
 801775a:	bf00      	nop
 801775c:	080221e8 	.word	0x080221e8

08017760 <uxr_buffer_delete_session>:
 8017760:	b510      	push	{r4, lr}
 8017762:	4b0c      	ldr	r3, [pc, #48]	@ (8017794 <uxr_buffer_delete_session+0x34>)
 8017764:	b082      	sub	sp, #8
 8017766:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801776a:	f8ad c006 	strh.w	ip, [sp, #6]
 801776e:	460c      	mov	r4, r1
 8017770:	2202      	movs	r2, #2
 8017772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017776:	80c2      	strh	r2, [r0, #6]
 8017778:	f8ad 3004 	strh.w	r3, [sp, #4]
 801777c:	2204      	movs	r2, #4
 801777e:	2300      	movs	r3, #0
 8017780:	2103      	movs	r1, #3
 8017782:	4620      	mov	r0, r4
 8017784:	f000 fe9e 	bl	80184c4 <uxr_buffer_submessage_header>
 8017788:	a901      	add	r1, sp, #4
 801778a:	4620      	mov	r0, r4
 801778c:	f001 ff88 	bl	80196a0 <uxr_serialize_DELETE_Payload>
 8017790:	b002      	add	sp, #8
 8017792:	bd10      	pop	{r4, pc}
 8017794:	080221e8 	.word	0x080221e8

08017798 <uxr_read_create_session_status>:
 8017798:	b510      	push	{r4, lr}
 801779a:	b088      	sub	sp, #32
 801779c:	4604      	mov	r4, r0
 801779e:	4608      	mov	r0, r1
 80177a0:	a901      	add	r1, sp, #4
 80177a2:	f001 ff8d 	bl	80196c0 <uxr_deserialize_STATUS_AGENT_Payload>
 80177a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80177aa:	7163      	strb	r3, [r4, #5]
 80177ac:	b008      	add	sp, #32
 80177ae:	bd10      	pop	{r4, pc}

080177b0 <uxr_read_delete_session_status>:
 80177b0:	b510      	push	{r4, lr}
 80177b2:	4604      	mov	r4, r0
 80177b4:	b084      	sub	sp, #16
 80177b6:	4608      	mov	r0, r1
 80177b8:	a902      	add	r1, sp, #8
 80177ba:	f001 ffb1 	bl	8019720 <uxr_deserialize_STATUS_Payload>
 80177be:	88e3      	ldrh	r3, [r4, #6]
 80177c0:	2b02      	cmp	r3, #2
 80177c2:	d001      	beq.n	80177c8 <uxr_read_delete_session_status+0x18>
 80177c4:	b004      	add	sp, #16
 80177c6:	bd10      	pop	{r4, pc}
 80177c8:	f10d 000a 	add.w	r0, sp, #10
 80177cc:	f7fe fe64 	bl	8016498 <uxr_object_id_from_raw>
 80177d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80177d4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80177d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80177dc:	b29b      	uxth	r3, r3
 80177de:	2b02      	cmp	r3, #2
 80177e0:	bf04      	itt	eq
 80177e2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80177e6:	7163      	strbeq	r3, [r4, #5]
 80177e8:	b004      	add	sp, #16
 80177ea:	bd10      	pop	{r4, pc}

080177ec <uxr_stamp_create_session_header>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	2208      	movs	r2, #8
 80177f0:	b08a      	sub	sp, #40	@ 0x28
 80177f2:	4604      	mov	r4, r0
 80177f4:	eb0d 0002 	add.w	r0, sp, r2
 80177f8:	f7f7 ff1a 	bl	800f630 <ucdr_init_buffer>
 80177fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017800:	9400      	str	r4, [sp, #0]
 8017802:	2300      	movs	r3, #0
 8017804:	461a      	mov	r2, r3
 8017806:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801780a:	a802      	add	r0, sp, #8
 801780c:	f001 f854 	bl	80188b8 <uxr_serialize_message_header>
 8017810:	b00a      	add	sp, #40	@ 0x28
 8017812:	bd10      	pop	{r4, pc}

08017814 <uxr_stamp_session_header>:
 8017814:	b530      	push	{r4, r5, lr}
 8017816:	b08d      	sub	sp, #52	@ 0x34
 8017818:	4604      	mov	r4, r0
 801781a:	460d      	mov	r5, r1
 801781c:	9203      	str	r2, [sp, #12]
 801781e:	4619      	mov	r1, r3
 8017820:	a804      	add	r0, sp, #16
 8017822:	2208      	movs	r2, #8
 8017824:	f7f7 ff04 	bl	800f630 <ucdr_init_buffer>
 8017828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801782c:	9b03      	ldr	r3, [sp, #12]
 801782e:	9400      	str	r4, [sp, #0]
 8017830:	462a      	mov	r2, r5
 8017832:	a804      	add	r0, sp, #16
 8017834:	f001 f840 	bl	80188b8 <uxr_serialize_message_header>
 8017838:	b00d      	add	sp, #52	@ 0x34
 801783a:	bd30      	pop	{r4, r5, pc}

0801783c <uxr_read_session_header>:
 801783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017840:	4607      	mov	r7, r0
 8017842:	b084      	sub	sp, #16
 8017844:	4608      	mov	r0, r1
 8017846:	460c      	mov	r4, r1
 8017848:	4615      	mov	r5, r2
 801784a:	461e      	mov	r6, r3
 801784c:	f7f7 ff20 	bl	800f690 <ucdr_buffer_remaining>
 8017850:	2808      	cmp	r0, #8
 8017852:	d803      	bhi.n	801785c <uxr_read_session_header+0x20>
 8017854:	2000      	movs	r0, #0
 8017856:	b004      	add	sp, #16
 8017858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801785c:	f10d 080c 	add.w	r8, sp, #12
 8017860:	4633      	mov	r3, r6
 8017862:	462a      	mov	r2, r5
 8017864:	f8cd 8000 	str.w	r8, [sp]
 8017868:	4620      	mov	r0, r4
 801786a:	f10d 010b 	add.w	r1, sp, #11
 801786e:	f001 f841 	bl	80188f4 <uxr_deserialize_message_header>
 8017872:	783a      	ldrb	r2, [r7, #0]
 8017874:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8017878:	4293      	cmp	r3, r2
 801787a:	d1eb      	bne.n	8017854 <uxr_read_session_header+0x18>
 801787c:	061b      	lsls	r3, r3, #24
 801787e:	d41c      	bmi.n	80178ba <uxr_read_session_header+0x7e>
 8017880:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8017884:	787b      	ldrb	r3, [r7, #1]
 8017886:	429a      	cmp	r2, r3
 8017888:	d003      	beq.n	8017892 <uxr_read_session_header+0x56>
 801788a:	2001      	movs	r0, #1
 801788c:	f080 0001 	eor.w	r0, r0, #1
 8017890:	e7e1      	b.n	8017856 <uxr_read_session_header+0x1a>
 8017892:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8017896:	78bb      	ldrb	r3, [r7, #2]
 8017898:	429a      	cmp	r2, r3
 801789a:	f107 0102 	add.w	r1, r7, #2
 801789e:	d1f4      	bne.n	801788a <uxr_read_session_header+0x4e>
 80178a0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80178a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d1ee      	bne.n	801788a <uxr_read_session_header+0x4e>
 80178ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80178b0:	784b      	ldrb	r3, [r1, #1]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d1e9      	bne.n	801788a <uxr_read_session_header+0x4e>
 80178b6:	2000      	movs	r0, #0
 80178b8:	e7e8      	b.n	801788c <uxr_read_session_header+0x50>
 80178ba:	2001      	movs	r0, #1
 80178bc:	e7cb      	b.n	8017856 <uxr_read_session_header+0x1a>
 80178be:	bf00      	nop

080178c0 <uxr_session_header_offset>:
 80178c0:	f990 3000 	ldrsb.w	r3, [r0]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	bfac      	ite	ge
 80178c8:	2008      	movge	r0, #8
 80178ca:	2004      	movlt	r0, #4
 80178cc:	4770      	bx	lr
 80178ce:	bf00      	nop

080178d0 <uxr_init_base_object_request>:
 80178d0:	b510      	push	{r4, lr}
 80178d2:	88c3      	ldrh	r3, [r0, #6]
 80178d4:	b082      	sub	sp, #8
 80178d6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80178da:	9101      	str	r1, [sp, #4]
 80178dc:	f1a3 010a 	sub.w	r1, r3, #10
 80178e0:	b289      	uxth	r1, r1
 80178e2:	42a1      	cmp	r1, r4
 80178e4:	d80e      	bhi.n	8017904 <uxr_init_base_object_request+0x34>
 80178e6:	3301      	adds	r3, #1
 80178e8:	b29c      	uxth	r4, r3
 80178ea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80178ee:	b2db      	uxtb	r3, r3
 80178f0:	80c4      	strh	r4, [r0, #6]
 80178f2:	9801      	ldr	r0, [sp, #4]
 80178f4:	7011      	strb	r1, [r2, #0]
 80178f6:	7053      	strb	r3, [r2, #1]
 80178f8:	1c91      	adds	r1, r2, #2
 80178fa:	f7fe fde1 	bl	80164c0 <uxr_object_id_to_raw>
 80178fe:	4620      	mov	r0, r4
 8017900:	b002      	add	sp, #8
 8017902:	bd10      	pop	{r4, pc}
 8017904:	230a      	movs	r3, #10
 8017906:	2100      	movs	r1, #0
 8017908:	461c      	mov	r4, r3
 801790a:	e7f1      	b.n	80178f0 <uxr_init_base_object_request+0x20>

0801790c <uxr_parse_base_object_request>:
 801790c:	b570      	push	{r4, r5, r6, lr}
 801790e:	4604      	mov	r4, r0
 8017910:	3002      	adds	r0, #2
 8017912:	460d      	mov	r5, r1
 8017914:	4616      	mov	r6, r2
 8017916:	f7fe fdbf 	bl	8016498 <uxr_object_id_from_raw>
 801791a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801791e:	8028      	strh	r0, [r5, #0]
 8017920:	806b      	strh	r3, [r5, #2]
 8017922:	7822      	ldrb	r2, [r4, #0]
 8017924:	7863      	ldrb	r3, [r4, #1]
 8017926:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801792a:	8033      	strh	r3, [r6, #0]
 801792c:	bd70      	pop	{r4, r5, r6, pc}
 801792e:	bf00      	nop

08017930 <uxr_init_framing_io>:
 8017930:	2300      	movs	r3, #0
 8017932:	7041      	strb	r1, [r0, #1]
 8017934:	7003      	strb	r3, [r0, #0]
 8017936:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop

0801793c <uxr_write_framed_msg>:
 801793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017940:	4617      	mov	r7, r2
 8017942:	7842      	ldrb	r2, [r0, #1]
 8017944:	b083      	sub	sp, #12
 8017946:	460e      	mov	r6, r1
 8017948:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801794c:	469a      	mov	sl, r3
 801794e:	2901      	cmp	r1, #1
 8017950:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017954:	4604      	mov	r4, r0
 8017956:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801795a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801795e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8017962:	f240 8137 	bls.w	8017bd4 <uxr_write_framed_msg+0x298>
 8017966:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801796a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801796e:	2901      	cmp	r1, #1
 8017970:	f04f 0202 	mov.w	r2, #2
 8017974:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017978:	f240 808f 	bls.w	8017a9a <uxr_write_framed_msg+0x15e>
 801797c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801797e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8017982:	b2dd      	uxtb	r5, r3
 8017984:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017988:	2203      	movs	r2, #3
 801798a:	2901      	cmp	r1, #1
 801798c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017990:	f240 809a 	bls.w	8017ac8 <uxr_write_framed_msg+0x18c>
 8017994:	18a1      	adds	r1, r4, r2
 8017996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017998:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801799c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80179a0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80179a4:	3201      	adds	r2, #1
 80179a6:	2801      	cmp	r0, #1
 80179a8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179ac:	f240 80a0 	bls.w	8017af0 <uxr_write_framed_msg+0x1b4>
 80179b0:	18a0      	adds	r0, r4, r2
 80179b2:	3201      	adds	r2, #1
 80179b4:	b2d2      	uxtb	r2, r2
 80179b6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80179ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f000 80a9 	beq.w	8017b16 <uxr_write_framed_msg+0x1da>
 80179c4:	f04f 0900 	mov.w	r9, #0
 80179c8:	46c8      	mov	r8, r9
 80179ca:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80179ce:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80179d2:	2901      	cmp	r1, #1
 80179d4:	f240 80c3 	bls.w	8017b5e <uxr_write_framed_msg+0x222>
 80179d8:	2a29      	cmp	r2, #41	@ 0x29
 80179da:	f200 809f 	bhi.w	8017b1c <uxr_write_framed_msg+0x1e0>
 80179de:	18a1      	adds	r1, r4, r2
 80179e0:	3201      	adds	r2, #1
 80179e2:	b2d2      	uxtb	r2, r2
 80179e4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80179e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179ec:	ea89 0303 	eor.w	r3, r9, r3
 80179f0:	498c      	ldr	r1, [pc, #560]	@ (8017c24 <uxr_write_framed_msg+0x2e8>)
 80179f2:	b2db      	uxtb	r3, r3
 80179f4:	f108 0801 	add.w	r8, r8, #1
 80179f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80179fc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8017a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a02:	4543      	cmp	r3, r8
 8017a04:	d8e1      	bhi.n	80179ca <uxr_write_framed_msg+0x8e>
 8017a06:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017a0a:	fa5f f889 	uxtb.w	r8, r9
 8017a0e:	9301      	str	r3, [sp, #4]
 8017a10:	f04f 0900 	mov.w	r9, #0
 8017a14:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8017a18:	fa5f f18a 	uxtb.w	r1, sl
 8017a1c:	2901      	cmp	r1, #1
 8017a1e:	d921      	bls.n	8017a64 <uxr_write_framed_msg+0x128>
 8017a20:	2a29      	cmp	r2, #41	@ 0x29
 8017a22:	f240 80af 	bls.w	8017b84 <uxr_write_framed_msg+0x248>
 8017a26:	2500      	movs	r5, #0
 8017a28:	e000      	b.n	8017a2c <uxr_write_framed_msg+0xf0>
 8017a2a:	b160      	cbz	r0, 8017a46 <uxr_write_framed_msg+0x10a>
 8017a2c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017a30:	1b52      	subs	r2, r2, r5
 8017a32:	465b      	mov	r3, fp
 8017a34:	4421      	add	r1, r4
 8017a36:	4638      	mov	r0, r7
 8017a38:	47b0      	blx	r6
 8017a3a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017a3e:	4405      	add	r5, r0
 8017a40:	4295      	cmp	r5, r2
 8017a42:	d3f2      	bcc.n	8017a2a <uxr_write_framed_msg+0xee>
 8017a44:	d003      	beq.n	8017a4e <uxr_write_framed_msg+0x112>
 8017a46:	2000      	movs	r0, #0
 8017a48:	b003      	add	sp, #12
 8017a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4e:	fa5f f18a 	uxtb.w	r1, sl
 8017a52:	f04f 0300 	mov.w	r3, #0
 8017a56:	2901      	cmp	r1, #1
 8017a58:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017a5c:	f04f 0200 	mov.w	r2, #0
 8017a60:	f200 8090 	bhi.w	8017b84 <uxr_write_framed_msg+0x248>
 8017a64:	1c51      	adds	r1, r2, #1
 8017a66:	b2c9      	uxtb	r1, r1
 8017a68:	2929      	cmp	r1, #41	@ 0x29
 8017a6a:	d8dc      	bhi.n	8017a26 <uxr_write_framed_msg+0xea>
 8017a6c:	18a5      	adds	r5, r4, r2
 8017a6e:	4421      	add	r1, r4
 8017a70:	3202      	adds	r2, #2
 8017a72:	f088 0820 	eor.w	r8, r8, #32
 8017a76:	4648      	mov	r0, r9
 8017a78:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8017a7c:	b2d2      	uxtb	r2, r2
 8017a7e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8017a82:	f04f 0901 	mov.w	r9, #1
 8017a86:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017a8a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	f040 8085 	bne.w	8017b9e <uxr_write_framed_msg+0x262>
 8017a94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017a98:	e7bc      	b.n	8017a14 <uxr_write_framed_msg+0xd8>
 8017a9a:	4611      	mov	r1, r2
 8017a9c:	f04f 0c03 	mov.w	ip, #3
 8017aa0:	2204      	movs	r2, #4
 8017aa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017aa4:	4421      	add	r1, r4
 8017aa6:	b2dd      	uxtb	r5, r3
 8017aa8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8017aac:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8017ab0:	44a4      	add	ip, r4
 8017ab2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017ab6:	f080 0020 	eor.w	r0, r0, #32
 8017aba:	2901      	cmp	r1, #1
 8017abc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8017ac0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017ac4:	f63f af66 	bhi.w	8017994 <uxr_write_framed_msg+0x58>
 8017ac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017aca:	18a0      	adds	r0, r4, r2
 8017acc:	f085 0520 	eor.w	r5, r5, #32
 8017ad0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017ad4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017ad8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8017adc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8017ae0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017ae4:	3202      	adds	r2, #2
 8017ae6:	2801      	cmp	r0, #1
 8017ae8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017aec:	f63f af60 	bhi.w	80179b0 <uxr_write_framed_msg+0x74>
 8017af0:	1c50      	adds	r0, r2, #1
 8017af2:	18a5      	adds	r5, r4, r2
 8017af4:	fa54 f080 	uxtab	r0, r4, r0
 8017af8:	3202      	adds	r2, #2
 8017afa:	f081 0120 	eor.w	r1, r1, #32
 8017afe:	b2d2      	uxtb	r2, r2
 8017b00:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017b04:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8017b08:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017b0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	f47f af57 	bne.w	80179c4 <uxr_write_framed_msg+0x88>
 8017b16:	9301      	str	r3, [sp, #4]
 8017b18:	4698      	mov	r8, r3
 8017b1a:	e779      	b.n	8017a10 <uxr_write_framed_msg+0xd4>
 8017b1c:	2500      	movs	r5, #0
 8017b1e:	e001      	b.n	8017b24 <uxr_write_framed_msg+0x1e8>
 8017b20:	2800      	cmp	r0, #0
 8017b22:	d090      	beq.n	8017a46 <uxr_write_framed_msg+0x10a>
 8017b24:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017b28:	1b52      	subs	r2, r2, r5
 8017b2a:	465b      	mov	r3, fp
 8017b2c:	4421      	add	r1, r4
 8017b2e:	4638      	mov	r0, r7
 8017b30:	47b0      	blx	r6
 8017b32:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017b36:	4405      	add	r5, r0
 8017b38:	4295      	cmp	r5, r2
 8017b3a:	d3f1      	bcc.n	8017b20 <uxr_write_framed_msg+0x1e4>
 8017b3c:	d183      	bne.n	8017a46 <uxr_write_framed_msg+0x10a>
 8017b3e:	f04f 0300 	mov.w	r3, #0
 8017b42:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017b46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b48:	4543      	cmp	r3, r8
 8017b4a:	d964      	bls.n	8017c16 <uxr_write_framed_msg+0x2da>
 8017b4c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017b50:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017b54:	2901      	cmp	r1, #1
 8017b56:	f04f 0200 	mov.w	r2, #0
 8017b5a:	f63f af3d 	bhi.w	80179d8 <uxr_write_framed_msg+0x9c>
 8017b5e:	1c51      	adds	r1, r2, #1
 8017b60:	b2c9      	uxtb	r1, r1
 8017b62:	2929      	cmp	r1, #41	@ 0x29
 8017b64:	d8da      	bhi.n	8017b1c <uxr_write_framed_msg+0x1e0>
 8017b66:	18a0      	adds	r0, r4, r2
 8017b68:	4421      	add	r1, r4
 8017b6a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8017b6e:	3202      	adds	r2, #2
 8017b70:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017b74:	b2d2      	uxtb	r2, r2
 8017b76:	f083 0020 	eor.w	r0, r3, #32
 8017b7a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8017b7e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017b82:	e733      	b.n	80179ec <uxr_write_framed_msg+0xb0>
 8017b84:	18a1      	adds	r1, r4, r2
 8017b86:	3201      	adds	r2, #1
 8017b88:	4648      	mov	r0, r9
 8017b8a:	b2d2      	uxtb	r2, r2
 8017b8c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017b90:	f04f 0901 	mov.w	r9, #1
 8017b94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	f43f af7b 	beq.w	8017a94 <uxr_write_framed_msg+0x158>
 8017b9e:	2500      	movs	r5, #0
 8017ba0:	e002      	b.n	8017ba8 <uxr_write_framed_msg+0x26c>
 8017ba2:	2800      	cmp	r0, #0
 8017ba4:	f43f af4f 	beq.w	8017a46 <uxr_write_framed_msg+0x10a>
 8017ba8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017bac:	1b52      	subs	r2, r2, r5
 8017bae:	465b      	mov	r3, fp
 8017bb0:	4421      	add	r1, r4
 8017bb2:	4638      	mov	r0, r7
 8017bb4:	47b0      	blx	r6
 8017bb6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017bba:	4405      	add	r5, r0
 8017bbc:	4295      	cmp	r5, r2
 8017bbe:	d3f0      	bcc.n	8017ba2 <uxr_write_framed_msg+0x266>
 8017bc0:	f47f af41 	bne.w	8017a46 <uxr_write_framed_msg+0x10a>
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017bca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bcc:	b298      	uxth	r0, r3
 8017bce:	b003      	add	sp, #12
 8017bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bd4:	217d      	movs	r1, #125	@ 0x7d
 8017bd6:	f082 0220 	eor.w	r2, r2, #32
 8017bda:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8017bde:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017be2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8017be6:	2901      	cmp	r1, #1
 8017be8:	f04f 0203 	mov.w	r2, #3
 8017bec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017bf0:	d804      	bhi.n	8017bfc <uxr_write_framed_msg+0x2c0>
 8017bf2:	4611      	mov	r1, r2
 8017bf4:	f04f 0c04 	mov.w	ip, #4
 8017bf8:	2205      	movs	r2, #5
 8017bfa:	e752      	b.n	8017aa2 <uxr_write_framed_msg+0x166>
 8017bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bfe:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8017c02:	b2dd      	uxtb	r5, r3
 8017c04:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017c08:	2204      	movs	r2, #4
 8017c0a:	2901      	cmp	r1, #1
 8017c0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017c10:	f63f aec0 	bhi.w	8017994 <uxr_write_framed_msg+0x58>
 8017c14:	e758      	b.n	8017ac8 <uxr_write_framed_msg+0x18c>
 8017c16:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017c1a:	fa5f f889 	uxtb.w	r8, r9
 8017c1e:	9301      	str	r3, [sp, #4]
 8017c20:	2200      	movs	r2, #0
 8017c22:	e6f5      	b.n	8017a10 <uxr_write_framed_msg+0xd4>
 8017c24:	0802400c 	.word	0x0802400c

08017c28 <uxr_framing_read_transport>:
 8017c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	4604      	mov	r4, r0
 8017c2e:	b083      	sub	sp, #12
 8017c30:	461f      	mov	r7, r3
 8017c32:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017c36:	4689      	mov	r9, r1
 8017c38:	4692      	mov	sl, r2
 8017c3a:	f000 fc89 	bl	8018550 <uxr_millis>
 8017c3e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017c42:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017c46:	42b3      	cmp	r3, r6
 8017c48:	4680      	mov	r8, r0
 8017c4a:	d061      	beq.n	8017d10 <uxr_framing_read_transport+0xe8>
 8017c4c:	d81c      	bhi.n	8017c88 <uxr_framing_read_transport+0x60>
 8017c4e:	1e75      	subs	r5, r6, #1
 8017c50:	1aed      	subs	r5, r5, r3
 8017c52:	b2ed      	uxtb	r5, r5
 8017c54:	2600      	movs	r6, #0
 8017c56:	455d      	cmp	r5, fp
 8017c58:	d81f      	bhi.n	8017c9a <uxr_framing_read_transport+0x72>
 8017c5a:	19ab      	adds	r3, r5, r6
 8017c5c:	455b      	cmp	r3, fp
 8017c5e:	bf84      	itt	hi
 8017c60:	ebab 0605 	subhi.w	r6, fp, r5
 8017c64:	b2f6      	uxtbhi	r6, r6
 8017c66:	b9ed      	cbnz	r5, 8017ca4 <uxr_framing_read_transport+0x7c>
 8017c68:	f04f 0b00 	mov.w	fp, #0
 8017c6c:	f000 fc70 	bl	8018550 <uxr_millis>
 8017c70:	683b      	ldr	r3, [r7, #0]
 8017c72:	eba0 0808 	sub.w	r8, r0, r8
 8017c76:	eba3 0308 	sub.w	r3, r3, r8
 8017c7a:	4658      	mov	r0, fp
 8017c7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c80:	603b      	str	r3, [r7, #0]
 8017c82:	b003      	add	sp, #12
 8017c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c88:	2e00      	cmp	r6, #0
 8017c8a:	d049      	beq.n	8017d20 <uxr_framing_read_transport+0xf8>
 8017c8c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8017c90:	b2ed      	uxtb	r5, r5
 8017c92:	3e01      	subs	r6, #1
 8017c94:	455d      	cmp	r5, fp
 8017c96:	b2f6      	uxtb	r6, r6
 8017c98:	d9df      	bls.n	8017c5a <uxr_framing_read_transport+0x32>
 8017c9a:	fa5f f58b 	uxtb.w	r5, fp
 8017c9e:	2600      	movs	r6, #0
 8017ca0:	2d00      	cmp	r5, #0
 8017ca2:	d0e1      	beq.n	8017c68 <uxr_framing_read_transport+0x40>
 8017ca4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017ca8:	3102      	adds	r1, #2
 8017caa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	4421      	add	r1, r4
 8017cb2:	462a      	mov	r2, r5
 8017cb4:	4650      	mov	r0, sl
 8017cb6:	47c8      	blx	r9
 8017cb8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8017d28 <uxr_framing_read_transport+0x100>)
 8017cbe:	4403      	add	r3, r0
 8017cc0:	0859      	lsrs	r1, r3, #1
 8017cc2:	fba2 2101 	umull	r2, r1, r2, r1
 8017cc6:	0889      	lsrs	r1, r1, #2
 8017cc8:	222a      	movs	r2, #42	@ 0x2a
 8017cca:	fb02 3111 	mls	r1, r2, r1, r3
 8017cce:	4683      	mov	fp, r0
 8017cd0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8017cd4:	2800      	cmp	r0, #0
 8017cd6:	d0c7      	beq.n	8017c68 <uxr_framing_read_transport+0x40>
 8017cd8:	42a8      	cmp	r0, r5
 8017cda:	d1c7      	bne.n	8017c6c <uxr_framing_read_transport+0x44>
 8017cdc:	2e00      	cmp	r6, #0
 8017cde:	d0c5      	beq.n	8017c6c <uxr_framing_read_transport+0x44>
 8017ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ce2:	9300      	str	r3, [sp, #0]
 8017ce4:	3102      	adds	r1, #2
 8017ce6:	4632      	mov	r2, r6
 8017ce8:	4421      	add	r1, r4
 8017cea:	2300      	movs	r3, #0
 8017cec:	4650      	mov	r0, sl
 8017cee:	47c8      	blx	r9
 8017cf0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8017d28 <uxr_framing_read_transport+0x100>)
 8017cf6:	180b      	adds	r3, r1, r0
 8017cf8:	0859      	lsrs	r1, r3, #1
 8017cfa:	fba2 1201 	umull	r1, r2, r2, r1
 8017cfe:	0892      	lsrs	r2, r2, #2
 8017d00:	212a      	movs	r1, #42	@ 0x2a
 8017d02:	fb01 3312 	mls	r3, r1, r2, r3
 8017d06:	eb00 0b05 	add.w	fp, r0, r5
 8017d0a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8017d0e:	e7ad      	b.n	8017c6c <uxr_framing_read_transport+0x44>
 8017d10:	2600      	movs	r6, #0
 8017d12:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8017d16:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8017d18:	d9bf      	bls.n	8017c9a <uxr_framing_read_transport+0x72>
 8017d1a:	2102      	movs	r1, #2
 8017d1c:	2529      	movs	r5, #41	@ 0x29
 8017d1e:	e7c4      	b.n	8017caa <uxr_framing_read_transport+0x82>
 8017d20:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017d24:	b2ed      	uxtb	r5, r5
 8017d26:	e796      	b.n	8017c56 <uxr_framing_read_transport+0x2e>
 8017d28:	30c30c31 	.word	0x30c30c31

08017d2c <uxr_read_framed_msg>:
 8017d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d30:	461e      	mov	r6, r3
 8017d32:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017d36:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8017d3a:	429d      	cmp	r5, r3
 8017d3c:	b083      	sub	sp, #12
 8017d3e:	4604      	mov	r4, r0
 8017d40:	4688      	mov	r8, r1
 8017d42:	4691      	mov	r9, r2
 8017d44:	f000 8188 	beq.w	8018058 <uxr_read_framed_msg+0x32c>
 8017d48:	7823      	ldrb	r3, [r4, #0]
 8017d4a:	4dc1      	ldr	r5, [pc, #772]	@ (8018050 <uxr_read_framed_msg+0x324>)
 8017d4c:	4fc1      	ldr	r7, [pc, #772]	@ (8018054 <uxr_read_framed_msg+0x328>)
 8017d4e:	2b07      	cmp	r3, #7
 8017d50:	d8fd      	bhi.n	8017d4e <uxr_read_framed_msg+0x22>
 8017d52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017d56:	0115      	.short	0x0115
 8017d58:	00d600f6 	.word	0x00d600f6
 8017d5c:	009000b9 	.word	0x009000b9
 8017d60:	0030004d 	.word	0x0030004d
 8017d64:	0008      	.short	0x0008
 8017d66:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017d6a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017d6e:	4299      	cmp	r1, r3
 8017d70:	f000 814a 	beq.w	8018008 <uxr_read_framed_msg+0x2dc>
 8017d74:	18e2      	adds	r2, r4, r3
 8017d76:	7892      	ldrb	r2, [r2, #2]
 8017d78:	2a7d      	cmp	r2, #125	@ 0x7d
 8017d7a:	f000 8199 	beq.w	80180b0 <uxr_read_framed_msg+0x384>
 8017d7e:	3301      	adds	r3, #1
 8017d80:	0858      	lsrs	r0, r3, #1
 8017d82:	fba5 1000 	umull	r1, r0, r5, r0
 8017d86:	0880      	lsrs	r0, r0, #2
 8017d88:	212a      	movs	r1, #42	@ 0x2a
 8017d8a:	fb01 3310 	mls	r3, r1, r0, r3
 8017d8e:	2a7e      	cmp	r2, #126	@ 0x7e
 8017d90:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017d94:	f000 8252 	beq.w	801823c <uxr_read_framed_msg+0x510>
 8017d98:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017d9a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8017d9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017da0:	b29b      	uxth	r3, r3
 8017da2:	2200      	movs	r2, #0
 8017da4:	4299      	cmp	r1, r3
 8017da6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8017da8:	7022      	strb	r2, [r4, #0]
 8017daa:	f000 8179 	beq.w	80180a0 <uxr_read_framed_msg+0x374>
 8017dae:	2000      	movs	r0, #0
 8017db0:	b003      	add	sp, #12
 8017db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017dba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017dbe:	4299      	cmp	r1, r3
 8017dc0:	f000 8131 	beq.w	8018026 <uxr_read_framed_msg+0x2fa>
 8017dc4:	18e2      	adds	r2, r4, r3
 8017dc6:	7890      	ldrb	r0, [r2, #2]
 8017dc8:	287d      	cmp	r0, #125	@ 0x7d
 8017dca:	f000 8190 	beq.w	80180ee <uxr_read_framed_msg+0x3c2>
 8017dce:	3301      	adds	r3, #1
 8017dd0:	085a      	lsrs	r2, r3, #1
 8017dd2:	fba5 1202 	umull	r1, r2, r5, r2
 8017dd6:	0892      	lsrs	r2, r2, #2
 8017dd8:	212a      	movs	r1, #42	@ 0x2a
 8017dda:	fb01 3312 	mls	r3, r1, r2, r3
 8017dde:	287e      	cmp	r0, #126	@ 0x7e
 8017de0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017de4:	f000 821a 	beq.w	801821c <uxr_read_framed_msg+0x4f0>
 8017de8:	2307      	movs	r3, #7
 8017dea:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8017dec:	7023      	strb	r3, [r4, #0]
 8017dee:	e7ae      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8017df0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017df2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017df6:	459e      	cmp	lr, r3
 8017df8:	d938      	bls.n	8017e6c <uxr_read_framed_msg+0x140>
 8017dfa:	ee07 8a90 	vmov	s15, r8
 8017dfe:	212a      	movs	r1, #42	@ 0x2a
 8017e00:	e020      	b.n	8017e44 <uxr_read_framed_msg+0x118>
 8017e02:	f89b c002 	ldrb.w	ip, [fp, #2]
 8017e06:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8017e0a:	f000 80d4 	beq.w	8017fb6 <uxr_read_framed_msg+0x28a>
 8017e0e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017e12:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017e16:	f000 8219 	beq.w	801824c <uxr_read_framed_msg+0x520>
 8017e1a:	f806 c003 	strb.w	ip, [r6, r3]
 8017e1e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017e22:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017e24:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017e28:	ea8a 000c 	eor.w	r0, sl, ip
 8017e2c:	b2c0      	uxtb	r0, r0
 8017e2e:	3301      	adds	r3, #1
 8017e30:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017e3a:	4573      	cmp	r3, lr
 8017e3c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8017e3e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017e40:	f080 8120 	bcs.w	8018084 <uxr_read_framed_msg+0x358>
 8017e44:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8017e48:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017e4c:	f100 0c01 	add.w	ip, r0, #1
 8017e50:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017e54:	fba5 8202 	umull	r8, r2, r5, r2
 8017e58:	0892      	lsrs	r2, r2, #2
 8017e5a:	4582      	cmp	sl, r0
 8017e5c:	eb04 0b00 	add.w	fp, r4, r0
 8017e60:	fb01 c212 	mls	r2, r1, r2, ip
 8017e64:	d1cd      	bne.n	8017e02 <uxr_read_framed_msg+0xd6>
 8017e66:	ee17 8a90 	vmov	r8, s15
 8017e6a:	459e      	cmp	lr, r3
 8017e6c:	f040 8111 	bne.w	8018092 <uxr_read_framed_msg+0x366>
 8017e70:	2306      	movs	r3, #6
 8017e72:	7023      	strb	r3, [r4, #0]
 8017e74:	e76b      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8017e76:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017e7a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017e7e:	4298      	cmp	r0, r3
 8017e80:	f000 80c2 	beq.w	8018008 <uxr_read_framed_msg+0x2dc>
 8017e84:	18e2      	adds	r2, r4, r3
 8017e86:	7891      	ldrb	r1, [r2, #2]
 8017e88:	297d      	cmp	r1, #125	@ 0x7d
 8017e8a:	f000 814c 	beq.w	8018126 <uxr_read_framed_msg+0x3fa>
 8017e8e:	3301      	adds	r3, #1
 8017e90:	085a      	lsrs	r2, r3, #1
 8017e92:	fba5 0202 	umull	r0, r2, r5, r2
 8017e96:	0892      	lsrs	r2, r2, #2
 8017e98:	202a      	movs	r0, #42	@ 0x2a
 8017e9a:	fb00 3312 	mls	r3, r0, r2, r3
 8017e9e:	297e      	cmp	r1, #126	@ 0x7e
 8017ea0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017ea4:	f000 81ca 	beq.w	801823c <uxr_read_framed_msg+0x510>
 8017ea8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8017eaa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017eae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	2000      	movs	r0, #0
 8017eb4:	428b      	cmp	r3, r1
 8017eb6:	8623      	strh	r3, [r4, #48]	@ 0x30
 8017eb8:	8660      	strh	r0, [r4, #50]	@ 0x32
 8017eba:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8017ebc:	f240 80df 	bls.w	801807e <uxr_read_framed_msg+0x352>
 8017ec0:	7020      	strb	r0, [r4, #0]
 8017ec2:	b003      	add	sp, #12
 8017ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ec8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017ecc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017ed0:	4299      	cmp	r1, r3
 8017ed2:	f000 80a8 	beq.w	8018026 <uxr_read_framed_msg+0x2fa>
 8017ed6:	18e2      	adds	r2, r4, r3
 8017ed8:	7890      	ldrb	r0, [r2, #2]
 8017eda:	287d      	cmp	r0, #125	@ 0x7d
 8017edc:	f000 8164 	beq.w	80181a8 <uxr_read_framed_msg+0x47c>
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	085a      	lsrs	r2, r3, #1
 8017ee4:	fba5 1202 	umull	r1, r2, r5, r2
 8017ee8:	0892      	lsrs	r2, r2, #2
 8017eea:	212a      	movs	r1, #42	@ 0x2a
 8017eec:	fb01 3312 	mls	r3, r1, r2, r3
 8017ef0:	287e      	cmp	r0, #126	@ 0x7e
 8017ef2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017ef6:	f000 8191 	beq.w	801821c <uxr_read_framed_msg+0x4f0>
 8017efa:	2304      	movs	r3, #4
 8017efc:	8620      	strh	r0, [r4, #48]	@ 0x30
 8017efe:	7023      	strb	r3, [r4, #0]
 8017f00:	e725      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8017f02:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017f06:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017f0a:	4290      	cmp	r0, r2
 8017f0c:	f000 80b3 	beq.w	8018076 <uxr_read_framed_msg+0x34a>
 8017f10:	18a3      	adds	r3, r4, r2
 8017f12:	7899      	ldrb	r1, [r3, #2]
 8017f14:	297d      	cmp	r1, #125	@ 0x7d
 8017f16:	f000 8164 	beq.w	80181e2 <uxr_read_framed_msg+0x4b6>
 8017f1a:	3201      	adds	r2, #1
 8017f1c:	0850      	lsrs	r0, r2, #1
 8017f1e:	fba5 3000 	umull	r3, r0, r5, r0
 8017f22:	0880      	lsrs	r0, r0, #2
 8017f24:	232a      	movs	r3, #42	@ 0x2a
 8017f26:	fb03 2210 	mls	r2, r3, r0, r2
 8017f2a:	297e      	cmp	r1, #126	@ 0x7e
 8017f2c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017f30:	f000 8188 	beq.w	8018244 <uxr_read_framed_msg+0x518>
 8017f34:	7863      	ldrb	r3, [r4, #1]
 8017f36:	428b      	cmp	r3, r1
 8017f38:	bf0c      	ite	eq
 8017f3a:	2303      	moveq	r3, #3
 8017f3c:	2300      	movne	r3, #0
 8017f3e:	7023      	strb	r3, [r4, #0]
 8017f40:	e705      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8017f42:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017f46:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	4299      	cmp	r1, r3
 8017f4e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8017f52:	d06c      	beq.n	801802e <uxr_read_framed_msg+0x302>
 8017f54:	18e2      	adds	r2, r4, r3
 8017f56:	7890      	ldrb	r0, [r2, #2]
 8017f58:	287d      	cmp	r0, #125	@ 0x7d
 8017f5a:	f000 8101 	beq.w	8018160 <uxr_read_framed_msg+0x434>
 8017f5e:	3301      	adds	r3, #1
 8017f60:	085a      	lsrs	r2, r3, #1
 8017f62:	fba5 1202 	umull	r1, r2, r5, r2
 8017f66:	0892      	lsrs	r2, r2, #2
 8017f68:	212a      	movs	r1, #42	@ 0x2a
 8017f6a:	fb01 3312 	mls	r3, r1, r2, r3
 8017f6e:	287e      	cmp	r0, #126	@ 0x7e
 8017f70:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017f74:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017f78:	d059      	beq.n	801802e <uxr_read_framed_msg+0x302>
 8017f7a:	2302      	movs	r3, #2
 8017f7c:	7023      	strb	r3, [r4, #0]
 8017f7e:	e6e6      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8017f80:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017f84:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017f88:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017f8c:	1c51      	adds	r1, r2, #1
 8017f8e:	084b      	lsrs	r3, r1, #1
 8017f90:	fba5 c303 	umull	ip, r3, r5, r3
 8017f94:	089b      	lsrs	r3, r3, #2
 8017f96:	fb0e 1313 	mls	r3, lr, r3, r1
 8017f9a:	4592      	cmp	sl, r2
 8017f9c:	eb04 0002 	add.w	r0, r4, r2
 8017fa0:	b2da      	uxtb	r2, r3
 8017fa2:	f43f af04 	beq.w	8017dae <uxr_read_framed_msg+0x82>
 8017fa6:	7883      	ldrb	r3, [r0, #2]
 8017fa8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017fac:	2b7e      	cmp	r3, #126	@ 0x7e
 8017fae:	d1ed      	bne.n	8017f8c <uxr_read_framed_msg+0x260>
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	7023      	strb	r3, [r4, #0]
 8017fb4:	e6cb      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8017fb6:	f100 0c01 	add.w	ip, r0, #1
 8017fba:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017fbe:	fba5 8202 	umull	r8, r2, r5, r2
 8017fc2:	0892      	lsrs	r2, r2, #2
 8017fc4:	fb01 c212 	mls	r2, r1, r2, ip
 8017fc8:	eb04 0c02 	add.w	ip, r4, r2
 8017fcc:	b2d2      	uxtb	r2, r2
 8017fce:	4592      	cmp	sl, r2
 8017fd0:	f100 0002 	add.w	r0, r0, #2
 8017fd4:	f43f af47 	beq.w	8017e66 <uxr_read_framed_msg+0x13a>
 8017fd8:	0842      	lsrs	r2, r0, #1
 8017fda:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017fde:	fba5 8202 	umull	r8, r2, r5, r2
 8017fe2:	0892      	lsrs	r2, r2, #2
 8017fe4:	fb01 0012 	mls	r0, r1, r2, r0
 8017fe8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8017fec:	f08a 0c20 	eor.w	ip, sl, #32
 8017ff0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8017ff4:	f47f af11 	bne.w	8017e1a <uxr_read_framed_msg+0xee>
 8017ff8:	459e      	cmp	lr, r3
 8017ffa:	ee17 8a90 	vmov	r8, s15
 8017ffe:	f43f af37 	beq.w	8017e70 <uxr_read_framed_msg+0x144>
 8018002:	2301      	movs	r3, #1
 8018004:	7023      	strb	r3, [r4, #0]
 8018006:	e6a2      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8018008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801800a:	9300      	str	r3, [sp, #0]
 801800c:	2301      	movs	r3, #1
 801800e:	9301      	str	r3, [sp, #4]
 8018010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018012:	464a      	mov	r2, r9
 8018014:	4641      	mov	r1, r8
 8018016:	4620      	mov	r0, r4
 8018018:	f7ff fe06 	bl	8017c28 <uxr_framing_read_transport>
 801801c:	2800      	cmp	r0, #0
 801801e:	f43f aec6 	beq.w	8017dae <uxr_read_framed_msg+0x82>
 8018022:	7823      	ldrb	r3, [r4, #0]
 8018024:	e693      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8018026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018028:	9300      	str	r3, [sp, #0]
 801802a:	2302      	movs	r3, #2
 801802c:	e7ef      	b.n	801800e <uxr_read_framed_msg+0x2e2>
 801802e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018030:	9300      	str	r3, [sp, #0]
 8018032:	2304      	movs	r3, #4
 8018034:	9301      	str	r3, [sp, #4]
 8018036:	464a      	mov	r2, r9
 8018038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801803a:	4641      	mov	r1, r8
 801803c:	4620      	mov	r0, r4
 801803e:	f7ff fdf3 	bl	8017c28 <uxr_framing_read_transport>
 8018042:	2800      	cmp	r0, #0
 8018044:	d1ed      	bne.n	8018022 <uxr_read_framed_msg+0x2f6>
 8018046:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801804a:	2b7e      	cmp	r3, #126	@ 0x7e
 801804c:	d0e9      	beq.n	8018022 <uxr_read_framed_msg+0x2f6>
 801804e:	e6ae      	b.n	8017dae <uxr_read_framed_msg+0x82>
 8018050:	30c30c31 	.word	0x30c30c31
 8018054:	0802400c 	.word	0x0802400c
 8018058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801805a:	9300      	str	r3, [sp, #0]
 801805c:	2305      	movs	r3, #5
 801805e:	9301      	str	r3, [sp, #4]
 8018060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018062:	f7ff fde1 	bl	8017c28 <uxr_framing_read_transport>
 8018066:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801806a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801806e:	429a      	cmp	r2, r3
 8018070:	f43f ae9d 	beq.w	8017dae <uxr_read_framed_msg+0x82>
 8018074:	e668      	b.n	8017d48 <uxr_read_framed_msg+0x1c>
 8018076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018078:	9300      	str	r3, [sp, #0]
 801807a:	2303      	movs	r3, #3
 801807c:	e7c7      	b.n	801800e <uxr_read_framed_msg+0x2e2>
 801807e:	2305      	movs	r3, #5
 8018080:	7023      	strb	r3, [r4, #0]
 8018082:	e664      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 8018084:	ee17 8a90 	vmov	r8, s15
 8018088:	f43f aef2 	beq.w	8017e70 <uxr_read_framed_msg+0x144>
 801808c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018090:	d08e      	beq.n	8017fb0 <uxr_read_framed_msg+0x284>
 8018092:	ebae 0303 	sub.w	r3, lr, r3
 8018096:	3302      	adds	r3, #2
 8018098:	9301      	str	r3, [sp, #4]
 801809a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801809c:	9300      	str	r3, [sp, #0]
 801809e:	e7b7      	b.n	8018010 <uxr_read_framed_msg+0x2e4>
 80180a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80180a2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80180a6:	7013      	strb	r3, [r2, #0]
 80180a8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80180aa:	b003      	add	sp, #12
 80180ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b0:	f103 0c01 	add.w	ip, r3, #1
 80180b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80180b8:	fba5 0202 	umull	r0, r2, r5, r2
 80180bc:	0892      	lsrs	r2, r2, #2
 80180be:	202a      	movs	r0, #42	@ 0x2a
 80180c0:	fb00 c212 	mls	r2, r0, r2, ip
 80180c4:	fa5f fc82 	uxtb.w	ip, r2
 80180c8:	4561      	cmp	r1, ip
 80180ca:	d09d      	beq.n	8018008 <uxr_read_framed_msg+0x2dc>
 80180cc:	3302      	adds	r3, #2
 80180ce:	4422      	add	r2, r4
 80180d0:	0859      	lsrs	r1, r3, #1
 80180d2:	7892      	ldrb	r2, [r2, #2]
 80180d4:	fba5 c101 	umull	ip, r1, r5, r1
 80180d8:	0889      	lsrs	r1, r1, #2
 80180da:	fb00 3311 	mls	r3, r0, r1, r3
 80180de:	2a7e      	cmp	r2, #126	@ 0x7e
 80180e0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80180e4:	f000 80aa 	beq.w	801823c <uxr_read_framed_msg+0x510>
 80180e8:	f082 0220 	eor.w	r2, r2, #32
 80180ec:	e654      	b.n	8017d98 <uxr_read_framed_msg+0x6c>
 80180ee:	1c58      	adds	r0, r3, #1
 80180f0:	0842      	lsrs	r2, r0, #1
 80180f2:	fba5 c202 	umull	ip, r2, r5, r2
 80180f6:	0892      	lsrs	r2, r2, #2
 80180f8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80180fc:	fb0c 0212 	mls	r2, ip, r2, r0
 8018100:	b2d0      	uxtb	r0, r2
 8018102:	4281      	cmp	r1, r0
 8018104:	d08f      	beq.n	8018026 <uxr_read_framed_msg+0x2fa>
 8018106:	4422      	add	r2, r4
 8018108:	3302      	adds	r3, #2
 801810a:	7890      	ldrb	r0, [r2, #2]
 801810c:	085a      	lsrs	r2, r3, #1
 801810e:	fba5 1202 	umull	r1, r2, r5, r2
 8018112:	0892      	lsrs	r2, r2, #2
 8018114:	fb0c 3312 	mls	r3, ip, r2, r3
 8018118:	287e      	cmp	r0, #126	@ 0x7e
 801811a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801811e:	d07d      	beq.n	801821c <uxr_read_framed_msg+0x4f0>
 8018120:	f080 0020 	eor.w	r0, r0, #32
 8018124:	e660      	b.n	8017de8 <uxr_read_framed_msg+0xbc>
 8018126:	1c59      	adds	r1, r3, #1
 8018128:	084a      	lsrs	r2, r1, #1
 801812a:	fba5 c202 	umull	ip, r2, r5, r2
 801812e:	0892      	lsrs	r2, r2, #2
 8018130:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018134:	fb0c 1212 	mls	r2, ip, r2, r1
 8018138:	b2d1      	uxtb	r1, r2
 801813a:	4288      	cmp	r0, r1
 801813c:	f43f af64 	beq.w	8018008 <uxr_read_framed_msg+0x2dc>
 8018140:	4422      	add	r2, r4
 8018142:	3302      	adds	r3, #2
 8018144:	7891      	ldrb	r1, [r2, #2]
 8018146:	085a      	lsrs	r2, r3, #1
 8018148:	fba5 0202 	umull	r0, r2, r5, r2
 801814c:	0892      	lsrs	r2, r2, #2
 801814e:	fb0c 3312 	mls	r3, ip, r2, r3
 8018152:	297e      	cmp	r1, #126	@ 0x7e
 8018154:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018158:	d070      	beq.n	801823c <uxr_read_framed_msg+0x510>
 801815a:	f081 0120 	eor.w	r1, r1, #32
 801815e:	e6a3      	b.n	8017ea8 <uxr_read_framed_msg+0x17c>
 8018160:	f103 0c01 	add.w	ip, r3, #1
 8018164:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018168:	fba5 0202 	umull	r0, r2, r5, r2
 801816c:	0892      	lsrs	r2, r2, #2
 801816e:	202a      	movs	r0, #42	@ 0x2a
 8018170:	fb00 c212 	mls	r2, r0, r2, ip
 8018174:	fa5f fc82 	uxtb.w	ip, r2
 8018178:	4561      	cmp	r1, ip
 801817a:	f43f af58 	beq.w	801802e <uxr_read_framed_msg+0x302>
 801817e:	4422      	add	r2, r4
 8018180:	3302      	adds	r3, #2
 8018182:	7891      	ldrb	r1, [r2, #2]
 8018184:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8018188:	085a      	lsrs	r2, r3, #1
 801818a:	fba5 c202 	umull	ip, r2, r5, r2
 801818e:	0892      	lsrs	r2, r2, #2
 8018190:	fb00 3312 	mls	r3, r0, r2, r3
 8018194:	297e      	cmp	r1, #126	@ 0x7e
 8018196:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801819a:	f43f af48 	beq.w	801802e <uxr_read_framed_msg+0x302>
 801819e:	f081 0120 	eor.w	r1, r1, #32
 80181a2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80181a6:	e6e8      	b.n	8017f7a <uxr_read_framed_msg+0x24e>
 80181a8:	1c58      	adds	r0, r3, #1
 80181aa:	0842      	lsrs	r2, r0, #1
 80181ac:	fba5 c202 	umull	ip, r2, r5, r2
 80181b0:	0892      	lsrs	r2, r2, #2
 80181b2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80181b6:	fb0c 0212 	mls	r2, ip, r2, r0
 80181ba:	b2d0      	uxtb	r0, r2
 80181bc:	4281      	cmp	r1, r0
 80181be:	f43f af32 	beq.w	8018026 <uxr_read_framed_msg+0x2fa>
 80181c2:	4422      	add	r2, r4
 80181c4:	3302      	adds	r3, #2
 80181c6:	7890      	ldrb	r0, [r2, #2]
 80181c8:	085a      	lsrs	r2, r3, #1
 80181ca:	fba5 1202 	umull	r1, r2, r5, r2
 80181ce:	0892      	lsrs	r2, r2, #2
 80181d0:	fb0c 3312 	mls	r3, ip, r2, r3
 80181d4:	287e      	cmp	r0, #126	@ 0x7e
 80181d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80181da:	d01f      	beq.n	801821c <uxr_read_framed_msg+0x4f0>
 80181dc:	f080 0020 	eor.w	r0, r0, #32
 80181e0:	e68b      	b.n	8017efa <uxr_read_framed_msg+0x1ce>
 80181e2:	1c51      	adds	r1, r2, #1
 80181e4:	084b      	lsrs	r3, r1, #1
 80181e6:	fba5 c303 	umull	ip, r3, r5, r3
 80181ea:	089b      	lsrs	r3, r3, #2
 80181ec:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80181f0:	fb0c 1313 	mls	r3, ip, r3, r1
 80181f4:	b2d9      	uxtb	r1, r3
 80181f6:	4288      	cmp	r0, r1
 80181f8:	f43f af3d 	beq.w	8018076 <uxr_read_framed_msg+0x34a>
 80181fc:	3202      	adds	r2, #2
 80181fe:	4423      	add	r3, r4
 8018200:	0850      	lsrs	r0, r2, #1
 8018202:	789b      	ldrb	r3, [r3, #2]
 8018204:	fba5 1000 	umull	r1, r0, r5, r0
 8018208:	0880      	lsrs	r0, r0, #2
 801820a:	fb0c 2210 	mls	r2, ip, r0, r2
 801820e:	2b7e      	cmp	r3, #126	@ 0x7e
 8018210:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018214:	d016      	beq.n	8018244 <uxr_read_framed_msg+0x518>
 8018216:	f083 0120 	eor.w	r1, r3, #32
 801821a:	e68b      	b.n	8017f34 <uxr_read_framed_msg+0x208>
 801821c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801821e:	9300      	str	r3, [sp, #0]
 8018220:	2302      	movs	r3, #2
 8018222:	9301      	str	r3, [sp, #4]
 8018224:	464a      	mov	r2, r9
 8018226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018228:	4641      	mov	r1, r8
 801822a:	4620      	mov	r0, r4
 801822c:	f7ff fcfc 	bl	8017c28 <uxr_framing_read_transport>
 8018230:	2800      	cmp	r0, #0
 8018232:	f47f aef6 	bne.w	8018022 <uxr_read_framed_msg+0x2f6>
 8018236:	2301      	movs	r3, #1
 8018238:	7023      	strb	r3, [r4, #0]
 801823a:	e588      	b.n	8017d4e <uxr_read_framed_msg+0x22>
 801823c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	2301      	movs	r3, #1
 8018242:	e7ee      	b.n	8018222 <uxr_read_framed_msg+0x4f6>
 8018244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018246:	9300      	str	r3, [sp, #0]
 8018248:	2303      	movs	r3, #3
 801824a:	e7ea      	b.n	8018222 <uxr_read_framed_msg+0x4f6>
 801824c:	ee17 8a90 	vmov	r8, s15
 8018250:	e6ae      	b.n	8017fb0 <uxr_read_framed_msg+0x284>
 8018252:	bf00      	nop

08018254 <uxr_stream_id>:
 8018254:	2901      	cmp	r1, #1
 8018256:	b082      	sub	sp, #8
 8018258:	d01d      	beq.n	8018296 <uxr_stream_id+0x42>
 801825a:	2902      	cmp	r1, #2
 801825c:	f04f 0c00 	mov.w	ip, #0
 8018260:	d01e      	beq.n	80182a0 <uxr_stream_id+0x4c>
 8018262:	2300      	movs	r3, #0
 8018264:	f36c 0307 	bfi	r3, ip, #0, #8
 8018268:	f360 230f 	bfi	r3, r0, #8, #8
 801826c:	f361 4317 	bfi	r3, r1, #16, #8
 8018270:	f362 631f 	bfi	r3, r2, #24, #8
 8018274:	b2da      	uxtb	r2, r3
 8018276:	2000      	movs	r0, #0
 8018278:	f362 0007 	bfi	r0, r2, #0, #8
 801827c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8018280:	f362 200f 	bfi	r0, r2, #8, #8
 8018284:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018288:	f362 4017 	bfi	r0, r2, #16, #8
 801828c:	0e1b      	lsrs	r3, r3, #24
 801828e:	f363 601f 	bfi	r0, r3, #24, #8
 8018292:	b002      	add	sp, #8
 8018294:	4770      	bx	lr
 8018296:	f100 0c01 	add.w	ip, r0, #1
 801829a:	fa5f fc8c 	uxtb.w	ip, ip
 801829e:	e7e0      	b.n	8018262 <uxr_stream_id+0xe>
 80182a0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80182a4:	e7dd      	b.n	8018262 <uxr_stream_id+0xe>
 80182a6:	bf00      	nop

080182a8 <uxr_stream_id_from_raw>:
 80182a8:	b082      	sub	sp, #8
 80182aa:	b130      	cbz	r0, 80182ba <uxr_stream_id_from_raw+0x12>
 80182ac:	0603      	lsls	r3, r0, #24
 80182ae:	d420      	bmi.n	80182f2 <uxr_stream_id_from_raw+0x4a>
 80182b0:	1e42      	subs	r2, r0, #1
 80182b2:	b2d2      	uxtb	r2, r2
 80182b4:	f04f 0c01 	mov.w	ip, #1
 80182b8:	e001      	b.n	80182be <uxr_stream_id_from_raw+0x16>
 80182ba:	4684      	mov	ip, r0
 80182bc:	4602      	mov	r2, r0
 80182be:	2300      	movs	r3, #0
 80182c0:	f360 0307 	bfi	r3, r0, #0, #8
 80182c4:	f362 230f 	bfi	r3, r2, #8, #8
 80182c8:	f36c 4317 	bfi	r3, ip, #16, #8
 80182cc:	f361 631f 	bfi	r3, r1, #24, #8
 80182d0:	b2da      	uxtb	r2, r3
 80182d2:	2000      	movs	r0, #0
 80182d4:	f362 0007 	bfi	r0, r2, #0, #8
 80182d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80182dc:	f362 200f 	bfi	r0, r2, #8, #8
 80182e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80182e4:	f362 4017 	bfi	r0, r2, #16, #8
 80182e8:	0e1b      	lsrs	r3, r3, #24
 80182ea:	f363 601f 	bfi	r0, r3, #24, #8
 80182ee:	b002      	add	sp, #8
 80182f0:	4770      	bx	lr
 80182f2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80182f6:	f04f 0c02 	mov.w	ip, #2
 80182fa:	e7e0      	b.n	80182be <uxr_stream_id_from_raw+0x16>

080182fc <uxr_init_stream_storage>:
 80182fc:	2300      	movs	r3, #0
 80182fe:	7403      	strb	r3, [r0, #16]
 8018300:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8018304:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8018308:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801830c:	4770      	bx	lr
 801830e:	bf00      	nop

08018310 <uxr_reset_stream_storage>:
 8018310:	b570      	push	{r4, r5, r6, lr}
 8018312:	7c03      	ldrb	r3, [r0, #16]
 8018314:	4604      	mov	r4, r0
 8018316:	b153      	cbz	r3, 801832e <uxr_reset_stream_storage+0x1e>
 8018318:	4606      	mov	r6, r0
 801831a:	2500      	movs	r5, #0
 801831c:	4630      	mov	r0, r6
 801831e:	f003 fadf 	bl	801b8e0 <uxr_reset_output_best_effort_stream>
 8018322:	7c23      	ldrb	r3, [r4, #16]
 8018324:	3501      	adds	r5, #1
 8018326:	42ab      	cmp	r3, r5
 8018328:	f106 0610 	add.w	r6, r6, #16
 801832c:	d8f6      	bhi.n	801831c <uxr_reset_stream_storage+0xc>
 801832e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018332:	b163      	cbz	r3, 801834e <uxr_reset_stream_storage+0x3e>
 8018334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018338:	2500      	movs	r5, #0
 801833a:	4630      	mov	r0, r6
 801833c:	f003 f8d2 	bl	801b4e4 <uxr_reset_input_best_effort_stream>
 8018340:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018344:	3501      	adds	r5, #1
 8018346:	42ab      	cmp	r3, r5
 8018348:	f106 0602 	add.w	r6, r6, #2
 801834c:	d8f5      	bhi.n	801833a <uxr_reset_stream_storage+0x2a>
 801834e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8018352:	b163      	cbz	r3, 801836e <uxr_reset_stream_storage+0x5e>
 8018354:	f104 0618 	add.w	r6, r4, #24
 8018358:	2500      	movs	r5, #0
 801835a:	4630      	mov	r0, r6
 801835c:	f003 fb6c 	bl	801ba38 <uxr_reset_output_reliable_stream>
 8018360:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8018364:	3501      	adds	r5, #1
 8018366:	42ab      	cmp	r3, r5
 8018368:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801836c:	d8f5      	bhi.n	801835a <uxr_reset_stream_storage+0x4a>
 801836e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8018372:	b163      	cbz	r3, 801838e <uxr_reset_stream_storage+0x7e>
 8018374:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8018378:	2500      	movs	r5, #0
 801837a:	4630      	mov	r0, r6
 801837c:	f003 f926 	bl	801b5cc <uxr_reset_input_reliable_stream>
 8018380:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8018384:	3501      	adds	r5, #1
 8018386:	42ab      	cmp	r3, r5
 8018388:	f106 0618 	add.w	r6, r6, #24
 801838c:	d8f5      	bhi.n	801837a <uxr_reset_stream_storage+0x6a>
 801838e:	bd70      	pop	{r4, r5, r6, pc}

08018390 <uxr_add_output_best_effort_buffer>:
 8018390:	b510      	push	{r4, lr}
 8018392:	7c04      	ldrb	r4, [r0, #16]
 8018394:	f104 0c01 	add.w	ip, r4, #1
 8018398:	b082      	sub	sp, #8
 801839a:	f880 c010 	strb.w	ip, [r0, #16]
 801839e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80183a2:	f003 fa93 	bl	801b8cc <uxr_init_output_best_effort_stream>
 80183a6:	2201      	movs	r2, #1
 80183a8:	4611      	mov	r1, r2
 80183aa:	4620      	mov	r0, r4
 80183ac:	b002      	add	sp, #8
 80183ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183b2:	f7ff bf4f 	b.w	8018254 <uxr_stream_id>
 80183b6:	bf00      	nop

080183b8 <uxr_add_output_reliable_buffer>:
 80183b8:	b510      	push	{r4, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	4684      	mov	ip, r0
 80183be:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80183c2:	9000      	str	r0, [sp, #0]
 80183c4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80183c8:	2028      	movs	r0, #40	@ 0x28
 80183ca:	fb00 c004 	mla	r0, r0, r4, ip
 80183ce:	f104 0e01 	add.w	lr, r4, #1
 80183d2:	3018      	adds	r0, #24
 80183d4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80183d8:	f003 faf6 	bl	801b9c8 <uxr_init_output_reliable_stream>
 80183dc:	2201      	movs	r2, #1
 80183de:	2102      	movs	r1, #2
 80183e0:	4620      	mov	r0, r4
 80183e2:	b004      	add	sp, #16
 80183e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183e8:	f7ff bf34 	b.w	8018254 <uxr_stream_id>

080183ec <uxr_add_input_best_effort_buffer>:
 80183ec:	b510      	push	{r4, lr}
 80183ee:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80183f2:	4603      	mov	r3, r0
 80183f4:	1c62      	adds	r2, r4, #1
 80183f6:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80183fa:	b082      	sub	sp, #8
 80183fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8018400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018404:	f003 f86a 	bl	801b4dc <uxr_init_input_best_effort_stream>
 8018408:	2200      	movs	r2, #0
 801840a:	2101      	movs	r1, #1
 801840c:	4620      	mov	r0, r4
 801840e:	b002      	add	sp, #8
 8018410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018414:	f7ff bf1e 	b.w	8018254 <uxr_stream_id>

08018418 <uxr_add_input_reliable_buffer>:
 8018418:	b510      	push	{r4, lr}
 801841a:	b084      	sub	sp, #16
 801841c:	4684      	mov	ip, r0
 801841e:	9806      	ldr	r0, [sp, #24]
 8018420:	9000      	str	r0, [sp, #0]
 8018422:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8018426:	2018      	movs	r0, #24
 8018428:	fb00 c004 	mla	r0, r0, r4, ip
 801842c:	f104 0e01 	add.w	lr, r4, #1
 8018430:	3048      	adds	r0, #72	@ 0x48
 8018432:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8018436:	f003 f89d 	bl	801b574 <uxr_init_input_reliable_stream>
 801843a:	2200      	movs	r2, #0
 801843c:	2102      	movs	r1, #2
 801843e:	4620      	mov	r0, r4
 8018440:	b004      	add	sp, #16
 8018442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018446:	f7ff bf05 	b.w	8018254 <uxr_stream_id>
 801844a:	bf00      	nop

0801844c <uxr_get_output_best_effort_stream>:
 801844c:	7c03      	ldrb	r3, [r0, #16]
 801844e:	428b      	cmp	r3, r1
 8018450:	bf8c      	ite	hi
 8018452:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8018456:	2000      	movls	r0, #0
 8018458:	4770      	bx	lr
 801845a:	bf00      	nop

0801845c <uxr_get_output_reliable_stream>:
 801845c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8018460:	428b      	cmp	r3, r1
 8018462:	bf83      	ittte	hi
 8018464:	2328      	movhi	r3, #40	@ 0x28
 8018466:	fb03 0001 	mlahi	r0, r3, r1, r0
 801846a:	3018      	addhi	r0, #24
 801846c:	2000      	movls	r0, #0
 801846e:	4770      	bx	lr

08018470 <uxr_get_input_best_effort_stream>:
 8018470:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8018474:	428b      	cmp	r3, r1
 8018476:	bf86      	itte	hi
 8018478:	3121      	addhi	r1, #33	@ 0x21
 801847a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801847e:	2000      	movls	r0, #0
 8018480:	4770      	bx	lr
 8018482:	bf00      	nop

08018484 <uxr_get_input_reliable_stream>:
 8018484:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8018488:	428b      	cmp	r3, r1
 801848a:	bf83      	ittte	hi
 801848c:	2318      	movhi	r3, #24
 801848e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8018492:	3048      	addhi	r0, #72	@ 0x48
 8018494:	2000      	movls	r0, #0
 8018496:	4770      	bx	lr

08018498 <uxr_output_streams_confirmed>:
 8018498:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801849c:	b183      	cbz	r3, 80184c0 <uxr_output_streams_confirmed+0x28>
 801849e:	b570      	push	{r4, r5, r6, lr}
 80184a0:	4606      	mov	r6, r0
 80184a2:	f100 0518 	add.w	r5, r0, #24
 80184a6:	2400      	movs	r4, #0
 80184a8:	e001      	b.n	80184ae <uxr_output_streams_confirmed+0x16>
 80184aa:	3528      	adds	r5, #40	@ 0x28
 80184ac:	b138      	cbz	r0, 80184be <uxr_output_streams_confirmed+0x26>
 80184ae:	4628      	mov	r0, r5
 80184b0:	f003 fd32 	bl	801bf18 <uxr_is_output_up_to_date>
 80184b4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80184b8:	3401      	adds	r4, #1
 80184ba:	42a3      	cmp	r3, r4
 80184bc:	d8f5      	bhi.n	80184aa <uxr_output_streams_confirmed+0x12>
 80184be:	bd70      	pop	{r4, r5, r6, pc}
 80184c0:	2001      	movs	r0, #1
 80184c2:	4770      	bx	lr

080184c4 <uxr_buffer_submessage_header>:
 80184c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c6:	4604      	mov	r4, r0
 80184c8:	460e      	mov	r6, r1
 80184ca:	2104      	movs	r1, #4
 80184cc:	4615      	mov	r5, r2
 80184ce:	461f      	mov	r7, r3
 80184d0:	f7f7 f8c8 	bl	800f664 <ucdr_align_to>
 80184d4:	2301      	movs	r3, #1
 80184d6:	ea47 0203 	orr.w	r2, r7, r3
 80184da:	4631      	mov	r1, r6
 80184dc:	7523      	strb	r3, [r4, #20]
 80184de:	4620      	mov	r0, r4
 80184e0:	462b      	mov	r3, r5
 80184e2:	f000 fa27 	bl	8018934 <uxr_serialize_submessage_header>
 80184e6:	4620      	mov	r0, r4
 80184e8:	f7f7 f8d2 	bl	800f690 <ucdr_buffer_remaining>
 80184ec:	42a8      	cmp	r0, r5
 80184ee:	bf34      	ite	cc
 80184f0:	2000      	movcc	r0, #0
 80184f2:	2001      	movcs	r0, #1
 80184f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184f6:	bf00      	nop

080184f8 <uxr_read_submessage_header>:
 80184f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184fc:	4604      	mov	r4, r0
 80184fe:	460d      	mov	r5, r1
 8018500:	2104      	movs	r1, #4
 8018502:	4616      	mov	r6, r2
 8018504:	4698      	mov	r8, r3
 8018506:	f7f7 f8ad 	bl	800f664 <ucdr_align_to>
 801850a:	4620      	mov	r0, r4
 801850c:	f7f7 f8c0 	bl	800f690 <ucdr_buffer_remaining>
 8018510:	2803      	cmp	r0, #3
 8018512:	bf8c      	ite	hi
 8018514:	2701      	movhi	r7, #1
 8018516:	2700      	movls	r7, #0
 8018518:	d802      	bhi.n	8018520 <uxr_read_submessage_header+0x28>
 801851a:	4638      	mov	r0, r7
 801851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018520:	4633      	mov	r3, r6
 8018522:	4642      	mov	r2, r8
 8018524:	4620      	mov	r0, r4
 8018526:	4629      	mov	r1, r5
 8018528:	f000 fa18 	bl	801895c <uxr_deserialize_submessage_header>
 801852c:	f898 3000 	ldrb.w	r3, [r8]
 8018530:	f003 0201 	and.w	r2, r3, #1
 8018534:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8018538:	f888 3000 	strb.w	r3, [r8]
 801853c:	7522      	strb	r2, [r4, #20]
 801853e:	4638      	mov	r0, r7
 8018540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018544 <uxr_submessage_padding>:
 8018544:	f010 0003 	ands.w	r0, r0, #3
 8018548:	bf18      	it	ne
 801854a:	f1c0 0004 	rsbne	r0, r0, #4
 801854e:	4770      	bx	lr

08018550 <uxr_millis>:
 8018550:	b510      	push	{r4, lr}
 8018552:	b084      	sub	sp, #16
 8018554:	4669      	mov	r1, sp
 8018556:	2001      	movs	r0, #1
 8018558:	f7ed fe86 	bl	8006268 <clock_gettime>
 801855c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8018560:	4906      	ldr	r1, [pc, #24]	@ (801857c <uxr_millis+0x2c>)
 8018562:	fba0 0301 	umull	r0, r3, r0, r1
 8018566:	1900      	adds	r0, r0, r4
 8018568:	fb01 3102 	mla	r1, r1, r2, r3
 801856c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8018570:	4a03      	ldr	r2, [pc, #12]	@ (8018580 <uxr_millis+0x30>)
 8018572:	2300      	movs	r3, #0
 8018574:	f7e8 fb78 	bl	8000c68 <__aeabi_ldivmod>
 8018578:	b004      	add	sp, #16
 801857a:	bd10      	pop	{r4, pc}
 801857c:	3b9aca00 	.word	0x3b9aca00
 8018580:	000f4240 	.word	0x000f4240

08018584 <uxr_nanos>:
 8018584:	b510      	push	{r4, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	4669      	mov	r1, sp
 801858a:	2001      	movs	r0, #1
 801858c:	f7ed fe6c 	bl	8006268 <clock_gettime>
 8018590:	4a06      	ldr	r2, [pc, #24]	@ (80185ac <uxr_nanos+0x28>)
 8018592:	9800      	ldr	r0, [sp, #0]
 8018594:	9902      	ldr	r1, [sp, #8]
 8018596:	9c01      	ldr	r4, [sp, #4]
 8018598:	fba0 0302 	umull	r0, r3, r0, r2
 801859c:	1840      	adds	r0, r0, r1
 801859e:	fb02 3304 	mla	r3, r2, r4, r3
 80185a2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80185a6:	b004      	add	sp, #16
 80185a8:	bd10      	pop	{r4, pc}
 80185aa:	bf00      	nop
 80185ac:	3b9aca00 	.word	0x3b9aca00

080185b0 <on_full_output_buffer_fragmented>:
 80185b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b4:	460c      	mov	r4, r1
 80185b6:	b08a      	sub	sp, #40	@ 0x28
 80185b8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80185bc:	4606      	mov	r6, r0
 80185be:	f104 0008 	add.w	r0, r4, #8
 80185c2:	f7ff ff4b 	bl	801845c <uxr_get_output_reliable_stream>
 80185c6:	4605      	mov	r5, r0
 80185c8:	f003 fcb0 	bl	801bf2c <get_available_free_slots>
 80185cc:	b968      	cbnz	r0, 80185ea <on_full_output_buffer_fragmented+0x3a>
 80185ce:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80185d2:	4620      	mov	r0, r4
 80185d4:	4798      	blx	r3
 80185d6:	b918      	cbnz	r0, 80185e0 <on_full_output_buffer_fragmented+0x30>
 80185d8:	2001      	movs	r0, #1
 80185da:	b00a      	add	sp, #40	@ 0x28
 80185dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185e0:	4628      	mov	r0, r5
 80185e2:	f003 fca3 	bl	801bf2c <get_available_free_slots>
 80185e6:	2800      	cmp	r0, #0
 80185e8:	d0f6      	beq.n	80185d8 <on_full_output_buffer_fragmented+0x28>
 80185ea:	8929      	ldrh	r1, [r5, #8]
 80185ec:	89eb      	ldrh	r3, [r5, #14]
 80185ee:	7b28      	ldrb	r0, [r5, #12]
 80185f0:	686a      	ldr	r2, [r5, #4]
 80185f2:	fbb2 f8f1 	udiv	r8, r2, r1
 80185f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80185fa:	fb01 3112 	mls	r1, r1, r2, r3
 80185fe:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8018602:	b289      	uxth	r1, r1
 8018604:	fb08 f101 	mul.w	r1, r8, r1
 8018608:	30fc      	adds	r0, #252	@ 0xfc
 801860a:	f1a8 0804 	sub.w	r8, r8, #4
 801860e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8018612:	4440      	add	r0, r8
 8018614:	b287      	uxth	r7, r0
 8018616:	1bdb      	subs	r3, r3, r7
 8018618:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801861c:	682b      	ldr	r3, [r5, #0]
 801861e:	3104      	adds	r1, #4
 8018620:	4419      	add	r1, r3
 8018622:	4642      	mov	r2, r8
 8018624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018628:	9300      	str	r3, [sp, #0]
 801862a:	a802      	add	r0, sp, #8
 801862c:	2300      	movs	r3, #0
 801862e:	f7f6 ffed 	bl	800f60c <ucdr_init_buffer_origin_offset>
 8018632:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8018636:	f102 0308 	add.w	r3, r2, #8
 801863a:	4543      	cmp	r3, r8
 801863c:	d928      	bls.n	8018690 <on_full_output_buffer_fragmented+0xe0>
 801863e:	463a      	mov	r2, r7
 8018640:	2300      	movs	r3, #0
 8018642:	210d      	movs	r1, #13
 8018644:	a802      	add	r0, sp, #8
 8018646:	f7ff ff3d 	bl	80184c4 <uxr_buffer_submessage_header>
 801864a:	8929      	ldrh	r1, [r5, #8]
 801864c:	89eb      	ldrh	r3, [r5, #14]
 801864e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018652:	fb01 3312 	mls	r3, r1, r2, r3
 8018656:	b29b      	uxth	r3, r3
 8018658:	686a      	ldr	r2, [r5, #4]
 801865a:	fbb2 f2f1 	udiv	r2, r2, r1
 801865e:	fb02 f303 	mul.w	r3, r2, r3
 8018662:	682a      	ldr	r2, [r5, #0]
 8018664:	f842 8003 	str.w	r8, [r2, r3]
 8018668:	89e8      	ldrh	r0, [r5, #14]
 801866a:	2101      	movs	r1, #1
 801866c:	f003 fc7e 	bl	801bf6c <uxr_seq_num_add>
 8018670:	9904      	ldr	r1, [sp, #16]
 8018672:	9a03      	ldr	r2, [sp, #12]
 8018674:	81e8      	strh	r0, [r5, #14]
 8018676:	1a52      	subs	r2, r2, r1
 8018678:	4630      	mov	r0, r6
 801867a:	f7f6 ffd9 	bl	800f630 <ucdr_init_buffer>
 801867e:	4630      	mov	r0, r6
 8018680:	490f      	ldr	r1, [pc, #60]	@ (80186c0 <on_full_output_buffer_fragmented+0x110>)
 8018682:	4622      	mov	r2, r4
 8018684:	f7f6 ffa8 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 8018688:	2000      	movs	r0, #0
 801868a:	b00a      	add	sp, #40	@ 0x28
 801868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018690:	b292      	uxth	r2, r2
 8018692:	2302      	movs	r3, #2
 8018694:	210d      	movs	r1, #13
 8018696:	a802      	add	r0, sp, #8
 8018698:	f7ff ff14 	bl	80184c4 <uxr_buffer_submessage_header>
 801869c:	8928      	ldrh	r0, [r5, #8]
 801869e:	89eb      	ldrh	r3, [r5, #14]
 80186a0:	fbb3 f1f0 	udiv	r1, r3, r0
 80186a4:	fb00 3311 	mls	r3, r0, r1, r3
 80186a8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80186ac:	6869      	ldr	r1, [r5, #4]
 80186ae:	fbb1 f1f0 	udiv	r1, r1, r0
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	fb01 f303 	mul.w	r3, r1, r3
 80186b8:	6829      	ldr	r1, [r5, #0]
 80186ba:	3208      	adds	r2, #8
 80186bc:	50ca      	str	r2, [r1, r3]
 80186be:	e7d3      	b.n	8018668 <on_full_output_buffer_fragmented+0xb8>
 80186c0:	080185b1 	.word	0x080185b1

080186c4 <uxr_prepare_output_stream>:
 80186c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186c6:	b087      	sub	sp, #28
 80186c8:	2707      	movs	r7, #7
 80186ca:	9202      	str	r2, [sp, #8]
 80186cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80186ce:	9103      	str	r1, [sp, #12]
 80186d0:	2500      	movs	r5, #0
 80186d2:	3204      	adds	r2, #4
 80186d4:	e9cd 7500 	strd	r7, r5, [sp]
 80186d8:	461c      	mov	r4, r3
 80186da:	4606      	mov	r6, r0
 80186dc:	f7fe ffc2 	bl	8017664 <uxr_prepare_stream_to_write_submessage>
 80186e0:	f080 0201 	eor.w	r2, r0, #1
 80186e4:	b2d2      	uxtb	r2, r2
 80186e6:	75a2      	strb	r2, [r4, #22]
 80186e8:	b112      	cbz	r2, 80186f0 <uxr_prepare_output_stream+0x2c>
 80186ea:	4628      	mov	r0, r5
 80186ec:	b007      	add	sp, #28
 80186ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186f0:	aa05      	add	r2, sp, #20
 80186f2:	9902      	ldr	r1, [sp, #8]
 80186f4:	4630      	mov	r0, r6
 80186f6:	f7ff f8eb 	bl	80178d0 <uxr_init_base_object_request>
 80186fa:	a905      	add	r1, sp, #20
 80186fc:	4605      	mov	r5, r0
 80186fe:	4620      	mov	r0, r4
 8018700:	f001 f88c 	bl	801981c <uxr_serialize_WRITE_DATA_Payload_Data>
 8018704:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8018708:	69a6      	ldr	r6, [r4, #24]
 801870a:	69e7      	ldr	r7, [r4, #28]
 801870c:	1a52      	subs	r2, r2, r1
 801870e:	4620      	mov	r0, r4
 8018710:	f7f6 ff8e 	bl	800f630 <ucdr_init_buffer>
 8018714:	4620      	mov	r0, r4
 8018716:	463a      	mov	r2, r7
 8018718:	4631      	mov	r1, r6
 801871a:	f7f6 ff5d 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 801871e:	4628      	mov	r0, r5
 8018720:	b007      	add	sp, #28
 8018722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018724 <uxr_prepare_output_stream_fragmented>:
 8018724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018728:	b091      	sub	sp, #68	@ 0x44
 801872a:	4605      	mov	r5, r0
 801872c:	9105      	str	r1, [sp, #20]
 801872e:	3008      	adds	r0, #8
 8018730:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018734:	461e      	mov	r6, r3
 8018736:	9204      	str	r2, [sp, #16]
 8018738:	f7ff fe90 	bl	801845c <uxr_get_output_reliable_stream>
 801873c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8018740:	2b01      	cmp	r3, #1
 8018742:	f000 8091 	beq.w	8018868 <uxr_prepare_output_stream_fragmented+0x144>
 8018746:	4604      	mov	r4, r0
 8018748:	2800      	cmp	r0, #0
 801874a:	f000 808d 	beq.w	8018868 <uxr_prepare_output_stream_fragmented+0x144>
 801874e:	f003 fbed 	bl	801bf2c <get_available_free_slots>
 8018752:	2800      	cmp	r0, #0
 8018754:	f000 8083 	beq.w	801885e <uxr_prepare_output_stream_fragmented+0x13a>
 8018758:	8922      	ldrh	r2, [r4, #8]
 801875a:	89e7      	ldrh	r7, [r4, #14]
 801875c:	fbb7 f9f2 	udiv	r9, r7, r2
 8018760:	fb02 7919 	mls	r9, r2, r9, r7
 8018764:	fa1f f989 	uxth.w	r9, r9
 8018768:	6863      	ldr	r3, [r4, #4]
 801876a:	fbb3 f2f2 	udiv	r2, r3, r2
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	9203      	str	r2, [sp, #12]
 8018772:	fb02 f909 	mul.w	r9, r2, r9
 8018776:	f109 0904 	add.w	r9, r9, #4
 801877a:	4499      	add	r9, r3
 801877c:	7b23      	ldrb	r3, [r4, #12]
 801877e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8018782:	4543      	cmp	r3, r8
 8018784:	f1a2 0b04 	sub.w	fp, r2, #4
 8018788:	d37a      	bcc.n	8018880 <uxr_prepare_output_stream_fragmented+0x15c>
 801878a:	f1ab 0a04 	sub.w	sl, fp, #4
 801878e:	ebaa 0a03 	sub.w	sl, sl, r3
 8018792:	465a      	mov	r2, fp
 8018794:	2300      	movs	r3, #0
 8018796:	4649      	mov	r1, r9
 8018798:	a808      	add	r0, sp, #32
 801879a:	f8cd 8000 	str.w	r8, [sp]
 801879e:	f7f6 ff35 	bl	800f60c <ucdr_init_buffer_origin_offset>
 80187a2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80187a4:	fa1f fa8a 	uxth.w	sl, sl
 80187a8:	4652      	mov	r2, sl
 80187aa:	f103 0a08 	add.w	sl, r3, #8
 80187ae:	45da      	cmp	sl, fp
 80187b0:	bf34      	ite	cc
 80187b2:	2302      	movcc	r3, #2
 80187b4:	2300      	movcs	r3, #0
 80187b6:	210d      	movs	r1, #13
 80187b8:	a808      	add	r0, sp, #32
 80187ba:	f7ff fe83 	bl	80184c4 <uxr_buffer_submessage_header>
 80187be:	8921      	ldrh	r1, [r4, #8]
 80187c0:	fbb7 f2f1 	udiv	r2, r7, r1
 80187c4:	fb01 7212 	mls	r2, r1, r2, r7
 80187c8:	b292      	uxth	r2, r2
 80187ca:	6863      	ldr	r3, [r4, #4]
 80187cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80187d0:	fb02 f303 	mul.w	r3, r2, r3
 80187d4:	6822      	ldr	r2, [r4, #0]
 80187d6:	4638      	mov	r0, r7
 80187d8:	f842 b003 	str.w	fp, [r2, r3]
 80187dc:	2101      	movs	r1, #1
 80187de:	f003 fbc5 	bl	801bf6c <uxr_seq_num_add>
 80187e2:	9b03      	ldr	r3, [sp, #12]
 80187e4:	f108 0104 	add.w	r1, r8, #4
 80187e8:	f1a3 0208 	sub.w	r2, r3, #8
 80187ec:	eba2 0208 	sub.w	r2, r2, r8
 80187f0:	4449      	add	r1, r9
 80187f2:	4607      	mov	r7, r0
 80187f4:	4630      	mov	r0, r6
 80187f6:	f7f6 ff1b 	bl	800f630 <ucdr_init_buffer>
 80187fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80187fc:	81e7      	strh	r7, [r4, #14]
 80187fe:	1d1a      	adds	r2, r3, #4
 8018800:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8018804:	bf28      	it	cs
 8018806:	2200      	movcs	r2, #0
 8018808:	2300      	movs	r3, #0
 801880a:	b292      	uxth	r2, r2
 801880c:	2107      	movs	r1, #7
 801880e:	4630      	mov	r0, r6
 8018810:	f7ff fe58 	bl	80184c4 <uxr_buffer_submessage_header>
 8018814:	9904      	ldr	r1, [sp, #16]
 8018816:	aa07      	add	r2, sp, #28
 8018818:	4628      	mov	r0, r5
 801881a:	f7ff f859 	bl	80178d0 <uxr_init_base_object_request>
 801881e:	4604      	mov	r4, r0
 8018820:	b318      	cbz	r0, 801886a <uxr_prepare_output_stream_fragmented+0x146>
 8018822:	a907      	add	r1, sp, #28
 8018824:	4630      	mov	r0, r6
 8018826:	f000 fff9 	bl	801981c <uxr_serialize_WRITE_DATA_Payload_Data>
 801882a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801882e:	4630      	mov	r0, r6
 8018830:	1a52      	subs	r2, r2, r1
 8018832:	f7f6 fefd 	bl	800f630 <ucdr_init_buffer>
 8018836:	9b05      	ldr	r3, [sp, #20]
 8018838:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801883c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801883e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8018842:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8018844:	491b      	ldr	r1, [pc, #108]	@ (80188b4 <uxr_prepare_output_stream_fragmented+0x190>)
 8018846:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801884a:	4630      	mov	r0, r6
 801884c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8018850:	462a      	mov	r2, r5
 8018852:	f7f6 fec1 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 8018856:	4620      	mov	r0, r4
 8018858:	b011      	add	sp, #68	@ 0x44
 801885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801885e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8018860:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018862:	4628      	mov	r0, r5
 8018864:	4798      	blx	r3
 8018866:	b920      	cbnz	r0, 8018872 <uxr_prepare_output_stream_fragmented+0x14e>
 8018868:	2400      	movs	r4, #0
 801886a:	4620      	mov	r0, r4
 801886c:	b011      	add	sp, #68	@ 0x44
 801886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018872:	4620      	mov	r0, r4
 8018874:	f003 fb5a 	bl	801bf2c <get_available_free_slots>
 8018878:	2800      	cmp	r0, #0
 801887a:	f47f af6d 	bne.w	8018758 <uxr_prepare_output_stream_fragmented+0x34>
 801887e:	e7f3      	b.n	8018868 <uxr_prepare_output_stream_fragmented+0x144>
 8018880:	4638      	mov	r0, r7
 8018882:	2101      	movs	r1, #1
 8018884:	f003 fb72 	bl	801bf6c <uxr_seq_num_add>
 8018888:	8921      	ldrh	r1, [r4, #8]
 801888a:	fbb0 f2f1 	udiv	r2, r0, r1
 801888e:	fb01 0912 	mls	r9, r1, r2, r0
 8018892:	fa1f f289 	uxth.w	r2, r9
 8018896:	6863      	ldr	r3, [r4, #4]
 8018898:	fbb3 f9f1 	udiv	r9, r3, r1
 801889c:	6823      	ldr	r3, [r4, #0]
 801889e:	fb02 f909 	mul.w	r9, r2, r9
 80188a2:	f109 0904 	add.w	r9, r9, #4
 80188a6:	4499      	add	r9, r3
 80188a8:	4607      	mov	r7, r0
 80188aa:	7b23      	ldrb	r3, [r4, #12]
 80188ac:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80188b0:	e76b      	b.n	801878a <uxr_prepare_output_stream_fragmented+0x66>
 80188b2:	bf00      	nop
 80188b4:	080185b1 	.word	0x080185b1

080188b8 <uxr_serialize_message_header>:
 80188b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188ba:	b083      	sub	sp, #12
 80188bc:	4616      	mov	r6, r2
 80188be:	4604      	mov	r4, r0
 80188c0:	9301      	str	r3, [sp, #4]
 80188c2:	460d      	mov	r5, r1
 80188c4:	9f08      	ldr	r7, [sp, #32]
 80188c6:	f7f5 fbd1 	bl	800e06c <ucdr_serialize_uint8_t>
 80188ca:	4631      	mov	r1, r6
 80188cc:	4620      	mov	r0, r4
 80188ce:	f7f5 fbcd 	bl	800e06c <ucdr_serialize_uint8_t>
 80188d2:	9a01      	ldr	r2, [sp, #4]
 80188d4:	2101      	movs	r1, #1
 80188d6:	4620      	mov	r0, r4
 80188d8:	f7f5 fc74 	bl	800e1c4 <ucdr_serialize_endian_uint16_t>
 80188dc:	062b      	lsls	r3, r5, #24
 80188de:	d501      	bpl.n	80188e4 <uxr_serialize_message_header+0x2c>
 80188e0:	b003      	add	sp, #12
 80188e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188e4:	2204      	movs	r2, #4
 80188e6:	4639      	mov	r1, r7
 80188e8:	4620      	mov	r0, r4
 80188ea:	b003      	add	sp, #12
 80188ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80188f0:	f7fd b936 	b.w	8015b60 <ucdr_serialize_array_uint8_t>

080188f4 <uxr_deserialize_message_header>:
 80188f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188f6:	b083      	sub	sp, #12
 80188f8:	4616      	mov	r6, r2
 80188fa:	4604      	mov	r4, r0
 80188fc:	9301      	str	r3, [sp, #4]
 80188fe:	460d      	mov	r5, r1
 8018900:	9f08      	ldr	r7, [sp, #32]
 8018902:	f7f5 fbc9 	bl	800e098 <ucdr_deserialize_uint8_t>
 8018906:	4631      	mov	r1, r6
 8018908:	4620      	mov	r0, r4
 801890a:	f7f5 fbc5 	bl	800e098 <ucdr_deserialize_uint8_t>
 801890e:	9a01      	ldr	r2, [sp, #4]
 8018910:	2101      	movs	r1, #1
 8018912:	4620      	mov	r0, r4
 8018914:	f7f5 fd4a 	bl	800e3ac <ucdr_deserialize_endian_uint16_t>
 8018918:	f995 3000 	ldrsb.w	r3, [r5]
 801891c:	2b00      	cmp	r3, #0
 801891e:	da01      	bge.n	8018924 <uxr_deserialize_message_header+0x30>
 8018920:	b003      	add	sp, #12
 8018922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018924:	2204      	movs	r2, #4
 8018926:	4639      	mov	r1, r7
 8018928:	4620      	mov	r0, r4
 801892a:	b003      	add	sp, #12
 801892c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018930:	f7fd b97a 	b.w	8015c28 <ucdr_deserialize_array_uint8_t>

08018934 <uxr_serialize_submessage_header>:
 8018934:	b530      	push	{r4, r5, lr}
 8018936:	b083      	sub	sp, #12
 8018938:	4615      	mov	r5, r2
 801893a:	4604      	mov	r4, r0
 801893c:	9301      	str	r3, [sp, #4]
 801893e:	f7f5 fb95 	bl	800e06c <ucdr_serialize_uint8_t>
 8018942:	4629      	mov	r1, r5
 8018944:	4620      	mov	r0, r4
 8018946:	f7f5 fb91 	bl	800e06c <ucdr_serialize_uint8_t>
 801894a:	9a01      	ldr	r2, [sp, #4]
 801894c:	2101      	movs	r1, #1
 801894e:	4620      	mov	r0, r4
 8018950:	b003      	add	sp, #12
 8018952:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018956:	f7f5 bc35 	b.w	800e1c4 <ucdr_serialize_endian_uint16_t>
 801895a:	bf00      	nop

0801895c <uxr_deserialize_submessage_header>:
 801895c:	b530      	push	{r4, r5, lr}
 801895e:	b083      	sub	sp, #12
 8018960:	4615      	mov	r5, r2
 8018962:	4604      	mov	r4, r0
 8018964:	9301      	str	r3, [sp, #4]
 8018966:	f7f5 fb97 	bl	800e098 <ucdr_deserialize_uint8_t>
 801896a:	4629      	mov	r1, r5
 801896c:	4620      	mov	r0, r4
 801896e:	f7f5 fb93 	bl	800e098 <ucdr_deserialize_uint8_t>
 8018972:	9a01      	ldr	r2, [sp, #4]
 8018974:	2101      	movs	r1, #1
 8018976:	4620      	mov	r0, r4
 8018978:	b003      	add	sp, #12
 801897a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801897e:	f7f5 bd15 	b.w	800e3ac <ucdr_deserialize_endian_uint16_t>
 8018982:	bf00      	nop

08018984 <uxr_serialize_CLIENT_Representation>:
 8018984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018988:	2204      	movs	r2, #4
 801898a:	460e      	mov	r6, r1
 801898c:	4605      	mov	r5, r0
 801898e:	f7fd f8e7 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8018992:	2202      	movs	r2, #2
 8018994:	4607      	mov	r7, r0
 8018996:	1d31      	adds	r1, r6, #4
 8018998:	4628      	mov	r0, r5
 801899a:	f7fd f8e1 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801899e:	4038      	ands	r0, r7
 80189a0:	2202      	movs	r2, #2
 80189a2:	1db1      	adds	r1, r6, #6
 80189a4:	b2c7      	uxtb	r7, r0
 80189a6:	4628      	mov	r0, r5
 80189a8:	f7fd f8da 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 80189ac:	2204      	movs	r2, #4
 80189ae:	4007      	ands	r7, r0
 80189b0:	f106 0108 	add.w	r1, r6, #8
 80189b4:	4628      	mov	r0, r5
 80189b6:	f7fd f8d3 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 80189ba:	7b31      	ldrb	r1, [r6, #12]
 80189bc:	4007      	ands	r7, r0
 80189be:	4628      	mov	r0, r5
 80189c0:	f7f5 fb54 	bl	800e06c <ucdr_serialize_uint8_t>
 80189c4:	7b71      	ldrb	r1, [r6, #13]
 80189c6:	4007      	ands	r7, r0
 80189c8:	4628      	mov	r0, r5
 80189ca:	f7f5 fb21 	bl	800e010 <ucdr_serialize_bool>
 80189ce:	7b73      	ldrb	r3, [r6, #13]
 80189d0:	ea07 0800 	and.w	r8, r7, r0
 80189d4:	b93b      	cbnz	r3, 80189e6 <uxr_serialize_CLIENT_Representation+0x62>
 80189d6:	8bb1      	ldrh	r1, [r6, #28]
 80189d8:	4628      	mov	r0, r5
 80189da:	f7f5 fb73 	bl	800e0c4 <ucdr_serialize_uint16_t>
 80189de:	ea08 0000 	and.w	r0, r8, r0
 80189e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189e6:	6931      	ldr	r1, [r6, #16]
 80189e8:	4628      	mov	r0, r5
 80189ea:	f7f5 fd55 	bl	800e498 <ucdr_serialize_uint32_t>
 80189ee:	6933      	ldr	r3, [r6, #16]
 80189f0:	b1e3      	cbz	r3, 8018a2c <uxr_serialize_CLIENT_Representation+0xa8>
 80189f2:	b1c0      	cbz	r0, 8018a26 <uxr_serialize_CLIENT_Representation+0xa2>
 80189f4:	4637      	mov	r7, r6
 80189f6:	f04f 0900 	mov.w	r9, #0
 80189fa:	e001      	b.n	8018a00 <uxr_serialize_CLIENT_Representation+0x7c>
 80189fc:	3708      	adds	r7, #8
 80189fe:	b194      	cbz	r4, 8018a26 <uxr_serialize_CLIENT_Representation+0xa2>
 8018a00:	6979      	ldr	r1, [r7, #20]
 8018a02:	4628      	mov	r0, r5
 8018a04:	f002 fd52 	bl	801b4ac <ucdr_serialize_string>
 8018a08:	69b9      	ldr	r1, [r7, #24]
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	4628      	mov	r0, r5
 8018a0e:	f002 fd4d 	bl	801b4ac <ucdr_serialize_string>
 8018a12:	6933      	ldr	r3, [r6, #16]
 8018a14:	f109 0901 	add.w	r9, r9, #1
 8018a18:	4004      	ands	r4, r0
 8018a1a:	4599      	cmp	r9, r3
 8018a1c:	b2e4      	uxtb	r4, r4
 8018a1e:	d3ed      	bcc.n	80189fc <uxr_serialize_CLIENT_Representation+0x78>
 8018a20:	ea08 0804 	and.w	r8, r8, r4
 8018a24:	e7d7      	b.n	80189d6 <uxr_serialize_CLIENT_Representation+0x52>
 8018a26:	f04f 0800 	mov.w	r8, #0
 8018a2a:	e7d4      	b.n	80189d6 <uxr_serialize_CLIENT_Representation+0x52>
 8018a2c:	ea08 0800 	and.w	r8, r8, r0
 8018a30:	e7d1      	b.n	80189d6 <uxr_serialize_CLIENT_Representation+0x52>
 8018a32:	bf00      	nop

08018a34 <uxr_deserialize_CLIENT_Representation>:
 8018a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a38:	2204      	movs	r2, #4
 8018a3a:	460c      	mov	r4, r1
 8018a3c:	4605      	mov	r5, r0
 8018a3e:	f7fd f8f3 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8018a42:	2202      	movs	r2, #2
 8018a44:	4607      	mov	r7, r0
 8018a46:	1d21      	adds	r1, r4, #4
 8018a48:	4628      	mov	r0, r5
 8018a4a:	f7fd f8ed 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8018a4e:	4038      	ands	r0, r7
 8018a50:	2202      	movs	r2, #2
 8018a52:	1da1      	adds	r1, r4, #6
 8018a54:	b2c6      	uxtb	r6, r0
 8018a56:	4628      	mov	r0, r5
 8018a58:	f7fd f8e6 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8018a5c:	2204      	movs	r2, #4
 8018a5e:	4006      	ands	r6, r0
 8018a60:	f104 0108 	add.w	r1, r4, #8
 8018a64:	4628      	mov	r0, r5
 8018a66:	f7fd f8df 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8018a6a:	f104 010c 	add.w	r1, r4, #12
 8018a6e:	4006      	ands	r6, r0
 8018a70:	4628      	mov	r0, r5
 8018a72:	f7f5 fb11 	bl	800e098 <ucdr_deserialize_uint8_t>
 8018a76:	f104 010d 	add.w	r1, r4, #13
 8018a7a:	ea06 0700 	and.w	r7, r6, r0
 8018a7e:	4628      	mov	r0, r5
 8018a80:	f7f5 fadc 	bl	800e03c <ucdr_deserialize_bool>
 8018a84:	7b63      	ldrb	r3, [r4, #13]
 8018a86:	4007      	ands	r7, r0
 8018a88:	b93b      	cbnz	r3, 8018a9a <uxr_deserialize_CLIENT_Representation+0x66>
 8018a8a:	f104 011c 	add.w	r1, r4, #28
 8018a8e:	4628      	mov	r0, r5
 8018a90:	f7f5 fc18 	bl	800e2c4 <ucdr_deserialize_uint16_t>
 8018a94:	4038      	ands	r0, r7
 8018a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a9a:	f104 0110 	add.w	r1, r4, #16
 8018a9e:	4628      	mov	r0, r5
 8018aa0:	f7f5 fe2a 	bl	800e6f8 <ucdr_deserialize_uint32_t>
 8018aa4:	6923      	ldr	r3, [r4, #16]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d903      	bls.n	8018ab2 <uxr_deserialize_CLIENT_Representation+0x7e>
 8018aaa:	2301      	movs	r3, #1
 8018aac:	75ab      	strb	r3, [r5, #22]
 8018aae:	2700      	movs	r7, #0
 8018ab0:	e7eb      	b.n	8018a8a <uxr_deserialize_CLIENT_Representation+0x56>
 8018ab2:	b30b      	cbz	r3, 8018af8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d0fa      	beq.n	8018aae <uxr_deserialize_CLIENT_Representation+0x7a>
 8018ab8:	46a0      	mov	r8, r4
 8018aba:	f04f 0900 	mov.w	r9, #0
 8018abe:	e001      	b.n	8018ac4 <uxr_deserialize_CLIENT_Representation+0x90>
 8018ac0:	2e00      	cmp	r6, #0
 8018ac2:	d0f4      	beq.n	8018aae <uxr_deserialize_CLIENT_Representation+0x7a>
 8018ac4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8018ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018acc:	4628      	mov	r0, r5
 8018ace:	f002 fcfd 	bl	801b4cc <ucdr_deserialize_string>
 8018ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8018adc:	4628      	mov	r0, r5
 8018ade:	f002 fcf5 	bl	801b4cc <ucdr_deserialize_string>
 8018ae2:	6923      	ldr	r3, [r4, #16]
 8018ae4:	f109 0901 	add.w	r9, r9, #1
 8018ae8:	4006      	ands	r6, r0
 8018aea:	4599      	cmp	r9, r3
 8018aec:	f108 0808 	add.w	r8, r8, #8
 8018af0:	b2f6      	uxtb	r6, r6
 8018af2:	d3e5      	bcc.n	8018ac0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8018af4:	4037      	ands	r7, r6
 8018af6:	e7c8      	b.n	8018a8a <uxr_deserialize_CLIENT_Representation+0x56>
 8018af8:	4007      	ands	r7, r0
 8018afa:	e7c6      	b.n	8018a8a <uxr_deserialize_CLIENT_Representation+0x56>

08018afc <uxr_serialize_AGENT_Representation>:
 8018afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b00:	2204      	movs	r2, #4
 8018b02:	460f      	mov	r7, r1
 8018b04:	4605      	mov	r5, r0
 8018b06:	f7fd f82b 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8018b0a:	2202      	movs	r2, #2
 8018b0c:	4604      	mov	r4, r0
 8018b0e:	1d39      	adds	r1, r7, #4
 8018b10:	4628      	mov	r0, r5
 8018b12:	f7fd f825 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8018b16:	4020      	ands	r0, r4
 8018b18:	2202      	movs	r2, #2
 8018b1a:	1db9      	adds	r1, r7, #6
 8018b1c:	b2c4      	uxtb	r4, r0
 8018b1e:	4628      	mov	r0, r5
 8018b20:	f7fd f81e 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8018b24:	7a39      	ldrb	r1, [r7, #8]
 8018b26:	4004      	ands	r4, r0
 8018b28:	4628      	mov	r0, r5
 8018b2a:	f7f5 fa71 	bl	800e010 <ucdr_serialize_bool>
 8018b2e:	7a3b      	ldrb	r3, [r7, #8]
 8018b30:	ea00 0804 	and.w	r8, r0, r4
 8018b34:	b913      	cbnz	r3, 8018b3c <uxr_serialize_AGENT_Representation+0x40>
 8018b36:	4640      	mov	r0, r8
 8018b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b3c:	68f9      	ldr	r1, [r7, #12]
 8018b3e:	4628      	mov	r0, r5
 8018b40:	f7f5 fcaa 	bl	800e498 <ucdr_serialize_uint32_t>
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	b303      	cbz	r3, 8018b8a <uxr_serialize_AGENT_Representation+0x8e>
 8018b48:	b1d0      	cbz	r0, 8018b80 <uxr_serialize_AGENT_Representation+0x84>
 8018b4a:	463e      	mov	r6, r7
 8018b4c:	f04f 0900 	mov.w	r9, #0
 8018b50:	e001      	b.n	8018b56 <uxr_serialize_AGENT_Representation+0x5a>
 8018b52:	3608      	adds	r6, #8
 8018b54:	b1a4      	cbz	r4, 8018b80 <uxr_serialize_AGENT_Representation+0x84>
 8018b56:	6931      	ldr	r1, [r6, #16]
 8018b58:	4628      	mov	r0, r5
 8018b5a:	f002 fca7 	bl	801b4ac <ucdr_serialize_string>
 8018b5e:	6971      	ldr	r1, [r6, #20]
 8018b60:	4604      	mov	r4, r0
 8018b62:	4628      	mov	r0, r5
 8018b64:	f002 fca2 	bl	801b4ac <ucdr_serialize_string>
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	f109 0901 	add.w	r9, r9, #1
 8018b6e:	4004      	ands	r4, r0
 8018b70:	4599      	cmp	r9, r3
 8018b72:	b2e4      	uxtb	r4, r4
 8018b74:	d3ed      	bcc.n	8018b52 <uxr_serialize_AGENT_Representation+0x56>
 8018b76:	ea08 0804 	and.w	r8, r8, r4
 8018b7a:	4640      	mov	r0, r8
 8018b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b80:	f04f 0800 	mov.w	r8, #0
 8018b84:	4640      	mov	r0, r8
 8018b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b8a:	ea08 0800 	and.w	r8, r8, r0
 8018b8e:	e7d2      	b.n	8018b36 <uxr_serialize_AGENT_Representation+0x3a>

08018b90 <uxr_serialize_DATAWRITER_Representation>:
 8018b90:	b570      	push	{r4, r5, r6, lr}
 8018b92:	460d      	mov	r5, r1
 8018b94:	7809      	ldrb	r1, [r1, #0]
 8018b96:	4606      	mov	r6, r0
 8018b98:	f7f5 fa68 	bl	800e06c <ucdr_serialize_uint8_t>
 8018b9c:	4604      	mov	r4, r0
 8018b9e:	b130      	cbz	r0, 8018bae <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018ba0:	782b      	ldrb	r3, [r5, #0]
 8018ba2:	2b02      	cmp	r3, #2
 8018ba4:	d00c      	beq.n	8018bc0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8018ba6:	2b03      	cmp	r3, #3
 8018ba8:	d010      	beq.n	8018bcc <uxr_serialize_DATAWRITER_Representation+0x3c>
 8018baa:	2b01      	cmp	r3, #1
 8018bac:	d008      	beq.n	8018bc0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8018bae:	2202      	movs	r2, #2
 8018bb0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8018bb4:	4630      	mov	r0, r6
 8018bb6:	f7fc ffd3 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8018bba:	4020      	ands	r0, r4
 8018bbc:	b2c0      	uxtb	r0, r0
 8018bbe:	bd70      	pop	{r4, r5, r6, pc}
 8018bc0:	6869      	ldr	r1, [r5, #4]
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	f002 fc72 	bl	801b4ac <ucdr_serialize_string>
 8018bc8:	4604      	mov	r4, r0
 8018bca:	e7f0      	b.n	8018bae <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018bcc:	4629      	mov	r1, r5
 8018bce:	4630      	mov	r0, r6
 8018bd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8018bd4:	3104      	adds	r1, #4
 8018bd6:	f7fd f961 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 8018bda:	4604      	mov	r4, r0
 8018bdc:	e7e7      	b.n	8018bae <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018bde:	bf00      	nop

08018be0 <uxr_serialize_ObjectVariant.part.0>:
 8018be0:	b570      	push	{r4, r5, r6, lr}
 8018be2:	780b      	ldrb	r3, [r1, #0]
 8018be4:	3b01      	subs	r3, #1
 8018be6:	460c      	mov	r4, r1
 8018be8:	4605      	mov	r5, r0
 8018bea:	2b0d      	cmp	r3, #13
 8018bec:	d854      	bhi.n	8018c98 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8018bee:	e8df f003 	tbb	[pc, r3]
 8018bf2:	0730      	.short	0x0730
 8018bf4:	07071b1b 	.word	0x07071b1b
 8018bf8:	0c530707 	.word	0x0c530707
 8018bfc:	494e0c0c 	.word	0x494e0c0c
 8018c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c04:	3104      	adds	r1, #4
 8018c06:	f7ff bfc3 	b.w	8018b90 <uxr_serialize_DATAWRITER_Representation>
 8018c0a:	7909      	ldrb	r1, [r1, #4]
 8018c0c:	f7f5 fa2e 	bl	800e06c <ucdr_serialize_uint8_t>
 8018c10:	b1e8      	cbz	r0, 8018c4e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8018c12:	7923      	ldrb	r3, [r4, #4]
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d001      	beq.n	8018c1c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8018c18:	2b02      	cmp	r3, #2
 8018c1a:	d13d      	bne.n	8018c98 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8018c1c:	68a1      	ldr	r1, [r4, #8]
 8018c1e:	4628      	mov	r0, r5
 8018c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c24:	f002 bc42 	b.w	801b4ac <ucdr_serialize_string>
 8018c28:	7909      	ldrb	r1, [r1, #4]
 8018c2a:	f7f5 fa1f 	bl	800e06c <ucdr_serialize_uint8_t>
 8018c2e:	4606      	mov	r6, r0
 8018c30:	b120      	cbz	r0, 8018c3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018c32:	7923      	ldrb	r3, [r4, #4]
 8018c34:	2b02      	cmp	r3, #2
 8018c36:	d039      	beq.n	8018cac <uxr_serialize_ObjectVariant.part.0+0xcc>
 8018c38:	2b03      	cmp	r3, #3
 8018c3a:	d02f      	beq.n	8018c9c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8018c3c:	2202      	movs	r2, #2
 8018c3e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8018c42:	4628      	mov	r0, r5
 8018c44:	f7fc ff8c 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8018c48:	4030      	ands	r0, r6
 8018c4a:	b2c0      	uxtb	r0, r0
 8018c4c:	bd70      	pop	{r4, r5, r6, pc}
 8018c4e:	2000      	movs	r0, #0
 8018c50:	bd70      	pop	{r4, r5, r6, pc}
 8018c52:	7909      	ldrb	r1, [r1, #4]
 8018c54:	f7f5 fa0a 	bl	800e06c <ucdr_serialize_uint8_t>
 8018c58:	4606      	mov	r6, r0
 8018c5a:	b158      	cbz	r0, 8018c74 <uxr_serialize_ObjectVariant.part.0+0x94>
 8018c5c:	7923      	ldrb	r3, [r4, #4]
 8018c5e:	2b02      	cmp	r3, #2
 8018c60:	d003      	beq.n	8018c6a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8018c62:	2b03      	cmp	r3, #3
 8018c64:	d028      	beq.n	8018cb8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d104      	bne.n	8018c74 <uxr_serialize_ObjectVariant.part.0+0x94>
 8018c6a:	68a1      	ldr	r1, [r4, #8]
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	f002 fc1d 	bl	801b4ac <ucdr_serialize_string>
 8018c72:	4606      	mov	r6, r0
 8018c74:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8018c78:	4628      	mov	r0, r5
 8018c7a:	f7f5 ff33 	bl	800eae4 <ucdr_serialize_int16_t>
 8018c7e:	4030      	ands	r0, r6
 8018c80:	b2c0      	uxtb	r0, r0
 8018c82:	bd70      	pop	{r4, r5, r6, pc}
 8018c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c88:	3104      	adds	r1, #4
 8018c8a:	f7ff be7b 	b.w	8018984 <uxr_serialize_CLIENT_Representation>
 8018c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c92:	3104      	adds	r1, #4
 8018c94:	f7ff bf32 	b.w	8018afc <uxr_serialize_AGENT_Representation>
 8018c98:	2001      	movs	r0, #1
 8018c9a:	bd70      	pop	{r4, r5, r6, pc}
 8018c9c:	68a2      	ldr	r2, [r4, #8]
 8018c9e:	f104 010c 	add.w	r1, r4, #12
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	f7fd f8fa 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 8018ca8:	4606      	mov	r6, r0
 8018caa:	e7c7      	b.n	8018c3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018cac:	68a1      	ldr	r1, [r4, #8]
 8018cae:	4628      	mov	r0, r5
 8018cb0:	f002 fbfc 	bl	801b4ac <ucdr_serialize_string>
 8018cb4:	4606      	mov	r6, r0
 8018cb6:	e7c1      	b.n	8018c3c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018cb8:	68a2      	ldr	r2, [r4, #8]
 8018cba:	f104 010c 	add.w	r1, r4, #12
 8018cbe:	4628      	mov	r0, r5
 8018cc0:	f7fd f8ec 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 8018cc4:	4606      	mov	r6, r0
 8018cc6:	e7d5      	b.n	8018c74 <uxr_serialize_ObjectVariant.part.0+0x94>

08018cc8 <uxr_deserialize_DATAWRITER_Representation>:
 8018cc8:	b570      	push	{r4, r5, r6, lr}
 8018cca:	4606      	mov	r6, r0
 8018ccc:	460d      	mov	r5, r1
 8018cce:	f7f5 f9e3 	bl	800e098 <ucdr_deserialize_uint8_t>
 8018cd2:	4604      	mov	r4, r0
 8018cd4:	b130      	cbz	r0, 8018ce4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8018cd6:	782b      	ldrb	r3, [r5, #0]
 8018cd8:	2b02      	cmp	r3, #2
 8018cda:	d00c      	beq.n	8018cf6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8018cdc:	2b03      	cmp	r3, #3
 8018cde:	d012      	beq.n	8018d06 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8018ce0:	2b01      	cmp	r3, #1
 8018ce2:	d008      	beq.n	8018cf6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8018ce4:	2202      	movs	r2, #2
 8018ce6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8018cea:	4630      	mov	r0, r6
 8018cec:	f7fc ff9c 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8018cf0:	4020      	ands	r0, r4
 8018cf2:	b2c0      	uxtb	r0, r0
 8018cf4:	bd70      	pop	{r4, r5, r6, pc}
 8018cf6:	6869      	ldr	r1, [r5, #4]
 8018cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018cfc:	4630      	mov	r0, r6
 8018cfe:	f002 fbe5 	bl	801b4cc <ucdr_deserialize_string>
 8018d02:	4604      	mov	r4, r0
 8018d04:	e7ee      	b.n	8018ce4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8018d06:	1d2b      	adds	r3, r5, #4
 8018d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018d0c:	f105 0108 	add.w	r1, r5, #8
 8018d10:	4630      	mov	r0, r6
 8018d12:	f7fd f8d5 	bl	8015ec0 <ucdr_deserialize_sequence_uint8_t>
 8018d16:	4604      	mov	r4, r0
 8018d18:	e7e4      	b.n	8018ce4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8018d1a:	bf00      	nop

08018d1c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8018d1c:	b570      	push	{r4, r5, r6, lr}
 8018d1e:	460d      	mov	r5, r1
 8018d20:	7809      	ldrb	r1, [r1, #0]
 8018d22:	4606      	mov	r6, r0
 8018d24:	f7f5 f974 	bl	800e010 <ucdr_serialize_bool>
 8018d28:	782b      	ldrb	r3, [r5, #0]
 8018d2a:	4604      	mov	r4, r0
 8018d2c:	b94b      	cbnz	r3, 8018d42 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8018d2e:	7a29      	ldrb	r1, [r5, #8]
 8018d30:	4630      	mov	r0, r6
 8018d32:	f7f5 f96d 	bl	800e010 <ucdr_serialize_bool>
 8018d36:	7a2b      	ldrb	r3, [r5, #8]
 8018d38:	4004      	ands	r4, r0
 8018d3a:	b2e4      	uxtb	r4, r4
 8018d3c:	b943      	cbnz	r3, 8018d50 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8018d3e:	4620      	mov	r0, r4
 8018d40:	bd70      	pop	{r4, r5, r6, pc}
 8018d42:	6869      	ldr	r1, [r5, #4]
 8018d44:	4630      	mov	r0, r6
 8018d46:	f002 fbb1 	bl	801b4ac <ucdr_serialize_string>
 8018d4a:	4004      	ands	r4, r0
 8018d4c:	b2e4      	uxtb	r4, r4
 8018d4e:	e7ee      	b.n	8018d2e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8018d50:	68e9      	ldr	r1, [r5, #12]
 8018d52:	4630      	mov	r0, r6
 8018d54:	f002 fbaa 	bl	801b4ac <ucdr_serialize_string>
 8018d58:	4004      	ands	r4, r0
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	bd70      	pop	{r4, r5, r6, pc}
 8018d5e:	bf00      	nop

08018d60 <uxr_serialize_OBJK_Topic_Binary>:
 8018d60:	b570      	push	{r4, r5, r6, lr}
 8018d62:	460d      	mov	r5, r1
 8018d64:	6809      	ldr	r1, [r1, #0]
 8018d66:	4606      	mov	r6, r0
 8018d68:	f002 fba0 	bl	801b4ac <ucdr_serialize_string>
 8018d6c:	7929      	ldrb	r1, [r5, #4]
 8018d6e:	4604      	mov	r4, r0
 8018d70:	4630      	mov	r0, r6
 8018d72:	f7f5 f94d 	bl	800e010 <ucdr_serialize_bool>
 8018d76:	792b      	ldrb	r3, [r5, #4]
 8018d78:	4004      	ands	r4, r0
 8018d7a:	b2e4      	uxtb	r4, r4
 8018d7c:	b943      	cbnz	r3, 8018d90 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8018d7e:	7b29      	ldrb	r1, [r5, #12]
 8018d80:	4630      	mov	r0, r6
 8018d82:	f7f5 f945 	bl	800e010 <ucdr_serialize_bool>
 8018d86:	7b2b      	ldrb	r3, [r5, #12]
 8018d88:	4004      	ands	r4, r0
 8018d8a:	b93b      	cbnz	r3, 8018d9c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8018d8c:	4620      	mov	r0, r4
 8018d8e:	bd70      	pop	{r4, r5, r6, pc}
 8018d90:	68a9      	ldr	r1, [r5, #8]
 8018d92:	4630      	mov	r0, r6
 8018d94:	f002 fb8a 	bl	801b4ac <ucdr_serialize_string>
 8018d98:	4004      	ands	r4, r0
 8018d9a:	e7f0      	b.n	8018d7e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8018d9c:	6929      	ldr	r1, [r5, #16]
 8018d9e:	4630      	mov	r0, r6
 8018da0:	f002 fb84 	bl	801b4ac <ucdr_serialize_string>
 8018da4:	4004      	ands	r4, r0
 8018da6:	b2e4      	uxtb	r4, r4
 8018da8:	4620      	mov	r0, r4
 8018daa:	bd70      	pop	{r4, r5, r6, pc}

08018dac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8018dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018db0:	460c      	mov	r4, r1
 8018db2:	7809      	ldrb	r1, [r1, #0]
 8018db4:	4606      	mov	r6, r0
 8018db6:	f7f5 f92b 	bl	800e010 <ucdr_serialize_bool>
 8018dba:	7823      	ldrb	r3, [r4, #0]
 8018dbc:	4605      	mov	r5, r0
 8018dbe:	b96b      	cbnz	r3, 8018ddc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8018dc0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8018dc4:	4630      	mov	r0, r6
 8018dc6:	f7f5 f923 	bl	800e010 <ucdr_serialize_bool>
 8018dca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018dce:	4005      	ands	r5, r0
 8018dd0:	b2ed      	uxtb	r5, r5
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d169      	bne.n	8018eaa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8018dd6:	4628      	mov	r0, r5
 8018dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ddc:	6861      	ldr	r1, [r4, #4]
 8018dde:	4630      	mov	r0, r6
 8018de0:	f7f5 fb5a 	bl	800e498 <ucdr_serialize_uint32_t>
 8018de4:	6863      	ldr	r3, [r4, #4]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d06b      	beq.n	8018ec2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8018dea:	2800      	cmp	r0, #0
 8018dec:	d067      	beq.n	8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018dee:	68a1      	ldr	r1, [r4, #8]
 8018df0:	4630      	mov	r0, r6
 8018df2:	f002 fb5b 	bl	801b4ac <ucdr_serialize_string>
 8018df6:	6863      	ldr	r3, [r4, #4]
 8018df8:	2b01      	cmp	r3, #1
 8018dfa:	d953      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	d05e      	beq.n	8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e00:	68e1      	ldr	r1, [r4, #12]
 8018e02:	4630      	mov	r0, r6
 8018e04:	f002 fb52 	bl	801b4ac <ucdr_serialize_string>
 8018e08:	6863      	ldr	r3, [r4, #4]
 8018e0a:	2b02      	cmp	r3, #2
 8018e0c:	d94a      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d055      	beq.n	8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e12:	6921      	ldr	r1, [r4, #16]
 8018e14:	4630      	mov	r0, r6
 8018e16:	f002 fb49 	bl	801b4ac <ucdr_serialize_string>
 8018e1a:	6863      	ldr	r3, [r4, #4]
 8018e1c:	2b03      	cmp	r3, #3
 8018e1e:	d941      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e20:	2800      	cmp	r0, #0
 8018e22:	d04c      	beq.n	8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e24:	6961      	ldr	r1, [r4, #20]
 8018e26:	4630      	mov	r0, r6
 8018e28:	f002 fb40 	bl	801b4ac <ucdr_serialize_string>
 8018e2c:	6863      	ldr	r3, [r4, #4]
 8018e2e:	2b04      	cmp	r3, #4
 8018e30:	d938      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e32:	2800      	cmp	r0, #0
 8018e34:	d043      	beq.n	8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e36:	69a1      	ldr	r1, [r4, #24]
 8018e38:	4630      	mov	r0, r6
 8018e3a:	f002 fb37 	bl	801b4ac <ucdr_serialize_string>
 8018e3e:	6863      	ldr	r3, [r4, #4]
 8018e40:	2b05      	cmp	r3, #5
 8018e42:	d92f      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e44:	2800      	cmp	r0, #0
 8018e46:	d03a      	beq.n	8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e48:	69e1      	ldr	r1, [r4, #28]
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	f002 fb2e 	bl	801b4ac <ucdr_serialize_string>
 8018e50:	6863      	ldr	r3, [r4, #4]
 8018e52:	2b06      	cmp	r3, #6
 8018e54:	d926      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e56:	b390      	cbz	r0, 8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e58:	6a21      	ldr	r1, [r4, #32]
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f002 fb26 	bl	801b4ac <ucdr_serialize_string>
 8018e60:	6863      	ldr	r3, [r4, #4]
 8018e62:	2b07      	cmp	r3, #7
 8018e64:	d91e      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e66:	b350      	cbz	r0, 8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8018e6a:	4630      	mov	r0, r6
 8018e6c:	f002 fb1e 	bl	801b4ac <ucdr_serialize_string>
 8018e70:	6863      	ldr	r3, [r4, #4]
 8018e72:	2b08      	cmp	r3, #8
 8018e74:	d916      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e76:	b310      	cbz	r0, 8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8018e7a:	4630      	mov	r0, r6
 8018e7c:	f002 fb16 	bl	801b4ac <ucdr_serialize_string>
 8018e80:	6863      	ldr	r3, [r4, #4]
 8018e82:	2b09      	cmp	r3, #9
 8018e84:	d90e      	bls.n	8018ea4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018e86:	b1d0      	cbz	r0, 8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e88:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8018e8c:	2709      	movs	r7, #9
 8018e8e:	e000      	b.n	8018e92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8018e90:	b1a8      	cbz	r0, 8018ebe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018e92:	f858 1b04 	ldr.w	r1, [r8], #4
 8018e96:	4630      	mov	r0, r6
 8018e98:	f002 fb08 	bl	801b4ac <ucdr_serialize_string>
 8018e9c:	6862      	ldr	r2, [r4, #4]
 8018e9e:	3701      	adds	r7, #1
 8018ea0:	4297      	cmp	r7, r2
 8018ea2:	d3f5      	bcc.n	8018e90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8018ea4:	4005      	ands	r5, r0
 8018ea6:	b2ed      	uxtb	r5, r5
 8018ea8:	e78a      	b.n	8018dc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8018eaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018eac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	f7fc fff3 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 8018eb6:	4005      	ands	r5, r0
 8018eb8:	4628      	mov	r0, r5
 8018eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ebe:	2500      	movs	r5, #0
 8018ec0:	e77e      	b.n	8018dc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8018ec2:	4028      	ands	r0, r5
 8018ec4:	b2c5      	uxtb	r5, r0
 8018ec6:	e77b      	b.n	8018dc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08018ec8 <uxr_serialize_OBJK_Publisher_Binary>:
 8018ec8:	b570      	push	{r4, r5, r6, lr}
 8018eca:	460d      	mov	r5, r1
 8018ecc:	7809      	ldrb	r1, [r1, #0]
 8018ece:	4606      	mov	r6, r0
 8018ed0:	f7f5 f89e 	bl	800e010 <ucdr_serialize_bool>
 8018ed4:	782b      	ldrb	r3, [r5, #0]
 8018ed6:	4604      	mov	r4, r0
 8018ed8:	b94b      	cbnz	r3, 8018eee <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8018eda:	7a29      	ldrb	r1, [r5, #8]
 8018edc:	4630      	mov	r0, r6
 8018ede:	f7f5 f897 	bl	800e010 <ucdr_serialize_bool>
 8018ee2:	7a2b      	ldrb	r3, [r5, #8]
 8018ee4:	4004      	ands	r4, r0
 8018ee6:	b2e4      	uxtb	r4, r4
 8018ee8:	b943      	cbnz	r3, 8018efc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8018eea:	4620      	mov	r0, r4
 8018eec:	bd70      	pop	{r4, r5, r6, pc}
 8018eee:	6869      	ldr	r1, [r5, #4]
 8018ef0:	4630      	mov	r0, r6
 8018ef2:	f002 fadb 	bl	801b4ac <ucdr_serialize_string>
 8018ef6:	4004      	ands	r4, r0
 8018ef8:	b2e4      	uxtb	r4, r4
 8018efa:	e7ee      	b.n	8018eda <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8018efc:	f105 010c 	add.w	r1, r5, #12
 8018f00:	4630      	mov	r0, r6
 8018f02:	f7ff ff53 	bl	8018dac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8018f06:	4004      	ands	r4, r0
 8018f08:	4620      	mov	r0, r4
 8018f0a:	bd70      	pop	{r4, r5, r6, pc}

08018f0c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8018f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f10:	460c      	mov	r4, r1
 8018f12:	7809      	ldrb	r1, [r1, #0]
 8018f14:	4606      	mov	r6, r0
 8018f16:	f7f5 f87b 	bl	800e010 <ucdr_serialize_bool>
 8018f1a:	7823      	ldrb	r3, [r4, #0]
 8018f1c:	4605      	mov	r5, r0
 8018f1e:	b96b      	cbnz	r3, 8018f3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8018f20:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8018f24:	4630      	mov	r0, r6
 8018f26:	f7f5 f873 	bl	800e010 <ucdr_serialize_bool>
 8018f2a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018f2e:	4005      	ands	r5, r0
 8018f30:	b2ed      	uxtb	r5, r5
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d169      	bne.n	801900a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8018f36:	4628      	mov	r0, r5
 8018f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f3c:	6861      	ldr	r1, [r4, #4]
 8018f3e:	4630      	mov	r0, r6
 8018f40:	f7f5 faaa 	bl	800e498 <ucdr_serialize_uint32_t>
 8018f44:	6863      	ldr	r3, [r4, #4]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d06b      	beq.n	8019022 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d067      	beq.n	801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018f4e:	68a1      	ldr	r1, [r4, #8]
 8018f50:	4630      	mov	r0, r6
 8018f52:	f002 faab 	bl	801b4ac <ucdr_serialize_string>
 8018f56:	6863      	ldr	r3, [r4, #4]
 8018f58:	2b01      	cmp	r3, #1
 8018f5a:	d953      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018f5c:	2800      	cmp	r0, #0
 8018f5e:	d05e      	beq.n	801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018f60:	68e1      	ldr	r1, [r4, #12]
 8018f62:	4630      	mov	r0, r6
 8018f64:	f002 faa2 	bl	801b4ac <ucdr_serialize_string>
 8018f68:	6863      	ldr	r3, [r4, #4]
 8018f6a:	2b02      	cmp	r3, #2
 8018f6c:	d94a      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018f6e:	2800      	cmp	r0, #0
 8018f70:	d055      	beq.n	801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018f72:	6921      	ldr	r1, [r4, #16]
 8018f74:	4630      	mov	r0, r6
 8018f76:	f002 fa99 	bl	801b4ac <ucdr_serialize_string>
 8018f7a:	6863      	ldr	r3, [r4, #4]
 8018f7c:	2b03      	cmp	r3, #3
 8018f7e:	d941      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018f80:	2800      	cmp	r0, #0
 8018f82:	d04c      	beq.n	801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018f84:	6961      	ldr	r1, [r4, #20]
 8018f86:	4630      	mov	r0, r6
 8018f88:	f002 fa90 	bl	801b4ac <ucdr_serialize_string>
 8018f8c:	6863      	ldr	r3, [r4, #4]
 8018f8e:	2b04      	cmp	r3, #4
 8018f90:	d938      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018f92:	2800      	cmp	r0, #0
 8018f94:	d043      	beq.n	801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018f96:	69a1      	ldr	r1, [r4, #24]
 8018f98:	4630      	mov	r0, r6
 8018f9a:	f002 fa87 	bl	801b4ac <ucdr_serialize_string>
 8018f9e:	6863      	ldr	r3, [r4, #4]
 8018fa0:	2b05      	cmp	r3, #5
 8018fa2:	d92f      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018fa4:	2800      	cmp	r0, #0
 8018fa6:	d03a      	beq.n	801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018fa8:	69e1      	ldr	r1, [r4, #28]
 8018faa:	4630      	mov	r0, r6
 8018fac:	f002 fa7e 	bl	801b4ac <ucdr_serialize_string>
 8018fb0:	6863      	ldr	r3, [r4, #4]
 8018fb2:	2b06      	cmp	r3, #6
 8018fb4:	d926      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018fb6:	b390      	cbz	r0, 801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018fb8:	6a21      	ldr	r1, [r4, #32]
 8018fba:	4630      	mov	r0, r6
 8018fbc:	f002 fa76 	bl	801b4ac <ucdr_serialize_string>
 8018fc0:	6863      	ldr	r3, [r4, #4]
 8018fc2:	2b07      	cmp	r3, #7
 8018fc4:	d91e      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018fc6:	b350      	cbz	r0, 801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018fc8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8018fca:	4630      	mov	r0, r6
 8018fcc:	f002 fa6e 	bl	801b4ac <ucdr_serialize_string>
 8018fd0:	6863      	ldr	r3, [r4, #4]
 8018fd2:	2b08      	cmp	r3, #8
 8018fd4:	d916      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018fd6:	b310      	cbz	r0, 801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018fd8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8018fda:	4630      	mov	r0, r6
 8018fdc:	f002 fa66 	bl	801b4ac <ucdr_serialize_string>
 8018fe0:	6863      	ldr	r3, [r4, #4]
 8018fe2:	2b09      	cmp	r3, #9
 8018fe4:	d90e      	bls.n	8019004 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018fe6:	b1d0      	cbz	r0, 801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018fe8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8018fec:	2709      	movs	r7, #9
 8018fee:	e000      	b.n	8018ff2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8018ff0:	b1a8      	cbz	r0, 801901e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018ff2:	f858 1b04 	ldr.w	r1, [r8], #4
 8018ff6:	4630      	mov	r0, r6
 8018ff8:	f002 fa58 	bl	801b4ac <ucdr_serialize_string>
 8018ffc:	6862      	ldr	r2, [r4, #4]
 8018ffe:	3701      	adds	r7, #1
 8019000:	4297      	cmp	r7, r2
 8019002:	d3f5      	bcc.n	8018ff0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8019004:	4005      	ands	r5, r0
 8019006:	b2ed      	uxtb	r5, r5
 8019008:	e78a      	b.n	8018f20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801900a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801900c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019010:	4630      	mov	r0, r6
 8019012:	f7fc ff43 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 8019016:	4005      	ands	r5, r0
 8019018:	4628      	mov	r0, r5
 801901a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801901e:	2500      	movs	r5, #0
 8019020:	e77e      	b.n	8018f20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019022:	4028      	ands	r0, r5
 8019024:	b2c5      	uxtb	r5, r0
 8019026:	e77b      	b.n	8018f20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019028 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019028:	b570      	push	{r4, r5, r6, lr}
 801902a:	460d      	mov	r5, r1
 801902c:	7809      	ldrb	r1, [r1, #0]
 801902e:	4606      	mov	r6, r0
 8019030:	f7f4 ffee 	bl	800e010 <ucdr_serialize_bool>
 8019034:	782b      	ldrb	r3, [r5, #0]
 8019036:	4604      	mov	r4, r0
 8019038:	b94b      	cbnz	r3, 801904e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801903a:	7a29      	ldrb	r1, [r5, #8]
 801903c:	4630      	mov	r0, r6
 801903e:	f7f4 ffe7 	bl	800e010 <ucdr_serialize_bool>
 8019042:	7a2b      	ldrb	r3, [r5, #8]
 8019044:	4004      	ands	r4, r0
 8019046:	b2e4      	uxtb	r4, r4
 8019048:	b943      	cbnz	r3, 801905c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801904a:	4620      	mov	r0, r4
 801904c:	bd70      	pop	{r4, r5, r6, pc}
 801904e:	6869      	ldr	r1, [r5, #4]
 8019050:	4630      	mov	r0, r6
 8019052:	f002 fa2b 	bl	801b4ac <ucdr_serialize_string>
 8019056:	4004      	ands	r4, r0
 8019058:	b2e4      	uxtb	r4, r4
 801905a:	e7ee      	b.n	801903a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801905c:	f105 010c 	add.w	r1, r5, #12
 8019060:	4630      	mov	r0, r6
 8019062:	f7ff ff53 	bl	8018f0c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8019066:	4004      	ands	r4, r0
 8019068:	4620      	mov	r0, r4
 801906a:	bd70      	pop	{r4, r5, r6, pc}

0801906c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801906c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019070:	4688      	mov	r8, r1
 8019072:	8809      	ldrh	r1, [r1, #0]
 8019074:	4681      	mov	r9, r0
 8019076:	f7f5 f825 	bl	800e0c4 <ucdr_serialize_uint16_t>
 801907a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801907e:	4606      	mov	r6, r0
 8019080:	4648      	mov	r0, r9
 8019082:	f7f4 ffc5 	bl	800e010 <ucdr_serialize_bool>
 8019086:	f898 3002 	ldrb.w	r3, [r8, #2]
 801908a:	4006      	ands	r6, r0
 801908c:	b2f5      	uxtb	r5, r6
 801908e:	b9eb      	cbnz	r3, 80190cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8019090:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019094:	4648      	mov	r0, r9
 8019096:	f7f4 ffbb 	bl	800e010 <ucdr_serialize_bool>
 801909a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801909e:	4005      	ands	r5, r0
 80190a0:	bb7b      	cbnz	r3, 8019102 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80190a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80190a6:	4648      	mov	r0, r9
 80190a8:	f7f4 ffb2 	bl	800e010 <ucdr_serialize_bool>
 80190ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 80190b0:	4005      	ands	r5, r0
 80190b2:	b9f3      	cbnz	r3, 80190f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80190b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80190b8:	4648      	mov	r0, r9
 80190ba:	f7f4 ffa9 	bl	800e010 <ucdr_serialize_bool>
 80190be:	f898 3014 	ldrb.w	r3, [r8, #20]
 80190c2:	4005      	ands	r5, r0
 80190c4:	b94b      	cbnz	r3, 80190da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80190c6:	4628      	mov	r0, r5
 80190c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80190cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80190d0:	4648      	mov	r0, r9
 80190d2:	f7f4 fff7 	bl	800e0c4 <ucdr_serialize_uint16_t>
 80190d6:	4005      	ands	r5, r0
 80190d8:	e7da      	b.n	8019090 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80190da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80190de:	f108 011c 	add.w	r1, r8, #28
 80190e2:	4648      	mov	r0, r9
 80190e4:	f7fc feda 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 80190e8:	4028      	ands	r0, r5
 80190ea:	b2c5      	uxtb	r5, r0
 80190ec:	4628      	mov	r0, r5
 80190ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80190f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80190f6:	4648      	mov	r0, r9
 80190f8:	f7f5 f9ce 	bl	800e498 <ucdr_serialize_uint32_t>
 80190fc:	4028      	ands	r0, r5
 80190fe:	b2c5      	uxtb	r5, r0
 8019100:	e7d8      	b.n	80190b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8019102:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019106:	4648      	mov	r0, r9
 8019108:	f7f5 f9c6 	bl	800e498 <ucdr_serialize_uint32_t>
 801910c:	4028      	ands	r0, r5
 801910e:	b2c5      	uxtb	r5, r0
 8019110:	e7c7      	b.n	80190a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8019112:	bf00      	nop

08019114 <uxr_serialize_OBJK_DataReader_Binary>:
 8019114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019116:	2202      	movs	r2, #2
 8019118:	460c      	mov	r4, r1
 801911a:	4606      	mov	r6, r0
 801911c:	f7fc fd20 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019120:	78a1      	ldrb	r1, [r4, #2]
 8019122:	4605      	mov	r5, r0
 8019124:	4630      	mov	r0, r6
 8019126:	f7f4 ff73 	bl	800e010 <ucdr_serialize_bool>
 801912a:	78a3      	ldrb	r3, [r4, #2]
 801912c:	4005      	ands	r5, r0
 801912e:	b2ed      	uxtb	r5, r5
 8019130:	b90b      	cbnz	r3, 8019136 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8019132:	4628      	mov	r0, r5
 8019134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019136:	f104 0108 	add.w	r1, r4, #8
 801913a:	4630      	mov	r0, r6
 801913c:	f7ff ff96 	bl	801906c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8019140:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019144:	4607      	mov	r7, r0
 8019146:	4630      	mov	r0, r6
 8019148:	f7f4 ff62 	bl	800e010 <ucdr_serialize_bool>
 801914c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019150:	4038      	ands	r0, r7
 8019152:	b2c7      	uxtb	r7, r0
 8019154:	b95b      	cbnz	r3, 801916e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8019156:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801915a:	4630      	mov	r0, r6
 801915c:	f7f4 ff58 	bl	800e010 <ucdr_serialize_bool>
 8019160:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8019164:	4007      	ands	r7, r0
 8019166:	b94b      	cbnz	r3, 801917c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8019168:	403d      	ands	r5, r7
 801916a:	4628      	mov	r0, r5
 801916c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801916e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8019172:	4630      	mov	r0, r6
 8019174:	f7f5 fbe6 	bl	800e944 <ucdr_serialize_uint64_t>
 8019178:	4007      	ands	r7, r0
 801917a:	e7ec      	b.n	8019156 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801917c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801917e:	4630      	mov	r0, r6
 8019180:	f002 f994 	bl	801b4ac <ucdr_serialize_string>
 8019184:	4007      	ands	r7, r0
 8019186:	b2ff      	uxtb	r7, r7
 8019188:	e7ee      	b.n	8019168 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801918a:	bf00      	nop

0801918c <uxr_serialize_OBJK_DataWriter_Binary>:
 801918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801918e:	2202      	movs	r2, #2
 8019190:	460d      	mov	r5, r1
 8019192:	4606      	mov	r6, r0
 8019194:	f7fc fce4 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019198:	78a9      	ldrb	r1, [r5, #2]
 801919a:	4604      	mov	r4, r0
 801919c:	4630      	mov	r0, r6
 801919e:	f7f4 ff37 	bl	800e010 <ucdr_serialize_bool>
 80191a2:	78ab      	ldrb	r3, [r5, #2]
 80191a4:	4004      	ands	r4, r0
 80191a6:	b2e4      	uxtb	r4, r4
 80191a8:	b90b      	cbnz	r3, 80191ae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80191aa:	4620      	mov	r0, r4
 80191ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ae:	f105 0108 	add.w	r1, r5, #8
 80191b2:	4630      	mov	r0, r6
 80191b4:	f7ff ff5a 	bl	801906c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80191b8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80191bc:	4607      	mov	r7, r0
 80191be:	4630      	mov	r0, r6
 80191c0:	f7f4 ff26 	bl	800e010 <ucdr_serialize_bool>
 80191c4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80191c8:	4038      	ands	r0, r7
 80191ca:	b2c7      	uxtb	r7, r0
 80191cc:	b913      	cbnz	r3, 80191d4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80191ce:	403c      	ands	r4, r7
 80191d0:	4620      	mov	r0, r4
 80191d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191d4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80191d8:	4630      	mov	r0, r6
 80191da:	f7f5 fbb3 	bl	800e944 <ucdr_serialize_uint64_t>
 80191de:	4007      	ands	r7, r0
 80191e0:	e7f5      	b.n	80191ce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80191e2:	bf00      	nop

080191e4 <uxr_deserialize_ObjectVariant>:
 80191e4:	b570      	push	{r4, r5, r6, lr}
 80191e6:	4605      	mov	r5, r0
 80191e8:	460e      	mov	r6, r1
 80191ea:	f7f4 ff55 	bl	800e098 <ucdr_deserialize_uint8_t>
 80191ee:	b168      	cbz	r0, 801920c <uxr_deserialize_ObjectVariant+0x28>
 80191f0:	7833      	ldrb	r3, [r6, #0]
 80191f2:	3b01      	subs	r3, #1
 80191f4:	4604      	mov	r4, r0
 80191f6:	2b0d      	cmp	r3, #13
 80191f8:	d809      	bhi.n	801920e <uxr_deserialize_ObjectVariant+0x2a>
 80191fa:	e8df f003 	tbb	[pc, r3]
 80191fe:	0a41      	.short	0x0a41
 8019200:	0a0a2323 	.word	0x0a0a2323
 8019204:	10080a0a 	.word	0x10080a0a
 8019208:	565c1010 	.word	0x565c1010
 801920c:	2400      	movs	r4, #0
 801920e:	4620      	mov	r0, r4
 8019210:	bd70      	pop	{r4, r5, r6, pc}
 8019212:	1d31      	adds	r1, r6, #4
 8019214:	4628      	mov	r0, r5
 8019216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801921a:	f7ff bd55 	b.w	8018cc8 <uxr_deserialize_DATAWRITER_Representation>
 801921e:	1d31      	adds	r1, r6, #4
 8019220:	4628      	mov	r0, r5
 8019222:	f7f4 ff39 	bl	800e098 <ucdr_deserialize_uint8_t>
 8019226:	2800      	cmp	r0, #0
 8019228:	d0f0      	beq.n	801920c <uxr_deserialize_ObjectVariant+0x28>
 801922a:	7933      	ldrb	r3, [r6, #4]
 801922c:	2b01      	cmp	r3, #1
 801922e:	d001      	beq.n	8019234 <uxr_deserialize_ObjectVariant+0x50>
 8019230:	2b02      	cmp	r3, #2
 8019232:	d1ec      	bne.n	801920e <uxr_deserialize_ObjectVariant+0x2a>
 8019234:	68b1      	ldr	r1, [r6, #8]
 8019236:	4628      	mov	r0, r5
 8019238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801923c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019240:	f002 b944 	b.w	801b4cc <ucdr_deserialize_string>
 8019244:	1d31      	adds	r1, r6, #4
 8019246:	4628      	mov	r0, r5
 8019248:	f7f4 ff26 	bl	800e098 <ucdr_deserialize_uint8_t>
 801924c:	4604      	mov	r4, r0
 801924e:	b170      	cbz	r0, 801926e <uxr_deserialize_ObjectVariant+0x8a>
 8019250:	7933      	ldrb	r3, [r6, #4]
 8019252:	2b02      	cmp	r3, #2
 8019254:	d04c      	beq.n	80192f0 <uxr_deserialize_ObjectVariant+0x10c>
 8019256:	2b03      	cmp	r3, #3
 8019258:	d109      	bne.n	801926e <uxr_deserialize_ObjectVariant+0x8a>
 801925a:	f106 0308 	add.w	r3, r6, #8
 801925e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019262:	f106 010c 	add.w	r1, r6, #12
 8019266:	4628      	mov	r0, r5
 8019268:	f7fc fe2a 	bl	8015ec0 <ucdr_deserialize_sequence_uint8_t>
 801926c:	4604      	mov	r4, r0
 801926e:	2202      	movs	r2, #2
 8019270:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8019274:	4628      	mov	r0, r5
 8019276:	f7fc fcd7 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801927a:	4020      	ands	r0, r4
 801927c:	b2c4      	uxtb	r4, r0
 801927e:	e7c6      	b.n	801920e <uxr_deserialize_ObjectVariant+0x2a>
 8019280:	1d31      	adds	r1, r6, #4
 8019282:	4628      	mov	r0, r5
 8019284:	f7f4 ff08 	bl	800e098 <ucdr_deserialize_uint8_t>
 8019288:	4604      	mov	r4, r0
 801928a:	b130      	cbz	r0, 801929a <uxr_deserialize_ObjectVariant+0xb6>
 801928c:	7933      	ldrb	r3, [r6, #4]
 801928e:	2b02      	cmp	r3, #2
 8019290:	d036      	beq.n	8019300 <uxr_deserialize_ObjectVariant+0x11c>
 8019292:	2b03      	cmp	r3, #3
 8019294:	d03c      	beq.n	8019310 <uxr_deserialize_ObjectVariant+0x12c>
 8019296:	2b01      	cmp	r3, #1
 8019298:	d032      	beq.n	8019300 <uxr_deserialize_ObjectVariant+0x11c>
 801929a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801929e:	4628      	mov	r0, r5
 80192a0:	f7f5 fca0 	bl	800ebe4 <ucdr_deserialize_int16_t>
 80192a4:	4020      	ands	r0, r4
 80192a6:	b2c4      	uxtb	r4, r0
 80192a8:	e7b1      	b.n	801920e <uxr_deserialize_ObjectVariant+0x2a>
 80192aa:	1d31      	adds	r1, r6, #4
 80192ac:	4628      	mov	r0, r5
 80192ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192b2:	f7ff bbbf 	b.w	8018a34 <uxr_deserialize_CLIENT_Representation>
 80192b6:	2204      	movs	r2, #4
 80192b8:	18b1      	adds	r1, r6, r2
 80192ba:	4628      	mov	r0, r5
 80192bc:	f7fc fcb4 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80192c0:	2202      	movs	r2, #2
 80192c2:	f106 0108 	add.w	r1, r6, #8
 80192c6:	4604      	mov	r4, r0
 80192c8:	4628      	mov	r0, r5
 80192ca:	f7fc fcad 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80192ce:	2202      	movs	r2, #2
 80192d0:	4004      	ands	r4, r0
 80192d2:	f106 010a 	add.w	r1, r6, #10
 80192d6:	4628      	mov	r0, r5
 80192d8:	f7fc fca6 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80192dc:	b2e4      	uxtb	r4, r4
 80192de:	4603      	mov	r3, r0
 80192e0:	f106 010c 	add.w	r1, r6, #12
 80192e4:	4628      	mov	r0, r5
 80192e6:	401c      	ands	r4, r3
 80192e8:	f7f4 fea8 	bl	800e03c <ucdr_deserialize_bool>
 80192ec:	4004      	ands	r4, r0
 80192ee:	e78e      	b.n	801920e <uxr_deserialize_ObjectVariant+0x2a>
 80192f0:	68b1      	ldr	r1, [r6, #8]
 80192f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80192f6:	4628      	mov	r0, r5
 80192f8:	f002 f8e8 	bl	801b4cc <ucdr_deserialize_string>
 80192fc:	4604      	mov	r4, r0
 80192fe:	e7b6      	b.n	801926e <uxr_deserialize_ObjectVariant+0x8a>
 8019300:	68b1      	ldr	r1, [r6, #8]
 8019302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019306:	4628      	mov	r0, r5
 8019308:	f002 f8e0 	bl	801b4cc <ucdr_deserialize_string>
 801930c:	4604      	mov	r4, r0
 801930e:	e7c4      	b.n	801929a <uxr_deserialize_ObjectVariant+0xb6>
 8019310:	f106 0308 	add.w	r3, r6, #8
 8019314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019318:	f106 010c 	add.w	r1, r6, #12
 801931c:	4628      	mov	r0, r5
 801931e:	f7fc fdcf 	bl	8015ec0 <ucdr_deserialize_sequence_uint8_t>
 8019322:	4604      	mov	r4, r0
 8019324:	e7b9      	b.n	801929a <uxr_deserialize_ObjectVariant+0xb6>
 8019326:	bf00      	nop

08019328 <uxr_deserialize_BaseObjectRequest>:
 8019328:	b570      	push	{r4, r5, r6, lr}
 801932a:	2202      	movs	r2, #2
 801932c:	4605      	mov	r5, r0
 801932e:	460e      	mov	r6, r1
 8019330:	f7fc fc7a 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8019334:	2202      	movs	r2, #2
 8019336:	4604      	mov	r4, r0
 8019338:	18b1      	adds	r1, r6, r2
 801933a:	4628      	mov	r0, r5
 801933c:	f7fc fc74 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8019340:	4020      	ands	r0, r4
 8019342:	b2c0      	uxtb	r0, r0
 8019344:	bd70      	pop	{r4, r5, r6, pc}
 8019346:	bf00      	nop

08019348 <uxr_serialize_ActivityInfoVariant>:
 8019348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801934c:	460d      	mov	r5, r1
 801934e:	7809      	ldrb	r1, [r1, #0]
 8019350:	4607      	mov	r7, r0
 8019352:	f7f4 fe8b 	bl	800e06c <ucdr_serialize_uint8_t>
 8019356:	4681      	mov	r9, r0
 8019358:	b138      	cbz	r0, 801936a <uxr_serialize_ActivityInfoVariant+0x22>
 801935a:	782b      	ldrb	r3, [r5, #0]
 801935c:	2b06      	cmp	r3, #6
 801935e:	f000 8082 	beq.w	8019466 <uxr_serialize_ActivityInfoVariant+0x11e>
 8019362:	2b0d      	cmp	r3, #13
 8019364:	d016      	beq.n	8019394 <uxr_serialize_ActivityInfoVariant+0x4c>
 8019366:	2b05      	cmp	r3, #5
 8019368:	d002      	beq.n	8019370 <uxr_serialize_ActivityInfoVariant+0x28>
 801936a:	4648      	mov	r0, r9
 801936c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019370:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8019374:	4638      	mov	r0, r7
 8019376:	f7f5 fbb5 	bl	800eae4 <ucdr_serialize_int16_t>
 801937a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801937e:	4681      	mov	r9, r0
 8019380:	4638      	mov	r0, r7
 8019382:	f7f5 fadf 	bl	800e944 <ucdr_serialize_uint64_t>
 8019386:	ea09 0000 	and.w	r0, r9, r0
 801938a:	fa5f f980 	uxtb.w	r9, r0
 801938e:	4648      	mov	r0, r9
 8019390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019394:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8019398:	4638      	mov	r0, r7
 801939a:	f7f5 fba3 	bl	800eae4 <ucdr_serialize_int16_t>
 801939e:	68e9      	ldr	r1, [r5, #12]
 80193a0:	4681      	mov	r9, r0
 80193a2:	4638      	mov	r0, r7
 80193a4:	f7f5 f878 	bl	800e498 <ucdr_serialize_uint32_t>
 80193a8:	68eb      	ldr	r3, [r5, #12]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d0eb      	beq.n	8019386 <uxr_serialize_ActivityInfoVariant+0x3e>
 80193ae:	b320      	cbz	r0, 80193fa <uxr_serialize_ActivityInfoVariant+0xb2>
 80193b0:	f105 080c 	add.w	r8, r5, #12
 80193b4:	2600      	movs	r6, #0
 80193b6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80193ba:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80193be:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80193c2:	4638      	mov	r0, r7
 80193c4:	f7f4 fe52 	bl	800e06c <ucdr_serialize_uint8_t>
 80193c8:	2800      	cmp	r0, #0
 80193ca:	d053      	beq.n	8019474 <uxr_serialize_ActivityInfoVariant+0x12c>
 80193cc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80193d0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80193d4:	0074      	lsls	r4, r6, #1
 80193d6:	00c9      	lsls	r1, r1, #3
 80193d8:	2b03      	cmp	r3, #3
 80193da:	d854      	bhi.n	8019486 <uxr_serialize_ActivityInfoVariant+0x13e>
 80193dc:	e8df f003 	tbb	[pc, r3]
 80193e0:	02102132 	.word	0x02102132
 80193e4:	4441      	add	r1, r8
 80193e6:	4638      	mov	r0, r7
 80193e8:	6889      	ldr	r1, [r1, #8]
 80193ea:	f002 f85f 	bl	801b4ac <ucdr_serialize_string>
 80193ee:	68ea      	ldr	r2, [r5, #12]
 80193f0:	3601      	adds	r6, #1
 80193f2:	4296      	cmp	r6, r2
 80193f4:	d242      	bcs.n	801947c <uxr_serialize_ActivityInfoVariant+0x134>
 80193f6:	2800      	cmp	r0, #0
 80193f8:	d1dd      	bne.n	80193b6 <uxr_serialize_ActivityInfoVariant+0x6e>
 80193fa:	f04f 0900 	mov.w	r9, #0
 80193fe:	e7b4      	b.n	801936a <uxr_serialize_ActivityInfoVariant+0x22>
 8019400:	3108      	adds	r1, #8
 8019402:	4441      	add	r1, r8
 8019404:	2210      	movs	r2, #16
 8019406:	4638      	mov	r0, r7
 8019408:	f7fc fbaa 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801940c:	4434      	add	r4, r6
 801940e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8019412:	4604      	mov	r4, r0
 8019414:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8019416:	4638      	mov	r0, r7
 8019418:	f7f5 f83e 	bl	800e498 <ucdr_serialize_uint32_t>
 801941c:	4020      	ands	r0, r4
 801941e:	b2c0      	uxtb	r0, r0
 8019420:	e7e5      	b.n	80193ee <uxr_serialize_ActivityInfoVariant+0xa6>
 8019422:	3108      	adds	r1, #8
 8019424:	4441      	add	r1, r8
 8019426:	2204      	movs	r2, #4
 8019428:	4638      	mov	r0, r7
 801942a:	f7fc fb99 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801942e:	4434      	add	r4, r6
 8019430:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8019434:	4604      	mov	r4, r0
 8019436:	8b19      	ldrh	r1, [r3, #24]
 8019438:	4638      	mov	r0, r7
 801943a:	f7f4 fe43 	bl	800e0c4 <ucdr_serialize_uint16_t>
 801943e:	4020      	ands	r0, r4
 8019440:	b2c0      	uxtb	r0, r0
 8019442:	e7d4      	b.n	80193ee <uxr_serialize_ActivityInfoVariant+0xa6>
 8019444:	3108      	adds	r1, #8
 8019446:	4441      	add	r1, r8
 8019448:	2202      	movs	r2, #2
 801944a:	4638      	mov	r0, r7
 801944c:	f7fc fb88 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019450:	4434      	add	r4, r6
 8019452:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8019456:	4604      	mov	r4, r0
 8019458:	7d99      	ldrb	r1, [r3, #22]
 801945a:	4638      	mov	r0, r7
 801945c:	f7f4 fe06 	bl	800e06c <ucdr_serialize_uint8_t>
 8019460:	4020      	ands	r0, r4
 8019462:	b2c0      	uxtb	r0, r0
 8019464:	e7c3      	b.n	80193ee <uxr_serialize_ActivityInfoVariant+0xa6>
 8019466:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801946a:	4638      	mov	r0, r7
 801946c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019470:	f7f5 bb38 	b.w	800eae4 <ucdr_serialize_int16_t>
 8019474:	68ea      	ldr	r2, [r5, #12]
 8019476:	3601      	adds	r6, #1
 8019478:	42b2      	cmp	r2, r6
 801947a:	d8be      	bhi.n	80193fa <uxr_serialize_ActivityInfoVariant+0xb2>
 801947c:	ea09 0900 	and.w	r9, r9, r0
 8019480:	fa5f f989 	uxtb.w	r9, r9
 8019484:	e771      	b.n	801936a <uxr_serialize_ActivityInfoVariant+0x22>
 8019486:	68eb      	ldr	r3, [r5, #12]
 8019488:	3601      	adds	r6, #1
 801948a:	429e      	cmp	r6, r3
 801948c:	f10a 0a18 	add.w	sl, sl, #24
 8019490:	d395      	bcc.n	80193be <uxr_serialize_ActivityInfoVariant+0x76>
 8019492:	e76a      	b.n	801936a <uxr_serialize_ActivityInfoVariant+0x22>

08019494 <uxr_deserialize_BaseObjectReply>:
 8019494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019498:	2202      	movs	r2, #2
 801949a:	4606      	mov	r6, r0
 801949c:	460f      	mov	r7, r1
 801949e:	f7fc fbc3 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80194a2:	2202      	movs	r2, #2
 80194a4:	18b9      	adds	r1, r7, r2
 80194a6:	4605      	mov	r5, r0
 80194a8:	4630      	mov	r0, r6
 80194aa:	f7fc fbbd 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80194ae:	1d39      	adds	r1, r7, #4
 80194b0:	4680      	mov	r8, r0
 80194b2:	4630      	mov	r0, r6
 80194b4:	f7f4 fdf0 	bl	800e098 <ucdr_deserialize_uint8_t>
 80194b8:	1d79      	adds	r1, r7, #5
 80194ba:	4604      	mov	r4, r0
 80194bc:	4630      	mov	r0, r6
 80194be:	f7f4 fdeb 	bl	800e098 <ucdr_deserialize_uint8_t>
 80194c2:	ea05 0508 	and.w	r5, r5, r8
 80194c6:	402c      	ands	r4, r5
 80194c8:	4020      	ands	r0, r4
 80194ca:	b2c0      	uxtb	r0, r0
 80194cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080194d0 <uxr_serialize_ReadSpecification>:
 80194d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d4:	460e      	mov	r6, r1
 80194d6:	7809      	ldrb	r1, [r1, #0]
 80194d8:	4607      	mov	r7, r0
 80194da:	f7f4 fdc7 	bl	800e06c <ucdr_serialize_uint8_t>
 80194de:	7871      	ldrb	r1, [r6, #1]
 80194e0:	4604      	mov	r4, r0
 80194e2:	4638      	mov	r0, r7
 80194e4:	f7f4 fdc2 	bl	800e06c <ucdr_serialize_uint8_t>
 80194e8:	78b1      	ldrb	r1, [r6, #2]
 80194ea:	4004      	ands	r4, r0
 80194ec:	4638      	mov	r0, r7
 80194ee:	f7f4 fd8f 	bl	800e010 <ucdr_serialize_bool>
 80194f2:	78b3      	ldrb	r3, [r6, #2]
 80194f4:	b2e4      	uxtb	r4, r4
 80194f6:	4004      	ands	r4, r0
 80194f8:	b94b      	cbnz	r3, 801950e <uxr_serialize_ReadSpecification+0x3e>
 80194fa:	7a31      	ldrb	r1, [r6, #8]
 80194fc:	4638      	mov	r0, r7
 80194fe:	f7f4 fd87 	bl	800e010 <ucdr_serialize_bool>
 8019502:	7a33      	ldrb	r3, [r6, #8]
 8019504:	4004      	ands	r4, r0
 8019506:	b943      	cbnz	r3, 801951a <uxr_serialize_ReadSpecification+0x4a>
 8019508:	4620      	mov	r0, r4
 801950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801950e:	6871      	ldr	r1, [r6, #4]
 8019510:	4638      	mov	r0, r7
 8019512:	f001 ffcb 	bl	801b4ac <ucdr_serialize_string>
 8019516:	4004      	ands	r4, r0
 8019518:	e7ef      	b.n	80194fa <uxr_serialize_ReadSpecification+0x2a>
 801951a:	8971      	ldrh	r1, [r6, #10]
 801951c:	4638      	mov	r0, r7
 801951e:	f7f4 fdd1 	bl	800e0c4 <ucdr_serialize_uint16_t>
 8019522:	89b1      	ldrh	r1, [r6, #12]
 8019524:	4605      	mov	r5, r0
 8019526:	4638      	mov	r0, r7
 8019528:	f7f4 fdcc 	bl	800e0c4 <ucdr_serialize_uint16_t>
 801952c:	89f1      	ldrh	r1, [r6, #14]
 801952e:	4005      	ands	r5, r0
 8019530:	4638      	mov	r0, r7
 8019532:	f7f4 fdc7 	bl	800e0c4 <ucdr_serialize_uint16_t>
 8019536:	8a31      	ldrh	r1, [r6, #16]
 8019538:	4680      	mov	r8, r0
 801953a:	4638      	mov	r0, r7
 801953c:	f7f4 fdc2 	bl	800e0c4 <ucdr_serialize_uint16_t>
 8019540:	b2ed      	uxtb	r5, r5
 8019542:	4025      	ands	r5, r4
 8019544:	ea08 0505 	and.w	r5, r8, r5
 8019548:	ea00 0405 	and.w	r4, r0, r5
 801954c:	4620      	mov	r0, r4
 801954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019552:	bf00      	nop

08019554 <uxr_serialize_CREATE_CLIENT_Payload>:
 8019554:	f7ff ba16 	b.w	8018984 <uxr_serialize_CLIENT_Representation>

08019558 <uxr_serialize_CREATE_Payload>:
 8019558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801955a:	2202      	movs	r2, #2
 801955c:	4607      	mov	r7, r0
 801955e:	460e      	mov	r6, r1
 8019560:	f7fc fafe 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019564:	2202      	movs	r2, #2
 8019566:	18b1      	adds	r1, r6, r2
 8019568:	4605      	mov	r5, r0
 801956a:	4638      	mov	r0, r7
 801956c:	f7fc faf8 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019570:	7931      	ldrb	r1, [r6, #4]
 8019572:	4604      	mov	r4, r0
 8019574:	4638      	mov	r0, r7
 8019576:	f7f4 fd79 	bl	800e06c <ucdr_serialize_uint8_t>
 801957a:	b170      	cbz	r0, 801959a <uxr_serialize_CREATE_Payload+0x42>
 801957c:	7933      	ldrb	r3, [r6, #4]
 801957e:	402c      	ands	r4, r5
 8019580:	3b01      	subs	r3, #1
 8019582:	b2e4      	uxtb	r4, r4
 8019584:	2b0d      	cmp	r3, #13
 8019586:	d809      	bhi.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 8019588:	e8df f003 	tbb	[pc, r3]
 801958c:	23230a4c 	.word	0x23230a4c
 8019590:	0a0a0a0a 	.word	0x0a0a0a0a
 8019594:	12121208 	.word	0x12121208
 8019598:	3e45      	.short	0x3e45
 801959a:	2400      	movs	r4, #0
 801959c:	4620      	mov	r0, r4
 801959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195a0:	f106 0108 	add.w	r1, r6, #8
 80195a4:	4638      	mov	r0, r7
 80195a6:	f7ff faf3 	bl	8018b90 <uxr_serialize_DATAWRITER_Representation>
 80195aa:	4004      	ands	r4, r0
 80195ac:	4620      	mov	r0, r4
 80195ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b0:	7a31      	ldrb	r1, [r6, #8]
 80195b2:	4638      	mov	r0, r7
 80195b4:	f7f4 fd5a 	bl	800e06c <ucdr_serialize_uint8_t>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d0ee      	beq.n	801959a <uxr_serialize_CREATE_Payload+0x42>
 80195bc:	7a33      	ldrb	r3, [r6, #8]
 80195be:	2b01      	cmp	r3, #1
 80195c0:	d001      	beq.n	80195c6 <uxr_serialize_CREATE_Payload+0x6e>
 80195c2:	2b02      	cmp	r3, #2
 80195c4:	d1ea      	bne.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 80195c6:	68f1      	ldr	r1, [r6, #12]
 80195c8:	4638      	mov	r0, r7
 80195ca:	f001 ff6f 	bl	801b4ac <ucdr_serialize_string>
 80195ce:	4004      	ands	r4, r0
 80195d0:	e7e4      	b.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 80195d2:	7a31      	ldrb	r1, [r6, #8]
 80195d4:	4638      	mov	r0, r7
 80195d6:	f7f4 fd49 	bl	800e06c <ucdr_serialize_uint8_t>
 80195da:	4605      	mov	r5, r0
 80195dc:	b158      	cbz	r0, 80195f6 <uxr_serialize_CREATE_Payload+0x9e>
 80195de:	7a33      	ldrb	r3, [r6, #8]
 80195e0:	2b02      	cmp	r3, #2
 80195e2:	d034      	beq.n	801964e <uxr_serialize_CREATE_Payload+0xf6>
 80195e4:	2b03      	cmp	r3, #3
 80195e6:	d106      	bne.n	80195f6 <uxr_serialize_CREATE_Payload+0x9e>
 80195e8:	68f2      	ldr	r2, [r6, #12]
 80195ea:	f106 0110 	add.w	r1, r6, #16
 80195ee:	4638      	mov	r0, r7
 80195f0:	f7fc fc54 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 80195f4:	4605      	mov	r5, r0
 80195f6:	2202      	movs	r2, #2
 80195f8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80195fc:	4638      	mov	r0, r7
 80195fe:	f7fc faaf 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019602:	4028      	ands	r0, r5
 8019604:	4004      	ands	r4, r0
 8019606:	e7c9      	b.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 8019608:	f106 0108 	add.w	r1, r6, #8
 801960c:	4638      	mov	r0, r7
 801960e:	f7ff f9b9 	bl	8018984 <uxr_serialize_CLIENT_Representation>
 8019612:	4004      	ands	r4, r0
 8019614:	e7c2      	b.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 8019616:	f106 0108 	add.w	r1, r6, #8
 801961a:	4638      	mov	r0, r7
 801961c:	f7ff fa6e 	bl	8018afc <uxr_serialize_AGENT_Representation>
 8019620:	4004      	ands	r4, r0
 8019622:	e7bb      	b.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 8019624:	7a31      	ldrb	r1, [r6, #8]
 8019626:	4638      	mov	r0, r7
 8019628:	f7f4 fd20 	bl	800e06c <ucdr_serialize_uint8_t>
 801962c:	4605      	mov	r5, r0
 801962e:	b130      	cbz	r0, 801963e <uxr_serialize_CREATE_Payload+0xe6>
 8019630:	7a33      	ldrb	r3, [r6, #8]
 8019632:	2b02      	cmp	r3, #2
 8019634:	d011      	beq.n	801965a <uxr_serialize_CREATE_Payload+0x102>
 8019636:	2b03      	cmp	r3, #3
 8019638:	d015      	beq.n	8019666 <uxr_serialize_CREATE_Payload+0x10e>
 801963a:	2b01      	cmp	r3, #1
 801963c:	d00d      	beq.n	801965a <uxr_serialize_CREATE_Payload+0x102>
 801963e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8019642:	4638      	mov	r0, r7
 8019644:	f7f5 fa4e 	bl	800eae4 <ucdr_serialize_int16_t>
 8019648:	4028      	ands	r0, r5
 801964a:	4004      	ands	r4, r0
 801964c:	e7a6      	b.n	801959c <uxr_serialize_CREATE_Payload+0x44>
 801964e:	68f1      	ldr	r1, [r6, #12]
 8019650:	4638      	mov	r0, r7
 8019652:	f001 ff2b 	bl	801b4ac <ucdr_serialize_string>
 8019656:	4605      	mov	r5, r0
 8019658:	e7cd      	b.n	80195f6 <uxr_serialize_CREATE_Payload+0x9e>
 801965a:	68f1      	ldr	r1, [r6, #12]
 801965c:	4638      	mov	r0, r7
 801965e:	f001 ff25 	bl	801b4ac <ucdr_serialize_string>
 8019662:	4605      	mov	r5, r0
 8019664:	e7eb      	b.n	801963e <uxr_serialize_CREATE_Payload+0xe6>
 8019666:	68f2      	ldr	r2, [r6, #12]
 8019668:	f106 0110 	add.w	r1, r6, #16
 801966c:	4638      	mov	r0, r7
 801966e:	f7fc fc15 	bl	8015e9c <ucdr_serialize_sequence_uint8_t>
 8019672:	4605      	mov	r5, r0
 8019674:	e7e3      	b.n	801963e <uxr_serialize_CREATE_Payload+0xe6>
 8019676:	bf00      	nop

08019678 <uxr_deserialize_GET_INFO_Payload>:
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	2202      	movs	r2, #2
 801967c:	4605      	mov	r5, r0
 801967e:	460e      	mov	r6, r1
 8019680:	f7fc fad2 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8019684:	2202      	movs	r2, #2
 8019686:	18b1      	adds	r1, r6, r2
 8019688:	4604      	mov	r4, r0
 801968a:	4628      	mov	r0, r5
 801968c:	f7fc facc 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8019690:	1d31      	adds	r1, r6, #4
 8019692:	4004      	ands	r4, r0
 8019694:	4628      	mov	r0, r5
 8019696:	f7f5 f82f 	bl	800e6f8 <ucdr_deserialize_uint32_t>
 801969a:	b2e4      	uxtb	r4, r4
 801969c:	4020      	ands	r0, r4
 801969e:	bd70      	pop	{r4, r5, r6, pc}

080196a0 <uxr_serialize_DELETE_Payload>:
 80196a0:	b570      	push	{r4, r5, r6, lr}
 80196a2:	2202      	movs	r2, #2
 80196a4:	4605      	mov	r5, r0
 80196a6:	460e      	mov	r6, r1
 80196a8:	f7fc fa5a 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 80196ac:	2202      	movs	r2, #2
 80196ae:	4604      	mov	r4, r0
 80196b0:	18b1      	adds	r1, r6, r2
 80196b2:	4628      	mov	r0, r5
 80196b4:	f7fc fa54 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 80196b8:	4020      	ands	r0, r4
 80196ba:	b2c0      	uxtb	r0, r0
 80196bc:	bd70      	pop	{r4, r5, r6, pc}
 80196be:	bf00      	nop

080196c0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80196c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196c4:	4605      	mov	r5, r0
 80196c6:	460e      	mov	r6, r1
 80196c8:	f7f4 fce6 	bl	800e098 <ucdr_deserialize_uint8_t>
 80196cc:	1c71      	adds	r1, r6, #1
 80196ce:	4604      	mov	r4, r0
 80196d0:	4628      	mov	r0, r5
 80196d2:	f7f4 fce1 	bl	800e098 <ucdr_deserialize_uint8_t>
 80196d6:	2204      	movs	r2, #4
 80196d8:	18b1      	adds	r1, r6, r2
 80196da:	4680      	mov	r8, r0
 80196dc:	4628      	mov	r0, r5
 80196de:	f7fc faa3 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80196e2:	f106 0108 	add.w	r1, r6, #8
 80196e6:	4607      	mov	r7, r0
 80196e8:	2202      	movs	r2, #2
 80196ea:	4628      	mov	r0, r5
 80196ec:	f7fc fa9c 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80196f0:	ea04 0308 	and.w	r3, r4, r8
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	ea03 0407 	and.w	r4, r3, r7
 80196fa:	2202      	movs	r2, #2
 80196fc:	4607      	mov	r7, r0
 80196fe:	f106 010a 	add.w	r1, r6, #10
 8019702:	4628      	mov	r0, r5
 8019704:	f7fc fa90 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 8019708:	f106 010c 	add.w	r1, r6, #12
 801970c:	4603      	mov	r3, r0
 801970e:	4628      	mov	r0, r5
 8019710:	461d      	mov	r5, r3
 8019712:	f7f4 fc93 	bl	800e03c <ucdr_deserialize_bool>
 8019716:	403c      	ands	r4, r7
 8019718:	4025      	ands	r5, r4
 801971a:	4028      	ands	r0, r5
 801971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019720 <uxr_deserialize_STATUS_Payload>:
 8019720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019724:	2202      	movs	r2, #2
 8019726:	4606      	mov	r6, r0
 8019728:	460f      	mov	r7, r1
 801972a:	f7fc fa7d 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801972e:	2202      	movs	r2, #2
 8019730:	18b9      	adds	r1, r7, r2
 8019732:	4605      	mov	r5, r0
 8019734:	4630      	mov	r0, r6
 8019736:	f7fc fa77 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801973a:	1d39      	adds	r1, r7, #4
 801973c:	4680      	mov	r8, r0
 801973e:	4630      	mov	r0, r6
 8019740:	f7f4 fcaa 	bl	800e098 <ucdr_deserialize_uint8_t>
 8019744:	1d79      	adds	r1, r7, #5
 8019746:	4604      	mov	r4, r0
 8019748:	4630      	mov	r0, r6
 801974a:	f7f4 fca5 	bl	800e098 <ucdr_deserialize_uint8_t>
 801974e:	ea05 0508 	and.w	r5, r5, r8
 8019752:	402c      	ands	r4, r5
 8019754:	4020      	ands	r0, r4
 8019756:	b2c0      	uxtb	r0, r0
 8019758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801975c <uxr_serialize_INFO_Payload>:
 801975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019760:	2202      	movs	r2, #2
 8019762:	460c      	mov	r4, r1
 8019764:	4605      	mov	r5, r0
 8019766:	f7fc f9fb 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801976a:	2202      	movs	r2, #2
 801976c:	18a1      	adds	r1, r4, r2
 801976e:	4680      	mov	r8, r0
 8019770:	4628      	mov	r0, r5
 8019772:	f7fc f9f5 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019776:	7921      	ldrb	r1, [r4, #4]
 8019778:	4607      	mov	r7, r0
 801977a:	4628      	mov	r0, r5
 801977c:	f7f4 fc76 	bl	800e06c <ucdr_serialize_uint8_t>
 8019780:	7961      	ldrb	r1, [r4, #5]
 8019782:	4606      	mov	r6, r0
 8019784:	4628      	mov	r0, r5
 8019786:	f7f4 fc71 	bl	800e06c <ucdr_serialize_uint8_t>
 801978a:	ea08 0807 	and.w	r8, r8, r7
 801978e:	ea06 0608 	and.w	r6, r6, r8
 8019792:	4006      	ands	r6, r0
 8019794:	7a21      	ldrb	r1, [r4, #8]
 8019796:	4628      	mov	r0, r5
 8019798:	f7f4 fc3a 	bl	800e010 <ucdr_serialize_bool>
 801979c:	7a23      	ldrb	r3, [r4, #8]
 801979e:	b2f7      	uxtb	r7, r6
 80197a0:	4606      	mov	r6, r0
 80197a2:	b96b      	cbnz	r3, 80197c0 <uxr_serialize_INFO_Payload+0x64>
 80197a4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80197a8:	4628      	mov	r0, r5
 80197aa:	f7f4 fc31 	bl	800e010 <ucdr_serialize_bool>
 80197ae:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80197b2:	4030      	ands	r0, r6
 80197b4:	b2c6      	uxtb	r6, r0
 80197b6:	b983      	cbnz	r3, 80197da <uxr_serialize_INFO_Payload+0x7e>
 80197b8:	ea06 0007 	and.w	r0, r6, r7
 80197bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197c0:	7b21      	ldrb	r1, [r4, #12]
 80197c2:	4628      	mov	r0, r5
 80197c4:	f7f4 fc52 	bl	800e06c <ucdr_serialize_uint8_t>
 80197c8:	b188      	cbz	r0, 80197ee <uxr_serialize_INFO_Payload+0x92>
 80197ca:	f104 010c 	add.w	r1, r4, #12
 80197ce:	4628      	mov	r0, r5
 80197d0:	f7ff fa06 	bl	8018be0 <uxr_serialize_ObjectVariant.part.0>
 80197d4:	4030      	ands	r0, r6
 80197d6:	b2c6      	uxtb	r6, r0
 80197d8:	e7e4      	b.n	80197a4 <uxr_serialize_INFO_Payload+0x48>
 80197da:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80197de:	4628      	mov	r0, r5
 80197e0:	f7ff fdb2 	bl	8019348 <uxr_serialize_ActivityInfoVariant>
 80197e4:	4006      	ands	r6, r0
 80197e6:	ea06 0007 	and.w	r0, r6, r7
 80197ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ee:	4606      	mov	r6, r0
 80197f0:	e7d8      	b.n	80197a4 <uxr_serialize_INFO_Payload+0x48>
 80197f2:	bf00      	nop

080197f4 <uxr_serialize_READ_DATA_Payload>:
 80197f4:	b570      	push	{r4, r5, r6, lr}
 80197f6:	2202      	movs	r2, #2
 80197f8:	4605      	mov	r5, r0
 80197fa:	460e      	mov	r6, r1
 80197fc:	f7fc f9b0 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019800:	2202      	movs	r2, #2
 8019802:	18b1      	adds	r1, r6, r2
 8019804:	4604      	mov	r4, r0
 8019806:	4628      	mov	r0, r5
 8019808:	f7fc f9aa 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801980c:	1d31      	adds	r1, r6, #4
 801980e:	4004      	ands	r4, r0
 8019810:	4628      	mov	r0, r5
 8019812:	f7ff fe5d 	bl	80194d0 <uxr_serialize_ReadSpecification>
 8019816:	b2e4      	uxtb	r4, r4
 8019818:	4020      	ands	r0, r4
 801981a:	bd70      	pop	{r4, r5, r6, pc}

0801981c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801981c:	b570      	push	{r4, r5, r6, lr}
 801981e:	2202      	movs	r2, #2
 8019820:	4605      	mov	r5, r0
 8019822:	460e      	mov	r6, r1
 8019824:	f7fc f99c 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019828:	2202      	movs	r2, #2
 801982a:	4604      	mov	r4, r0
 801982c:	18b1      	adds	r1, r6, r2
 801982e:	4628      	mov	r0, r5
 8019830:	f7fc f996 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019834:	4020      	ands	r0, r4
 8019836:	b2c0      	uxtb	r0, r0
 8019838:	bd70      	pop	{r4, r5, r6, pc}
 801983a:	bf00      	nop

0801983c <uxr_serialize_ACKNACK_Payload>:
 801983c:	b570      	push	{r4, r5, r6, lr}
 801983e:	460c      	mov	r4, r1
 8019840:	460e      	mov	r6, r1
 8019842:	f834 1b02 	ldrh.w	r1, [r4], #2
 8019846:	4605      	mov	r5, r0
 8019848:	f7f4 fc3c 	bl	800e0c4 <ucdr_serialize_uint16_t>
 801984c:	2202      	movs	r2, #2
 801984e:	4621      	mov	r1, r4
 8019850:	4604      	mov	r4, r0
 8019852:	4628      	mov	r0, r5
 8019854:	f7fc f984 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 8019858:	7931      	ldrb	r1, [r6, #4]
 801985a:	4004      	ands	r4, r0
 801985c:	4628      	mov	r0, r5
 801985e:	f7f4 fc05 	bl	800e06c <ucdr_serialize_uint8_t>
 8019862:	b2e4      	uxtb	r4, r4
 8019864:	4020      	ands	r0, r4
 8019866:	bd70      	pop	{r4, r5, r6, pc}

08019868 <uxr_deserialize_ACKNACK_Payload>:
 8019868:	b570      	push	{r4, r5, r6, lr}
 801986a:	4605      	mov	r5, r0
 801986c:	460e      	mov	r6, r1
 801986e:	f7f4 fd29 	bl	800e2c4 <ucdr_deserialize_uint16_t>
 8019872:	2202      	movs	r2, #2
 8019874:	18b1      	adds	r1, r6, r2
 8019876:	4604      	mov	r4, r0
 8019878:	4628      	mov	r0, r5
 801987a:	f7fc f9d5 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801987e:	1d31      	adds	r1, r6, #4
 8019880:	4004      	ands	r4, r0
 8019882:	4628      	mov	r0, r5
 8019884:	f7f4 fc08 	bl	800e098 <ucdr_deserialize_uint8_t>
 8019888:	b2e4      	uxtb	r4, r4
 801988a:	4020      	ands	r0, r4
 801988c:	bd70      	pop	{r4, r5, r6, pc}
 801988e:	bf00      	nop

08019890 <uxr_serialize_HEARTBEAT_Payload>:
 8019890:	b570      	push	{r4, r5, r6, lr}
 8019892:	460d      	mov	r5, r1
 8019894:	8809      	ldrh	r1, [r1, #0]
 8019896:	4606      	mov	r6, r0
 8019898:	f7f4 fc14 	bl	800e0c4 <ucdr_serialize_uint16_t>
 801989c:	8869      	ldrh	r1, [r5, #2]
 801989e:	4604      	mov	r4, r0
 80198a0:	4630      	mov	r0, r6
 80198a2:	f7f4 fc0f 	bl	800e0c4 <ucdr_serialize_uint16_t>
 80198a6:	7929      	ldrb	r1, [r5, #4]
 80198a8:	4004      	ands	r4, r0
 80198aa:	4630      	mov	r0, r6
 80198ac:	f7f4 fbde 	bl	800e06c <ucdr_serialize_uint8_t>
 80198b0:	b2e4      	uxtb	r4, r4
 80198b2:	4020      	ands	r0, r4
 80198b4:	bd70      	pop	{r4, r5, r6, pc}
 80198b6:	bf00      	nop

080198b8 <uxr_deserialize_HEARTBEAT_Payload>:
 80198b8:	b570      	push	{r4, r5, r6, lr}
 80198ba:	4605      	mov	r5, r0
 80198bc:	460e      	mov	r6, r1
 80198be:	f7f4 fd01 	bl	800e2c4 <ucdr_deserialize_uint16_t>
 80198c2:	1cb1      	adds	r1, r6, #2
 80198c4:	4604      	mov	r4, r0
 80198c6:	4628      	mov	r0, r5
 80198c8:	f7f4 fcfc 	bl	800e2c4 <ucdr_deserialize_uint16_t>
 80198cc:	1d31      	adds	r1, r6, #4
 80198ce:	4004      	ands	r4, r0
 80198d0:	4628      	mov	r0, r5
 80198d2:	f7f4 fbe1 	bl	800e098 <ucdr_deserialize_uint8_t>
 80198d6:	b2e4      	uxtb	r4, r4
 80198d8:	4020      	ands	r0, r4
 80198da:	bd70      	pop	{r4, r5, r6, pc}

080198dc <uxr_serialize_TIMESTAMP_Payload>:
 80198dc:	b570      	push	{r4, r5, r6, lr}
 80198de:	460d      	mov	r5, r1
 80198e0:	6809      	ldr	r1, [r1, #0]
 80198e2:	4606      	mov	r6, r0
 80198e4:	f7f5 f9f2 	bl	800eccc <ucdr_serialize_int32_t>
 80198e8:	6869      	ldr	r1, [r5, #4]
 80198ea:	4604      	mov	r4, r0
 80198ec:	4630      	mov	r0, r6
 80198ee:	f7f4 fdd3 	bl	800e498 <ucdr_serialize_uint32_t>
 80198f2:	4020      	ands	r0, r4
 80198f4:	b2c0      	uxtb	r0, r0
 80198f6:	bd70      	pop	{r4, r5, r6, pc}

080198f8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80198f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198fc:	4605      	mov	r5, r0
 80198fe:	460e      	mov	r6, r1
 8019900:	f7f5 fa7c 	bl	800edfc <ucdr_deserialize_int32_t>
 8019904:	1d31      	adds	r1, r6, #4
 8019906:	4607      	mov	r7, r0
 8019908:	4628      	mov	r0, r5
 801990a:	f7f4 fef5 	bl	800e6f8 <ucdr_deserialize_uint32_t>
 801990e:	f106 0108 	add.w	r1, r6, #8
 8019912:	4680      	mov	r8, r0
 8019914:	4628      	mov	r0, r5
 8019916:	f7f5 fa71 	bl	800edfc <ucdr_deserialize_int32_t>
 801991a:	f106 010c 	add.w	r1, r6, #12
 801991e:	4604      	mov	r4, r0
 8019920:	4628      	mov	r0, r5
 8019922:	f7f4 fee9 	bl	800e6f8 <ucdr_deserialize_uint32_t>
 8019926:	ea07 0708 	and.w	r7, r7, r8
 801992a:	403c      	ands	r4, r7
 801992c:	f106 0110 	add.w	r1, r6, #16
 8019930:	4004      	ands	r4, r0
 8019932:	4628      	mov	r0, r5
 8019934:	f7f5 fa62 	bl	800edfc <ucdr_deserialize_int32_t>
 8019938:	f106 0114 	add.w	r1, r6, #20
 801993c:	4607      	mov	r7, r0
 801993e:	4628      	mov	r0, r5
 8019940:	f7f4 feda 	bl	800e6f8 <ucdr_deserialize_uint32_t>
 8019944:	b2e4      	uxtb	r4, r4
 8019946:	403c      	ands	r4, r7
 8019948:	4020      	ands	r0, r4
 801994a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801994e:	bf00      	nop

08019950 <uxr_serialize_SampleIdentity>:
 8019950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019954:	220c      	movs	r2, #12
 8019956:	4604      	mov	r4, r0
 8019958:	460d      	mov	r5, r1
 801995a:	f7fc f901 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801995e:	2203      	movs	r2, #3
 8019960:	f105 010c 	add.w	r1, r5, #12
 8019964:	4607      	mov	r7, r0
 8019966:	4620      	mov	r0, r4
 8019968:	f7fc f8fa 	bl	8015b60 <ucdr_serialize_array_uint8_t>
 801996c:	7be9      	ldrb	r1, [r5, #15]
 801996e:	4680      	mov	r8, r0
 8019970:	4620      	mov	r0, r4
 8019972:	f7f4 fb7b 	bl	800e06c <ucdr_serialize_uint8_t>
 8019976:	6929      	ldr	r1, [r5, #16]
 8019978:	4606      	mov	r6, r0
 801997a:	4620      	mov	r0, r4
 801997c:	f7f5 f9a6 	bl	800eccc <ucdr_serialize_int32_t>
 8019980:	6969      	ldr	r1, [r5, #20]
 8019982:	4603      	mov	r3, r0
 8019984:	4620      	mov	r0, r4
 8019986:	ea07 0708 	and.w	r7, r7, r8
 801998a:	461c      	mov	r4, r3
 801998c:	f7f4 fd84 	bl	800e498 <ucdr_serialize_uint32_t>
 8019990:	403e      	ands	r6, r7
 8019992:	4034      	ands	r4, r6
 8019994:	4020      	ands	r0, r4
 8019996:	b2c0      	uxtb	r0, r0
 8019998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801999c <uxr_deserialize_SampleIdentity>:
 801999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199a0:	220c      	movs	r2, #12
 80199a2:	4604      	mov	r4, r0
 80199a4:	460d      	mov	r5, r1
 80199a6:	f7fc f93f 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80199aa:	2203      	movs	r2, #3
 80199ac:	f105 010c 	add.w	r1, r5, #12
 80199b0:	4607      	mov	r7, r0
 80199b2:	4620      	mov	r0, r4
 80199b4:	f7fc f938 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 80199b8:	f105 010f 	add.w	r1, r5, #15
 80199bc:	4680      	mov	r8, r0
 80199be:	4620      	mov	r0, r4
 80199c0:	f7f4 fb6a 	bl	800e098 <ucdr_deserialize_uint8_t>
 80199c4:	f105 0110 	add.w	r1, r5, #16
 80199c8:	4606      	mov	r6, r0
 80199ca:	4620      	mov	r0, r4
 80199cc:	f7f5 fa16 	bl	800edfc <ucdr_deserialize_int32_t>
 80199d0:	f105 0114 	add.w	r1, r5, #20
 80199d4:	4603      	mov	r3, r0
 80199d6:	4620      	mov	r0, r4
 80199d8:	ea07 0708 	and.w	r7, r7, r8
 80199dc:	461c      	mov	r4, r3
 80199de:	f7f4 fe8b 	bl	800e6f8 <ucdr_deserialize_uint32_t>
 80199e2:	403e      	ands	r6, r7
 80199e4:	4034      	ands	r4, r6
 80199e6:	4020      	ands	r0, r4
 80199e8:	b2c0      	uxtb	r0, r0
 80199ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199ee:	bf00      	nop

080199f0 <rcl_action_take_goal_response>:
 80199f0:	2800      	cmp	r0, #0
 80199f2:	d039      	beq.n	8019a68 <rcl_action_take_goal_response+0x78>
 80199f4:	b570      	push	{r4, r5, r6, lr}
 80199f6:	4604      	mov	r4, r0
 80199f8:	6800      	ldr	r0, [r0, #0]
 80199fa:	b380      	cbz	r0, 8019a5e <rcl_action_take_goal_response+0x6e>
 80199fc:	460d      	mov	r5, r1
 80199fe:	4616      	mov	r6, r2
 8019a00:	f7f6 fea6 	bl	8010750 <rcl_client_is_valid>
 8019a04:	b330      	cbz	r0, 8019a54 <rcl_action_take_goal_response+0x64>
 8019a06:	6820      	ldr	r0, [r4, #0]
 8019a08:	3004      	adds	r0, #4
 8019a0a:	f7f6 fea1 	bl	8010750 <rcl_client_is_valid>
 8019a0e:	b308      	cbz	r0, 8019a54 <rcl_action_take_goal_response+0x64>
 8019a10:	6820      	ldr	r0, [r4, #0]
 8019a12:	3008      	adds	r0, #8
 8019a14:	f7f6 fe9c 	bl	8010750 <rcl_client_is_valid>
 8019a18:	b1e0      	cbz	r0, 8019a54 <rcl_action_take_goal_response+0x64>
 8019a1a:	6820      	ldr	r0, [r4, #0]
 8019a1c:	300c      	adds	r0, #12
 8019a1e:	f7f8 f8f9 	bl	8011c14 <rcl_subscription_is_valid>
 8019a22:	b1b8      	cbz	r0, 8019a54 <rcl_action_take_goal_response+0x64>
 8019a24:	6820      	ldr	r0, [r4, #0]
 8019a26:	3010      	adds	r0, #16
 8019a28:	f7f8 f8f4 	bl	8011c14 <rcl_subscription_is_valid>
 8019a2c:	b190      	cbz	r0, 8019a54 <rcl_action_take_goal_response+0x64>
 8019a2e:	b1cd      	cbz	r5, 8019a64 <rcl_action_take_goal_response+0x74>
 8019a30:	b1c6      	cbz	r6, 8019a64 <rcl_action_take_goal_response+0x74>
 8019a32:	6820      	ldr	r0, [r4, #0]
 8019a34:	4632      	mov	r2, r6
 8019a36:	4629      	mov	r1, r5
 8019a38:	f7f6 fe22 	bl	8010680 <rcl_take_response>
 8019a3c:	b148      	cbz	r0, 8019a52 <rcl_action_take_goal_response+0x62>
 8019a3e:	280a      	cmp	r0, #10
 8019a40:	d007      	beq.n	8019a52 <rcl_action_take_goal_response+0x62>
 8019a42:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019a46:	f640 0337 	movw	r3, #2103	@ 0x837
 8019a4a:	4290      	cmp	r0, r2
 8019a4c:	bf0c      	ite	eq
 8019a4e:	4618      	moveq	r0, r3
 8019a50:	2001      	movne	r0, #1
 8019a52:	bd70      	pop	{r4, r5, r6, pc}
 8019a54:	f7f9 f9f4 	bl	8012e40 <rcutils_reset_error>
 8019a58:	f640 0036 	movw	r0, #2102	@ 0x836
 8019a5c:	bd70      	pop	{r4, r5, r6, pc}
 8019a5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019a62:	bd70      	pop	{r4, r5, r6, pc}
 8019a64:	200b      	movs	r0, #11
 8019a66:	bd70      	pop	{r4, r5, r6, pc}
 8019a68:	f640 0036 	movw	r0, #2102	@ 0x836
 8019a6c:	4770      	bx	lr
 8019a6e:	bf00      	nop

08019a70 <rcl_action_send_result_request>:
 8019a70:	b390      	cbz	r0, 8019ad8 <rcl_action_send_result_request+0x68>
 8019a72:	b570      	push	{r4, r5, r6, lr}
 8019a74:	4604      	mov	r4, r0
 8019a76:	6800      	ldr	r0, [r0, #0]
 8019a78:	b348      	cbz	r0, 8019ace <rcl_action_send_result_request+0x5e>
 8019a7a:	460d      	mov	r5, r1
 8019a7c:	4616      	mov	r6, r2
 8019a7e:	f7f6 fe67 	bl	8010750 <rcl_client_is_valid>
 8019a82:	b1f8      	cbz	r0, 8019ac4 <rcl_action_send_result_request+0x54>
 8019a84:	6820      	ldr	r0, [r4, #0]
 8019a86:	3004      	adds	r0, #4
 8019a88:	f7f6 fe62 	bl	8010750 <rcl_client_is_valid>
 8019a8c:	b1d0      	cbz	r0, 8019ac4 <rcl_action_send_result_request+0x54>
 8019a8e:	6820      	ldr	r0, [r4, #0]
 8019a90:	3008      	adds	r0, #8
 8019a92:	f7f6 fe5d 	bl	8010750 <rcl_client_is_valid>
 8019a96:	b1a8      	cbz	r0, 8019ac4 <rcl_action_send_result_request+0x54>
 8019a98:	6820      	ldr	r0, [r4, #0]
 8019a9a:	300c      	adds	r0, #12
 8019a9c:	f7f8 f8ba 	bl	8011c14 <rcl_subscription_is_valid>
 8019aa0:	b180      	cbz	r0, 8019ac4 <rcl_action_send_result_request+0x54>
 8019aa2:	6820      	ldr	r0, [r4, #0]
 8019aa4:	3010      	adds	r0, #16
 8019aa6:	f7f8 f8b5 	bl	8011c14 <rcl_subscription_is_valid>
 8019aaa:	b158      	cbz	r0, 8019ac4 <rcl_action_send_result_request+0x54>
 8019aac:	b195      	cbz	r5, 8019ad4 <rcl_action_send_result_request+0x64>
 8019aae:	b18e      	cbz	r6, 8019ad4 <rcl_action_send_result_request+0x64>
 8019ab0:	6820      	ldr	r0, [r4, #0]
 8019ab2:	4632      	mov	r2, r6
 8019ab4:	4629      	mov	r1, r5
 8019ab6:	3008      	adds	r0, #8
 8019ab8:	f7f6 fd8e 	bl	80105d8 <rcl_send_request>
 8019abc:	3800      	subs	r0, #0
 8019abe:	bf18      	it	ne
 8019ac0:	2001      	movne	r0, #1
 8019ac2:	bd70      	pop	{r4, r5, r6, pc}
 8019ac4:	f7f9 f9bc 	bl	8012e40 <rcutils_reset_error>
 8019ac8:	f640 0036 	movw	r0, #2102	@ 0x836
 8019acc:	bd70      	pop	{r4, r5, r6, pc}
 8019ace:	f640 0036 	movw	r0, #2102	@ 0x836
 8019ad2:	bd70      	pop	{r4, r5, r6, pc}
 8019ad4:	200b      	movs	r0, #11
 8019ad6:	bd70      	pop	{r4, r5, r6, pc}
 8019ad8:	f640 0036 	movw	r0, #2102	@ 0x836
 8019adc:	4770      	bx	lr
 8019ade:	bf00      	nop

08019ae0 <rcl_action_take_result_response>:
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d03a      	beq.n	8019b5a <rcl_action_take_result_response+0x7a>
 8019ae4:	b570      	push	{r4, r5, r6, lr}
 8019ae6:	4604      	mov	r4, r0
 8019ae8:	6800      	ldr	r0, [r0, #0]
 8019aea:	b388      	cbz	r0, 8019b50 <rcl_action_take_result_response+0x70>
 8019aec:	460d      	mov	r5, r1
 8019aee:	4616      	mov	r6, r2
 8019af0:	f7f6 fe2e 	bl	8010750 <rcl_client_is_valid>
 8019af4:	b338      	cbz	r0, 8019b46 <rcl_action_take_result_response+0x66>
 8019af6:	6820      	ldr	r0, [r4, #0]
 8019af8:	3004      	adds	r0, #4
 8019afa:	f7f6 fe29 	bl	8010750 <rcl_client_is_valid>
 8019afe:	b310      	cbz	r0, 8019b46 <rcl_action_take_result_response+0x66>
 8019b00:	6820      	ldr	r0, [r4, #0]
 8019b02:	3008      	adds	r0, #8
 8019b04:	f7f6 fe24 	bl	8010750 <rcl_client_is_valid>
 8019b08:	b1e8      	cbz	r0, 8019b46 <rcl_action_take_result_response+0x66>
 8019b0a:	6820      	ldr	r0, [r4, #0]
 8019b0c:	300c      	adds	r0, #12
 8019b0e:	f7f8 f881 	bl	8011c14 <rcl_subscription_is_valid>
 8019b12:	b1c0      	cbz	r0, 8019b46 <rcl_action_take_result_response+0x66>
 8019b14:	6820      	ldr	r0, [r4, #0]
 8019b16:	3010      	adds	r0, #16
 8019b18:	f7f8 f87c 	bl	8011c14 <rcl_subscription_is_valid>
 8019b1c:	b198      	cbz	r0, 8019b46 <rcl_action_take_result_response+0x66>
 8019b1e:	b1d5      	cbz	r5, 8019b56 <rcl_action_take_result_response+0x76>
 8019b20:	b1ce      	cbz	r6, 8019b56 <rcl_action_take_result_response+0x76>
 8019b22:	6820      	ldr	r0, [r4, #0]
 8019b24:	4632      	mov	r2, r6
 8019b26:	4629      	mov	r1, r5
 8019b28:	3008      	adds	r0, #8
 8019b2a:	f7f6 fda9 	bl	8010680 <rcl_take_response>
 8019b2e:	b148      	cbz	r0, 8019b44 <rcl_action_take_result_response+0x64>
 8019b30:	280a      	cmp	r0, #10
 8019b32:	d007      	beq.n	8019b44 <rcl_action_take_result_response+0x64>
 8019b34:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019b38:	f640 0337 	movw	r3, #2103	@ 0x837
 8019b3c:	4290      	cmp	r0, r2
 8019b3e:	bf0c      	ite	eq
 8019b40:	4618      	moveq	r0, r3
 8019b42:	2001      	movne	r0, #1
 8019b44:	bd70      	pop	{r4, r5, r6, pc}
 8019b46:	f7f9 f97b 	bl	8012e40 <rcutils_reset_error>
 8019b4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8019b4e:	bd70      	pop	{r4, r5, r6, pc}
 8019b50:	f640 0036 	movw	r0, #2102	@ 0x836
 8019b54:	bd70      	pop	{r4, r5, r6, pc}
 8019b56:	200b      	movs	r0, #11
 8019b58:	bd70      	pop	{r4, r5, r6, pc}
 8019b5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8019b5e:	4770      	bx	lr

08019b60 <rcl_action_take_cancel_response>:
 8019b60:	2800      	cmp	r0, #0
 8019b62:	d03a      	beq.n	8019bda <rcl_action_take_cancel_response+0x7a>
 8019b64:	b570      	push	{r4, r5, r6, lr}
 8019b66:	4604      	mov	r4, r0
 8019b68:	6800      	ldr	r0, [r0, #0]
 8019b6a:	b388      	cbz	r0, 8019bd0 <rcl_action_take_cancel_response+0x70>
 8019b6c:	460d      	mov	r5, r1
 8019b6e:	4616      	mov	r6, r2
 8019b70:	f7f6 fdee 	bl	8010750 <rcl_client_is_valid>
 8019b74:	b338      	cbz	r0, 8019bc6 <rcl_action_take_cancel_response+0x66>
 8019b76:	6820      	ldr	r0, [r4, #0]
 8019b78:	3004      	adds	r0, #4
 8019b7a:	f7f6 fde9 	bl	8010750 <rcl_client_is_valid>
 8019b7e:	b310      	cbz	r0, 8019bc6 <rcl_action_take_cancel_response+0x66>
 8019b80:	6820      	ldr	r0, [r4, #0]
 8019b82:	3008      	adds	r0, #8
 8019b84:	f7f6 fde4 	bl	8010750 <rcl_client_is_valid>
 8019b88:	b1e8      	cbz	r0, 8019bc6 <rcl_action_take_cancel_response+0x66>
 8019b8a:	6820      	ldr	r0, [r4, #0]
 8019b8c:	300c      	adds	r0, #12
 8019b8e:	f7f8 f841 	bl	8011c14 <rcl_subscription_is_valid>
 8019b92:	b1c0      	cbz	r0, 8019bc6 <rcl_action_take_cancel_response+0x66>
 8019b94:	6820      	ldr	r0, [r4, #0]
 8019b96:	3010      	adds	r0, #16
 8019b98:	f7f8 f83c 	bl	8011c14 <rcl_subscription_is_valid>
 8019b9c:	b198      	cbz	r0, 8019bc6 <rcl_action_take_cancel_response+0x66>
 8019b9e:	b1d5      	cbz	r5, 8019bd6 <rcl_action_take_cancel_response+0x76>
 8019ba0:	b1ce      	cbz	r6, 8019bd6 <rcl_action_take_cancel_response+0x76>
 8019ba2:	6820      	ldr	r0, [r4, #0]
 8019ba4:	4632      	mov	r2, r6
 8019ba6:	4629      	mov	r1, r5
 8019ba8:	3004      	adds	r0, #4
 8019baa:	f7f6 fd69 	bl	8010680 <rcl_take_response>
 8019bae:	b148      	cbz	r0, 8019bc4 <rcl_action_take_cancel_response+0x64>
 8019bb0:	280a      	cmp	r0, #10
 8019bb2:	d007      	beq.n	8019bc4 <rcl_action_take_cancel_response+0x64>
 8019bb4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019bb8:	f640 0337 	movw	r3, #2103	@ 0x837
 8019bbc:	4290      	cmp	r0, r2
 8019bbe:	bf0c      	ite	eq
 8019bc0:	4618      	moveq	r0, r3
 8019bc2:	2001      	movne	r0, #1
 8019bc4:	bd70      	pop	{r4, r5, r6, pc}
 8019bc6:	f7f9 f93b 	bl	8012e40 <rcutils_reset_error>
 8019bca:	f640 0036 	movw	r0, #2102	@ 0x836
 8019bce:	bd70      	pop	{r4, r5, r6, pc}
 8019bd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8019bd4:	bd70      	pop	{r4, r5, r6, pc}
 8019bd6:	200b      	movs	r0, #11
 8019bd8:	bd70      	pop	{r4, r5, r6, pc}
 8019bda:	f640 0036 	movw	r0, #2102	@ 0x836
 8019bde:	4770      	bx	lr

08019be0 <rcl_action_take_feedback>:
 8019be0:	2800      	cmp	r0, #0
 8019be2:	d038      	beq.n	8019c56 <rcl_action_take_feedback+0x76>
 8019be4:	b530      	push	{r4, r5, lr}
 8019be6:	4604      	mov	r4, r0
 8019be8:	6800      	ldr	r0, [r0, #0]
 8019bea:	b08f      	sub	sp, #60	@ 0x3c
 8019bec:	b378      	cbz	r0, 8019c4e <rcl_action_take_feedback+0x6e>
 8019bee:	460d      	mov	r5, r1
 8019bf0:	f7f6 fdae 	bl	8010750 <rcl_client_is_valid>
 8019bf4:	b328      	cbz	r0, 8019c42 <rcl_action_take_feedback+0x62>
 8019bf6:	6820      	ldr	r0, [r4, #0]
 8019bf8:	3004      	adds	r0, #4
 8019bfa:	f7f6 fda9 	bl	8010750 <rcl_client_is_valid>
 8019bfe:	b300      	cbz	r0, 8019c42 <rcl_action_take_feedback+0x62>
 8019c00:	6820      	ldr	r0, [r4, #0]
 8019c02:	3008      	adds	r0, #8
 8019c04:	f7f6 fda4 	bl	8010750 <rcl_client_is_valid>
 8019c08:	b1d8      	cbz	r0, 8019c42 <rcl_action_take_feedback+0x62>
 8019c0a:	6820      	ldr	r0, [r4, #0]
 8019c0c:	300c      	adds	r0, #12
 8019c0e:	f7f8 f801 	bl	8011c14 <rcl_subscription_is_valid>
 8019c12:	b1b0      	cbz	r0, 8019c42 <rcl_action_take_feedback+0x62>
 8019c14:	6820      	ldr	r0, [r4, #0]
 8019c16:	3010      	adds	r0, #16
 8019c18:	f7f7 fffc 	bl	8011c14 <rcl_subscription_is_valid>
 8019c1c:	b188      	cbz	r0, 8019c42 <rcl_action_take_feedback+0x62>
 8019c1e:	b1ed      	cbz	r5, 8019c5c <rcl_action_take_feedback+0x7c>
 8019c20:	6820      	ldr	r0, [r4, #0]
 8019c22:	2300      	movs	r3, #0
 8019c24:	466a      	mov	r2, sp
 8019c26:	4629      	mov	r1, r5
 8019c28:	300c      	adds	r0, #12
 8019c2a:	f7f7 ff95 	bl	8011b58 <rcl_take>
 8019c2e:	b160      	cbz	r0, 8019c4a <rcl_action_take_feedback+0x6a>
 8019c30:	f240 1391 	movw	r3, #401	@ 0x191
 8019c34:	4298      	cmp	r0, r3
 8019c36:	d014      	beq.n	8019c62 <rcl_action_take_feedback+0x82>
 8019c38:	280a      	cmp	r0, #10
 8019c3a:	bf18      	it	ne
 8019c3c:	2001      	movne	r0, #1
 8019c3e:	b00f      	add	sp, #60	@ 0x3c
 8019c40:	bd30      	pop	{r4, r5, pc}
 8019c42:	f7f9 f8fd 	bl	8012e40 <rcutils_reset_error>
 8019c46:	f640 0036 	movw	r0, #2102	@ 0x836
 8019c4a:	b00f      	add	sp, #60	@ 0x3c
 8019c4c:	bd30      	pop	{r4, r5, pc}
 8019c4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019c52:	b00f      	add	sp, #60	@ 0x3c
 8019c54:	bd30      	pop	{r4, r5, pc}
 8019c56:	f640 0036 	movw	r0, #2102	@ 0x836
 8019c5a:	4770      	bx	lr
 8019c5c:	200b      	movs	r0, #11
 8019c5e:	b00f      	add	sp, #60	@ 0x3c
 8019c60:	bd30      	pop	{r4, r5, pc}
 8019c62:	f640 0037 	movw	r0, #2103	@ 0x837
 8019c66:	e7f0      	b.n	8019c4a <rcl_action_take_feedback+0x6a>

08019c68 <rcl_action_wait_set_add_action_client>:
 8019c68:	2800      	cmp	r0, #0
 8019c6a:	d048      	beq.n	8019cfe <rcl_action_wait_set_add_action_client+0x96>
 8019c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c6e:	460c      	mov	r4, r1
 8019c70:	2900      	cmp	r1, #0
 8019c72:	d03c      	beq.n	8019cee <rcl_action_wait_set_add_action_client+0x86>
 8019c74:	4605      	mov	r5, r0
 8019c76:	6808      	ldr	r0, [r1, #0]
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	d038      	beq.n	8019cee <rcl_action_wait_set_add_action_client+0x86>
 8019c7c:	4617      	mov	r7, r2
 8019c7e:	461e      	mov	r6, r3
 8019c80:	f7f6 fd66 	bl	8010750 <rcl_client_is_valid>
 8019c84:	b3b0      	cbz	r0, 8019cf4 <rcl_action_wait_set_add_action_client+0x8c>
 8019c86:	6820      	ldr	r0, [r4, #0]
 8019c88:	3004      	adds	r0, #4
 8019c8a:	f7f6 fd61 	bl	8010750 <rcl_client_is_valid>
 8019c8e:	b388      	cbz	r0, 8019cf4 <rcl_action_wait_set_add_action_client+0x8c>
 8019c90:	6820      	ldr	r0, [r4, #0]
 8019c92:	3008      	adds	r0, #8
 8019c94:	f7f6 fd5c 	bl	8010750 <rcl_client_is_valid>
 8019c98:	b360      	cbz	r0, 8019cf4 <rcl_action_wait_set_add_action_client+0x8c>
 8019c9a:	6820      	ldr	r0, [r4, #0]
 8019c9c:	300c      	adds	r0, #12
 8019c9e:	f7f7 ffb9 	bl	8011c14 <rcl_subscription_is_valid>
 8019ca2:	b338      	cbz	r0, 8019cf4 <rcl_action_wait_set_add_action_client+0x8c>
 8019ca4:	6820      	ldr	r0, [r4, #0]
 8019ca6:	3010      	adds	r0, #16
 8019ca8:	f7f7 ffb4 	bl	8011c14 <rcl_subscription_is_valid>
 8019cac:	b310      	cbz	r0, 8019cf4 <rcl_action_wait_set_add_action_client+0x8c>
 8019cae:	6821      	ldr	r1, [r4, #0]
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8019cb6:	f7f8 fdd1 	bl	801285c <rcl_wait_set_add_client>
 8019cba:	b9b8      	cbnz	r0, 8019cec <rcl_action_wait_set_add_action_client+0x84>
 8019cbc:	6821      	ldr	r1, [r4, #0]
 8019cbe:	4628      	mov	r0, r5
 8019cc0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8019cc4:	3104      	adds	r1, #4
 8019cc6:	f7f8 fdc9 	bl	801285c <rcl_wait_set_add_client>
 8019cca:	b978      	cbnz	r0, 8019cec <rcl_action_wait_set_add_action_client+0x84>
 8019ccc:	6821      	ldr	r1, [r4, #0]
 8019cce:	4628      	mov	r0, r5
 8019cd0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8019cd4:	3108      	adds	r1, #8
 8019cd6:	f7f8 fdc1 	bl	801285c <rcl_wait_set_add_client>
 8019cda:	b938      	cbnz	r0, 8019cec <rcl_action_wait_set_add_action_client+0x84>
 8019cdc:	6821      	ldr	r1, [r4, #0]
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8019ce4:	310c      	adds	r1, #12
 8019ce6:	f7f8 fa71 	bl	80121cc <rcl_wait_set_add_subscription>
 8019cea:	b158      	cbz	r0, 8019d04 <rcl_action_wait_set_add_action_client+0x9c>
 8019cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cee:	f640 0036 	movw	r0, #2102	@ 0x836
 8019cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cf4:	f7f9 f8a4 	bl	8012e40 <rcutils_reset_error>
 8019cf8:	f640 0036 	movw	r0, #2102	@ 0x836
 8019cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cfe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019d02:	4770      	bx	lr
 8019d04:	6821      	ldr	r1, [r4, #0]
 8019d06:	4628      	mov	r0, r5
 8019d08:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8019d0c:	3110      	adds	r1, #16
 8019d0e:	f7f8 fa5d 	bl	80121cc <rcl_wait_set_add_subscription>
 8019d12:	2800      	cmp	r0, #0
 8019d14:	d1ea      	bne.n	8019cec <rcl_action_wait_set_add_action_client+0x84>
 8019d16:	b11f      	cbz	r7, 8019d20 <rcl_action_wait_set_add_action_client+0xb8>
 8019d18:	6823      	ldr	r3, [r4, #0]
 8019d1a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8019d1e:	603b      	str	r3, [r7, #0]
 8019d20:	2e00      	cmp	r6, #0
 8019d22:	d0e3      	beq.n	8019cec <rcl_action_wait_set_add_action_client+0x84>
 8019d24:	6823      	ldr	r3, [r4, #0]
 8019d26:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8019d2a:	6033      	str	r3, [r6, #0]
 8019d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d2e:	bf00      	nop

08019d30 <rcl_action_client_wait_set_get_entities_ready>:
 8019d30:	2800      	cmp	r0, #0
 8019d32:	f000 808d 	beq.w	8019e50 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8019d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d3a:	460c      	mov	r4, r1
 8019d3c:	2900      	cmp	r1, #0
 8019d3e:	d077      	beq.n	8019e30 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8019d40:	4605      	mov	r5, r0
 8019d42:	6808      	ldr	r0, [r1, #0]
 8019d44:	2800      	cmp	r0, #0
 8019d46:	d073      	beq.n	8019e30 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8019d48:	4616      	mov	r6, r2
 8019d4a:	461f      	mov	r7, r3
 8019d4c:	f7f6 fd00 	bl	8010750 <rcl_client_is_valid>
 8019d50:	2800      	cmp	r0, #0
 8019d52:	d071      	beq.n	8019e38 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8019d54:	6820      	ldr	r0, [r4, #0]
 8019d56:	3004      	adds	r0, #4
 8019d58:	f7f6 fcfa 	bl	8010750 <rcl_client_is_valid>
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	d06b      	beq.n	8019e38 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8019d60:	6820      	ldr	r0, [r4, #0]
 8019d62:	3008      	adds	r0, #8
 8019d64:	f7f6 fcf4 	bl	8010750 <rcl_client_is_valid>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	d065      	beq.n	8019e38 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8019d6c:	6820      	ldr	r0, [r4, #0]
 8019d6e:	300c      	adds	r0, #12
 8019d70:	f7f7 ff50 	bl	8011c14 <rcl_subscription_is_valid>
 8019d74:	2800      	cmp	r0, #0
 8019d76:	d05f      	beq.n	8019e38 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8019d78:	6820      	ldr	r0, [r4, #0]
 8019d7a:	3010      	adds	r0, #16
 8019d7c:	f7f7 ff4a 	bl	8011c14 <rcl_subscription_is_valid>
 8019d80:	2800      	cmp	r0, #0
 8019d82:	d059      	beq.n	8019e38 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8019d84:	2e00      	cmp	r6, #0
 8019d86:	d060      	beq.n	8019e4a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8019d88:	2f00      	cmp	r7, #0
 8019d8a:	d05e      	beq.n	8019e4a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8019d8c:	9b06      	ldr	r3, [sp, #24]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d05b      	beq.n	8019e4a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8019d92:	9b07      	ldr	r3, [sp, #28]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d058      	beq.n	8019e4a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8019d98:	9b08      	ldr	r3, [sp, #32]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d055      	beq.n	8019e4a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	686a      	ldr	r2, [r5, #4]
 8019da2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8019da6:	428a      	cmp	r2, r1
 8019da8:	d94c      	bls.n	8019e44 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8019daa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8019dae:	4282      	cmp	r2, r0
 8019db0:	d948      	bls.n	8019e44 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8019db2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8019db6:	69ea      	ldr	r2, [r5, #28]
 8019db8:	42a2      	cmp	r2, r4
 8019dba:	d943      	bls.n	8019e44 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8019dbc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8019dc0:	4562      	cmp	r2, ip
 8019dc2:	d93f      	bls.n	8019e44 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8019dc4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8019dc8:	4572      	cmp	r2, lr
 8019dca:	d93b      	bls.n	8019e44 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8019dcc:	69aa      	ldr	r2, [r5, #24]
 8019dce:	682d      	ldr	r5, [r5, #0]
 8019dd0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8019dd4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8019dd8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8019ddc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8019de0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8019de4:	f103 0c0c 	add.w	ip, r3, #12
 8019de8:	eba5 050c 	sub.w	r5, r5, ip
 8019dec:	fab5 f585 	clz	r5, r5
 8019df0:	096d      	lsrs	r5, r5, #5
 8019df2:	7035      	strb	r5, [r6, #0]
 8019df4:	f103 0510 	add.w	r5, r3, #16
 8019df8:	1b64      	subs	r4, r4, r5
 8019dfa:	fab4 f484 	clz	r4, r4
 8019dfe:	0964      	lsrs	r4, r4, #5
 8019e00:	703c      	strb	r4, [r7, #0]
 8019e02:	eba3 0008 	sub.w	r0, r3, r8
 8019e06:	1d1c      	adds	r4, r3, #4
 8019e08:	3308      	adds	r3, #8
 8019e0a:	1ad3      	subs	r3, r2, r3
 8019e0c:	fab0 f080 	clz	r0, r0
 8019e10:	9a06      	ldr	r2, [sp, #24]
 8019e12:	0940      	lsrs	r0, r0, #5
 8019e14:	1b09      	subs	r1, r1, r4
 8019e16:	7010      	strb	r0, [r2, #0]
 8019e18:	fab1 f181 	clz	r1, r1
 8019e1c:	9a07      	ldr	r2, [sp, #28]
 8019e1e:	0949      	lsrs	r1, r1, #5
 8019e20:	7011      	strb	r1, [r2, #0]
 8019e22:	fab3 f383 	clz	r3, r3
 8019e26:	9a08      	ldr	r2, [sp, #32]
 8019e28:	095b      	lsrs	r3, r3, #5
 8019e2a:	2000      	movs	r0, #0
 8019e2c:	7013      	strb	r3, [r2, #0]
 8019e2e:	e001      	b.n	8019e34 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8019e30:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e38:	f7f9 f802 	bl	8012e40 <rcutils_reset_error>
 8019e3c:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e44:	2001      	movs	r0, #1
 8019e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e4a:	200b      	movs	r0, #11
 8019e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e50:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019e54:	4770      	bx	lr
 8019e56:	bf00      	nop

08019e58 <rcl_action_take_goal_request>:
 8019e58:	2800      	cmp	r0, #0
 8019e5a:	d039      	beq.n	8019ed0 <rcl_action_take_goal_request+0x78>
 8019e5c:	b570      	push	{r4, r5, r6, lr}
 8019e5e:	4604      	mov	r4, r0
 8019e60:	6800      	ldr	r0, [r0, #0]
 8019e62:	b380      	cbz	r0, 8019ec6 <rcl_action_take_goal_request+0x6e>
 8019e64:	460d      	mov	r5, r1
 8019e66:	4616      	mov	r6, r2
 8019e68:	f7f7 fcf4 	bl	8011854 <rcl_service_is_valid>
 8019e6c:	b330      	cbz	r0, 8019ebc <rcl_action_take_goal_request+0x64>
 8019e6e:	6820      	ldr	r0, [r4, #0]
 8019e70:	3004      	adds	r0, #4
 8019e72:	f7f7 fcef 	bl	8011854 <rcl_service_is_valid>
 8019e76:	b308      	cbz	r0, 8019ebc <rcl_action_take_goal_request+0x64>
 8019e78:	6820      	ldr	r0, [r4, #0]
 8019e7a:	3008      	adds	r0, #8
 8019e7c:	f7f7 fcea 	bl	8011854 <rcl_service_is_valid>
 8019e80:	b1e0      	cbz	r0, 8019ebc <rcl_action_take_goal_request+0x64>
 8019e82:	6820      	ldr	r0, [r4, #0]
 8019e84:	300c      	adds	r0, #12
 8019e86:	f7f7 fb41 	bl	801150c <rcl_publisher_is_valid>
 8019e8a:	b1b8      	cbz	r0, 8019ebc <rcl_action_take_goal_request+0x64>
 8019e8c:	6820      	ldr	r0, [r4, #0]
 8019e8e:	3010      	adds	r0, #16
 8019e90:	f7f7 fb3c 	bl	801150c <rcl_publisher_is_valid>
 8019e94:	b190      	cbz	r0, 8019ebc <rcl_action_take_goal_request+0x64>
 8019e96:	b1cd      	cbz	r5, 8019ecc <rcl_action_take_goal_request+0x74>
 8019e98:	b1c6      	cbz	r6, 8019ecc <rcl_action_take_goal_request+0x74>
 8019e9a:	6820      	ldr	r0, [r4, #0]
 8019e9c:	4632      	mov	r2, r6
 8019e9e:	4629      	mov	r1, r5
 8019ea0:	f7f7 fc58 	bl	8011754 <rcl_take_request>
 8019ea4:	b148      	cbz	r0, 8019eba <rcl_action_take_goal_request+0x62>
 8019ea6:	280a      	cmp	r0, #10
 8019ea8:	d007      	beq.n	8019eba <rcl_action_take_goal_request+0x62>
 8019eaa:	f240 2259 	movw	r2, #601	@ 0x259
 8019eae:	f640 0399 	movw	r3, #2201	@ 0x899
 8019eb2:	4290      	cmp	r0, r2
 8019eb4:	bf0c      	ite	eq
 8019eb6:	4618      	moveq	r0, r3
 8019eb8:	2001      	movne	r0, #1
 8019eba:	bd70      	pop	{r4, r5, r6, pc}
 8019ebc:	f7f8 ffc0 	bl	8012e40 <rcutils_reset_error>
 8019ec0:	f640 0098 	movw	r0, #2200	@ 0x898
 8019ec4:	bd70      	pop	{r4, r5, r6, pc}
 8019ec6:	f640 0098 	movw	r0, #2200	@ 0x898
 8019eca:	bd70      	pop	{r4, r5, r6, pc}
 8019ecc:	200b      	movs	r0, #11
 8019ece:	bd70      	pop	{r4, r5, r6, pc}
 8019ed0:	f640 0098 	movw	r0, #2200	@ 0x898
 8019ed4:	4770      	bx	lr
 8019ed6:	bf00      	nop

08019ed8 <rcl_action_send_goal_response>:
 8019ed8:	b390      	cbz	r0, 8019f40 <rcl_action_send_goal_response+0x68>
 8019eda:	b570      	push	{r4, r5, r6, lr}
 8019edc:	4604      	mov	r4, r0
 8019ede:	6800      	ldr	r0, [r0, #0]
 8019ee0:	b348      	cbz	r0, 8019f36 <rcl_action_send_goal_response+0x5e>
 8019ee2:	460d      	mov	r5, r1
 8019ee4:	4616      	mov	r6, r2
 8019ee6:	f7f7 fcb5 	bl	8011854 <rcl_service_is_valid>
 8019eea:	b1f8      	cbz	r0, 8019f2c <rcl_action_send_goal_response+0x54>
 8019eec:	6820      	ldr	r0, [r4, #0]
 8019eee:	3004      	adds	r0, #4
 8019ef0:	f7f7 fcb0 	bl	8011854 <rcl_service_is_valid>
 8019ef4:	b1d0      	cbz	r0, 8019f2c <rcl_action_send_goal_response+0x54>
 8019ef6:	6820      	ldr	r0, [r4, #0]
 8019ef8:	3008      	adds	r0, #8
 8019efa:	f7f7 fcab 	bl	8011854 <rcl_service_is_valid>
 8019efe:	b1a8      	cbz	r0, 8019f2c <rcl_action_send_goal_response+0x54>
 8019f00:	6820      	ldr	r0, [r4, #0]
 8019f02:	300c      	adds	r0, #12
 8019f04:	f7f7 fb02 	bl	801150c <rcl_publisher_is_valid>
 8019f08:	b180      	cbz	r0, 8019f2c <rcl_action_send_goal_response+0x54>
 8019f0a:	6820      	ldr	r0, [r4, #0]
 8019f0c:	3010      	adds	r0, #16
 8019f0e:	f7f7 fafd 	bl	801150c <rcl_publisher_is_valid>
 8019f12:	b158      	cbz	r0, 8019f2c <rcl_action_send_goal_response+0x54>
 8019f14:	b195      	cbz	r5, 8019f3c <rcl_action_send_goal_response+0x64>
 8019f16:	b18e      	cbz	r6, 8019f3c <rcl_action_send_goal_response+0x64>
 8019f18:	6820      	ldr	r0, [r4, #0]
 8019f1a:	4632      	mov	r2, r6
 8019f1c:	4629      	mov	r1, r5
 8019f1e:	f7f7 fc69 	bl	80117f4 <rcl_send_response>
 8019f22:	b110      	cbz	r0, 8019f2a <rcl_action_send_goal_response+0x52>
 8019f24:	2802      	cmp	r0, #2
 8019f26:	bf18      	it	ne
 8019f28:	2001      	movne	r0, #1
 8019f2a:	bd70      	pop	{r4, r5, r6, pc}
 8019f2c:	f7f8 ff88 	bl	8012e40 <rcutils_reset_error>
 8019f30:	f640 0098 	movw	r0, #2200	@ 0x898
 8019f34:	bd70      	pop	{r4, r5, r6, pc}
 8019f36:	f640 0098 	movw	r0, #2200	@ 0x898
 8019f3a:	bd70      	pop	{r4, r5, r6, pc}
 8019f3c:	200b      	movs	r0, #11
 8019f3e:	bd70      	pop	{r4, r5, r6, pc}
 8019f40:	f640 0098 	movw	r0, #2200	@ 0x898
 8019f44:	4770      	bx	lr
 8019f46:	bf00      	nop

08019f48 <rcl_action_take_result_request>:
 8019f48:	2800      	cmp	r0, #0
 8019f4a:	d03a      	beq.n	8019fc2 <rcl_action_take_result_request+0x7a>
 8019f4c:	b570      	push	{r4, r5, r6, lr}
 8019f4e:	4604      	mov	r4, r0
 8019f50:	6800      	ldr	r0, [r0, #0]
 8019f52:	b388      	cbz	r0, 8019fb8 <rcl_action_take_result_request+0x70>
 8019f54:	460d      	mov	r5, r1
 8019f56:	4616      	mov	r6, r2
 8019f58:	f7f7 fc7c 	bl	8011854 <rcl_service_is_valid>
 8019f5c:	b338      	cbz	r0, 8019fae <rcl_action_take_result_request+0x66>
 8019f5e:	6820      	ldr	r0, [r4, #0]
 8019f60:	3004      	adds	r0, #4
 8019f62:	f7f7 fc77 	bl	8011854 <rcl_service_is_valid>
 8019f66:	b310      	cbz	r0, 8019fae <rcl_action_take_result_request+0x66>
 8019f68:	6820      	ldr	r0, [r4, #0]
 8019f6a:	3008      	adds	r0, #8
 8019f6c:	f7f7 fc72 	bl	8011854 <rcl_service_is_valid>
 8019f70:	b1e8      	cbz	r0, 8019fae <rcl_action_take_result_request+0x66>
 8019f72:	6820      	ldr	r0, [r4, #0]
 8019f74:	300c      	adds	r0, #12
 8019f76:	f7f7 fac9 	bl	801150c <rcl_publisher_is_valid>
 8019f7a:	b1c0      	cbz	r0, 8019fae <rcl_action_take_result_request+0x66>
 8019f7c:	6820      	ldr	r0, [r4, #0]
 8019f7e:	3010      	adds	r0, #16
 8019f80:	f7f7 fac4 	bl	801150c <rcl_publisher_is_valid>
 8019f84:	b198      	cbz	r0, 8019fae <rcl_action_take_result_request+0x66>
 8019f86:	b1d5      	cbz	r5, 8019fbe <rcl_action_take_result_request+0x76>
 8019f88:	b1ce      	cbz	r6, 8019fbe <rcl_action_take_result_request+0x76>
 8019f8a:	6820      	ldr	r0, [r4, #0]
 8019f8c:	4632      	mov	r2, r6
 8019f8e:	4629      	mov	r1, r5
 8019f90:	3008      	adds	r0, #8
 8019f92:	f7f7 fbdf 	bl	8011754 <rcl_take_request>
 8019f96:	b148      	cbz	r0, 8019fac <rcl_action_take_result_request+0x64>
 8019f98:	280a      	cmp	r0, #10
 8019f9a:	d007      	beq.n	8019fac <rcl_action_take_result_request+0x64>
 8019f9c:	f240 2259 	movw	r2, #601	@ 0x259
 8019fa0:	f640 0399 	movw	r3, #2201	@ 0x899
 8019fa4:	4290      	cmp	r0, r2
 8019fa6:	bf0c      	ite	eq
 8019fa8:	4618      	moveq	r0, r3
 8019faa:	2001      	movne	r0, #1
 8019fac:	bd70      	pop	{r4, r5, r6, pc}
 8019fae:	f7f8 ff47 	bl	8012e40 <rcutils_reset_error>
 8019fb2:	f640 0098 	movw	r0, #2200	@ 0x898
 8019fb6:	bd70      	pop	{r4, r5, r6, pc}
 8019fb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8019fbc:	bd70      	pop	{r4, r5, r6, pc}
 8019fbe:	200b      	movs	r0, #11
 8019fc0:	bd70      	pop	{r4, r5, r6, pc}
 8019fc2:	f640 0098 	movw	r0, #2200	@ 0x898
 8019fc6:	4770      	bx	lr

08019fc8 <rcl_action_take_cancel_request>:
 8019fc8:	2800      	cmp	r0, #0
 8019fca:	d03a      	beq.n	801a042 <rcl_action_take_cancel_request+0x7a>
 8019fcc:	b570      	push	{r4, r5, r6, lr}
 8019fce:	4604      	mov	r4, r0
 8019fd0:	6800      	ldr	r0, [r0, #0]
 8019fd2:	b388      	cbz	r0, 801a038 <rcl_action_take_cancel_request+0x70>
 8019fd4:	460d      	mov	r5, r1
 8019fd6:	4616      	mov	r6, r2
 8019fd8:	f7f7 fc3c 	bl	8011854 <rcl_service_is_valid>
 8019fdc:	b338      	cbz	r0, 801a02e <rcl_action_take_cancel_request+0x66>
 8019fde:	6820      	ldr	r0, [r4, #0]
 8019fe0:	3004      	adds	r0, #4
 8019fe2:	f7f7 fc37 	bl	8011854 <rcl_service_is_valid>
 8019fe6:	b310      	cbz	r0, 801a02e <rcl_action_take_cancel_request+0x66>
 8019fe8:	6820      	ldr	r0, [r4, #0]
 8019fea:	3008      	adds	r0, #8
 8019fec:	f7f7 fc32 	bl	8011854 <rcl_service_is_valid>
 8019ff0:	b1e8      	cbz	r0, 801a02e <rcl_action_take_cancel_request+0x66>
 8019ff2:	6820      	ldr	r0, [r4, #0]
 8019ff4:	300c      	adds	r0, #12
 8019ff6:	f7f7 fa89 	bl	801150c <rcl_publisher_is_valid>
 8019ffa:	b1c0      	cbz	r0, 801a02e <rcl_action_take_cancel_request+0x66>
 8019ffc:	6820      	ldr	r0, [r4, #0]
 8019ffe:	3010      	adds	r0, #16
 801a000:	f7f7 fa84 	bl	801150c <rcl_publisher_is_valid>
 801a004:	b198      	cbz	r0, 801a02e <rcl_action_take_cancel_request+0x66>
 801a006:	b1d5      	cbz	r5, 801a03e <rcl_action_take_cancel_request+0x76>
 801a008:	b1ce      	cbz	r6, 801a03e <rcl_action_take_cancel_request+0x76>
 801a00a:	6820      	ldr	r0, [r4, #0]
 801a00c:	4632      	mov	r2, r6
 801a00e:	4629      	mov	r1, r5
 801a010:	3004      	adds	r0, #4
 801a012:	f7f7 fb9f 	bl	8011754 <rcl_take_request>
 801a016:	b148      	cbz	r0, 801a02c <rcl_action_take_cancel_request+0x64>
 801a018:	280a      	cmp	r0, #10
 801a01a:	d007      	beq.n	801a02c <rcl_action_take_cancel_request+0x64>
 801a01c:	f240 2259 	movw	r2, #601	@ 0x259
 801a020:	f640 0399 	movw	r3, #2201	@ 0x899
 801a024:	4290      	cmp	r0, r2
 801a026:	bf0c      	ite	eq
 801a028:	4618      	moveq	r0, r3
 801a02a:	2001      	movne	r0, #1
 801a02c:	bd70      	pop	{r4, r5, r6, pc}
 801a02e:	f7f8 ff07 	bl	8012e40 <rcutils_reset_error>
 801a032:	f640 0098 	movw	r0, #2200	@ 0x898
 801a036:	bd70      	pop	{r4, r5, r6, pc}
 801a038:	f640 0098 	movw	r0, #2200	@ 0x898
 801a03c:	bd70      	pop	{r4, r5, r6, pc}
 801a03e:	200b      	movs	r0, #11
 801a040:	bd70      	pop	{r4, r5, r6, pc}
 801a042:	f640 0098 	movw	r0, #2200	@ 0x898
 801a046:	4770      	bx	lr

0801a048 <rcl_action_send_cancel_response>:
 801a048:	b398      	cbz	r0, 801a0b2 <rcl_action_send_cancel_response+0x6a>
 801a04a:	b570      	push	{r4, r5, r6, lr}
 801a04c:	4604      	mov	r4, r0
 801a04e:	6800      	ldr	r0, [r0, #0]
 801a050:	b350      	cbz	r0, 801a0a8 <rcl_action_send_cancel_response+0x60>
 801a052:	460d      	mov	r5, r1
 801a054:	4616      	mov	r6, r2
 801a056:	f7f7 fbfd 	bl	8011854 <rcl_service_is_valid>
 801a05a:	b300      	cbz	r0, 801a09e <rcl_action_send_cancel_response+0x56>
 801a05c:	6820      	ldr	r0, [r4, #0]
 801a05e:	3004      	adds	r0, #4
 801a060:	f7f7 fbf8 	bl	8011854 <rcl_service_is_valid>
 801a064:	b1d8      	cbz	r0, 801a09e <rcl_action_send_cancel_response+0x56>
 801a066:	6820      	ldr	r0, [r4, #0]
 801a068:	3008      	adds	r0, #8
 801a06a:	f7f7 fbf3 	bl	8011854 <rcl_service_is_valid>
 801a06e:	b1b0      	cbz	r0, 801a09e <rcl_action_send_cancel_response+0x56>
 801a070:	6820      	ldr	r0, [r4, #0]
 801a072:	300c      	adds	r0, #12
 801a074:	f7f7 fa4a 	bl	801150c <rcl_publisher_is_valid>
 801a078:	b188      	cbz	r0, 801a09e <rcl_action_send_cancel_response+0x56>
 801a07a:	6820      	ldr	r0, [r4, #0]
 801a07c:	3010      	adds	r0, #16
 801a07e:	f7f7 fa45 	bl	801150c <rcl_publisher_is_valid>
 801a082:	b160      	cbz	r0, 801a09e <rcl_action_send_cancel_response+0x56>
 801a084:	b19d      	cbz	r5, 801a0ae <rcl_action_send_cancel_response+0x66>
 801a086:	b196      	cbz	r6, 801a0ae <rcl_action_send_cancel_response+0x66>
 801a088:	6820      	ldr	r0, [r4, #0]
 801a08a:	4632      	mov	r2, r6
 801a08c:	4629      	mov	r1, r5
 801a08e:	3004      	adds	r0, #4
 801a090:	f7f7 fbb0 	bl	80117f4 <rcl_send_response>
 801a094:	b110      	cbz	r0, 801a09c <rcl_action_send_cancel_response+0x54>
 801a096:	2802      	cmp	r0, #2
 801a098:	bf18      	it	ne
 801a09a:	2001      	movne	r0, #1
 801a09c:	bd70      	pop	{r4, r5, r6, pc}
 801a09e:	f7f8 fecf 	bl	8012e40 <rcutils_reset_error>
 801a0a2:	f640 0098 	movw	r0, #2200	@ 0x898
 801a0a6:	bd70      	pop	{r4, r5, r6, pc}
 801a0a8:	f640 0098 	movw	r0, #2200	@ 0x898
 801a0ac:	bd70      	pop	{r4, r5, r6, pc}
 801a0ae:	200b      	movs	r0, #11
 801a0b0:	bd70      	pop	{r4, r5, r6, pc}
 801a0b2:	f640 0098 	movw	r0, #2200	@ 0x898
 801a0b6:	4770      	bx	lr

0801a0b8 <rcl_action_wait_set_add_action_server>:
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	d04d      	beq.n	801a158 <rcl_action_wait_set_add_action_server+0xa0>
 801a0bc:	b570      	push	{r4, r5, r6, lr}
 801a0be:	460c      	mov	r4, r1
 801a0c0:	b159      	cbz	r1, 801a0da <rcl_action_wait_set_add_action_server+0x22>
 801a0c2:	4605      	mov	r5, r0
 801a0c4:	6808      	ldr	r0, [r1, #0]
 801a0c6:	b140      	cbz	r0, 801a0da <rcl_action_wait_set_add_action_server+0x22>
 801a0c8:	4616      	mov	r6, r2
 801a0ca:	f7f7 fbc3 	bl	8011854 <rcl_service_is_valid>
 801a0ce:	b120      	cbz	r0, 801a0da <rcl_action_wait_set_add_action_server+0x22>
 801a0d0:	6820      	ldr	r0, [r4, #0]
 801a0d2:	3004      	adds	r0, #4
 801a0d4:	f7f7 fbbe 	bl	8011854 <rcl_service_is_valid>
 801a0d8:	b910      	cbnz	r0, 801a0e0 <rcl_action_wait_set_add_action_server+0x28>
 801a0da:	f640 0098 	movw	r0, #2200	@ 0x898
 801a0de:	bd70      	pop	{r4, r5, r6, pc}
 801a0e0:	6820      	ldr	r0, [r4, #0]
 801a0e2:	3008      	adds	r0, #8
 801a0e4:	f7f7 fbb6 	bl	8011854 <rcl_service_is_valid>
 801a0e8:	2800      	cmp	r0, #0
 801a0ea:	d0f6      	beq.n	801a0da <rcl_action_wait_set_add_action_server+0x22>
 801a0ec:	6820      	ldr	r0, [r4, #0]
 801a0ee:	300c      	adds	r0, #12
 801a0f0:	f7f7 fa24 	bl	801153c <rcl_publisher_is_valid_except_context>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d0f0      	beq.n	801a0da <rcl_action_wait_set_add_action_server+0x22>
 801a0f8:	6820      	ldr	r0, [r4, #0]
 801a0fa:	3010      	adds	r0, #16
 801a0fc:	f7f7 fa1e 	bl	801153c <rcl_publisher_is_valid_except_context>
 801a100:	2800      	cmp	r0, #0
 801a102:	d0ea      	beq.n	801a0da <rcl_action_wait_set_add_action_server+0x22>
 801a104:	6821      	ldr	r1, [r4, #0]
 801a106:	4628      	mov	r0, r5
 801a108:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801a10c:	f7f8 fbd2 	bl	80128b4 <rcl_wait_set_add_service>
 801a110:	2800      	cmp	r0, #0
 801a112:	d1e4      	bne.n	801a0de <rcl_action_wait_set_add_action_server+0x26>
 801a114:	6821      	ldr	r1, [r4, #0]
 801a116:	4628      	mov	r0, r5
 801a118:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801a11c:	3104      	adds	r1, #4
 801a11e:	f7f8 fbc9 	bl	80128b4 <rcl_wait_set_add_service>
 801a122:	2800      	cmp	r0, #0
 801a124:	d1db      	bne.n	801a0de <rcl_action_wait_set_add_action_server+0x26>
 801a126:	6821      	ldr	r1, [r4, #0]
 801a128:	4628      	mov	r0, r5
 801a12a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801a12e:	3108      	adds	r1, #8
 801a130:	f7f8 fbc0 	bl	80128b4 <rcl_wait_set_add_service>
 801a134:	2800      	cmp	r0, #0
 801a136:	d1d2      	bne.n	801a0de <rcl_action_wait_set_add_action_server+0x26>
 801a138:	6821      	ldr	r1, [r4, #0]
 801a13a:	4628      	mov	r0, r5
 801a13c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801a140:	3114      	adds	r1, #20
 801a142:	f7f8 fb5b 	bl	80127fc <rcl_wait_set_add_timer>
 801a146:	2800      	cmp	r0, #0
 801a148:	d1c9      	bne.n	801a0de <rcl_action_wait_set_add_action_server+0x26>
 801a14a:	2e00      	cmp	r6, #0
 801a14c:	d0c7      	beq.n	801a0de <rcl_action_wait_set_add_action_server+0x26>
 801a14e:	6823      	ldr	r3, [r4, #0]
 801a150:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801a154:	6033      	str	r3, [r6, #0]
 801a156:	bd70      	pop	{r4, r5, r6, pc}
 801a158:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a15c:	4770      	bx	lr
 801a15e:	bf00      	nop

0801a160 <rcl_action_server_wait_set_get_entities_ready>:
 801a160:	2800      	cmp	r0, #0
 801a162:	d05a      	beq.n	801a21a <rcl_action_server_wait_set_get_entities_ready+0xba>
 801a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a166:	460c      	mov	r4, r1
 801a168:	b161      	cbz	r1, 801a184 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a16a:	4605      	mov	r5, r0
 801a16c:	6808      	ldr	r0, [r1, #0]
 801a16e:	b148      	cbz	r0, 801a184 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a170:	4616      	mov	r6, r2
 801a172:	461f      	mov	r7, r3
 801a174:	f7f7 fb6e 	bl	8011854 <rcl_service_is_valid>
 801a178:	b120      	cbz	r0, 801a184 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a17a:	6820      	ldr	r0, [r4, #0]
 801a17c:	3004      	adds	r0, #4
 801a17e:	f7f7 fb69 	bl	8011854 <rcl_service_is_valid>
 801a182:	b910      	cbnz	r0, 801a18a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801a184:	f640 0098 	movw	r0, #2200	@ 0x898
 801a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a18a:	6820      	ldr	r0, [r4, #0]
 801a18c:	3008      	adds	r0, #8
 801a18e:	f7f7 fb61 	bl	8011854 <rcl_service_is_valid>
 801a192:	2800      	cmp	r0, #0
 801a194:	d0f6      	beq.n	801a184 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a196:	6820      	ldr	r0, [r4, #0]
 801a198:	300c      	adds	r0, #12
 801a19a:	f7f7 f9cf 	bl	801153c <rcl_publisher_is_valid_except_context>
 801a19e:	2800      	cmp	r0, #0
 801a1a0:	d0f0      	beq.n	801a184 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a1a2:	6820      	ldr	r0, [r4, #0]
 801a1a4:	3010      	adds	r0, #16
 801a1a6:	f7f7 f9c9 	bl	801153c <rcl_publisher_is_valid_except_context>
 801a1aa:	2800      	cmp	r0, #0
 801a1ac:	d0ea      	beq.n	801a184 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a1ae:	b3be      	cbz	r6, 801a220 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a1b0:	b3b7      	cbz	r7, 801a220 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a1b2:	9b06      	ldr	r3, [sp, #24]
 801a1b4:	b3a3      	cbz	r3, 801a220 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a1b6:	9b07      	ldr	r3, [sp, #28]
 801a1b8:	b393      	cbz	r3, 801a220 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a1ba:	6821      	ldr	r1, [r4, #0]
 801a1bc:	692a      	ldr	r2, [r5, #16]
 801a1be:	6a2c      	ldr	r4, [r5, #32]
 801a1c0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801a1c4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801a1c8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801a1cc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801a1d0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801a1d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a1d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a1dc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801a1e0:	1a64      	subs	r4, r4, r1
 801a1e2:	fab4 f484 	clz	r4, r4
 801a1e6:	0964      	lsrs	r4, r4, #5
 801a1e8:	7034      	strb	r4, [r6, #0]
 801a1ea:	1d0c      	adds	r4, r1, #4
 801a1ec:	1b1b      	subs	r3, r3, r4
 801a1ee:	fab3 f383 	clz	r3, r3
 801a1f2:	095b      	lsrs	r3, r3, #5
 801a1f4:	f101 0408 	add.w	r4, r1, #8
 801a1f8:	703b      	strb	r3, [r7, #0]
 801a1fa:	f101 0314 	add.w	r3, r1, #20
 801a1fe:	1b01      	subs	r1, r0, r4
 801a200:	1ad3      	subs	r3, r2, r3
 801a202:	fab1 f181 	clz	r1, r1
 801a206:	9a06      	ldr	r2, [sp, #24]
 801a208:	0949      	lsrs	r1, r1, #5
 801a20a:	7011      	strb	r1, [r2, #0]
 801a20c:	fab3 f383 	clz	r3, r3
 801a210:	9a07      	ldr	r2, [sp, #28]
 801a212:	095b      	lsrs	r3, r3, #5
 801a214:	2000      	movs	r0, #0
 801a216:	7013      	strb	r3, [r2, #0]
 801a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a21a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a21e:	4770      	bx	lr
 801a220:	200b      	movs	r0, #11
 801a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a224 <_execute_event_handler>:
 801a224:	2002      	movs	r0, #2
 801a226:	4770      	bx	lr

0801a228 <_cancel_goal_event_handler>:
 801a228:	2003      	movs	r0, #3
 801a22a:	4770      	bx	lr

0801a22c <_succeed_event_handler>:
 801a22c:	2004      	movs	r0, #4
 801a22e:	4770      	bx	lr

0801a230 <_abort_event_handler>:
 801a230:	2006      	movs	r0, #6
 801a232:	4770      	bx	lr

0801a234 <_canceled_event_handler>:
 801a234:	2005      	movs	r0, #5
 801a236:	4770      	bx	lr

0801a238 <rcl_action_transition_goal_state>:
 801a238:	b2c2      	uxtb	r2, r0
 801a23a:	2a06      	cmp	r2, #6
 801a23c:	d80c      	bhi.n	801a258 <rcl_action_transition_goal_state+0x20>
 801a23e:	2904      	cmp	r1, #4
 801a240:	d80a      	bhi.n	801a258 <rcl_action_transition_goal_state+0x20>
 801a242:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801a246:	b410      	push	{r4}
 801a248:	1853      	adds	r3, r2, r1
 801a24a:	4c06      	ldr	r4, [pc, #24]	@ (801a264 <rcl_action_transition_goal_state+0x2c>)
 801a24c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a250:	b123      	cbz	r3, 801a25c <rcl_action_transition_goal_state+0x24>
 801a252:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a256:	4718      	bx	r3
 801a258:	2000      	movs	r0, #0
 801a25a:	4770      	bx	lr
 801a25c:	2000      	movs	r0, #0
 801a25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a262:	4770      	bx	lr
 801a264:	0802420c 	.word	0x0802420c

0801a268 <rcl_action_get_zero_initialized_cancel_response>:
 801a268:	b510      	push	{r4, lr}
 801a26a:	4c07      	ldr	r4, [pc, #28]	@ (801a288 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801a26c:	4686      	mov	lr, r0
 801a26e:	4684      	mov	ip, r0
 801a270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a278:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a27c:	6823      	ldr	r3, [r4, #0]
 801a27e:	f8cc 3000 	str.w	r3, [ip]
 801a282:	4670      	mov	r0, lr
 801a284:	bd10      	pop	{r4, pc}
 801a286:	bf00      	nop
 801a288:	08024298 	.word	0x08024298

0801a28c <rclc_action_send_result_request>:
 801a28c:	b1d0      	cbz	r0, 801a2c4 <rclc_action_send_result_request+0x38>
 801a28e:	b500      	push	{lr}
 801a290:	4684      	mov	ip, r0
 801a292:	b087      	sub	sp, #28
 801a294:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801a298:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801a29c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801a2a0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801a2a4:	f10d 0e08 	add.w	lr, sp, #8
 801a2a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a2ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a2b0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801a2b4:	a902      	add	r1, sp, #8
 801a2b6:	3010      	adds	r0, #16
 801a2b8:	f7ff fbda 	bl	8019a70 <rcl_action_send_result_request>
 801a2bc:	b920      	cbnz	r0, 801a2c8 <rclc_action_send_result_request+0x3c>
 801a2be:	b007      	add	sp, #28
 801a2c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a2c4:	200b      	movs	r0, #11
 801a2c6:	4770      	bx	lr
 801a2c8:	9001      	str	r0, [sp, #4]
 801a2ca:	f7f8 fdb9 	bl	8012e40 <rcutils_reset_error>
 801a2ce:	9801      	ldr	r0, [sp, #4]
 801a2d0:	b007      	add	sp, #28
 801a2d2:	f85d fb04 	ldr.w	pc, [sp], #4
 801a2d6:	bf00      	nop

0801a2d8 <rclc_action_take_goal_handle>:
 801a2d8:	b160      	cbz	r0, 801a2f4 <rclc_action_take_goal_handle+0x1c>
 801a2da:	6883      	ldr	r3, [r0, #8]
 801a2dc:	b143      	cbz	r3, 801a2f0 <rclc_action_take_goal_handle+0x18>
 801a2de:	6819      	ldr	r1, [r3, #0]
 801a2e0:	6081      	str	r1, [r0, #8]
 801a2e2:	2200      	movs	r2, #0
 801a2e4:	721a      	strb	r2, [r3, #8]
 801a2e6:	68c1      	ldr	r1, [r0, #12]
 801a2e8:	6019      	str	r1, [r3, #0]
 801a2ea:	621a      	str	r2, [r3, #32]
 801a2ec:	849a      	strh	r2, [r3, #36]	@ 0x24
 801a2ee:	60c3      	str	r3, [r0, #12]
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	4770      	bx	lr
 801a2f4:	4603      	mov	r3, r0
 801a2f6:	e7fb      	b.n	801a2f0 <rclc_action_take_goal_handle+0x18>

0801a2f8 <rclc_action_remove_used_goal_handle>:
 801a2f8:	b180      	cbz	r0, 801a31c <rclc_action_remove_used_goal_handle+0x24>
 801a2fa:	b179      	cbz	r1, 801a31c <rclc_action_remove_used_goal_handle+0x24>
 801a2fc:	68c3      	ldr	r3, [r0, #12]
 801a2fe:	4299      	cmp	r1, r3
 801a300:	d00d      	beq.n	801a31e <rclc_action_remove_used_goal_handle+0x26>
 801a302:	b12b      	cbz	r3, 801a310 <rclc_action_remove_used_goal_handle+0x18>
 801a304:	681a      	ldr	r2, [r3, #0]
 801a306:	4291      	cmp	r1, r2
 801a308:	d003      	beq.n	801a312 <rclc_action_remove_used_goal_handle+0x1a>
 801a30a:	4613      	mov	r3, r2
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d1f9      	bne.n	801a304 <rclc_action_remove_used_goal_handle+0xc>
 801a310:	4770      	bx	lr
 801a312:	680a      	ldr	r2, [r1, #0]
 801a314:	601a      	str	r2, [r3, #0]
 801a316:	6883      	ldr	r3, [r0, #8]
 801a318:	600b      	str	r3, [r1, #0]
 801a31a:	6081      	str	r1, [r0, #8]
 801a31c:	4770      	bx	lr
 801a31e:	680b      	ldr	r3, [r1, #0]
 801a320:	60c3      	str	r3, [r0, #12]
 801a322:	e7f8      	b.n	801a316 <rclc_action_remove_used_goal_handle+0x1e>

0801a324 <rclc_action_find_goal_handle_by_uuid>:
 801a324:	b538      	push	{r3, r4, r5, lr}
 801a326:	b180      	cbz	r0, 801a34a <rclc_action_find_goal_handle_by_uuid+0x26>
 801a328:	460d      	mov	r5, r1
 801a32a:	b181      	cbz	r1, 801a34e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801a32c:	68c4      	ldr	r4, [r0, #12]
 801a32e:	b914      	cbnz	r4, 801a336 <rclc_action_find_goal_handle_by_uuid+0x12>
 801a330:	e009      	b.n	801a346 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a332:	6824      	ldr	r4, [r4, #0]
 801a334:	b13c      	cbz	r4, 801a346 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a336:	f104 0009 	add.w	r0, r4, #9
 801a33a:	2210      	movs	r2, #16
 801a33c:	4629      	mov	r1, r5
 801a33e:	f003 f88b 	bl	801d458 <memcmp>
 801a342:	2800      	cmp	r0, #0
 801a344:	d1f5      	bne.n	801a332 <rclc_action_find_goal_handle_by_uuid+0xe>
 801a346:	4620      	mov	r0, r4
 801a348:	bd38      	pop	{r3, r4, r5, pc}
 801a34a:	4604      	mov	r4, r0
 801a34c:	e7fb      	b.n	801a346 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a34e:	460c      	mov	r4, r1
 801a350:	e7f9      	b.n	801a346 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a352:	bf00      	nop

0801a354 <rclc_action_find_first_handle_by_status>:
 801a354:	b140      	cbz	r0, 801a368 <rclc_action_find_first_handle_by_status+0x14>
 801a356:	68c0      	ldr	r0, [r0, #12]
 801a358:	b910      	cbnz	r0, 801a360 <rclc_action_find_first_handle_by_status+0xc>
 801a35a:	e005      	b.n	801a368 <rclc_action_find_first_handle_by_status+0x14>
 801a35c:	6800      	ldr	r0, [r0, #0]
 801a35e:	b118      	cbz	r0, 801a368 <rclc_action_find_first_handle_by_status+0x14>
 801a360:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801a364:	428b      	cmp	r3, r1
 801a366:	d1f9      	bne.n	801a35c <rclc_action_find_first_handle_by_status+0x8>
 801a368:	4770      	bx	lr
 801a36a:	bf00      	nop

0801a36c <rclc_action_find_first_terminated_handle>:
 801a36c:	b140      	cbz	r0, 801a380 <rclc_action_find_first_terminated_handle+0x14>
 801a36e:	68c0      	ldr	r0, [r0, #12]
 801a370:	b910      	cbnz	r0, 801a378 <rclc_action_find_first_terminated_handle+0xc>
 801a372:	e005      	b.n	801a380 <rclc_action_find_first_terminated_handle+0x14>
 801a374:	6800      	ldr	r0, [r0, #0]
 801a376:	b118      	cbz	r0, 801a380 <rclc_action_find_first_terminated_handle+0x14>
 801a378:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801a37c:	2b03      	cmp	r3, #3
 801a37e:	ddf9      	ble.n	801a374 <rclc_action_find_first_terminated_handle+0x8>
 801a380:	4770      	bx	lr
 801a382:	bf00      	nop

0801a384 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801a384:	b170      	cbz	r0, 801a3a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801a386:	68c0      	ldr	r0, [r0, #12]
 801a388:	b160      	cbz	r0, 801a3a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801a38a:	b410      	push	{r4}
 801a38c:	e001      	b.n	801a392 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801a38e:	6800      	ldr	r0, [r0, #0]
 801a390:	b128      	cbz	r0, 801a39e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801a392:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801a396:	4299      	cmp	r1, r3
 801a398:	bf08      	it	eq
 801a39a:	4294      	cmpeq	r4, r2
 801a39c:	d1f7      	bne.n	801a38e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3a2:	4770      	bx	lr
 801a3a4:	4770      	bx	lr
 801a3a6:	bf00      	nop

0801a3a8 <rclc_action_find_handle_by_result_request_sequence_number>:
 801a3a8:	b170      	cbz	r0, 801a3c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801a3aa:	68c0      	ldr	r0, [r0, #12]
 801a3ac:	b160      	cbz	r0, 801a3c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801a3ae:	b410      	push	{r4}
 801a3b0:	e001      	b.n	801a3b6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801a3b2:	6800      	ldr	r0, [r0, #0]
 801a3b4:	b128      	cbz	r0, 801a3c2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801a3b6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801a3ba:	4299      	cmp	r1, r3
 801a3bc:	bf08      	it	eq
 801a3be:	4294      	cmpeq	r4, r2
 801a3c0:	d1f7      	bne.n	801a3b2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801a3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3c6:	4770      	bx	lr
 801a3c8:	4770      	bx	lr
 801a3ca:	bf00      	nop

0801a3cc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801a3cc:	b170      	cbz	r0, 801a3ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801a3ce:	68c0      	ldr	r0, [r0, #12]
 801a3d0:	b160      	cbz	r0, 801a3ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801a3d2:	b410      	push	{r4}
 801a3d4:	e001      	b.n	801a3da <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801a3d6:	6800      	ldr	r0, [r0, #0]
 801a3d8:	b128      	cbz	r0, 801a3e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801a3da:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801a3de:	4299      	cmp	r1, r3
 801a3e0:	bf08      	it	eq
 801a3e2:	4294      	cmpeq	r4, r2
 801a3e4:	d1f7      	bne.n	801a3d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801a3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3ea:	4770      	bx	lr
 801a3ec:	4770      	bx	lr
 801a3ee:	bf00      	nop

0801a3f0 <rclc_action_find_first_handle_with_goal_response>:
 801a3f0:	b140      	cbz	r0, 801a404 <rclc_action_find_first_handle_with_goal_response+0x14>
 801a3f2:	68c0      	ldr	r0, [r0, #12]
 801a3f4:	b910      	cbnz	r0, 801a3fc <rclc_action_find_first_handle_with_goal_response+0xc>
 801a3f6:	e005      	b.n	801a404 <rclc_action_find_first_handle_with_goal_response+0x14>
 801a3f8:	6800      	ldr	r0, [r0, #0]
 801a3fa:	b118      	cbz	r0, 801a404 <rclc_action_find_first_handle_with_goal_response+0x14>
 801a3fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d0f9      	beq.n	801a3f8 <rclc_action_find_first_handle_with_goal_response+0x8>
 801a404:	4770      	bx	lr
 801a406:	bf00      	nop

0801a408 <rclc_action_find_first_handle_with_result_response>:
 801a408:	b140      	cbz	r0, 801a41c <rclc_action_find_first_handle_with_result_response+0x14>
 801a40a:	68c0      	ldr	r0, [r0, #12]
 801a40c:	b910      	cbnz	r0, 801a414 <rclc_action_find_first_handle_with_result_response+0xc>
 801a40e:	e005      	b.n	801a41c <rclc_action_find_first_handle_with_result_response+0x14>
 801a410:	6800      	ldr	r0, [r0, #0]
 801a412:	b118      	cbz	r0, 801a41c <rclc_action_find_first_handle_with_result_response+0x14>
 801a414:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d0f9      	beq.n	801a410 <rclc_action_find_first_handle_with_result_response+0x8>
 801a41c:	4770      	bx	lr
 801a41e:	bf00      	nop

0801a420 <rclc_action_server_response_goal_request>:
 801a420:	b198      	cbz	r0, 801a44a <rclc_action_server_response_goal_request+0x2a>
 801a422:	b510      	push	{r4, lr}
 801a424:	6844      	ldr	r4, [r0, #4]
 801a426:	b086      	sub	sp, #24
 801a428:	2200      	movs	r2, #0
 801a42a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801a42e:	460b      	mov	r3, r1
 801a430:	9205      	str	r2, [sp, #20]
 801a432:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801a436:	aa03      	add	r2, sp, #12
 801a438:	f104 0010 	add.w	r0, r4, #16
 801a43c:	f88d 300c 	strb.w	r3, [sp, #12]
 801a440:	f7ff fd4a 	bl	8019ed8 <rcl_action_send_goal_response>
 801a444:	b918      	cbnz	r0, 801a44e <rclc_action_server_response_goal_request+0x2e>
 801a446:	b006      	add	sp, #24
 801a448:	bd10      	pop	{r4, pc}
 801a44a:	200b      	movs	r0, #11
 801a44c:	4770      	bx	lr
 801a44e:	9001      	str	r0, [sp, #4]
 801a450:	f7f8 fcf6 	bl	8012e40 <rcutils_reset_error>
 801a454:	9801      	ldr	r0, [sp, #4]
 801a456:	b006      	add	sp, #24
 801a458:	bd10      	pop	{r4, pc}
 801a45a:	bf00      	nop
 801a45c:	0000      	movs	r0, r0
	...

0801a460 <rclc_action_server_goal_cancel_accept>:
 801a460:	b310      	cbz	r0, 801a4a8 <rclc_action_server_goal_cancel_accept+0x48>
 801a462:	b510      	push	{r4, lr}
 801a464:	b090      	sub	sp, #64	@ 0x40
 801a466:	4604      	mov	r4, r0
 801a468:	a806      	add	r0, sp, #24
 801a46a:	f7ff fefd 	bl	801a268 <rcl_action_get_zero_initialized_cancel_response>
 801a46e:	2300      	movs	r3, #0
 801a470:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801a474:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801a478:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801a47c:	f88d 3018 	strb.w	r3, [sp, #24]
 801a480:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801a484:	f8cd d01c 	str.w	sp, [sp, #28]
 801a488:	46ec      	mov	ip, sp
 801a48a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a48e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801a4b0 <rclc_action_server_goal_cancel_accept+0x50>
 801a492:	6860      	ldr	r0, [r4, #4]
 801a494:	aa06      	add	r2, sp, #24
 801a496:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801a49a:	3010      	adds	r0, #16
 801a49c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801a4a0:	f7ff fdd2 	bl	801a048 <rcl_action_send_cancel_response>
 801a4a4:	b010      	add	sp, #64	@ 0x40
 801a4a6:	bd10      	pop	{r4, pc}
 801a4a8:	200b      	movs	r0, #11
 801a4aa:	4770      	bx	lr
 801a4ac:	f3af 8000 	nop.w
 801a4b0:	00000001 	.word	0x00000001
 801a4b4:	00000001 	.word	0x00000001

0801a4b8 <rclc_action_server_goal_cancel_reject>:
 801a4b8:	b082      	sub	sp, #8
 801a4ba:	b530      	push	{r4, r5, lr}
 801a4bc:	b08b      	sub	sp, #44	@ 0x2c
 801a4be:	ac0e      	add	r4, sp, #56	@ 0x38
 801a4c0:	e884 000c 	stmia.w	r4, {r2, r3}
 801a4c4:	b188      	cbz	r0, 801a4ea <rclc_action_server_goal_cancel_reject+0x32>
 801a4c6:	4604      	mov	r4, r0
 801a4c8:	a801      	add	r0, sp, #4
 801a4ca:	460d      	mov	r5, r1
 801a4cc:	f7ff fecc 	bl	801a268 <rcl_action_get_zero_initialized_cancel_response>
 801a4d0:	aa01      	add	r2, sp, #4
 801a4d2:	a90e      	add	r1, sp, #56	@ 0x38
 801a4d4:	f104 0010 	add.w	r0, r4, #16
 801a4d8:	f88d 5004 	strb.w	r5, [sp, #4]
 801a4dc:	f7ff fdb4 	bl	801a048 <rcl_action_send_cancel_response>
 801a4e0:	b00b      	add	sp, #44	@ 0x2c
 801a4e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a4e6:	b002      	add	sp, #8
 801a4e8:	4770      	bx	lr
 801a4ea:	200b      	movs	r0, #11
 801a4ec:	b00b      	add	sp, #44	@ 0x2c
 801a4ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a4f2:	b002      	add	sp, #8
 801a4f4:	4770      	bx	lr
 801a4f6:	bf00      	nop

0801a4f8 <rcl_get_automatic_discovery_range>:
 801a4f8:	b530      	push	{r4, r5, lr}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	9301      	str	r3, [sp, #4]
 801a500:	b1c0      	cbz	r0, 801a534 <rcl_get_automatic_discovery_range+0x3c>
 801a502:	4604      	mov	r4, r0
 801a504:	a901      	add	r1, sp, #4
 801a506:	4818      	ldr	r0, [pc, #96]	@ (801a568 <rcl_get_automatic_discovery_range+0x70>)
 801a508:	f7f8 fc6a 	bl	8012de0 <rcutils_get_env>
 801a50c:	b110      	cbz	r0, 801a514 <rcl_get_automatic_discovery_range+0x1c>
 801a50e:	2001      	movs	r0, #1
 801a510:	b003      	add	sp, #12
 801a512:	bd30      	pop	{r4, r5, pc}
 801a514:	9d01      	ldr	r5, [sp, #4]
 801a516:	782b      	ldrb	r3, [r5, #0]
 801a518:	b13b      	cbz	r3, 801a52a <rcl_get_automatic_discovery_range+0x32>
 801a51a:	4914      	ldr	r1, [pc, #80]	@ (801a56c <rcl_get_automatic_discovery_range+0x74>)
 801a51c:	4628      	mov	r0, r5
 801a51e:	f7e5 fe57 	bl	80001d0 <strcmp>
 801a522:	b950      	cbnz	r0, 801a53a <rcl_get_automatic_discovery_range+0x42>
 801a524:	2301      	movs	r3, #1
 801a526:	7023      	strb	r3, [r4, #0]
 801a528:	e7f2      	b.n	801a510 <rcl_get_automatic_discovery_range+0x18>
 801a52a:	2303      	movs	r3, #3
 801a52c:	2000      	movs	r0, #0
 801a52e:	7023      	strb	r3, [r4, #0]
 801a530:	b003      	add	sp, #12
 801a532:	bd30      	pop	{r4, r5, pc}
 801a534:	200b      	movs	r0, #11
 801a536:	b003      	add	sp, #12
 801a538:	bd30      	pop	{r4, r5, pc}
 801a53a:	490d      	ldr	r1, [pc, #52]	@ (801a570 <rcl_get_automatic_discovery_range+0x78>)
 801a53c:	4628      	mov	r0, r5
 801a53e:	f7e5 fe47 	bl	80001d0 <strcmp>
 801a542:	b168      	cbz	r0, 801a560 <rcl_get_automatic_discovery_range+0x68>
 801a544:	490b      	ldr	r1, [pc, #44]	@ (801a574 <rcl_get_automatic_discovery_range+0x7c>)
 801a546:	4628      	mov	r0, r5
 801a548:	f7e5 fe42 	bl	80001d0 <strcmp>
 801a54c:	2800      	cmp	r0, #0
 801a54e:	d0ec      	beq.n	801a52a <rcl_get_automatic_discovery_range+0x32>
 801a550:	4909      	ldr	r1, [pc, #36]	@ (801a578 <rcl_get_automatic_discovery_range+0x80>)
 801a552:	4628      	mov	r0, r5
 801a554:	f7e5 fe3c 	bl	80001d0 <strcmp>
 801a558:	b910      	cbnz	r0, 801a560 <rcl_get_automatic_discovery_range+0x68>
 801a55a:	2304      	movs	r3, #4
 801a55c:	7023      	strb	r3, [r4, #0]
 801a55e:	e7d7      	b.n	801a510 <rcl_get_automatic_discovery_range+0x18>
 801a560:	2302      	movs	r3, #2
 801a562:	7023      	strb	r3, [r4, #0]
 801a564:	2000      	movs	r0, #0
 801a566:	e7d3      	b.n	801a510 <rcl_get_automatic_discovery_range+0x18>
 801a568:	080242bc 	.word	0x080242bc
 801a56c:	080242dc 	.word	0x080242dc
 801a570:	080242e0 	.word	0x080242e0
 801a574:	080242ec 	.word	0x080242ec
 801a578:	080242f4 	.word	0x080242f4

0801a57c <rcl_automatic_discovery_range_to_string>:
 801a57c:	2804      	cmp	r0, #4
 801a57e:	bf9a      	itte	ls
 801a580:	4b02      	ldrls	r3, [pc, #8]	@ (801a58c <rcl_automatic_discovery_range_to_string+0x10>)
 801a582:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801a586:	2000      	movhi	r0, #0
 801a588:	4770      	bx	lr
 801a58a:	bf00      	nop
 801a58c:	080243e4 	.word	0x080243e4

0801a590 <rcl_get_discovery_static_peers>:
 801a590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a594:	b08e      	sub	sp, #56	@ 0x38
 801a596:	2300      	movs	r3, #0
 801a598:	9306      	str	r3, [sp, #24]
 801a59a:	2800      	cmp	r0, #0
 801a59c:	d04b      	beq.n	801a636 <rcl_get_discovery_static_peers+0xa6>
 801a59e:	460d      	mov	r5, r1
 801a5a0:	2900      	cmp	r1, #0
 801a5a2:	d048      	beq.n	801a636 <rcl_get_discovery_static_peers+0xa6>
 801a5a4:	4604      	mov	r4, r0
 801a5a6:	a906      	add	r1, sp, #24
 801a5a8:	482b      	ldr	r0, [pc, #172]	@ (801a658 <rcl_get_discovery_static_peers+0xc8>)
 801a5aa:	f7f8 fc19 	bl	8012de0 <rcutils_get_env>
 801a5ae:	b118      	cbz	r0, 801a5b8 <rcl_get_discovery_static_peers+0x28>
 801a5b0:	2001      	movs	r0, #1
 801a5b2:	b00e      	add	sp, #56	@ 0x38
 801a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5b8:	9b06      	ldr	r3, [sp, #24]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d0f8      	beq.n	801a5b0 <rcl_get_discovery_static_peers+0x20>
 801a5be:	af07      	add	r7, sp, #28
 801a5c0:	4638      	mov	r0, r7
 801a5c2:	f000 fc25 	bl	801ae10 <rcutils_get_zero_initialized_string_array>
 801a5c6:	f105 0308 	add.w	r3, r5, #8
 801a5ca:	9703      	str	r7, [sp, #12]
 801a5cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a5d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a5d4:	9806      	ldr	r0, [sp, #24]
 801a5d6:	e895 000c 	ldmia.w	r5, {r2, r3}
 801a5da:	213b      	movs	r1, #59	@ 0x3b
 801a5dc:	f000 fb5a 	bl	801ac94 <rcutils_split>
 801a5e0:	2800      	cmp	r0, #0
 801a5e2:	d1e5      	bne.n	801a5b0 <rcl_get_discovery_static_peers+0x20>
 801a5e4:	462a      	mov	r2, r5
 801a5e6:	9907      	ldr	r1, [sp, #28]
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	f000 fc5f 	bl	801aeac <rmw_discovery_options_init>
 801a5ee:	4605      	mov	r5, r0
 801a5f0:	bb78      	cbnz	r0, 801a652 <rcl_get_discovery_static_peers+0xc2>
 801a5f2:	9e07      	ldr	r6, [sp, #28]
 801a5f4:	b336      	cbz	r6, 801a644 <rcl_get_discovery_static_peers+0xb4>
 801a5f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a5fa:	4680      	mov	r8, r0
 801a5fc:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 801a600:	9105      	str	r1, [sp, #20]
 801a602:	4608      	mov	r0, r1
 801a604:	f7e5 fe44 	bl	8000290 <strlen>
 801a608:	28ff      	cmp	r0, #255	@ 0xff
 801a60a:	9905      	ldr	r1, [sp, #20]
 801a60c:	ea4f 2905 	mov.w	r9, r5, lsl #8
 801a610:	d815      	bhi.n	801a63e <rcl_get_discovery_static_peers+0xae>
 801a612:	6860      	ldr	r0, [r4, #4]
 801a614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a618:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 801a61c:	f002 ff6d 	bl	801d4fa <strncpy>
 801a620:	6863      	ldr	r3, [r4, #4]
 801a622:	9e07      	ldr	r6, [sp, #28]
 801a624:	3501      	adds	r5, #1
 801a626:	444b      	add	r3, r9
 801a628:	42b5      	cmp	r5, r6
 801a62a:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801a62e:	d209      	bcs.n	801a644 <rcl_get_discovery_static_peers+0xb4>
 801a630:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a634:	e7e2      	b.n	801a5fc <rcl_get_discovery_static_peers+0x6c>
 801a636:	200b      	movs	r0, #11
 801a638:	b00e      	add	sp, #56	@ 0x38
 801a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a63e:	3501      	adds	r5, #1
 801a640:	42b5      	cmp	r5, r6
 801a642:	d3db      	bcc.n	801a5fc <rcl_get_discovery_static_peers+0x6c>
 801a644:	4638      	mov	r0, r7
 801a646:	f000 fc01 	bl	801ae4c <rcutils_string_array_fini>
 801a64a:	3800      	subs	r0, #0
 801a64c:	bf18      	it	ne
 801a64e:	2001      	movne	r0, #1
 801a650:	e7af      	b.n	801a5b2 <rcl_get_discovery_static_peers+0x22>
 801a652:	f7f6 f8c3 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 801a656:	e7ac      	b.n	801a5b2 <rcl_get_discovery_static_peers+0x22>
 801a658:	08024304 	.word	0x08024304

0801a65c <rcl_get_default_domain_id>:
 801a65c:	b530      	push	{r4, r5, lr}
 801a65e:	b083      	sub	sp, #12
 801a660:	2300      	movs	r3, #0
 801a662:	9300      	str	r3, [sp, #0]
 801a664:	b1d0      	cbz	r0, 801a69c <rcl_get_default_domain_id+0x40>
 801a666:	4604      	mov	r4, r0
 801a668:	4669      	mov	r1, sp
 801a66a:	4815      	ldr	r0, [pc, #84]	@ (801a6c0 <rcl_get_default_domain_id+0x64>)
 801a66c:	f7f8 fbb8 	bl	8012de0 <rcutils_get_env>
 801a670:	4602      	mov	r2, r0
 801a672:	b110      	cbz	r0, 801a67a <rcl_get_default_domain_id+0x1e>
 801a674:	2001      	movs	r0, #1
 801a676:	b003      	add	sp, #12
 801a678:	bd30      	pop	{r4, r5, pc}
 801a67a:	9b00      	ldr	r3, [sp, #0]
 801a67c:	b18b      	cbz	r3, 801a6a2 <rcl_get_default_domain_id+0x46>
 801a67e:	7818      	ldrb	r0, [r3, #0]
 801a680:	2800      	cmp	r0, #0
 801a682:	d0f8      	beq.n	801a676 <rcl_get_default_domain_id+0x1a>
 801a684:	a901      	add	r1, sp, #4
 801a686:	4618      	mov	r0, r3
 801a688:	9201      	str	r2, [sp, #4]
 801a68a:	f001 ff81 	bl	801c590 <strtoul>
 801a68e:	4605      	mov	r5, r0
 801a690:	b150      	cbz	r0, 801a6a8 <rcl_get_default_domain_id+0x4c>
 801a692:	1c43      	adds	r3, r0, #1
 801a694:	d00d      	beq.n	801a6b2 <rcl_get_default_domain_id+0x56>
 801a696:	6025      	str	r5, [r4, #0]
 801a698:	2000      	movs	r0, #0
 801a69a:	e7ec      	b.n	801a676 <rcl_get_default_domain_id+0x1a>
 801a69c:	200b      	movs	r0, #11
 801a69e:	b003      	add	sp, #12
 801a6a0:	bd30      	pop	{r4, r5, pc}
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	b003      	add	sp, #12
 801a6a6:	bd30      	pop	{r4, r5, pc}
 801a6a8:	9b01      	ldr	r3, [sp, #4]
 801a6aa:	781b      	ldrb	r3, [r3, #0]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d0f2      	beq.n	801a696 <rcl_get_default_domain_id+0x3a>
 801a6b0:	e7e0      	b.n	801a674 <rcl_get_default_domain_id+0x18>
 801a6b2:	f002 ffa5 	bl	801d600 <__errno>
 801a6b6:	6803      	ldr	r3, [r0, #0]
 801a6b8:	2b22      	cmp	r3, #34	@ 0x22
 801a6ba:	d1ec      	bne.n	801a696 <rcl_get_default_domain_id+0x3a>
 801a6bc:	e7da      	b.n	801a674 <rcl_get_default_domain_id+0x18>
 801a6be:	bf00      	nop
 801a6c0:	080243f8 	.word	0x080243f8

0801a6c4 <rcl_expand_topic_name>:
 801a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c8:	b08b      	sub	sp, #44	@ 0x2c
 801a6ca:	9306      	str	r3, [sp, #24]
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	f000 80ad 	beq.w	801a82c <rcl_expand_topic_name+0x168>
 801a6d2:	460e      	mov	r6, r1
 801a6d4:	2900      	cmp	r1, #0
 801a6d6:	f000 80a9 	beq.w	801a82c <rcl_expand_topic_name+0x168>
 801a6da:	4617      	mov	r7, r2
 801a6dc:	2a00      	cmp	r2, #0
 801a6de:	f000 80a5 	beq.w	801a82c <rcl_expand_topic_name+0x168>
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	f000 80a2 	beq.w	801a82c <rcl_expand_topic_name+0x168>
 801a6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	f000 809e 	beq.w	801a82c <rcl_expand_topic_name+0x168>
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	a909      	add	r1, sp, #36	@ 0x24
 801a6f4:	4680      	mov	r8, r0
 801a6f6:	f000 f9fb 	bl	801aaf0 <rcl_validate_topic_name>
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	f040 8096 	bne.w	801a82e <rcl_expand_topic_name+0x16a>
 801a702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a704:	2b00      	cmp	r3, #0
 801a706:	f040 809a 	bne.w	801a83e <rcl_expand_topic_name+0x17a>
 801a70a:	4602      	mov	r2, r0
 801a70c:	a909      	add	r1, sp, #36	@ 0x24
 801a70e:	4630      	mov	r0, r6
 801a710:	f7fa fe2c 	bl	801536c <rmw_validate_node_name>
 801a714:	2800      	cmp	r0, #0
 801a716:	f040 808e 	bne.w	801a836 <rcl_expand_topic_name+0x172>
 801a71a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a71c:	2a00      	cmp	r2, #0
 801a71e:	f040 8093 	bne.w	801a848 <rcl_expand_topic_name+0x184>
 801a722:	a909      	add	r1, sp, #36	@ 0x24
 801a724:	4638      	mov	r0, r7
 801a726:	f7fa fe03 	bl	8015330 <rmw_validate_namespace>
 801a72a:	2800      	cmp	r0, #0
 801a72c:	f040 8083 	bne.w	801a836 <rcl_expand_topic_name+0x172>
 801a730:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a732:	2c00      	cmp	r4, #0
 801a734:	f040 80ed 	bne.w	801a912 <rcl_expand_topic_name+0x24e>
 801a738:	217b      	movs	r1, #123	@ 0x7b
 801a73a:	4640      	mov	r0, r8
 801a73c:	f002 febe 	bl	801d4bc <strchr>
 801a740:	f898 3000 	ldrb.w	r3, [r8]
 801a744:	2b2f      	cmp	r3, #47	@ 0x2f
 801a746:	4605      	mov	r5, r0
 801a748:	f000 809e 	beq.w	801a888 <rcl_expand_topic_name+0x1c4>
 801a74c:	2b7e      	cmp	r3, #126	@ 0x7e
 801a74e:	f040 80a2 	bne.w	801a896 <rcl_expand_topic_name+0x1d2>
 801a752:	4638      	mov	r0, r7
 801a754:	f7e5 fd9c 	bl	8000290 <strlen>
 801a758:	4a82      	ldr	r2, [pc, #520]	@ (801a964 <rcl_expand_topic_name+0x2a0>)
 801a75a:	4b83      	ldr	r3, [pc, #524]	@ (801a968 <rcl_expand_topic_name+0x2a4>)
 801a75c:	2801      	cmp	r0, #1
 801a75e:	bf18      	it	ne
 801a760:	4613      	movne	r3, r2
 801a762:	9302      	str	r3, [sp, #8]
 801a764:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a766:	9300      	str	r3, [sp, #0]
 801a768:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a76c:	f108 0301 	add.w	r3, r8, #1
 801a770:	9305      	str	r3, [sp, #20]
 801a772:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a776:	9301      	str	r3, [sp, #4]
 801a778:	ab14      	add	r3, sp, #80	@ 0x50
 801a77a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a77c:	f7f8 fb8c 	bl	8012e98 <rcutils_format_string_limit>
 801a780:	4682      	mov	sl, r0
 801a782:	2800      	cmp	r0, #0
 801a784:	f000 80c7 	beq.w	801a916 <rcl_expand_topic_name+0x252>
 801a788:	2d00      	cmp	r5, #0
 801a78a:	f000 80a2 	beq.w	801a8d2 <rcl_expand_topic_name+0x20e>
 801a78e:	217b      	movs	r1, #123	@ 0x7b
 801a790:	f002 fe94 	bl	801d4bc <strchr>
 801a794:	46d1      	mov	r9, sl
 801a796:	4605      	mov	r5, r0
 801a798:	9407      	str	r4, [sp, #28]
 801a79a:	46d3      	mov	fp, sl
 801a79c:	464c      	mov	r4, r9
 801a79e:	2d00      	cmp	r5, #0
 801a7a0:	f000 80be 	beq.w	801a920 <rcl_expand_topic_name+0x25c>
 801a7a4:	217d      	movs	r1, #125	@ 0x7d
 801a7a6:	4620      	mov	r0, r4
 801a7a8:	f002 fe88 	bl	801d4bc <strchr>
 801a7ac:	eba0 0905 	sub.w	r9, r0, r5
 801a7b0:	f109 0a01 	add.w	sl, r9, #1
 801a7b4:	486d      	ldr	r0, [pc, #436]	@ (801a96c <rcl_expand_topic_name+0x2a8>)
 801a7b6:	4652      	mov	r2, sl
 801a7b8:	4629      	mov	r1, r5
 801a7ba:	f002 fe8c 	bl	801d4d6 <strncmp>
 801a7be:	2800      	cmp	r0, #0
 801a7c0:	d067      	beq.n	801a892 <rcl_expand_topic_name+0x1ce>
 801a7c2:	486b      	ldr	r0, [pc, #428]	@ (801a970 <rcl_expand_topic_name+0x2ac>)
 801a7c4:	4652      	mov	r2, sl
 801a7c6:	4629      	mov	r1, r5
 801a7c8:	f002 fe85 	bl	801d4d6 <strncmp>
 801a7cc:	b130      	cbz	r0, 801a7dc <rcl_expand_topic_name+0x118>
 801a7ce:	4869      	ldr	r0, [pc, #420]	@ (801a974 <rcl_expand_topic_name+0x2b0>)
 801a7d0:	4652      	mov	r2, sl
 801a7d2:	4629      	mov	r1, r5
 801a7d4:	f002 fe7f 	bl	801d4d6 <strncmp>
 801a7d8:	2800      	cmp	r0, #0
 801a7da:	d137      	bne.n	801a84c <rcl_expand_topic_name+0x188>
 801a7dc:	46b9      	mov	r9, r7
 801a7de:	ab16      	add	r3, sp, #88	@ 0x58
 801a7e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a7e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a7e8:	ab14      	add	r3, sp, #80	@ 0x50
 801a7ea:	4628      	mov	r0, r5
 801a7ec:	cb0c      	ldmia	r3, {r2, r3}
 801a7ee:	4651      	mov	r1, sl
 801a7f0:	f7f8 fc92 	bl	8013118 <rcutils_strndup>
 801a7f4:	4605      	mov	r5, r0
 801a7f6:	2800      	cmp	r0, #0
 801a7f8:	f000 809c 	beq.w	801a934 <rcl_expand_topic_name+0x270>
 801a7fc:	464a      	mov	r2, r9
 801a7fe:	4620      	mov	r0, r4
 801a800:	ab14      	add	r3, sp, #80	@ 0x50
 801a802:	4629      	mov	r1, r5
 801a804:	f7f8 fb82 	bl	8012f0c <rcutils_repl_str>
 801a808:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a80a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a80c:	4604      	mov	r4, r0
 801a80e:	4628      	mov	r0, r5
 801a810:	4798      	blx	r3
 801a812:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a814:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a816:	4658      	mov	r0, fp
 801a818:	4798      	blx	r3
 801a81a:	2c00      	cmp	r4, #0
 801a81c:	d07b      	beq.n	801a916 <rcl_expand_topic_name+0x252>
 801a81e:	217b      	movs	r1, #123	@ 0x7b
 801a820:	4620      	mov	r0, r4
 801a822:	f002 fe4b 	bl	801d4bc <strchr>
 801a826:	46a3      	mov	fp, r4
 801a828:	4605      	mov	r5, r0
 801a82a:	e7b8      	b.n	801a79e <rcl_expand_topic_name+0xda>
 801a82c:	240b      	movs	r4, #11
 801a82e:	4620      	mov	r0, r4
 801a830:	b00b      	add	sp, #44	@ 0x2c
 801a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a836:	f7f5 ffd1 	bl	80107dc <rcl_convert_rmw_ret_to_rcl_ret>
 801a83a:	4604      	mov	r4, r0
 801a83c:	e7f7      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a83e:	2467      	movs	r4, #103	@ 0x67
 801a840:	4620      	mov	r0, r4
 801a842:	b00b      	add	sp, #44	@ 0x2c
 801a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a848:	24c9      	movs	r4, #201	@ 0xc9
 801a84a:	e7f0      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a84c:	f109 32ff 	add.w	r2, r9, #4294967295
 801a850:	9806      	ldr	r0, [sp, #24]
 801a852:	1c69      	adds	r1, r5, #1
 801a854:	f7f8 fd5c 	bl	8013310 <rcutils_string_map_getn>
 801a858:	4681      	mov	r9, r0
 801a85a:	2800      	cmp	r0, #0
 801a85c:	d1bf      	bne.n	801a7de <rcl_expand_topic_name+0x11a>
 801a85e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a860:	aa16      	add	r2, sp, #88	@ 0x58
 801a862:	6018      	str	r0, [r3, #0]
 801a864:	ca07      	ldmia	r2, {r0, r1, r2}
 801a866:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a86a:	ab14      	add	r3, sp, #80	@ 0x50
 801a86c:	cb0c      	ldmia	r3, {r2, r3}
 801a86e:	4651      	mov	r1, sl
 801a870:	4628      	mov	r0, r5
 801a872:	f7f8 fc51 	bl	8013118 <rcutils_strndup>
 801a876:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a878:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a87a:	4798      	blx	r3
 801a87c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a87e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a880:	4658      	mov	r0, fp
 801a882:	2469      	movs	r4, #105	@ 0x69
 801a884:	4798      	blx	r3
 801a886:	e7d2      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a888:	2800      	cmp	r0, #0
 801a88a:	d05b      	beq.n	801a944 <rcl_expand_topic_name+0x280>
 801a88c:	46c1      	mov	r9, r8
 801a88e:	46a2      	mov	sl, r4
 801a890:	e782      	b.n	801a798 <rcl_expand_topic_name+0xd4>
 801a892:	46b1      	mov	r9, r6
 801a894:	e7a3      	b.n	801a7de <rcl_expand_topic_name+0x11a>
 801a896:	2800      	cmp	r0, #0
 801a898:	d1f8      	bne.n	801a88c <rcl_expand_topic_name+0x1c8>
 801a89a:	4638      	mov	r0, r7
 801a89c:	f7e5 fcf8 	bl	8000290 <strlen>
 801a8a0:	4a35      	ldr	r2, [pc, #212]	@ (801a978 <rcl_expand_topic_name+0x2b4>)
 801a8a2:	4b36      	ldr	r3, [pc, #216]	@ (801a97c <rcl_expand_topic_name+0x2b8>)
 801a8a4:	f8cd 8010 	str.w	r8, [sp, #16]
 801a8a8:	2801      	cmp	r0, #1
 801a8aa:	bf18      	it	ne
 801a8ac:	4613      	movne	r3, r2
 801a8ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a8b2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a8b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a8b8:	9703      	str	r7, [sp, #12]
 801a8ba:	9200      	str	r2, [sp, #0]
 801a8bc:	ab14      	add	r3, sp, #80	@ 0x50
 801a8be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a8c0:	f7f8 faea 	bl	8012e98 <rcutils_format_string_limit>
 801a8c4:	4682      	mov	sl, r0
 801a8c6:	4653      	mov	r3, sl
 801a8c8:	b32b      	cbz	r3, 801a916 <rcl_expand_topic_name+0x252>
 801a8ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a8cc:	f8c3 a000 	str.w	sl, [r3]
 801a8d0:	e7ad      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a8d2:	f89a 3000 	ldrb.w	r3, [sl]
 801a8d6:	2b2f      	cmp	r3, #47	@ 0x2f
 801a8d8:	d0f7      	beq.n	801a8ca <rcl_expand_topic_name+0x206>
 801a8da:	4638      	mov	r0, r7
 801a8dc:	f7e5 fcd8 	bl	8000290 <strlen>
 801a8e0:	4a25      	ldr	r2, [pc, #148]	@ (801a978 <rcl_expand_topic_name+0x2b4>)
 801a8e2:	4b26      	ldr	r3, [pc, #152]	@ (801a97c <rcl_expand_topic_name+0x2b8>)
 801a8e4:	f8cd a010 	str.w	sl, [sp, #16]
 801a8e8:	2801      	cmp	r0, #1
 801a8ea:	bf18      	it	ne
 801a8ec:	4613      	movne	r3, r2
 801a8ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a8f2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a8f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a8f8:	9703      	str	r7, [sp, #12]
 801a8fa:	9200      	str	r2, [sp, #0]
 801a8fc:	ab14      	add	r3, sp, #80	@ 0x50
 801a8fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a900:	f7f8 faca 	bl	8012e98 <rcutils_format_string_limit>
 801a904:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a906:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a908:	4605      	mov	r5, r0
 801a90a:	4650      	mov	r0, sl
 801a90c:	4798      	blx	r3
 801a90e:	46aa      	mov	sl, r5
 801a910:	e7d9      	b.n	801a8c6 <rcl_expand_topic_name+0x202>
 801a912:	24ca      	movs	r4, #202	@ 0xca
 801a914:	e78b      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a916:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a918:	2300      	movs	r3, #0
 801a91a:	6013      	str	r3, [r2, #0]
 801a91c:	240a      	movs	r4, #10
 801a91e:	e786      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a920:	465b      	mov	r3, fp
 801a922:	9c07      	ldr	r4, [sp, #28]
 801a924:	46da      	mov	sl, fp
 801a926:	2b00      	cmp	r3, #0
 801a928:	d1d3      	bne.n	801a8d2 <rcl_expand_topic_name+0x20e>
 801a92a:	f898 3000 	ldrb.w	r3, [r8]
 801a92e:	2b2f      	cmp	r3, #47	@ 0x2f
 801a930:	d0cb      	beq.n	801a8ca <rcl_expand_topic_name+0x206>
 801a932:	e7b2      	b.n	801a89a <rcl_expand_topic_name+0x1d6>
 801a934:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801a938:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a93a:	6015      	str	r5, [r2, #0]
 801a93c:	4658      	mov	r0, fp
 801a93e:	4798      	blx	r3
 801a940:	240a      	movs	r4, #10
 801a942:	e774      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a944:	ab17      	add	r3, sp, #92	@ 0x5c
 801a946:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a94a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a94e:	ab14      	add	r3, sp, #80	@ 0x50
 801a950:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a952:	4640      	mov	r0, r8
 801a954:	f7f8 fbba 	bl	80130cc <rcutils_strdup>
 801a958:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a95a:	2800      	cmp	r0, #0
 801a95c:	6018      	str	r0, [r3, #0]
 801a95e:	bf08      	it	eq
 801a960:	240a      	moveq	r4, #10
 801a962:	e764      	b.n	801a82e <rcl_expand_topic_name+0x16a>
 801a964:	08024408 	.word	0x08024408
 801a968:	080239b0 	.word	0x080239b0
 801a96c:	08024410 	.word	0x08024410
 801a970:	08024418 	.word	0x08024418
 801a974:	08024420 	.word	0x08024420
 801a978:	08023768 	.word	0x08023768
 801a97c:	08023760 	.word	0x08023760

0801a980 <rcl_get_default_topic_name_substitutions>:
 801a980:	2800      	cmp	r0, #0
 801a982:	bf0c      	ite	eq
 801a984:	200b      	moveq	r0, #11
 801a986:	2000      	movne	r0, #0
 801a988:	4770      	bx	lr
 801a98a:	bf00      	nop

0801a98c <rcl_get_zero_initialized_guard_condition>:
 801a98c:	4a03      	ldr	r2, [pc, #12]	@ (801a99c <rcl_get_zero_initialized_guard_condition+0x10>)
 801a98e:	4603      	mov	r3, r0
 801a990:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a994:	e883 0003 	stmia.w	r3, {r0, r1}
 801a998:	4618      	mov	r0, r3
 801a99a:	4770      	bx	lr
 801a99c:	0802442c 	.word	0x0802442c

0801a9a0 <rcl_guard_condition_init_from_rmw>:
 801a9a0:	b082      	sub	sp, #8
 801a9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a6:	b086      	sub	sp, #24
 801a9a8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a9b2:	460e      	mov	r6, r1
 801a9b4:	4617      	mov	r7, r2
 801a9b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a9ba:	f10d 0e04 	add.w	lr, sp, #4
 801a9be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a9c2:	f8dc 3000 	ldr.w	r3, [ip]
 801a9c6:	f8ce 3000 	str.w	r3, [lr]
 801a9ca:	a801      	add	r0, sp, #4
 801a9cc:	f7f8 f956 	bl	8012c7c <rcutils_allocator_is_valid>
 801a9d0:	b350      	cbz	r0, 801aa28 <rcl_guard_condition_init_from_rmw+0x88>
 801a9d2:	b34c      	cbz	r4, 801aa28 <rcl_guard_condition_init_from_rmw+0x88>
 801a9d4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a9d8:	f1b8 0f00 	cmp.w	r8, #0
 801a9dc:	d11e      	bne.n	801aa1c <rcl_guard_condition_init_from_rmw+0x7c>
 801a9de:	b31f      	cbz	r7, 801aa28 <rcl_guard_condition_init_from_rmw+0x88>
 801a9e0:	4638      	mov	r0, r7
 801a9e2:	f7f5 ff19 	bl	8010818 <rcl_context_is_valid>
 801a9e6:	b328      	cbz	r0, 801aa34 <rcl_guard_condition_init_from_rmw+0x94>
 801a9e8:	9b01      	ldr	r3, [sp, #4]
 801a9ea:	9905      	ldr	r1, [sp, #20]
 801a9ec:	201c      	movs	r0, #28
 801a9ee:	4798      	blx	r3
 801a9f0:	4605      	mov	r5, r0
 801a9f2:	6060      	str	r0, [r4, #4]
 801a9f4:	b358      	cbz	r0, 801aa4e <rcl_guard_condition_init_from_rmw+0xae>
 801a9f6:	b1fe      	cbz	r6, 801aa38 <rcl_guard_condition_init_from_rmw+0x98>
 801a9f8:	6006      	str	r6, [r0, #0]
 801a9fa:	f880 8004 	strb.w	r8, [r0, #4]
 801a9fe:	ac01      	add	r4, sp, #4
 801aa00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aa02:	f105 0c08 	add.w	ip, r5, #8
 801aa06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aa0a:	6823      	ldr	r3, [r4, #0]
 801aa0c:	f8cc 3000 	str.w	r3, [ip]
 801aa10:	2000      	movs	r0, #0
 801aa12:	b006      	add	sp, #24
 801aa14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa18:	b002      	add	sp, #8
 801aa1a:	4770      	bx	lr
 801aa1c:	2064      	movs	r0, #100	@ 0x64
 801aa1e:	b006      	add	sp, #24
 801aa20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa24:	b002      	add	sp, #8
 801aa26:	4770      	bx	lr
 801aa28:	200b      	movs	r0, #11
 801aa2a:	b006      	add	sp, #24
 801aa2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa30:	b002      	add	sp, #8
 801aa32:	4770      	bx	lr
 801aa34:	2065      	movs	r0, #101	@ 0x65
 801aa36:	e7f2      	b.n	801aa1e <rcl_guard_condition_init_from_rmw+0x7e>
 801aa38:	6838      	ldr	r0, [r7, #0]
 801aa3a:	3028      	adds	r0, #40	@ 0x28
 801aa3c:	f000 fb70 	bl	801b120 <rmw_create_guard_condition>
 801aa40:	6028      	str	r0, [r5, #0]
 801aa42:	6865      	ldr	r5, [r4, #4]
 801aa44:	682e      	ldr	r6, [r5, #0]
 801aa46:	b126      	cbz	r6, 801aa52 <rcl_guard_condition_init_from_rmw+0xb2>
 801aa48:	2301      	movs	r3, #1
 801aa4a:	712b      	strb	r3, [r5, #4]
 801aa4c:	e7d7      	b.n	801a9fe <rcl_guard_condition_init_from_rmw+0x5e>
 801aa4e:	200a      	movs	r0, #10
 801aa50:	e7e5      	b.n	801aa1e <rcl_guard_condition_init_from_rmw+0x7e>
 801aa52:	4628      	mov	r0, r5
 801aa54:	9b02      	ldr	r3, [sp, #8]
 801aa56:	9905      	ldr	r1, [sp, #20]
 801aa58:	4798      	blx	r3
 801aa5a:	6066      	str	r6, [r4, #4]
 801aa5c:	2001      	movs	r0, #1
 801aa5e:	e7de      	b.n	801aa1e <rcl_guard_condition_init_from_rmw+0x7e>

0801aa60 <rcl_guard_condition_fini>:
 801aa60:	b570      	push	{r4, r5, r6, lr}
 801aa62:	b082      	sub	sp, #8
 801aa64:	b1f0      	cbz	r0, 801aaa4 <rcl_guard_condition_fini+0x44>
 801aa66:	6843      	ldr	r3, [r0, #4]
 801aa68:	4604      	mov	r4, r0
 801aa6a:	b163      	cbz	r3, 801aa86 <rcl_guard_condition_fini+0x26>
 801aa6c:	6818      	ldr	r0, [r3, #0]
 801aa6e:	68de      	ldr	r6, [r3, #12]
 801aa70:	6999      	ldr	r1, [r3, #24]
 801aa72:	b160      	cbz	r0, 801aa8e <rcl_guard_condition_fini+0x2e>
 801aa74:	791d      	ldrb	r5, [r3, #4]
 801aa76:	b965      	cbnz	r5, 801aa92 <rcl_guard_condition_fini+0x32>
 801aa78:	4618      	mov	r0, r3
 801aa7a:	47b0      	blx	r6
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	4628      	mov	r0, r5
 801aa80:	6063      	str	r3, [r4, #4]
 801aa82:	b002      	add	sp, #8
 801aa84:	bd70      	pop	{r4, r5, r6, pc}
 801aa86:	461d      	mov	r5, r3
 801aa88:	4628      	mov	r0, r5
 801aa8a:	b002      	add	sp, #8
 801aa8c:	bd70      	pop	{r4, r5, r6, pc}
 801aa8e:	4605      	mov	r5, r0
 801aa90:	e7f2      	b.n	801aa78 <rcl_guard_condition_fini+0x18>
 801aa92:	9101      	str	r1, [sp, #4]
 801aa94:	f000 fb58 	bl	801b148 <rmw_destroy_guard_condition>
 801aa98:	1e05      	subs	r5, r0, #0
 801aa9a:	6863      	ldr	r3, [r4, #4]
 801aa9c:	9901      	ldr	r1, [sp, #4]
 801aa9e:	bf18      	it	ne
 801aaa0:	2501      	movne	r5, #1
 801aaa2:	e7e9      	b.n	801aa78 <rcl_guard_condition_fini+0x18>
 801aaa4:	250b      	movs	r5, #11
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	b002      	add	sp, #8
 801aaaa:	bd70      	pop	{r4, r5, r6, pc}

0801aaac <rcl_guard_condition_get_default_options>:
 801aaac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaae:	b087      	sub	sp, #28
 801aab0:	4606      	mov	r6, r0
 801aab2:	4668      	mov	r0, sp
 801aab4:	f7f8 f8d4 	bl	8012c60 <rcutils_get_default_allocator>
 801aab8:	4b09      	ldr	r3, [pc, #36]	@ (801aae0 <rcl_guard_condition_get_default_options+0x34>)
 801aaba:	46ee      	mov	lr, sp
 801aabc:	469c      	mov	ip, r3
 801aabe:	461d      	mov	r5, r3
 801aac0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aac4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aaca:	4634      	mov	r4, r6
 801aacc:	f8de 7000 	ldr.w	r7, [lr]
 801aad0:	f8cc 7000 	str.w	r7, [ip]
 801aad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aad6:	4630      	mov	r0, r6
 801aad8:	6027      	str	r7, [r4, #0]
 801aada:	b007      	add	sp, #28
 801aadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aade:	bf00      	nop
 801aae0:	20018140 	.word	0x20018140

0801aae4 <rcl_guard_condition_get_rmw_handle>:
 801aae4:	b110      	cbz	r0, 801aaec <rcl_guard_condition_get_rmw_handle+0x8>
 801aae6:	6840      	ldr	r0, [r0, #4]
 801aae8:	b100      	cbz	r0, 801aaec <rcl_guard_condition_get_rmw_handle+0x8>
 801aaea:	6800      	ldr	r0, [r0, #0]
 801aaec:	4770      	bx	lr
 801aaee:	bf00      	nop

0801aaf0 <rcl_validate_topic_name>:
 801aaf0:	2800      	cmp	r0, #0
 801aaf2:	d07a      	beq.n	801abea <rcl_validate_topic_name+0xfa>
 801aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf8:	460e      	mov	r6, r1
 801aafa:	2900      	cmp	r1, #0
 801aafc:	d07c      	beq.n	801abf8 <rcl_validate_topic_name+0x108>
 801aafe:	4617      	mov	r7, r2
 801ab00:	4605      	mov	r5, r0
 801ab02:	f7e5 fbc5 	bl	8000290 <strlen>
 801ab06:	b1b0      	cbz	r0, 801ab36 <rcl_validate_topic_name+0x46>
 801ab08:	f895 9000 	ldrb.w	r9, [r5]
 801ab0c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801ac90 <rcl_validate_topic_name+0x1a0>
 801ab10:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801ab14:	f013 0304 	ands.w	r3, r3, #4
 801ab18:	d169      	bne.n	801abee <rcl_validate_topic_name+0xfe>
 801ab1a:	f100 38ff 	add.w	r8, r0, #4294967295
 801ab1e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801ab22:	2a2f      	cmp	r2, #47	@ 0x2f
 801ab24:	d10e      	bne.n	801ab44 <rcl_validate_topic_name+0x54>
 801ab26:	2202      	movs	r2, #2
 801ab28:	6032      	str	r2, [r6, #0]
 801ab2a:	b36f      	cbz	r7, 801ab88 <rcl_validate_topic_name+0x98>
 801ab2c:	f8c7 8000 	str.w	r8, [r7]
 801ab30:	4618      	mov	r0, r3
 801ab32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab36:	2301      	movs	r3, #1
 801ab38:	6033      	str	r3, [r6, #0]
 801ab3a:	b32f      	cbz	r7, 801ab88 <rcl_validate_topic_name+0x98>
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	6038      	str	r0, [r7, #0]
 801ab40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab44:	f105 3aff 	add.w	sl, r5, #4294967295
 801ab48:	461c      	mov	r4, r3
 801ab4a:	4619      	mov	r1, r3
 801ab4c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ab50:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ab54:	f1be 0f09 	cmp.w	lr, #9
 801ab58:	d919      	bls.n	801ab8e <rcl_validate_topic_name+0x9e>
 801ab5a:	f022 0e20 	bic.w	lr, r2, #32
 801ab5e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801ab62:	f1be 0f19 	cmp.w	lr, #25
 801ab66:	d912      	bls.n	801ab8e <rcl_validate_topic_name+0x9e>
 801ab68:	2a5f      	cmp	r2, #95	@ 0x5f
 801ab6a:	d019      	beq.n	801aba0 <rcl_validate_topic_name+0xb0>
 801ab6c:	2a2f      	cmp	r2, #47	@ 0x2f
 801ab6e:	d051      	beq.n	801ac14 <rcl_validate_topic_name+0x124>
 801ab70:	2a7e      	cmp	r2, #126	@ 0x7e
 801ab72:	d048      	beq.n	801ac06 <rcl_validate_topic_name+0x116>
 801ab74:	2a7b      	cmp	r2, #123	@ 0x7b
 801ab76:	d054      	beq.n	801ac22 <rcl_validate_topic_name+0x132>
 801ab78:	2a7d      	cmp	r2, #125	@ 0x7d
 801ab7a:	d161      	bne.n	801ac40 <rcl_validate_topic_name+0x150>
 801ab7c:	2c00      	cmp	r4, #0
 801ab7e:	d155      	bne.n	801ac2c <rcl_validate_topic_name+0x13c>
 801ab80:	2305      	movs	r3, #5
 801ab82:	6033      	str	r3, [r6, #0]
 801ab84:	b107      	cbz	r7, 801ab88 <rcl_validate_topic_name+0x98>
 801ab86:	6039      	str	r1, [r7, #0]
 801ab88:	2000      	movs	r0, #0
 801ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab8e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ab92:	0752      	lsls	r2, r2, #29
 801ab94:	d504      	bpl.n	801aba0 <rcl_validate_topic_name+0xb0>
 801ab96:	b11c      	cbz	r4, 801aba0 <rcl_validate_topic_name+0xb0>
 801ab98:	b111      	cbz	r1, 801aba0 <rcl_validate_topic_name+0xb0>
 801ab9a:	1e4a      	subs	r2, r1, #1
 801ab9c:	429a      	cmp	r2, r3
 801ab9e:	d02d      	beq.n	801abfc <rcl_validate_topic_name+0x10c>
 801aba0:	3101      	adds	r1, #1
 801aba2:	4288      	cmp	r0, r1
 801aba4:	d1d2      	bne.n	801ab4c <rcl_validate_topic_name+0x5c>
 801aba6:	2c00      	cmp	r4, #0
 801aba8:	d145      	bne.n	801ac36 <rcl_validate_topic_name+0x146>
 801abaa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801abae:	d04f      	beq.n	801ac50 <rcl_validate_topic_name+0x160>
 801abb0:	4620      	mov	r0, r4
 801abb2:	2301      	movs	r3, #1
 801abb4:	e006      	b.n	801abc4 <rcl_validate_topic_name+0xd4>
 801abb6:	428b      	cmp	r3, r1
 801abb8:	f105 0501 	add.w	r5, r5, #1
 801abbc:	f103 0201 	add.w	r2, r3, #1
 801abc0:	d236      	bcs.n	801ac30 <rcl_validate_topic_name+0x140>
 801abc2:	4613      	mov	r3, r2
 801abc4:	4580      	cmp	r8, r0
 801abc6:	f100 0001 	add.w	r0, r0, #1
 801abca:	d0f4      	beq.n	801abb6 <rcl_validate_topic_name+0xc6>
 801abcc:	782a      	ldrb	r2, [r5, #0]
 801abce:	2a2f      	cmp	r2, #47	@ 0x2f
 801abd0:	d1f1      	bne.n	801abb6 <rcl_validate_topic_name+0xc6>
 801abd2:	786a      	ldrb	r2, [r5, #1]
 801abd4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801abd8:	0754      	lsls	r4, r2, #29
 801abda:	d5ec      	bpl.n	801abb6 <rcl_validate_topic_name+0xc6>
 801abdc:	2204      	movs	r2, #4
 801abde:	6032      	str	r2, [r6, #0]
 801abe0:	2f00      	cmp	r7, #0
 801abe2:	d0d1      	beq.n	801ab88 <rcl_validate_topic_name+0x98>
 801abe4:	603b      	str	r3, [r7, #0]
 801abe6:	2000      	movs	r0, #0
 801abe8:	e7aa      	b.n	801ab40 <rcl_validate_topic_name+0x50>
 801abea:	200b      	movs	r0, #11
 801abec:	4770      	bx	lr
 801abee:	2304      	movs	r3, #4
 801abf0:	6033      	str	r3, [r6, #0]
 801abf2:	2f00      	cmp	r7, #0
 801abf4:	d1a2      	bne.n	801ab3c <rcl_validate_topic_name+0x4c>
 801abf6:	e7c7      	b.n	801ab88 <rcl_validate_topic_name+0x98>
 801abf8:	200b      	movs	r0, #11
 801abfa:	e7a1      	b.n	801ab40 <rcl_validate_topic_name+0x50>
 801abfc:	2309      	movs	r3, #9
 801abfe:	6033      	str	r3, [r6, #0]
 801ac00:	2f00      	cmp	r7, #0
 801ac02:	d1c0      	bne.n	801ab86 <rcl_validate_topic_name+0x96>
 801ac04:	e7c0      	b.n	801ab88 <rcl_validate_topic_name+0x98>
 801ac06:	2900      	cmp	r1, #0
 801ac08:	d0ca      	beq.n	801aba0 <rcl_validate_topic_name+0xb0>
 801ac0a:	2306      	movs	r3, #6
 801ac0c:	6033      	str	r3, [r6, #0]
 801ac0e:	2f00      	cmp	r7, #0
 801ac10:	d1b9      	bne.n	801ab86 <rcl_validate_topic_name+0x96>
 801ac12:	e7b9      	b.n	801ab88 <rcl_validate_topic_name+0x98>
 801ac14:	2c00      	cmp	r4, #0
 801ac16:	d0c3      	beq.n	801aba0 <rcl_validate_topic_name+0xb0>
 801ac18:	2308      	movs	r3, #8
 801ac1a:	6033      	str	r3, [r6, #0]
 801ac1c:	2f00      	cmp	r7, #0
 801ac1e:	d1b2      	bne.n	801ab86 <rcl_validate_topic_name+0x96>
 801ac20:	e7b2      	b.n	801ab88 <rcl_validate_topic_name+0x98>
 801ac22:	2c00      	cmp	r4, #0
 801ac24:	d1f8      	bne.n	801ac18 <rcl_validate_topic_name+0x128>
 801ac26:	460b      	mov	r3, r1
 801ac28:	2401      	movs	r4, #1
 801ac2a:	e7b9      	b.n	801aba0 <rcl_validate_topic_name+0xb0>
 801ac2c:	2400      	movs	r4, #0
 801ac2e:	e7b7      	b.n	801aba0 <rcl_validate_topic_name+0xb0>
 801ac30:	2000      	movs	r0, #0
 801ac32:	6030      	str	r0, [r6, #0]
 801ac34:	e784      	b.n	801ab40 <rcl_validate_topic_name+0x50>
 801ac36:	2205      	movs	r2, #5
 801ac38:	6032      	str	r2, [r6, #0]
 801ac3a:	2f00      	cmp	r7, #0
 801ac3c:	d1d2      	bne.n	801abe4 <rcl_validate_topic_name+0xf4>
 801ac3e:	e7a3      	b.n	801ab88 <rcl_validate_topic_name+0x98>
 801ac40:	2c00      	cmp	r4, #0
 801ac42:	bf14      	ite	ne
 801ac44:	2308      	movne	r3, #8
 801ac46:	2303      	moveq	r3, #3
 801ac48:	6033      	str	r3, [r6, #0]
 801ac4a:	2f00      	cmp	r7, #0
 801ac4c:	d19b      	bne.n	801ab86 <rcl_validate_topic_name+0x96>
 801ac4e:	e79b      	b.n	801ab88 <rcl_validate_topic_name+0x98>
 801ac50:	2301      	movs	r3, #1
 801ac52:	e00a      	b.n	801ac6a <rcl_validate_topic_name+0x17a>
 801ac54:	2c01      	cmp	r4, #1
 801ac56:	d013      	beq.n	801ac80 <rcl_validate_topic_name+0x190>
 801ac58:	4299      	cmp	r1, r3
 801ac5a:	f104 0401 	add.w	r4, r4, #1
 801ac5e:	f105 0501 	add.w	r5, r5, #1
 801ac62:	f103 0201 	add.w	r2, r3, #1
 801ac66:	d9e3      	bls.n	801ac30 <rcl_validate_topic_name+0x140>
 801ac68:	4613      	mov	r3, r2
 801ac6a:	45a0      	cmp	r8, r4
 801ac6c:	d0f4      	beq.n	801ac58 <rcl_validate_topic_name+0x168>
 801ac6e:	782a      	ldrb	r2, [r5, #0]
 801ac70:	2a2f      	cmp	r2, #47	@ 0x2f
 801ac72:	d1ef      	bne.n	801ac54 <rcl_validate_topic_name+0x164>
 801ac74:	786a      	ldrb	r2, [r5, #1]
 801ac76:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ac7a:	0752      	lsls	r2, r2, #29
 801ac7c:	d5ec      	bpl.n	801ac58 <rcl_validate_topic_name+0x168>
 801ac7e:	e7ad      	b.n	801abdc <rcl_validate_topic_name+0xec>
 801ac80:	2307      	movs	r3, #7
 801ac82:	6033      	str	r3, [r6, #0]
 801ac84:	2f00      	cmp	r7, #0
 801ac86:	f43f af7f 	beq.w	801ab88 <rcl_validate_topic_name+0x98>
 801ac8a:	603c      	str	r4, [r7, #0]
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	e757      	b.n	801ab40 <rcl_validate_topic_name+0x50>
 801ac90:	08024516 	.word	0x08024516

0801ac94 <rcutils_split>:
 801ac94:	b082      	sub	sp, #8
 801ac96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac9a:	b08d      	sub	sp, #52	@ 0x34
 801ac9c:	ac16      	add	r4, sp, #88	@ 0x58
 801ac9e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 801aca0:	e884 000c 	stmia.w	r4, {r2, r3}
 801aca4:	2f00      	cmp	r7, #0
 801aca6:	f000 80a8 	beq.w	801adfa <rcutils_split+0x166>
 801acaa:	4605      	mov	r5, r0
 801acac:	2800      	cmp	r0, #0
 801acae:	d07e      	beq.n	801adae <rcutils_split+0x11a>
 801acb0:	7803      	ldrb	r3, [r0, #0]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d07b      	beq.n	801adae <rcutils_split+0x11a>
 801acb6:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 801acba:	460e      	mov	r6, r1
 801acbc:	9203      	str	r2, [sp, #12]
 801acbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801acc2:	f107 0408 	add.w	r4, r7, #8
 801acc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acc8:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 801accc:	f8c4 b000 	str.w	fp, [r4]
 801acd0:	4628      	mov	r0, r5
 801acd2:	f7e5 fadd 	bl	8000290 <strlen>
 801acd6:	782c      	ldrb	r4, [r5, #0]
 801acd8:	182b      	adds	r3, r5, r0
 801acda:	1ba4      	subs	r4, r4, r6
 801acdc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ace0:	fab4 f484 	clz	r4, r4
 801ace4:	42b3      	cmp	r3, r6
 801ace6:	bf14      	ite	ne
 801ace8:	4680      	movne	r8, r0
 801acea:	f1a0 0801 	subeq.w	r8, r0, #1
 801acee:	0964      	lsrs	r4, r4, #5
 801acf0:	2001      	movs	r0, #1
 801acf2:	4544      	cmp	r4, r8
 801acf4:	6038      	str	r0, [r7, #0]
 801acf6:	d26b      	bcs.n	801add0 <rcutils_split+0x13c>
 801acf8:	192b      	adds	r3, r5, r4
 801acfa:	eb05 0108 	add.w	r1, r5, r8
 801acfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad02:	42b2      	cmp	r2, r6
 801ad04:	bf04      	itt	eq
 801ad06:	3001      	addeq	r0, #1
 801ad08:	6038      	streq	r0, [r7, #0]
 801ad0a:	4299      	cmp	r1, r3
 801ad0c:	d1f7      	bne.n	801acfe <rcutils_split+0x6a>
 801ad0e:	9b03      	ldr	r3, [sp, #12]
 801ad10:	0080      	lsls	r0, r0, #2
 801ad12:	4659      	mov	r1, fp
 801ad14:	4798      	blx	r3
 801ad16:	4603      	mov	r3, r0
 801ad18:	6078      	str	r0, [r7, #4]
 801ad1a:	2800      	cmp	r0, #0
 801ad1c:	d05f      	beq.n	801adde <rcutils_split+0x14a>
 801ad1e:	f04f 0a00 	mov.w	sl, #0
 801ad22:	46a1      	mov	r9, r4
 801ad24:	e002      	b.n	801ad2c <rcutils_split+0x98>
 801ad26:	3401      	adds	r4, #1
 801ad28:	45a0      	cmp	r8, r4
 801ad2a:	d922      	bls.n	801ad72 <rcutils_split+0xde>
 801ad2c:	5d2a      	ldrb	r2, [r5, r4]
 801ad2e:	42b2      	cmp	r2, r6
 801ad30:	d1f9      	bne.n	801ad26 <rcutils_split+0x92>
 801ad32:	45a1      	cmp	r9, r4
 801ad34:	eba4 0209 	sub.w	r2, r4, r9
 801ad38:	d032      	beq.n	801ada0 <rcutils_split+0x10c>
 801ad3a:	9302      	str	r3, [sp, #8]
 801ad3c:	4659      	mov	r1, fp
 801ad3e:	9b03      	ldr	r3, [sp, #12]
 801ad40:	9201      	str	r2, [sp, #4]
 801ad42:	1c90      	adds	r0, r2, #2
 801ad44:	4798      	blx	r3
 801ad46:	9b02      	ldr	r3, [sp, #8]
 801ad48:	9a01      	ldr	r2, [sp, #4]
 801ad4a:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ad4e:	1c51      	adds	r1, r2, #1
 801ad50:	687a      	ldr	r2, [r7, #4]
 801ad52:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801ad56:	eb05 0309 	add.w	r3, r5, r9
 801ad5a:	2800      	cmp	r0, #0
 801ad5c:	d04f      	beq.n	801adfe <rcutils_split+0x16a>
 801ad5e:	4a2b      	ldr	r2, [pc, #172]	@ (801ae0c <rcutils_split+0x178>)
 801ad60:	f002 fa16 	bl	801d190 <sniprintf>
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	f10a 0a01 	add.w	sl, sl, #1
 801ad6a:	3401      	adds	r4, #1
 801ad6c:	45a0      	cmp	r8, r4
 801ad6e:	46a1      	mov	r9, r4
 801ad70:	d8dc      	bhi.n	801ad2c <rcutils_split+0x98>
 801ad72:	45a1      	cmp	r9, r4
 801ad74:	d039      	beq.n	801adea <rcutils_split+0x156>
 801ad76:	eba4 0409 	sub.w	r4, r4, r9
 801ad7a:	9301      	str	r3, [sp, #4]
 801ad7c:	4659      	mov	r1, fp
 801ad7e:	9b03      	ldr	r3, [sp, #12]
 801ad80:	1ca0      	adds	r0, r4, #2
 801ad82:	4798      	blx	r3
 801ad84:	9b01      	ldr	r3, [sp, #4]
 801ad86:	6879      	ldr	r1, [r7, #4]
 801ad88:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ad8c:	4a1f      	ldr	r2, [pc, #124]	@ (801ae0c <rcutils_split+0x178>)
 801ad8e:	f851 002a 	ldr.w	r0, [r1, sl, lsl #2]
 801ad92:	eb05 0309 	add.w	r3, r5, r9
 801ad96:	1c61      	adds	r1, r4, #1
 801ad98:	f002 f9fa 	bl	801d190 <sniprintf>
 801ad9c:	2400      	movs	r4, #0
 801ad9e:	e011      	b.n	801adc4 <rcutils_split+0x130>
 801ada0:	683a      	ldr	r2, [r7, #0]
 801ada2:	3a01      	subs	r2, #1
 801ada4:	2100      	movs	r1, #0
 801ada6:	603a      	str	r2, [r7, #0]
 801ada8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801adac:	e7dd      	b.n	801ad6a <rcutils_split+0xd6>
 801adae:	a804      	add	r0, sp, #16
 801adb0:	ac04      	add	r4, sp, #16
 801adb2:	f000 f82d 	bl	801ae10 <rcutils_get_zero_initialized_string_array>
 801adb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801adb8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801adba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801adbe:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801adc2:	2400      	movs	r4, #0
 801adc4:	4620      	mov	r0, r4
 801adc6:	b00d      	add	sp, #52	@ 0x34
 801adc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adcc:	b002      	add	sp, #8
 801adce:	4770      	bx	lr
 801add0:	9b03      	ldr	r3, [sp, #12]
 801add2:	4659      	mov	r1, fp
 801add4:	2004      	movs	r0, #4
 801add6:	4798      	blx	r3
 801add8:	4603      	mov	r3, r0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	b928      	cbnz	r0, 801adea <rcutils_split+0x156>
 801adde:	4638      	mov	r0, r7
 801ade0:	f000 f834 	bl	801ae4c <rcutils_string_array_fini>
 801ade4:	b970      	cbnz	r0, 801ae04 <rcutils_split+0x170>
 801ade6:	2402      	movs	r4, #2
 801ade8:	e7ec      	b.n	801adc4 <rcutils_split+0x130>
 801adea:	683a      	ldr	r2, [r7, #0]
 801adec:	3a01      	subs	r2, #1
 801adee:	2100      	movs	r1, #0
 801adf0:	603a      	str	r2, [r7, #0]
 801adf2:	460c      	mov	r4, r1
 801adf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801adf8:	e7e4      	b.n	801adc4 <rcutils_split+0x130>
 801adfa:	240b      	movs	r4, #11
 801adfc:	e7e2      	b.n	801adc4 <rcutils_split+0x130>
 801adfe:	f8c7 a000 	str.w	sl, [r7]
 801ae02:	e7ec      	b.n	801adde <rcutils_split+0x14a>
 801ae04:	f7f8 f81c 	bl	8012e40 <rcutils_reset_error>
 801ae08:	2402      	movs	r4, #2
 801ae0a:	e7db      	b.n	801adc4 <rcutils_split+0x130>
 801ae0c:	080239b4 	.word	0x080239b4

0801ae10 <rcutils_get_zero_initialized_string_array>:
 801ae10:	b570      	push	{r4, r5, r6, lr}
 801ae12:	b086      	sub	sp, #24
 801ae14:	4606      	mov	r6, r0
 801ae16:	4668      	mov	r0, sp
 801ae18:	f7f7 fef6 	bl	8012c08 <rcutils_get_zero_initialized_allocator>
 801ae1c:	4b0a      	ldr	r3, [pc, #40]	@ (801ae48 <rcutils_get_zero_initialized_string_array+0x38>)
 801ae1e:	46ee      	mov	lr, sp
 801ae20:	f103 0508 	add.w	r5, r3, #8
 801ae24:	469c      	mov	ip, r3
 801ae26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ae2c:	f8de 3000 	ldr.w	r3, [lr]
 801ae30:	602b      	str	r3, [r5, #0]
 801ae32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae36:	4634      	mov	r4, r6
 801ae38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae3a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801ae3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ae42:	4630      	mov	r0, r6
 801ae44:	b006      	add	sp, #24
 801ae46:	bd70      	pop	{r4, r5, r6, pc}
 801ae48:	20018154 	.word	0x20018154

0801ae4c <rcutils_string_array_fini>:
 801ae4c:	b320      	cbz	r0, 801ae98 <rcutils_string_array_fini+0x4c>
 801ae4e:	b570      	push	{r4, r5, r6, lr}
 801ae50:	4604      	mov	r4, r0
 801ae52:	6840      	ldr	r0, [r0, #4]
 801ae54:	b1d8      	cbz	r0, 801ae8e <rcutils_string_array_fini+0x42>
 801ae56:	f104 0008 	add.w	r0, r4, #8
 801ae5a:	f7f7 ff0f 	bl	8012c7c <rcutils_allocator_is_valid>
 801ae5e:	b1b8      	cbz	r0, 801ae90 <rcutils_string_array_fini+0x44>
 801ae60:	6823      	ldr	r3, [r4, #0]
 801ae62:	b1bb      	cbz	r3, 801ae94 <rcutils_string_array_fini+0x48>
 801ae64:	2500      	movs	r5, #0
 801ae66:	6860      	ldr	r0, [r4, #4]
 801ae68:	462e      	mov	r6, r5
 801ae6a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ae6e:	68e3      	ldr	r3, [r4, #12]
 801ae70:	69a1      	ldr	r1, [r4, #24]
 801ae72:	4798      	blx	r3
 801ae74:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ae78:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801ae7c:	3501      	adds	r5, #1
 801ae7e:	429d      	cmp	r5, r3
 801ae80:	d3f3      	bcc.n	801ae6a <rcutils_string_array_fini+0x1e>
 801ae82:	68e3      	ldr	r3, [r4, #12]
 801ae84:	69a1      	ldr	r1, [r4, #24]
 801ae86:	4798      	blx	r3
 801ae88:	2000      	movs	r0, #0
 801ae8a:	e9c4 0000 	strd	r0, r0, [r4]
 801ae8e:	bd70      	pop	{r4, r5, r6, pc}
 801ae90:	200b      	movs	r0, #11
 801ae92:	bd70      	pop	{r4, r5, r6, pc}
 801ae94:	6860      	ldr	r0, [r4, #4]
 801ae96:	e7f4      	b.n	801ae82 <rcutils_string_array_fini+0x36>
 801ae98:	200b      	movs	r0, #11
 801ae9a:	4770      	bx	lr

0801ae9c <rmw_get_zero_initialized_discovery_options>:
 801ae9c:	b510      	push	{r4, lr}
 801ae9e:	2220      	movs	r2, #32
 801aea0:	4604      	mov	r4, r0
 801aea2:	2100      	movs	r1, #0
 801aea4:	f002 fb02 	bl	801d4ac <memset>
 801aea8:	4620      	mov	r0, r4
 801aeaa:	bd10      	pop	{r4, pc}

0801aeac <rmw_discovery_options_init>:
 801aeac:	b338      	cbz	r0, 801aefe <rmw_discovery_options_init+0x52>
 801aeae:	b570      	push	{r4, r5, r6, lr}
 801aeb0:	4604      	mov	r4, r0
 801aeb2:	4610      	mov	r0, r2
 801aeb4:	460e      	mov	r6, r1
 801aeb6:	4615      	mov	r5, r2
 801aeb8:	f7f7 fee0 	bl	8012c7c <rcutils_allocator_is_valid>
 801aebc:	b1d8      	cbz	r0, 801aef6 <rmw_discovery_options_init+0x4a>
 801aebe:	68a3      	ldr	r3, [r4, #8]
 801aec0:	b9cb      	cbnz	r3, 801aef6 <rmw_discovery_options_init+0x4a>
 801aec2:	6863      	ldr	r3, [r4, #4]
 801aec4:	b9bb      	cbnz	r3, 801aef6 <rmw_discovery_options_init+0x4a>
 801aec6:	7823      	ldrb	r3, [r4, #0]
 801aec8:	b90b      	cbnz	r3, 801aece <rmw_discovery_options_init+0x22>
 801aeca:	2302      	movs	r3, #2
 801aecc:	7023      	strb	r3, [r4, #0]
 801aece:	b1a6      	cbz	r6, 801aefa <rmw_discovery_options_init+0x4e>
 801aed0:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801aed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801aed8:	4630      	mov	r0, r6
 801aeda:	4798      	blx	r3
 801aedc:	6060      	str	r0, [r4, #4]
 801aede:	b180      	cbz	r0, 801af02 <rmw_discovery_options_init+0x56>
 801aee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aee2:	f104 0c0c 	add.w	ip, r4, #12
 801aee6:	60a6      	str	r6, [r4, #8]
 801aee8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aeec:	682b      	ldr	r3, [r5, #0]
 801aeee:	f8cc 3000 	str.w	r3, [ip]
 801aef2:	2000      	movs	r0, #0
 801aef4:	bd70      	pop	{r4, r5, r6, pc}
 801aef6:	200b      	movs	r0, #11
 801aef8:	bd70      	pop	{r4, r5, r6, pc}
 801aefa:	4630      	mov	r0, r6
 801aefc:	bd70      	pop	{r4, r5, r6, pc}
 801aefe:	200b      	movs	r0, #11
 801af00:	4770      	bx	lr
 801af02:	200a      	movs	r0, #10
 801af04:	bd70      	pop	{r4, r5, r6, pc}
 801af06:	bf00      	nop

0801af08 <on_status>:
 801af08:	b082      	sub	sp, #8
 801af0a:	b002      	add	sp, #8
 801af0c:	4770      	bx	lr
 801af0e:	bf00      	nop

0801af10 <on_topic>:
 801af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af14:	4a22      	ldr	r2, [pc, #136]	@ (801afa0 <on_topic+0x90>)
 801af16:	b094      	sub	sp, #80	@ 0x50
 801af18:	6812      	ldr	r2, [r2, #0]
 801af1a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801af1c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801af20:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801af24:	b3c2      	cbz	r2, 801af98 <on_topic+0x88>
 801af26:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801af2a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801af2e:	e001      	b.n	801af34 <on_topic+0x24>
 801af30:	6852      	ldr	r2, [r2, #4]
 801af32:	b38a      	cbz	r2, 801af98 <on_topic+0x88>
 801af34:	6894      	ldr	r4, [r2, #8]
 801af36:	8aa3      	ldrh	r3, [r4, #20]
 801af38:	428b      	cmp	r3, r1
 801af3a:	d1f9      	bne.n	801af30 <on_topic+0x20>
 801af3c:	7da3      	ldrb	r3, [r4, #22]
 801af3e:	4283      	cmp	r3, r0
 801af40:	d1f6      	bne.n	801af30 <on_topic+0x20>
 801af42:	2248      	movs	r2, #72	@ 0x48
 801af44:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801af48:	4668      	mov	r0, sp
 801af4a:	f002 fb8e 	bl	801d66a <memcpy>
 801af4e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801af52:	cb0c      	ldmia	r3, {r2, r3}
 801af54:	4620      	mov	r0, r4
 801af56:	f7f9 fef1 	bl	8014d3c <rmw_uxrce_get_static_input_buffer_for_entity>
 801af5a:	4607      	mov	r7, r0
 801af5c:	b1e0      	cbz	r0, 801af98 <on_topic+0x88>
 801af5e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801af62:	4632      	mov	r2, r6
 801af64:	4628      	mov	r0, r5
 801af66:	f108 0110 	add.w	r1, r8, #16
 801af6a:	f7fa fe5d 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801af6e:	b930      	cbnz	r0, 801af7e <on_topic+0x6e>
 801af70:	480c      	ldr	r0, [pc, #48]	@ (801afa4 <on_topic+0x94>)
 801af72:	4639      	mov	r1, r7
 801af74:	b014      	add	sp, #80	@ 0x50
 801af76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af7a:	f000 b8bd 	b.w	801b0f8 <put_memory>
 801af7e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801af82:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801af86:	f7f9 fcd7 	bl	8014938 <rmw_uros_epoch_nanos>
 801af8a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801af8e:	2305      	movs	r3, #5
 801af90:	e942 0102 	strd	r0, r1, [r2, #-8]
 801af94:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801af98:	b014      	add	sp, #80	@ 0x50
 801af9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af9e:	bf00      	nop
 801afa0:	2001810c 	.word	0x2001810c
 801afa4:	200180fc 	.word	0x200180fc

0801afa8 <on_request>:
 801afa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afac:	4823      	ldr	r0, [pc, #140]	@ (801b03c <on_request+0x94>)
 801afae:	b094      	sub	sp, #80	@ 0x50
 801afb0:	6800      	ldr	r0, [r0, #0]
 801afb2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801afb4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801afb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801afba:	2800      	cmp	r0, #0
 801afbc:	d03b      	beq.n	801b036 <on_request+0x8e>
 801afbe:	461d      	mov	r5, r3
 801afc0:	e001      	b.n	801afc6 <on_request+0x1e>
 801afc2:	6840      	ldr	r0, [r0, #4]
 801afc4:	b3b8      	cbz	r0, 801b036 <on_request+0x8e>
 801afc6:	6884      	ldr	r4, [r0, #8]
 801afc8:	8b21      	ldrh	r1, [r4, #24]
 801afca:	4291      	cmp	r1, r2
 801afcc:	d1f9      	bne.n	801afc2 <on_request+0x1a>
 801afce:	2248      	movs	r2, #72	@ 0x48
 801afd0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801afd4:	4668      	mov	r0, sp
 801afd6:	f002 fb48 	bl	801d66a <memcpy>
 801afda:	f104 0320 	add.w	r3, r4, #32
 801afde:	cb0c      	ldmia	r3, {r2, r3}
 801afe0:	4620      	mov	r0, r4
 801afe2:	f7f9 feab 	bl	8014d3c <rmw_uxrce_get_static_input_buffer_for_entity>
 801afe6:	4680      	mov	r8, r0
 801afe8:	b328      	cbz	r0, 801b036 <on_request+0x8e>
 801afea:	4638      	mov	r0, r7
 801afec:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801aff0:	4632      	mov	r2, r6
 801aff2:	f107 0110 	add.w	r1, r7, #16
 801aff6:	f7fa fe17 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801affa:	b930      	cbnz	r0, 801b00a <on_request+0x62>
 801affc:	4810      	ldr	r0, [pc, #64]	@ (801b040 <on_request+0x98>)
 801affe:	4641      	mov	r1, r8
 801b000:	b014      	add	sp, #80	@ 0x50
 801b002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b006:	f000 b877 	b.w	801b0f8 <put_memory>
 801b00a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b00c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b010:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b014:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b01c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b020:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b024:	f7f9 fc88 	bl	8014938 <rmw_uros_epoch_nanos>
 801b028:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b02c:	2303      	movs	r3, #3
 801b02e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b032:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b036:	b014      	add	sp, #80	@ 0x50
 801b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b03c:	200180dc 	.word	0x200180dc
 801b040:	200180fc 	.word	0x200180fc

0801b044 <on_reply>:
 801b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b048:	4821      	ldr	r0, [pc, #132]	@ (801b0d0 <on_reply+0x8c>)
 801b04a:	b094      	sub	sp, #80	@ 0x50
 801b04c:	6800      	ldr	r0, [r0, #0]
 801b04e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b050:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b054:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b056:	b3b8      	cbz	r0, 801b0c8 <on_reply+0x84>
 801b058:	461d      	mov	r5, r3
 801b05a:	e001      	b.n	801b060 <on_reply+0x1c>
 801b05c:	6840      	ldr	r0, [r0, #4]
 801b05e:	b398      	cbz	r0, 801b0c8 <on_reply+0x84>
 801b060:	6884      	ldr	r4, [r0, #8]
 801b062:	8b21      	ldrh	r1, [r4, #24]
 801b064:	4291      	cmp	r1, r2
 801b066:	d1f9      	bne.n	801b05c <on_reply+0x18>
 801b068:	2248      	movs	r2, #72	@ 0x48
 801b06a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b06e:	4668      	mov	r0, sp
 801b070:	f002 fafb 	bl	801d66a <memcpy>
 801b074:	f104 0320 	add.w	r3, r4, #32
 801b078:	cb0c      	ldmia	r3, {r2, r3}
 801b07a:	4620      	mov	r0, r4
 801b07c:	f7f9 fe5e 	bl	8014d3c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b080:	4680      	mov	r8, r0
 801b082:	b308      	cbz	r0, 801b0c8 <on_reply+0x84>
 801b084:	4638      	mov	r0, r7
 801b086:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b08a:	4632      	mov	r2, r6
 801b08c:	f107 0110 	add.w	r1, r7, #16
 801b090:	f7fa fdca 	bl	8015c28 <ucdr_deserialize_array_uint8_t>
 801b094:	b930      	cbnz	r0, 801b0a4 <on_reply+0x60>
 801b096:	480f      	ldr	r0, [pc, #60]	@ (801b0d4 <on_reply+0x90>)
 801b098:	4641      	mov	r1, r8
 801b09a:	b014      	add	sp, #80	@ 0x50
 801b09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0a0:	f000 b82a 	b.w	801b0f8 <put_memory>
 801b0a4:	2200      	movs	r2, #0
 801b0a6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b0aa:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b0ae:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b0b2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b0b6:	f7f9 fc3f 	bl	8014938 <rmw_uros_epoch_nanos>
 801b0ba:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b0be:	2304      	movs	r3, #4
 801b0c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b0c4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b0c8:	b014      	add	sp, #80	@ 0x50
 801b0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ce:	bf00      	nop
 801b0d0:	200137f0 	.word	0x200137f0
 801b0d4:	200180fc 	.word	0x200180fc

0801b0d8 <get_memory>:
 801b0d8:	4603      	mov	r3, r0
 801b0da:	6840      	ldr	r0, [r0, #4]
 801b0dc:	b158      	cbz	r0, 801b0f6 <get_memory+0x1e>
 801b0de:	6842      	ldr	r2, [r0, #4]
 801b0e0:	605a      	str	r2, [r3, #4]
 801b0e2:	b10a      	cbz	r2, 801b0e8 <get_memory+0x10>
 801b0e4:	2100      	movs	r1, #0
 801b0e6:	6011      	str	r1, [r2, #0]
 801b0e8:	681a      	ldr	r2, [r3, #0]
 801b0ea:	6042      	str	r2, [r0, #4]
 801b0ec:	b102      	cbz	r2, 801b0f0 <get_memory+0x18>
 801b0ee:	6010      	str	r0, [r2, #0]
 801b0f0:	2200      	movs	r2, #0
 801b0f2:	6002      	str	r2, [r0, #0]
 801b0f4:	6018      	str	r0, [r3, #0]
 801b0f6:	4770      	bx	lr

0801b0f8 <put_memory>:
 801b0f8:	680b      	ldr	r3, [r1, #0]
 801b0fa:	b10b      	cbz	r3, 801b100 <put_memory+0x8>
 801b0fc:	684a      	ldr	r2, [r1, #4]
 801b0fe:	605a      	str	r2, [r3, #4]
 801b100:	684a      	ldr	r2, [r1, #4]
 801b102:	b102      	cbz	r2, 801b106 <put_memory+0xe>
 801b104:	6013      	str	r3, [r2, #0]
 801b106:	6803      	ldr	r3, [r0, #0]
 801b108:	428b      	cmp	r3, r1
 801b10a:	6843      	ldr	r3, [r0, #4]
 801b10c:	bf08      	it	eq
 801b10e:	6002      	streq	r2, [r0, #0]
 801b110:	604b      	str	r3, [r1, #4]
 801b112:	b103      	cbz	r3, 801b116 <put_memory+0x1e>
 801b114:	6019      	str	r1, [r3, #0]
 801b116:	2300      	movs	r3, #0
 801b118:	600b      	str	r3, [r1, #0]
 801b11a:	6041      	str	r1, [r0, #4]
 801b11c:	4770      	bx	lr
 801b11e:	bf00      	nop

0801b120 <rmw_create_guard_condition>:
 801b120:	b538      	push	{r3, r4, r5, lr}
 801b122:	4605      	mov	r5, r0
 801b124:	4807      	ldr	r0, [pc, #28]	@ (801b144 <rmw_create_guard_condition+0x24>)
 801b126:	f7ff ffd7 	bl	801b0d8 <get_memory>
 801b12a:	b148      	cbz	r0, 801b140 <rmw_create_guard_condition+0x20>
 801b12c:	6884      	ldr	r4, [r0, #8]
 801b12e:	2300      	movs	r3, #0
 801b130:	7423      	strb	r3, [r4, #16]
 801b132:	61e5      	str	r5, [r4, #28]
 801b134:	f7f8 fa06 	bl	8013544 <rmw_get_implementation_identifier>
 801b138:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b13c:	f104 0014 	add.w	r0, r4, #20
 801b140:	bd38      	pop	{r3, r4, r5, pc}
 801b142:	bf00      	nop
 801b144:	2001809c 	.word	0x2001809c

0801b148 <rmw_destroy_guard_condition>:
 801b148:	b508      	push	{r3, lr}
 801b14a:	4b08      	ldr	r3, [pc, #32]	@ (801b16c <rmw_destroy_guard_condition+0x24>)
 801b14c:	6819      	ldr	r1, [r3, #0]
 801b14e:	b911      	cbnz	r1, 801b156 <rmw_destroy_guard_condition+0xe>
 801b150:	e00a      	b.n	801b168 <rmw_destroy_guard_condition+0x20>
 801b152:	6849      	ldr	r1, [r1, #4]
 801b154:	b141      	cbz	r1, 801b168 <rmw_destroy_guard_condition+0x20>
 801b156:	688b      	ldr	r3, [r1, #8]
 801b158:	3314      	adds	r3, #20
 801b15a:	4298      	cmp	r0, r3
 801b15c:	d1f9      	bne.n	801b152 <rmw_destroy_guard_condition+0xa>
 801b15e:	4803      	ldr	r0, [pc, #12]	@ (801b16c <rmw_destroy_guard_condition+0x24>)
 801b160:	f7ff ffca 	bl	801b0f8 <put_memory>
 801b164:	2000      	movs	r0, #0
 801b166:	bd08      	pop	{r3, pc}
 801b168:	2001      	movs	r0, #1
 801b16a:	bd08      	pop	{r3, pc}
 801b16c:	2001809c 	.word	0x2001809c

0801b170 <create_topic>:
 801b170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b174:	4605      	mov	r5, r0
 801b176:	b084      	sub	sp, #16
 801b178:	4822      	ldr	r0, [pc, #136]	@ (801b204 <create_topic+0x94>)
 801b17a:	460f      	mov	r7, r1
 801b17c:	4616      	mov	r6, r2
 801b17e:	f7ff ffab 	bl	801b0d8 <get_memory>
 801b182:	4604      	mov	r4, r0
 801b184:	2800      	cmp	r0, #0
 801b186:	d039      	beq.n	801b1fc <create_topic+0x8c>
 801b188:	692b      	ldr	r3, [r5, #16]
 801b18a:	6884      	ldr	r4, [r0, #8]
 801b18c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801b20c <create_topic+0x9c>
 801b190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b194:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801b198:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801b19c:	1c42      	adds	r2, r0, #1
 801b19e:	2102      	movs	r1, #2
 801b1a0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801b1a4:	f7fb f96a 	bl	801647c <uxr_object_id>
 801b1a8:	223c      	movs	r2, #60	@ 0x3c
 801b1aa:	6120      	str	r0, [r4, #16]
 801b1ac:	4641      	mov	r1, r8
 801b1ae:	4638      	mov	r0, r7
 801b1b0:	f7f9 ff1e 	bl	8014ff0 <generate_topic_name>
 801b1b4:	b1f0      	cbz	r0, 801b1f4 <create_topic+0x84>
 801b1b6:	4f14      	ldr	r7, [pc, #80]	@ (801b208 <create_topic+0x98>)
 801b1b8:	4630      	mov	r0, r6
 801b1ba:	2264      	movs	r2, #100	@ 0x64
 801b1bc:	4639      	mov	r1, r7
 801b1be:	f7f9 fee7 	bl	8014f90 <generate_type_name>
 801b1c2:	b1b8      	cbz	r0, 801b1f4 <create_topic+0x84>
 801b1c4:	6928      	ldr	r0, [r5, #16]
 801b1c6:	2306      	movs	r3, #6
 801b1c8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801b1cc:	f8cd 8000 	str.w	r8, [sp]
 801b1d0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801b1d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b1d8:	6811      	ldr	r1, [r2, #0]
 801b1da:	696b      	ldr	r3, [r5, #20]
 801b1dc:	6922      	ldr	r2, [r4, #16]
 801b1de:	f7fa ff07 	bl	8015ff0 <uxr_buffer_create_topic_bin>
 801b1e2:	4602      	mov	r2, r0
 801b1e4:	6928      	ldr	r0, [r5, #16]
 801b1e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801b1ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801b1ee:	f7f9 fe99 	bl	8014f24 <run_xrce_session>
 801b1f2:	b918      	cbnz	r0, 801b1fc <create_topic+0x8c>
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	f7f9 fd95 	bl	8014d24 <rmw_uxrce_fini_topic_memory>
 801b1fa:	2400      	movs	r4, #0
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	b004      	add	sp, #16
 801b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b204:	2001811c 	.word	0x2001811c
 801b208:	200181ac 	.word	0x200181ac
 801b20c:	20018170 	.word	0x20018170

0801b210 <destroy_topic>:
 801b210:	b538      	push	{r3, r4, r5, lr}
 801b212:	6985      	ldr	r5, [r0, #24]
 801b214:	b1d5      	cbz	r5, 801b24c <destroy_topic+0x3c>
 801b216:	4604      	mov	r4, r0
 801b218:	6928      	ldr	r0, [r5, #16]
 801b21a:	6922      	ldr	r2, [r4, #16]
 801b21c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b224:	6819      	ldr	r1, [r3, #0]
 801b226:	f7fa fe65 	bl	8015ef4 <uxr_buffer_delete_entity>
 801b22a:	4602      	mov	r2, r0
 801b22c:	6928      	ldr	r0, [r5, #16]
 801b22e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b232:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b236:	f7f9 fe75 	bl	8014f24 <run_xrce_session>
 801b23a:	2800      	cmp	r0, #0
 801b23c:	4620      	mov	r0, r4
 801b23e:	bf14      	ite	ne
 801b240:	2400      	movne	r4, #0
 801b242:	2402      	moveq	r4, #2
 801b244:	f7f9 fd6e 	bl	8014d24 <rmw_uxrce_fini_topic_memory>
 801b248:	4620      	mov	r0, r4
 801b24a:	bd38      	pop	{r3, r4, r5, pc}
 801b24c:	2401      	movs	r4, #1
 801b24e:	4620      	mov	r0, r4
 801b250:	bd38      	pop	{r3, r4, r5, pc}
 801b252:	bf00      	nop

0801b254 <get_serialized_size_geometry_msgs__msg__Pose>:
 801b254:	b570      	push	{r4, r5, r6, lr}
 801b256:	4604      	mov	r4, r0
 801b258:	b148      	cbz	r0, 801b26e <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 801b25a:	460d      	mov	r5, r1
 801b25c:	f000 fea6 	bl	801bfac <get_serialized_size_geometry_msgs__msg__Point>
 801b260:	4606      	mov	r6, r0
 801b262:	1829      	adds	r1, r5, r0
 801b264:	f104 0018 	add.w	r0, r4, #24
 801b268:	f000 f868 	bl	801b33c <get_serialized_size_geometry_msgs__msg__Quaternion>
 801b26c:	4430      	add	r0, r6
 801b26e:	bd70      	pop	{r4, r5, r6, pc}

0801b270 <_Pose__cdr_deserialize>:
 801b270:	b570      	push	{r4, r5, r6, lr}
 801b272:	460c      	mov	r4, r1
 801b274:	b189      	cbz	r1, 801b29a <_Pose__cdr_deserialize+0x2a>
 801b276:	4605      	mov	r5, r0
 801b278:	f000 ff24 	bl	801c0c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801b27c:	6843      	ldr	r3, [r0, #4]
 801b27e:	4621      	mov	r1, r4
 801b280:	68db      	ldr	r3, [r3, #12]
 801b282:	4628      	mov	r0, r5
 801b284:	4798      	blx	r3
 801b286:	f000 f90d 	bl	801b4a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801b28a:	6843      	ldr	r3, [r0, #4]
 801b28c:	f104 0118 	add.w	r1, r4, #24
 801b290:	4628      	mov	r0, r5
 801b292:	68db      	ldr	r3, [r3, #12]
 801b294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b298:	4718      	bx	r3
 801b29a:	4608      	mov	r0, r1
 801b29c:	bd70      	pop	{r4, r5, r6, pc}
 801b29e:	bf00      	nop

0801b2a0 <_Pose__cdr_serialize>:
 801b2a0:	b510      	push	{r4, lr}
 801b2a2:	b082      	sub	sp, #8
 801b2a4:	9101      	str	r1, [sp, #4]
 801b2a6:	b190      	cbz	r0, 801b2ce <_Pose__cdr_serialize+0x2e>
 801b2a8:	4604      	mov	r4, r0
 801b2aa:	f000 ff0b 	bl	801c0c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801b2ae:	6843      	ldr	r3, [r0, #4]
 801b2b0:	9901      	ldr	r1, [sp, #4]
 801b2b2:	689b      	ldr	r3, [r3, #8]
 801b2b4:	4620      	mov	r0, r4
 801b2b6:	4798      	blx	r3
 801b2b8:	f000 f8f4 	bl	801b4a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801b2bc:	6843      	ldr	r3, [r0, #4]
 801b2be:	9901      	ldr	r1, [sp, #4]
 801b2c0:	689b      	ldr	r3, [r3, #8]
 801b2c2:	f104 0018 	add.w	r0, r4, #24
 801b2c6:	b002      	add	sp, #8
 801b2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2cc:	4718      	bx	r3
 801b2ce:	b002      	add	sp, #8
 801b2d0:	bd10      	pop	{r4, pc}
 801b2d2:	bf00      	nop

0801b2d4 <_Pose__get_serialized_size>:
 801b2d4:	b538      	push	{r3, r4, r5, lr}
 801b2d6:	4604      	mov	r4, r0
 801b2d8:	b148      	cbz	r0, 801b2ee <_Pose__get_serialized_size+0x1a>
 801b2da:	2100      	movs	r1, #0
 801b2dc:	f000 fe66 	bl	801bfac <get_serialized_size_geometry_msgs__msg__Point>
 801b2e0:	4605      	mov	r5, r0
 801b2e2:	4601      	mov	r1, r0
 801b2e4:	f104 0018 	add.w	r0, r4, #24
 801b2e8:	f000 f828 	bl	801b33c <get_serialized_size_geometry_msgs__msg__Quaternion>
 801b2ec:	4428      	add	r0, r5
 801b2ee:	bd38      	pop	{r3, r4, r5, pc}

0801b2f0 <_Pose__max_serialized_size>:
 801b2f0:	b510      	push	{r4, lr}
 801b2f2:	b082      	sub	sp, #8
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	2100      	movs	r1, #0
 801b2f8:	f10d 0007 	add.w	r0, sp, #7
 801b2fc:	f88d 3007 	strb.w	r3, [sp, #7]
 801b300:	f000 fec4 	bl	801c08c <max_serialized_size_geometry_msgs__msg__Point>
 801b304:	4604      	mov	r4, r0
 801b306:	4601      	mov	r1, r0
 801b308:	f10d 0007 	add.w	r0, sp, #7
 801b30c:	f000 f8a8 	bl	801b460 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801b310:	4420      	add	r0, r4
 801b312:	b002      	add	sp, #8
 801b314:	bd10      	pop	{r4, pc}
 801b316:	bf00      	nop

0801b318 <max_serialized_size_geometry_msgs__msg__Pose>:
 801b318:	2301      	movs	r3, #1
 801b31a:	b570      	push	{r4, r5, r6, lr}
 801b31c:	7003      	strb	r3, [r0, #0]
 801b31e:	4605      	mov	r5, r0
 801b320:	460e      	mov	r6, r1
 801b322:	f000 feb3 	bl	801c08c <max_serialized_size_geometry_msgs__msg__Point>
 801b326:	4604      	mov	r4, r0
 801b328:	1831      	adds	r1, r6, r0
 801b32a:	4628      	mov	r0, r5
 801b32c:	f000 f898 	bl	801b460 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801b330:	4420      	add	r0, r4
 801b332:	bd70      	pop	{r4, r5, r6, pc}

0801b334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 801b334:	4800      	ldr	r0, [pc, #0]	@ (801b338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 801b336:	4770      	bx	lr
 801b338:	20002608 	.word	0x20002608

0801b33c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 801b33c:	b1f0      	cbz	r0, 801b37c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801b33e:	b570      	push	{r4, r5, r6, lr}
 801b340:	460d      	mov	r5, r1
 801b342:	4628      	mov	r0, r5
 801b344:	2108      	movs	r1, #8
 801b346:	f7f4 f977 	bl	800f638 <ucdr_alignment>
 801b34a:	f105 0308 	add.w	r3, r5, #8
 801b34e:	181e      	adds	r6, r3, r0
 801b350:	2108      	movs	r1, #8
 801b352:	4630      	mov	r0, r6
 801b354:	f7f4 f970 	bl	800f638 <ucdr_alignment>
 801b358:	f100 0408 	add.w	r4, r0, #8
 801b35c:	4434      	add	r4, r6
 801b35e:	2108      	movs	r1, #8
 801b360:	4620      	mov	r0, r4
 801b362:	f7f4 f969 	bl	800f638 <ucdr_alignment>
 801b366:	3008      	adds	r0, #8
 801b368:	4404      	add	r4, r0
 801b36a:	2108      	movs	r1, #8
 801b36c:	4620      	mov	r0, r4
 801b36e:	f7f4 f963 	bl	800f638 <ucdr_alignment>
 801b372:	f1c5 0508 	rsb	r5, r5, #8
 801b376:	4428      	add	r0, r5
 801b378:	4420      	add	r0, r4
 801b37a:	bd70      	pop	{r4, r5, r6, pc}
 801b37c:	4770      	bx	lr
 801b37e:	bf00      	nop

0801b380 <_Quaternion__cdr_deserialize>:
 801b380:	b538      	push	{r3, r4, r5, lr}
 801b382:	460c      	mov	r4, r1
 801b384:	b199      	cbz	r1, 801b3ae <_Quaternion__cdr_deserialize+0x2e>
 801b386:	4605      	mov	r5, r0
 801b388:	f7f3 ff6a 	bl	800f260 <ucdr_deserialize_double>
 801b38c:	f104 0108 	add.w	r1, r4, #8
 801b390:	4628      	mov	r0, r5
 801b392:	f7f3 ff65 	bl	800f260 <ucdr_deserialize_double>
 801b396:	f104 0110 	add.w	r1, r4, #16
 801b39a:	4628      	mov	r0, r5
 801b39c:	f7f3 ff60 	bl	800f260 <ucdr_deserialize_double>
 801b3a0:	f104 0118 	add.w	r1, r4, #24
 801b3a4:	4628      	mov	r0, r5
 801b3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3aa:	f7f3 bf59 	b.w	800f260 <ucdr_deserialize_double>
 801b3ae:	4608      	mov	r0, r1
 801b3b0:	bd38      	pop	{r3, r4, r5, pc}
 801b3b2:	bf00      	nop

0801b3b4 <_Quaternion__cdr_serialize>:
 801b3b4:	b1c0      	cbz	r0, 801b3e8 <_Quaternion__cdr_serialize+0x34>
 801b3b6:	b538      	push	{r3, r4, r5, lr}
 801b3b8:	ed90 0b00 	vldr	d0, [r0]
 801b3bc:	460d      	mov	r5, r1
 801b3be:	4604      	mov	r4, r0
 801b3c0:	4608      	mov	r0, r1
 801b3c2:	f7f3 fdab 	bl	800ef1c <ucdr_serialize_double>
 801b3c6:	ed94 0b02 	vldr	d0, [r4, #8]
 801b3ca:	4628      	mov	r0, r5
 801b3cc:	f7f3 fda6 	bl	800ef1c <ucdr_serialize_double>
 801b3d0:	ed94 0b04 	vldr	d0, [r4, #16]
 801b3d4:	4628      	mov	r0, r5
 801b3d6:	f7f3 fda1 	bl	800ef1c <ucdr_serialize_double>
 801b3da:	ed94 0b06 	vldr	d0, [r4, #24]
 801b3de:	4628      	mov	r0, r5
 801b3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3e4:	f7f3 bd9a 	b.w	800ef1c <ucdr_serialize_double>
 801b3e8:	4770      	bx	lr
 801b3ea:	bf00      	nop

0801b3ec <_Quaternion__get_serialized_size>:
 801b3ec:	b1d0      	cbz	r0, 801b424 <_Quaternion__get_serialized_size+0x38>
 801b3ee:	b538      	push	{r3, r4, r5, lr}
 801b3f0:	2108      	movs	r1, #8
 801b3f2:	2000      	movs	r0, #0
 801b3f4:	f7f4 f920 	bl	800f638 <ucdr_alignment>
 801b3f8:	f100 0508 	add.w	r5, r0, #8
 801b3fc:	2108      	movs	r1, #8
 801b3fe:	4628      	mov	r0, r5
 801b400:	f7f4 f91a 	bl	800f638 <ucdr_alignment>
 801b404:	f100 0408 	add.w	r4, r0, #8
 801b408:	442c      	add	r4, r5
 801b40a:	2108      	movs	r1, #8
 801b40c:	4620      	mov	r0, r4
 801b40e:	f7f4 f913 	bl	800f638 <ucdr_alignment>
 801b412:	3008      	adds	r0, #8
 801b414:	4404      	add	r4, r0
 801b416:	2108      	movs	r1, #8
 801b418:	4620      	mov	r0, r4
 801b41a:	f7f4 f90d 	bl	800f638 <ucdr_alignment>
 801b41e:	3008      	adds	r0, #8
 801b420:	4420      	add	r0, r4
 801b422:	bd38      	pop	{r3, r4, r5, pc}
 801b424:	4770      	bx	lr
 801b426:	bf00      	nop

0801b428 <_Quaternion__max_serialized_size>:
 801b428:	b538      	push	{r3, r4, r5, lr}
 801b42a:	2108      	movs	r1, #8
 801b42c:	2000      	movs	r0, #0
 801b42e:	f7f4 f903 	bl	800f638 <ucdr_alignment>
 801b432:	f100 0508 	add.w	r5, r0, #8
 801b436:	2108      	movs	r1, #8
 801b438:	4628      	mov	r0, r5
 801b43a:	f7f4 f8fd 	bl	800f638 <ucdr_alignment>
 801b43e:	f100 0408 	add.w	r4, r0, #8
 801b442:	442c      	add	r4, r5
 801b444:	2108      	movs	r1, #8
 801b446:	4620      	mov	r0, r4
 801b448:	f7f4 f8f6 	bl	800f638 <ucdr_alignment>
 801b44c:	3008      	adds	r0, #8
 801b44e:	4404      	add	r4, r0
 801b450:	2108      	movs	r1, #8
 801b452:	4620      	mov	r0, r4
 801b454:	f7f4 f8f0 	bl	800f638 <ucdr_alignment>
 801b458:	3008      	adds	r0, #8
 801b45a:	4420      	add	r0, r4
 801b45c:	bd38      	pop	{r3, r4, r5, pc}
 801b45e:	bf00      	nop

0801b460 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 801b460:	b570      	push	{r4, r5, r6, lr}
 801b462:	2301      	movs	r3, #1
 801b464:	460c      	mov	r4, r1
 801b466:	7003      	strb	r3, [r0, #0]
 801b468:	2108      	movs	r1, #8
 801b46a:	4620      	mov	r0, r4
 801b46c:	f7f4 f8e4 	bl	800f638 <ucdr_alignment>
 801b470:	f104 0508 	add.w	r5, r4, #8
 801b474:	1946      	adds	r6, r0, r5
 801b476:	2108      	movs	r1, #8
 801b478:	4630      	mov	r0, r6
 801b47a:	f7f4 f8dd 	bl	800f638 <ucdr_alignment>
 801b47e:	f100 0508 	add.w	r5, r0, #8
 801b482:	4435      	add	r5, r6
 801b484:	2108      	movs	r1, #8
 801b486:	4628      	mov	r0, r5
 801b488:	f7f4 f8d6 	bl	800f638 <ucdr_alignment>
 801b48c:	3008      	adds	r0, #8
 801b48e:	4405      	add	r5, r0
 801b490:	2108      	movs	r1, #8
 801b492:	4628      	mov	r0, r5
 801b494:	f7f4 f8d0 	bl	800f638 <ucdr_alignment>
 801b498:	f1c4 0408 	rsb	r4, r4, #8
 801b49c:	4420      	add	r0, r4
 801b49e:	4428      	add	r0, r5
 801b4a0:	bd70      	pop	{r4, r5, r6, pc}
 801b4a2:	bf00      	nop

0801b4a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801b4a4:	4800      	ldr	r0, [pc, #0]	@ (801b4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 801b4a6:	4770      	bx	lr
 801b4a8:	2000263c 	.word	0x2000263c

0801b4ac <ucdr_serialize_string>:
 801b4ac:	b510      	push	{r4, lr}
 801b4ae:	b082      	sub	sp, #8
 801b4b0:	4604      	mov	r4, r0
 801b4b2:	4608      	mov	r0, r1
 801b4b4:	9101      	str	r1, [sp, #4]
 801b4b6:	f7e4 feeb 	bl	8000290 <strlen>
 801b4ba:	9901      	ldr	r1, [sp, #4]
 801b4bc:	1c42      	adds	r2, r0, #1
 801b4be:	4620      	mov	r0, r4
 801b4c0:	b002      	add	sp, #8
 801b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4c6:	f7fa bcbd 	b.w	8015e44 <ucdr_serialize_sequence_char>
 801b4ca:	bf00      	nop

0801b4cc <ucdr_deserialize_string>:
 801b4cc:	b500      	push	{lr}
 801b4ce:	b083      	sub	sp, #12
 801b4d0:	ab01      	add	r3, sp, #4
 801b4d2:	f7fa fcc9 	bl	8015e68 <ucdr_deserialize_sequence_char>
 801b4d6:	b003      	add	sp, #12
 801b4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b4dc <uxr_init_input_best_effort_stream>:
 801b4dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b4e0:	8003      	strh	r3, [r0, #0]
 801b4e2:	4770      	bx	lr

0801b4e4 <uxr_reset_input_best_effort_stream>:
 801b4e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b4e8:	8003      	strh	r3, [r0, #0]
 801b4ea:	4770      	bx	lr

0801b4ec <uxr_receive_best_effort_message>:
 801b4ec:	b538      	push	{r3, r4, r5, lr}
 801b4ee:	4604      	mov	r4, r0
 801b4f0:	8800      	ldrh	r0, [r0, #0]
 801b4f2:	460d      	mov	r5, r1
 801b4f4:	f000 fd42 	bl	801bf7c <uxr_seq_num_cmp>
 801b4f8:	4603      	mov	r3, r0
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801b500:	bfb8      	it	lt
 801b502:	8025      	strhlt	r5, [r4, #0]
 801b504:	bd38      	pop	{r3, r4, r5, pc}
 801b506:	bf00      	nop

0801b508 <on_full_input_buffer>:
 801b508:	b570      	push	{r4, r5, r6, lr}
 801b50a:	4605      	mov	r5, r0
 801b50c:	460c      	mov	r4, r1
 801b50e:	682b      	ldr	r3, [r5, #0]
 801b510:	6809      	ldr	r1, [r1, #0]
 801b512:	8920      	ldrh	r0, [r4, #8]
 801b514:	6862      	ldr	r2, [r4, #4]
 801b516:	fbb2 f2f0 	udiv	r2, r2, r0
 801b51a:	eba3 0c01 	sub.w	ip, r3, r1
 801b51e:	fbbc fcf2 	udiv	ip, ip, r2
 801b522:	f10c 0c01 	add.w	ip, ip, #1
 801b526:	fa1f f38c 	uxth.w	r3, ip
 801b52a:	fbb3 f6f0 	udiv	r6, r3, r0
 801b52e:	fb00 3316 	mls	r3, r0, r6, r3
 801b532:	b29b      	uxth	r3, r3
 801b534:	fb02 f303 	mul.w	r3, r2, r3
 801b538:	1d18      	adds	r0, r3, #4
 801b53a:	4408      	add	r0, r1
 801b53c:	7d26      	ldrb	r6, [r4, #20]
 801b53e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b542:	b116      	cbz	r6, 801b54a <on_full_input_buffer+0x42>
 801b544:	2600      	movs	r6, #0
 801b546:	f840 6c04 	str.w	r6, [r0, #-4]
 801b54a:	2a03      	cmp	r2, #3
 801b54c:	d801      	bhi.n	801b552 <on_full_input_buffer+0x4a>
 801b54e:	2001      	movs	r0, #1
 801b550:	bd70      	pop	{r4, r5, r6, pc}
 801b552:	3308      	adds	r3, #8
 801b554:	4419      	add	r1, r3
 801b556:	4628      	mov	r0, r5
 801b558:	692b      	ldr	r3, [r5, #16]
 801b55a:	3a04      	subs	r2, #4
 801b55c:	f7f4 f860 	bl	800f620 <ucdr_init_buffer_origin>
 801b560:	4628      	mov	r0, r5
 801b562:	4903      	ldr	r1, [pc, #12]	@ (801b570 <on_full_input_buffer+0x68>)
 801b564:	4622      	mov	r2, r4
 801b566:	f7f4 f837 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 801b56a:	2000      	movs	r0, #0
 801b56c:	bd70      	pop	{r4, r5, r6, pc}
 801b56e:	bf00      	nop
 801b570:	0801b509 	.word	0x0801b509

0801b574 <uxr_init_input_reliable_stream>:
 801b574:	b500      	push	{lr}
 801b576:	e9c0 1200 	strd	r1, r2, [r0]
 801b57a:	f04f 0e00 	mov.w	lr, #0
 801b57e:	9a01      	ldr	r2, [sp, #4]
 801b580:	8103      	strh	r3, [r0, #8]
 801b582:	6102      	str	r2, [r0, #16]
 801b584:	f880 e014 	strb.w	lr, [r0, #20]
 801b588:	b1d3      	cbz	r3, 801b5c0 <uxr_init_input_reliable_stream+0x4c>
 801b58a:	f8c1 e000 	str.w	lr, [r1]
 801b58e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b592:	f1bc 0f01 	cmp.w	ip, #1
 801b596:	d913      	bls.n	801b5c0 <uxr_init_input_reliable_stream+0x4c>
 801b598:	2301      	movs	r3, #1
 801b59a:	fbb3 f1fc 	udiv	r1, r3, ip
 801b59e:	fb0c 3111 	mls	r1, ip, r1, r3
 801b5a2:	b289      	uxth	r1, r1
 801b5a4:	6842      	ldr	r2, [r0, #4]
 801b5a6:	fbb2 f2fc 	udiv	r2, r2, ip
 801b5aa:	fb01 f202 	mul.w	r2, r1, r2
 801b5ae:	6801      	ldr	r1, [r0, #0]
 801b5b0:	f841 e002 	str.w	lr, [r1, r2]
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b5ba:	b29b      	uxth	r3, r3
 801b5bc:	459c      	cmp	ip, r3
 801b5be:	d8ec      	bhi.n	801b59a <uxr_init_input_reliable_stream+0x26>
 801b5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b5c4:	60c3      	str	r3, [r0, #12]
 801b5c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801b5ca:	bf00      	nop

0801b5cc <uxr_reset_input_reliable_stream>:
 801b5cc:	8901      	ldrh	r1, [r0, #8]
 801b5ce:	b1e9      	cbz	r1, 801b60c <uxr_reset_input_reliable_stream+0x40>
 801b5d0:	f04f 0c00 	mov.w	ip, #0
 801b5d4:	b500      	push	{lr}
 801b5d6:	4663      	mov	r3, ip
 801b5d8:	46e6      	mov	lr, ip
 801b5da:	fbb3 f2f1 	udiv	r2, r3, r1
 801b5de:	fb01 3312 	mls	r3, r1, r2, r3
 801b5e2:	b29b      	uxth	r3, r3
 801b5e4:	6842      	ldr	r2, [r0, #4]
 801b5e6:	fbb2 f2f1 	udiv	r2, r2, r1
 801b5ea:	fb02 f303 	mul.w	r3, r2, r3
 801b5ee:	6802      	ldr	r2, [r0, #0]
 801b5f0:	f842 e003 	str.w	lr, [r2, r3]
 801b5f4:	f10c 0c01 	add.w	ip, ip, #1
 801b5f8:	8901      	ldrh	r1, [r0, #8]
 801b5fa:	fa1f f38c 	uxth.w	r3, ip
 801b5fe:	4299      	cmp	r1, r3
 801b600:	d8eb      	bhi.n	801b5da <uxr_reset_input_reliable_stream+0xe>
 801b602:	f04f 33ff 	mov.w	r3, #4294967295
 801b606:	60c3      	str	r3, [r0, #12]
 801b608:	f85d fb04 	ldr.w	pc, [sp], #4
 801b60c:	f04f 33ff 	mov.w	r3, #4294967295
 801b610:	60c3      	str	r3, [r0, #12]
 801b612:	4770      	bx	lr

0801b614 <uxr_receive_reliable_message>:
 801b614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b618:	4604      	mov	r4, r0
 801b61a:	460d      	mov	r5, r1
 801b61c:	8901      	ldrh	r1, [r0, #8]
 801b61e:	8980      	ldrh	r0, [r0, #12]
 801b620:	4690      	mov	r8, r2
 801b622:	461f      	mov	r7, r3
 801b624:	f000 fca2 	bl	801bf6c <uxr_seq_num_add>
 801b628:	4629      	mov	r1, r5
 801b62a:	4606      	mov	r6, r0
 801b62c:	89a0      	ldrh	r0, [r4, #12]
 801b62e:	f000 fca5 	bl	801bf7c <uxr_seq_num_cmp>
 801b632:	2800      	cmp	r0, #0
 801b634:	db0a      	blt.n	801b64c <uxr_receive_reliable_message+0x38>
 801b636:	2600      	movs	r6, #0
 801b638:	89e0      	ldrh	r0, [r4, #14]
 801b63a:	4629      	mov	r1, r5
 801b63c:	f000 fc9e 	bl	801bf7c <uxr_seq_num_cmp>
 801b640:	2800      	cmp	r0, #0
 801b642:	da00      	bge.n	801b646 <uxr_receive_reliable_message+0x32>
 801b644:	81e5      	strh	r5, [r4, #14]
 801b646:	4630      	mov	r0, r6
 801b648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b64c:	4630      	mov	r0, r6
 801b64e:	4629      	mov	r1, r5
 801b650:	f000 fc94 	bl	801bf7c <uxr_seq_num_cmp>
 801b654:	2800      	cmp	r0, #0
 801b656:	dbee      	blt.n	801b636 <uxr_receive_reliable_message+0x22>
 801b658:	6923      	ldr	r3, [r4, #16]
 801b65a:	4640      	mov	r0, r8
 801b65c:	4798      	blx	r3
 801b65e:	2101      	movs	r1, #1
 801b660:	4681      	mov	r9, r0
 801b662:	89a0      	ldrh	r0, [r4, #12]
 801b664:	f000 fc82 	bl	801bf6c <uxr_seq_num_add>
 801b668:	f1b9 0f00 	cmp.w	r9, #0
 801b66c:	d101      	bne.n	801b672 <uxr_receive_reliable_message+0x5e>
 801b66e:	4285      	cmp	r5, r0
 801b670:	d047      	beq.n	801b702 <uxr_receive_reliable_message+0xee>
 801b672:	8922      	ldrh	r2, [r4, #8]
 801b674:	fbb5 f0f2 	udiv	r0, r5, r2
 801b678:	fb02 5010 	mls	r0, r2, r0, r5
 801b67c:	b280      	uxth	r0, r0
 801b67e:	6863      	ldr	r3, [r4, #4]
 801b680:	fbb3 f3f2 	udiv	r3, r3, r2
 801b684:	fb00 f303 	mul.w	r3, r0, r3
 801b688:	6820      	ldr	r0, [r4, #0]
 801b68a:	3304      	adds	r3, #4
 801b68c:	4418      	add	r0, r3
 801b68e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d1cf      	bne.n	801b636 <uxr_receive_reliable_message+0x22>
 801b696:	4641      	mov	r1, r8
 801b698:	463a      	mov	r2, r7
 801b69a:	f001 ffe6 	bl	801d66a <memcpy>
 801b69e:	8921      	ldrh	r1, [r4, #8]
 801b6a0:	fbb5 f2f1 	udiv	r2, r5, r1
 801b6a4:	fb01 5212 	mls	r2, r1, r2, r5
 801b6a8:	b292      	uxth	r2, r2
 801b6aa:	6863      	ldr	r3, [r4, #4]
 801b6ac:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6b0:	fb02 f303 	mul.w	r3, r2, r3
 801b6b4:	6822      	ldr	r2, [r4, #0]
 801b6b6:	50d7      	str	r7, [r2, r3]
 801b6b8:	9a08      	ldr	r2, [sp, #32]
 801b6ba:	2301      	movs	r3, #1
 801b6bc:	7013      	strb	r3, [r2, #0]
 801b6be:	f1b9 0f00 	cmp.w	r9, #0
 801b6c2:	d0b8      	beq.n	801b636 <uxr_receive_reliable_message+0x22>
 801b6c4:	89a6      	ldrh	r6, [r4, #12]
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	2101      	movs	r1, #1
 801b6ca:	f000 fc4f 	bl	801bf6c <uxr_seq_num_add>
 801b6ce:	8922      	ldrh	r2, [r4, #8]
 801b6d0:	6863      	ldr	r3, [r4, #4]
 801b6d2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b6d6:	4606      	mov	r6, r0
 801b6d8:	fbb0 f0f2 	udiv	r0, r0, r2
 801b6dc:	fb02 6010 	mls	r0, r2, r0, r6
 801b6e0:	b280      	uxth	r0, r0
 801b6e2:	fb00 f303 	mul.w	r3, r0, r3
 801b6e6:	6820      	ldr	r0, [r4, #0]
 801b6e8:	3304      	adds	r3, #4
 801b6ea:	4418      	add	r0, r3
 801b6ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d0a0      	beq.n	801b636 <uxr_receive_reliable_message+0x22>
 801b6f4:	6923      	ldr	r3, [r4, #16]
 801b6f6:	4798      	blx	r3
 801b6f8:	2802      	cmp	r0, #2
 801b6fa:	d008      	beq.n	801b70e <uxr_receive_reliable_message+0xfa>
 801b6fc:	2801      	cmp	r0, #1
 801b6fe:	d0e2      	beq.n	801b6c6 <uxr_receive_reliable_message+0xb2>
 801b700:	e799      	b.n	801b636 <uxr_receive_reliable_message+0x22>
 801b702:	9b08      	ldr	r3, [sp, #32]
 801b704:	81a5      	strh	r5, [r4, #12]
 801b706:	2601      	movs	r6, #1
 801b708:	f883 9000 	strb.w	r9, [r3]
 801b70c:	e794      	b.n	801b638 <uxr_receive_reliable_message+0x24>
 801b70e:	2601      	movs	r6, #1
 801b710:	e792      	b.n	801b638 <uxr_receive_reliable_message+0x24>
 801b712:	bf00      	nop

0801b714 <uxr_next_input_reliable_buffer_available>:
 801b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b718:	4604      	mov	r4, r0
 801b71a:	460f      	mov	r7, r1
 801b71c:	8980      	ldrh	r0, [r0, #12]
 801b71e:	2101      	movs	r1, #1
 801b720:	4690      	mov	r8, r2
 801b722:	f000 fc23 	bl	801bf6c <uxr_seq_num_add>
 801b726:	8922      	ldrh	r2, [r4, #8]
 801b728:	fbb0 f6f2 	udiv	r6, r0, r2
 801b72c:	fb02 0616 	mls	r6, r2, r6, r0
 801b730:	b2b6      	uxth	r6, r6
 801b732:	6863      	ldr	r3, [r4, #4]
 801b734:	fbb3 f3f2 	udiv	r3, r3, r2
 801b738:	fb06 f303 	mul.w	r3, r6, r3
 801b73c:	6826      	ldr	r6, [r4, #0]
 801b73e:	3304      	adds	r3, #4
 801b740:	441e      	add	r6, r3
 801b742:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b746:	f1b9 0f00 	cmp.w	r9, #0
 801b74a:	d023      	beq.n	801b794 <uxr_next_input_reliable_buffer_available+0x80>
 801b74c:	6923      	ldr	r3, [r4, #16]
 801b74e:	4605      	mov	r5, r0
 801b750:	4630      	mov	r0, r6
 801b752:	4798      	blx	r3
 801b754:	4682      	mov	sl, r0
 801b756:	b300      	cbz	r0, 801b79a <uxr_next_input_reliable_buffer_available+0x86>
 801b758:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b75c:	2101      	movs	r1, #1
 801b75e:	4650      	mov	r0, sl
 801b760:	f000 fc04 	bl	801bf6c <uxr_seq_num_add>
 801b764:	8921      	ldrh	r1, [r4, #8]
 801b766:	fbb0 f2f1 	udiv	r2, r0, r1
 801b76a:	4682      	mov	sl, r0
 801b76c:	fb01 0212 	mls	r2, r1, r2, r0
 801b770:	e9d4 0300 	ldrd	r0, r3, [r4]
 801b774:	b292      	uxth	r2, r2
 801b776:	fbb3 f3f1 	udiv	r3, r3, r1
 801b77a:	fb02 f303 	mul.w	r3, r2, r3
 801b77e:	3304      	adds	r3, #4
 801b780:	4418      	add	r0, r3
 801b782:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b786:	b12b      	cbz	r3, 801b794 <uxr_next_input_reliable_buffer_available+0x80>
 801b788:	6923      	ldr	r3, [r4, #16]
 801b78a:	4798      	blx	r3
 801b78c:	2802      	cmp	r0, #2
 801b78e:	d01b      	beq.n	801b7c8 <uxr_next_input_reliable_buffer_available+0xb4>
 801b790:	2801      	cmp	r0, #1
 801b792:	d0e3      	beq.n	801b75c <uxr_next_input_reliable_buffer_available+0x48>
 801b794:	2000      	movs	r0, #0
 801b796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b79a:	464a      	mov	r2, r9
 801b79c:	4631      	mov	r1, r6
 801b79e:	4638      	mov	r0, r7
 801b7a0:	f7f3 ff46 	bl	800f630 <ucdr_init_buffer>
 801b7a4:	8921      	ldrh	r1, [r4, #8]
 801b7a6:	fbb5 f2f1 	udiv	r2, r5, r1
 801b7aa:	fb01 5212 	mls	r2, r1, r2, r5
 801b7ae:	b292      	uxth	r2, r2
 801b7b0:	6863      	ldr	r3, [r4, #4]
 801b7b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7b6:	fb02 f303 	mul.w	r3, r2, r3
 801b7ba:	6822      	ldr	r2, [r4, #0]
 801b7bc:	f842 a003 	str.w	sl, [r2, r3]
 801b7c0:	2001      	movs	r0, #1
 801b7c2:	81a5      	strh	r5, [r4, #12]
 801b7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7c8:	8920      	ldrh	r0, [r4, #8]
 801b7ca:	fbb5 f3f0 	udiv	r3, r5, r0
 801b7ce:	fb00 5513 	mls	r5, r0, r3, r5
 801b7d2:	b2ad      	uxth	r5, r5
 801b7d4:	6863      	ldr	r3, [r4, #4]
 801b7d6:	fbb3 f3f0 	udiv	r3, r3, r0
 801b7da:	fb03 f505 	mul.w	r5, r3, r5
 801b7de:	6823      	ldr	r3, [r4, #0]
 801b7e0:	2000      	movs	r0, #0
 801b7e2:	5158      	str	r0, [r3, r5]
 801b7e4:	eb06 0108 	add.w	r1, r6, r8
 801b7e8:	eba9 0208 	sub.w	r2, r9, r8
 801b7ec:	4638      	mov	r0, r7
 801b7ee:	f7f3 ff1f 	bl	800f630 <ucdr_init_buffer>
 801b7f2:	4638      	mov	r0, r7
 801b7f4:	4903      	ldr	r1, [pc, #12]	@ (801b804 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b7f6:	4622      	mov	r2, r4
 801b7f8:	f7f3 feee 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 801b7fc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b800:	2001      	movs	r0, #1
 801b802:	e7c8      	b.n	801b796 <uxr_next_input_reliable_buffer_available+0x82>
 801b804:	0801b509 	.word	0x0801b509

0801b808 <uxr_process_heartbeat>:
 801b808:	b538      	push	{r3, r4, r5, lr}
 801b80a:	4611      	mov	r1, r2
 801b80c:	4604      	mov	r4, r0
 801b80e:	89c0      	ldrh	r0, [r0, #14]
 801b810:	4615      	mov	r5, r2
 801b812:	f000 fbb3 	bl	801bf7c <uxr_seq_num_cmp>
 801b816:	2800      	cmp	r0, #0
 801b818:	bfb8      	it	lt
 801b81a:	81e5      	strhlt	r5, [r4, #14]
 801b81c:	bd38      	pop	{r3, r4, r5, pc}
 801b81e:	bf00      	nop

0801b820 <uxr_compute_acknack>:
 801b820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b824:	8903      	ldrh	r3, [r0, #8]
 801b826:	8985      	ldrh	r5, [r0, #12]
 801b828:	4604      	mov	r4, r0
 801b82a:	460e      	mov	r6, r1
 801b82c:	b1d3      	cbz	r3, 801b864 <uxr_compute_acknack+0x44>
 801b82e:	4628      	mov	r0, r5
 801b830:	2701      	movs	r7, #1
 801b832:	e003      	b.n	801b83c <uxr_compute_acknack+0x1c>
 801b834:	4567      	cmp	r7, ip
 801b836:	d215      	bcs.n	801b864 <uxr_compute_acknack+0x44>
 801b838:	89a0      	ldrh	r0, [r4, #12]
 801b83a:	3701      	adds	r7, #1
 801b83c:	b2b9      	uxth	r1, r7
 801b83e:	f000 fb95 	bl	801bf6c <uxr_seq_num_add>
 801b842:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b846:	fbb0 f3fc 	udiv	r3, r0, ip
 801b84a:	fb0c 0313 	mls	r3, ip, r3, r0
 801b84e:	b29a      	uxth	r2, r3
 801b850:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b854:	fbb3 f3fc 	udiv	r3, r3, ip
 801b858:	fb02 f303 	mul.w	r3, r2, r3
 801b85c:	58cb      	ldr	r3, [r1, r3]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d1e8      	bne.n	801b834 <uxr_compute_acknack+0x14>
 801b862:	4605      	mov	r5, r0
 801b864:	8035      	strh	r5, [r6, #0]
 801b866:	2101      	movs	r1, #1
 801b868:	4628      	mov	r0, r5
 801b86a:	89e7      	ldrh	r7, [r4, #14]
 801b86c:	f000 fb82 	bl	801bf74 <uxr_seq_num_sub>
 801b870:	4601      	mov	r1, r0
 801b872:	4638      	mov	r0, r7
 801b874:	f000 fb7e 	bl	801bf74 <uxr_seq_num_sub>
 801b878:	4605      	mov	r5, r0
 801b87a:	b318      	cbz	r0, 801b8c4 <uxr_compute_acknack+0xa4>
 801b87c:	f04f 0900 	mov.w	r9, #0
 801b880:	464f      	mov	r7, r9
 801b882:	f04f 0801 	mov.w	r8, #1
 801b886:	fa1f f189 	uxth.w	r1, r9
 801b88a:	8830      	ldrh	r0, [r6, #0]
 801b88c:	f000 fb6e 	bl	801bf6c <uxr_seq_num_add>
 801b890:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b894:	fbb0 f3fc 	udiv	r3, r0, ip
 801b898:	e9d4 1200 	ldrd	r1, r2, [r4]
 801b89c:	fb03 001c 	mls	r0, r3, ip, r0
 801b8a0:	b283      	uxth	r3, r0
 801b8a2:	fbb2 f2fc 	udiv	r2, r2, ip
 801b8a6:	fb02 f303 	mul.w	r3, r2, r3
 801b8aa:	fa08 f209 	lsl.w	r2, r8, r9
 801b8ae:	58cb      	ldr	r3, [r1, r3]
 801b8b0:	f109 0901 	add.w	r9, r9, #1
 801b8b4:	b90b      	cbnz	r3, 801b8ba <uxr_compute_acknack+0x9a>
 801b8b6:	4317      	orrs	r7, r2
 801b8b8:	b2bf      	uxth	r7, r7
 801b8ba:	454d      	cmp	r5, r9
 801b8bc:	d1e3      	bne.n	801b886 <uxr_compute_acknack+0x66>
 801b8be:	4638      	mov	r0, r7
 801b8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8c4:	4607      	mov	r7, r0
 801b8c6:	4638      	mov	r0, r7
 801b8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b8cc <uxr_init_output_best_effort_stream>:
 801b8cc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b8d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b8d4:	6001      	str	r1, [r0, #0]
 801b8d6:	7303      	strb	r3, [r0, #12]
 801b8d8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b8dc:	4770      	bx	lr
 801b8de:	bf00      	nop

0801b8e0 <uxr_reset_output_best_effort_stream>:
 801b8e0:	7b02      	ldrb	r2, [r0, #12]
 801b8e2:	6042      	str	r2, [r0, #4]
 801b8e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b8e8:	81c3      	strh	r3, [r0, #14]
 801b8ea:	4770      	bx	lr

0801b8ec <uxr_prepare_best_effort_buffer_to_write>:
 801b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	b083      	sub	sp, #12
 801b8f2:	6840      	ldr	r0, [r0, #4]
 801b8f4:	460d      	mov	r5, r1
 801b8f6:	4616      	mov	r6, r2
 801b8f8:	f7fc fe24 	bl	8018544 <uxr_submessage_padding>
 801b8fc:	6863      	ldr	r3, [r4, #4]
 801b8fe:	4418      	add	r0, r3
 801b900:	68a3      	ldr	r3, [r4, #8]
 801b902:	1942      	adds	r2, r0, r5
 801b904:	4293      	cmp	r3, r2
 801b906:	bf2c      	ite	cs
 801b908:	2701      	movcs	r7, #1
 801b90a:	2700      	movcc	r7, #0
 801b90c:	d202      	bcs.n	801b914 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b90e:	4638      	mov	r0, r7
 801b910:	b003      	add	sp, #12
 801b912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b914:	9000      	str	r0, [sp, #0]
 801b916:	6821      	ldr	r1, [r4, #0]
 801b918:	4630      	mov	r0, r6
 801b91a:	2300      	movs	r3, #0
 801b91c:	f7f3 fe76 	bl	800f60c <ucdr_init_buffer_origin_offset>
 801b920:	6861      	ldr	r1, [r4, #4]
 801b922:	4638      	mov	r0, r7
 801b924:	4429      	add	r1, r5
 801b926:	6061      	str	r1, [r4, #4]
 801b928:	b003      	add	sp, #12
 801b92a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b92c <uxr_prepare_best_effort_buffer_to_send>:
 801b92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b930:	4604      	mov	r4, r0
 801b932:	461d      	mov	r5, r3
 801b934:	6840      	ldr	r0, [r0, #4]
 801b936:	7b23      	ldrb	r3, [r4, #12]
 801b938:	4298      	cmp	r0, r3
 801b93a:	bf8c      	ite	hi
 801b93c:	2601      	movhi	r6, #1
 801b93e:	2600      	movls	r6, #0
 801b940:	d802      	bhi.n	801b948 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b942:	4630      	mov	r0, r6
 801b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b948:	4688      	mov	r8, r1
 801b94a:	89e0      	ldrh	r0, [r4, #14]
 801b94c:	2101      	movs	r1, #1
 801b94e:	4617      	mov	r7, r2
 801b950:	f000 fb0c 	bl	801bf6c <uxr_seq_num_add>
 801b954:	6823      	ldr	r3, [r4, #0]
 801b956:	81e0      	strh	r0, [r4, #14]
 801b958:	8028      	strh	r0, [r5, #0]
 801b95a:	f8c8 3000 	str.w	r3, [r8]
 801b95e:	6863      	ldr	r3, [r4, #4]
 801b960:	603b      	str	r3, [r7, #0]
 801b962:	7b23      	ldrb	r3, [r4, #12]
 801b964:	6063      	str	r3, [r4, #4]
 801b966:	4630      	mov	r0, r6
 801b968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b96c <on_full_output_buffer>:
 801b96c:	b538      	push	{r3, r4, r5, lr}
 801b96e:	6802      	ldr	r2, [r0, #0]
 801b970:	460c      	mov	r4, r1
 801b972:	6809      	ldr	r1, [r1, #0]
 801b974:	8923      	ldrh	r3, [r4, #8]
 801b976:	eba2 0c01 	sub.w	ip, r2, r1
 801b97a:	6862      	ldr	r2, [r4, #4]
 801b97c:	fbb2 f2f3 	udiv	r2, r2, r3
 801b980:	fbbc fcf2 	udiv	ip, ip, r2
 801b984:	f10c 0c01 	add.w	ip, ip, #1
 801b988:	fa1f fc8c 	uxth.w	ip, ip
 801b98c:	fbbc fef3 	udiv	lr, ip, r3
 801b990:	fb03 c31e 	mls	r3, r3, lr, ip
 801b994:	b29b      	uxth	r3, r3
 801b996:	fb02 f303 	mul.w	r3, r2, r3
 801b99a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801b99e:	58ca      	ldr	r2, [r1, r3]
 801b9a0:	4463      	add	r3, ip
 801b9a2:	eba2 020c 	sub.w	r2, r2, ip
 801b9a6:	3308      	adds	r3, #8
 801b9a8:	4605      	mov	r5, r0
 801b9aa:	4419      	add	r1, r3
 801b9ac:	3a04      	subs	r2, #4
 801b9ae:	6903      	ldr	r3, [r0, #16]
 801b9b0:	f7f3 fe36 	bl	800f620 <ucdr_init_buffer_origin>
 801b9b4:	4628      	mov	r0, r5
 801b9b6:	4903      	ldr	r1, [pc, #12]	@ (801b9c4 <on_full_output_buffer+0x58>)
 801b9b8:	4622      	mov	r2, r4
 801b9ba:	f7f3 fe0d 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 801b9be:	2000      	movs	r0, #0
 801b9c0:	bd38      	pop	{r3, r4, r5, pc}
 801b9c2:	bf00      	nop
 801b9c4:	0801b96d 	.word	0x0801b96d

0801b9c8 <uxr_init_output_reliable_stream>:
 801b9c8:	b410      	push	{r4}
 801b9ca:	f89d c004 	ldrb.w	ip, [sp, #4]
 801b9ce:	8103      	strh	r3, [r0, #8]
 801b9d0:	e9c0 1200 	strd	r1, r2, [r0]
 801b9d4:	f880 c00c 	strb.w	ip, [r0, #12]
 801b9d8:	b1d3      	cbz	r3, 801ba10 <uxr_init_output_reliable_stream+0x48>
 801b9da:	f8c1 c000 	str.w	ip, [r1]
 801b9de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b9e2:	f1bc 0f01 	cmp.w	ip, #1
 801b9e6:	d913      	bls.n	801ba10 <uxr_init_output_reliable_stream+0x48>
 801b9e8:	2301      	movs	r3, #1
 801b9ea:	fbb3 f1fc 	udiv	r1, r3, ip
 801b9ee:	fb0c 3111 	mls	r1, ip, r1, r3
 801b9f2:	b289      	uxth	r1, r1
 801b9f4:	6842      	ldr	r2, [r0, #4]
 801b9f6:	6804      	ldr	r4, [r0, #0]
 801b9f8:	fbb2 f2fc 	udiv	r2, r2, ip
 801b9fc:	fb01 f202 	mul.w	r2, r1, r2
 801ba00:	7b01      	ldrb	r1, [r0, #12]
 801ba02:	50a1      	str	r1, [r4, r2]
 801ba04:	3301      	adds	r3, #1
 801ba06:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ba0a:	b29b      	uxth	r3, r3
 801ba0c:	459c      	cmp	ip, r3
 801ba0e:	d8ec      	bhi.n	801b9ea <uxr_init_output_reliable_stream+0x22>
 801ba10:	f04f 32ff 	mov.w	r2, #4294967295
 801ba14:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ba18:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801ba1c:	4905      	ldr	r1, [pc, #20]	@ (801ba34 <uxr_init_output_reliable_stream+0x6c>)
 801ba1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba22:	f8c0 100e 	str.w	r1, [r0, #14]
 801ba26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	8242      	strh	r2, [r0, #18]
 801ba2e:	8403      	strh	r3, [r0, #32]
 801ba30:	4770      	bx	lr
 801ba32:	bf00      	nop
 801ba34:	ffff0000 	.word	0xffff0000

0801ba38 <uxr_reset_output_reliable_stream>:
 801ba38:	8901      	ldrh	r1, [r0, #8]
 801ba3a:	b1b1      	cbz	r1, 801ba6a <uxr_reset_output_reliable_stream+0x32>
 801ba3c:	f04f 0c00 	mov.w	ip, #0
 801ba40:	4663      	mov	r3, ip
 801ba42:	fbb3 f2f1 	udiv	r2, r3, r1
 801ba46:	fb01 3312 	mls	r3, r1, r2, r3
 801ba4a:	b29b      	uxth	r3, r3
 801ba4c:	6842      	ldr	r2, [r0, #4]
 801ba4e:	fbb2 f2f1 	udiv	r2, r2, r1
 801ba52:	6801      	ldr	r1, [r0, #0]
 801ba54:	fb02 f303 	mul.w	r3, r2, r3
 801ba58:	7b02      	ldrb	r2, [r0, #12]
 801ba5a:	50ca      	str	r2, [r1, r3]
 801ba5c:	f10c 0c01 	add.w	ip, ip, #1
 801ba60:	8901      	ldrh	r1, [r0, #8]
 801ba62:	fa1f f38c 	uxth.w	r3, ip
 801ba66:	4299      	cmp	r1, r3
 801ba68:	d8eb      	bhi.n	801ba42 <uxr_reset_output_reliable_stream+0xa>
 801ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 801ba6e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ba72:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801ba76:	4904      	ldr	r1, [pc, #16]	@ (801ba88 <uxr_reset_output_reliable_stream+0x50>)
 801ba78:	f8c0 100e 	str.w	r1, [r0, #14]
 801ba7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ba80:	2300      	movs	r3, #0
 801ba82:	8242      	strh	r2, [r0, #18]
 801ba84:	8403      	strh	r3, [r0, #32]
 801ba86:	4770      	bx	lr
 801ba88:	ffff0000 	.word	0xffff0000

0801ba8c <uxr_prepare_reliable_buffer_to_write>:
 801ba8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba90:	4604      	mov	r4, r0
 801ba92:	b091      	sub	sp, #68	@ 0x44
 801ba94:	8900      	ldrh	r0, [r0, #8]
 801ba96:	89e6      	ldrh	r6, [r4, #14]
 801ba98:	6823      	ldr	r3, [r4, #0]
 801ba9a:	9204      	str	r2, [sp, #16]
 801ba9c:	fbb6 f2f0 	udiv	r2, r6, r0
 801baa0:	fb00 6212 	mls	r2, r0, r2, r6
 801baa4:	b292      	uxth	r2, r2
 801baa6:	6865      	ldr	r5, [r4, #4]
 801baa8:	fbb5 f5f0 	udiv	r5, r5, r0
 801baac:	fb05 3202 	mla	r2, r5, r2, r3
 801bab0:	3204      	adds	r2, #4
 801bab2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801bab6:	f894 900c 	ldrb.w	r9, [r4, #12]
 801baba:	9203      	str	r2, [sp, #12]
 801babc:	468b      	mov	fp, r1
 801babe:	1f2f      	subs	r7, r5, #4
 801bac0:	2800      	cmp	r0, #0
 801bac2:	f000 814c 	beq.w	801bd5e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801bac6:	f04f 0c00 	mov.w	ip, #0
 801baca:	46e2      	mov	sl, ip
 801bacc:	4661      	mov	r1, ip
 801bace:	fbb1 f2f0 	udiv	r2, r1, r0
 801bad2:	fb00 1212 	mls	r2, r0, r2, r1
 801bad6:	b292      	uxth	r2, r2
 801bad8:	fb05 f202 	mul.w	r2, r5, r2
 801badc:	f10c 0c01 	add.w	ip, ip, #1
 801bae0:	589a      	ldr	r2, [r3, r2]
 801bae2:	454a      	cmp	r2, r9
 801bae4:	bf08      	it	eq
 801bae6:	f10a 0a01 	addeq.w	sl, sl, #1
 801baea:	fa1f f18c 	uxth.w	r1, ip
 801baee:	bf08      	it	eq
 801baf0:	fa1f fa8a 	uxtheq.w	sl, sl
 801baf4:	4281      	cmp	r1, r0
 801baf6:	d3ea      	bcc.n	801bace <uxr_prepare_reliable_buffer_to_write+0x42>
 801baf8:	4640      	mov	r0, r8
 801bafa:	2104      	movs	r1, #4
 801bafc:	f8cd a014 	str.w	sl, [sp, #20]
 801bb00:	f7f3 fd9a 	bl	800f638 <ucdr_alignment>
 801bb04:	4480      	add	r8, r0
 801bb06:	eb08 020b 	add.w	r2, r8, fp
 801bb0a:	42ba      	cmp	r2, r7
 801bb0c:	f240 80cd 	bls.w	801bcaa <uxr_prepare_reliable_buffer_to_write+0x21e>
 801bb10:	7b22      	ldrb	r2, [r4, #12]
 801bb12:	445a      	add	r2, fp
 801bb14:	42ba      	cmp	r2, r7
 801bb16:	f240 80b5 	bls.w	801bc84 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801bb1a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801bb1e:	33fc      	adds	r3, #252	@ 0xfc
 801bb20:	b2ba      	uxth	r2, r7
 801bb22:	4413      	add	r3, r2
 801bb24:	b29b      	uxth	r3, r3
 801bb26:	fb0a f903 	mul.w	r9, sl, r3
 801bb2a:	45d9      	cmp	r9, fp
 801bb2c:	9305      	str	r3, [sp, #20]
 801bb2e:	9306      	str	r3, [sp, #24]
 801bb30:	f0c0 80b7 	bcc.w	801bca2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801bb34:	f108 0304 	add.w	r3, r8, #4
 801bb38:	42bb      	cmp	r3, r7
 801bb3a:	f080 80db 	bcs.w	801bcf4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801bb3e:	f1a2 0904 	sub.w	r9, r2, #4
 801bb42:	eba9 0908 	sub.w	r9, r9, r8
 801bb46:	9b05      	ldr	r3, [sp, #20]
 801bb48:	fa1f f989 	uxth.w	r9, r9
 801bb4c:	ebab 0b09 	sub.w	fp, fp, r9
 801bb50:	fbbb f2f3 	udiv	r2, fp, r3
 801bb54:	fb03 b312 	mls	r3, r3, r2, fp
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	f000 80c8 	beq.w	801bcee <uxr_prepare_reliable_buffer_to_write+0x262>
 801bb5e:	3201      	adds	r2, #1
 801bb60:	b292      	uxth	r2, r2
 801bb62:	9306      	str	r3, [sp, #24]
 801bb64:	4552      	cmp	r2, sl
 801bb66:	f200 809c 	bhi.w	801bca2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801bb6a:	f10d 0b20 	add.w	fp, sp, #32
 801bb6e:	2a00      	cmp	r2, #0
 801bb70:	d042      	beq.n	801bbf8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801bb72:	f8cd 801c 	str.w	r8, [sp, #28]
 801bb76:	f04f 0a00 	mov.w	sl, #0
 801bb7a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801bb7e:	9505      	str	r5, [sp, #20]
 801bb80:	f10d 0b20 	add.w	fp, sp, #32
 801bb84:	4615      	mov	r5, r2
 801bb86:	e000      	b.n	801bb8a <uxr_prepare_reliable_buffer_to_write+0xfe>
 801bb88:	46c1      	mov	r9, r8
 801bb8a:	8920      	ldrh	r0, [r4, #8]
 801bb8c:	fbb6 f2f0 	udiv	r2, r6, r0
 801bb90:	fb00 6112 	mls	r1, r0, r2, r6
 801bb94:	b28a      	uxth	r2, r1
 801bb96:	6863      	ldr	r3, [r4, #4]
 801bb98:	fbb3 f1f0 	udiv	r1, r3, r0
 801bb9c:	6823      	ldr	r3, [r4, #0]
 801bb9e:	fb02 f101 	mul.w	r1, r2, r1
 801bba2:	3104      	adds	r1, #4
 801bba4:	4419      	add	r1, r3
 801bba6:	4658      	mov	r0, fp
 801bba8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801bbac:	9200      	str	r2, [sp, #0]
 801bbae:	2300      	movs	r3, #0
 801bbb0:	463a      	mov	r2, r7
 801bbb2:	f7f3 fd2b 	bl	800f60c <ucdr_init_buffer_origin_offset>
 801bbb6:	464a      	mov	r2, r9
 801bbb8:	2300      	movs	r3, #0
 801bbba:	210d      	movs	r1, #13
 801bbbc:	4658      	mov	r0, fp
 801bbbe:	f7fc fc81 	bl	80184c4 <uxr_buffer_submessage_header>
 801bbc2:	8921      	ldrh	r1, [r4, #8]
 801bbc4:	fbb6 f2f1 	udiv	r2, r6, r1
 801bbc8:	fb01 6212 	mls	r2, r1, r2, r6
 801bbcc:	b292      	uxth	r2, r2
 801bbce:	6863      	ldr	r3, [r4, #4]
 801bbd0:	fbb3 f3f1 	udiv	r3, r3, r1
 801bbd4:	fb02 f303 	mul.w	r3, r2, r3
 801bbd8:	6822      	ldr	r2, [r4, #0]
 801bbda:	4630      	mov	r0, r6
 801bbdc:	50d7      	str	r7, [r2, r3]
 801bbde:	2101      	movs	r1, #1
 801bbe0:	f000 f9c4 	bl	801bf6c <uxr_seq_num_add>
 801bbe4:	f10a 0a01 	add.w	sl, sl, #1
 801bbe8:	fa1f f38a 	uxth.w	r3, sl
 801bbec:	429d      	cmp	r5, r3
 801bbee:	4606      	mov	r6, r0
 801bbf0:	d8ca      	bhi.n	801bb88 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801bbf2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801bbf6:	9d05      	ldr	r5, [sp, #20]
 801bbf8:	8920      	ldrh	r0, [r4, #8]
 801bbfa:	fbb6 f3f0 	udiv	r3, r6, r0
 801bbfe:	fb00 6313 	mls	r3, r0, r3, r6
 801bc02:	b299      	uxth	r1, r3
 801bc04:	6863      	ldr	r3, [r4, #4]
 801bc06:	fbb3 f3f0 	udiv	r3, r3, r0
 801bc0a:	fb01 f303 	mul.w	r3, r1, r3
 801bc0e:	6821      	ldr	r1, [r4, #0]
 801bc10:	3304      	adds	r3, #4
 801bc12:	4419      	add	r1, r3
 801bc14:	463a      	mov	r2, r7
 801bc16:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801bc1a:	9000      	str	r0, [sp, #0]
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	4658      	mov	r0, fp
 801bc20:	f7f3 fcf4 	bl	800f60c <ucdr_init_buffer_origin_offset>
 801bc24:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801bc28:	4658      	mov	r0, fp
 801bc2a:	fa1f f289 	uxth.w	r2, r9
 801bc2e:	2302      	movs	r3, #2
 801bc30:	210d      	movs	r1, #13
 801bc32:	f7fc fc47 	bl	80184c4 <uxr_buffer_submessage_header>
 801bc36:	9b03      	ldr	r3, [sp, #12]
 801bc38:	8927      	ldrh	r7, [r4, #8]
 801bc3a:	7b20      	ldrb	r0, [r4, #12]
 801bc3c:	f108 0104 	add.w	r1, r8, #4
 801bc40:	440b      	add	r3, r1
 801bc42:	4619      	mov	r1, r3
 801bc44:	fbb6 f3f7 	udiv	r3, r6, r7
 801bc48:	fb07 6313 	mls	r3, r7, r3, r6
 801bc4c:	f1a5 0208 	sub.w	r2, r5, #8
 801bc50:	b29d      	uxth	r5, r3
 801bc52:	3004      	adds	r0, #4
 801bc54:	6863      	ldr	r3, [r4, #4]
 801bc56:	fbb3 f3f7 	udiv	r3, r3, r7
 801bc5a:	fb05 f303 	mul.w	r3, r5, r3
 801bc5e:	6825      	ldr	r5, [r4, #0]
 801bc60:	4448      	add	r0, r9
 801bc62:	50e8      	str	r0, [r5, r3]
 801bc64:	9d04      	ldr	r5, [sp, #16]
 801bc66:	eba2 0208 	sub.w	r2, r2, r8
 801bc6a:	4628      	mov	r0, r5
 801bc6c:	f7f3 fce0 	bl	800f630 <ucdr_init_buffer>
 801bc70:	4628      	mov	r0, r5
 801bc72:	493c      	ldr	r1, [pc, #240]	@ (801bd64 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801bc74:	4622      	mov	r2, r4
 801bc76:	f7f3 fcaf 	bl	800f5d8 <ucdr_set_on_full_buffer_callback>
 801bc7a:	2001      	movs	r0, #1
 801bc7c:	81e6      	strh	r6, [r4, #14]
 801bc7e:	b011      	add	sp, #68	@ 0x44
 801bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc84:	2101      	movs	r1, #1
 801bc86:	89e0      	ldrh	r0, [r4, #14]
 801bc88:	f000 f970 	bl	801bf6c <uxr_seq_num_add>
 801bc8c:	8921      	ldrh	r1, [r4, #8]
 801bc8e:	4605      	mov	r5, r0
 801bc90:	8a60      	ldrh	r0, [r4, #18]
 801bc92:	f000 f96b 	bl	801bf6c <uxr_seq_num_add>
 801bc96:	4601      	mov	r1, r0
 801bc98:	4628      	mov	r0, r5
 801bc9a:	f000 f96f 	bl	801bf7c <uxr_seq_num_cmp>
 801bc9e:	2800      	cmp	r0, #0
 801bca0:	dd42      	ble.n	801bd28 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801bca2:	2000      	movs	r0, #0
 801bca4:	b011      	add	sp, #68	@ 0x44
 801bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcaa:	8921      	ldrh	r1, [r4, #8]
 801bcac:	8a60      	ldrh	r0, [r4, #18]
 801bcae:	9205      	str	r2, [sp, #20]
 801bcb0:	f000 f95c 	bl	801bf6c <uxr_seq_num_add>
 801bcb4:	4601      	mov	r1, r0
 801bcb6:	4630      	mov	r0, r6
 801bcb8:	f000 f960 	bl	801bf7c <uxr_seq_num_cmp>
 801bcbc:	2800      	cmp	r0, #0
 801bcbe:	9a05      	ldr	r2, [sp, #20]
 801bcc0:	dcef      	bgt.n	801bca2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801bcc2:	8927      	ldrh	r7, [r4, #8]
 801bcc4:	fbb6 f3f7 	udiv	r3, r6, r7
 801bcc8:	fb07 6313 	mls	r3, r7, r3, r6
 801bccc:	b29d      	uxth	r5, r3
 801bcce:	6863      	ldr	r3, [r4, #4]
 801bcd0:	6824      	ldr	r4, [r4, #0]
 801bcd2:	fbb3 f3f7 	udiv	r3, r3, r7
 801bcd6:	fb05 f303 	mul.w	r3, r5, r3
 801bcda:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801bcde:	50e2      	str	r2, [r4, r3]
 801bce0:	2300      	movs	r3, #0
 801bce2:	f8cd 8000 	str.w	r8, [sp]
 801bce6:	f7f3 fc91 	bl	800f60c <ucdr_init_buffer_origin_offset>
 801bcea:	2001      	movs	r0, #1
 801bcec:	e7da      	b.n	801bca4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801bcee:	b293      	uxth	r3, r2
 801bcf0:	461a      	mov	r2, r3
 801bcf2:	e737      	b.n	801bb64 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801bcf4:	4630      	mov	r0, r6
 801bcf6:	2101      	movs	r1, #1
 801bcf8:	9207      	str	r2, [sp, #28]
 801bcfa:	f000 f937 	bl	801bf6c <uxr_seq_num_add>
 801bcfe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801bd02:	fbb0 f1fc 	udiv	r1, r0, ip
 801bd06:	fb0c 0111 	mls	r1, ip, r1, r0
 801bd0a:	4606      	mov	r6, r0
 801bd0c:	b288      	uxth	r0, r1
 801bd0e:	6863      	ldr	r3, [r4, #4]
 801bd10:	fbb3 f1fc 	udiv	r1, r3, ip
 801bd14:	6823      	ldr	r3, [r4, #0]
 801bd16:	9a07      	ldr	r2, [sp, #28]
 801bd18:	fb00 f101 	mul.w	r1, r0, r1
 801bd1c:	3104      	adds	r1, #4
 801bd1e:	440b      	add	r3, r1
 801bd20:	9303      	str	r3, [sp, #12]
 801bd22:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801bd26:	e70a      	b.n	801bb3e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801bd28:	8921      	ldrh	r1, [r4, #8]
 801bd2a:	fbb5 f3f1 	udiv	r3, r5, r1
 801bd2e:	fb01 5313 	mls	r3, r1, r3, r5
 801bd32:	b29a      	uxth	r2, r3
 801bd34:	6863      	ldr	r3, [r4, #4]
 801bd36:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd3a:	6821      	ldr	r1, [r4, #0]
 801bd3c:	9804      	ldr	r0, [sp, #16]
 801bd3e:	fb02 f303 	mul.w	r3, r2, r3
 801bd42:	3304      	adds	r3, #4
 801bd44:	7b22      	ldrb	r2, [r4, #12]
 801bd46:	4419      	add	r1, r3
 801bd48:	445a      	add	r2, fp
 801bd4a:	f841 2c04 	str.w	r2, [r1, #-4]
 801bd4e:	7b23      	ldrb	r3, [r4, #12]
 801bd50:	9300      	str	r3, [sp, #0]
 801bd52:	2300      	movs	r3, #0
 801bd54:	f7f3 fc5a 	bl	800f60c <ucdr_init_buffer_origin_offset>
 801bd58:	81e5      	strh	r5, [r4, #14]
 801bd5a:	2001      	movs	r0, #1
 801bd5c:	e7a2      	b.n	801bca4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801bd5e:	4682      	mov	sl, r0
 801bd60:	e6ca      	b.n	801baf8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801bd62:	bf00      	nop
 801bd64:	0801b96d 	.word	0x0801b96d

0801bd68 <uxr_prepare_next_reliable_buffer_to_send>:
 801bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd6a:	4604      	mov	r4, r0
 801bd6c:	460f      	mov	r7, r1
 801bd6e:	8a00      	ldrh	r0, [r0, #16]
 801bd70:	2101      	movs	r1, #1
 801bd72:	4616      	mov	r6, r2
 801bd74:	461d      	mov	r5, r3
 801bd76:	f000 f8f9 	bl	801bf6c <uxr_seq_num_add>
 801bd7a:	8028      	strh	r0, [r5, #0]
 801bd7c:	8922      	ldrh	r2, [r4, #8]
 801bd7e:	fbb0 f3f2 	udiv	r3, r0, r2
 801bd82:	fb02 0c13 	mls	ip, r2, r3, r0
 801bd86:	fa1f fc8c 	uxth.w	ip, ip
 801bd8a:	6863      	ldr	r3, [r4, #4]
 801bd8c:	fbb3 f3f2 	udiv	r3, r3, r2
 801bd90:	fb0c fc03 	mul.w	ip, ip, r3
 801bd94:	6823      	ldr	r3, [r4, #0]
 801bd96:	89e1      	ldrh	r1, [r4, #14]
 801bd98:	f10c 0c04 	add.w	ip, ip, #4
 801bd9c:	4463      	add	r3, ip
 801bd9e:	603b      	str	r3, [r7, #0]
 801bda0:	6823      	ldr	r3, [r4, #0]
 801bda2:	449c      	add	ip, r3
 801bda4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801bda8:	6033      	str	r3, [r6, #0]
 801bdaa:	f000 f8e7 	bl	801bf7c <uxr_seq_num_cmp>
 801bdae:	2800      	cmp	r0, #0
 801bdb0:	dd01      	ble.n	801bdb6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801bdb2:	2000      	movs	r0, #0
 801bdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdb6:	7b23      	ldrb	r3, [r4, #12]
 801bdb8:	6832      	ldr	r2, [r6, #0]
 801bdba:	429a      	cmp	r2, r3
 801bdbc:	d9f9      	bls.n	801bdb2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801bdbe:	8a61      	ldrh	r1, [r4, #18]
 801bdc0:	8a20      	ldrh	r0, [r4, #16]
 801bdc2:	f000 f8d7 	bl	801bf74 <uxr_seq_num_sub>
 801bdc6:	8923      	ldrh	r3, [r4, #8]
 801bdc8:	4283      	cmp	r3, r0
 801bdca:	d0f2      	beq.n	801bdb2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801bdcc:	8828      	ldrh	r0, [r5, #0]
 801bdce:	89e3      	ldrh	r3, [r4, #14]
 801bdd0:	8220      	strh	r0, [r4, #16]
 801bdd2:	4298      	cmp	r0, r3
 801bdd4:	d001      	beq.n	801bdda <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801bdd6:	2001      	movs	r0, #1
 801bdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdda:	2101      	movs	r1, #1
 801bddc:	f000 f8c6 	bl	801bf6c <uxr_seq_num_add>
 801bde0:	81e0      	strh	r0, [r4, #14]
 801bde2:	2001      	movs	r0, #1
 801bde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bde6:	bf00      	nop

0801bde8 <uxr_update_output_stream_heartbeat_timestamp>:
 801bde8:	b570      	push	{r4, r5, r6, lr}
 801bdea:	8a01      	ldrh	r1, [r0, #16]
 801bdec:	4604      	mov	r4, r0
 801bdee:	8a40      	ldrh	r0, [r0, #18]
 801bdf0:	4615      	mov	r5, r2
 801bdf2:	461e      	mov	r6, r3
 801bdf4:	f000 f8c2 	bl	801bf7c <uxr_seq_num_cmp>
 801bdf8:	2800      	cmp	r0, #0
 801bdfa:	db07      	blt.n	801be0c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801bdfc:	f04f 32ff 	mov.w	r2, #4294967295
 801be00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801be04:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801be08:	2000      	movs	r0, #0
 801be0a:	bd70      	pop	{r4, r5, r6, pc}
 801be0c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801be10:	b940      	cbnz	r0, 801be24 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801be12:	2301      	movs	r3, #1
 801be14:	f884 3020 	strb.w	r3, [r4, #32]
 801be18:	3564      	adds	r5, #100	@ 0x64
 801be1a:	f146 0600 	adc.w	r6, r6, #0
 801be1e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801be22:	bd70      	pop	{r4, r5, r6, pc}
 801be24:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801be28:	4295      	cmp	r5, r2
 801be2a:	eb76 0303 	sbcs.w	r3, r6, r3
 801be2e:	bfa5      	ittet	ge
 801be30:	3001      	addge	r0, #1
 801be32:	f884 0020 	strbge.w	r0, [r4, #32]
 801be36:	2000      	movlt	r0, #0
 801be38:	2001      	movge	r0, #1
 801be3a:	e7ed      	b.n	801be18 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801be3c <uxr_begin_output_nack_buffer_it>:
 801be3c:	8a40      	ldrh	r0, [r0, #18]
 801be3e:	4770      	bx	lr

0801be40 <uxr_next_reliable_nack_buffer_to_send>:
 801be40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be44:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801be48:	b082      	sub	sp, #8
 801be4a:	f1b8 0f00 	cmp.w	r8, #0
 801be4e:	d011      	beq.n	801be74 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801be50:	4604      	mov	r4, r0
 801be52:	8818      	ldrh	r0, [r3, #0]
 801be54:	460e      	mov	r6, r1
 801be56:	4617      	mov	r7, r2
 801be58:	461d      	mov	r5, r3
 801be5a:	2101      	movs	r1, #1
 801be5c:	f000 f886 	bl	801bf6c <uxr_seq_num_add>
 801be60:	8028      	strh	r0, [r5, #0]
 801be62:	8a21      	ldrh	r1, [r4, #16]
 801be64:	f000 f88a 	bl	801bf7c <uxr_seq_num_cmp>
 801be68:	2800      	cmp	r0, #0
 801be6a:	dd07      	ble.n	801be7c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801be6c:	f04f 0800 	mov.w	r8, #0
 801be70:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801be74:	4640      	mov	r0, r8
 801be76:	b002      	add	sp, #8
 801be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be7c:	8921      	ldrh	r1, [r4, #8]
 801be7e:	8828      	ldrh	r0, [r5, #0]
 801be80:	6823      	ldr	r3, [r4, #0]
 801be82:	fbb0 f2f1 	udiv	r2, r0, r1
 801be86:	fb01 0c12 	mls	ip, r1, r2, r0
 801be8a:	fa1f f28c 	uxth.w	r2, ip
 801be8e:	9301      	str	r3, [sp, #4]
 801be90:	6863      	ldr	r3, [r4, #4]
 801be92:	fbb3 fcf1 	udiv	ip, r3, r1
 801be96:	9b01      	ldr	r3, [sp, #4]
 801be98:	fb02 fc0c 	mul.w	ip, r2, ip
 801be9c:	f10c 0c04 	add.w	ip, ip, #4
 801bea0:	4463      	add	r3, ip
 801bea2:	6033      	str	r3, [r6, #0]
 801bea4:	6823      	ldr	r3, [r4, #0]
 801bea6:	4463      	add	r3, ip
 801bea8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801beac:	603b      	str	r3, [r7, #0]
 801beae:	7b22      	ldrb	r2, [r4, #12]
 801beb0:	429a      	cmp	r2, r3
 801beb2:	d0d2      	beq.n	801be5a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801beb4:	4640      	mov	r0, r8
 801beb6:	b002      	add	sp, #8
 801beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bebc <uxr_process_acknack>:
 801bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bebe:	4604      	mov	r4, r0
 801bec0:	460e      	mov	r6, r1
 801bec2:	4610      	mov	r0, r2
 801bec4:	2101      	movs	r1, #1
 801bec6:	f000 f855 	bl	801bf74 <uxr_seq_num_sub>
 801beca:	8a61      	ldrh	r1, [r4, #18]
 801becc:	f000 f852 	bl	801bf74 <uxr_seq_num_sub>
 801bed0:	b1c0      	cbz	r0, 801bf04 <uxr_process_acknack+0x48>
 801bed2:	4605      	mov	r5, r0
 801bed4:	2700      	movs	r7, #0
 801bed6:	2101      	movs	r1, #1
 801bed8:	8a60      	ldrh	r0, [r4, #18]
 801beda:	f000 f847 	bl	801bf6c <uxr_seq_num_add>
 801bede:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801bee2:	fbb0 f1fc 	udiv	r1, r0, ip
 801bee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801beea:	fb0c 0111 	mls	r1, ip, r1, r0
 801beee:	b289      	uxth	r1, r1
 801bef0:	3701      	adds	r7, #1
 801bef2:	fbb3 f3fc 	udiv	r3, r3, ip
 801bef6:	fb01 f303 	mul.w	r3, r1, r3
 801befa:	42bd      	cmp	r5, r7
 801befc:	7b21      	ldrb	r1, [r4, #12]
 801befe:	8260      	strh	r0, [r4, #18]
 801bf00:	50d1      	str	r1, [r2, r3]
 801bf02:	d1e8      	bne.n	801bed6 <uxr_process_acknack+0x1a>
 801bf04:	3e00      	subs	r6, #0
 801bf06:	f04f 0300 	mov.w	r3, #0
 801bf0a:	bf18      	it	ne
 801bf0c:	2601      	movne	r6, #1
 801bf0e:	f884 3020 	strb.w	r3, [r4, #32]
 801bf12:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801bf16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bf18 <uxr_is_output_up_to_date>:
 801bf18:	8a01      	ldrh	r1, [r0, #16]
 801bf1a:	8a40      	ldrh	r0, [r0, #18]
 801bf1c:	b508      	push	{r3, lr}
 801bf1e:	f000 f82d 	bl	801bf7c <uxr_seq_num_cmp>
 801bf22:	fab0 f080 	clz	r0, r0
 801bf26:	0940      	lsrs	r0, r0, #5
 801bf28:	bd08      	pop	{r3, pc}
 801bf2a:	bf00      	nop

0801bf2c <get_available_free_slots>:
 801bf2c:	8902      	ldrh	r2, [r0, #8]
 801bf2e:	b1da      	cbz	r2, 801bf68 <get_available_free_slots+0x3c>
 801bf30:	b530      	push	{r4, r5, lr}
 801bf32:	2100      	movs	r1, #0
 801bf34:	6843      	ldr	r3, [r0, #4]
 801bf36:	6805      	ldr	r5, [r0, #0]
 801bf38:	7b04      	ldrb	r4, [r0, #12]
 801bf3a:	fbb3 fef2 	udiv	lr, r3, r2
 801bf3e:	4608      	mov	r0, r1
 801bf40:	460b      	mov	r3, r1
 801bf42:	fbb3 fcf2 	udiv	ip, r3, r2
 801bf46:	fb02 331c 	mls	r3, r2, ip, r3
 801bf4a:	b29b      	uxth	r3, r3
 801bf4c:	fb0e f303 	mul.w	r3, lr, r3
 801bf50:	3101      	adds	r1, #1
 801bf52:	f855 c003 	ldr.w	ip, [r5, r3]
 801bf56:	4564      	cmp	r4, ip
 801bf58:	bf08      	it	eq
 801bf5a:	3001      	addeq	r0, #1
 801bf5c:	b28b      	uxth	r3, r1
 801bf5e:	bf08      	it	eq
 801bf60:	b280      	uxtheq	r0, r0
 801bf62:	4293      	cmp	r3, r2
 801bf64:	d3ed      	bcc.n	801bf42 <get_available_free_slots+0x16>
 801bf66:	bd30      	pop	{r4, r5, pc}
 801bf68:	4610      	mov	r0, r2
 801bf6a:	4770      	bx	lr

0801bf6c <uxr_seq_num_add>:
 801bf6c:	4408      	add	r0, r1
 801bf6e:	b280      	uxth	r0, r0
 801bf70:	4770      	bx	lr
 801bf72:	bf00      	nop

0801bf74 <uxr_seq_num_sub>:
 801bf74:	1a40      	subs	r0, r0, r1
 801bf76:	b280      	uxth	r0, r0
 801bf78:	4770      	bx	lr
 801bf7a:	bf00      	nop

0801bf7c <uxr_seq_num_cmp>:
 801bf7c:	4288      	cmp	r0, r1
 801bf7e:	d011      	beq.n	801bfa4 <uxr_seq_num_cmp+0x28>
 801bf80:	d309      	bcc.n	801bf96 <uxr_seq_num_cmp+0x1a>
 801bf82:	4288      	cmp	r0, r1
 801bf84:	d910      	bls.n	801bfa8 <uxr_seq_num_cmp+0x2c>
 801bf86:	1a40      	subs	r0, r0, r1
 801bf88:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801bf8c:	bfd4      	ite	le
 801bf8e:	2001      	movle	r0, #1
 801bf90:	f04f 30ff 	movgt.w	r0, #4294967295
 801bf94:	4770      	bx	lr
 801bf96:	1a0b      	subs	r3, r1, r0
 801bf98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bf9c:	daf1      	bge.n	801bf82 <uxr_seq_num_cmp+0x6>
 801bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 801bfa2:	4770      	bx	lr
 801bfa4:	2000      	movs	r0, #0
 801bfa6:	4770      	bx	lr
 801bfa8:	2001      	movs	r0, #1
 801bfaa:	4770      	bx	lr

0801bfac <get_serialized_size_geometry_msgs__msg__Point>:
 801bfac:	b1b8      	cbz	r0, 801bfde <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801bfae:	b538      	push	{r3, r4, r5, lr}
 801bfb0:	460d      	mov	r5, r1
 801bfb2:	4628      	mov	r0, r5
 801bfb4:	2108      	movs	r1, #8
 801bfb6:	f7f3 fb3f 	bl	800f638 <ucdr_alignment>
 801bfba:	f105 0308 	add.w	r3, r5, #8
 801bfbe:	181c      	adds	r4, r3, r0
 801bfc0:	2108      	movs	r1, #8
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	f7f3 fb38 	bl	800f638 <ucdr_alignment>
 801bfc8:	3008      	adds	r0, #8
 801bfca:	4404      	add	r4, r0
 801bfcc:	2108      	movs	r1, #8
 801bfce:	4620      	mov	r0, r4
 801bfd0:	f7f3 fb32 	bl	800f638 <ucdr_alignment>
 801bfd4:	f1c5 0508 	rsb	r5, r5, #8
 801bfd8:	4428      	add	r0, r5
 801bfda:	4420      	add	r0, r4
 801bfdc:	bd38      	pop	{r3, r4, r5, pc}
 801bfde:	4770      	bx	lr

0801bfe0 <_Point__cdr_deserialize>:
 801bfe0:	b538      	push	{r3, r4, r5, lr}
 801bfe2:	460c      	mov	r4, r1
 801bfe4:	b171      	cbz	r1, 801c004 <_Point__cdr_deserialize+0x24>
 801bfe6:	4605      	mov	r5, r0
 801bfe8:	f7f3 f93a 	bl	800f260 <ucdr_deserialize_double>
 801bfec:	f104 0108 	add.w	r1, r4, #8
 801bff0:	4628      	mov	r0, r5
 801bff2:	f7f3 f935 	bl	800f260 <ucdr_deserialize_double>
 801bff6:	f104 0110 	add.w	r1, r4, #16
 801bffa:	4628      	mov	r0, r5
 801bffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c000:	f7f3 b92e 	b.w	800f260 <ucdr_deserialize_double>
 801c004:	4608      	mov	r0, r1
 801c006:	bd38      	pop	{r3, r4, r5, pc}

0801c008 <_Point__cdr_serialize>:
 801c008:	b198      	cbz	r0, 801c032 <_Point__cdr_serialize+0x2a>
 801c00a:	b538      	push	{r3, r4, r5, lr}
 801c00c:	ed90 0b00 	vldr	d0, [r0]
 801c010:	460d      	mov	r5, r1
 801c012:	4604      	mov	r4, r0
 801c014:	4608      	mov	r0, r1
 801c016:	f7f2 ff81 	bl	800ef1c <ucdr_serialize_double>
 801c01a:	ed94 0b02 	vldr	d0, [r4, #8]
 801c01e:	4628      	mov	r0, r5
 801c020:	f7f2 ff7c 	bl	800ef1c <ucdr_serialize_double>
 801c024:	ed94 0b04 	vldr	d0, [r4, #16]
 801c028:	4628      	mov	r0, r5
 801c02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c02e:	f7f2 bf75 	b.w	800ef1c <ucdr_serialize_double>
 801c032:	4770      	bx	lr

0801c034 <_Point__get_serialized_size>:
 801c034:	b198      	cbz	r0, 801c05e <_Point__get_serialized_size+0x2a>
 801c036:	b510      	push	{r4, lr}
 801c038:	2108      	movs	r1, #8
 801c03a:	2000      	movs	r0, #0
 801c03c:	f7f3 fafc 	bl	800f638 <ucdr_alignment>
 801c040:	f100 0408 	add.w	r4, r0, #8
 801c044:	2108      	movs	r1, #8
 801c046:	4620      	mov	r0, r4
 801c048:	f7f3 faf6 	bl	800f638 <ucdr_alignment>
 801c04c:	3008      	adds	r0, #8
 801c04e:	4404      	add	r4, r0
 801c050:	2108      	movs	r1, #8
 801c052:	4620      	mov	r0, r4
 801c054:	f7f3 faf0 	bl	800f638 <ucdr_alignment>
 801c058:	3008      	adds	r0, #8
 801c05a:	4420      	add	r0, r4
 801c05c:	bd10      	pop	{r4, pc}
 801c05e:	4770      	bx	lr

0801c060 <_Point__max_serialized_size>:
 801c060:	b538      	push	{r3, r4, r5, lr}
 801c062:	2108      	movs	r1, #8
 801c064:	2000      	movs	r0, #0
 801c066:	f7f3 fae7 	bl	800f638 <ucdr_alignment>
 801c06a:	f100 0508 	add.w	r5, r0, #8
 801c06e:	2108      	movs	r1, #8
 801c070:	4628      	mov	r0, r5
 801c072:	f7f3 fae1 	bl	800f638 <ucdr_alignment>
 801c076:	f100 0408 	add.w	r4, r0, #8
 801c07a:	442c      	add	r4, r5
 801c07c:	2108      	movs	r1, #8
 801c07e:	4620      	mov	r0, r4
 801c080:	f7f3 fada 	bl	800f638 <ucdr_alignment>
 801c084:	3008      	adds	r0, #8
 801c086:	4420      	add	r0, r4
 801c088:	bd38      	pop	{r3, r4, r5, pc}
 801c08a:	bf00      	nop

0801c08c <max_serialized_size_geometry_msgs__msg__Point>:
 801c08c:	b570      	push	{r4, r5, r6, lr}
 801c08e:	2301      	movs	r3, #1
 801c090:	460c      	mov	r4, r1
 801c092:	7003      	strb	r3, [r0, #0]
 801c094:	2108      	movs	r1, #8
 801c096:	4620      	mov	r0, r4
 801c098:	f7f3 face 	bl	800f638 <ucdr_alignment>
 801c09c:	f104 0508 	add.w	r5, r4, #8
 801c0a0:	1946      	adds	r6, r0, r5
 801c0a2:	2108      	movs	r1, #8
 801c0a4:	4630      	mov	r0, r6
 801c0a6:	f7f3 fac7 	bl	800f638 <ucdr_alignment>
 801c0aa:	f100 0508 	add.w	r5, r0, #8
 801c0ae:	4435      	add	r5, r6
 801c0b0:	2108      	movs	r1, #8
 801c0b2:	4628      	mov	r0, r5
 801c0b4:	f7f3 fac0 	bl	800f638 <ucdr_alignment>
 801c0b8:	f1c4 0408 	rsb	r4, r4, #8
 801c0bc:	4420      	add	r0, r4
 801c0be:	4428      	add	r0, r5
 801c0c0:	bd70      	pop	{r4, r5, r6, pc}
 801c0c2:	bf00      	nop

0801c0c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801c0c4:	4800      	ldr	r0, [pc, #0]	@ (801c0c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801c0c6:	4770      	bx	lr
 801c0c8:	20002670 	.word	0x20002670

0801c0cc <__assert_func>:
 801c0cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c0ce:	4614      	mov	r4, r2
 801c0d0:	461a      	mov	r2, r3
 801c0d2:	4b09      	ldr	r3, [pc, #36]	@ (801c0f8 <__assert_func+0x2c>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	4605      	mov	r5, r0
 801c0d8:	68d8      	ldr	r0, [r3, #12]
 801c0da:	b954      	cbnz	r4, 801c0f2 <__assert_func+0x26>
 801c0dc:	4b07      	ldr	r3, [pc, #28]	@ (801c0fc <__assert_func+0x30>)
 801c0de:	461c      	mov	r4, r3
 801c0e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c0e4:	9100      	str	r1, [sp, #0]
 801c0e6:	462b      	mov	r3, r5
 801c0e8:	4905      	ldr	r1, [pc, #20]	@ (801c100 <__assert_func+0x34>)
 801c0ea:	f000 ff57 	bl	801cf9c <fiprintf>
 801c0ee:	f001 faca 	bl	801d686 <abort>
 801c0f2:	4b04      	ldr	r3, [pc, #16]	@ (801c104 <__assert_func+0x38>)
 801c0f4:	e7f4      	b.n	801c0e0 <__assert_func+0x14>
 801c0f6:	bf00      	nop
 801c0f8:	200026b0 	.word	0x200026b0
 801c0fc:	080244a5 	.word	0x080244a5
 801c100:	08024477 	.word	0x08024477
 801c104:	0802446a 	.word	0x0802446a

0801c108 <calloc>:
 801c108:	4b02      	ldr	r3, [pc, #8]	@ (801c114 <calloc+0xc>)
 801c10a:	460a      	mov	r2, r1
 801c10c:	4601      	mov	r1, r0
 801c10e:	6818      	ldr	r0, [r3, #0]
 801c110:	f000 b802 	b.w	801c118 <_calloc_r>
 801c114:	200026b0 	.word	0x200026b0

0801c118 <_calloc_r>:
 801c118:	b570      	push	{r4, r5, r6, lr}
 801c11a:	fba1 5402 	umull	r5, r4, r1, r2
 801c11e:	b93c      	cbnz	r4, 801c130 <_calloc_r+0x18>
 801c120:	4629      	mov	r1, r5
 801c122:	f000 f899 	bl	801c258 <_malloc_r>
 801c126:	4606      	mov	r6, r0
 801c128:	b928      	cbnz	r0, 801c136 <_calloc_r+0x1e>
 801c12a:	2600      	movs	r6, #0
 801c12c:	4630      	mov	r0, r6
 801c12e:	bd70      	pop	{r4, r5, r6, pc}
 801c130:	220c      	movs	r2, #12
 801c132:	6002      	str	r2, [r0, #0]
 801c134:	e7f9      	b.n	801c12a <_calloc_r+0x12>
 801c136:	462a      	mov	r2, r5
 801c138:	4621      	mov	r1, r4
 801c13a:	f001 f9b7 	bl	801d4ac <memset>
 801c13e:	e7f5      	b.n	801c12c <_calloc_r+0x14>

0801c140 <exit>:
 801c140:	b508      	push	{r3, lr}
 801c142:	4b06      	ldr	r3, [pc, #24]	@ (801c15c <exit+0x1c>)
 801c144:	4604      	mov	r4, r0
 801c146:	b113      	cbz	r3, 801c14e <exit+0xe>
 801c148:	2100      	movs	r1, #0
 801c14a:	f3af 8000 	nop.w
 801c14e:	4b04      	ldr	r3, [pc, #16]	@ (801c160 <exit+0x20>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	b103      	cbz	r3, 801c156 <exit+0x16>
 801c154:	4798      	blx	r3
 801c156:	4620      	mov	r0, r4
 801c158:	f7e8 ff8e 	bl	8005078 <_exit>
 801c15c:	00000000 	.word	0x00000000
 801c160:	20018350 	.word	0x20018350

0801c164 <getenv>:
 801c164:	b507      	push	{r0, r1, r2, lr}
 801c166:	4b04      	ldr	r3, [pc, #16]	@ (801c178 <getenv+0x14>)
 801c168:	4601      	mov	r1, r0
 801c16a:	aa01      	add	r2, sp, #4
 801c16c:	6818      	ldr	r0, [r3, #0]
 801c16e:	f000 f805 	bl	801c17c <_findenv_r>
 801c172:	b003      	add	sp, #12
 801c174:	f85d fb04 	ldr.w	pc, [sp], #4
 801c178:	200026b0 	.word	0x200026b0

0801c17c <_findenv_r>:
 801c17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c180:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c1f0 <_findenv_r+0x74>
 801c184:	4606      	mov	r6, r0
 801c186:	4689      	mov	r9, r1
 801c188:	4617      	mov	r7, r2
 801c18a:	f002 f8d1 	bl	801e330 <__env_lock>
 801c18e:	f8da 4000 	ldr.w	r4, [sl]
 801c192:	b134      	cbz	r4, 801c1a2 <_findenv_r+0x26>
 801c194:	464b      	mov	r3, r9
 801c196:	4698      	mov	r8, r3
 801c198:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c19c:	b13a      	cbz	r2, 801c1ae <_findenv_r+0x32>
 801c19e:	2a3d      	cmp	r2, #61	@ 0x3d
 801c1a0:	d1f9      	bne.n	801c196 <_findenv_r+0x1a>
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	f002 f8ca 	bl	801e33c <__env_unlock>
 801c1a8:	2000      	movs	r0, #0
 801c1aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ae:	eba8 0809 	sub.w	r8, r8, r9
 801c1b2:	46a3      	mov	fp, r4
 801c1b4:	f854 0b04 	ldr.w	r0, [r4], #4
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	d0f2      	beq.n	801c1a2 <_findenv_r+0x26>
 801c1bc:	4642      	mov	r2, r8
 801c1be:	4649      	mov	r1, r9
 801c1c0:	f001 f989 	bl	801d4d6 <strncmp>
 801c1c4:	2800      	cmp	r0, #0
 801c1c6:	d1f4      	bne.n	801c1b2 <_findenv_r+0x36>
 801c1c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c1cc:	eb03 0508 	add.w	r5, r3, r8
 801c1d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c1d4:	2b3d      	cmp	r3, #61	@ 0x3d
 801c1d6:	d1ec      	bne.n	801c1b2 <_findenv_r+0x36>
 801c1d8:	f8da 3000 	ldr.w	r3, [sl]
 801c1dc:	ebab 0303 	sub.w	r3, fp, r3
 801c1e0:	109b      	asrs	r3, r3, #2
 801c1e2:	4630      	mov	r0, r6
 801c1e4:	603b      	str	r3, [r7, #0]
 801c1e6:	f002 f8a9 	bl	801e33c <__env_unlock>
 801c1ea:	1c68      	adds	r0, r5, #1
 801c1ec:	e7dd      	b.n	801c1aa <_findenv_r+0x2e>
 801c1ee:	bf00      	nop
 801c1f0:	20002384 	.word	0x20002384

0801c1f4 <malloc>:
 801c1f4:	4b02      	ldr	r3, [pc, #8]	@ (801c200 <malloc+0xc>)
 801c1f6:	4601      	mov	r1, r0
 801c1f8:	6818      	ldr	r0, [r3, #0]
 801c1fa:	f000 b82d 	b.w	801c258 <_malloc_r>
 801c1fe:	bf00      	nop
 801c200:	200026b0 	.word	0x200026b0

0801c204 <free>:
 801c204:	4b02      	ldr	r3, [pc, #8]	@ (801c210 <free+0xc>)
 801c206:	4601      	mov	r1, r0
 801c208:	6818      	ldr	r0, [r3, #0]
 801c20a:	f002 b89d 	b.w	801e348 <_free_r>
 801c20e:	bf00      	nop
 801c210:	200026b0 	.word	0x200026b0

0801c214 <sbrk_aligned>:
 801c214:	b570      	push	{r4, r5, r6, lr}
 801c216:	4e0f      	ldr	r6, [pc, #60]	@ (801c254 <sbrk_aligned+0x40>)
 801c218:	460c      	mov	r4, r1
 801c21a:	6831      	ldr	r1, [r6, #0]
 801c21c:	4605      	mov	r5, r0
 801c21e:	b911      	cbnz	r1, 801c226 <sbrk_aligned+0x12>
 801c220:	f001 f9cc 	bl	801d5bc <_sbrk_r>
 801c224:	6030      	str	r0, [r6, #0]
 801c226:	4621      	mov	r1, r4
 801c228:	4628      	mov	r0, r5
 801c22a:	f001 f9c7 	bl	801d5bc <_sbrk_r>
 801c22e:	1c43      	adds	r3, r0, #1
 801c230:	d103      	bne.n	801c23a <sbrk_aligned+0x26>
 801c232:	f04f 34ff 	mov.w	r4, #4294967295
 801c236:	4620      	mov	r0, r4
 801c238:	bd70      	pop	{r4, r5, r6, pc}
 801c23a:	1cc4      	adds	r4, r0, #3
 801c23c:	f024 0403 	bic.w	r4, r4, #3
 801c240:	42a0      	cmp	r0, r4
 801c242:	d0f8      	beq.n	801c236 <sbrk_aligned+0x22>
 801c244:	1a21      	subs	r1, r4, r0
 801c246:	4628      	mov	r0, r5
 801c248:	f001 f9b8 	bl	801d5bc <_sbrk_r>
 801c24c:	3001      	adds	r0, #1
 801c24e:	d1f2      	bne.n	801c236 <sbrk_aligned+0x22>
 801c250:	e7ef      	b.n	801c232 <sbrk_aligned+0x1e>
 801c252:	bf00      	nop
 801c254:	20018210 	.word	0x20018210

0801c258 <_malloc_r>:
 801c258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c25c:	1ccd      	adds	r5, r1, #3
 801c25e:	f025 0503 	bic.w	r5, r5, #3
 801c262:	3508      	adds	r5, #8
 801c264:	2d0c      	cmp	r5, #12
 801c266:	bf38      	it	cc
 801c268:	250c      	movcc	r5, #12
 801c26a:	2d00      	cmp	r5, #0
 801c26c:	4606      	mov	r6, r0
 801c26e:	db01      	blt.n	801c274 <_malloc_r+0x1c>
 801c270:	42a9      	cmp	r1, r5
 801c272:	d904      	bls.n	801c27e <_malloc_r+0x26>
 801c274:	230c      	movs	r3, #12
 801c276:	6033      	str	r3, [r6, #0]
 801c278:	2000      	movs	r0, #0
 801c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c354 <_malloc_r+0xfc>
 801c282:	f000 f869 	bl	801c358 <__malloc_lock>
 801c286:	f8d8 3000 	ldr.w	r3, [r8]
 801c28a:	461c      	mov	r4, r3
 801c28c:	bb44      	cbnz	r4, 801c2e0 <_malloc_r+0x88>
 801c28e:	4629      	mov	r1, r5
 801c290:	4630      	mov	r0, r6
 801c292:	f7ff ffbf 	bl	801c214 <sbrk_aligned>
 801c296:	1c43      	adds	r3, r0, #1
 801c298:	4604      	mov	r4, r0
 801c29a:	d158      	bne.n	801c34e <_malloc_r+0xf6>
 801c29c:	f8d8 4000 	ldr.w	r4, [r8]
 801c2a0:	4627      	mov	r7, r4
 801c2a2:	2f00      	cmp	r7, #0
 801c2a4:	d143      	bne.n	801c32e <_malloc_r+0xd6>
 801c2a6:	2c00      	cmp	r4, #0
 801c2a8:	d04b      	beq.n	801c342 <_malloc_r+0xea>
 801c2aa:	6823      	ldr	r3, [r4, #0]
 801c2ac:	4639      	mov	r1, r7
 801c2ae:	4630      	mov	r0, r6
 801c2b0:	eb04 0903 	add.w	r9, r4, r3
 801c2b4:	f001 f982 	bl	801d5bc <_sbrk_r>
 801c2b8:	4581      	cmp	r9, r0
 801c2ba:	d142      	bne.n	801c342 <_malloc_r+0xea>
 801c2bc:	6821      	ldr	r1, [r4, #0]
 801c2be:	1a6d      	subs	r5, r5, r1
 801c2c0:	4629      	mov	r1, r5
 801c2c2:	4630      	mov	r0, r6
 801c2c4:	f7ff ffa6 	bl	801c214 <sbrk_aligned>
 801c2c8:	3001      	adds	r0, #1
 801c2ca:	d03a      	beq.n	801c342 <_malloc_r+0xea>
 801c2cc:	6823      	ldr	r3, [r4, #0]
 801c2ce:	442b      	add	r3, r5
 801c2d0:	6023      	str	r3, [r4, #0]
 801c2d2:	f8d8 3000 	ldr.w	r3, [r8]
 801c2d6:	685a      	ldr	r2, [r3, #4]
 801c2d8:	bb62      	cbnz	r2, 801c334 <_malloc_r+0xdc>
 801c2da:	f8c8 7000 	str.w	r7, [r8]
 801c2de:	e00f      	b.n	801c300 <_malloc_r+0xa8>
 801c2e0:	6822      	ldr	r2, [r4, #0]
 801c2e2:	1b52      	subs	r2, r2, r5
 801c2e4:	d420      	bmi.n	801c328 <_malloc_r+0xd0>
 801c2e6:	2a0b      	cmp	r2, #11
 801c2e8:	d917      	bls.n	801c31a <_malloc_r+0xc2>
 801c2ea:	1961      	adds	r1, r4, r5
 801c2ec:	42a3      	cmp	r3, r4
 801c2ee:	6025      	str	r5, [r4, #0]
 801c2f0:	bf18      	it	ne
 801c2f2:	6059      	strne	r1, [r3, #4]
 801c2f4:	6863      	ldr	r3, [r4, #4]
 801c2f6:	bf08      	it	eq
 801c2f8:	f8c8 1000 	streq.w	r1, [r8]
 801c2fc:	5162      	str	r2, [r4, r5]
 801c2fe:	604b      	str	r3, [r1, #4]
 801c300:	4630      	mov	r0, r6
 801c302:	f000 f82f 	bl	801c364 <__malloc_unlock>
 801c306:	f104 000b 	add.w	r0, r4, #11
 801c30a:	1d23      	adds	r3, r4, #4
 801c30c:	f020 0007 	bic.w	r0, r0, #7
 801c310:	1ac2      	subs	r2, r0, r3
 801c312:	bf1c      	itt	ne
 801c314:	1a1b      	subne	r3, r3, r0
 801c316:	50a3      	strne	r3, [r4, r2]
 801c318:	e7af      	b.n	801c27a <_malloc_r+0x22>
 801c31a:	6862      	ldr	r2, [r4, #4]
 801c31c:	42a3      	cmp	r3, r4
 801c31e:	bf0c      	ite	eq
 801c320:	f8c8 2000 	streq.w	r2, [r8]
 801c324:	605a      	strne	r2, [r3, #4]
 801c326:	e7eb      	b.n	801c300 <_malloc_r+0xa8>
 801c328:	4623      	mov	r3, r4
 801c32a:	6864      	ldr	r4, [r4, #4]
 801c32c:	e7ae      	b.n	801c28c <_malloc_r+0x34>
 801c32e:	463c      	mov	r4, r7
 801c330:	687f      	ldr	r7, [r7, #4]
 801c332:	e7b6      	b.n	801c2a2 <_malloc_r+0x4a>
 801c334:	461a      	mov	r2, r3
 801c336:	685b      	ldr	r3, [r3, #4]
 801c338:	42a3      	cmp	r3, r4
 801c33a:	d1fb      	bne.n	801c334 <_malloc_r+0xdc>
 801c33c:	2300      	movs	r3, #0
 801c33e:	6053      	str	r3, [r2, #4]
 801c340:	e7de      	b.n	801c300 <_malloc_r+0xa8>
 801c342:	230c      	movs	r3, #12
 801c344:	6033      	str	r3, [r6, #0]
 801c346:	4630      	mov	r0, r6
 801c348:	f000 f80c 	bl	801c364 <__malloc_unlock>
 801c34c:	e794      	b.n	801c278 <_malloc_r+0x20>
 801c34e:	6005      	str	r5, [r0, #0]
 801c350:	e7d6      	b.n	801c300 <_malloc_r+0xa8>
 801c352:	bf00      	nop
 801c354:	20018214 	.word	0x20018214

0801c358 <__malloc_lock>:
 801c358:	4801      	ldr	r0, [pc, #4]	@ (801c360 <__malloc_lock+0x8>)
 801c35a:	f001 b97c 	b.w	801d656 <__retarget_lock_acquire_recursive>
 801c35e:	bf00      	nop
 801c360:	20018359 	.word	0x20018359

0801c364 <__malloc_unlock>:
 801c364:	4801      	ldr	r0, [pc, #4]	@ (801c36c <__malloc_unlock+0x8>)
 801c366:	f001 b977 	b.w	801d658 <__retarget_lock_release_recursive>
 801c36a:	bf00      	nop
 801c36c:	20018359 	.word	0x20018359

0801c370 <srand>:
 801c370:	b538      	push	{r3, r4, r5, lr}
 801c372:	4b10      	ldr	r3, [pc, #64]	@ (801c3b4 <srand+0x44>)
 801c374:	681d      	ldr	r5, [r3, #0]
 801c376:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c378:	4604      	mov	r4, r0
 801c37a:	b9b3      	cbnz	r3, 801c3aa <srand+0x3a>
 801c37c:	2018      	movs	r0, #24
 801c37e:	f7ff ff39 	bl	801c1f4 <malloc>
 801c382:	4602      	mov	r2, r0
 801c384:	6328      	str	r0, [r5, #48]	@ 0x30
 801c386:	b920      	cbnz	r0, 801c392 <srand+0x22>
 801c388:	4b0b      	ldr	r3, [pc, #44]	@ (801c3b8 <srand+0x48>)
 801c38a:	480c      	ldr	r0, [pc, #48]	@ (801c3bc <srand+0x4c>)
 801c38c:	2146      	movs	r1, #70	@ 0x46
 801c38e:	f7ff fe9d 	bl	801c0cc <__assert_func>
 801c392:	490b      	ldr	r1, [pc, #44]	@ (801c3c0 <srand+0x50>)
 801c394:	4b0b      	ldr	r3, [pc, #44]	@ (801c3c4 <srand+0x54>)
 801c396:	e9c0 1300 	strd	r1, r3, [r0]
 801c39a:	4b0b      	ldr	r3, [pc, #44]	@ (801c3c8 <srand+0x58>)
 801c39c:	6083      	str	r3, [r0, #8]
 801c39e:	230b      	movs	r3, #11
 801c3a0:	8183      	strh	r3, [r0, #12]
 801c3a2:	2100      	movs	r1, #0
 801c3a4:	2001      	movs	r0, #1
 801c3a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c3aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	611c      	str	r4, [r3, #16]
 801c3b0:	615a      	str	r2, [r3, #20]
 801c3b2:	bd38      	pop	{r3, r4, r5, pc}
 801c3b4:	200026b0 	.word	0x200026b0
 801c3b8:	080244a6 	.word	0x080244a6
 801c3bc:	080244bd 	.word	0x080244bd
 801c3c0:	abcd330e 	.word	0xabcd330e
 801c3c4:	e66d1234 	.word	0xe66d1234
 801c3c8:	0005deec 	.word	0x0005deec

0801c3cc <rand>:
 801c3cc:	4b16      	ldr	r3, [pc, #88]	@ (801c428 <rand+0x5c>)
 801c3ce:	b510      	push	{r4, lr}
 801c3d0:	681c      	ldr	r4, [r3, #0]
 801c3d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c3d4:	b9b3      	cbnz	r3, 801c404 <rand+0x38>
 801c3d6:	2018      	movs	r0, #24
 801c3d8:	f7ff ff0c 	bl	801c1f4 <malloc>
 801c3dc:	4602      	mov	r2, r0
 801c3de:	6320      	str	r0, [r4, #48]	@ 0x30
 801c3e0:	b920      	cbnz	r0, 801c3ec <rand+0x20>
 801c3e2:	4b12      	ldr	r3, [pc, #72]	@ (801c42c <rand+0x60>)
 801c3e4:	4812      	ldr	r0, [pc, #72]	@ (801c430 <rand+0x64>)
 801c3e6:	2152      	movs	r1, #82	@ 0x52
 801c3e8:	f7ff fe70 	bl	801c0cc <__assert_func>
 801c3ec:	4911      	ldr	r1, [pc, #68]	@ (801c434 <rand+0x68>)
 801c3ee:	4b12      	ldr	r3, [pc, #72]	@ (801c438 <rand+0x6c>)
 801c3f0:	e9c0 1300 	strd	r1, r3, [r0]
 801c3f4:	4b11      	ldr	r3, [pc, #68]	@ (801c43c <rand+0x70>)
 801c3f6:	6083      	str	r3, [r0, #8]
 801c3f8:	230b      	movs	r3, #11
 801c3fa:	8183      	strh	r3, [r0, #12]
 801c3fc:	2100      	movs	r1, #0
 801c3fe:	2001      	movs	r0, #1
 801c400:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c404:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c406:	480e      	ldr	r0, [pc, #56]	@ (801c440 <rand+0x74>)
 801c408:	690b      	ldr	r3, [r1, #16]
 801c40a:	694c      	ldr	r4, [r1, #20]
 801c40c:	4a0d      	ldr	r2, [pc, #52]	@ (801c444 <rand+0x78>)
 801c40e:	4358      	muls	r0, r3
 801c410:	fb02 0004 	mla	r0, r2, r4, r0
 801c414:	fba3 3202 	umull	r3, r2, r3, r2
 801c418:	3301      	adds	r3, #1
 801c41a:	eb40 0002 	adc.w	r0, r0, r2
 801c41e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c422:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c426:	bd10      	pop	{r4, pc}
 801c428:	200026b0 	.word	0x200026b0
 801c42c:	080244a6 	.word	0x080244a6
 801c430:	080244bd 	.word	0x080244bd
 801c434:	abcd330e 	.word	0xabcd330e
 801c438:	e66d1234 	.word	0xe66d1234
 801c43c:	0005deec 	.word	0x0005deec
 801c440:	5851f42d 	.word	0x5851f42d
 801c444:	4c957f2d 	.word	0x4c957f2d

0801c448 <realloc>:
 801c448:	4b02      	ldr	r3, [pc, #8]	@ (801c454 <realloc+0xc>)
 801c44a:	460a      	mov	r2, r1
 801c44c:	4601      	mov	r1, r0
 801c44e:	6818      	ldr	r0, [r3, #0]
 801c450:	f000 b802 	b.w	801c458 <_realloc_r>
 801c454:	200026b0 	.word	0x200026b0

0801c458 <_realloc_r>:
 801c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c45c:	4680      	mov	r8, r0
 801c45e:	4615      	mov	r5, r2
 801c460:	460c      	mov	r4, r1
 801c462:	b921      	cbnz	r1, 801c46e <_realloc_r+0x16>
 801c464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c468:	4611      	mov	r1, r2
 801c46a:	f7ff bef5 	b.w	801c258 <_malloc_r>
 801c46e:	b92a      	cbnz	r2, 801c47c <_realloc_r+0x24>
 801c470:	f001 ff6a 	bl	801e348 <_free_r>
 801c474:	2400      	movs	r4, #0
 801c476:	4620      	mov	r0, r4
 801c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c47c:	f002 fb30 	bl	801eae0 <_malloc_usable_size_r>
 801c480:	4285      	cmp	r5, r0
 801c482:	4606      	mov	r6, r0
 801c484:	d802      	bhi.n	801c48c <_realloc_r+0x34>
 801c486:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c48a:	d8f4      	bhi.n	801c476 <_realloc_r+0x1e>
 801c48c:	4629      	mov	r1, r5
 801c48e:	4640      	mov	r0, r8
 801c490:	f7ff fee2 	bl	801c258 <_malloc_r>
 801c494:	4607      	mov	r7, r0
 801c496:	2800      	cmp	r0, #0
 801c498:	d0ec      	beq.n	801c474 <_realloc_r+0x1c>
 801c49a:	42b5      	cmp	r5, r6
 801c49c:	462a      	mov	r2, r5
 801c49e:	4621      	mov	r1, r4
 801c4a0:	bf28      	it	cs
 801c4a2:	4632      	movcs	r2, r6
 801c4a4:	f001 f8e1 	bl	801d66a <memcpy>
 801c4a8:	4621      	mov	r1, r4
 801c4aa:	4640      	mov	r0, r8
 801c4ac:	f001 ff4c 	bl	801e348 <_free_r>
 801c4b0:	463c      	mov	r4, r7
 801c4b2:	e7e0      	b.n	801c476 <_realloc_r+0x1e>

0801c4b4 <_strtoul_l.constprop.0>:
 801c4b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c4b8:	4e34      	ldr	r6, [pc, #208]	@ (801c58c <_strtoul_l.constprop.0+0xd8>)
 801c4ba:	4686      	mov	lr, r0
 801c4bc:	460d      	mov	r5, r1
 801c4be:	4628      	mov	r0, r5
 801c4c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c4c4:	5d37      	ldrb	r7, [r6, r4]
 801c4c6:	f017 0708 	ands.w	r7, r7, #8
 801c4ca:	d1f8      	bne.n	801c4be <_strtoul_l.constprop.0+0xa>
 801c4cc:	2c2d      	cmp	r4, #45	@ 0x2d
 801c4ce:	d12f      	bne.n	801c530 <_strtoul_l.constprop.0+0x7c>
 801c4d0:	782c      	ldrb	r4, [r5, #0]
 801c4d2:	2701      	movs	r7, #1
 801c4d4:	1c85      	adds	r5, r0, #2
 801c4d6:	f033 0010 	bics.w	r0, r3, #16
 801c4da:	d109      	bne.n	801c4f0 <_strtoul_l.constprop.0+0x3c>
 801c4dc:	2c30      	cmp	r4, #48	@ 0x30
 801c4de:	d12c      	bne.n	801c53a <_strtoul_l.constprop.0+0x86>
 801c4e0:	7828      	ldrb	r0, [r5, #0]
 801c4e2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c4e6:	2858      	cmp	r0, #88	@ 0x58
 801c4e8:	d127      	bne.n	801c53a <_strtoul_l.constprop.0+0x86>
 801c4ea:	786c      	ldrb	r4, [r5, #1]
 801c4ec:	2310      	movs	r3, #16
 801c4ee:	3502      	adds	r5, #2
 801c4f0:	f04f 38ff 	mov.w	r8, #4294967295
 801c4f4:	2600      	movs	r6, #0
 801c4f6:	fbb8 f8f3 	udiv	r8, r8, r3
 801c4fa:	fb03 f908 	mul.w	r9, r3, r8
 801c4fe:	ea6f 0909 	mvn.w	r9, r9
 801c502:	4630      	mov	r0, r6
 801c504:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c508:	f1bc 0f09 	cmp.w	ip, #9
 801c50c:	d81c      	bhi.n	801c548 <_strtoul_l.constprop.0+0x94>
 801c50e:	4664      	mov	r4, ip
 801c510:	42a3      	cmp	r3, r4
 801c512:	dd2a      	ble.n	801c56a <_strtoul_l.constprop.0+0xb6>
 801c514:	f1b6 3fff 	cmp.w	r6, #4294967295
 801c518:	d007      	beq.n	801c52a <_strtoul_l.constprop.0+0x76>
 801c51a:	4580      	cmp	r8, r0
 801c51c:	d322      	bcc.n	801c564 <_strtoul_l.constprop.0+0xb0>
 801c51e:	d101      	bne.n	801c524 <_strtoul_l.constprop.0+0x70>
 801c520:	45a1      	cmp	r9, r4
 801c522:	db1f      	blt.n	801c564 <_strtoul_l.constprop.0+0xb0>
 801c524:	fb00 4003 	mla	r0, r0, r3, r4
 801c528:	2601      	movs	r6, #1
 801c52a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c52e:	e7e9      	b.n	801c504 <_strtoul_l.constprop.0+0x50>
 801c530:	2c2b      	cmp	r4, #43	@ 0x2b
 801c532:	bf04      	itt	eq
 801c534:	782c      	ldrbeq	r4, [r5, #0]
 801c536:	1c85      	addeq	r5, r0, #2
 801c538:	e7cd      	b.n	801c4d6 <_strtoul_l.constprop.0+0x22>
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d1d8      	bne.n	801c4f0 <_strtoul_l.constprop.0+0x3c>
 801c53e:	2c30      	cmp	r4, #48	@ 0x30
 801c540:	bf0c      	ite	eq
 801c542:	2308      	moveq	r3, #8
 801c544:	230a      	movne	r3, #10
 801c546:	e7d3      	b.n	801c4f0 <_strtoul_l.constprop.0+0x3c>
 801c548:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c54c:	f1bc 0f19 	cmp.w	ip, #25
 801c550:	d801      	bhi.n	801c556 <_strtoul_l.constprop.0+0xa2>
 801c552:	3c37      	subs	r4, #55	@ 0x37
 801c554:	e7dc      	b.n	801c510 <_strtoul_l.constprop.0+0x5c>
 801c556:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c55a:	f1bc 0f19 	cmp.w	ip, #25
 801c55e:	d804      	bhi.n	801c56a <_strtoul_l.constprop.0+0xb6>
 801c560:	3c57      	subs	r4, #87	@ 0x57
 801c562:	e7d5      	b.n	801c510 <_strtoul_l.constprop.0+0x5c>
 801c564:	f04f 36ff 	mov.w	r6, #4294967295
 801c568:	e7df      	b.n	801c52a <_strtoul_l.constprop.0+0x76>
 801c56a:	1c73      	adds	r3, r6, #1
 801c56c:	d106      	bne.n	801c57c <_strtoul_l.constprop.0+0xc8>
 801c56e:	2322      	movs	r3, #34	@ 0x22
 801c570:	f8ce 3000 	str.w	r3, [lr]
 801c574:	4630      	mov	r0, r6
 801c576:	b932      	cbnz	r2, 801c586 <_strtoul_l.constprop.0+0xd2>
 801c578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c57c:	b107      	cbz	r7, 801c580 <_strtoul_l.constprop.0+0xcc>
 801c57e:	4240      	negs	r0, r0
 801c580:	2a00      	cmp	r2, #0
 801c582:	d0f9      	beq.n	801c578 <_strtoul_l.constprop.0+0xc4>
 801c584:	b106      	cbz	r6, 801c588 <_strtoul_l.constprop.0+0xd4>
 801c586:	1e69      	subs	r1, r5, #1
 801c588:	6011      	str	r1, [r2, #0]
 801c58a:	e7f5      	b.n	801c578 <_strtoul_l.constprop.0+0xc4>
 801c58c:	08024516 	.word	0x08024516

0801c590 <strtoul>:
 801c590:	4613      	mov	r3, r2
 801c592:	460a      	mov	r2, r1
 801c594:	4601      	mov	r1, r0
 801c596:	4802      	ldr	r0, [pc, #8]	@ (801c5a0 <strtoul+0x10>)
 801c598:	6800      	ldr	r0, [r0, #0]
 801c59a:	f7ff bf8b 	b.w	801c4b4 <_strtoul_l.constprop.0>
 801c59e:	bf00      	nop
 801c5a0:	200026b0 	.word	0x200026b0

0801c5a4 <__cvt>:
 801c5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c5a8:	ec57 6b10 	vmov	r6, r7, d0
 801c5ac:	2f00      	cmp	r7, #0
 801c5ae:	460c      	mov	r4, r1
 801c5b0:	4619      	mov	r1, r3
 801c5b2:	463b      	mov	r3, r7
 801c5b4:	bfbb      	ittet	lt
 801c5b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c5ba:	461f      	movlt	r7, r3
 801c5bc:	2300      	movge	r3, #0
 801c5be:	232d      	movlt	r3, #45	@ 0x2d
 801c5c0:	700b      	strb	r3, [r1, #0]
 801c5c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c5c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c5c8:	4691      	mov	r9, r2
 801c5ca:	f023 0820 	bic.w	r8, r3, #32
 801c5ce:	bfbc      	itt	lt
 801c5d0:	4632      	movlt	r2, r6
 801c5d2:	4616      	movlt	r6, r2
 801c5d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c5d8:	d005      	beq.n	801c5e6 <__cvt+0x42>
 801c5da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c5de:	d100      	bne.n	801c5e2 <__cvt+0x3e>
 801c5e0:	3401      	adds	r4, #1
 801c5e2:	2102      	movs	r1, #2
 801c5e4:	e000      	b.n	801c5e8 <__cvt+0x44>
 801c5e6:	2103      	movs	r1, #3
 801c5e8:	ab03      	add	r3, sp, #12
 801c5ea:	9301      	str	r3, [sp, #4]
 801c5ec:	ab02      	add	r3, sp, #8
 801c5ee:	9300      	str	r3, [sp, #0]
 801c5f0:	ec47 6b10 	vmov	d0, r6, r7
 801c5f4:	4653      	mov	r3, sl
 801c5f6:	4622      	mov	r2, r4
 801c5f8:	f001 f8d6 	bl	801d7a8 <_dtoa_r>
 801c5fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c600:	4605      	mov	r5, r0
 801c602:	d119      	bne.n	801c638 <__cvt+0x94>
 801c604:	f019 0f01 	tst.w	r9, #1
 801c608:	d00e      	beq.n	801c628 <__cvt+0x84>
 801c60a:	eb00 0904 	add.w	r9, r0, r4
 801c60e:	2200      	movs	r2, #0
 801c610:	2300      	movs	r3, #0
 801c612:	4630      	mov	r0, r6
 801c614:	4639      	mov	r1, r7
 801c616:	f7e4 fa67 	bl	8000ae8 <__aeabi_dcmpeq>
 801c61a:	b108      	cbz	r0, 801c620 <__cvt+0x7c>
 801c61c:	f8cd 900c 	str.w	r9, [sp, #12]
 801c620:	2230      	movs	r2, #48	@ 0x30
 801c622:	9b03      	ldr	r3, [sp, #12]
 801c624:	454b      	cmp	r3, r9
 801c626:	d31e      	bcc.n	801c666 <__cvt+0xc2>
 801c628:	9b03      	ldr	r3, [sp, #12]
 801c62a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c62c:	1b5b      	subs	r3, r3, r5
 801c62e:	4628      	mov	r0, r5
 801c630:	6013      	str	r3, [r2, #0]
 801c632:	b004      	add	sp, #16
 801c634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c63c:	eb00 0904 	add.w	r9, r0, r4
 801c640:	d1e5      	bne.n	801c60e <__cvt+0x6a>
 801c642:	7803      	ldrb	r3, [r0, #0]
 801c644:	2b30      	cmp	r3, #48	@ 0x30
 801c646:	d10a      	bne.n	801c65e <__cvt+0xba>
 801c648:	2200      	movs	r2, #0
 801c64a:	2300      	movs	r3, #0
 801c64c:	4630      	mov	r0, r6
 801c64e:	4639      	mov	r1, r7
 801c650:	f7e4 fa4a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c654:	b918      	cbnz	r0, 801c65e <__cvt+0xba>
 801c656:	f1c4 0401 	rsb	r4, r4, #1
 801c65a:	f8ca 4000 	str.w	r4, [sl]
 801c65e:	f8da 3000 	ldr.w	r3, [sl]
 801c662:	4499      	add	r9, r3
 801c664:	e7d3      	b.n	801c60e <__cvt+0x6a>
 801c666:	1c59      	adds	r1, r3, #1
 801c668:	9103      	str	r1, [sp, #12]
 801c66a:	701a      	strb	r2, [r3, #0]
 801c66c:	e7d9      	b.n	801c622 <__cvt+0x7e>

0801c66e <__exponent>:
 801c66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c670:	2900      	cmp	r1, #0
 801c672:	bfba      	itte	lt
 801c674:	4249      	neglt	r1, r1
 801c676:	232d      	movlt	r3, #45	@ 0x2d
 801c678:	232b      	movge	r3, #43	@ 0x2b
 801c67a:	2909      	cmp	r1, #9
 801c67c:	7002      	strb	r2, [r0, #0]
 801c67e:	7043      	strb	r3, [r0, #1]
 801c680:	dd29      	ble.n	801c6d6 <__exponent+0x68>
 801c682:	f10d 0307 	add.w	r3, sp, #7
 801c686:	461d      	mov	r5, r3
 801c688:	270a      	movs	r7, #10
 801c68a:	461a      	mov	r2, r3
 801c68c:	fbb1 f6f7 	udiv	r6, r1, r7
 801c690:	fb07 1416 	mls	r4, r7, r6, r1
 801c694:	3430      	adds	r4, #48	@ 0x30
 801c696:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c69a:	460c      	mov	r4, r1
 801c69c:	2c63      	cmp	r4, #99	@ 0x63
 801c69e:	f103 33ff 	add.w	r3, r3, #4294967295
 801c6a2:	4631      	mov	r1, r6
 801c6a4:	dcf1      	bgt.n	801c68a <__exponent+0x1c>
 801c6a6:	3130      	adds	r1, #48	@ 0x30
 801c6a8:	1e94      	subs	r4, r2, #2
 801c6aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c6ae:	1c41      	adds	r1, r0, #1
 801c6b0:	4623      	mov	r3, r4
 801c6b2:	42ab      	cmp	r3, r5
 801c6b4:	d30a      	bcc.n	801c6cc <__exponent+0x5e>
 801c6b6:	f10d 0309 	add.w	r3, sp, #9
 801c6ba:	1a9b      	subs	r3, r3, r2
 801c6bc:	42ac      	cmp	r4, r5
 801c6be:	bf88      	it	hi
 801c6c0:	2300      	movhi	r3, #0
 801c6c2:	3302      	adds	r3, #2
 801c6c4:	4403      	add	r3, r0
 801c6c6:	1a18      	subs	r0, r3, r0
 801c6c8:	b003      	add	sp, #12
 801c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c6d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c6d4:	e7ed      	b.n	801c6b2 <__exponent+0x44>
 801c6d6:	2330      	movs	r3, #48	@ 0x30
 801c6d8:	3130      	adds	r1, #48	@ 0x30
 801c6da:	7083      	strb	r3, [r0, #2]
 801c6dc:	70c1      	strb	r1, [r0, #3]
 801c6de:	1d03      	adds	r3, r0, #4
 801c6e0:	e7f1      	b.n	801c6c6 <__exponent+0x58>
	...

0801c6e4 <_printf_float>:
 801c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6e8:	b08d      	sub	sp, #52	@ 0x34
 801c6ea:	460c      	mov	r4, r1
 801c6ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c6f0:	4616      	mov	r6, r2
 801c6f2:	461f      	mov	r7, r3
 801c6f4:	4605      	mov	r5, r0
 801c6f6:	f000 ff29 	bl	801d54c <_localeconv_r>
 801c6fa:	6803      	ldr	r3, [r0, #0]
 801c6fc:	9304      	str	r3, [sp, #16]
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7e3 fdc6 	bl	8000290 <strlen>
 801c704:	2300      	movs	r3, #0
 801c706:	930a      	str	r3, [sp, #40]	@ 0x28
 801c708:	f8d8 3000 	ldr.w	r3, [r8]
 801c70c:	9005      	str	r0, [sp, #20]
 801c70e:	3307      	adds	r3, #7
 801c710:	f023 0307 	bic.w	r3, r3, #7
 801c714:	f103 0208 	add.w	r2, r3, #8
 801c718:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c71c:	f8d4 b000 	ldr.w	fp, [r4]
 801c720:	f8c8 2000 	str.w	r2, [r8]
 801c724:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c728:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c72c:	9307      	str	r3, [sp, #28]
 801c72e:	f8cd 8018 	str.w	r8, [sp, #24]
 801c732:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c73a:	4b9c      	ldr	r3, [pc, #624]	@ (801c9ac <_printf_float+0x2c8>)
 801c73c:	f04f 32ff 	mov.w	r2, #4294967295
 801c740:	f7e4 fa04 	bl	8000b4c <__aeabi_dcmpun>
 801c744:	bb70      	cbnz	r0, 801c7a4 <_printf_float+0xc0>
 801c746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c74a:	4b98      	ldr	r3, [pc, #608]	@ (801c9ac <_printf_float+0x2c8>)
 801c74c:	f04f 32ff 	mov.w	r2, #4294967295
 801c750:	f7e4 f9de 	bl	8000b10 <__aeabi_dcmple>
 801c754:	bb30      	cbnz	r0, 801c7a4 <_printf_float+0xc0>
 801c756:	2200      	movs	r2, #0
 801c758:	2300      	movs	r3, #0
 801c75a:	4640      	mov	r0, r8
 801c75c:	4649      	mov	r1, r9
 801c75e:	f7e4 f9cd 	bl	8000afc <__aeabi_dcmplt>
 801c762:	b110      	cbz	r0, 801c76a <_printf_float+0x86>
 801c764:	232d      	movs	r3, #45	@ 0x2d
 801c766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c76a:	4a91      	ldr	r2, [pc, #580]	@ (801c9b0 <_printf_float+0x2cc>)
 801c76c:	4b91      	ldr	r3, [pc, #580]	@ (801c9b4 <_printf_float+0x2d0>)
 801c76e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c772:	bf94      	ite	ls
 801c774:	4690      	movls	r8, r2
 801c776:	4698      	movhi	r8, r3
 801c778:	2303      	movs	r3, #3
 801c77a:	6123      	str	r3, [r4, #16]
 801c77c:	f02b 0304 	bic.w	r3, fp, #4
 801c780:	6023      	str	r3, [r4, #0]
 801c782:	f04f 0900 	mov.w	r9, #0
 801c786:	9700      	str	r7, [sp, #0]
 801c788:	4633      	mov	r3, r6
 801c78a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c78c:	4621      	mov	r1, r4
 801c78e:	4628      	mov	r0, r5
 801c790:	f000 f9d2 	bl	801cb38 <_printf_common>
 801c794:	3001      	adds	r0, #1
 801c796:	f040 808d 	bne.w	801c8b4 <_printf_float+0x1d0>
 801c79a:	f04f 30ff 	mov.w	r0, #4294967295
 801c79e:	b00d      	add	sp, #52	@ 0x34
 801c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7a4:	4642      	mov	r2, r8
 801c7a6:	464b      	mov	r3, r9
 801c7a8:	4640      	mov	r0, r8
 801c7aa:	4649      	mov	r1, r9
 801c7ac:	f7e4 f9ce 	bl	8000b4c <__aeabi_dcmpun>
 801c7b0:	b140      	cbz	r0, 801c7c4 <_printf_float+0xe0>
 801c7b2:	464b      	mov	r3, r9
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	bfbc      	itt	lt
 801c7b8:	232d      	movlt	r3, #45	@ 0x2d
 801c7ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c7be:	4a7e      	ldr	r2, [pc, #504]	@ (801c9b8 <_printf_float+0x2d4>)
 801c7c0:	4b7e      	ldr	r3, [pc, #504]	@ (801c9bc <_printf_float+0x2d8>)
 801c7c2:	e7d4      	b.n	801c76e <_printf_float+0x8a>
 801c7c4:	6863      	ldr	r3, [r4, #4]
 801c7c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c7ca:	9206      	str	r2, [sp, #24]
 801c7cc:	1c5a      	adds	r2, r3, #1
 801c7ce:	d13b      	bne.n	801c848 <_printf_float+0x164>
 801c7d0:	2306      	movs	r3, #6
 801c7d2:	6063      	str	r3, [r4, #4]
 801c7d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c7d8:	2300      	movs	r3, #0
 801c7da:	6022      	str	r2, [r4, #0]
 801c7dc:	9303      	str	r3, [sp, #12]
 801c7de:	ab0a      	add	r3, sp, #40	@ 0x28
 801c7e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c7e4:	ab09      	add	r3, sp, #36	@ 0x24
 801c7e6:	9300      	str	r3, [sp, #0]
 801c7e8:	6861      	ldr	r1, [r4, #4]
 801c7ea:	ec49 8b10 	vmov	d0, r8, r9
 801c7ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c7f2:	4628      	mov	r0, r5
 801c7f4:	f7ff fed6 	bl	801c5a4 <__cvt>
 801c7f8:	9b06      	ldr	r3, [sp, #24]
 801c7fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c7fc:	2b47      	cmp	r3, #71	@ 0x47
 801c7fe:	4680      	mov	r8, r0
 801c800:	d129      	bne.n	801c856 <_printf_float+0x172>
 801c802:	1cc8      	adds	r0, r1, #3
 801c804:	db02      	blt.n	801c80c <_printf_float+0x128>
 801c806:	6863      	ldr	r3, [r4, #4]
 801c808:	4299      	cmp	r1, r3
 801c80a:	dd41      	ble.n	801c890 <_printf_float+0x1ac>
 801c80c:	f1aa 0a02 	sub.w	sl, sl, #2
 801c810:	fa5f fa8a 	uxtb.w	sl, sl
 801c814:	3901      	subs	r1, #1
 801c816:	4652      	mov	r2, sl
 801c818:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c81c:	9109      	str	r1, [sp, #36]	@ 0x24
 801c81e:	f7ff ff26 	bl	801c66e <__exponent>
 801c822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c824:	1813      	adds	r3, r2, r0
 801c826:	2a01      	cmp	r2, #1
 801c828:	4681      	mov	r9, r0
 801c82a:	6123      	str	r3, [r4, #16]
 801c82c:	dc02      	bgt.n	801c834 <_printf_float+0x150>
 801c82e:	6822      	ldr	r2, [r4, #0]
 801c830:	07d2      	lsls	r2, r2, #31
 801c832:	d501      	bpl.n	801c838 <_printf_float+0x154>
 801c834:	3301      	adds	r3, #1
 801c836:	6123      	str	r3, [r4, #16]
 801c838:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d0a2      	beq.n	801c786 <_printf_float+0xa2>
 801c840:	232d      	movs	r3, #45	@ 0x2d
 801c842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c846:	e79e      	b.n	801c786 <_printf_float+0xa2>
 801c848:	9a06      	ldr	r2, [sp, #24]
 801c84a:	2a47      	cmp	r2, #71	@ 0x47
 801c84c:	d1c2      	bne.n	801c7d4 <_printf_float+0xf0>
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d1c0      	bne.n	801c7d4 <_printf_float+0xf0>
 801c852:	2301      	movs	r3, #1
 801c854:	e7bd      	b.n	801c7d2 <_printf_float+0xee>
 801c856:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c85a:	d9db      	bls.n	801c814 <_printf_float+0x130>
 801c85c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c860:	d118      	bne.n	801c894 <_printf_float+0x1b0>
 801c862:	2900      	cmp	r1, #0
 801c864:	6863      	ldr	r3, [r4, #4]
 801c866:	dd0b      	ble.n	801c880 <_printf_float+0x19c>
 801c868:	6121      	str	r1, [r4, #16]
 801c86a:	b913      	cbnz	r3, 801c872 <_printf_float+0x18e>
 801c86c:	6822      	ldr	r2, [r4, #0]
 801c86e:	07d0      	lsls	r0, r2, #31
 801c870:	d502      	bpl.n	801c878 <_printf_float+0x194>
 801c872:	3301      	adds	r3, #1
 801c874:	440b      	add	r3, r1
 801c876:	6123      	str	r3, [r4, #16]
 801c878:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c87a:	f04f 0900 	mov.w	r9, #0
 801c87e:	e7db      	b.n	801c838 <_printf_float+0x154>
 801c880:	b913      	cbnz	r3, 801c888 <_printf_float+0x1a4>
 801c882:	6822      	ldr	r2, [r4, #0]
 801c884:	07d2      	lsls	r2, r2, #31
 801c886:	d501      	bpl.n	801c88c <_printf_float+0x1a8>
 801c888:	3302      	adds	r3, #2
 801c88a:	e7f4      	b.n	801c876 <_printf_float+0x192>
 801c88c:	2301      	movs	r3, #1
 801c88e:	e7f2      	b.n	801c876 <_printf_float+0x192>
 801c890:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c896:	4299      	cmp	r1, r3
 801c898:	db05      	blt.n	801c8a6 <_printf_float+0x1c2>
 801c89a:	6823      	ldr	r3, [r4, #0]
 801c89c:	6121      	str	r1, [r4, #16]
 801c89e:	07d8      	lsls	r0, r3, #31
 801c8a0:	d5ea      	bpl.n	801c878 <_printf_float+0x194>
 801c8a2:	1c4b      	adds	r3, r1, #1
 801c8a4:	e7e7      	b.n	801c876 <_printf_float+0x192>
 801c8a6:	2900      	cmp	r1, #0
 801c8a8:	bfd4      	ite	le
 801c8aa:	f1c1 0202 	rsble	r2, r1, #2
 801c8ae:	2201      	movgt	r2, #1
 801c8b0:	4413      	add	r3, r2
 801c8b2:	e7e0      	b.n	801c876 <_printf_float+0x192>
 801c8b4:	6823      	ldr	r3, [r4, #0]
 801c8b6:	055a      	lsls	r2, r3, #21
 801c8b8:	d407      	bmi.n	801c8ca <_printf_float+0x1e6>
 801c8ba:	6923      	ldr	r3, [r4, #16]
 801c8bc:	4642      	mov	r2, r8
 801c8be:	4631      	mov	r1, r6
 801c8c0:	4628      	mov	r0, r5
 801c8c2:	47b8      	blx	r7
 801c8c4:	3001      	adds	r0, #1
 801c8c6:	d12b      	bne.n	801c920 <_printf_float+0x23c>
 801c8c8:	e767      	b.n	801c79a <_printf_float+0xb6>
 801c8ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c8ce:	f240 80dd 	bls.w	801ca8c <_printf_float+0x3a8>
 801c8d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	2300      	movs	r3, #0
 801c8da:	f7e4 f905 	bl	8000ae8 <__aeabi_dcmpeq>
 801c8de:	2800      	cmp	r0, #0
 801c8e0:	d033      	beq.n	801c94a <_printf_float+0x266>
 801c8e2:	4a37      	ldr	r2, [pc, #220]	@ (801c9c0 <_printf_float+0x2dc>)
 801c8e4:	2301      	movs	r3, #1
 801c8e6:	4631      	mov	r1, r6
 801c8e8:	4628      	mov	r0, r5
 801c8ea:	47b8      	blx	r7
 801c8ec:	3001      	adds	r0, #1
 801c8ee:	f43f af54 	beq.w	801c79a <_printf_float+0xb6>
 801c8f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c8f6:	4543      	cmp	r3, r8
 801c8f8:	db02      	blt.n	801c900 <_printf_float+0x21c>
 801c8fa:	6823      	ldr	r3, [r4, #0]
 801c8fc:	07d8      	lsls	r0, r3, #31
 801c8fe:	d50f      	bpl.n	801c920 <_printf_float+0x23c>
 801c900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c904:	4631      	mov	r1, r6
 801c906:	4628      	mov	r0, r5
 801c908:	47b8      	blx	r7
 801c90a:	3001      	adds	r0, #1
 801c90c:	f43f af45 	beq.w	801c79a <_printf_float+0xb6>
 801c910:	f04f 0900 	mov.w	r9, #0
 801c914:	f108 38ff 	add.w	r8, r8, #4294967295
 801c918:	f104 0a1a 	add.w	sl, r4, #26
 801c91c:	45c8      	cmp	r8, r9
 801c91e:	dc09      	bgt.n	801c934 <_printf_float+0x250>
 801c920:	6823      	ldr	r3, [r4, #0]
 801c922:	079b      	lsls	r3, r3, #30
 801c924:	f100 8103 	bmi.w	801cb2e <_printf_float+0x44a>
 801c928:	68e0      	ldr	r0, [r4, #12]
 801c92a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c92c:	4298      	cmp	r0, r3
 801c92e:	bfb8      	it	lt
 801c930:	4618      	movlt	r0, r3
 801c932:	e734      	b.n	801c79e <_printf_float+0xba>
 801c934:	2301      	movs	r3, #1
 801c936:	4652      	mov	r2, sl
 801c938:	4631      	mov	r1, r6
 801c93a:	4628      	mov	r0, r5
 801c93c:	47b8      	blx	r7
 801c93e:	3001      	adds	r0, #1
 801c940:	f43f af2b 	beq.w	801c79a <_printf_float+0xb6>
 801c944:	f109 0901 	add.w	r9, r9, #1
 801c948:	e7e8      	b.n	801c91c <_printf_float+0x238>
 801c94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	dc39      	bgt.n	801c9c4 <_printf_float+0x2e0>
 801c950:	4a1b      	ldr	r2, [pc, #108]	@ (801c9c0 <_printf_float+0x2dc>)
 801c952:	2301      	movs	r3, #1
 801c954:	4631      	mov	r1, r6
 801c956:	4628      	mov	r0, r5
 801c958:	47b8      	blx	r7
 801c95a:	3001      	adds	r0, #1
 801c95c:	f43f af1d 	beq.w	801c79a <_printf_float+0xb6>
 801c960:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c964:	ea59 0303 	orrs.w	r3, r9, r3
 801c968:	d102      	bne.n	801c970 <_printf_float+0x28c>
 801c96a:	6823      	ldr	r3, [r4, #0]
 801c96c:	07d9      	lsls	r1, r3, #31
 801c96e:	d5d7      	bpl.n	801c920 <_printf_float+0x23c>
 801c970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c974:	4631      	mov	r1, r6
 801c976:	4628      	mov	r0, r5
 801c978:	47b8      	blx	r7
 801c97a:	3001      	adds	r0, #1
 801c97c:	f43f af0d 	beq.w	801c79a <_printf_float+0xb6>
 801c980:	f04f 0a00 	mov.w	sl, #0
 801c984:	f104 0b1a 	add.w	fp, r4, #26
 801c988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c98a:	425b      	negs	r3, r3
 801c98c:	4553      	cmp	r3, sl
 801c98e:	dc01      	bgt.n	801c994 <_printf_float+0x2b0>
 801c990:	464b      	mov	r3, r9
 801c992:	e793      	b.n	801c8bc <_printf_float+0x1d8>
 801c994:	2301      	movs	r3, #1
 801c996:	465a      	mov	r2, fp
 801c998:	4631      	mov	r1, r6
 801c99a:	4628      	mov	r0, r5
 801c99c:	47b8      	blx	r7
 801c99e:	3001      	adds	r0, #1
 801c9a0:	f43f aefb 	beq.w	801c79a <_printf_float+0xb6>
 801c9a4:	f10a 0a01 	add.w	sl, sl, #1
 801c9a8:	e7ee      	b.n	801c988 <_printf_float+0x2a4>
 801c9aa:	bf00      	nop
 801c9ac:	7fefffff 	.word	0x7fefffff
 801c9b0:	08024616 	.word	0x08024616
 801c9b4:	0802461a 	.word	0x0802461a
 801c9b8:	0802461e 	.word	0x0802461e
 801c9bc:	08024622 	.word	0x08024622
 801c9c0:	08024626 	.word	0x08024626
 801c9c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c9c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c9ca:	4553      	cmp	r3, sl
 801c9cc:	bfa8      	it	ge
 801c9ce:	4653      	movge	r3, sl
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	4699      	mov	r9, r3
 801c9d4:	dc36      	bgt.n	801ca44 <_printf_float+0x360>
 801c9d6:	f04f 0b00 	mov.w	fp, #0
 801c9da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c9de:	f104 021a 	add.w	r2, r4, #26
 801c9e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c9e4:	9306      	str	r3, [sp, #24]
 801c9e6:	eba3 0309 	sub.w	r3, r3, r9
 801c9ea:	455b      	cmp	r3, fp
 801c9ec:	dc31      	bgt.n	801ca52 <_printf_float+0x36e>
 801c9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9f0:	459a      	cmp	sl, r3
 801c9f2:	dc3a      	bgt.n	801ca6a <_printf_float+0x386>
 801c9f4:	6823      	ldr	r3, [r4, #0]
 801c9f6:	07da      	lsls	r2, r3, #31
 801c9f8:	d437      	bmi.n	801ca6a <_printf_float+0x386>
 801c9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9fc:	ebaa 0903 	sub.w	r9, sl, r3
 801ca00:	9b06      	ldr	r3, [sp, #24]
 801ca02:	ebaa 0303 	sub.w	r3, sl, r3
 801ca06:	4599      	cmp	r9, r3
 801ca08:	bfa8      	it	ge
 801ca0a:	4699      	movge	r9, r3
 801ca0c:	f1b9 0f00 	cmp.w	r9, #0
 801ca10:	dc33      	bgt.n	801ca7a <_printf_float+0x396>
 801ca12:	f04f 0800 	mov.w	r8, #0
 801ca16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ca1a:	f104 0b1a 	add.w	fp, r4, #26
 801ca1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca20:	ebaa 0303 	sub.w	r3, sl, r3
 801ca24:	eba3 0309 	sub.w	r3, r3, r9
 801ca28:	4543      	cmp	r3, r8
 801ca2a:	f77f af79 	ble.w	801c920 <_printf_float+0x23c>
 801ca2e:	2301      	movs	r3, #1
 801ca30:	465a      	mov	r2, fp
 801ca32:	4631      	mov	r1, r6
 801ca34:	4628      	mov	r0, r5
 801ca36:	47b8      	blx	r7
 801ca38:	3001      	adds	r0, #1
 801ca3a:	f43f aeae 	beq.w	801c79a <_printf_float+0xb6>
 801ca3e:	f108 0801 	add.w	r8, r8, #1
 801ca42:	e7ec      	b.n	801ca1e <_printf_float+0x33a>
 801ca44:	4642      	mov	r2, r8
 801ca46:	4631      	mov	r1, r6
 801ca48:	4628      	mov	r0, r5
 801ca4a:	47b8      	blx	r7
 801ca4c:	3001      	adds	r0, #1
 801ca4e:	d1c2      	bne.n	801c9d6 <_printf_float+0x2f2>
 801ca50:	e6a3      	b.n	801c79a <_printf_float+0xb6>
 801ca52:	2301      	movs	r3, #1
 801ca54:	4631      	mov	r1, r6
 801ca56:	4628      	mov	r0, r5
 801ca58:	9206      	str	r2, [sp, #24]
 801ca5a:	47b8      	blx	r7
 801ca5c:	3001      	adds	r0, #1
 801ca5e:	f43f ae9c 	beq.w	801c79a <_printf_float+0xb6>
 801ca62:	9a06      	ldr	r2, [sp, #24]
 801ca64:	f10b 0b01 	add.w	fp, fp, #1
 801ca68:	e7bb      	b.n	801c9e2 <_printf_float+0x2fe>
 801ca6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ca6e:	4631      	mov	r1, r6
 801ca70:	4628      	mov	r0, r5
 801ca72:	47b8      	blx	r7
 801ca74:	3001      	adds	r0, #1
 801ca76:	d1c0      	bne.n	801c9fa <_printf_float+0x316>
 801ca78:	e68f      	b.n	801c79a <_printf_float+0xb6>
 801ca7a:	9a06      	ldr	r2, [sp, #24]
 801ca7c:	464b      	mov	r3, r9
 801ca7e:	4442      	add	r2, r8
 801ca80:	4631      	mov	r1, r6
 801ca82:	4628      	mov	r0, r5
 801ca84:	47b8      	blx	r7
 801ca86:	3001      	adds	r0, #1
 801ca88:	d1c3      	bne.n	801ca12 <_printf_float+0x32e>
 801ca8a:	e686      	b.n	801c79a <_printf_float+0xb6>
 801ca8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ca90:	f1ba 0f01 	cmp.w	sl, #1
 801ca94:	dc01      	bgt.n	801ca9a <_printf_float+0x3b6>
 801ca96:	07db      	lsls	r3, r3, #31
 801ca98:	d536      	bpl.n	801cb08 <_printf_float+0x424>
 801ca9a:	2301      	movs	r3, #1
 801ca9c:	4642      	mov	r2, r8
 801ca9e:	4631      	mov	r1, r6
 801caa0:	4628      	mov	r0, r5
 801caa2:	47b8      	blx	r7
 801caa4:	3001      	adds	r0, #1
 801caa6:	f43f ae78 	beq.w	801c79a <_printf_float+0xb6>
 801caaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801caae:	4631      	mov	r1, r6
 801cab0:	4628      	mov	r0, r5
 801cab2:	47b8      	blx	r7
 801cab4:	3001      	adds	r0, #1
 801cab6:	f43f ae70 	beq.w	801c79a <_printf_float+0xb6>
 801caba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cabe:	2200      	movs	r2, #0
 801cac0:	2300      	movs	r3, #0
 801cac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cac6:	f7e4 f80f 	bl	8000ae8 <__aeabi_dcmpeq>
 801caca:	b9c0      	cbnz	r0, 801cafe <_printf_float+0x41a>
 801cacc:	4653      	mov	r3, sl
 801cace:	f108 0201 	add.w	r2, r8, #1
 801cad2:	4631      	mov	r1, r6
 801cad4:	4628      	mov	r0, r5
 801cad6:	47b8      	blx	r7
 801cad8:	3001      	adds	r0, #1
 801cada:	d10c      	bne.n	801caf6 <_printf_float+0x412>
 801cadc:	e65d      	b.n	801c79a <_printf_float+0xb6>
 801cade:	2301      	movs	r3, #1
 801cae0:	465a      	mov	r2, fp
 801cae2:	4631      	mov	r1, r6
 801cae4:	4628      	mov	r0, r5
 801cae6:	47b8      	blx	r7
 801cae8:	3001      	adds	r0, #1
 801caea:	f43f ae56 	beq.w	801c79a <_printf_float+0xb6>
 801caee:	f108 0801 	add.w	r8, r8, #1
 801caf2:	45d0      	cmp	r8, sl
 801caf4:	dbf3      	blt.n	801cade <_printf_float+0x3fa>
 801caf6:	464b      	mov	r3, r9
 801caf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801cafc:	e6df      	b.n	801c8be <_printf_float+0x1da>
 801cafe:	f04f 0800 	mov.w	r8, #0
 801cb02:	f104 0b1a 	add.w	fp, r4, #26
 801cb06:	e7f4      	b.n	801caf2 <_printf_float+0x40e>
 801cb08:	2301      	movs	r3, #1
 801cb0a:	4642      	mov	r2, r8
 801cb0c:	e7e1      	b.n	801cad2 <_printf_float+0x3ee>
 801cb0e:	2301      	movs	r3, #1
 801cb10:	464a      	mov	r2, r9
 801cb12:	4631      	mov	r1, r6
 801cb14:	4628      	mov	r0, r5
 801cb16:	47b8      	blx	r7
 801cb18:	3001      	adds	r0, #1
 801cb1a:	f43f ae3e 	beq.w	801c79a <_printf_float+0xb6>
 801cb1e:	f108 0801 	add.w	r8, r8, #1
 801cb22:	68e3      	ldr	r3, [r4, #12]
 801cb24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cb26:	1a5b      	subs	r3, r3, r1
 801cb28:	4543      	cmp	r3, r8
 801cb2a:	dcf0      	bgt.n	801cb0e <_printf_float+0x42a>
 801cb2c:	e6fc      	b.n	801c928 <_printf_float+0x244>
 801cb2e:	f04f 0800 	mov.w	r8, #0
 801cb32:	f104 0919 	add.w	r9, r4, #25
 801cb36:	e7f4      	b.n	801cb22 <_printf_float+0x43e>

0801cb38 <_printf_common>:
 801cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb3c:	4616      	mov	r6, r2
 801cb3e:	4698      	mov	r8, r3
 801cb40:	688a      	ldr	r2, [r1, #8]
 801cb42:	690b      	ldr	r3, [r1, #16]
 801cb44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cb48:	4293      	cmp	r3, r2
 801cb4a:	bfb8      	it	lt
 801cb4c:	4613      	movlt	r3, r2
 801cb4e:	6033      	str	r3, [r6, #0]
 801cb50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cb54:	4607      	mov	r7, r0
 801cb56:	460c      	mov	r4, r1
 801cb58:	b10a      	cbz	r2, 801cb5e <_printf_common+0x26>
 801cb5a:	3301      	adds	r3, #1
 801cb5c:	6033      	str	r3, [r6, #0]
 801cb5e:	6823      	ldr	r3, [r4, #0]
 801cb60:	0699      	lsls	r1, r3, #26
 801cb62:	bf42      	ittt	mi
 801cb64:	6833      	ldrmi	r3, [r6, #0]
 801cb66:	3302      	addmi	r3, #2
 801cb68:	6033      	strmi	r3, [r6, #0]
 801cb6a:	6825      	ldr	r5, [r4, #0]
 801cb6c:	f015 0506 	ands.w	r5, r5, #6
 801cb70:	d106      	bne.n	801cb80 <_printf_common+0x48>
 801cb72:	f104 0a19 	add.w	sl, r4, #25
 801cb76:	68e3      	ldr	r3, [r4, #12]
 801cb78:	6832      	ldr	r2, [r6, #0]
 801cb7a:	1a9b      	subs	r3, r3, r2
 801cb7c:	42ab      	cmp	r3, r5
 801cb7e:	dc26      	bgt.n	801cbce <_printf_common+0x96>
 801cb80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cb84:	6822      	ldr	r2, [r4, #0]
 801cb86:	3b00      	subs	r3, #0
 801cb88:	bf18      	it	ne
 801cb8a:	2301      	movne	r3, #1
 801cb8c:	0692      	lsls	r2, r2, #26
 801cb8e:	d42b      	bmi.n	801cbe8 <_printf_common+0xb0>
 801cb90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cb94:	4641      	mov	r1, r8
 801cb96:	4638      	mov	r0, r7
 801cb98:	47c8      	blx	r9
 801cb9a:	3001      	adds	r0, #1
 801cb9c:	d01e      	beq.n	801cbdc <_printf_common+0xa4>
 801cb9e:	6823      	ldr	r3, [r4, #0]
 801cba0:	6922      	ldr	r2, [r4, #16]
 801cba2:	f003 0306 	and.w	r3, r3, #6
 801cba6:	2b04      	cmp	r3, #4
 801cba8:	bf02      	ittt	eq
 801cbaa:	68e5      	ldreq	r5, [r4, #12]
 801cbac:	6833      	ldreq	r3, [r6, #0]
 801cbae:	1aed      	subeq	r5, r5, r3
 801cbb0:	68a3      	ldr	r3, [r4, #8]
 801cbb2:	bf0c      	ite	eq
 801cbb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cbb8:	2500      	movne	r5, #0
 801cbba:	4293      	cmp	r3, r2
 801cbbc:	bfc4      	itt	gt
 801cbbe:	1a9b      	subgt	r3, r3, r2
 801cbc0:	18ed      	addgt	r5, r5, r3
 801cbc2:	2600      	movs	r6, #0
 801cbc4:	341a      	adds	r4, #26
 801cbc6:	42b5      	cmp	r5, r6
 801cbc8:	d11a      	bne.n	801cc00 <_printf_common+0xc8>
 801cbca:	2000      	movs	r0, #0
 801cbcc:	e008      	b.n	801cbe0 <_printf_common+0xa8>
 801cbce:	2301      	movs	r3, #1
 801cbd0:	4652      	mov	r2, sl
 801cbd2:	4641      	mov	r1, r8
 801cbd4:	4638      	mov	r0, r7
 801cbd6:	47c8      	blx	r9
 801cbd8:	3001      	adds	r0, #1
 801cbda:	d103      	bne.n	801cbe4 <_printf_common+0xac>
 801cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 801cbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbe4:	3501      	adds	r5, #1
 801cbe6:	e7c6      	b.n	801cb76 <_printf_common+0x3e>
 801cbe8:	18e1      	adds	r1, r4, r3
 801cbea:	1c5a      	adds	r2, r3, #1
 801cbec:	2030      	movs	r0, #48	@ 0x30
 801cbee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cbf2:	4422      	add	r2, r4
 801cbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cbf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cbfc:	3302      	adds	r3, #2
 801cbfe:	e7c7      	b.n	801cb90 <_printf_common+0x58>
 801cc00:	2301      	movs	r3, #1
 801cc02:	4622      	mov	r2, r4
 801cc04:	4641      	mov	r1, r8
 801cc06:	4638      	mov	r0, r7
 801cc08:	47c8      	blx	r9
 801cc0a:	3001      	adds	r0, #1
 801cc0c:	d0e6      	beq.n	801cbdc <_printf_common+0xa4>
 801cc0e:	3601      	adds	r6, #1
 801cc10:	e7d9      	b.n	801cbc6 <_printf_common+0x8e>
	...

0801cc14 <_printf_i>:
 801cc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cc18:	7e0f      	ldrb	r7, [r1, #24]
 801cc1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cc1c:	2f78      	cmp	r7, #120	@ 0x78
 801cc1e:	4691      	mov	r9, r2
 801cc20:	4680      	mov	r8, r0
 801cc22:	460c      	mov	r4, r1
 801cc24:	469a      	mov	sl, r3
 801cc26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cc2a:	d807      	bhi.n	801cc3c <_printf_i+0x28>
 801cc2c:	2f62      	cmp	r7, #98	@ 0x62
 801cc2e:	d80a      	bhi.n	801cc46 <_printf_i+0x32>
 801cc30:	2f00      	cmp	r7, #0
 801cc32:	f000 80d2 	beq.w	801cdda <_printf_i+0x1c6>
 801cc36:	2f58      	cmp	r7, #88	@ 0x58
 801cc38:	f000 80b9 	beq.w	801cdae <_printf_i+0x19a>
 801cc3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cc40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cc44:	e03a      	b.n	801ccbc <_printf_i+0xa8>
 801cc46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cc4a:	2b15      	cmp	r3, #21
 801cc4c:	d8f6      	bhi.n	801cc3c <_printf_i+0x28>
 801cc4e:	a101      	add	r1, pc, #4	@ (adr r1, 801cc54 <_printf_i+0x40>)
 801cc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cc54:	0801ccad 	.word	0x0801ccad
 801cc58:	0801ccc1 	.word	0x0801ccc1
 801cc5c:	0801cc3d 	.word	0x0801cc3d
 801cc60:	0801cc3d 	.word	0x0801cc3d
 801cc64:	0801cc3d 	.word	0x0801cc3d
 801cc68:	0801cc3d 	.word	0x0801cc3d
 801cc6c:	0801ccc1 	.word	0x0801ccc1
 801cc70:	0801cc3d 	.word	0x0801cc3d
 801cc74:	0801cc3d 	.word	0x0801cc3d
 801cc78:	0801cc3d 	.word	0x0801cc3d
 801cc7c:	0801cc3d 	.word	0x0801cc3d
 801cc80:	0801cdc1 	.word	0x0801cdc1
 801cc84:	0801cceb 	.word	0x0801cceb
 801cc88:	0801cd7b 	.word	0x0801cd7b
 801cc8c:	0801cc3d 	.word	0x0801cc3d
 801cc90:	0801cc3d 	.word	0x0801cc3d
 801cc94:	0801cde3 	.word	0x0801cde3
 801cc98:	0801cc3d 	.word	0x0801cc3d
 801cc9c:	0801cceb 	.word	0x0801cceb
 801cca0:	0801cc3d 	.word	0x0801cc3d
 801cca4:	0801cc3d 	.word	0x0801cc3d
 801cca8:	0801cd83 	.word	0x0801cd83
 801ccac:	6833      	ldr	r3, [r6, #0]
 801ccae:	1d1a      	adds	r2, r3, #4
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	6032      	str	r2, [r6, #0]
 801ccb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ccb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ccbc:	2301      	movs	r3, #1
 801ccbe:	e09d      	b.n	801cdfc <_printf_i+0x1e8>
 801ccc0:	6833      	ldr	r3, [r6, #0]
 801ccc2:	6820      	ldr	r0, [r4, #0]
 801ccc4:	1d19      	adds	r1, r3, #4
 801ccc6:	6031      	str	r1, [r6, #0]
 801ccc8:	0606      	lsls	r6, r0, #24
 801ccca:	d501      	bpl.n	801ccd0 <_printf_i+0xbc>
 801cccc:	681d      	ldr	r5, [r3, #0]
 801ccce:	e003      	b.n	801ccd8 <_printf_i+0xc4>
 801ccd0:	0645      	lsls	r5, r0, #25
 801ccd2:	d5fb      	bpl.n	801cccc <_printf_i+0xb8>
 801ccd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ccd8:	2d00      	cmp	r5, #0
 801ccda:	da03      	bge.n	801cce4 <_printf_i+0xd0>
 801ccdc:	232d      	movs	r3, #45	@ 0x2d
 801ccde:	426d      	negs	r5, r5
 801cce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cce4:	4859      	ldr	r0, [pc, #356]	@ (801ce4c <_printf_i+0x238>)
 801cce6:	230a      	movs	r3, #10
 801cce8:	e011      	b.n	801cd0e <_printf_i+0xfa>
 801ccea:	6821      	ldr	r1, [r4, #0]
 801ccec:	6833      	ldr	r3, [r6, #0]
 801ccee:	0608      	lsls	r0, r1, #24
 801ccf0:	f853 5b04 	ldr.w	r5, [r3], #4
 801ccf4:	d402      	bmi.n	801ccfc <_printf_i+0xe8>
 801ccf6:	0649      	lsls	r1, r1, #25
 801ccf8:	bf48      	it	mi
 801ccfa:	b2ad      	uxthmi	r5, r5
 801ccfc:	2f6f      	cmp	r7, #111	@ 0x6f
 801ccfe:	4853      	ldr	r0, [pc, #332]	@ (801ce4c <_printf_i+0x238>)
 801cd00:	6033      	str	r3, [r6, #0]
 801cd02:	bf14      	ite	ne
 801cd04:	230a      	movne	r3, #10
 801cd06:	2308      	moveq	r3, #8
 801cd08:	2100      	movs	r1, #0
 801cd0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cd0e:	6866      	ldr	r6, [r4, #4]
 801cd10:	60a6      	str	r6, [r4, #8]
 801cd12:	2e00      	cmp	r6, #0
 801cd14:	bfa2      	ittt	ge
 801cd16:	6821      	ldrge	r1, [r4, #0]
 801cd18:	f021 0104 	bicge.w	r1, r1, #4
 801cd1c:	6021      	strge	r1, [r4, #0]
 801cd1e:	b90d      	cbnz	r5, 801cd24 <_printf_i+0x110>
 801cd20:	2e00      	cmp	r6, #0
 801cd22:	d04b      	beq.n	801cdbc <_printf_i+0x1a8>
 801cd24:	4616      	mov	r6, r2
 801cd26:	fbb5 f1f3 	udiv	r1, r5, r3
 801cd2a:	fb03 5711 	mls	r7, r3, r1, r5
 801cd2e:	5dc7      	ldrb	r7, [r0, r7]
 801cd30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cd34:	462f      	mov	r7, r5
 801cd36:	42bb      	cmp	r3, r7
 801cd38:	460d      	mov	r5, r1
 801cd3a:	d9f4      	bls.n	801cd26 <_printf_i+0x112>
 801cd3c:	2b08      	cmp	r3, #8
 801cd3e:	d10b      	bne.n	801cd58 <_printf_i+0x144>
 801cd40:	6823      	ldr	r3, [r4, #0]
 801cd42:	07df      	lsls	r7, r3, #31
 801cd44:	d508      	bpl.n	801cd58 <_printf_i+0x144>
 801cd46:	6923      	ldr	r3, [r4, #16]
 801cd48:	6861      	ldr	r1, [r4, #4]
 801cd4a:	4299      	cmp	r1, r3
 801cd4c:	bfde      	ittt	le
 801cd4e:	2330      	movle	r3, #48	@ 0x30
 801cd50:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cd54:	f106 36ff 	addle.w	r6, r6, #4294967295
 801cd58:	1b92      	subs	r2, r2, r6
 801cd5a:	6122      	str	r2, [r4, #16]
 801cd5c:	f8cd a000 	str.w	sl, [sp]
 801cd60:	464b      	mov	r3, r9
 801cd62:	aa03      	add	r2, sp, #12
 801cd64:	4621      	mov	r1, r4
 801cd66:	4640      	mov	r0, r8
 801cd68:	f7ff fee6 	bl	801cb38 <_printf_common>
 801cd6c:	3001      	adds	r0, #1
 801cd6e:	d14a      	bne.n	801ce06 <_printf_i+0x1f2>
 801cd70:	f04f 30ff 	mov.w	r0, #4294967295
 801cd74:	b004      	add	sp, #16
 801cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd7a:	6823      	ldr	r3, [r4, #0]
 801cd7c:	f043 0320 	orr.w	r3, r3, #32
 801cd80:	6023      	str	r3, [r4, #0]
 801cd82:	4833      	ldr	r0, [pc, #204]	@ (801ce50 <_printf_i+0x23c>)
 801cd84:	2778      	movs	r7, #120	@ 0x78
 801cd86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cd8a:	6823      	ldr	r3, [r4, #0]
 801cd8c:	6831      	ldr	r1, [r6, #0]
 801cd8e:	061f      	lsls	r7, r3, #24
 801cd90:	f851 5b04 	ldr.w	r5, [r1], #4
 801cd94:	d402      	bmi.n	801cd9c <_printf_i+0x188>
 801cd96:	065f      	lsls	r7, r3, #25
 801cd98:	bf48      	it	mi
 801cd9a:	b2ad      	uxthmi	r5, r5
 801cd9c:	6031      	str	r1, [r6, #0]
 801cd9e:	07d9      	lsls	r1, r3, #31
 801cda0:	bf44      	itt	mi
 801cda2:	f043 0320 	orrmi.w	r3, r3, #32
 801cda6:	6023      	strmi	r3, [r4, #0]
 801cda8:	b11d      	cbz	r5, 801cdb2 <_printf_i+0x19e>
 801cdaa:	2310      	movs	r3, #16
 801cdac:	e7ac      	b.n	801cd08 <_printf_i+0xf4>
 801cdae:	4827      	ldr	r0, [pc, #156]	@ (801ce4c <_printf_i+0x238>)
 801cdb0:	e7e9      	b.n	801cd86 <_printf_i+0x172>
 801cdb2:	6823      	ldr	r3, [r4, #0]
 801cdb4:	f023 0320 	bic.w	r3, r3, #32
 801cdb8:	6023      	str	r3, [r4, #0]
 801cdba:	e7f6      	b.n	801cdaa <_printf_i+0x196>
 801cdbc:	4616      	mov	r6, r2
 801cdbe:	e7bd      	b.n	801cd3c <_printf_i+0x128>
 801cdc0:	6833      	ldr	r3, [r6, #0]
 801cdc2:	6825      	ldr	r5, [r4, #0]
 801cdc4:	6961      	ldr	r1, [r4, #20]
 801cdc6:	1d18      	adds	r0, r3, #4
 801cdc8:	6030      	str	r0, [r6, #0]
 801cdca:	062e      	lsls	r6, r5, #24
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	d501      	bpl.n	801cdd4 <_printf_i+0x1c0>
 801cdd0:	6019      	str	r1, [r3, #0]
 801cdd2:	e002      	b.n	801cdda <_printf_i+0x1c6>
 801cdd4:	0668      	lsls	r0, r5, #25
 801cdd6:	d5fb      	bpl.n	801cdd0 <_printf_i+0x1bc>
 801cdd8:	8019      	strh	r1, [r3, #0]
 801cdda:	2300      	movs	r3, #0
 801cddc:	6123      	str	r3, [r4, #16]
 801cdde:	4616      	mov	r6, r2
 801cde0:	e7bc      	b.n	801cd5c <_printf_i+0x148>
 801cde2:	6833      	ldr	r3, [r6, #0]
 801cde4:	1d1a      	adds	r2, r3, #4
 801cde6:	6032      	str	r2, [r6, #0]
 801cde8:	681e      	ldr	r6, [r3, #0]
 801cdea:	6862      	ldr	r2, [r4, #4]
 801cdec:	2100      	movs	r1, #0
 801cdee:	4630      	mov	r0, r6
 801cdf0:	f7e3 f9fe 	bl	80001f0 <memchr>
 801cdf4:	b108      	cbz	r0, 801cdfa <_printf_i+0x1e6>
 801cdf6:	1b80      	subs	r0, r0, r6
 801cdf8:	6060      	str	r0, [r4, #4]
 801cdfa:	6863      	ldr	r3, [r4, #4]
 801cdfc:	6123      	str	r3, [r4, #16]
 801cdfe:	2300      	movs	r3, #0
 801ce00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce04:	e7aa      	b.n	801cd5c <_printf_i+0x148>
 801ce06:	6923      	ldr	r3, [r4, #16]
 801ce08:	4632      	mov	r2, r6
 801ce0a:	4649      	mov	r1, r9
 801ce0c:	4640      	mov	r0, r8
 801ce0e:	47d0      	blx	sl
 801ce10:	3001      	adds	r0, #1
 801ce12:	d0ad      	beq.n	801cd70 <_printf_i+0x15c>
 801ce14:	6823      	ldr	r3, [r4, #0]
 801ce16:	079b      	lsls	r3, r3, #30
 801ce18:	d413      	bmi.n	801ce42 <_printf_i+0x22e>
 801ce1a:	68e0      	ldr	r0, [r4, #12]
 801ce1c:	9b03      	ldr	r3, [sp, #12]
 801ce1e:	4298      	cmp	r0, r3
 801ce20:	bfb8      	it	lt
 801ce22:	4618      	movlt	r0, r3
 801ce24:	e7a6      	b.n	801cd74 <_printf_i+0x160>
 801ce26:	2301      	movs	r3, #1
 801ce28:	4632      	mov	r2, r6
 801ce2a:	4649      	mov	r1, r9
 801ce2c:	4640      	mov	r0, r8
 801ce2e:	47d0      	blx	sl
 801ce30:	3001      	adds	r0, #1
 801ce32:	d09d      	beq.n	801cd70 <_printf_i+0x15c>
 801ce34:	3501      	adds	r5, #1
 801ce36:	68e3      	ldr	r3, [r4, #12]
 801ce38:	9903      	ldr	r1, [sp, #12]
 801ce3a:	1a5b      	subs	r3, r3, r1
 801ce3c:	42ab      	cmp	r3, r5
 801ce3e:	dcf2      	bgt.n	801ce26 <_printf_i+0x212>
 801ce40:	e7eb      	b.n	801ce1a <_printf_i+0x206>
 801ce42:	2500      	movs	r5, #0
 801ce44:	f104 0619 	add.w	r6, r4, #25
 801ce48:	e7f5      	b.n	801ce36 <_printf_i+0x222>
 801ce4a:	bf00      	nop
 801ce4c:	08024628 	.word	0x08024628
 801ce50:	08024639 	.word	0x08024639

0801ce54 <std>:
 801ce54:	2300      	movs	r3, #0
 801ce56:	b510      	push	{r4, lr}
 801ce58:	4604      	mov	r4, r0
 801ce5a:	e9c0 3300 	strd	r3, r3, [r0]
 801ce5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ce62:	6083      	str	r3, [r0, #8]
 801ce64:	8181      	strh	r1, [r0, #12]
 801ce66:	6643      	str	r3, [r0, #100]	@ 0x64
 801ce68:	81c2      	strh	r2, [r0, #14]
 801ce6a:	6183      	str	r3, [r0, #24]
 801ce6c:	4619      	mov	r1, r3
 801ce6e:	2208      	movs	r2, #8
 801ce70:	305c      	adds	r0, #92	@ 0x5c
 801ce72:	f000 fb1b 	bl	801d4ac <memset>
 801ce76:	4b0d      	ldr	r3, [pc, #52]	@ (801ceac <std+0x58>)
 801ce78:	6263      	str	r3, [r4, #36]	@ 0x24
 801ce7a:	4b0d      	ldr	r3, [pc, #52]	@ (801ceb0 <std+0x5c>)
 801ce7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ce7e:	4b0d      	ldr	r3, [pc, #52]	@ (801ceb4 <std+0x60>)
 801ce80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ce82:	4b0d      	ldr	r3, [pc, #52]	@ (801ceb8 <std+0x64>)
 801ce84:	6323      	str	r3, [r4, #48]	@ 0x30
 801ce86:	4b0d      	ldr	r3, [pc, #52]	@ (801cebc <std+0x68>)
 801ce88:	6224      	str	r4, [r4, #32]
 801ce8a:	429c      	cmp	r4, r3
 801ce8c:	d006      	beq.n	801ce9c <std+0x48>
 801ce8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ce92:	4294      	cmp	r4, r2
 801ce94:	d002      	beq.n	801ce9c <std+0x48>
 801ce96:	33d0      	adds	r3, #208	@ 0xd0
 801ce98:	429c      	cmp	r4, r3
 801ce9a:	d105      	bne.n	801cea8 <std+0x54>
 801ce9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cea4:	f000 bbd6 	b.w	801d654 <__retarget_lock_init_recursive>
 801cea8:	bd10      	pop	{r4, pc}
 801ceaa:	bf00      	nop
 801ceac:	0801d239 	.word	0x0801d239
 801ceb0:	0801d25b 	.word	0x0801d25b
 801ceb4:	0801d293 	.word	0x0801d293
 801ceb8:	0801d2b7 	.word	0x0801d2b7
 801cebc:	20018218 	.word	0x20018218

0801cec0 <stdio_exit_handler>:
 801cec0:	4a02      	ldr	r2, [pc, #8]	@ (801cecc <stdio_exit_handler+0xc>)
 801cec2:	4903      	ldr	r1, [pc, #12]	@ (801ced0 <stdio_exit_handler+0x10>)
 801cec4:	4803      	ldr	r0, [pc, #12]	@ (801ced4 <stdio_exit_handler+0x14>)
 801cec6:	f000 b87b 	b.w	801cfc0 <_fwalk_sglue>
 801ceca:	bf00      	nop
 801cecc:	200026a4 	.word	0x200026a4
 801ced0:	0801f12d 	.word	0x0801f12d
 801ced4:	200026b4 	.word	0x200026b4

0801ced8 <cleanup_stdio>:
 801ced8:	6841      	ldr	r1, [r0, #4]
 801ceda:	4b0c      	ldr	r3, [pc, #48]	@ (801cf0c <cleanup_stdio+0x34>)
 801cedc:	4299      	cmp	r1, r3
 801cede:	b510      	push	{r4, lr}
 801cee0:	4604      	mov	r4, r0
 801cee2:	d001      	beq.n	801cee8 <cleanup_stdio+0x10>
 801cee4:	f002 f922 	bl	801f12c <_fflush_r>
 801cee8:	68a1      	ldr	r1, [r4, #8]
 801ceea:	4b09      	ldr	r3, [pc, #36]	@ (801cf10 <cleanup_stdio+0x38>)
 801ceec:	4299      	cmp	r1, r3
 801ceee:	d002      	beq.n	801cef6 <cleanup_stdio+0x1e>
 801cef0:	4620      	mov	r0, r4
 801cef2:	f002 f91b 	bl	801f12c <_fflush_r>
 801cef6:	68e1      	ldr	r1, [r4, #12]
 801cef8:	4b06      	ldr	r3, [pc, #24]	@ (801cf14 <cleanup_stdio+0x3c>)
 801cefa:	4299      	cmp	r1, r3
 801cefc:	d004      	beq.n	801cf08 <cleanup_stdio+0x30>
 801cefe:	4620      	mov	r0, r4
 801cf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf04:	f002 b912 	b.w	801f12c <_fflush_r>
 801cf08:	bd10      	pop	{r4, pc}
 801cf0a:	bf00      	nop
 801cf0c:	20018218 	.word	0x20018218
 801cf10:	20018280 	.word	0x20018280
 801cf14:	200182e8 	.word	0x200182e8

0801cf18 <global_stdio_init.part.0>:
 801cf18:	b510      	push	{r4, lr}
 801cf1a:	4b0b      	ldr	r3, [pc, #44]	@ (801cf48 <global_stdio_init.part.0+0x30>)
 801cf1c:	4c0b      	ldr	r4, [pc, #44]	@ (801cf4c <global_stdio_init.part.0+0x34>)
 801cf1e:	4a0c      	ldr	r2, [pc, #48]	@ (801cf50 <global_stdio_init.part.0+0x38>)
 801cf20:	601a      	str	r2, [r3, #0]
 801cf22:	4620      	mov	r0, r4
 801cf24:	2200      	movs	r2, #0
 801cf26:	2104      	movs	r1, #4
 801cf28:	f7ff ff94 	bl	801ce54 <std>
 801cf2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cf30:	2201      	movs	r2, #1
 801cf32:	2109      	movs	r1, #9
 801cf34:	f7ff ff8e 	bl	801ce54 <std>
 801cf38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cf3c:	2202      	movs	r2, #2
 801cf3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf42:	2112      	movs	r1, #18
 801cf44:	f7ff bf86 	b.w	801ce54 <std>
 801cf48:	20018350 	.word	0x20018350
 801cf4c:	20018218 	.word	0x20018218
 801cf50:	0801cec1 	.word	0x0801cec1

0801cf54 <__sfp_lock_acquire>:
 801cf54:	4801      	ldr	r0, [pc, #4]	@ (801cf5c <__sfp_lock_acquire+0x8>)
 801cf56:	f000 bb7e 	b.w	801d656 <__retarget_lock_acquire_recursive>
 801cf5a:	bf00      	nop
 801cf5c:	2001835a 	.word	0x2001835a

0801cf60 <__sfp_lock_release>:
 801cf60:	4801      	ldr	r0, [pc, #4]	@ (801cf68 <__sfp_lock_release+0x8>)
 801cf62:	f000 bb79 	b.w	801d658 <__retarget_lock_release_recursive>
 801cf66:	bf00      	nop
 801cf68:	2001835a 	.word	0x2001835a

0801cf6c <__sinit>:
 801cf6c:	b510      	push	{r4, lr}
 801cf6e:	4604      	mov	r4, r0
 801cf70:	f7ff fff0 	bl	801cf54 <__sfp_lock_acquire>
 801cf74:	6a23      	ldr	r3, [r4, #32]
 801cf76:	b11b      	cbz	r3, 801cf80 <__sinit+0x14>
 801cf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf7c:	f7ff bff0 	b.w	801cf60 <__sfp_lock_release>
 801cf80:	4b04      	ldr	r3, [pc, #16]	@ (801cf94 <__sinit+0x28>)
 801cf82:	6223      	str	r3, [r4, #32]
 801cf84:	4b04      	ldr	r3, [pc, #16]	@ (801cf98 <__sinit+0x2c>)
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d1f5      	bne.n	801cf78 <__sinit+0xc>
 801cf8c:	f7ff ffc4 	bl	801cf18 <global_stdio_init.part.0>
 801cf90:	e7f2      	b.n	801cf78 <__sinit+0xc>
 801cf92:	bf00      	nop
 801cf94:	0801ced9 	.word	0x0801ced9
 801cf98:	20018350 	.word	0x20018350

0801cf9c <fiprintf>:
 801cf9c:	b40e      	push	{r1, r2, r3}
 801cf9e:	b503      	push	{r0, r1, lr}
 801cfa0:	4601      	mov	r1, r0
 801cfa2:	ab03      	add	r3, sp, #12
 801cfa4:	4805      	ldr	r0, [pc, #20]	@ (801cfbc <fiprintf+0x20>)
 801cfa6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfaa:	6800      	ldr	r0, [r0, #0]
 801cfac:	9301      	str	r3, [sp, #4]
 801cfae:	f001 ff21 	bl	801edf4 <_vfiprintf_r>
 801cfb2:	b002      	add	sp, #8
 801cfb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfb8:	b003      	add	sp, #12
 801cfba:	4770      	bx	lr
 801cfbc:	200026b0 	.word	0x200026b0

0801cfc0 <_fwalk_sglue>:
 801cfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfc4:	4607      	mov	r7, r0
 801cfc6:	4688      	mov	r8, r1
 801cfc8:	4614      	mov	r4, r2
 801cfca:	2600      	movs	r6, #0
 801cfcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cfd0:	f1b9 0901 	subs.w	r9, r9, #1
 801cfd4:	d505      	bpl.n	801cfe2 <_fwalk_sglue+0x22>
 801cfd6:	6824      	ldr	r4, [r4, #0]
 801cfd8:	2c00      	cmp	r4, #0
 801cfda:	d1f7      	bne.n	801cfcc <_fwalk_sglue+0xc>
 801cfdc:	4630      	mov	r0, r6
 801cfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfe2:	89ab      	ldrh	r3, [r5, #12]
 801cfe4:	2b01      	cmp	r3, #1
 801cfe6:	d907      	bls.n	801cff8 <_fwalk_sglue+0x38>
 801cfe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cfec:	3301      	adds	r3, #1
 801cfee:	d003      	beq.n	801cff8 <_fwalk_sglue+0x38>
 801cff0:	4629      	mov	r1, r5
 801cff2:	4638      	mov	r0, r7
 801cff4:	47c0      	blx	r8
 801cff6:	4306      	orrs	r6, r0
 801cff8:	3568      	adds	r5, #104	@ 0x68
 801cffa:	e7e9      	b.n	801cfd0 <_fwalk_sglue+0x10>

0801cffc <_fwrite_r>:
 801cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d000:	9c08      	ldr	r4, [sp, #32]
 801d002:	468a      	mov	sl, r1
 801d004:	4690      	mov	r8, r2
 801d006:	fb02 f903 	mul.w	r9, r2, r3
 801d00a:	4606      	mov	r6, r0
 801d00c:	b118      	cbz	r0, 801d016 <_fwrite_r+0x1a>
 801d00e:	6a03      	ldr	r3, [r0, #32]
 801d010:	b90b      	cbnz	r3, 801d016 <_fwrite_r+0x1a>
 801d012:	f7ff ffab 	bl	801cf6c <__sinit>
 801d016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d018:	07dd      	lsls	r5, r3, #31
 801d01a:	d405      	bmi.n	801d028 <_fwrite_r+0x2c>
 801d01c:	89a3      	ldrh	r3, [r4, #12]
 801d01e:	0598      	lsls	r0, r3, #22
 801d020:	d402      	bmi.n	801d028 <_fwrite_r+0x2c>
 801d022:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d024:	f000 fb17 	bl	801d656 <__retarget_lock_acquire_recursive>
 801d028:	89a3      	ldrh	r3, [r4, #12]
 801d02a:	0719      	lsls	r1, r3, #28
 801d02c:	d516      	bpl.n	801d05c <_fwrite_r+0x60>
 801d02e:	6923      	ldr	r3, [r4, #16]
 801d030:	b1a3      	cbz	r3, 801d05c <_fwrite_r+0x60>
 801d032:	2500      	movs	r5, #0
 801d034:	454d      	cmp	r5, r9
 801d036:	d01f      	beq.n	801d078 <_fwrite_r+0x7c>
 801d038:	68a7      	ldr	r7, [r4, #8]
 801d03a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d03e:	3f01      	subs	r7, #1
 801d040:	2f00      	cmp	r7, #0
 801d042:	60a7      	str	r7, [r4, #8]
 801d044:	da04      	bge.n	801d050 <_fwrite_r+0x54>
 801d046:	69a3      	ldr	r3, [r4, #24]
 801d048:	429f      	cmp	r7, r3
 801d04a:	db0f      	blt.n	801d06c <_fwrite_r+0x70>
 801d04c:	290a      	cmp	r1, #10
 801d04e:	d00d      	beq.n	801d06c <_fwrite_r+0x70>
 801d050:	6823      	ldr	r3, [r4, #0]
 801d052:	1c5a      	adds	r2, r3, #1
 801d054:	6022      	str	r2, [r4, #0]
 801d056:	7019      	strb	r1, [r3, #0]
 801d058:	3501      	adds	r5, #1
 801d05a:	e7eb      	b.n	801d034 <_fwrite_r+0x38>
 801d05c:	4621      	mov	r1, r4
 801d05e:	4630      	mov	r0, r6
 801d060:	f000 f9a4 	bl	801d3ac <__swsetup_r>
 801d064:	2800      	cmp	r0, #0
 801d066:	d0e4      	beq.n	801d032 <_fwrite_r+0x36>
 801d068:	2500      	movs	r5, #0
 801d06a:	e005      	b.n	801d078 <_fwrite_r+0x7c>
 801d06c:	4622      	mov	r2, r4
 801d06e:	4630      	mov	r0, r6
 801d070:	f000 f95e 	bl	801d330 <__swbuf_r>
 801d074:	3001      	adds	r0, #1
 801d076:	d1ef      	bne.n	801d058 <_fwrite_r+0x5c>
 801d078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d07a:	07da      	lsls	r2, r3, #31
 801d07c:	d405      	bmi.n	801d08a <_fwrite_r+0x8e>
 801d07e:	89a3      	ldrh	r3, [r4, #12]
 801d080:	059b      	lsls	r3, r3, #22
 801d082:	d402      	bmi.n	801d08a <_fwrite_r+0x8e>
 801d084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d086:	f000 fae7 	bl	801d658 <__retarget_lock_release_recursive>
 801d08a:	fbb5 f0f8 	udiv	r0, r5, r8
 801d08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d094 <fwrite>:
 801d094:	b507      	push	{r0, r1, r2, lr}
 801d096:	9300      	str	r3, [sp, #0]
 801d098:	4613      	mov	r3, r2
 801d09a:	460a      	mov	r2, r1
 801d09c:	4601      	mov	r1, r0
 801d09e:	4803      	ldr	r0, [pc, #12]	@ (801d0ac <fwrite+0x18>)
 801d0a0:	6800      	ldr	r0, [r0, #0]
 801d0a2:	f7ff ffab 	bl	801cffc <_fwrite_r>
 801d0a6:	b003      	add	sp, #12
 801d0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0ac:	200026b0 	.word	0x200026b0

0801d0b0 <iprintf>:
 801d0b0:	b40f      	push	{r0, r1, r2, r3}
 801d0b2:	b507      	push	{r0, r1, r2, lr}
 801d0b4:	4906      	ldr	r1, [pc, #24]	@ (801d0d0 <iprintf+0x20>)
 801d0b6:	ab04      	add	r3, sp, #16
 801d0b8:	6808      	ldr	r0, [r1, #0]
 801d0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0be:	6881      	ldr	r1, [r0, #8]
 801d0c0:	9301      	str	r3, [sp, #4]
 801d0c2:	f001 fe97 	bl	801edf4 <_vfiprintf_r>
 801d0c6:	b003      	add	sp, #12
 801d0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0cc:	b004      	add	sp, #16
 801d0ce:	4770      	bx	lr
 801d0d0:	200026b0 	.word	0x200026b0

0801d0d4 <_puts_r>:
 801d0d4:	6a03      	ldr	r3, [r0, #32]
 801d0d6:	b570      	push	{r4, r5, r6, lr}
 801d0d8:	6884      	ldr	r4, [r0, #8]
 801d0da:	4605      	mov	r5, r0
 801d0dc:	460e      	mov	r6, r1
 801d0de:	b90b      	cbnz	r3, 801d0e4 <_puts_r+0x10>
 801d0e0:	f7ff ff44 	bl	801cf6c <__sinit>
 801d0e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d0e6:	07db      	lsls	r3, r3, #31
 801d0e8:	d405      	bmi.n	801d0f6 <_puts_r+0x22>
 801d0ea:	89a3      	ldrh	r3, [r4, #12]
 801d0ec:	0598      	lsls	r0, r3, #22
 801d0ee:	d402      	bmi.n	801d0f6 <_puts_r+0x22>
 801d0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d0f2:	f000 fab0 	bl	801d656 <__retarget_lock_acquire_recursive>
 801d0f6:	89a3      	ldrh	r3, [r4, #12]
 801d0f8:	0719      	lsls	r1, r3, #28
 801d0fa:	d502      	bpl.n	801d102 <_puts_r+0x2e>
 801d0fc:	6923      	ldr	r3, [r4, #16]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d135      	bne.n	801d16e <_puts_r+0x9a>
 801d102:	4621      	mov	r1, r4
 801d104:	4628      	mov	r0, r5
 801d106:	f000 f951 	bl	801d3ac <__swsetup_r>
 801d10a:	b380      	cbz	r0, 801d16e <_puts_r+0x9a>
 801d10c:	f04f 35ff 	mov.w	r5, #4294967295
 801d110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d112:	07da      	lsls	r2, r3, #31
 801d114:	d405      	bmi.n	801d122 <_puts_r+0x4e>
 801d116:	89a3      	ldrh	r3, [r4, #12]
 801d118:	059b      	lsls	r3, r3, #22
 801d11a:	d402      	bmi.n	801d122 <_puts_r+0x4e>
 801d11c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d11e:	f000 fa9b 	bl	801d658 <__retarget_lock_release_recursive>
 801d122:	4628      	mov	r0, r5
 801d124:	bd70      	pop	{r4, r5, r6, pc}
 801d126:	2b00      	cmp	r3, #0
 801d128:	da04      	bge.n	801d134 <_puts_r+0x60>
 801d12a:	69a2      	ldr	r2, [r4, #24]
 801d12c:	429a      	cmp	r2, r3
 801d12e:	dc17      	bgt.n	801d160 <_puts_r+0x8c>
 801d130:	290a      	cmp	r1, #10
 801d132:	d015      	beq.n	801d160 <_puts_r+0x8c>
 801d134:	6823      	ldr	r3, [r4, #0]
 801d136:	1c5a      	adds	r2, r3, #1
 801d138:	6022      	str	r2, [r4, #0]
 801d13a:	7019      	strb	r1, [r3, #0]
 801d13c:	68a3      	ldr	r3, [r4, #8]
 801d13e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d142:	3b01      	subs	r3, #1
 801d144:	60a3      	str	r3, [r4, #8]
 801d146:	2900      	cmp	r1, #0
 801d148:	d1ed      	bne.n	801d126 <_puts_r+0x52>
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	da11      	bge.n	801d172 <_puts_r+0x9e>
 801d14e:	4622      	mov	r2, r4
 801d150:	210a      	movs	r1, #10
 801d152:	4628      	mov	r0, r5
 801d154:	f000 f8ec 	bl	801d330 <__swbuf_r>
 801d158:	3001      	adds	r0, #1
 801d15a:	d0d7      	beq.n	801d10c <_puts_r+0x38>
 801d15c:	250a      	movs	r5, #10
 801d15e:	e7d7      	b.n	801d110 <_puts_r+0x3c>
 801d160:	4622      	mov	r2, r4
 801d162:	4628      	mov	r0, r5
 801d164:	f000 f8e4 	bl	801d330 <__swbuf_r>
 801d168:	3001      	adds	r0, #1
 801d16a:	d1e7      	bne.n	801d13c <_puts_r+0x68>
 801d16c:	e7ce      	b.n	801d10c <_puts_r+0x38>
 801d16e:	3e01      	subs	r6, #1
 801d170:	e7e4      	b.n	801d13c <_puts_r+0x68>
 801d172:	6823      	ldr	r3, [r4, #0]
 801d174:	1c5a      	adds	r2, r3, #1
 801d176:	6022      	str	r2, [r4, #0]
 801d178:	220a      	movs	r2, #10
 801d17a:	701a      	strb	r2, [r3, #0]
 801d17c:	e7ee      	b.n	801d15c <_puts_r+0x88>
	...

0801d180 <puts>:
 801d180:	4b02      	ldr	r3, [pc, #8]	@ (801d18c <puts+0xc>)
 801d182:	4601      	mov	r1, r0
 801d184:	6818      	ldr	r0, [r3, #0]
 801d186:	f7ff bfa5 	b.w	801d0d4 <_puts_r>
 801d18a:	bf00      	nop
 801d18c:	200026b0 	.word	0x200026b0

0801d190 <sniprintf>:
 801d190:	b40c      	push	{r2, r3}
 801d192:	b530      	push	{r4, r5, lr}
 801d194:	4b17      	ldr	r3, [pc, #92]	@ (801d1f4 <sniprintf+0x64>)
 801d196:	1e0c      	subs	r4, r1, #0
 801d198:	681d      	ldr	r5, [r3, #0]
 801d19a:	b09d      	sub	sp, #116	@ 0x74
 801d19c:	da08      	bge.n	801d1b0 <sniprintf+0x20>
 801d19e:	238b      	movs	r3, #139	@ 0x8b
 801d1a0:	602b      	str	r3, [r5, #0]
 801d1a2:	f04f 30ff 	mov.w	r0, #4294967295
 801d1a6:	b01d      	add	sp, #116	@ 0x74
 801d1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1ac:	b002      	add	sp, #8
 801d1ae:	4770      	bx	lr
 801d1b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d1b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d1b8:	bf14      	ite	ne
 801d1ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d1be:	4623      	moveq	r3, r4
 801d1c0:	9304      	str	r3, [sp, #16]
 801d1c2:	9307      	str	r3, [sp, #28]
 801d1c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d1c8:	9002      	str	r0, [sp, #8]
 801d1ca:	9006      	str	r0, [sp, #24]
 801d1cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d1d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d1d2:	ab21      	add	r3, sp, #132	@ 0x84
 801d1d4:	a902      	add	r1, sp, #8
 801d1d6:	4628      	mov	r0, r5
 801d1d8:	9301      	str	r3, [sp, #4]
 801d1da:	f001 fce5 	bl	801eba8 <_svfiprintf_r>
 801d1de:	1c43      	adds	r3, r0, #1
 801d1e0:	bfbc      	itt	lt
 801d1e2:	238b      	movlt	r3, #139	@ 0x8b
 801d1e4:	602b      	strlt	r3, [r5, #0]
 801d1e6:	2c00      	cmp	r4, #0
 801d1e8:	d0dd      	beq.n	801d1a6 <sniprintf+0x16>
 801d1ea:	9b02      	ldr	r3, [sp, #8]
 801d1ec:	2200      	movs	r2, #0
 801d1ee:	701a      	strb	r2, [r3, #0]
 801d1f0:	e7d9      	b.n	801d1a6 <sniprintf+0x16>
 801d1f2:	bf00      	nop
 801d1f4:	200026b0 	.word	0x200026b0

0801d1f8 <siprintf>:
 801d1f8:	b40e      	push	{r1, r2, r3}
 801d1fa:	b500      	push	{lr}
 801d1fc:	b09c      	sub	sp, #112	@ 0x70
 801d1fe:	ab1d      	add	r3, sp, #116	@ 0x74
 801d200:	9002      	str	r0, [sp, #8]
 801d202:	9006      	str	r0, [sp, #24]
 801d204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d208:	4809      	ldr	r0, [pc, #36]	@ (801d230 <siprintf+0x38>)
 801d20a:	9107      	str	r1, [sp, #28]
 801d20c:	9104      	str	r1, [sp, #16]
 801d20e:	4909      	ldr	r1, [pc, #36]	@ (801d234 <siprintf+0x3c>)
 801d210:	f853 2b04 	ldr.w	r2, [r3], #4
 801d214:	9105      	str	r1, [sp, #20]
 801d216:	6800      	ldr	r0, [r0, #0]
 801d218:	9301      	str	r3, [sp, #4]
 801d21a:	a902      	add	r1, sp, #8
 801d21c:	f001 fcc4 	bl	801eba8 <_svfiprintf_r>
 801d220:	9b02      	ldr	r3, [sp, #8]
 801d222:	2200      	movs	r2, #0
 801d224:	701a      	strb	r2, [r3, #0]
 801d226:	b01c      	add	sp, #112	@ 0x70
 801d228:	f85d eb04 	ldr.w	lr, [sp], #4
 801d22c:	b003      	add	sp, #12
 801d22e:	4770      	bx	lr
 801d230:	200026b0 	.word	0x200026b0
 801d234:	ffff0208 	.word	0xffff0208

0801d238 <__sread>:
 801d238:	b510      	push	{r4, lr}
 801d23a:	460c      	mov	r4, r1
 801d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d240:	f000 f9aa 	bl	801d598 <_read_r>
 801d244:	2800      	cmp	r0, #0
 801d246:	bfab      	itete	ge
 801d248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d24a:	89a3      	ldrhlt	r3, [r4, #12]
 801d24c:	181b      	addge	r3, r3, r0
 801d24e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d252:	bfac      	ite	ge
 801d254:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d256:	81a3      	strhlt	r3, [r4, #12]
 801d258:	bd10      	pop	{r4, pc}

0801d25a <__swrite>:
 801d25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d25e:	461f      	mov	r7, r3
 801d260:	898b      	ldrh	r3, [r1, #12]
 801d262:	05db      	lsls	r3, r3, #23
 801d264:	4605      	mov	r5, r0
 801d266:	460c      	mov	r4, r1
 801d268:	4616      	mov	r6, r2
 801d26a:	d505      	bpl.n	801d278 <__swrite+0x1e>
 801d26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d270:	2302      	movs	r3, #2
 801d272:	2200      	movs	r2, #0
 801d274:	f000 f97e 	bl	801d574 <_lseek_r>
 801d278:	89a3      	ldrh	r3, [r4, #12]
 801d27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d27e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d282:	81a3      	strh	r3, [r4, #12]
 801d284:	4632      	mov	r2, r6
 801d286:	463b      	mov	r3, r7
 801d288:	4628      	mov	r0, r5
 801d28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d28e:	f000 b9a5 	b.w	801d5dc <_write_r>

0801d292 <__sseek>:
 801d292:	b510      	push	{r4, lr}
 801d294:	460c      	mov	r4, r1
 801d296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d29a:	f000 f96b 	bl	801d574 <_lseek_r>
 801d29e:	1c43      	adds	r3, r0, #1
 801d2a0:	89a3      	ldrh	r3, [r4, #12]
 801d2a2:	bf15      	itete	ne
 801d2a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d2a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d2aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d2ae:	81a3      	strheq	r3, [r4, #12]
 801d2b0:	bf18      	it	ne
 801d2b2:	81a3      	strhne	r3, [r4, #12]
 801d2b4:	bd10      	pop	{r4, pc}

0801d2b6 <__sclose>:
 801d2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2ba:	f000 b94b 	b.w	801d554 <_close_r>

0801d2be <_vsniprintf_r>:
 801d2be:	b530      	push	{r4, r5, lr}
 801d2c0:	4614      	mov	r4, r2
 801d2c2:	2c00      	cmp	r4, #0
 801d2c4:	b09b      	sub	sp, #108	@ 0x6c
 801d2c6:	4605      	mov	r5, r0
 801d2c8:	461a      	mov	r2, r3
 801d2ca:	da05      	bge.n	801d2d8 <_vsniprintf_r+0x1a>
 801d2cc:	238b      	movs	r3, #139	@ 0x8b
 801d2ce:	6003      	str	r3, [r0, #0]
 801d2d0:	f04f 30ff 	mov.w	r0, #4294967295
 801d2d4:	b01b      	add	sp, #108	@ 0x6c
 801d2d6:	bd30      	pop	{r4, r5, pc}
 801d2d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d2dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d2e0:	bf14      	ite	ne
 801d2e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d2e6:	4623      	moveq	r3, r4
 801d2e8:	9302      	str	r3, [sp, #8]
 801d2ea:	9305      	str	r3, [sp, #20]
 801d2ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d2f0:	9100      	str	r1, [sp, #0]
 801d2f2:	9104      	str	r1, [sp, #16]
 801d2f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d2f8:	4669      	mov	r1, sp
 801d2fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d2fc:	f001 fc54 	bl	801eba8 <_svfiprintf_r>
 801d300:	1c43      	adds	r3, r0, #1
 801d302:	bfbc      	itt	lt
 801d304:	238b      	movlt	r3, #139	@ 0x8b
 801d306:	602b      	strlt	r3, [r5, #0]
 801d308:	2c00      	cmp	r4, #0
 801d30a:	d0e3      	beq.n	801d2d4 <_vsniprintf_r+0x16>
 801d30c:	9b00      	ldr	r3, [sp, #0]
 801d30e:	2200      	movs	r2, #0
 801d310:	701a      	strb	r2, [r3, #0]
 801d312:	e7df      	b.n	801d2d4 <_vsniprintf_r+0x16>

0801d314 <vsniprintf>:
 801d314:	b507      	push	{r0, r1, r2, lr}
 801d316:	9300      	str	r3, [sp, #0]
 801d318:	4613      	mov	r3, r2
 801d31a:	460a      	mov	r2, r1
 801d31c:	4601      	mov	r1, r0
 801d31e:	4803      	ldr	r0, [pc, #12]	@ (801d32c <vsniprintf+0x18>)
 801d320:	6800      	ldr	r0, [r0, #0]
 801d322:	f7ff ffcc 	bl	801d2be <_vsniprintf_r>
 801d326:	b003      	add	sp, #12
 801d328:	f85d fb04 	ldr.w	pc, [sp], #4
 801d32c:	200026b0 	.word	0x200026b0

0801d330 <__swbuf_r>:
 801d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d332:	460e      	mov	r6, r1
 801d334:	4614      	mov	r4, r2
 801d336:	4605      	mov	r5, r0
 801d338:	b118      	cbz	r0, 801d342 <__swbuf_r+0x12>
 801d33a:	6a03      	ldr	r3, [r0, #32]
 801d33c:	b90b      	cbnz	r3, 801d342 <__swbuf_r+0x12>
 801d33e:	f7ff fe15 	bl	801cf6c <__sinit>
 801d342:	69a3      	ldr	r3, [r4, #24]
 801d344:	60a3      	str	r3, [r4, #8]
 801d346:	89a3      	ldrh	r3, [r4, #12]
 801d348:	071a      	lsls	r2, r3, #28
 801d34a:	d501      	bpl.n	801d350 <__swbuf_r+0x20>
 801d34c:	6923      	ldr	r3, [r4, #16]
 801d34e:	b943      	cbnz	r3, 801d362 <__swbuf_r+0x32>
 801d350:	4621      	mov	r1, r4
 801d352:	4628      	mov	r0, r5
 801d354:	f000 f82a 	bl	801d3ac <__swsetup_r>
 801d358:	b118      	cbz	r0, 801d362 <__swbuf_r+0x32>
 801d35a:	f04f 37ff 	mov.w	r7, #4294967295
 801d35e:	4638      	mov	r0, r7
 801d360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d362:	6823      	ldr	r3, [r4, #0]
 801d364:	6922      	ldr	r2, [r4, #16]
 801d366:	1a98      	subs	r0, r3, r2
 801d368:	6963      	ldr	r3, [r4, #20]
 801d36a:	b2f6      	uxtb	r6, r6
 801d36c:	4283      	cmp	r3, r0
 801d36e:	4637      	mov	r7, r6
 801d370:	dc05      	bgt.n	801d37e <__swbuf_r+0x4e>
 801d372:	4621      	mov	r1, r4
 801d374:	4628      	mov	r0, r5
 801d376:	f001 fed9 	bl	801f12c <_fflush_r>
 801d37a:	2800      	cmp	r0, #0
 801d37c:	d1ed      	bne.n	801d35a <__swbuf_r+0x2a>
 801d37e:	68a3      	ldr	r3, [r4, #8]
 801d380:	3b01      	subs	r3, #1
 801d382:	60a3      	str	r3, [r4, #8]
 801d384:	6823      	ldr	r3, [r4, #0]
 801d386:	1c5a      	adds	r2, r3, #1
 801d388:	6022      	str	r2, [r4, #0]
 801d38a:	701e      	strb	r6, [r3, #0]
 801d38c:	6962      	ldr	r2, [r4, #20]
 801d38e:	1c43      	adds	r3, r0, #1
 801d390:	429a      	cmp	r2, r3
 801d392:	d004      	beq.n	801d39e <__swbuf_r+0x6e>
 801d394:	89a3      	ldrh	r3, [r4, #12]
 801d396:	07db      	lsls	r3, r3, #31
 801d398:	d5e1      	bpl.n	801d35e <__swbuf_r+0x2e>
 801d39a:	2e0a      	cmp	r6, #10
 801d39c:	d1df      	bne.n	801d35e <__swbuf_r+0x2e>
 801d39e:	4621      	mov	r1, r4
 801d3a0:	4628      	mov	r0, r5
 801d3a2:	f001 fec3 	bl	801f12c <_fflush_r>
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	d0d9      	beq.n	801d35e <__swbuf_r+0x2e>
 801d3aa:	e7d6      	b.n	801d35a <__swbuf_r+0x2a>

0801d3ac <__swsetup_r>:
 801d3ac:	b538      	push	{r3, r4, r5, lr}
 801d3ae:	4b29      	ldr	r3, [pc, #164]	@ (801d454 <__swsetup_r+0xa8>)
 801d3b0:	4605      	mov	r5, r0
 801d3b2:	6818      	ldr	r0, [r3, #0]
 801d3b4:	460c      	mov	r4, r1
 801d3b6:	b118      	cbz	r0, 801d3c0 <__swsetup_r+0x14>
 801d3b8:	6a03      	ldr	r3, [r0, #32]
 801d3ba:	b90b      	cbnz	r3, 801d3c0 <__swsetup_r+0x14>
 801d3bc:	f7ff fdd6 	bl	801cf6c <__sinit>
 801d3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3c4:	0719      	lsls	r1, r3, #28
 801d3c6:	d422      	bmi.n	801d40e <__swsetup_r+0x62>
 801d3c8:	06da      	lsls	r2, r3, #27
 801d3ca:	d407      	bmi.n	801d3dc <__swsetup_r+0x30>
 801d3cc:	2209      	movs	r2, #9
 801d3ce:	602a      	str	r2, [r5, #0]
 801d3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3d4:	81a3      	strh	r3, [r4, #12]
 801d3d6:	f04f 30ff 	mov.w	r0, #4294967295
 801d3da:	e033      	b.n	801d444 <__swsetup_r+0x98>
 801d3dc:	0758      	lsls	r0, r3, #29
 801d3de:	d512      	bpl.n	801d406 <__swsetup_r+0x5a>
 801d3e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d3e2:	b141      	cbz	r1, 801d3f6 <__swsetup_r+0x4a>
 801d3e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d3e8:	4299      	cmp	r1, r3
 801d3ea:	d002      	beq.n	801d3f2 <__swsetup_r+0x46>
 801d3ec:	4628      	mov	r0, r5
 801d3ee:	f000 ffab 	bl	801e348 <_free_r>
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d3f6:	89a3      	ldrh	r3, [r4, #12]
 801d3f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d3fc:	81a3      	strh	r3, [r4, #12]
 801d3fe:	2300      	movs	r3, #0
 801d400:	6063      	str	r3, [r4, #4]
 801d402:	6923      	ldr	r3, [r4, #16]
 801d404:	6023      	str	r3, [r4, #0]
 801d406:	89a3      	ldrh	r3, [r4, #12]
 801d408:	f043 0308 	orr.w	r3, r3, #8
 801d40c:	81a3      	strh	r3, [r4, #12]
 801d40e:	6923      	ldr	r3, [r4, #16]
 801d410:	b94b      	cbnz	r3, 801d426 <__swsetup_r+0x7a>
 801d412:	89a3      	ldrh	r3, [r4, #12]
 801d414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d41c:	d003      	beq.n	801d426 <__swsetup_r+0x7a>
 801d41e:	4621      	mov	r1, r4
 801d420:	4628      	mov	r0, r5
 801d422:	f001 fed1 	bl	801f1c8 <__smakebuf_r>
 801d426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d42a:	f013 0201 	ands.w	r2, r3, #1
 801d42e:	d00a      	beq.n	801d446 <__swsetup_r+0x9a>
 801d430:	2200      	movs	r2, #0
 801d432:	60a2      	str	r2, [r4, #8]
 801d434:	6962      	ldr	r2, [r4, #20]
 801d436:	4252      	negs	r2, r2
 801d438:	61a2      	str	r2, [r4, #24]
 801d43a:	6922      	ldr	r2, [r4, #16]
 801d43c:	b942      	cbnz	r2, 801d450 <__swsetup_r+0xa4>
 801d43e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d442:	d1c5      	bne.n	801d3d0 <__swsetup_r+0x24>
 801d444:	bd38      	pop	{r3, r4, r5, pc}
 801d446:	0799      	lsls	r1, r3, #30
 801d448:	bf58      	it	pl
 801d44a:	6962      	ldrpl	r2, [r4, #20]
 801d44c:	60a2      	str	r2, [r4, #8]
 801d44e:	e7f4      	b.n	801d43a <__swsetup_r+0x8e>
 801d450:	2000      	movs	r0, #0
 801d452:	e7f7      	b.n	801d444 <__swsetup_r+0x98>
 801d454:	200026b0 	.word	0x200026b0

0801d458 <memcmp>:
 801d458:	b510      	push	{r4, lr}
 801d45a:	3901      	subs	r1, #1
 801d45c:	4402      	add	r2, r0
 801d45e:	4290      	cmp	r0, r2
 801d460:	d101      	bne.n	801d466 <memcmp+0xe>
 801d462:	2000      	movs	r0, #0
 801d464:	e005      	b.n	801d472 <memcmp+0x1a>
 801d466:	7803      	ldrb	r3, [r0, #0]
 801d468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d46c:	42a3      	cmp	r3, r4
 801d46e:	d001      	beq.n	801d474 <memcmp+0x1c>
 801d470:	1b18      	subs	r0, r3, r4
 801d472:	bd10      	pop	{r4, pc}
 801d474:	3001      	adds	r0, #1
 801d476:	e7f2      	b.n	801d45e <memcmp+0x6>

0801d478 <memmove>:
 801d478:	4288      	cmp	r0, r1
 801d47a:	b510      	push	{r4, lr}
 801d47c:	eb01 0402 	add.w	r4, r1, r2
 801d480:	d902      	bls.n	801d488 <memmove+0x10>
 801d482:	4284      	cmp	r4, r0
 801d484:	4623      	mov	r3, r4
 801d486:	d807      	bhi.n	801d498 <memmove+0x20>
 801d488:	1e43      	subs	r3, r0, #1
 801d48a:	42a1      	cmp	r1, r4
 801d48c:	d008      	beq.n	801d4a0 <memmove+0x28>
 801d48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d492:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d496:	e7f8      	b.n	801d48a <memmove+0x12>
 801d498:	4402      	add	r2, r0
 801d49a:	4601      	mov	r1, r0
 801d49c:	428a      	cmp	r2, r1
 801d49e:	d100      	bne.n	801d4a2 <memmove+0x2a>
 801d4a0:	bd10      	pop	{r4, pc}
 801d4a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d4a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d4aa:	e7f7      	b.n	801d49c <memmove+0x24>

0801d4ac <memset>:
 801d4ac:	4402      	add	r2, r0
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	4293      	cmp	r3, r2
 801d4b2:	d100      	bne.n	801d4b6 <memset+0xa>
 801d4b4:	4770      	bx	lr
 801d4b6:	f803 1b01 	strb.w	r1, [r3], #1
 801d4ba:	e7f9      	b.n	801d4b0 <memset+0x4>

0801d4bc <strchr>:
 801d4bc:	b2c9      	uxtb	r1, r1
 801d4be:	4603      	mov	r3, r0
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4c6:	b112      	cbz	r2, 801d4ce <strchr+0x12>
 801d4c8:	428a      	cmp	r2, r1
 801d4ca:	d1f9      	bne.n	801d4c0 <strchr+0x4>
 801d4cc:	4770      	bx	lr
 801d4ce:	2900      	cmp	r1, #0
 801d4d0:	bf18      	it	ne
 801d4d2:	2000      	movne	r0, #0
 801d4d4:	4770      	bx	lr

0801d4d6 <strncmp>:
 801d4d6:	b510      	push	{r4, lr}
 801d4d8:	b16a      	cbz	r2, 801d4f6 <strncmp+0x20>
 801d4da:	3901      	subs	r1, #1
 801d4dc:	1884      	adds	r4, r0, r2
 801d4de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d4e6:	429a      	cmp	r2, r3
 801d4e8:	d103      	bne.n	801d4f2 <strncmp+0x1c>
 801d4ea:	42a0      	cmp	r0, r4
 801d4ec:	d001      	beq.n	801d4f2 <strncmp+0x1c>
 801d4ee:	2a00      	cmp	r2, #0
 801d4f0:	d1f5      	bne.n	801d4de <strncmp+0x8>
 801d4f2:	1ad0      	subs	r0, r2, r3
 801d4f4:	bd10      	pop	{r4, pc}
 801d4f6:	4610      	mov	r0, r2
 801d4f8:	e7fc      	b.n	801d4f4 <strncmp+0x1e>

0801d4fa <strncpy>:
 801d4fa:	b510      	push	{r4, lr}
 801d4fc:	3901      	subs	r1, #1
 801d4fe:	4603      	mov	r3, r0
 801d500:	b132      	cbz	r2, 801d510 <strncpy+0x16>
 801d502:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d506:	f803 4b01 	strb.w	r4, [r3], #1
 801d50a:	3a01      	subs	r2, #1
 801d50c:	2c00      	cmp	r4, #0
 801d50e:	d1f7      	bne.n	801d500 <strncpy+0x6>
 801d510:	441a      	add	r2, r3
 801d512:	2100      	movs	r1, #0
 801d514:	4293      	cmp	r3, r2
 801d516:	d100      	bne.n	801d51a <strncpy+0x20>
 801d518:	bd10      	pop	{r4, pc}
 801d51a:	f803 1b01 	strb.w	r1, [r3], #1
 801d51e:	e7f9      	b.n	801d514 <strncpy+0x1a>

0801d520 <strstr>:
 801d520:	780a      	ldrb	r2, [r1, #0]
 801d522:	b570      	push	{r4, r5, r6, lr}
 801d524:	b96a      	cbnz	r2, 801d542 <strstr+0x22>
 801d526:	bd70      	pop	{r4, r5, r6, pc}
 801d528:	429a      	cmp	r2, r3
 801d52a:	d109      	bne.n	801d540 <strstr+0x20>
 801d52c:	460c      	mov	r4, r1
 801d52e:	4605      	mov	r5, r0
 801d530:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d534:	2b00      	cmp	r3, #0
 801d536:	d0f6      	beq.n	801d526 <strstr+0x6>
 801d538:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d53c:	429e      	cmp	r6, r3
 801d53e:	d0f7      	beq.n	801d530 <strstr+0x10>
 801d540:	3001      	adds	r0, #1
 801d542:	7803      	ldrb	r3, [r0, #0]
 801d544:	2b00      	cmp	r3, #0
 801d546:	d1ef      	bne.n	801d528 <strstr+0x8>
 801d548:	4618      	mov	r0, r3
 801d54a:	e7ec      	b.n	801d526 <strstr+0x6>

0801d54c <_localeconv_r>:
 801d54c:	4800      	ldr	r0, [pc, #0]	@ (801d550 <_localeconv_r+0x4>)
 801d54e:	4770      	bx	lr
 801d550:	200027f0 	.word	0x200027f0

0801d554 <_close_r>:
 801d554:	b538      	push	{r3, r4, r5, lr}
 801d556:	4d06      	ldr	r5, [pc, #24]	@ (801d570 <_close_r+0x1c>)
 801d558:	2300      	movs	r3, #0
 801d55a:	4604      	mov	r4, r0
 801d55c:	4608      	mov	r0, r1
 801d55e:	602b      	str	r3, [r5, #0]
 801d560:	f7e7 fdce 	bl	8005100 <_close>
 801d564:	1c43      	adds	r3, r0, #1
 801d566:	d102      	bne.n	801d56e <_close_r+0x1a>
 801d568:	682b      	ldr	r3, [r5, #0]
 801d56a:	b103      	cbz	r3, 801d56e <_close_r+0x1a>
 801d56c:	6023      	str	r3, [r4, #0]
 801d56e:	bd38      	pop	{r3, r4, r5, pc}
 801d570:	20018354 	.word	0x20018354

0801d574 <_lseek_r>:
 801d574:	b538      	push	{r3, r4, r5, lr}
 801d576:	4d07      	ldr	r5, [pc, #28]	@ (801d594 <_lseek_r+0x20>)
 801d578:	4604      	mov	r4, r0
 801d57a:	4608      	mov	r0, r1
 801d57c:	4611      	mov	r1, r2
 801d57e:	2200      	movs	r2, #0
 801d580:	602a      	str	r2, [r5, #0]
 801d582:	461a      	mov	r2, r3
 801d584:	f7e7 fde3 	bl	800514e <_lseek>
 801d588:	1c43      	adds	r3, r0, #1
 801d58a:	d102      	bne.n	801d592 <_lseek_r+0x1e>
 801d58c:	682b      	ldr	r3, [r5, #0]
 801d58e:	b103      	cbz	r3, 801d592 <_lseek_r+0x1e>
 801d590:	6023      	str	r3, [r4, #0]
 801d592:	bd38      	pop	{r3, r4, r5, pc}
 801d594:	20018354 	.word	0x20018354

0801d598 <_read_r>:
 801d598:	b538      	push	{r3, r4, r5, lr}
 801d59a:	4d07      	ldr	r5, [pc, #28]	@ (801d5b8 <_read_r+0x20>)
 801d59c:	4604      	mov	r4, r0
 801d59e:	4608      	mov	r0, r1
 801d5a0:	4611      	mov	r1, r2
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	602a      	str	r2, [r5, #0]
 801d5a6:	461a      	mov	r2, r3
 801d5a8:	f7e7 fd71 	bl	800508e <_read>
 801d5ac:	1c43      	adds	r3, r0, #1
 801d5ae:	d102      	bne.n	801d5b6 <_read_r+0x1e>
 801d5b0:	682b      	ldr	r3, [r5, #0]
 801d5b2:	b103      	cbz	r3, 801d5b6 <_read_r+0x1e>
 801d5b4:	6023      	str	r3, [r4, #0]
 801d5b6:	bd38      	pop	{r3, r4, r5, pc}
 801d5b8:	20018354 	.word	0x20018354

0801d5bc <_sbrk_r>:
 801d5bc:	b538      	push	{r3, r4, r5, lr}
 801d5be:	4d06      	ldr	r5, [pc, #24]	@ (801d5d8 <_sbrk_r+0x1c>)
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	4604      	mov	r4, r0
 801d5c4:	4608      	mov	r0, r1
 801d5c6:	602b      	str	r3, [r5, #0]
 801d5c8:	f7e7 fdce 	bl	8005168 <_sbrk>
 801d5cc:	1c43      	adds	r3, r0, #1
 801d5ce:	d102      	bne.n	801d5d6 <_sbrk_r+0x1a>
 801d5d0:	682b      	ldr	r3, [r5, #0]
 801d5d2:	b103      	cbz	r3, 801d5d6 <_sbrk_r+0x1a>
 801d5d4:	6023      	str	r3, [r4, #0]
 801d5d6:	bd38      	pop	{r3, r4, r5, pc}
 801d5d8:	20018354 	.word	0x20018354

0801d5dc <_write_r>:
 801d5dc:	b538      	push	{r3, r4, r5, lr}
 801d5de:	4d07      	ldr	r5, [pc, #28]	@ (801d5fc <_write_r+0x20>)
 801d5e0:	4604      	mov	r4, r0
 801d5e2:	4608      	mov	r0, r1
 801d5e4:	4611      	mov	r1, r2
 801d5e6:	2200      	movs	r2, #0
 801d5e8:	602a      	str	r2, [r5, #0]
 801d5ea:	461a      	mov	r2, r3
 801d5ec:	f7e7 fd6c 	bl	80050c8 <_write>
 801d5f0:	1c43      	adds	r3, r0, #1
 801d5f2:	d102      	bne.n	801d5fa <_write_r+0x1e>
 801d5f4:	682b      	ldr	r3, [r5, #0]
 801d5f6:	b103      	cbz	r3, 801d5fa <_write_r+0x1e>
 801d5f8:	6023      	str	r3, [r4, #0]
 801d5fa:	bd38      	pop	{r3, r4, r5, pc}
 801d5fc:	20018354 	.word	0x20018354

0801d600 <__errno>:
 801d600:	4b01      	ldr	r3, [pc, #4]	@ (801d608 <__errno+0x8>)
 801d602:	6818      	ldr	r0, [r3, #0]
 801d604:	4770      	bx	lr
 801d606:	bf00      	nop
 801d608:	200026b0 	.word	0x200026b0

0801d60c <__libc_init_array>:
 801d60c:	b570      	push	{r4, r5, r6, lr}
 801d60e:	4d0d      	ldr	r5, [pc, #52]	@ (801d644 <__libc_init_array+0x38>)
 801d610:	4c0d      	ldr	r4, [pc, #52]	@ (801d648 <__libc_init_array+0x3c>)
 801d612:	1b64      	subs	r4, r4, r5
 801d614:	10a4      	asrs	r4, r4, #2
 801d616:	2600      	movs	r6, #0
 801d618:	42a6      	cmp	r6, r4
 801d61a:	d109      	bne.n	801d630 <__libc_init_array+0x24>
 801d61c:	4d0b      	ldr	r5, [pc, #44]	@ (801d64c <__libc_init_array+0x40>)
 801d61e:	4c0c      	ldr	r4, [pc, #48]	@ (801d650 <__libc_init_array+0x44>)
 801d620:	f003 fdce 	bl	80211c0 <_init>
 801d624:	1b64      	subs	r4, r4, r5
 801d626:	10a4      	asrs	r4, r4, #2
 801d628:	2600      	movs	r6, #0
 801d62a:	42a6      	cmp	r6, r4
 801d62c:	d105      	bne.n	801d63a <__libc_init_array+0x2e>
 801d62e:	bd70      	pop	{r4, r5, r6, pc}
 801d630:	f855 3b04 	ldr.w	r3, [r5], #4
 801d634:	4798      	blx	r3
 801d636:	3601      	adds	r6, #1
 801d638:	e7ee      	b.n	801d618 <__libc_init_array+0xc>
 801d63a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d63e:	4798      	blx	r3
 801d640:	3601      	adds	r6, #1
 801d642:	e7f2      	b.n	801d62a <__libc_init_array+0x1e>
 801d644:	08024df8 	.word	0x08024df8
 801d648:	08024df8 	.word	0x08024df8
 801d64c:	08024df8 	.word	0x08024df8
 801d650:	08024e0c 	.word	0x08024e0c

0801d654 <__retarget_lock_init_recursive>:
 801d654:	4770      	bx	lr

0801d656 <__retarget_lock_acquire_recursive>:
 801d656:	4770      	bx	lr

0801d658 <__retarget_lock_release_recursive>:
 801d658:	4770      	bx	lr

0801d65a <strcpy>:
 801d65a:	4603      	mov	r3, r0
 801d65c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d660:	f803 2b01 	strb.w	r2, [r3], #1
 801d664:	2a00      	cmp	r2, #0
 801d666:	d1f9      	bne.n	801d65c <strcpy+0x2>
 801d668:	4770      	bx	lr

0801d66a <memcpy>:
 801d66a:	440a      	add	r2, r1
 801d66c:	4291      	cmp	r1, r2
 801d66e:	f100 33ff 	add.w	r3, r0, #4294967295
 801d672:	d100      	bne.n	801d676 <memcpy+0xc>
 801d674:	4770      	bx	lr
 801d676:	b510      	push	{r4, lr}
 801d678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d67c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d680:	4291      	cmp	r1, r2
 801d682:	d1f9      	bne.n	801d678 <memcpy+0xe>
 801d684:	bd10      	pop	{r4, pc}

0801d686 <abort>:
 801d686:	b508      	push	{r3, lr}
 801d688:	2006      	movs	r0, #6
 801d68a:	f001 fe01 	bl	801f290 <raise>
 801d68e:	2001      	movs	r0, #1
 801d690:	f7e7 fcf2 	bl	8005078 <_exit>

0801d694 <quorem>:
 801d694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d698:	6903      	ldr	r3, [r0, #16]
 801d69a:	690c      	ldr	r4, [r1, #16]
 801d69c:	42a3      	cmp	r3, r4
 801d69e:	4607      	mov	r7, r0
 801d6a0:	db7e      	blt.n	801d7a0 <quorem+0x10c>
 801d6a2:	3c01      	subs	r4, #1
 801d6a4:	f101 0814 	add.w	r8, r1, #20
 801d6a8:	00a3      	lsls	r3, r4, #2
 801d6aa:	f100 0514 	add.w	r5, r0, #20
 801d6ae:	9300      	str	r3, [sp, #0]
 801d6b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d6b4:	9301      	str	r3, [sp, #4]
 801d6b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d6ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d6be:	3301      	adds	r3, #1
 801d6c0:	429a      	cmp	r2, r3
 801d6c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d6c6:	fbb2 f6f3 	udiv	r6, r2, r3
 801d6ca:	d32e      	bcc.n	801d72a <quorem+0x96>
 801d6cc:	f04f 0a00 	mov.w	sl, #0
 801d6d0:	46c4      	mov	ip, r8
 801d6d2:	46ae      	mov	lr, r5
 801d6d4:	46d3      	mov	fp, sl
 801d6d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d6da:	b298      	uxth	r0, r3
 801d6dc:	fb06 a000 	mla	r0, r6, r0, sl
 801d6e0:	0c02      	lsrs	r2, r0, #16
 801d6e2:	0c1b      	lsrs	r3, r3, #16
 801d6e4:	fb06 2303 	mla	r3, r6, r3, r2
 801d6e8:	f8de 2000 	ldr.w	r2, [lr]
 801d6ec:	b280      	uxth	r0, r0
 801d6ee:	b292      	uxth	r2, r2
 801d6f0:	1a12      	subs	r2, r2, r0
 801d6f2:	445a      	add	r2, fp
 801d6f4:	f8de 0000 	ldr.w	r0, [lr]
 801d6f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d6fc:	b29b      	uxth	r3, r3
 801d6fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d702:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d706:	b292      	uxth	r2, r2
 801d708:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d70c:	45e1      	cmp	r9, ip
 801d70e:	f84e 2b04 	str.w	r2, [lr], #4
 801d712:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d716:	d2de      	bcs.n	801d6d6 <quorem+0x42>
 801d718:	9b00      	ldr	r3, [sp, #0]
 801d71a:	58eb      	ldr	r3, [r5, r3]
 801d71c:	b92b      	cbnz	r3, 801d72a <quorem+0x96>
 801d71e:	9b01      	ldr	r3, [sp, #4]
 801d720:	3b04      	subs	r3, #4
 801d722:	429d      	cmp	r5, r3
 801d724:	461a      	mov	r2, r3
 801d726:	d32f      	bcc.n	801d788 <quorem+0xf4>
 801d728:	613c      	str	r4, [r7, #16]
 801d72a:	4638      	mov	r0, r7
 801d72c:	f001 f8d0 	bl	801e8d0 <__mcmp>
 801d730:	2800      	cmp	r0, #0
 801d732:	db25      	blt.n	801d780 <quorem+0xec>
 801d734:	4629      	mov	r1, r5
 801d736:	2000      	movs	r0, #0
 801d738:	f858 2b04 	ldr.w	r2, [r8], #4
 801d73c:	f8d1 c000 	ldr.w	ip, [r1]
 801d740:	fa1f fe82 	uxth.w	lr, r2
 801d744:	fa1f f38c 	uxth.w	r3, ip
 801d748:	eba3 030e 	sub.w	r3, r3, lr
 801d74c:	4403      	add	r3, r0
 801d74e:	0c12      	lsrs	r2, r2, #16
 801d750:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d754:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d758:	b29b      	uxth	r3, r3
 801d75a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d75e:	45c1      	cmp	r9, r8
 801d760:	f841 3b04 	str.w	r3, [r1], #4
 801d764:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d768:	d2e6      	bcs.n	801d738 <quorem+0xa4>
 801d76a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d76e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d772:	b922      	cbnz	r2, 801d77e <quorem+0xea>
 801d774:	3b04      	subs	r3, #4
 801d776:	429d      	cmp	r5, r3
 801d778:	461a      	mov	r2, r3
 801d77a:	d30b      	bcc.n	801d794 <quorem+0x100>
 801d77c:	613c      	str	r4, [r7, #16]
 801d77e:	3601      	adds	r6, #1
 801d780:	4630      	mov	r0, r6
 801d782:	b003      	add	sp, #12
 801d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d788:	6812      	ldr	r2, [r2, #0]
 801d78a:	3b04      	subs	r3, #4
 801d78c:	2a00      	cmp	r2, #0
 801d78e:	d1cb      	bne.n	801d728 <quorem+0x94>
 801d790:	3c01      	subs	r4, #1
 801d792:	e7c6      	b.n	801d722 <quorem+0x8e>
 801d794:	6812      	ldr	r2, [r2, #0]
 801d796:	3b04      	subs	r3, #4
 801d798:	2a00      	cmp	r2, #0
 801d79a:	d1ef      	bne.n	801d77c <quorem+0xe8>
 801d79c:	3c01      	subs	r4, #1
 801d79e:	e7ea      	b.n	801d776 <quorem+0xe2>
 801d7a0:	2000      	movs	r0, #0
 801d7a2:	e7ee      	b.n	801d782 <quorem+0xee>
 801d7a4:	0000      	movs	r0, r0
	...

0801d7a8 <_dtoa_r>:
 801d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ac:	69c7      	ldr	r7, [r0, #28]
 801d7ae:	b099      	sub	sp, #100	@ 0x64
 801d7b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d7b4:	ec55 4b10 	vmov	r4, r5, d0
 801d7b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d7ba:	9109      	str	r1, [sp, #36]	@ 0x24
 801d7bc:	4683      	mov	fp, r0
 801d7be:	920e      	str	r2, [sp, #56]	@ 0x38
 801d7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d7c2:	b97f      	cbnz	r7, 801d7e4 <_dtoa_r+0x3c>
 801d7c4:	2010      	movs	r0, #16
 801d7c6:	f7fe fd15 	bl	801c1f4 <malloc>
 801d7ca:	4602      	mov	r2, r0
 801d7cc:	f8cb 001c 	str.w	r0, [fp, #28]
 801d7d0:	b920      	cbnz	r0, 801d7dc <_dtoa_r+0x34>
 801d7d2:	4ba7      	ldr	r3, [pc, #668]	@ (801da70 <_dtoa_r+0x2c8>)
 801d7d4:	21ef      	movs	r1, #239	@ 0xef
 801d7d6:	48a7      	ldr	r0, [pc, #668]	@ (801da74 <_dtoa_r+0x2cc>)
 801d7d8:	f7fe fc78 	bl	801c0cc <__assert_func>
 801d7dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d7e0:	6007      	str	r7, [r0, #0]
 801d7e2:	60c7      	str	r7, [r0, #12]
 801d7e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d7e8:	6819      	ldr	r1, [r3, #0]
 801d7ea:	b159      	cbz	r1, 801d804 <_dtoa_r+0x5c>
 801d7ec:	685a      	ldr	r2, [r3, #4]
 801d7ee:	604a      	str	r2, [r1, #4]
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	4093      	lsls	r3, r2
 801d7f4:	608b      	str	r3, [r1, #8]
 801d7f6:	4658      	mov	r0, fp
 801d7f8:	f000 fe30 	bl	801e45c <_Bfree>
 801d7fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d800:	2200      	movs	r2, #0
 801d802:	601a      	str	r2, [r3, #0]
 801d804:	1e2b      	subs	r3, r5, #0
 801d806:	bfb9      	ittee	lt
 801d808:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d80c:	9303      	strlt	r3, [sp, #12]
 801d80e:	2300      	movge	r3, #0
 801d810:	6033      	strge	r3, [r6, #0]
 801d812:	9f03      	ldr	r7, [sp, #12]
 801d814:	4b98      	ldr	r3, [pc, #608]	@ (801da78 <_dtoa_r+0x2d0>)
 801d816:	bfbc      	itt	lt
 801d818:	2201      	movlt	r2, #1
 801d81a:	6032      	strlt	r2, [r6, #0]
 801d81c:	43bb      	bics	r3, r7
 801d81e:	d112      	bne.n	801d846 <_dtoa_r+0x9e>
 801d820:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d822:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d826:	6013      	str	r3, [r2, #0]
 801d828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d82c:	4323      	orrs	r3, r4
 801d82e:	f000 854d 	beq.w	801e2cc <_dtoa_r+0xb24>
 801d832:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d834:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801da8c <_dtoa_r+0x2e4>
 801d838:	2b00      	cmp	r3, #0
 801d83a:	f000 854f 	beq.w	801e2dc <_dtoa_r+0xb34>
 801d83e:	f10a 0303 	add.w	r3, sl, #3
 801d842:	f000 bd49 	b.w	801e2d8 <_dtoa_r+0xb30>
 801d846:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d84a:	2200      	movs	r2, #0
 801d84c:	ec51 0b17 	vmov	r0, r1, d7
 801d850:	2300      	movs	r3, #0
 801d852:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801d856:	f7e3 f947 	bl	8000ae8 <__aeabi_dcmpeq>
 801d85a:	4680      	mov	r8, r0
 801d85c:	b158      	cbz	r0, 801d876 <_dtoa_r+0xce>
 801d85e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d860:	2301      	movs	r3, #1
 801d862:	6013      	str	r3, [r2, #0]
 801d864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d866:	b113      	cbz	r3, 801d86e <_dtoa_r+0xc6>
 801d868:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d86a:	4b84      	ldr	r3, [pc, #528]	@ (801da7c <_dtoa_r+0x2d4>)
 801d86c:	6013      	str	r3, [r2, #0]
 801d86e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801da90 <_dtoa_r+0x2e8>
 801d872:	f000 bd33 	b.w	801e2dc <_dtoa_r+0xb34>
 801d876:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d87a:	aa16      	add	r2, sp, #88	@ 0x58
 801d87c:	a917      	add	r1, sp, #92	@ 0x5c
 801d87e:	4658      	mov	r0, fp
 801d880:	f001 f8d6 	bl	801ea30 <__d2b>
 801d884:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d888:	4681      	mov	r9, r0
 801d88a:	2e00      	cmp	r6, #0
 801d88c:	d077      	beq.n	801d97e <_dtoa_r+0x1d6>
 801d88e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d890:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d89c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d8a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d8a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d8a8:	4619      	mov	r1, r3
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	4b74      	ldr	r3, [pc, #464]	@ (801da80 <_dtoa_r+0x2d8>)
 801d8ae:	f7e2 fcfb 	bl	80002a8 <__aeabi_dsub>
 801d8b2:	a369      	add	r3, pc, #420	@ (adr r3, 801da58 <_dtoa_r+0x2b0>)
 801d8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8b8:	f7e2 feae 	bl	8000618 <__aeabi_dmul>
 801d8bc:	a368      	add	r3, pc, #416	@ (adr r3, 801da60 <_dtoa_r+0x2b8>)
 801d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c2:	f7e2 fcf3 	bl	80002ac <__adddf3>
 801d8c6:	4604      	mov	r4, r0
 801d8c8:	4630      	mov	r0, r6
 801d8ca:	460d      	mov	r5, r1
 801d8cc:	f7e2 fe3a 	bl	8000544 <__aeabi_i2d>
 801d8d0:	a365      	add	r3, pc, #404	@ (adr r3, 801da68 <_dtoa_r+0x2c0>)
 801d8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8d6:	f7e2 fe9f 	bl	8000618 <__aeabi_dmul>
 801d8da:	4602      	mov	r2, r0
 801d8dc:	460b      	mov	r3, r1
 801d8de:	4620      	mov	r0, r4
 801d8e0:	4629      	mov	r1, r5
 801d8e2:	f7e2 fce3 	bl	80002ac <__adddf3>
 801d8e6:	4604      	mov	r4, r0
 801d8e8:	460d      	mov	r5, r1
 801d8ea:	f7e3 f945 	bl	8000b78 <__aeabi_d2iz>
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	4607      	mov	r7, r0
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	4620      	mov	r0, r4
 801d8f6:	4629      	mov	r1, r5
 801d8f8:	f7e3 f900 	bl	8000afc <__aeabi_dcmplt>
 801d8fc:	b140      	cbz	r0, 801d910 <_dtoa_r+0x168>
 801d8fe:	4638      	mov	r0, r7
 801d900:	f7e2 fe20 	bl	8000544 <__aeabi_i2d>
 801d904:	4622      	mov	r2, r4
 801d906:	462b      	mov	r3, r5
 801d908:	f7e3 f8ee 	bl	8000ae8 <__aeabi_dcmpeq>
 801d90c:	b900      	cbnz	r0, 801d910 <_dtoa_r+0x168>
 801d90e:	3f01      	subs	r7, #1
 801d910:	2f16      	cmp	r7, #22
 801d912:	d851      	bhi.n	801d9b8 <_dtoa_r+0x210>
 801d914:	4b5b      	ldr	r3, [pc, #364]	@ (801da84 <_dtoa_r+0x2dc>)
 801d916:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d91e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d922:	f7e3 f8eb 	bl	8000afc <__aeabi_dcmplt>
 801d926:	2800      	cmp	r0, #0
 801d928:	d048      	beq.n	801d9bc <_dtoa_r+0x214>
 801d92a:	3f01      	subs	r7, #1
 801d92c:	2300      	movs	r3, #0
 801d92e:	9312      	str	r3, [sp, #72]	@ 0x48
 801d930:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d932:	1b9b      	subs	r3, r3, r6
 801d934:	1e5a      	subs	r2, r3, #1
 801d936:	bf44      	itt	mi
 801d938:	f1c3 0801 	rsbmi	r8, r3, #1
 801d93c:	2300      	movmi	r3, #0
 801d93e:	9208      	str	r2, [sp, #32]
 801d940:	bf54      	ite	pl
 801d942:	f04f 0800 	movpl.w	r8, #0
 801d946:	9308      	strmi	r3, [sp, #32]
 801d948:	2f00      	cmp	r7, #0
 801d94a:	db39      	blt.n	801d9c0 <_dtoa_r+0x218>
 801d94c:	9b08      	ldr	r3, [sp, #32]
 801d94e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d950:	443b      	add	r3, r7
 801d952:	9308      	str	r3, [sp, #32]
 801d954:	2300      	movs	r3, #0
 801d956:	930a      	str	r3, [sp, #40]	@ 0x28
 801d958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d95a:	2b09      	cmp	r3, #9
 801d95c:	d864      	bhi.n	801da28 <_dtoa_r+0x280>
 801d95e:	2b05      	cmp	r3, #5
 801d960:	bfc4      	itt	gt
 801d962:	3b04      	subgt	r3, #4
 801d964:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d968:	f1a3 0302 	sub.w	r3, r3, #2
 801d96c:	bfcc      	ite	gt
 801d96e:	2400      	movgt	r4, #0
 801d970:	2401      	movle	r4, #1
 801d972:	2b03      	cmp	r3, #3
 801d974:	d863      	bhi.n	801da3e <_dtoa_r+0x296>
 801d976:	e8df f003 	tbb	[pc, r3]
 801d97a:	372a      	.short	0x372a
 801d97c:	5535      	.short	0x5535
 801d97e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d982:	441e      	add	r6, r3
 801d984:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d988:	2b20      	cmp	r3, #32
 801d98a:	bfc1      	itttt	gt
 801d98c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d990:	409f      	lslgt	r7, r3
 801d992:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d996:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d99a:	bfd6      	itet	le
 801d99c:	f1c3 0320 	rsble	r3, r3, #32
 801d9a0:	ea47 0003 	orrgt.w	r0, r7, r3
 801d9a4:	fa04 f003 	lslle.w	r0, r4, r3
 801d9a8:	f7e2 fdbc 	bl	8000524 <__aeabi_ui2d>
 801d9ac:	2201      	movs	r2, #1
 801d9ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d9b2:	3e01      	subs	r6, #1
 801d9b4:	9214      	str	r2, [sp, #80]	@ 0x50
 801d9b6:	e777      	b.n	801d8a8 <_dtoa_r+0x100>
 801d9b8:	2301      	movs	r3, #1
 801d9ba:	e7b8      	b.n	801d92e <_dtoa_r+0x186>
 801d9bc:	9012      	str	r0, [sp, #72]	@ 0x48
 801d9be:	e7b7      	b.n	801d930 <_dtoa_r+0x188>
 801d9c0:	427b      	negs	r3, r7
 801d9c2:	930a      	str	r3, [sp, #40]	@ 0x28
 801d9c4:	2300      	movs	r3, #0
 801d9c6:	eba8 0807 	sub.w	r8, r8, r7
 801d9ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d9cc:	e7c4      	b.n	801d958 <_dtoa_r+0x1b0>
 801d9ce:	2300      	movs	r3, #0
 801d9d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	dc35      	bgt.n	801da44 <_dtoa_r+0x29c>
 801d9d8:	2301      	movs	r3, #1
 801d9da:	9300      	str	r3, [sp, #0]
 801d9dc:	9307      	str	r3, [sp, #28]
 801d9de:	461a      	mov	r2, r3
 801d9e0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d9e2:	e00b      	b.n	801d9fc <_dtoa_r+0x254>
 801d9e4:	2301      	movs	r3, #1
 801d9e6:	e7f3      	b.n	801d9d0 <_dtoa_r+0x228>
 801d9e8:	2300      	movs	r3, #0
 801d9ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d9ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9ee:	18fb      	adds	r3, r7, r3
 801d9f0:	9300      	str	r3, [sp, #0]
 801d9f2:	3301      	adds	r3, #1
 801d9f4:	2b01      	cmp	r3, #1
 801d9f6:	9307      	str	r3, [sp, #28]
 801d9f8:	bfb8      	it	lt
 801d9fa:	2301      	movlt	r3, #1
 801d9fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 801da00:	2100      	movs	r1, #0
 801da02:	2204      	movs	r2, #4
 801da04:	f102 0514 	add.w	r5, r2, #20
 801da08:	429d      	cmp	r5, r3
 801da0a:	d91f      	bls.n	801da4c <_dtoa_r+0x2a4>
 801da0c:	6041      	str	r1, [r0, #4]
 801da0e:	4658      	mov	r0, fp
 801da10:	f000 fce4 	bl	801e3dc <_Balloc>
 801da14:	4682      	mov	sl, r0
 801da16:	2800      	cmp	r0, #0
 801da18:	d13c      	bne.n	801da94 <_dtoa_r+0x2ec>
 801da1a:	4b1b      	ldr	r3, [pc, #108]	@ (801da88 <_dtoa_r+0x2e0>)
 801da1c:	4602      	mov	r2, r0
 801da1e:	f240 11af 	movw	r1, #431	@ 0x1af
 801da22:	e6d8      	b.n	801d7d6 <_dtoa_r+0x2e>
 801da24:	2301      	movs	r3, #1
 801da26:	e7e0      	b.n	801d9ea <_dtoa_r+0x242>
 801da28:	2401      	movs	r4, #1
 801da2a:	2300      	movs	r3, #0
 801da2c:	9309      	str	r3, [sp, #36]	@ 0x24
 801da2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801da30:	f04f 33ff 	mov.w	r3, #4294967295
 801da34:	9300      	str	r3, [sp, #0]
 801da36:	9307      	str	r3, [sp, #28]
 801da38:	2200      	movs	r2, #0
 801da3a:	2312      	movs	r3, #18
 801da3c:	e7d0      	b.n	801d9e0 <_dtoa_r+0x238>
 801da3e:	2301      	movs	r3, #1
 801da40:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da42:	e7f5      	b.n	801da30 <_dtoa_r+0x288>
 801da44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da46:	9300      	str	r3, [sp, #0]
 801da48:	9307      	str	r3, [sp, #28]
 801da4a:	e7d7      	b.n	801d9fc <_dtoa_r+0x254>
 801da4c:	3101      	adds	r1, #1
 801da4e:	0052      	lsls	r2, r2, #1
 801da50:	e7d8      	b.n	801da04 <_dtoa_r+0x25c>
 801da52:	bf00      	nop
 801da54:	f3af 8000 	nop.w
 801da58:	636f4361 	.word	0x636f4361
 801da5c:	3fd287a7 	.word	0x3fd287a7
 801da60:	8b60c8b3 	.word	0x8b60c8b3
 801da64:	3fc68a28 	.word	0x3fc68a28
 801da68:	509f79fb 	.word	0x509f79fb
 801da6c:	3fd34413 	.word	0x3fd34413
 801da70:	080244a6 	.word	0x080244a6
 801da74:	08024657 	.word	0x08024657
 801da78:	7ff00000 	.word	0x7ff00000
 801da7c:	08024627 	.word	0x08024627
 801da80:	3ff80000 	.word	0x3ff80000
 801da84:	08024750 	.word	0x08024750
 801da88:	080246af 	.word	0x080246af
 801da8c:	08024653 	.word	0x08024653
 801da90:	08024626 	.word	0x08024626
 801da94:	f8db 301c 	ldr.w	r3, [fp, #28]
 801da98:	6018      	str	r0, [r3, #0]
 801da9a:	9b07      	ldr	r3, [sp, #28]
 801da9c:	2b0e      	cmp	r3, #14
 801da9e:	f200 80a4 	bhi.w	801dbea <_dtoa_r+0x442>
 801daa2:	2c00      	cmp	r4, #0
 801daa4:	f000 80a1 	beq.w	801dbea <_dtoa_r+0x442>
 801daa8:	2f00      	cmp	r7, #0
 801daaa:	dd33      	ble.n	801db14 <_dtoa_r+0x36c>
 801daac:	4bad      	ldr	r3, [pc, #692]	@ (801dd64 <_dtoa_r+0x5bc>)
 801daae:	f007 020f 	and.w	r2, r7, #15
 801dab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dab6:	ed93 7b00 	vldr	d7, [r3]
 801daba:	05f8      	lsls	r0, r7, #23
 801dabc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dac0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801dac4:	d516      	bpl.n	801daf4 <_dtoa_r+0x34c>
 801dac6:	4ba8      	ldr	r3, [pc, #672]	@ (801dd68 <_dtoa_r+0x5c0>)
 801dac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dacc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dad0:	f7e2 fecc 	bl	800086c <__aeabi_ddiv>
 801dad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dad8:	f004 040f 	and.w	r4, r4, #15
 801dadc:	2603      	movs	r6, #3
 801dade:	4da2      	ldr	r5, [pc, #648]	@ (801dd68 <_dtoa_r+0x5c0>)
 801dae0:	b954      	cbnz	r4, 801daf8 <_dtoa_r+0x350>
 801dae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801daea:	f7e2 febf 	bl	800086c <__aeabi_ddiv>
 801daee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801daf2:	e028      	b.n	801db46 <_dtoa_r+0x39e>
 801daf4:	2602      	movs	r6, #2
 801daf6:	e7f2      	b.n	801dade <_dtoa_r+0x336>
 801daf8:	07e1      	lsls	r1, r4, #31
 801dafa:	d508      	bpl.n	801db0e <_dtoa_r+0x366>
 801dafc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801db00:	e9d5 2300 	ldrd	r2, r3, [r5]
 801db04:	f7e2 fd88 	bl	8000618 <__aeabi_dmul>
 801db08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801db0c:	3601      	adds	r6, #1
 801db0e:	1064      	asrs	r4, r4, #1
 801db10:	3508      	adds	r5, #8
 801db12:	e7e5      	b.n	801dae0 <_dtoa_r+0x338>
 801db14:	f000 80d2 	beq.w	801dcbc <_dtoa_r+0x514>
 801db18:	427c      	negs	r4, r7
 801db1a:	4b92      	ldr	r3, [pc, #584]	@ (801dd64 <_dtoa_r+0x5bc>)
 801db1c:	4d92      	ldr	r5, [pc, #584]	@ (801dd68 <_dtoa_r+0x5c0>)
 801db1e:	f004 020f 	and.w	r2, r4, #15
 801db22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801db2e:	f7e2 fd73 	bl	8000618 <__aeabi_dmul>
 801db32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db36:	1124      	asrs	r4, r4, #4
 801db38:	2300      	movs	r3, #0
 801db3a:	2602      	movs	r6, #2
 801db3c:	2c00      	cmp	r4, #0
 801db3e:	f040 80b2 	bne.w	801dca6 <_dtoa_r+0x4fe>
 801db42:	2b00      	cmp	r3, #0
 801db44:	d1d3      	bne.n	801daee <_dtoa_r+0x346>
 801db46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801db48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	f000 80b7 	beq.w	801dcc0 <_dtoa_r+0x518>
 801db52:	4b86      	ldr	r3, [pc, #536]	@ (801dd6c <_dtoa_r+0x5c4>)
 801db54:	2200      	movs	r2, #0
 801db56:	4620      	mov	r0, r4
 801db58:	4629      	mov	r1, r5
 801db5a:	f7e2 ffcf 	bl	8000afc <__aeabi_dcmplt>
 801db5e:	2800      	cmp	r0, #0
 801db60:	f000 80ae 	beq.w	801dcc0 <_dtoa_r+0x518>
 801db64:	9b07      	ldr	r3, [sp, #28]
 801db66:	2b00      	cmp	r3, #0
 801db68:	f000 80aa 	beq.w	801dcc0 <_dtoa_r+0x518>
 801db6c:	9b00      	ldr	r3, [sp, #0]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	dd37      	ble.n	801dbe2 <_dtoa_r+0x43a>
 801db72:	1e7b      	subs	r3, r7, #1
 801db74:	9304      	str	r3, [sp, #16]
 801db76:	4620      	mov	r0, r4
 801db78:	4b7d      	ldr	r3, [pc, #500]	@ (801dd70 <_dtoa_r+0x5c8>)
 801db7a:	2200      	movs	r2, #0
 801db7c:	4629      	mov	r1, r5
 801db7e:	f7e2 fd4b 	bl	8000618 <__aeabi_dmul>
 801db82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db86:	9c00      	ldr	r4, [sp, #0]
 801db88:	3601      	adds	r6, #1
 801db8a:	4630      	mov	r0, r6
 801db8c:	f7e2 fcda 	bl	8000544 <__aeabi_i2d>
 801db90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db94:	f7e2 fd40 	bl	8000618 <__aeabi_dmul>
 801db98:	4b76      	ldr	r3, [pc, #472]	@ (801dd74 <_dtoa_r+0x5cc>)
 801db9a:	2200      	movs	r2, #0
 801db9c:	f7e2 fb86 	bl	80002ac <__adddf3>
 801dba0:	4605      	mov	r5, r0
 801dba2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dba6:	2c00      	cmp	r4, #0
 801dba8:	f040 808d 	bne.w	801dcc6 <_dtoa_r+0x51e>
 801dbac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbb0:	4b71      	ldr	r3, [pc, #452]	@ (801dd78 <_dtoa_r+0x5d0>)
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	f7e2 fb78 	bl	80002a8 <__aeabi_dsub>
 801dbb8:	4602      	mov	r2, r0
 801dbba:	460b      	mov	r3, r1
 801dbbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dbc0:	462a      	mov	r2, r5
 801dbc2:	4633      	mov	r3, r6
 801dbc4:	f7e2 ffb8 	bl	8000b38 <__aeabi_dcmpgt>
 801dbc8:	2800      	cmp	r0, #0
 801dbca:	f040 828b 	bne.w	801e0e4 <_dtoa_r+0x93c>
 801dbce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbd2:	462a      	mov	r2, r5
 801dbd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dbd8:	f7e2 ff90 	bl	8000afc <__aeabi_dcmplt>
 801dbdc:	2800      	cmp	r0, #0
 801dbde:	f040 8128 	bne.w	801de32 <_dtoa_r+0x68a>
 801dbe2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801dbe6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dbea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	f2c0 815a 	blt.w	801dea6 <_dtoa_r+0x6fe>
 801dbf2:	2f0e      	cmp	r7, #14
 801dbf4:	f300 8157 	bgt.w	801dea6 <_dtoa_r+0x6fe>
 801dbf8:	4b5a      	ldr	r3, [pc, #360]	@ (801dd64 <_dtoa_r+0x5bc>)
 801dbfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dbfe:	ed93 7b00 	vldr	d7, [r3]
 801dc02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	ed8d 7b00 	vstr	d7, [sp]
 801dc0a:	da03      	bge.n	801dc14 <_dtoa_r+0x46c>
 801dc0c:	9b07      	ldr	r3, [sp, #28]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	f340 8101 	ble.w	801de16 <_dtoa_r+0x66e>
 801dc14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dc18:	4656      	mov	r6, sl
 801dc1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc1e:	4620      	mov	r0, r4
 801dc20:	4629      	mov	r1, r5
 801dc22:	f7e2 fe23 	bl	800086c <__aeabi_ddiv>
 801dc26:	f7e2 ffa7 	bl	8000b78 <__aeabi_d2iz>
 801dc2a:	4680      	mov	r8, r0
 801dc2c:	f7e2 fc8a 	bl	8000544 <__aeabi_i2d>
 801dc30:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc34:	f7e2 fcf0 	bl	8000618 <__aeabi_dmul>
 801dc38:	4602      	mov	r2, r0
 801dc3a:	460b      	mov	r3, r1
 801dc3c:	4620      	mov	r0, r4
 801dc3e:	4629      	mov	r1, r5
 801dc40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801dc44:	f7e2 fb30 	bl	80002a8 <__aeabi_dsub>
 801dc48:	f806 4b01 	strb.w	r4, [r6], #1
 801dc4c:	9d07      	ldr	r5, [sp, #28]
 801dc4e:	eba6 040a 	sub.w	r4, r6, sl
 801dc52:	42a5      	cmp	r5, r4
 801dc54:	4602      	mov	r2, r0
 801dc56:	460b      	mov	r3, r1
 801dc58:	f040 8117 	bne.w	801de8a <_dtoa_r+0x6e2>
 801dc5c:	f7e2 fb26 	bl	80002ac <__adddf3>
 801dc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc64:	4604      	mov	r4, r0
 801dc66:	460d      	mov	r5, r1
 801dc68:	f7e2 ff66 	bl	8000b38 <__aeabi_dcmpgt>
 801dc6c:	2800      	cmp	r0, #0
 801dc6e:	f040 80f9 	bne.w	801de64 <_dtoa_r+0x6bc>
 801dc72:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc76:	4620      	mov	r0, r4
 801dc78:	4629      	mov	r1, r5
 801dc7a:	f7e2 ff35 	bl	8000ae8 <__aeabi_dcmpeq>
 801dc7e:	b118      	cbz	r0, 801dc88 <_dtoa_r+0x4e0>
 801dc80:	f018 0f01 	tst.w	r8, #1
 801dc84:	f040 80ee 	bne.w	801de64 <_dtoa_r+0x6bc>
 801dc88:	4649      	mov	r1, r9
 801dc8a:	4658      	mov	r0, fp
 801dc8c:	f000 fbe6 	bl	801e45c <_Bfree>
 801dc90:	2300      	movs	r3, #0
 801dc92:	7033      	strb	r3, [r6, #0]
 801dc94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc96:	3701      	adds	r7, #1
 801dc98:	601f      	str	r7, [r3, #0]
 801dc9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	f000 831d 	beq.w	801e2dc <_dtoa_r+0xb34>
 801dca2:	601e      	str	r6, [r3, #0]
 801dca4:	e31a      	b.n	801e2dc <_dtoa_r+0xb34>
 801dca6:	07e2      	lsls	r2, r4, #31
 801dca8:	d505      	bpl.n	801dcb6 <_dtoa_r+0x50e>
 801dcaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dcae:	f7e2 fcb3 	bl	8000618 <__aeabi_dmul>
 801dcb2:	3601      	adds	r6, #1
 801dcb4:	2301      	movs	r3, #1
 801dcb6:	1064      	asrs	r4, r4, #1
 801dcb8:	3508      	adds	r5, #8
 801dcba:	e73f      	b.n	801db3c <_dtoa_r+0x394>
 801dcbc:	2602      	movs	r6, #2
 801dcbe:	e742      	b.n	801db46 <_dtoa_r+0x39e>
 801dcc0:	9c07      	ldr	r4, [sp, #28]
 801dcc2:	9704      	str	r7, [sp, #16]
 801dcc4:	e761      	b.n	801db8a <_dtoa_r+0x3e2>
 801dcc6:	4b27      	ldr	r3, [pc, #156]	@ (801dd64 <_dtoa_r+0x5bc>)
 801dcc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dcca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dcce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dcd2:	4454      	add	r4, sl
 801dcd4:	2900      	cmp	r1, #0
 801dcd6:	d053      	beq.n	801dd80 <_dtoa_r+0x5d8>
 801dcd8:	4928      	ldr	r1, [pc, #160]	@ (801dd7c <_dtoa_r+0x5d4>)
 801dcda:	2000      	movs	r0, #0
 801dcdc:	f7e2 fdc6 	bl	800086c <__aeabi_ddiv>
 801dce0:	4633      	mov	r3, r6
 801dce2:	462a      	mov	r2, r5
 801dce4:	f7e2 fae0 	bl	80002a8 <__aeabi_dsub>
 801dce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dcec:	4656      	mov	r6, sl
 801dcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcf2:	f7e2 ff41 	bl	8000b78 <__aeabi_d2iz>
 801dcf6:	4605      	mov	r5, r0
 801dcf8:	f7e2 fc24 	bl	8000544 <__aeabi_i2d>
 801dcfc:	4602      	mov	r2, r0
 801dcfe:	460b      	mov	r3, r1
 801dd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd04:	f7e2 fad0 	bl	80002a8 <__aeabi_dsub>
 801dd08:	3530      	adds	r5, #48	@ 0x30
 801dd0a:	4602      	mov	r2, r0
 801dd0c:	460b      	mov	r3, r1
 801dd0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dd12:	f806 5b01 	strb.w	r5, [r6], #1
 801dd16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd1a:	f7e2 feef 	bl	8000afc <__aeabi_dcmplt>
 801dd1e:	2800      	cmp	r0, #0
 801dd20:	d171      	bne.n	801de06 <_dtoa_r+0x65e>
 801dd22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dd26:	4911      	ldr	r1, [pc, #68]	@ (801dd6c <_dtoa_r+0x5c4>)
 801dd28:	2000      	movs	r0, #0
 801dd2a:	f7e2 fabd 	bl	80002a8 <__aeabi_dsub>
 801dd2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd32:	f7e2 fee3 	bl	8000afc <__aeabi_dcmplt>
 801dd36:	2800      	cmp	r0, #0
 801dd38:	f040 8095 	bne.w	801de66 <_dtoa_r+0x6be>
 801dd3c:	42a6      	cmp	r6, r4
 801dd3e:	f43f af50 	beq.w	801dbe2 <_dtoa_r+0x43a>
 801dd42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801dd46:	4b0a      	ldr	r3, [pc, #40]	@ (801dd70 <_dtoa_r+0x5c8>)
 801dd48:	2200      	movs	r2, #0
 801dd4a:	f7e2 fc65 	bl	8000618 <__aeabi_dmul>
 801dd4e:	4b08      	ldr	r3, [pc, #32]	@ (801dd70 <_dtoa_r+0x5c8>)
 801dd50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dd54:	2200      	movs	r2, #0
 801dd56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd5a:	f7e2 fc5d 	bl	8000618 <__aeabi_dmul>
 801dd5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd62:	e7c4      	b.n	801dcee <_dtoa_r+0x546>
 801dd64:	08024750 	.word	0x08024750
 801dd68:	08024728 	.word	0x08024728
 801dd6c:	3ff00000 	.word	0x3ff00000
 801dd70:	40240000 	.word	0x40240000
 801dd74:	401c0000 	.word	0x401c0000
 801dd78:	40140000 	.word	0x40140000
 801dd7c:	3fe00000 	.word	0x3fe00000
 801dd80:	4631      	mov	r1, r6
 801dd82:	4628      	mov	r0, r5
 801dd84:	f7e2 fc48 	bl	8000618 <__aeabi_dmul>
 801dd88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dd8c:	9415      	str	r4, [sp, #84]	@ 0x54
 801dd8e:	4656      	mov	r6, sl
 801dd90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd94:	f7e2 fef0 	bl	8000b78 <__aeabi_d2iz>
 801dd98:	4605      	mov	r5, r0
 801dd9a:	f7e2 fbd3 	bl	8000544 <__aeabi_i2d>
 801dd9e:	4602      	mov	r2, r0
 801dda0:	460b      	mov	r3, r1
 801dda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dda6:	f7e2 fa7f 	bl	80002a8 <__aeabi_dsub>
 801ddaa:	3530      	adds	r5, #48	@ 0x30
 801ddac:	f806 5b01 	strb.w	r5, [r6], #1
 801ddb0:	4602      	mov	r2, r0
 801ddb2:	460b      	mov	r3, r1
 801ddb4:	42a6      	cmp	r6, r4
 801ddb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ddba:	f04f 0200 	mov.w	r2, #0
 801ddbe:	d124      	bne.n	801de0a <_dtoa_r+0x662>
 801ddc0:	4bac      	ldr	r3, [pc, #688]	@ (801e074 <_dtoa_r+0x8cc>)
 801ddc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ddc6:	f7e2 fa71 	bl	80002ac <__adddf3>
 801ddca:	4602      	mov	r2, r0
 801ddcc:	460b      	mov	r3, r1
 801ddce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddd2:	f7e2 feb1 	bl	8000b38 <__aeabi_dcmpgt>
 801ddd6:	2800      	cmp	r0, #0
 801ddd8:	d145      	bne.n	801de66 <_dtoa_r+0x6be>
 801ddda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ddde:	49a5      	ldr	r1, [pc, #660]	@ (801e074 <_dtoa_r+0x8cc>)
 801dde0:	2000      	movs	r0, #0
 801dde2:	f7e2 fa61 	bl	80002a8 <__aeabi_dsub>
 801dde6:	4602      	mov	r2, r0
 801dde8:	460b      	mov	r3, r1
 801ddea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddee:	f7e2 fe85 	bl	8000afc <__aeabi_dcmplt>
 801ddf2:	2800      	cmp	r0, #0
 801ddf4:	f43f aef5 	beq.w	801dbe2 <_dtoa_r+0x43a>
 801ddf8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801ddfa:	1e73      	subs	r3, r6, #1
 801ddfc:	9315      	str	r3, [sp, #84]	@ 0x54
 801ddfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801de02:	2b30      	cmp	r3, #48	@ 0x30
 801de04:	d0f8      	beq.n	801ddf8 <_dtoa_r+0x650>
 801de06:	9f04      	ldr	r7, [sp, #16]
 801de08:	e73e      	b.n	801dc88 <_dtoa_r+0x4e0>
 801de0a:	4b9b      	ldr	r3, [pc, #620]	@ (801e078 <_dtoa_r+0x8d0>)
 801de0c:	f7e2 fc04 	bl	8000618 <__aeabi_dmul>
 801de10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de14:	e7bc      	b.n	801dd90 <_dtoa_r+0x5e8>
 801de16:	d10c      	bne.n	801de32 <_dtoa_r+0x68a>
 801de18:	4b98      	ldr	r3, [pc, #608]	@ (801e07c <_dtoa_r+0x8d4>)
 801de1a:	2200      	movs	r2, #0
 801de1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801de20:	f7e2 fbfa 	bl	8000618 <__aeabi_dmul>
 801de24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de28:	f7e2 fe7c 	bl	8000b24 <__aeabi_dcmpge>
 801de2c:	2800      	cmp	r0, #0
 801de2e:	f000 8157 	beq.w	801e0e0 <_dtoa_r+0x938>
 801de32:	2400      	movs	r4, #0
 801de34:	4625      	mov	r5, r4
 801de36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de38:	43db      	mvns	r3, r3
 801de3a:	9304      	str	r3, [sp, #16]
 801de3c:	4656      	mov	r6, sl
 801de3e:	2700      	movs	r7, #0
 801de40:	4621      	mov	r1, r4
 801de42:	4658      	mov	r0, fp
 801de44:	f000 fb0a 	bl	801e45c <_Bfree>
 801de48:	2d00      	cmp	r5, #0
 801de4a:	d0dc      	beq.n	801de06 <_dtoa_r+0x65e>
 801de4c:	b12f      	cbz	r7, 801de5a <_dtoa_r+0x6b2>
 801de4e:	42af      	cmp	r7, r5
 801de50:	d003      	beq.n	801de5a <_dtoa_r+0x6b2>
 801de52:	4639      	mov	r1, r7
 801de54:	4658      	mov	r0, fp
 801de56:	f000 fb01 	bl	801e45c <_Bfree>
 801de5a:	4629      	mov	r1, r5
 801de5c:	4658      	mov	r0, fp
 801de5e:	f000 fafd 	bl	801e45c <_Bfree>
 801de62:	e7d0      	b.n	801de06 <_dtoa_r+0x65e>
 801de64:	9704      	str	r7, [sp, #16]
 801de66:	4633      	mov	r3, r6
 801de68:	461e      	mov	r6, r3
 801de6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de6e:	2a39      	cmp	r2, #57	@ 0x39
 801de70:	d107      	bne.n	801de82 <_dtoa_r+0x6da>
 801de72:	459a      	cmp	sl, r3
 801de74:	d1f8      	bne.n	801de68 <_dtoa_r+0x6c0>
 801de76:	9a04      	ldr	r2, [sp, #16]
 801de78:	3201      	adds	r2, #1
 801de7a:	9204      	str	r2, [sp, #16]
 801de7c:	2230      	movs	r2, #48	@ 0x30
 801de7e:	f88a 2000 	strb.w	r2, [sl]
 801de82:	781a      	ldrb	r2, [r3, #0]
 801de84:	3201      	adds	r2, #1
 801de86:	701a      	strb	r2, [r3, #0]
 801de88:	e7bd      	b.n	801de06 <_dtoa_r+0x65e>
 801de8a:	4b7b      	ldr	r3, [pc, #492]	@ (801e078 <_dtoa_r+0x8d0>)
 801de8c:	2200      	movs	r2, #0
 801de8e:	f7e2 fbc3 	bl	8000618 <__aeabi_dmul>
 801de92:	2200      	movs	r2, #0
 801de94:	2300      	movs	r3, #0
 801de96:	4604      	mov	r4, r0
 801de98:	460d      	mov	r5, r1
 801de9a:	f7e2 fe25 	bl	8000ae8 <__aeabi_dcmpeq>
 801de9e:	2800      	cmp	r0, #0
 801dea0:	f43f aebb 	beq.w	801dc1a <_dtoa_r+0x472>
 801dea4:	e6f0      	b.n	801dc88 <_dtoa_r+0x4e0>
 801dea6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dea8:	2a00      	cmp	r2, #0
 801deaa:	f000 80db 	beq.w	801e064 <_dtoa_r+0x8bc>
 801deae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801deb0:	2a01      	cmp	r2, #1
 801deb2:	f300 80bf 	bgt.w	801e034 <_dtoa_r+0x88c>
 801deb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801deb8:	2a00      	cmp	r2, #0
 801deba:	f000 80b7 	beq.w	801e02c <_dtoa_r+0x884>
 801debe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801dec2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dec4:	4646      	mov	r6, r8
 801dec6:	9a08      	ldr	r2, [sp, #32]
 801dec8:	2101      	movs	r1, #1
 801deca:	441a      	add	r2, r3
 801decc:	4658      	mov	r0, fp
 801dece:	4498      	add	r8, r3
 801ded0:	9208      	str	r2, [sp, #32]
 801ded2:	f000 fb77 	bl	801e5c4 <__i2b>
 801ded6:	4605      	mov	r5, r0
 801ded8:	b15e      	cbz	r6, 801def2 <_dtoa_r+0x74a>
 801deda:	9b08      	ldr	r3, [sp, #32]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	dd08      	ble.n	801def2 <_dtoa_r+0x74a>
 801dee0:	42b3      	cmp	r3, r6
 801dee2:	9a08      	ldr	r2, [sp, #32]
 801dee4:	bfa8      	it	ge
 801dee6:	4633      	movge	r3, r6
 801dee8:	eba8 0803 	sub.w	r8, r8, r3
 801deec:	1af6      	subs	r6, r6, r3
 801deee:	1ad3      	subs	r3, r2, r3
 801def0:	9308      	str	r3, [sp, #32]
 801def2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801def4:	b1f3      	cbz	r3, 801df34 <_dtoa_r+0x78c>
 801def6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801def8:	2b00      	cmp	r3, #0
 801defa:	f000 80b7 	beq.w	801e06c <_dtoa_r+0x8c4>
 801defe:	b18c      	cbz	r4, 801df24 <_dtoa_r+0x77c>
 801df00:	4629      	mov	r1, r5
 801df02:	4622      	mov	r2, r4
 801df04:	4658      	mov	r0, fp
 801df06:	f000 fc1d 	bl	801e744 <__pow5mult>
 801df0a:	464a      	mov	r2, r9
 801df0c:	4601      	mov	r1, r0
 801df0e:	4605      	mov	r5, r0
 801df10:	4658      	mov	r0, fp
 801df12:	f000 fb6d 	bl	801e5f0 <__multiply>
 801df16:	4649      	mov	r1, r9
 801df18:	9004      	str	r0, [sp, #16]
 801df1a:	4658      	mov	r0, fp
 801df1c:	f000 fa9e 	bl	801e45c <_Bfree>
 801df20:	9b04      	ldr	r3, [sp, #16]
 801df22:	4699      	mov	r9, r3
 801df24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df26:	1b1a      	subs	r2, r3, r4
 801df28:	d004      	beq.n	801df34 <_dtoa_r+0x78c>
 801df2a:	4649      	mov	r1, r9
 801df2c:	4658      	mov	r0, fp
 801df2e:	f000 fc09 	bl	801e744 <__pow5mult>
 801df32:	4681      	mov	r9, r0
 801df34:	2101      	movs	r1, #1
 801df36:	4658      	mov	r0, fp
 801df38:	f000 fb44 	bl	801e5c4 <__i2b>
 801df3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df3e:	4604      	mov	r4, r0
 801df40:	2b00      	cmp	r3, #0
 801df42:	f000 81cf 	beq.w	801e2e4 <_dtoa_r+0xb3c>
 801df46:	461a      	mov	r2, r3
 801df48:	4601      	mov	r1, r0
 801df4a:	4658      	mov	r0, fp
 801df4c:	f000 fbfa 	bl	801e744 <__pow5mult>
 801df50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df52:	2b01      	cmp	r3, #1
 801df54:	4604      	mov	r4, r0
 801df56:	f300 8095 	bgt.w	801e084 <_dtoa_r+0x8dc>
 801df5a:	9b02      	ldr	r3, [sp, #8]
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	f040 8087 	bne.w	801e070 <_dtoa_r+0x8c8>
 801df62:	9b03      	ldr	r3, [sp, #12]
 801df64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801df68:	2b00      	cmp	r3, #0
 801df6a:	f040 8089 	bne.w	801e080 <_dtoa_r+0x8d8>
 801df6e:	9b03      	ldr	r3, [sp, #12]
 801df70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801df74:	0d1b      	lsrs	r3, r3, #20
 801df76:	051b      	lsls	r3, r3, #20
 801df78:	b12b      	cbz	r3, 801df86 <_dtoa_r+0x7de>
 801df7a:	9b08      	ldr	r3, [sp, #32]
 801df7c:	3301      	adds	r3, #1
 801df7e:	9308      	str	r3, [sp, #32]
 801df80:	f108 0801 	add.w	r8, r8, #1
 801df84:	2301      	movs	r3, #1
 801df86:	930a      	str	r3, [sp, #40]	@ 0x28
 801df88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	f000 81b0 	beq.w	801e2f0 <_dtoa_r+0xb48>
 801df90:	6923      	ldr	r3, [r4, #16]
 801df92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801df96:	6918      	ldr	r0, [r3, #16]
 801df98:	f000 fac8 	bl	801e52c <__hi0bits>
 801df9c:	f1c0 0020 	rsb	r0, r0, #32
 801dfa0:	9b08      	ldr	r3, [sp, #32]
 801dfa2:	4418      	add	r0, r3
 801dfa4:	f010 001f 	ands.w	r0, r0, #31
 801dfa8:	d077      	beq.n	801e09a <_dtoa_r+0x8f2>
 801dfaa:	f1c0 0320 	rsb	r3, r0, #32
 801dfae:	2b04      	cmp	r3, #4
 801dfb0:	dd6b      	ble.n	801e08a <_dtoa_r+0x8e2>
 801dfb2:	9b08      	ldr	r3, [sp, #32]
 801dfb4:	f1c0 001c 	rsb	r0, r0, #28
 801dfb8:	4403      	add	r3, r0
 801dfba:	4480      	add	r8, r0
 801dfbc:	4406      	add	r6, r0
 801dfbe:	9308      	str	r3, [sp, #32]
 801dfc0:	f1b8 0f00 	cmp.w	r8, #0
 801dfc4:	dd05      	ble.n	801dfd2 <_dtoa_r+0x82a>
 801dfc6:	4649      	mov	r1, r9
 801dfc8:	4642      	mov	r2, r8
 801dfca:	4658      	mov	r0, fp
 801dfcc:	f000 fc14 	bl	801e7f8 <__lshift>
 801dfd0:	4681      	mov	r9, r0
 801dfd2:	9b08      	ldr	r3, [sp, #32]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	dd05      	ble.n	801dfe4 <_dtoa_r+0x83c>
 801dfd8:	4621      	mov	r1, r4
 801dfda:	461a      	mov	r2, r3
 801dfdc:	4658      	mov	r0, fp
 801dfde:	f000 fc0b 	bl	801e7f8 <__lshift>
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d059      	beq.n	801e09e <_dtoa_r+0x8f6>
 801dfea:	4621      	mov	r1, r4
 801dfec:	4648      	mov	r0, r9
 801dfee:	f000 fc6f 	bl	801e8d0 <__mcmp>
 801dff2:	2800      	cmp	r0, #0
 801dff4:	da53      	bge.n	801e09e <_dtoa_r+0x8f6>
 801dff6:	1e7b      	subs	r3, r7, #1
 801dff8:	9304      	str	r3, [sp, #16]
 801dffa:	4649      	mov	r1, r9
 801dffc:	2300      	movs	r3, #0
 801dffe:	220a      	movs	r2, #10
 801e000:	4658      	mov	r0, fp
 801e002:	f000 fa4d 	bl	801e4a0 <__multadd>
 801e006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e008:	4681      	mov	r9, r0
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	f000 8172 	beq.w	801e2f4 <_dtoa_r+0xb4c>
 801e010:	2300      	movs	r3, #0
 801e012:	4629      	mov	r1, r5
 801e014:	220a      	movs	r2, #10
 801e016:	4658      	mov	r0, fp
 801e018:	f000 fa42 	bl	801e4a0 <__multadd>
 801e01c:	9b00      	ldr	r3, [sp, #0]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	4605      	mov	r5, r0
 801e022:	dc67      	bgt.n	801e0f4 <_dtoa_r+0x94c>
 801e024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e026:	2b02      	cmp	r3, #2
 801e028:	dc41      	bgt.n	801e0ae <_dtoa_r+0x906>
 801e02a:	e063      	b.n	801e0f4 <_dtoa_r+0x94c>
 801e02c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e02e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e032:	e746      	b.n	801dec2 <_dtoa_r+0x71a>
 801e034:	9b07      	ldr	r3, [sp, #28]
 801e036:	1e5c      	subs	r4, r3, #1
 801e038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e03a:	42a3      	cmp	r3, r4
 801e03c:	bfbf      	itttt	lt
 801e03e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e040:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e042:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e044:	1ae3      	sublt	r3, r4, r3
 801e046:	bfb4      	ite	lt
 801e048:	18d2      	addlt	r2, r2, r3
 801e04a:	1b1c      	subge	r4, r3, r4
 801e04c:	9b07      	ldr	r3, [sp, #28]
 801e04e:	bfbc      	itt	lt
 801e050:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e052:	2400      	movlt	r4, #0
 801e054:	2b00      	cmp	r3, #0
 801e056:	bfb5      	itete	lt
 801e058:	eba8 0603 	sublt.w	r6, r8, r3
 801e05c:	9b07      	ldrge	r3, [sp, #28]
 801e05e:	2300      	movlt	r3, #0
 801e060:	4646      	movge	r6, r8
 801e062:	e730      	b.n	801dec6 <_dtoa_r+0x71e>
 801e064:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e066:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e068:	4646      	mov	r6, r8
 801e06a:	e735      	b.n	801ded8 <_dtoa_r+0x730>
 801e06c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e06e:	e75c      	b.n	801df2a <_dtoa_r+0x782>
 801e070:	2300      	movs	r3, #0
 801e072:	e788      	b.n	801df86 <_dtoa_r+0x7de>
 801e074:	3fe00000 	.word	0x3fe00000
 801e078:	40240000 	.word	0x40240000
 801e07c:	40140000 	.word	0x40140000
 801e080:	9b02      	ldr	r3, [sp, #8]
 801e082:	e780      	b.n	801df86 <_dtoa_r+0x7de>
 801e084:	2300      	movs	r3, #0
 801e086:	930a      	str	r3, [sp, #40]	@ 0x28
 801e088:	e782      	b.n	801df90 <_dtoa_r+0x7e8>
 801e08a:	d099      	beq.n	801dfc0 <_dtoa_r+0x818>
 801e08c:	9a08      	ldr	r2, [sp, #32]
 801e08e:	331c      	adds	r3, #28
 801e090:	441a      	add	r2, r3
 801e092:	4498      	add	r8, r3
 801e094:	441e      	add	r6, r3
 801e096:	9208      	str	r2, [sp, #32]
 801e098:	e792      	b.n	801dfc0 <_dtoa_r+0x818>
 801e09a:	4603      	mov	r3, r0
 801e09c:	e7f6      	b.n	801e08c <_dtoa_r+0x8e4>
 801e09e:	9b07      	ldr	r3, [sp, #28]
 801e0a0:	9704      	str	r7, [sp, #16]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	dc20      	bgt.n	801e0e8 <_dtoa_r+0x940>
 801e0a6:	9300      	str	r3, [sp, #0]
 801e0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0aa:	2b02      	cmp	r3, #2
 801e0ac:	dd1e      	ble.n	801e0ec <_dtoa_r+0x944>
 801e0ae:	9b00      	ldr	r3, [sp, #0]
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	f47f aec0 	bne.w	801de36 <_dtoa_r+0x68e>
 801e0b6:	4621      	mov	r1, r4
 801e0b8:	2205      	movs	r2, #5
 801e0ba:	4658      	mov	r0, fp
 801e0bc:	f000 f9f0 	bl	801e4a0 <__multadd>
 801e0c0:	4601      	mov	r1, r0
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	4648      	mov	r0, r9
 801e0c6:	f000 fc03 	bl	801e8d0 <__mcmp>
 801e0ca:	2800      	cmp	r0, #0
 801e0cc:	f77f aeb3 	ble.w	801de36 <_dtoa_r+0x68e>
 801e0d0:	4656      	mov	r6, sl
 801e0d2:	2331      	movs	r3, #49	@ 0x31
 801e0d4:	f806 3b01 	strb.w	r3, [r6], #1
 801e0d8:	9b04      	ldr	r3, [sp, #16]
 801e0da:	3301      	adds	r3, #1
 801e0dc:	9304      	str	r3, [sp, #16]
 801e0de:	e6ae      	b.n	801de3e <_dtoa_r+0x696>
 801e0e0:	9c07      	ldr	r4, [sp, #28]
 801e0e2:	9704      	str	r7, [sp, #16]
 801e0e4:	4625      	mov	r5, r4
 801e0e6:	e7f3      	b.n	801e0d0 <_dtoa_r+0x928>
 801e0e8:	9b07      	ldr	r3, [sp, #28]
 801e0ea:	9300      	str	r3, [sp, #0]
 801e0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	f000 8104 	beq.w	801e2fc <_dtoa_r+0xb54>
 801e0f4:	2e00      	cmp	r6, #0
 801e0f6:	dd05      	ble.n	801e104 <_dtoa_r+0x95c>
 801e0f8:	4629      	mov	r1, r5
 801e0fa:	4632      	mov	r2, r6
 801e0fc:	4658      	mov	r0, fp
 801e0fe:	f000 fb7b 	bl	801e7f8 <__lshift>
 801e102:	4605      	mov	r5, r0
 801e104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e106:	2b00      	cmp	r3, #0
 801e108:	d05a      	beq.n	801e1c0 <_dtoa_r+0xa18>
 801e10a:	6869      	ldr	r1, [r5, #4]
 801e10c:	4658      	mov	r0, fp
 801e10e:	f000 f965 	bl	801e3dc <_Balloc>
 801e112:	4606      	mov	r6, r0
 801e114:	b928      	cbnz	r0, 801e122 <_dtoa_r+0x97a>
 801e116:	4b84      	ldr	r3, [pc, #528]	@ (801e328 <_dtoa_r+0xb80>)
 801e118:	4602      	mov	r2, r0
 801e11a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e11e:	f7ff bb5a 	b.w	801d7d6 <_dtoa_r+0x2e>
 801e122:	692a      	ldr	r2, [r5, #16]
 801e124:	3202      	adds	r2, #2
 801e126:	0092      	lsls	r2, r2, #2
 801e128:	f105 010c 	add.w	r1, r5, #12
 801e12c:	300c      	adds	r0, #12
 801e12e:	f7ff fa9c 	bl	801d66a <memcpy>
 801e132:	2201      	movs	r2, #1
 801e134:	4631      	mov	r1, r6
 801e136:	4658      	mov	r0, fp
 801e138:	f000 fb5e 	bl	801e7f8 <__lshift>
 801e13c:	f10a 0301 	add.w	r3, sl, #1
 801e140:	9307      	str	r3, [sp, #28]
 801e142:	9b00      	ldr	r3, [sp, #0]
 801e144:	4453      	add	r3, sl
 801e146:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e148:	9b02      	ldr	r3, [sp, #8]
 801e14a:	f003 0301 	and.w	r3, r3, #1
 801e14e:	462f      	mov	r7, r5
 801e150:	930a      	str	r3, [sp, #40]	@ 0x28
 801e152:	4605      	mov	r5, r0
 801e154:	9b07      	ldr	r3, [sp, #28]
 801e156:	4621      	mov	r1, r4
 801e158:	3b01      	subs	r3, #1
 801e15a:	4648      	mov	r0, r9
 801e15c:	9300      	str	r3, [sp, #0]
 801e15e:	f7ff fa99 	bl	801d694 <quorem>
 801e162:	4639      	mov	r1, r7
 801e164:	9002      	str	r0, [sp, #8]
 801e166:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e16a:	4648      	mov	r0, r9
 801e16c:	f000 fbb0 	bl	801e8d0 <__mcmp>
 801e170:	462a      	mov	r2, r5
 801e172:	9008      	str	r0, [sp, #32]
 801e174:	4621      	mov	r1, r4
 801e176:	4658      	mov	r0, fp
 801e178:	f000 fbc6 	bl	801e908 <__mdiff>
 801e17c:	68c2      	ldr	r2, [r0, #12]
 801e17e:	4606      	mov	r6, r0
 801e180:	bb02      	cbnz	r2, 801e1c4 <_dtoa_r+0xa1c>
 801e182:	4601      	mov	r1, r0
 801e184:	4648      	mov	r0, r9
 801e186:	f000 fba3 	bl	801e8d0 <__mcmp>
 801e18a:	4602      	mov	r2, r0
 801e18c:	4631      	mov	r1, r6
 801e18e:	4658      	mov	r0, fp
 801e190:	920e      	str	r2, [sp, #56]	@ 0x38
 801e192:	f000 f963 	bl	801e45c <_Bfree>
 801e196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e198:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e19a:	9e07      	ldr	r6, [sp, #28]
 801e19c:	ea43 0102 	orr.w	r1, r3, r2
 801e1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1a2:	4319      	orrs	r1, r3
 801e1a4:	d110      	bne.n	801e1c8 <_dtoa_r+0xa20>
 801e1a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e1aa:	d029      	beq.n	801e200 <_dtoa_r+0xa58>
 801e1ac:	9b08      	ldr	r3, [sp, #32]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	dd02      	ble.n	801e1b8 <_dtoa_r+0xa10>
 801e1b2:	9b02      	ldr	r3, [sp, #8]
 801e1b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e1b8:	9b00      	ldr	r3, [sp, #0]
 801e1ba:	f883 8000 	strb.w	r8, [r3]
 801e1be:	e63f      	b.n	801de40 <_dtoa_r+0x698>
 801e1c0:	4628      	mov	r0, r5
 801e1c2:	e7bb      	b.n	801e13c <_dtoa_r+0x994>
 801e1c4:	2201      	movs	r2, #1
 801e1c6:	e7e1      	b.n	801e18c <_dtoa_r+0x9e4>
 801e1c8:	9b08      	ldr	r3, [sp, #32]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	db04      	blt.n	801e1d8 <_dtoa_r+0xa30>
 801e1ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e1d0:	430b      	orrs	r3, r1
 801e1d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e1d4:	430b      	orrs	r3, r1
 801e1d6:	d120      	bne.n	801e21a <_dtoa_r+0xa72>
 801e1d8:	2a00      	cmp	r2, #0
 801e1da:	dded      	ble.n	801e1b8 <_dtoa_r+0xa10>
 801e1dc:	4649      	mov	r1, r9
 801e1de:	2201      	movs	r2, #1
 801e1e0:	4658      	mov	r0, fp
 801e1e2:	f000 fb09 	bl	801e7f8 <__lshift>
 801e1e6:	4621      	mov	r1, r4
 801e1e8:	4681      	mov	r9, r0
 801e1ea:	f000 fb71 	bl	801e8d0 <__mcmp>
 801e1ee:	2800      	cmp	r0, #0
 801e1f0:	dc03      	bgt.n	801e1fa <_dtoa_r+0xa52>
 801e1f2:	d1e1      	bne.n	801e1b8 <_dtoa_r+0xa10>
 801e1f4:	f018 0f01 	tst.w	r8, #1
 801e1f8:	d0de      	beq.n	801e1b8 <_dtoa_r+0xa10>
 801e1fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e1fe:	d1d8      	bne.n	801e1b2 <_dtoa_r+0xa0a>
 801e200:	9a00      	ldr	r2, [sp, #0]
 801e202:	2339      	movs	r3, #57	@ 0x39
 801e204:	7013      	strb	r3, [r2, #0]
 801e206:	4633      	mov	r3, r6
 801e208:	461e      	mov	r6, r3
 801e20a:	3b01      	subs	r3, #1
 801e20c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e210:	2a39      	cmp	r2, #57	@ 0x39
 801e212:	d052      	beq.n	801e2ba <_dtoa_r+0xb12>
 801e214:	3201      	adds	r2, #1
 801e216:	701a      	strb	r2, [r3, #0]
 801e218:	e612      	b.n	801de40 <_dtoa_r+0x698>
 801e21a:	2a00      	cmp	r2, #0
 801e21c:	dd07      	ble.n	801e22e <_dtoa_r+0xa86>
 801e21e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e222:	d0ed      	beq.n	801e200 <_dtoa_r+0xa58>
 801e224:	9a00      	ldr	r2, [sp, #0]
 801e226:	f108 0301 	add.w	r3, r8, #1
 801e22a:	7013      	strb	r3, [r2, #0]
 801e22c:	e608      	b.n	801de40 <_dtoa_r+0x698>
 801e22e:	9b07      	ldr	r3, [sp, #28]
 801e230:	9a07      	ldr	r2, [sp, #28]
 801e232:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e238:	4293      	cmp	r3, r2
 801e23a:	d028      	beq.n	801e28e <_dtoa_r+0xae6>
 801e23c:	4649      	mov	r1, r9
 801e23e:	2300      	movs	r3, #0
 801e240:	220a      	movs	r2, #10
 801e242:	4658      	mov	r0, fp
 801e244:	f000 f92c 	bl	801e4a0 <__multadd>
 801e248:	42af      	cmp	r7, r5
 801e24a:	4681      	mov	r9, r0
 801e24c:	f04f 0300 	mov.w	r3, #0
 801e250:	f04f 020a 	mov.w	r2, #10
 801e254:	4639      	mov	r1, r7
 801e256:	4658      	mov	r0, fp
 801e258:	d107      	bne.n	801e26a <_dtoa_r+0xac2>
 801e25a:	f000 f921 	bl	801e4a0 <__multadd>
 801e25e:	4607      	mov	r7, r0
 801e260:	4605      	mov	r5, r0
 801e262:	9b07      	ldr	r3, [sp, #28]
 801e264:	3301      	adds	r3, #1
 801e266:	9307      	str	r3, [sp, #28]
 801e268:	e774      	b.n	801e154 <_dtoa_r+0x9ac>
 801e26a:	f000 f919 	bl	801e4a0 <__multadd>
 801e26e:	4629      	mov	r1, r5
 801e270:	4607      	mov	r7, r0
 801e272:	2300      	movs	r3, #0
 801e274:	220a      	movs	r2, #10
 801e276:	4658      	mov	r0, fp
 801e278:	f000 f912 	bl	801e4a0 <__multadd>
 801e27c:	4605      	mov	r5, r0
 801e27e:	e7f0      	b.n	801e262 <_dtoa_r+0xaba>
 801e280:	9b00      	ldr	r3, [sp, #0]
 801e282:	2b00      	cmp	r3, #0
 801e284:	bfcc      	ite	gt
 801e286:	461e      	movgt	r6, r3
 801e288:	2601      	movle	r6, #1
 801e28a:	4456      	add	r6, sl
 801e28c:	2700      	movs	r7, #0
 801e28e:	4649      	mov	r1, r9
 801e290:	2201      	movs	r2, #1
 801e292:	4658      	mov	r0, fp
 801e294:	f000 fab0 	bl	801e7f8 <__lshift>
 801e298:	4621      	mov	r1, r4
 801e29a:	4681      	mov	r9, r0
 801e29c:	f000 fb18 	bl	801e8d0 <__mcmp>
 801e2a0:	2800      	cmp	r0, #0
 801e2a2:	dcb0      	bgt.n	801e206 <_dtoa_r+0xa5e>
 801e2a4:	d102      	bne.n	801e2ac <_dtoa_r+0xb04>
 801e2a6:	f018 0f01 	tst.w	r8, #1
 801e2aa:	d1ac      	bne.n	801e206 <_dtoa_r+0xa5e>
 801e2ac:	4633      	mov	r3, r6
 801e2ae:	461e      	mov	r6, r3
 801e2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e2b4:	2a30      	cmp	r2, #48	@ 0x30
 801e2b6:	d0fa      	beq.n	801e2ae <_dtoa_r+0xb06>
 801e2b8:	e5c2      	b.n	801de40 <_dtoa_r+0x698>
 801e2ba:	459a      	cmp	sl, r3
 801e2bc:	d1a4      	bne.n	801e208 <_dtoa_r+0xa60>
 801e2be:	9b04      	ldr	r3, [sp, #16]
 801e2c0:	3301      	adds	r3, #1
 801e2c2:	9304      	str	r3, [sp, #16]
 801e2c4:	2331      	movs	r3, #49	@ 0x31
 801e2c6:	f88a 3000 	strb.w	r3, [sl]
 801e2ca:	e5b9      	b.n	801de40 <_dtoa_r+0x698>
 801e2cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e32c <_dtoa_r+0xb84>
 801e2d2:	b11b      	cbz	r3, 801e2dc <_dtoa_r+0xb34>
 801e2d4:	f10a 0308 	add.w	r3, sl, #8
 801e2d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e2da:	6013      	str	r3, [r2, #0]
 801e2dc:	4650      	mov	r0, sl
 801e2de:	b019      	add	sp, #100	@ 0x64
 801e2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e6:	2b01      	cmp	r3, #1
 801e2e8:	f77f ae37 	ble.w	801df5a <_dtoa_r+0x7b2>
 801e2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2f0:	2001      	movs	r0, #1
 801e2f2:	e655      	b.n	801dfa0 <_dtoa_r+0x7f8>
 801e2f4:	9b00      	ldr	r3, [sp, #0]
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	f77f aed6 	ble.w	801e0a8 <_dtoa_r+0x900>
 801e2fc:	4656      	mov	r6, sl
 801e2fe:	4621      	mov	r1, r4
 801e300:	4648      	mov	r0, r9
 801e302:	f7ff f9c7 	bl	801d694 <quorem>
 801e306:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e30a:	f806 8b01 	strb.w	r8, [r6], #1
 801e30e:	9b00      	ldr	r3, [sp, #0]
 801e310:	eba6 020a 	sub.w	r2, r6, sl
 801e314:	4293      	cmp	r3, r2
 801e316:	ddb3      	ble.n	801e280 <_dtoa_r+0xad8>
 801e318:	4649      	mov	r1, r9
 801e31a:	2300      	movs	r3, #0
 801e31c:	220a      	movs	r2, #10
 801e31e:	4658      	mov	r0, fp
 801e320:	f000 f8be 	bl	801e4a0 <__multadd>
 801e324:	4681      	mov	r9, r0
 801e326:	e7ea      	b.n	801e2fe <_dtoa_r+0xb56>
 801e328:	080246af 	.word	0x080246af
 801e32c:	0802464a 	.word	0x0802464a

0801e330 <__env_lock>:
 801e330:	4801      	ldr	r0, [pc, #4]	@ (801e338 <__env_lock+0x8>)
 801e332:	f7ff b990 	b.w	801d656 <__retarget_lock_acquire_recursive>
 801e336:	bf00      	nop
 801e338:	20018358 	.word	0x20018358

0801e33c <__env_unlock>:
 801e33c:	4801      	ldr	r0, [pc, #4]	@ (801e344 <__env_unlock+0x8>)
 801e33e:	f7ff b98b 	b.w	801d658 <__retarget_lock_release_recursive>
 801e342:	bf00      	nop
 801e344:	20018358 	.word	0x20018358

0801e348 <_free_r>:
 801e348:	b538      	push	{r3, r4, r5, lr}
 801e34a:	4605      	mov	r5, r0
 801e34c:	2900      	cmp	r1, #0
 801e34e:	d041      	beq.n	801e3d4 <_free_r+0x8c>
 801e350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e354:	1f0c      	subs	r4, r1, #4
 801e356:	2b00      	cmp	r3, #0
 801e358:	bfb8      	it	lt
 801e35a:	18e4      	addlt	r4, r4, r3
 801e35c:	f7fd fffc 	bl	801c358 <__malloc_lock>
 801e360:	4a1d      	ldr	r2, [pc, #116]	@ (801e3d8 <_free_r+0x90>)
 801e362:	6813      	ldr	r3, [r2, #0]
 801e364:	b933      	cbnz	r3, 801e374 <_free_r+0x2c>
 801e366:	6063      	str	r3, [r4, #4]
 801e368:	6014      	str	r4, [r2, #0]
 801e36a:	4628      	mov	r0, r5
 801e36c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e370:	f7fd bff8 	b.w	801c364 <__malloc_unlock>
 801e374:	42a3      	cmp	r3, r4
 801e376:	d908      	bls.n	801e38a <_free_r+0x42>
 801e378:	6820      	ldr	r0, [r4, #0]
 801e37a:	1821      	adds	r1, r4, r0
 801e37c:	428b      	cmp	r3, r1
 801e37e:	bf01      	itttt	eq
 801e380:	6819      	ldreq	r1, [r3, #0]
 801e382:	685b      	ldreq	r3, [r3, #4]
 801e384:	1809      	addeq	r1, r1, r0
 801e386:	6021      	streq	r1, [r4, #0]
 801e388:	e7ed      	b.n	801e366 <_free_r+0x1e>
 801e38a:	461a      	mov	r2, r3
 801e38c:	685b      	ldr	r3, [r3, #4]
 801e38e:	b10b      	cbz	r3, 801e394 <_free_r+0x4c>
 801e390:	42a3      	cmp	r3, r4
 801e392:	d9fa      	bls.n	801e38a <_free_r+0x42>
 801e394:	6811      	ldr	r1, [r2, #0]
 801e396:	1850      	adds	r0, r2, r1
 801e398:	42a0      	cmp	r0, r4
 801e39a:	d10b      	bne.n	801e3b4 <_free_r+0x6c>
 801e39c:	6820      	ldr	r0, [r4, #0]
 801e39e:	4401      	add	r1, r0
 801e3a0:	1850      	adds	r0, r2, r1
 801e3a2:	4283      	cmp	r3, r0
 801e3a4:	6011      	str	r1, [r2, #0]
 801e3a6:	d1e0      	bne.n	801e36a <_free_r+0x22>
 801e3a8:	6818      	ldr	r0, [r3, #0]
 801e3aa:	685b      	ldr	r3, [r3, #4]
 801e3ac:	6053      	str	r3, [r2, #4]
 801e3ae:	4408      	add	r0, r1
 801e3b0:	6010      	str	r0, [r2, #0]
 801e3b2:	e7da      	b.n	801e36a <_free_r+0x22>
 801e3b4:	d902      	bls.n	801e3bc <_free_r+0x74>
 801e3b6:	230c      	movs	r3, #12
 801e3b8:	602b      	str	r3, [r5, #0]
 801e3ba:	e7d6      	b.n	801e36a <_free_r+0x22>
 801e3bc:	6820      	ldr	r0, [r4, #0]
 801e3be:	1821      	adds	r1, r4, r0
 801e3c0:	428b      	cmp	r3, r1
 801e3c2:	bf04      	itt	eq
 801e3c4:	6819      	ldreq	r1, [r3, #0]
 801e3c6:	685b      	ldreq	r3, [r3, #4]
 801e3c8:	6063      	str	r3, [r4, #4]
 801e3ca:	bf04      	itt	eq
 801e3cc:	1809      	addeq	r1, r1, r0
 801e3ce:	6021      	streq	r1, [r4, #0]
 801e3d0:	6054      	str	r4, [r2, #4]
 801e3d2:	e7ca      	b.n	801e36a <_free_r+0x22>
 801e3d4:	bd38      	pop	{r3, r4, r5, pc}
 801e3d6:	bf00      	nop
 801e3d8:	20018214 	.word	0x20018214

0801e3dc <_Balloc>:
 801e3dc:	b570      	push	{r4, r5, r6, lr}
 801e3de:	69c6      	ldr	r6, [r0, #28]
 801e3e0:	4604      	mov	r4, r0
 801e3e2:	460d      	mov	r5, r1
 801e3e4:	b976      	cbnz	r6, 801e404 <_Balloc+0x28>
 801e3e6:	2010      	movs	r0, #16
 801e3e8:	f7fd ff04 	bl	801c1f4 <malloc>
 801e3ec:	4602      	mov	r2, r0
 801e3ee:	61e0      	str	r0, [r4, #28]
 801e3f0:	b920      	cbnz	r0, 801e3fc <_Balloc+0x20>
 801e3f2:	4b18      	ldr	r3, [pc, #96]	@ (801e454 <_Balloc+0x78>)
 801e3f4:	4818      	ldr	r0, [pc, #96]	@ (801e458 <_Balloc+0x7c>)
 801e3f6:	216b      	movs	r1, #107	@ 0x6b
 801e3f8:	f7fd fe68 	bl	801c0cc <__assert_func>
 801e3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e400:	6006      	str	r6, [r0, #0]
 801e402:	60c6      	str	r6, [r0, #12]
 801e404:	69e6      	ldr	r6, [r4, #28]
 801e406:	68f3      	ldr	r3, [r6, #12]
 801e408:	b183      	cbz	r3, 801e42c <_Balloc+0x50>
 801e40a:	69e3      	ldr	r3, [r4, #28]
 801e40c:	68db      	ldr	r3, [r3, #12]
 801e40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e412:	b9b8      	cbnz	r0, 801e444 <_Balloc+0x68>
 801e414:	2101      	movs	r1, #1
 801e416:	fa01 f605 	lsl.w	r6, r1, r5
 801e41a:	1d72      	adds	r2, r6, #5
 801e41c:	0092      	lsls	r2, r2, #2
 801e41e:	4620      	mov	r0, r4
 801e420:	f7fd fe7a 	bl	801c118 <_calloc_r>
 801e424:	b160      	cbz	r0, 801e440 <_Balloc+0x64>
 801e426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e42a:	e00e      	b.n	801e44a <_Balloc+0x6e>
 801e42c:	2221      	movs	r2, #33	@ 0x21
 801e42e:	2104      	movs	r1, #4
 801e430:	4620      	mov	r0, r4
 801e432:	f7fd fe71 	bl	801c118 <_calloc_r>
 801e436:	69e3      	ldr	r3, [r4, #28]
 801e438:	60f0      	str	r0, [r6, #12]
 801e43a:	68db      	ldr	r3, [r3, #12]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d1e4      	bne.n	801e40a <_Balloc+0x2e>
 801e440:	2000      	movs	r0, #0
 801e442:	bd70      	pop	{r4, r5, r6, pc}
 801e444:	6802      	ldr	r2, [r0, #0]
 801e446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e44a:	2300      	movs	r3, #0
 801e44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e450:	e7f7      	b.n	801e442 <_Balloc+0x66>
 801e452:	bf00      	nop
 801e454:	080244a6 	.word	0x080244a6
 801e458:	080246c0 	.word	0x080246c0

0801e45c <_Bfree>:
 801e45c:	b570      	push	{r4, r5, r6, lr}
 801e45e:	69c6      	ldr	r6, [r0, #28]
 801e460:	4605      	mov	r5, r0
 801e462:	460c      	mov	r4, r1
 801e464:	b976      	cbnz	r6, 801e484 <_Bfree+0x28>
 801e466:	2010      	movs	r0, #16
 801e468:	f7fd fec4 	bl	801c1f4 <malloc>
 801e46c:	4602      	mov	r2, r0
 801e46e:	61e8      	str	r0, [r5, #28]
 801e470:	b920      	cbnz	r0, 801e47c <_Bfree+0x20>
 801e472:	4b09      	ldr	r3, [pc, #36]	@ (801e498 <_Bfree+0x3c>)
 801e474:	4809      	ldr	r0, [pc, #36]	@ (801e49c <_Bfree+0x40>)
 801e476:	218f      	movs	r1, #143	@ 0x8f
 801e478:	f7fd fe28 	bl	801c0cc <__assert_func>
 801e47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e480:	6006      	str	r6, [r0, #0]
 801e482:	60c6      	str	r6, [r0, #12]
 801e484:	b13c      	cbz	r4, 801e496 <_Bfree+0x3a>
 801e486:	69eb      	ldr	r3, [r5, #28]
 801e488:	6862      	ldr	r2, [r4, #4]
 801e48a:	68db      	ldr	r3, [r3, #12]
 801e48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e490:	6021      	str	r1, [r4, #0]
 801e492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e496:	bd70      	pop	{r4, r5, r6, pc}
 801e498:	080244a6 	.word	0x080244a6
 801e49c:	080246c0 	.word	0x080246c0

0801e4a0 <__multadd>:
 801e4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4a4:	690d      	ldr	r5, [r1, #16]
 801e4a6:	4607      	mov	r7, r0
 801e4a8:	460c      	mov	r4, r1
 801e4aa:	461e      	mov	r6, r3
 801e4ac:	f101 0c14 	add.w	ip, r1, #20
 801e4b0:	2000      	movs	r0, #0
 801e4b2:	f8dc 3000 	ldr.w	r3, [ip]
 801e4b6:	b299      	uxth	r1, r3
 801e4b8:	fb02 6101 	mla	r1, r2, r1, r6
 801e4bc:	0c1e      	lsrs	r6, r3, #16
 801e4be:	0c0b      	lsrs	r3, r1, #16
 801e4c0:	fb02 3306 	mla	r3, r2, r6, r3
 801e4c4:	b289      	uxth	r1, r1
 801e4c6:	3001      	adds	r0, #1
 801e4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e4cc:	4285      	cmp	r5, r0
 801e4ce:	f84c 1b04 	str.w	r1, [ip], #4
 801e4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e4d6:	dcec      	bgt.n	801e4b2 <__multadd+0x12>
 801e4d8:	b30e      	cbz	r6, 801e51e <__multadd+0x7e>
 801e4da:	68a3      	ldr	r3, [r4, #8]
 801e4dc:	42ab      	cmp	r3, r5
 801e4de:	dc19      	bgt.n	801e514 <__multadd+0x74>
 801e4e0:	6861      	ldr	r1, [r4, #4]
 801e4e2:	4638      	mov	r0, r7
 801e4e4:	3101      	adds	r1, #1
 801e4e6:	f7ff ff79 	bl	801e3dc <_Balloc>
 801e4ea:	4680      	mov	r8, r0
 801e4ec:	b928      	cbnz	r0, 801e4fa <__multadd+0x5a>
 801e4ee:	4602      	mov	r2, r0
 801e4f0:	4b0c      	ldr	r3, [pc, #48]	@ (801e524 <__multadd+0x84>)
 801e4f2:	480d      	ldr	r0, [pc, #52]	@ (801e528 <__multadd+0x88>)
 801e4f4:	21ba      	movs	r1, #186	@ 0xba
 801e4f6:	f7fd fde9 	bl	801c0cc <__assert_func>
 801e4fa:	6922      	ldr	r2, [r4, #16]
 801e4fc:	3202      	adds	r2, #2
 801e4fe:	f104 010c 	add.w	r1, r4, #12
 801e502:	0092      	lsls	r2, r2, #2
 801e504:	300c      	adds	r0, #12
 801e506:	f7ff f8b0 	bl	801d66a <memcpy>
 801e50a:	4621      	mov	r1, r4
 801e50c:	4638      	mov	r0, r7
 801e50e:	f7ff ffa5 	bl	801e45c <_Bfree>
 801e512:	4644      	mov	r4, r8
 801e514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e518:	3501      	adds	r5, #1
 801e51a:	615e      	str	r6, [r3, #20]
 801e51c:	6125      	str	r5, [r4, #16]
 801e51e:	4620      	mov	r0, r4
 801e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e524:	080246af 	.word	0x080246af
 801e528:	080246c0 	.word	0x080246c0

0801e52c <__hi0bits>:
 801e52c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e530:	4603      	mov	r3, r0
 801e532:	bf36      	itet	cc
 801e534:	0403      	lslcc	r3, r0, #16
 801e536:	2000      	movcs	r0, #0
 801e538:	2010      	movcc	r0, #16
 801e53a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e53e:	bf3c      	itt	cc
 801e540:	021b      	lslcc	r3, r3, #8
 801e542:	3008      	addcc	r0, #8
 801e544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e548:	bf3c      	itt	cc
 801e54a:	011b      	lslcc	r3, r3, #4
 801e54c:	3004      	addcc	r0, #4
 801e54e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e552:	bf3c      	itt	cc
 801e554:	009b      	lslcc	r3, r3, #2
 801e556:	3002      	addcc	r0, #2
 801e558:	2b00      	cmp	r3, #0
 801e55a:	db05      	blt.n	801e568 <__hi0bits+0x3c>
 801e55c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e560:	f100 0001 	add.w	r0, r0, #1
 801e564:	bf08      	it	eq
 801e566:	2020      	moveq	r0, #32
 801e568:	4770      	bx	lr

0801e56a <__lo0bits>:
 801e56a:	6803      	ldr	r3, [r0, #0]
 801e56c:	4602      	mov	r2, r0
 801e56e:	f013 0007 	ands.w	r0, r3, #7
 801e572:	d00b      	beq.n	801e58c <__lo0bits+0x22>
 801e574:	07d9      	lsls	r1, r3, #31
 801e576:	d421      	bmi.n	801e5bc <__lo0bits+0x52>
 801e578:	0798      	lsls	r0, r3, #30
 801e57a:	bf49      	itett	mi
 801e57c:	085b      	lsrmi	r3, r3, #1
 801e57e:	089b      	lsrpl	r3, r3, #2
 801e580:	2001      	movmi	r0, #1
 801e582:	6013      	strmi	r3, [r2, #0]
 801e584:	bf5c      	itt	pl
 801e586:	6013      	strpl	r3, [r2, #0]
 801e588:	2002      	movpl	r0, #2
 801e58a:	4770      	bx	lr
 801e58c:	b299      	uxth	r1, r3
 801e58e:	b909      	cbnz	r1, 801e594 <__lo0bits+0x2a>
 801e590:	0c1b      	lsrs	r3, r3, #16
 801e592:	2010      	movs	r0, #16
 801e594:	b2d9      	uxtb	r1, r3
 801e596:	b909      	cbnz	r1, 801e59c <__lo0bits+0x32>
 801e598:	3008      	adds	r0, #8
 801e59a:	0a1b      	lsrs	r3, r3, #8
 801e59c:	0719      	lsls	r1, r3, #28
 801e59e:	bf04      	itt	eq
 801e5a0:	091b      	lsreq	r3, r3, #4
 801e5a2:	3004      	addeq	r0, #4
 801e5a4:	0799      	lsls	r1, r3, #30
 801e5a6:	bf04      	itt	eq
 801e5a8:	089b      	lsreq	r3, r3, #2
 801e5aa:	3002      	addeq	r0, #2
 801e5ac:	07d9      	lsls	r1, r3, #31
 801e5ae:	d403      	bmi.n	801e5b8 <__lo0bits+0x4e>
 801e5b0:	085b      	lsrs	r3, r3, #1
 801e5b2:	f100 0001 	add.w	r0, r0, #1
 801e5b6:	d003      	beq.n	801e5c0 <__lo0bits+0x56>
 801e5b8:	6013      	str	r3, [r2, #0]
 801e5ba:	4770      	bx	lr
 801e5bc:	2000      	movs	r0, #0
 801e5be:	4770      	bx	lr
 801e5c0:	2020      	movs	r0, #32
 801e5c2:	4770      	bx	lr

0801e5c4 <__i2b>:
 801e5c4:	b510      	push	{r4, lr}
 801e5c6:	460c      	mov	r4, r1
 801e5c8:	2101      	movs	r1, #1
 801e5ca:	f7ff ff07 	bl	801e3dc <_Balloc>
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	b928      	cbnz	r0, 801e5de <__i2b+0x1a>
 801e5d2:	4b05      	ldr	r3, [pc, #20]	@ (801e5e8 <__i2b+0x24>)
 801e5d4:	4805      	ldr	r0, [pc, #20]	@ (801e5ec <__i2b+0x28>)
 801e5d6:	f240 1145 	movw	r1, #325	@ 0x145
 801e5da:	f7fd fd77 	bl	801c0cc <__assert_func>
 801e5de:	2301      	movs	r3, #1
 801e5e0:	6144      	str	r4, [r0, #20]
 801e5e2:	6103      	str	r3, [r0, #16]
 801e5e4:	bd10      	pop	{r4, pc}
 801e5e6:	bf00      	nop
 801e5e8:	080246af 	.word	0x080246af
 801e5ec:	080246c0 	.word	0x080246c0

0801e5f0 <__multiply>:
 801e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f4:	4614      	mov	r4, r2
 801e5f6:	690a      	ldr	r2, [r1, #16]
 801e5f8:	6923      	ldr	r3, [r4, #16]
 801e5fa:	429a      	cmp	r2, r3
 801e5fc:	bfa8      	it	ge
 801e5fe:	4623      	movge	r3, r4
 801e600:	460f      	mov	r7, r1
 801e602:	bfa4      	itt	ge
 801e604:	460c      	movge	r4, r1
 801e606:	461f      	movge	r7, r3
 801e608:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e60c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e610:	68a3      	ldr	r3, [r4, #8]
 801e612:	6861      	ldr	r1, [r4, #4]
 801e614:	eb0a 0609 	add.w	r6, sl, r9
 801e618:	42b3      	cmp	r3, r6
 801e61a:	b085      	sub	sp, #20
 801e61c:	bfb8      	it	lt
 801e61e:	3101      	addlt	r1, #1
 801e620:	f7ff fedc 	bl	801e3dc <_Balloc>
 801e624:	b930      	cbnz	r0, 801e634 <__multiply+0x44>
 801e626:	4602      	mov	r2, r0
 801e628:	4b44      	ldr	r3, [pc, #272]	@ (801e73c <__multiply+0x14c>)
 801e62a:	4845      	ldr	r0, [pc, #276]	@ (801e740 <__multiply+0x150>)
 801e62c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e630:	f7fd fd4c 	bl	801c0cc <__assert_func>
 801e634:	f100 0514 	add.w	r5, r0, #20
 801e638:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e63c:	462b      	mov	r3, r5
 801e63e:	2200      	movs	r2, #0
 801e640:	4543      	cmp	r3, r8
 801e642:	d321      	bcc.n	801e688 <__multiply+0x98>
 801e644:	f107 0114 	add.w	r1, r7, #20
 801e648:	f104 0214 	add.w	r2, r4, #20
 801e64c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e650:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e654:	9302      	str	r3, [sp, #8]
 801e656:	1b13      	subs	r3, r2, r4
 801e658:	3b15      	subs	r3, #21
 801e65a:	f023 0303 	bic.w	r3, r3, #3
 801e65e:	3304      	adds	r3, #4
 801e660:	f104 0715 	add.w	r7, r4, #21
 801e664:	42ba      	cmp	r2, r7
 801e666:	bf38      	it	cc
 801e668:	2304      	movcc	r3, #4
 801e66a:	9301      	str	r3, [sp, #4]
 801e66c:	9b02      	ldr	r3, [sp, #8]
 801e66e:	9103      	str	r1, [sp, #12]
 801e670:	428b      	cmp	r3, r1
 801e672:	d80c      	bhi.n	801e68e <__multiply+0x9e>
 801e674:	2e00      	cmp	r6, #0
 801e676:	dd03      	ble.n	801e680 <__multiply+0x90>
 801e678:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d05b      	beq.n	801e738 <__multiply+0x148>
 801e680:	6106      	str	r6, [r0, #16]
 801e682:	b005      	add	sp, #20
 801e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e688:	f843 2b04 	str.w	r2, [r3], #4
 801e68c:	e7d8      	b.n	801e640 <__multiply+0x50>
 801e68e:	f8b1 a000 	ldrh.w	sl, [r1]
 801e692:	f1ba 0f00 	cmp.w	sl, #0
 801e696:	d024      	beq.n	801e6e2 <__multiply+0xf2>
 801e698:	f104 0e14 	add.w	lr, r4, #20
 801e69c:	46a9      	mov	r9, r5
 801e69e:	f04f 0c00 	mov.w	ip, #0
 801e6a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e6a6:	f8d9 3000 	ldr.w	r3, [r9]
 801e6aa:	fa1f fb87 	uxth.w	fp, r7
 801e6ae:	b29b      	uxth	r3, r3
 801e6b0:	fb0a 330b 	mla	r3, sl, fp, r3
 801e6b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e6b8:	f8d9 7000 	ldr.w	r7, [r9]
 801e6bc:	4463      	add	r3, ip
 801e6be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e6c2:	fb0a c70b 	mla	r7, sl, fp, ip
 801e6c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e6ca:	b29b      	uxth	r3, r3
 801e6cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e6d0:	4572      	cmp	r2, lr
 801e6d2:	f849 3b04 	str.w	r3, [r9], #4
 801e6d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e6da:	d8e2      	bhi.n	801e6a2 <__multiply+0xb2>
 801e6dc:	9b01      	ldr	r3, [sp, #4]
 801e6de:	f845 c003 	str.w	ip, [r5, r3]
 801e6e2:	9b03      	ldr	r3, [sp, #12]
 801e6e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e6e8:	3104      	adds	r1, #4
 801e6ea:	f1b9 0f00 	cmp.w	r9, #0
 801e6ee:	d021      	beq.n	801e734 <__multiply+0x144>
 801e6f0:	682b      	ldr	r3, [r5, #0]
 801e6f2:	f104 0c14 	add.w	ip, r4, #20
 801e6f6:	46ae      	mov	lr, r5
 801e6f8:	f04f 0a00 	mov.w	sl, #0
 801e6fc:	f8bc b000 	ldrh.w	fp, [ip]
 801e700:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e704:	fb09 770b 	mla	r7, r9, fp, r7
 801e708:	4457      	add	r7, sl
 801e70a:	b29b      	uxth	r3, r3
 801e70c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e710:	f84e 3b04 	str.w	r3, [lr], #4
 801e714:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e718:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e71c:	f8be 3000 	ldrh.w	r3, [lr]
 801e720:	fb09 330a 	mla	r3, r9, sl, r3
 801e724:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e728:	4562      	cmp	r2, ip
 801e72a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e72e:	d8e5      	bhi.n	801e6fc <__multiply+0x10c>
 801e730:	9f01      	ldr	r7, [sp, #4]
 801e732:	51eb      	str	r3, [r5, r7]
 801e734:	3504      	adds	r5, #4
 801e736:	e799      	b.n	801e66c <__multiply+0x7c>
 801e738:	3e01      	subs	r6, #1
 801e73a:	e79b      	b.n	801e674 <__multiply+0x84>
 801e73c:	080246af 	.word	0x080246af
 801e740:	080246c0 	.word	0x080246c0

0801e744 <__pow5mult>:
 801e744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e748:	4615      	mov	r5, r2
 801e74a:	f012 0203 	ands.w	r2, r2, #3
 801e74e:	4607      	mov	r7, r0
 801e750:	460e      	mov	r6, r1
 801e752:	d007      	beq.n	801e764 <__pow5mult+0x20>
 801e754:	4c25      	ldr	r4, [pc, #148]	@ (801e7ec <__pow5mult+0xa8>)
 801e756:	3a01      	subs	r2, #1
 801e758:	2300      	movs	r3, #0
 801e75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e75e:	f7ff fe9f 	bl	801e4a0 <__multadd>
 801e762:	4606      	mov	r6, r0
 801e764:	10ad      	asrs	r5, r5, #2
 801e766:	d03d      	beq.n	801e7e4 <__pow5mult+0xa0>
 801e768:	69fc      	ldr	r4, [r7, #28]
 801e76a:	b97c      	cbnz	r4, 801e78c <__pow5mult+0x48>
 801e76c:	2010      	movs	r0, #16
 801e76e:	f7fd fd41 	bl	801c1f4 <malloc>
 801e772:	4602      	mov	r2, r0
 801e774:	61f8      	str	r0, [r7, #28]
 801e776:	b928      	cbnz	r0, 801e784 <__pow5mult+0x40>
 801e778:	4b1d      	ldr	r3, [pc, #116]	@ (801e7f0 <__pow5mult+0xac>)
 801e77a:	481e      	ldr	r0, [pc, #120]	@ (801e7f4 <__pow5mult+0xb0>)
 801e77c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e780:	f7fd fca4 	bl	801c0cc <__assert_func>
 801e784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e788:	6004      	str	r4, [r0, #0]
 801e78a:	60c4      	str	r4, [r0, #12]
 801e78c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e794:	b94c      	cbnz	r4, 801e7aa <__pow5mult+0x66>
 801e796:	f240 2171 	movw	r1, #625	@ 0x271
 801e79a:	4638      	mov	r0, r7
 801e79c:	f7ff ff12 	bl	801e5c4 <__i2b>
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	f8c8 0008 	str.w	r0, [r8, #8]
 801e7a6:	4604      	mov	r4, r0
 801e7a8:	6003      	str	r3, [r0, #0]
 801e7aa:	f04f 0900 	mov.w	r9, #0
 801e7ae:	07eb      	lsls	r3, r5, #31
 801e7b0:	d50a      	bpl.n	801e7c8 <__pow5mult+0x84>
 801e7b2:	4631      	mov	r1, r6
 801e7b4:	4622      	mov	r2, r4
 801e7b6:	4638      	mov	r0, r7
 801e7b8:	f7ff ff1a 	bl	801e5f0 <__multiply>
 801e7bc:	4631      	mov	r1, r6
 801e7be:	4680      	mov	r8, r0
 801e7c0:	4638      	mov	r0, r7
 801e7c2:	f7ff fe4b 	bl	801e45c <_Bfree>
 801e7c6:	4646      	mov	r6, r8
 801e7c8:	106d      	asrs	r5, r5, #1
 801e7ca:	d00b      	beq.n	801e7e4 <__pow5mult+0xa0>
 801e7cc:	6820      	ldr	r0, [r4, #0]
 801e7ce:	b938      	cbnz	r0, 801e7e0 <__pow5mult+0x9c>
 801e7d0:	4622      	mov	r2, r4
 801e7d2:	4621      	mov	r1, r4
 801e7d4:	4638      	mov	r0, r7
 801e7d6:	f7ff ff0b 	bl	801e5f0 <__multiply>
 801e7da:	6020      	str	r0, [r4, #0]
 801e7dc:	f8c0 9000 	str.w	r9, [r0]
 801e7e0:	4604      	mov	r4, r0
 801e7e2:	e7e4      	b.n	801e7ae <__pow5mult+0x6a>
 801e7e4:	4630      	mov	r0, r6
 801e7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7ea:	bf00      	nop
 801e7ec:	0802471c 	.word	0x0802471c
 801e7f0:	080244a6 	.word	0x080244a6
 801e7f4:	080246c0 	.word	0x080246c0

0801e7f8 <__lshift>:
 801e7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7fc:	460c      	mov	r4, r1
 801e7fe:	6849      	ldr	r1, [r1, #4]
 801e800:	6923      	ldr	r3, [r4, #16]
 801e802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e806:	68a3      	ldr	r3, [r4, #8]
 801e808:	4607      	mov	r7, r0
 801e80a:	4691      	mov	r9, r2
 801e80c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e810:	f108 0601 	add.w	r6, r8, #1
 801e814:	42b3      	cmp	r3, r6
 801e816:	db0b      	blt.n	801e830 <__lshift+0x38>
 801e818:	4638      	mov	r0, r7
 801e81a:	f7ff fddf 	bl	801e3dc <_Balloc>
 801e81e:	4605      	mov	r5, r0
 801e820:	b948      	cbnz	r0, 801e836 <__lshift+0x3e>
 801e822:	4602      	mov	r2, r0
 801e824:	4b28      	ldr	r3, [pc, #160]	@ (801e8c8 <__lshift+0xd0>)
 801e826:	4829      	ldr	r0, [pc, #164]	@ (801e8cc <__lshift+0xd4>)
 801e828:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e82c:	f7fd fc4e 	bl	801c0cc <__assert_func>
 801e830:	3101      	adds	r1, #1
 801e832:	005b      	lsls	r3, r3, #1
 801e834:	e7ee      	b.n	801e814 <__lshift+0x1c>
 801e836:	2300      	movs	r3, #0
 801e838:	f100 0114 	add.w	r1, r0, #20
 801e83c:	f100 0210 	add.w	r2, r0, #16
 801e840:	4618      	mov	r0, r3
 801e842:	4553      	cmp	r3, sl
 801e844:	db33      	blt.n	801e8ae <__lshift+0xb6>
 801e846:	6920      	ldr	r0, [r4, #16]
 801e848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e84c:	f104 0314 	add.w	r3, r4, #20
 801e850:	f019 091f 	ands.w	r9, r9, #31
 801e854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e85c:	d02b      	beq.n	801e8b6 <__lshift+0xbe>
 801e85e:	f1c9 0e20 	rsb	lr, r9, #32
 801e862:	468a      	mov	sl, r1
 801e864:	2200      	movs	r2, #0
 801e866:	6818      	ldr	r0, [r3, #0]
 801e868:	fa00 f009 	lsl.w	r0, r0, r9
 801e86c:	4310      	orrs	r0, r2
 801e86e:	f84a 0b04 	str.w	r0, [sl], #4
 801e872:	f853 2b04 	ldr.w	r2, [r3], #4
 801e876:	459c      	cmp	ip, r3
 801e878:	fa22 f20e 	lsr.w	r2, r2, lr
 801e87c:	d8f3      	bhi.n	801e866 <__lshift+0x6e>
 801e87e:	ebac 0304 	sub.w	r3, ip, r4
 801e882:	3b15      	subs	r3, #21
 801e884:	f023 0303 	bic.w	r3, r3, #3
 801e888:	3304      	adds	r3, #4
 801e88a:	f104 0015 	add.w	r0, r4, #21
 801e88e:	4584      	cmp	ip, r0
 801e890:	bf38      	it	cc
 801e892:	2304      	movcc	r3, #4
 801e894:	50ca      	str	r2, [r1, r3]
 801e896:	b10a      	cbz	r2, 801e89c <__lshift+0xa4>
 801e898:	f108 0602 	add.w	r6, r8, #2
 801e89c:	3e01      	subs	r6, #1
 801e89e:	4638      	mov	r0, r7
 801e8a0:	612e      	str	r6, [r5, #16]
 801e8a2:	4621      	mov	r1, r4
 801e8a4:	f7ff fdda 	bl	801e45c <_Bfree>
 801e8a8:	4628      	mov	r0, r5
 801e8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8ae:	f842 0f04 	str.w	r0, [r2, #4]!
 801e8b2:	3301      	adds	r3, #1
 801e8b4:	e7c5      	b.n	801e842 <__lshift+0x4a>
 801e8b6:	3904      	subs	r1, #4
 801e8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8bc:	f841 2f04 	str.w	r2, [r1, #4]!
 801e8c0:	459c      	cmp	ip, r3
 801e8c2:	d8f9      	bhi.n	801e8b8 <__lshift+0xc0>
 801e8c4:	e7ea      	b.n	801e89c <__lshift+0xa4>
 801e8c6:	bf00      	nop
 801e8c8:	080246af 	.word	0x080246af
 801e8cc:	080246c0 	.word	0x080246c0

0801e8d0 <__mcmp>:
 801e8d0:	690a      	ldr	r2, [r1, #16]
 801e8d2:	4603      	mov	r3, r0
 801e8d4:	6900      	ldr	r0, [r0, #16]
 801e8d6:	1a80      	subs	r0, r0, r2
 801e8d8:	b530      	push	{r4, r5, lr}
 801e8da:	d10e      	bne.n	801e8fa <__mcmp+0x2a>
 801e8dc:	3314      	adds	r3, #20
 801e8de:	3114      	adds	r1, #20
 801e8e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e8e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e8e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e8ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e8f0:	4295      	cmp	r5, r2
 801e8f2:	d003      	beq.n	801e8fc <__mcmp+0x2c>
 801e8f4:	d205      	bcs.n	801e902 <__mcmp+0x32>
 801e8f6:	f04f 30ff 	mov.w	r0, #4294967295
 801e8fa:	bd30      	pop	{r4, r5, pc}
 801e8fc:	42a3      	cmp	r3, r4
 801e8fe:	d3f3      	bcc.n	801e8e8 <__mcmp+0x18>
 801e900:	e7fb      	b.n	801e8fa <__mcmp+0x2a>
 801e902:	2001      	movs	r0, #1
 801e904:	e7f9      	b.n	801e8fa <__mcmp+0x2a>
	...

0801e908 <__mdiff>:
 801e908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e90c:	4689      	mov	r9, r1
 801e90e:	4606      	mov	r6, r0
 801e910:	4611      	mov	r1, r2
 801e912:	4648      	mov	r0, r9
 801e914:	4614      	mov	r4, r2
 801e916:	f7ff ffdb 	bl	801e8d0 <__mcmp>
 801e91a:	1e05      	subs	r5, r0, #0
 801e91c:	d112      	bne.n	801e944 <__mdiff+0x3c>
 801e91e:	4629      	mov	r1, r5
 801e920:	4630      	mov	r0, r6
 801e922:	f7ff fd5b 	bl	801e3dc <_Balloc>
 801e926:	4602      	mov	r2, r0
 801e928:	b928      	cbnz	r0, 801e936 <__mdiff+0x2e>
 801e92a:	4b3f      	ldr	r3, [pc, #252]	@ (801ea28 <__mdiff+0x120>)
 801e92c:	f240 2137 	movw	r1, #567	@ 0x237
 801e930:	483e      	ldr	r0, [pc, #248]	@ (801ea2c <__mdiff+0x124>)
 801e932:	f7fd fbcb 	bl	801c0cc <__assert_func>
 801e936:	2301      	movs	r3, #1
 801e938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e93c:	4610      	mov	r0, r2
 801e93e:	b003      	add	sp, #12
 801e940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e944:	bfbc      	itt	lt
 801e946:	464b      	movlt	r3, r9
 801e948:	46a1      	movlt	r9, r4
 801e94a:	4630      	mov	r0, r6
 801e94c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e950:	bfba      	itte	lt
 801e952:	461c      	movlt	r4, r3
 801e954:	2501      	movlt	r5, #1
 801e956:	2500      	movge	r5, #0
 801e958:	f7ff fd40 	bl	801e3dc <_Balloc>
 801e95c:	4602      	mov	r2, r0
 801e95e:	b918      	cbnz	r0, 801e968 <__mdiff+0x60>
 801e960:	4b31      	ldr	r3, [pc, #196]	@ (801ea28 <__mdiff+0x120>)
 801e962:	f240 2145 	movw	r1, #581	@ 0x245
 801e966:	e7e3      	b.n	801e930 <__mdiff+0x28>
 801e968:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e96c:	6926      	ldr	r6, [r4, #16]
 801e96e:	60c5      	str	r5, [r0, #12]
 801e970:	f109 0310 	add.w	r3, r9, #16
 801e974:	f109 0514 	add.w	r5, r9, #20
 801e978:	f104 0e14 	add.w	lr, r4, #20
 801e97c:	f100 0b14 	add.w	fp, r0, #20
 801e980:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e984:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e988:	9301      	str	r3, [sp, #4]
 801e98a:	46d9      	mov	r9, fp
 801e98c:	f04f 0c00 	mov.w	ip, #0
 801e990:	9b01      	ldr	r3, [sp, #4]
 801e992:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e996:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e99a:	9301      	str	r3, [sp, #4]
 801e99c:	fa1f f38a 	uxth.w	r3, sl
 801e9a0:	4619      	mov	r1, r3
 801e9a2:	b283      	uxth	r3, r0
 801e9a4:	1acb      	subs	r3, r1, r3
 801e9a6:	0c00      	lsrs	r0, r0, #16
 801e9a8:	4463      	add	r3, ip
 801e9aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e9ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e9b2:	b29b      	uxth	r3, r3
 801e9b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e9b8:	4576      	cmp	r6, lr
 801e9ba:	f849 3b04 	str.w	r3, [r9], #4
 801e9be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e9c2:	d8e5      	bhi.n	801e990 <__mdiff+0x88>
 801e9c4:	1b33      	subs	r3, r6, r4
 801e9c6:	3b15      	subs	r3, #21
 801e9c8:	f023 0303 	bic.w	r3, r3, #3
 801e9cc:	3415      	adds	r4, #21
 801e9ce:	3304      	adds	r3, #4
 801e9d0:	42a6      	cmp	r6, r4
 801e9d2:	bf38      	it	cc
 801e9d4:	2304      	movcc	r3, #4
 801e9d6:	441d      	add	r5, r3
 801e9d8:	445b      	add	r3, fp
 801e9da:	461e      	mov	r6, r3
 801e9dc:	462c      	mov	r4, r5
 801e9de:	4544      	cmp	r4, r8
 801e9e0:	d30e      	bcc.n	801ea00 <__mdiff+0xf8>
 801e9e2:	f108 0103 	add.w	r1, r8, #3
 801e9e6:	1b49      	subs	r1, r1, r5
 801e9e8:	f021 0103 	bic.w	r1, r1, #3
 801e9ec:	3d03      	subs	r5, #3
 801e9ee:	45a8      	cmp	r8, r5
 801e9f0:	bf38      	it	cc
 801e9f2:	2100      	movcc	r1, #0
 801e9f4:	440b      	add	r3, r1
 801e9f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e9fa:	b191      	cbz	r1, 801ea22 <__mdiff+0x11a>
 801e9fc:	6117      	str	r7, [r2, #16]
 801e9fe:	e79d      	b.n	801e93c <__mdiff+0x34>
 801ea00:	f854 1b04 	ldr.w	r1, [r4], #4
 801ea04:	46e6      	mov	lr, ip
 801ea06:	0c08      	lsrs	r0, r1, #16
 801ea08:	fa1c fc81 	uxtah	ip, ip, r1
 801ea0c:	4471      	add	r1, lr
 801ea0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ea12:	b289      	uxth	r1, r1
 801ea14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ea18:	f846 1b04 	str.w	r1, [r6], #4
 801ea1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ea20:	e7dd      	b.n	801e9de <__mdiff+0xd6>
 801ea22:	3f01      	subs	r7, #1
 801ea24:	e7e7      	b.n	801e9f6 <__mdiff+0xee>
 801ea26:	bf00      	nop
 801ea28:	080246af 	.word	0x080246af
 801ea2c:	080246c0 	.word	0x080246c0

0801ea30 <__d2b>:
 801ea30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ea34:	460f      	mov	r7, r1
 801ea36:	2101      	movs	r1, #1
 801ea38:	ec59 8b10 	vmov	r8, r9, d0
 801ea3c:	4616      	mov	r6, r2
 801ea3e:	f7ff fccd 	bl	801e3dc <_Balloc>
 801ea42:	4604      	mov	r4, r0
 801ea44:	b930      	cbnz	r0, 801ea54 <__d2b+0x24>
 801ea46:	4602      	mov	r2, r0
 801ea48:	4b23      	ldr	r3, [pc, #140]	@ (801ead8 <__d2b+0xa8>)
 801ea4a:	4824      	ldr	r0, [pc, #144]	@ (801eadc <__d2b+0xac>)
 801ea4c:	f240 310f 	movw	r1, #783	@ 0x30f
 801ea50:	f7fd fb3c 	bl	801c0cc <__assert_func>
 801ea54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ea58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ea5c:	b10d      	cbz	r5, 801ea62 <__d2b+0x32>
 801ea5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ea62:	9301      	str	r3, [sp, #4]
 801ea64:	f1b8 0300 	subs.w	r3, r8, #0
 801ea68:	d023      	beq.n	801eab2 <__d2b+0x82>
 801ea6a:	4668      	mov	r0, sp
 801ea6c:	9300      	str	r3, [sp, #0]
 801ea6e:	f7ff fd7c 	bl	801e56a <__lo0bits>
 801ea72:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ea76:	b1d0      	cbz	r0, 801eaae <__d2b+0x7e>
 801ea78:	f1c0 0320 	rsb	r3, r0, #32
 801ea7c:	fa02 f303 	lsl.w	r3, r2, r3
 801ea80:	430b      	orrs	r3, r1
 801ea82:	40c2      	lsrs	r2, r0
 801ea84:	6163      	str	r3, [r4, #20]
 801ea86:	9201      	str	r2, [sp, #4]
 801ea88:	9b01      	ldr	r3, [sp, #4]
 801ea8a:	61a3      	str	r3, [r4, #24]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	bf0c      	ite	eq
 801ea90:	2201      	moveq	r2, #1
 801ea92:	2202      	movne	r2, #2
 801ea94:	6122      	str	r2, [r4, #16]
 801ea96:	b1a5      	cbz	r5, 801eac2 <__d2b+0x92>
 801ea98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ea9c:	4405      	add	r5, r0
 801ea9e:	603d      	str	r5, [r7, #0]
 801eaa0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801eaa4:	6030      	str	r0, [r6, #0]
 801eaa6:	4620      	mov	r0, r4
 801eaa8:	b003      	add	sp, #12
 801eaaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eaae:	6161      	str	r1, [r4, #20]
 801eab0:	e7ea      	b.n	801ea88 <__d2b+0x58>
 801eab2:	a801      	add	r0, sp, #4
 801eab4:	f7ff fd59 	bl	801e56a <__lo0bits>
 801eab8:	9b01      	ldr	r3, [sp, #4]
 801eaba:	6163      	str	r3, [r4, #20]
 801eabc:	3020      	adds	r0, #32
 801eabe:	2201      	movs	r2, #1
 801eac0:	e7e8      	b.n	801ea94 <__d2b+0x64>
 801eac2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801eac6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801eaca:	6038      	str	r0, [r7, #0]
 801eacc:	6918      	ldr	r0, [r3, #16]
 801eace:	f7ff fd2d 	bl	801e52c <__hi0bits>
 801ead2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ead6:	e7e5      	b.n	801eaa4 <__d2b+0x74>
 801ead8:	080246af 	.word	0x080246af
 801eadc:	080246c0 	.word	0x080246c0

0801eae0 <_malloc_usable_size_r>:
 801eae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eae4:	1f18      	subs	r0, r3, #4
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	bfbc      	itt	lt
 801eaea:	580b      	ldrlt	r3, [r1, r0]
 801eaec:	18c0      	addlt	r0, r0, r3
 801eaee:	4770      	bx	lr

0801eaf0 <__ssputs_r>:
 801eaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaf4:	688e      	ldr	r6, [r1, #8]
 801eaf6:	461f      	mov	r7, r3
 801eaf8:	42be      	cmp	r6, r7
 801eafa:	680b      	ldr	r3, [r1, #0]
 801eafc:	4682      	mov	sl, r0
 801eafe:	460c      	mov	r4, r1
 801eb00:	4690      	mov	r8, r2
 801eb02:	d82d      	bhi.n	801eb60 <__ssputs_r+0x70>
 801eb04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801eb08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801eb0c:	d026      	beq.n	801eb5c <__ssputs_r+0x6c>
 801eb0e:	6965      	ldr	r5, [r4, #20]
 801eb10:	6909      	ldr	r1, [r1, #16]
 801eb12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb16:	eba3 0901 	sub.w	r9, r3, r1
 801eb1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eb1e:	1c7b      	adds	r3, r7, #1
 801eb20:	444b      	add	r3, r9
 801eb22:	106d      	asrs	r5, r5, #1
 801eb24:	429d      	cmp	r5, r3
 801eb26:	bf38      	it	cc
 801eb28:	461d      	movcc	r5, r3
 801eb2a:	0553      	lsls	r3, r2, #21
 801eb2c:	d527      	bpl.n	801eb7e <__ssputs_r+0x8e>
 801eb2e:	4629      	mov	r1, r5
 801eb30:	f7fd fb92 	bl	801c258 <_malloc_r>
 801eb34:	4606      	mov	r6, r0
 801eb36:	b360      	cbz	r0, 801eb92 <__ssputs_r+0xa2>
 801eb38:	6921      	ldr	r1, [r4, #16]
 801eb3a:	464a      	mov	r2, r9
 801eb3c:	f7fe fd95 	bl	801d66a <memcpy>
 801eb40:	89a3      	ldrh	r3, [r4, #12]
 801eb42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801eb46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eb4a:	81a3      	strh	r3, [r4, #12]
 801eb4c:	6126      	str	r6, [r4, #16]
 801eb4e:	6165      	str	r5, [r4, #20]
 801eb50:	444e      	add	r6, r9
 801eb52:	eba5 0509 	sub.w	r5, r5, r9
 801eb56:	6026      	str	r6, [r4, #0]
 801eb58:	60a5      	str	r5, [r4, #8]
 801eb5a:	463e      	mov	r6, r7
 801eb5c:	42be      	cmp	r6, r7
 801eb5e:	d900      	bls.n	801eb62 <__ssputs_r+0x72>
 801eb60:	463e      	mov	r6, r7
 801eb62:	6820      	ldr	r0, [r4, #0]
 801eb64:	4632      	mov	r2, r6
 801eb66:	4641      	mov	r1, r8
 801eb68:	f7fe fc86 	bl	801d478 <memmove>
 801eb6c:	68a3      	ldr	r3, [r4, #8]
 801eb6e:	1b9b      	subs	r3, r3, r6
 801eb70:	60a3      	str	r3, [r4, #8]
 801eb72:	6823      	ldr	r3, [r4, #0]
 801eb74:	4433      	add	r3, r6
 801eb76:	6023      	str	r3, [r4, #0]
 801eb78:	2000      	movs	r0, #0
 801eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb7e:	462a      	mov	r2, r5
 801eb80:	f7fd fc6a 	bl	801c458 <_realloc_r>
 801eb84:	4606      	mov	r6, r0
 801eb86:	2800      	cmp	r0, #0
 801eb88:	d1e0      	bne.n	801eb4c <__ssputs_r+0x5c>
 801eb8a:	6921      	ldr	r1, [r4, #16]
 801eb8c:	4650      	mov	r0, sl
 801eb8e:	f7ff fbdb 	bl	801e348 <_free_r>
 801eb92:	230c      	movs	r3, #12
 801eb94:	f8ca 3000 	str.w	r3, [sl]
 801eb98:	89a3      	ldrh	r3, [r4, #12]
 801eb9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eb9e:	81a3      	strh	r3, [r4, #12]
 801eba0:	f04f 30ff 	mov.w	r0, #4294967295
 801eba4:	e7e9      	b.n	801eb7a <__ssputs_r+0x8a>
	...

0801eba8 <_svfiprintf_r>:
 801eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebac:	4698      	mov	r8, r3
 801ebae:	898b      	ldrh	r3, [r1, #12]
 801ebb0:	061b      	lsls	r3, r3, #24
 801ebb2:	b09d      	sub	sp, #116	@ 0x74
 801ebb4:	4607      	mov	r7, r0
 801ebb6:	460d      	mov	r5, r1
 801ebb8:	4614      	mov	r4, r2
 801ebba:	d510      	bpl.n	801ebde <_svfiprintf_r+0x36>
 801ebbc:	690b      	ldr	r3, [r1, #16]
 801ebbe:	b973      	cbnz	r3, 801ebde <_svfiprintf_r+0x36>
 801ebc0:	2140      	movs	r1, #64	@ 0x40
 801ebc2:	f7fd fb49 	bl	801c258 <_malloc_r>
 801ebc6:	6028      	str	r0, [r5, #0]
 801ebc8:	6128      	str	r0, [r5, #16]
 801ebca:	b930      	cbnz	r0, 801ebda <_svfiprintf_r+0x32>
 801ebcc:	230c      	movs	r3, #12
 801ebce:	603b      	str	r3, [r7, #0]
 801ebd0:	f04f 30ff 	mov.w	r0, #4294967295
 801ebd4:	b01d      	add	sp, #116	@ 0x74
 801ebd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebda:	2340      	movs	r3, #64	@ 0x40
 801ebdc:	616b      	str	r3, [r5, #20]
 801ebde:	2300      	movs	r3, #0
 801ebe0:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebe2:	2320      	movs	r3, #32
 801ebe4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ebe8:	f8cd 800c 	str.w	r8, [sp, #12]
 801ebec:	2330      	movs	r3, #48	@ 0x30
 801ebee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ed8c <_svfiprintf_r+0x1e4>
 801ebf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ebf6:	f04f 0901 	mov.w	r9, #1
 801ebfa:	4623      	mov	r3, r4
 801ebfc:	469a      	mov	sl, r3
 801ebfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec02:	b10a      	cbz	r2, 801ec08 <_svfiprintf_r+0x60>
 801ec04:	2a25      	cmp	r2, #37	@ 0x25
 801ec06:	d1f9      	bne.n	801ebfc <_svfiprintf_r+0x54>
 801ec08:	ebba 0b04 	subs.w	fp, sl, r4
 801ec0c:	d00b      	beq.n	801ec26 <_svfiprintf_r+0x7e>
 801ec0e:	465b      	mov	r3, fp
 801ec10:	4622      	mov	r2, r4
 801ec12:	4629      	mov	r1, r5
 801ec14:	4638      	mov	r0, r7
 801ec16:	f7ff ff6b 	bl	801eaf0 <__ssputs_r>
 801ec1a:	3001      	adds	r0, #1
 801ec1c:	f000 80a7 	beq.w	801ed6e <_svfiprintf_r+0x1c6>
 801ec20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec22:	445a      	add	r2, fp
 801ec24:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec26:	f89a 3000 	ldrb.w	r3, [sl]
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	f000 809f 	beq.w	801ed6e <_svfiprintf_r+0x1c6>
 801ec30:	2300      	movs	r3, #0
 801ec32:	f04f 32ff 	mov.w	r2, #4294967295
 801ec36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec3a:	f10a 0a01 	add.w	sl, sl, #1
 801ec3e:	9304      	str	r3, [sp, #16]
 801ec40:	9307      	str	r3, [sp, #28]
 801ec42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ec46:	931a      	str	r3, [sp, #104]	@ 0x68
 801ec48:	4654      	mov	r4, sl
 801ec4a:	2205      	movs	r2, #5
 801ec4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec50:	484e      	ldr	r0, [pc, #312]	@ (801ed8c <_svfiprintf_r+0x1e4>)
 801ec52:	f7e1 facd 	bl	80001f0 <memchr>
 801ec56:	9a04      	ldr	r2, [sp, #16]
 801ec58:	b9d8      	cbnz	r0, 801ec92 <_svfiprintf_r+0xea>
 801ec5a:	06d0      	lsls	r0, r2, #27
 801ec5c:	bf44      	itt	mi
 801ec5e:	2320      	movmi	r3, #32
 801ec60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ec64:	0711      	lsls	r1, r2, #28
 801ec66:	bf44      	itt	mi
 801ec68:	232b      	movmi	r3, #43	@ 0x2b
 801ec6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ec6e:	f89a 3000 	ldrb.w	r3, [sl]
 801ec72:	2b2a      	cmp	r3, #42	@ 0x2a
 801ec74:	d015      	beq.n	801eca2 <_svfiprintf_r+0xfa>
 801ec76:	9a07      	ldr	r2, [sp, #28]
 801ec78:	4654      	mov	r4, sl
 801ec7a:	2000      	movs	r0, #0
 801ec7c:	f04f 0c0a 	mov.w	ip, #10
 801ec80:	4621      	mov	r1, r4
 801ec82:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec86:	3b30      	subs	r3, #48	@ 0x30
 801ec88:	2b09      	cmp	r3, #9
 801ec8a:	d94b      	bls.n	801ed24 <_svfiprintf_r+0x17c>
 801ec8c:	b1b0      	cbz	r0, 801ecbc <_svfiprintf_r+0x114>
 801ec8e:	9207      	str	r2, [sp, #28]
 801ec90:	e014      	b.n	801ecbc <_svfiprintf_r+0x114>
 801ec92:	eba0 0308 	sub.w	r3, r0, r8
 801ec96:	fa09 f303 	lsl.w	r3, r9, r3
 801ec9a:	4313      	orrs	r3, r2
 801ec9c:	9304      	str	r3, [sp, #16]
 801ec9e:	46a2      	mov	sl, r4
 801eca0:	e7d2      	b.n	801ec48 <_svfiprintf_r+0xa0>
 801eca2:	9b03      	ldr	r3, [sp, #12]
 801eca4:	1d19      	adds	r1, r3, #4
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	9103      	str	r1, [sp, #12]
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	bfbb      	ittet	lt
 801ecae:	425b      	neglt	r3, r3
 801ecb0:	f042 0202 	orrlt.w	r2, r2, #2
 801ecb4:	9307      	strge	r3, [sp, #28]
 801ecb6:	9307      	strlt	r3, [sp, #28]
 801ecb8:	bfb8      	it	lt
 801ecba:	9204      	strlt	r2, [sp, #16]
 801ecbc:	7823      	ldrb	r3, [r4, #0]
 801ecbe:	2b2e      	cmp	r3, #46	@ 0x2e
 801ecc0:	d10a      	bne.n	801ecd8 <_svfiprintf_r+0x130>
 801ecc2:	7863      	ldrb	r3, [r4, #1]
 801ecc4:	2b2a      	cmp	r3, #42	@ 0x2a
 801ecc6:	d132      	bne.n	801ed2e <_svfiprintf_r+0x186>
 801ecc8:	9b03      	ldr	r3, [sp, #12]
 801ecca:	1d1a      	adds	r2, r3, #4
 801eccc:	681b      	ldr	r3, [r3, #0]
 801ecce:	9203      	str	r2, [sp, #12]
 801ecd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ecd4:	3402      	adds	r4, #2
 801ecd6:	9305      	str	r3, [sp, #20]
 801ecd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ed9c <_svfiprintf_r+0x1f4>
 801ecdc:	7821      	ldrb	r1, [r4, #0]
 801ecde:	2203      	movs	r2, #3
 801ece0:	4650      	mov	r0, sl
 801ece2:	f7e1 fa85 	bl	80001f0 <memchr>
 801ece6:	b138      	cbz	r0, 801ecf8 <_svfiprintf_r+0x150>
 801ece8:	9b04      	ldr	r3, [sp, #16]
 801ecea:	eba0 000a 	sub.w	r0, r0, sl
 801ecee:	2240      	movs	r2, #64	@ 0x40
 801ecf0:	4082      	lsls	r2, r0
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	3401      	adds	r4, #1
 801ecf6:	9304      	str	r3, [sp, #16]
 801ecf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecfc:	4824      	ldr	r0, [pc, #144]	@ (801ed90 <_svfiprintf_r+0x1e8>)
 801ecfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ed02:	2206      	movs	r2, #6
 801ed04:	f7e1 fa74 	bl	80001f0 <memchr>
 801ed08:	2800      	cmp	r0, #0
 801ed0a:	d036      	beq.n	801ed7a <_svfiprintf_r+0x1d2>
 801ed0c:	4b21      	ldr	r3, [pc, #132]	@ (801ed94 <_svfiprintf_r+0x1ec>)
 801ed0e:	bb1b      	cbnz	r3, 801ed58 <_svfiprintf_r+0x1b0>
 801ed10:	9b03      	ldr	r3, [sp, #12]
 801ed12:	3307      	adds	r3, #7
 801ed14:	f023 0307 	bic.w	r3, r3, #7
 801ed18:	3308      	adds	r3, #8
 801ed1a:	9303      	str	r3, [sp, #12]
 801ed1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed1e:	4433      	add	r3, r6
 801ed20:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed22:	e76a      	b.n	801ebfa <_svfiprintf_r+0x52>
 801ed24:	fb0c 3202 	mla	r2, ip, r2, r3
 801ed28:	460c      	mov	r4, r1
 801ed2a:	2001      	movs	r0, #1
 801ed2c:	e7a8      	b.n	801ec80 <_svfiprintf_r+0xd8>
 801ed2e:	2300      	movs	r3, #0
 801ed30:	3401      	adds	r4, #1
 801ed32:	9305      	str	r3, [sp, #20]
 801ed34:	4619      	mov	r1, r3
 801ed36:	f04f 0c0a 	mov.w	ip, #10
 801ed3a:	4620      	mov	r0, r4
 801ed3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ed40:	3a30      	subs	r2, #48	@ 0x30
 801ed42:	2a09      	cmp	r2, #9
 801ed44:	d903      	bls.n	801ed4e <_svfiprintf_r+0x1a6>
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d0c6      	beq.n	801ecd8 <_svfiprintf_r+0x130>
 801ed4a:	9105      	str	r1, [sp, #20]
 801ed4c:	e7c4      	b.n	801ecd8 <_svfiprintf_r+0x130>
 801ed4e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ed52:	4604      	mov	r4, r0
 801ed54:	2301      	movs	r3, #1
 801ed56:	e7f0      	b.n	801ed3a <_svfiprintf_r+0x192>
 801ed58:	ab03      	add	r3, sp, #12
 801ed5a:	9300      	str	r3, [sp, #0]
 801ed5c:	462a      	mov	r2, r5
 801ed5e:	4b0e      	ldr	r3, [pc, #56]	@ (801ed98 <_svfiprintf_r+0x1f0>)
 801ed60:	a904      	add	r1, sp, #16
 801ed62:	4638      	mov	r0, r7
 801ed64:	f7fd fcbe 	bl	801c6e4 <_printf_float>
 801ed68:	1c42      	adds	r2, r0, #1
 801ed6a:	4606      	mov	r6, r0
 801ed6c:	d1d6      	bne.n	801ed1c <_svfiprintf_r+0x174>
 801ed6e:	89ab      	ldrh	r3, [r5, #12]
 801ed70:	065b      	lsls	r3, r3, #25
 801ed72:	f53f af2d 	bmi.w	801ebd0 <_svfiprintf_r+0x28>
 801ed76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed78:	e72c      	b.n	801ebd4 <_svfiprintf_r+0x2c>
 801ed7a:	ab03      	add	r3, sp, #12
 801ed7c:	9300      	str	r3, [sp, #0]
 801ed7e:	462a      	mov	r2, r5
 801ed80:	4b05      	ldr	r3, [pc, #20]	@ (801ed98 <_svfiprintf_r+0x1f0>)
 801ed82:	a904      	add	r1, sp, #16
 801ed84:	4638      	mov	r0, r7
 801ed86:	f7fd ff45 	bl	801cc14 <_printf_i>
 801ed8a:	e7ed      	b.n	801ed68 <_svfiprintf_r+0x1c0>
 801ed8c:	08024818 	.word	0x08024818
 801ed90:	08024822 	.word	0x08024822
 801ed94:	0801c6e5 	.word	0x0801c6e5
 801ed98:	0801eaf1 	.word	0x0801eaf1
 801ed9c:	0802481e 	.word	0x0802481e

0801eda0 <__sfputc_r>:
 801eda0:	6893      	ldr	r3, [r2, #8]
 801eda2:	3b01      	subs	r3, #1
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	b410      	push	{r4}
 801eda8:	6093      	str	r3, [r2, #8]
 801edaa:	da08      	bge.n	801edbe <__sfputc_r+0x1e>
 801edac:	6994      	ldr	r4, [r2, #24]
 801edae:	42a3      	cmp	r3, r4
 801edb0:	db01      	blt.n	801edb6 <__sfputc_r+0x16>
 801edb2:	290a      	cmp	r1, #10
 801edb4:	d103      	bne.n	801edbe <__sfputc_r+0x1e>
 801edb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801edba:	f7fe bab9 	b.w	801d330 <__swbuf_r>
 801edbe:	6813      	ldr	r3, [r2, #0]
 801edc0:	1c58      	adds	r0, r3, #1
 801edc2:	6010      	str	r0, [r2, #0]
 801edc4:	7019      	strb	r1, [r3, #0]
 801edc6:	4608      	mov	r0, r1
 801edc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801edcc:	4770      	bx	lr

0801edce <__sfputs_r>:
 801edce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edd0:	4606      	mov	r6, r0
 801edd2:	460f      	mov	r7, r1
 801edd4:	4614      	mov	r4, r2
 801edd6:	18d5      	adds	r5, r2, r3
 801edd8:	42ac      	cmp	r4, r5
 801edda:	d101      	bne.n	801ede0 <__sfputs_r+0x12>
 801eddc:	2000      	movs	r0, #0
 801edde:	e007      	b.n	801edf0 <__sfputs_r+0x22>
 801ede0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ede4:	463a      	mov	r2, r7
 801ede6:	4630      	mov	r0, r6
 801ede8:	f7ff ffda 	bl	801eda0 <__sfputc_r>
 801edec:	1c43      	adds	r3, r0, #1
 801edee:	d1f3      	bne.n	801edd8 <__sfputs_r+0xa>
 801edf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801edf4 <_vfiprintf_r>:
 801edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edf8:	460d      	mov	r5, r1
 801edfa:	b09d      	sub	sp, #116	@ 0x74
 801edfc:	4614      	mov	r4, r2
 801edfe:	4698      	mov	r8, r3
 801ee00:	4606      	mov	r6, r0
 801ee02:	b118      	cbz	r0, 801ee0c <_vfiprintf_r+0x18>
 801ee04:	6a03      	ldr	r3, [r0, #32]
 801ee06:	b90b      	cbnz	r3, 801ee0c <_vfiprintf_r+0x18>
 801ee08:	f7fe f8b0 	bl	801cf6c <__sinit>
 801ee0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ee0e:	07d9      	lsls	r1, r3, #31
 801ee10:	d405      	bmi.n	801ee1e <_vfiprintf_r+0x2a>
 801ee12:	89ab      	ldrh	r3, [r5, #12]
 801ee14:	059a      	lsls	r2, r3, #22
 801ee16:	d402      	bmi.n	801ee1e <_vfiprintf_r+0x2a>
 801ee18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ee1a:	f7fe fc1c 	bl	801d656 <__retarget_lock_acquire_recursive>
 801ee1e:	89ab      	ldrh	r3, [r5, #12]
 801ee20:	071b      	lsls	r3, r3, #28
 801ee22:	d501      	bpl.n	801ee28 <_vfiprintf_r+0x34>
 801ee24:	692b      	ldr	r3, [r5, #16]
 801ee26:	b99b      	cbnz	r3, 801ee50 <_vfiprintf_r+0x5c>
 801ee28:	4629      	mov	r1, r5
 801ee2a:	4630      	mov	r0, r6
 801ee2c:	f7fe fabe 	bl	801d3ac <__swsetup_r>
 801ee30:	b170      	cbz	r0, 801ee50 <_vfiprintf_r+0x5c>
 801ee32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ee34:	07dc      	lsls	r4, r3, #31
 801ee36:	d504      	bpl.n	801ee42 <_vfiprintf_r+0x4e>
 801ee38:	f04f 30ff 	mov.w	r0, #4294967295
 801ee3c:	b01d      	add	sp, #116	@ 0x74
 801ee3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee42:	89ab      	ldrh	r3, [r5, #12]
 801ee44:	0598      	lsls	r0, r3, #22
 801ee46:	d4f7      	bmi.n	801ee38 <_vfiprintf_r+0x44>
 801ee48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ee4a:	f7fe fc05 	bl	801d658 <__retarget_lock_release_recursive>
 801ee4e:	e7f3      	b.n	801ee38 <_vfiprintf_r+0x44>
 801ee50:	2300      	movs	r3, #0
 801ee52:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee54:	2320      	movs	r3, #32
 801ee56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ee5a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee5e:	2330      	movs	r3, #48	@ 0x30
 801ee60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f010 <_vfiprintf_r+0x21c>
 801ee64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ee68:	f04f 0901 	mov.w	r9, #1
 801ee6c:	4623      	mov	r3, r4
 801ee6e:	469a      	mov	sl, r3
 801ee70:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee74:	b10a      	cbz	r2, 801ee7a <_vfiprintf_r+0x86>
 801ee76:	2a25      	cmp	r2, #37	@ 0x25
 801ee78:	d1f9      	bne.n	801ee6e <_vfiprintf_r+0x7a>
 801ee7a:	ebba 0b04 	subs.w	fp, sl, r4
 801ee7e:	d00b      	beq.n	801ee98 <_vfiprintf_r+0xa4>
 801ee80:	465b      	mov	r3, fp
 801ee82:	4622      	mov	r2, r4
 801ee84:	4629      	mov	r1, r5
 801ee86:	4630      	mov	r0, r6
 801ee88:	f7ff ffa1 	bl	801edce <__sfputs_r>
 801ee8c:	3001      	adds	r0, #1
 801ee8e:	f000 80a7 	beq.w	801efe0 <_vfiprintf_r+0x1ec>
 801ee92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee94:	445a      	add	r2, fp
 801ee96:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee98:	f89a 3000 	ldrb.w	r3, [sl]
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	f000 809f 	beq.w	801efe0 <_vfiprintf_r+0x1ec>
 801eea2:	2300      	movs	r3, #0
 801eea4:	f04f 32ff 	mov.w	r2, #4294967295
 801eea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eeac:	f10a 0a01 	add.w	sl, sl, #1
 801eeb0:	9304      	str	r3, [sp, #16]
 801eeb2:	9307      	str	r3, [sp, #28]
 801eeb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801eeb8:	931a      	str	r3, [sp, #104]	@ 0x68
 801eeba:	4654      	mov	r4, sl
 801eebc:	2205      	movs	r2, #5
 801eebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eec2:	4853      	ldr	r0, [pc, #332]	@ (801f010 <_vfiprintf_r+0x21c>)
 801eec4:	f7e1 f994 	bl	80001f0 <memchr>
 801eec8:	9a04      	ldr	r2, [sp, #16]
 801eeca:	b9d8      	cbnz	r0, 801ef04 <_vfiprintf_r+0x110>
 801eecc:	06d1      	lsls	r1, r2, #27
 801eece:	bf44      	itt	mi
 801eed0:	2320      	movmi	r3, #32
 801eed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eed6:	0713      	lsls	r3, r2, #28
 801eed8:	bf44      	itt	mi
 801eeda:	232b      	movmi	r3, #43	@ 0x2b
 801eedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eee0:	f89a 3000 	ldrb.w	r3, [sl]
 801eee4:	2b2a      	cmp	r3, #42	@ 0x2a
 801eee6:	d015      	beq.n	801ef14 <_vfiprintf_r+0x120>
 801eee8:	9a07      	ldr	r2, [sp, #28]
 801eeea:	4654      	mov	r4, sl
 801eeec:	2000      	movs	r0, #0
 801eeee:	f04f 0c0a 	mov.w	ip, #10
 801eef2:	4621      	mov	r1, r4
 801eef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eef8:	3b30      	subs	r3, #48	@ 0x30
 801eefa:	2b09      	cmp	r3, #9
 801eefc:	d94b      	bls.n	801ef96 <_vfiprintf_r+0x1a2>
 801eefe:	b1b0      	cbz	r0, 801ef2e <_vfiprintf_r+0x13a>
 801ef00:	9207      	str	r2, [sp, #28]
 801ef02:	e014      	b.n	801ef2e <_vfiprintf_r+0x13a>
 801ef04:	eba0 0308 	sub.w	r3, r0, r8
 801ef08:	fa09 f303 	lsl.w	r3, r9, r3
 801ef0c:	4313      	orrs	r3, r2
 801ef0e:	9304      	str	r3, [sp, #16]
 801ef10:	46a2      	mov	sl, r4
 801ef12:	e7d2      	b.n	801eeba <_vfiprintf_r+0xc6>
 801ef14:	9b03      	ldr	r3, [sp, #12]
 801ef16:	1d19      	adds	r1, r3, #4
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	9103      	str	r1, [sp, #12]
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	bfbb      	ittet	lt
 801ef20:	425b      	neglt	r3, r3
 801ef22:	f042 0202 	orrlt.w	r2, r2, #2
 801ef26:	9307      	strge	r3, [sp, #28]
 801ef28:	9307      	strlt	r3, [sp, #28]
 801ef2a:	bfb8      	it	lt
 801ef2c:	9204      	strlt	r2, [sp, #16]
 801ef2e:	7823      	ldrb	r3, [r4, #0]
 801ef30:	2b2e      	cmp	r3, #46	@ 0x2e
 801ef32:	d10a      	bne.n	801ef4a <_vfiprintf_r+0x156>
 801ef34:	7863      	ldrb	r3, [r4, #1]
 801ef36:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef38:	d132      	bne.n	801efa0 <_vfiprintf_r+0x1ac>
 801ef3a:	9b03      	ldr	r3, [sp, #12]
 801ef3c:	1d1a      	adds	r2, r3, #4
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	9203      	str	r2, [sp, #12]
 801ef42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ef46:	3402      	adds	r4, #2
 801ef48:	9305      	str	r3, [sp, #20]
 801ef4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f020 <_vfiprintf_r+0x22c>
 801ef4e:	7821      	ldrb	r1, [r4, #0]
 801ef50:	2203      	movs	r2, #3
 801ef52:	4650      	mov	r0, sl
 801ef54:	f7e1 f94c 	bl	80001f0 <memchr>
 801ef58:	b138      	cbz	r0, 801ef6a <_vfiprintf_r+0x176>
 801ef5a:	9b04      	ldr	r3, [sp, #16]
 801ef5c:	eba0 000a 	sub.w	r0, r0, sl
 801ef60:	2240      	movs	r2, #64	@ 0x40
 801ef62:	4082      	lsls	r2, r0
 801ef64:	4313      	orrs	r3, r2
 801ef66:	3401      	adds	r4, #1
 801ef68:	9304      	str	r3, [sp, #16]
 801ef6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef6e:	4829      	ldr	r0, [pc, #164]	@ (801f014 <_vfiprintf_r+0x220>)
 801ef70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ef74:	2206      	movs	r2, #6
 801ef76:	f7e1 f93b 	bl	80001f0 <memchr>
 801ef7a:	2800      	cmp	r0, #0
 801ef7c:	d03f      	beq.n	801effe <_vfiprintf_r+0x20a>
 801ef7e:	4b26      	ldr	r3, [pc, #152]	@ (801f018 <_vfiprintf_r+0x224>)
 801ef80:	bb1b      	cbnz	r3, 801efca <_vfiprintf_r+0x1d6>
 801ef82:	9b03      	ldr	r3, [sp, #12]
 801ef84:	3307      	adds	r3, #7
 801ef86:	f023 0307 	bic.w	r3, r3, #7
 801ef8a:	3308      	adds	r3, #8
 801ef8c:	9303      	str	r3, [sp, #12]
 801ef8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef90:	443b      	add	r3, r7
 801ef92:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef94:	e76a      	b.n	801ee6c <_vfiprintf_r+0x78>
 801ef96:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef9a:	460c      	mov	r4, r1
 801ef9c:	2001      	movs	r0, #1
 801ef9e:	e7a8      	b.n	801eef2 <_vfiprintf_r+0xfe>
 801efa0:	2300      	movs	r3, #0
 801efa2:	3401      	adds	r4, #1
 801efa4:	9305      	str	r3, [sp, #20]
 801efa6:	4619      	mov	r1, r3
 801efa8:	f04f 0c0a 	mov.w	ip, #10
 801efac:	4620      	mov	r0, r4
 801efae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801efb2:	3a30      	subs	r2, #48	@ 0x30
 801efb4:	2a09      	cmp	r2, #9
 801efb6:	d903      	bls.n	801efc0 <_vfiprintf_r+0x1cc>
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d0c6      	beq.n	801ef4a <_vfiprintf_r+0x156>
 801efbc:	9105      	str	r1, [sp, #20]
 801efbe:	e7c4      	b.n	801ef4a <_vfiprintf_r+0x156>
 801efc0:	fb0c 2101 	mla	r1, ip, r1, r2
 801efc4:	4604      	mov	r4, r0
 801efc6:	2301      	movs	r3, #1
 801efc8:	e7f0      	b.n	801efac <_vfiprintf_r+0x1b8>
 801efca:	ab03      	add	r3, sp, #12
 801efcc:	9300      	str	r3, [sp, #0]
 801efce:	462a      	mov	r2, r5
 801efd0:	4b12      	ldr	r3, [pc, #72]	@ (801f01c <_vfiprintf_r+0x228>)
 801efd2:	a904      	add	r1, sp, #16
 801efd4:	4630      	mov	r0, r6
 801efd6:	f7fd fb85 	bl	801c6e4 <_printf_float>
 801efda:	4607      	mov	r7, r0
 801efdc:	1c78      	adds	r0, r7, #1
 801efde:	d1d6      	bne.n	801ef8e <_vfiprintf_r+0x19a>
 801efe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801efe2:	07d9      	lsls	r1, r3, #31
 801efe4:	d405      	bmi.n	801eff2 <_vfiprintf_r+0x1fe>
 801efe6:	89ab      	ldrh	r3, [r5, #12]
 801efe8:	059a      	lsls	r2, r3, #22
 801efea:	d402      	bmi.n	801eff2 <_vfiprintf_r+0x1fe>
 801efec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801efee:	f7fe fb33 	bl	801d658 <__retarget_lock_release_recursive>
 801eff2:	89ab      	ldrh	r3, [r5, #12]
 801eff4:	065b      	lsls	r3, r3, #25
 801eff6:	f53f af1f 	bmi.w	801ee38 <_vfiprintf_r+0x44>
 801effa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801effc:	e71e      	b.n	801ee3c <_vfiprintf_r+0x48>
 801effe:	ab03      	add	r3, sp, #12
 801f000:	9300      	str	r3, [sp, #0]
 801f002:	462a      	mov	r2, r5
 801f004:	4b05      	ldr	r3, [pc, #20]	@ (801f01c <_vfiprintf_r+0x228>)
 801f006:	a904      	add	r1, sp, #16
 801f008:	4630      	mov	r0, r6
 801f00a:	f7fd fe03 	bl	801cc14 <_printf_i>
 801f00e:	e7e4      	b.n	801efda <_vfiprintf_r+0x1e6>
 801f010:	08024818 	.word	0x08024818
 801f014:	08024822 	.word	0x08024822
 801f018:	0801c6e5 	.word	0x0801c6e5
 801f01c:	0801edcf 	.word	0x0801edcf
 801f020:	0802481e 	.word	0x0802481e

0801f024 <__sflush_r>:
 801f024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f02c:	0716      	lsls	r6, r2, #28
 801f02e:	4605      	mov	r5, r0
 801f030:	460c      	mov	r4, r1
 801f032:	d454      	bmi.n	801f0de <__sflush_r+0xba>
 801f034:	684b      	ldr	r3, [r1, #4]
 801f036:	2b00      	cmp	r3, #0
 801f038:	dc02      	bgt.n	801f040 <__sflush_r+0x1c>
 801f03a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	dd48      	ble.n	801f0d2 <__sflush_r+0xae>
 801f040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f042:	2e00      	cmp	r6, #0
 801f044:	d045      	beq.n	801f0d2 <__sflush_r+0xae>
 801f046:	2300      	movs	r3, #0
 801f048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f04c:	682f      	ldr	r7, [r5, #0]
 801f04e:	6a21      	ldr	r1, [r4, #32]
 801f050:	602b      	str	r3, [r5, #0]
 801f052:	d030      	beq.n	801f0b6 <__sflush_r+0x92>
 801f054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f056:	89a3      	ldrh	r3, [r4, #12]
 801f058:	0759      	lsls	r1, r3, #29
 801f05a:	d505      	bpl.n	801f068 <__sflush_r+0x44>
 801f05c:	6863      	ldr	r3, [r4, #4]
 801f05e:	1ad2      	subs	r2, r2, r3
 801f060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f062:	b10b      	cbz	r3, 801f068 <__sflush_r+0x44>
 801f064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f066:	1ad2      	subs	r2, r2, r3
 801f068:	2300      	movs	r3, #0
 801f06a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f06c:	6a21      	ldr	r1, [r4, #32]
 801f06e:	4628      	mov	r0, r5
 801f070:	47b0      	blx	r6
 801f072:	1c43      	adds	r3, r0, #1
 801f074:	89a3      	ldrh	r3, [r4, #12]
 801f076:	d106      	bne.n	801f086 <__sflush_r+0x62>
 801f078:	6829      	ldr	r1, [r5, #0]
 801f07a:	291d      	cmp	r1, #29
 801f07c:	d82b      	bhi.n	801f0d6 <__sflush_r+0xb2>
 801f07e:	4a2a      	ldr	r2, [pc, #168]	@ (801f128 <__sflush_r+0x104>)
 801f080:	410a      	asrs	r2, r1
 801f082:	07d6      	lsls	r6, r2, #31
 801f084:	d427      	bmi.n	801f0d6 <__sflush_r+0xb2>
 801f086:	2200      	movs	r2, #0
 801f088:	6062      	str	r2, [r4, #4]
 801f08a:	04d9      	lsls	r1, r3, #19
 801f08c:	6922      	ldr	r2, [r4, #16]
 801f08e:	6022      	str	r2, [r4, #0]
 801f090:	d504      	bpl.n	801f09c <__sflush_r+0x78>
 801f092:	1c42      	adds	r2, r0, #1
 801f094:	d101      	bne.n	801f09a <__sflush_r+0x76>
 801f096:	682b      	ldr	r3, [r5, #0]
 801f098:	b903      	cbnz	r3, 801f09c <__sflush_r+0x78>
 801f09a:	6560      	str	r0, [r4, #84]	@ 0x54
 801f09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f09e:	602f      	str	r7, [r5, #0]
 801f0a0:	b1b9      	cbz	r1, 801f0d2 <__sflush_r+0xae>
 801f0a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f0a6:	4299      	cmp	r1, r3
 801f0a8:	d002      	beq.n	801f0b0 <__sflush_r+0x8c>
 801f0aa:	4628      	mov	r0, r5
 801f0ac:	f7ff f94c 	bl	801e348 <_free_r>
 801f0b0:	2300      	movs	r3, #0
 801f0b2:	6363      	str	r3, [r4, #52]	@ 0x34
 801f0b4:	e00d      	b.n	801f0d2 <__sflush_r+0xae>
 801f0b6:	2301      	movs	r3, #1
 801f0b8:	4628      	mov	r0, r5
 801f0ba:	47b0      	blx	r6
 801f0bc:	4602      	mov	r2, r0
 801f0be:	1c50      	adds	r0, r2, #1
 801f0c0:	d1c9      	bne.n	801f056 <__sflush_r+0x32>
 801f0c2:	682b      	ldr	r3, [r5, #0]
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d0c6      	beq.n	801f056 <__sflush_r+0x32>
 801f0c8:	2b1d      	cmp	r3, #29
 801f0ca:	d001      	beq.n	801f0d0 <__sflush_r+0xac>
 801f0cc:	2b16      	cmp	r3, #22
 801f0ce:	d11e      	bne.n	801f10e <__sflush_r+0xea>
 801f0d0:	602f      	str	r7, [r5, #0]
 801f0d2:	2000      	movs	r0, #0
 801f0d4:	e022      	b.n	801f11c <__sflush_r+0xf8>
 801f0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f0da:	b21b      	sxth	r3, r3
 801f0dc:	e01b      	b.n	801f116 <__sflush_r+0xf2>
 801f0de:	690f      	ldr	r7, [r1, #16]
 801f0e0:	2f00      	cmp	r7, #0
 801f0e2:	d0f6      	beq.n	801f0d2 <__sflush_r+0xae>
 801f0e4:	0793      	lsls	r3, r2, #30
 801f0e6:	680e      	ldr	r6, [r1, #0]
 801f0e8:	bf08      	it	eq
 801f0ea:	694b      	ldreq	r3, [r1, #20]
 801f0ec:	600f      	str	r7, [r1, #0]
 801f0ee:	bf18      	it	ne
 801f0f0:	2300      	movne	r3, #0
 801f0f2:	eba6 0807 	sub.w	r8, r6, r7
 801f0f6:	608b      	str	r3, [r1, #8]
 801f0f8:	f1b8 0f00 	cmp.w	r8, #0
 801f0fc:	dde9      	ble.n	801f0d2 <__sflush_r+0xae>
 801f0fe:	6a21      	ldr	r1, [r4, #32]
 801f100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f102:	4643      	mov	r3, r8
 801f104:	463a      	mov	r2, r7
 801f106:	4628      	mov	r0, r5
 801f108:	47b0      	blx	r6
 801f10a:	2800      	cmp	r0, #0
 801f10c:	dc08      	bgt.n	801f120 <__sflush_r+0xfc>
 801f10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f116:	81a3      	strh	r3, [r4, #12]
 801f118:	f04f 30ff 	mov.w	r0, #4294967295
 801f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f120:	4407      	add	r7, r0
 801f122:	eba8 0800 	sub.w	r8, r8, r0
 801f126:	e7e7      	b.n	801f0f8 <__sflush_r+0xd4>
 801f128:	dfbffffe 	.word	0xdfbffffe

0801f12c <_fflush_r>:
 801f12c:	b538      	push	{r3, r4, r5, lr}
 801f12e:	690b      	ldr	r3, [r1, #16]
 801f130:	4605      	mov	r5, r0
 801f132:	460c      	mov	r4, r1
 801f134:	b913      	cbnz	r3, 801f13c <_fflush_r+0x10>
 801f136:	2500      	movs	r5, #0
 801f138:	4628      	mov	r0, r5
 801f13a:	bd38      	pop	{r3, r4, r5, pc}
 801f13c:	b118      	cbz	r0, 801f146 <_fflush_r+0x1a>
 801f13e:	6a03      	ldr	r3, [r0, #32]
 801f140:	b90b      	cbnz	r3, 801f146 <_fflush_r+0x1a>
 801f142:	f7fd ff13 	bl	801cf6c <__sinit>
 801f146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d0f3      	beq.n	801f136 <_fflush_r+0xa>
 801f14e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f150:	07d0      	lsls	r0, r2, #31
 801f152:	d404      	bmi.n	801f15e <_fflush_r+0x32>
 801f154:	0599      	lsls	r1, r3, #22
 801f156:	d402      	bmi.n	801f15e <_fflush_r+0x32>
 801f158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f15a:	f7fe fa7c 	bl	801d656 <__retarget_lock_acquire_recursive>
 801f15e:	4628      	mov	r0, r5
 801f160:	4621      	mov	r1, r4
 801f162:	f7ff ff5f 	bl	801f024 <__sflush_r>
 801f166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f168:	07da      	lsls	r2, r3, #31
 801f16a:	4605      	mov	r5, r0
 801f16c:	d4e4      	bmi.n	801f138 <_fflush_r+0xc>
 801f16e:	89a3      	ldrh	r3, [r4, #12]
 801f170:	059b      	lsls	r3, r3, #22
 801f172:	d4e1      	bmi.n	801f138 <_fflush_r+0xc>
 801f174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f176:	f7fe fa6f 	bl	801d658 <__retarget_lock_release_recursive>
 801f17a:	e7dd      	b.n	801f138 <_fflush_r+0xc>

0801f17c <__swhatbuf_r>:
 801f17c:	b570      	push	{r4, r5, r6, lr}
 801f17e:	460c      	mov	r4, r1
 801f180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f184:	2900      	cmp	r1, #0
 801f186:	b096      	sub	sp, #88	@ 0x58
 801f188:	4615      	mov	r5, r2
 801f18a:	461e      	mov	r6, r3
 801f18c:	da0d      	bge.n	801f1aa <__swhatbuf_r+0x2e>
 801f18e:	89a3      	ldrh	r3, [r4, #12]
 801f190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f194:	f04f 0100 	mov.w	r1, #0
 801f198:	bf14      	ite	ne
 801f19a:	2340      	movne	r3, #64	@ 0x40
 801f19c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f1a0:	2000      	movs	r0, #0
 801f1a2:	6031      	str	r1, [r6, #0]
 801f1a4:	602b      	str	r3, [r5, #0]
 801f1a6:	b016      	add	sp, #88	@ 0x58
 801f1a8:	bd70      	pop	{r4, r5, r6, pc}
 801f1aa:	466a      	mov	r2, sp
 801f1ac:	f000 f878 	bl	801f2a0 <_fstat_r>
 801f1b0:	2800      	cmp	r0, #0
 801f1b2:	dbec      	blt.n	801f18e <__swhatbuf_r+0x12>
 801f1b4:	9901      	ldr	r1, [sp, #4]
 801f1b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f1ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f1be:	4259      	negs	r1, r3
 801f1c0:	4159      	adcs	r1, r3
 801f1c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f1c6:	e7eb      	b.n	801f1a0 <__swhatbuf_r+0x24>

0801f1c8 <__smakebuf_r>:
 801f1c8:	898b      	ldrh	r3, [r1, #12]
 801f1ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1cc:	079d      	lsls	r5, r3, #30
 801f1ce:	4606      	mov	r6, r0
 801f1d0:	460c      	mov	r4, r1
 801f1d2:	d507      	bpl.n	801f1e4 <__smakebuf_r+0x1c>
 801f1d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f1d8:	6023      	str	r3, [r4, #0]
 801f1da:	6123      	str	r3, [r4, #16]
 801f1dc:	2301      	movs	r3, #1
 801f1de:	6163      	str	r3, [r4, #20]
 801f1e0:	b003      	add	sp, #12
 801f1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1e4:	ab01      	add	r3, sp, #4
 801f1e6:	466a      	mov	r2, sp
 801f1e8:	f7ff ffc8 	bl	801f17c <__swhatbuf_r>
 801f1ec:	9f00      	ldr	r7, [sp, #0]
 801f1ee:	4605      	mov	r5, r0
 801f1f0:	4639      	mov	r1, r7
 801f1f2:	4630      	mov	r0, r6
 801f1f4:	f7fd f830 	bl	801c258 <_malloc_r>
 801f1f8:	b948      	cbnz	r0, 801f20e <__smakebuf_r+0x46>
 801f1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1fe:	059a      	lsls	r2, r3, #22
 801f200:	d4ee      	bmi.n	801f1e0 <__smakebuf_r+0x18>
 801f202:	f023 0303 	bic.w	r3, r3, #3
 801f206:	f043 0302 	orr.w	r3, r3, #2
 801f20a:	81a3      	strh	r3, [r4, #12]
 801f20c:	e7e2      	b.n	801f1d4 <__smakebuf_r+0xc>
 801f20e:	89a3      	ldrh	r3, [r4, #12]
 801f210:	6020      	str	r0, [r4, #0]
 801f212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f216:	81a3      	strh	r3, [r4, #12]
 801f218:	9b01      	ldr	r3, [sp, #4]
 801f21a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f21e:	b15b      	cbz	r3, 801f238 <__smakebuf_r+0x70>
 801f220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f224:	4630      	mov	r0, r6
 801f226:	f000 f84d 	bl	801f2c4 <_isatty_r>
 801f22a:	b128      	cbz	r0, 801f238 <__smakebuf_r+0x70>
 801f22c:	89a3      	ldrh	r3, [r4, #12]
 801f22e:	f023 0303 	bic.w	r3, r3, #3
 801f232:	f043 0301 	orr.w	r3, r3, #1
 801f236:	81a3      	strh	r3, [r4, #12]
 801f238:	89a3      	ldrh	r3, [r4, #12]
 801f23a:	431d      	orrs	r5, r3
 801f23c:	81a5      	strh	r5, [r4, #12]
 801f23e:	e7cf      	b.n	801f1e0 <__smakebuf_r+0x18>

0801f240 <_raise_r>:
 801f240:	291f      	cmp	r1, #31
 801f242:	b538      	push	{r3, r4, r5, lr}
 801f244:	4605      	mov	r5, r0
 801f246:	460c      	mov	r4, r1
 801f248:	d904      	bls.n	801f254 <_raise_r+0x14>
 801f24a:	2316      	movs	r3, #22
 801f24c:	6003      	str	r3, [r0, #0]
 801f24e:	f04f 30ff 	mov.w	r0, #4294967295
 801f252:	bd38      	pop	{r3, r4, r5, pc}
 801f254:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f256:	b112      	cbz	r2, 801f25e <_raise_r+0x1e>
 801f258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f25c:	b94b      	cbnz	r3, 801f272 <_raise_r+0x32>
 801f25e:	4628      	mov	r0, r5
 801f260:	f000 f852 	bl	801f308 <_getpid_r>
 801f264:	4622      	mov	r2, r4
 801f266:	4601      	mov	r1, r0
 801f268:	4628      	mov	r0, r5
 801f26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f26e:	f000 b839 	b.w	801f2e4 <_kill_r>
 801f272:	2b01      	cmp	r3, #1
 801f274:	d00a      	beq.n	801f28c <_raise_r+0x4c>
 801f276:	1c59      	adds	r1, r3, #1
 801f278:	d103      	bne.n	801f282 <_raise_r+0x42>
 801f27a:	2316      	movs	r3, #22
 801f27c:	6003      	str	r3, [r0, #0]
 801f27e:	2001      	movs	r0, #1
 801f280:	e7e7      	b.n	801f252 <_raise_r+0x12>
 801f282:	2100      	movs	r1, #0
 801f284:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f288:	4620      	mov	r0, r4
 801f28a:	4798      	blx	r3
 801f28c:	2000      	movs	r0, #0
 801f28e:	e7e0      	b.n	801f252 <_raise_r+0x12>

0801f290 <raise>:
 801f290:	4b02      	ldr	r3, [pc, #8]	@ (801f29c <raise+0xc>)
 801f292:	4601      	mov	r1, r0
 801f294:	6818      	ldr	r0, [r3, #0]
 801f296:	f7ff bfd3 	b.w	801f240 <_raise_r>
 801f29a:	bf00      	nop
 801f29c:	200026b0 	.word	0x200026b0

0801f2a0 <_fstat_r>:
 801f2a0:	b538      	push	{r3, r4, r5, lr}
 801f2a2:	4d07      	ldr	r5, [pc, #28]	@ (801f2c0 <_fstat_r+0x20>)
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	4604      	mov	r4, r0
 801f2a8:	4608      	mov	r0, r1
 801f2aa:	4611      	mov	r1, r2
 801f2ac:	602b      	str	r3, [r5, #0]
 801f2ae:	f7e5 ff33 	bl	8005118 <_fstat>
 801f2b2:	1c43      	adds	r3, r0, #1
 801f2b4:	d102      	bne.n	801f2bc <_fstat_r+0x1c>
 801f2b6:	682b      	ldr	r3, [r5, #0]
 801f2b8:	b103      	cbz	r3, 801f2bc <_fstat_r+0x1c>
 801f2ba:	6023      	str	r3, [r4, #0]
 801f2bc:	bd38      	pop	{r3, r4, r5, pc}
 801f2be:	bf00      	nop
 801f2c0:	20018354 	.word	0x20018354

0801f2c4 <_isatty_r>:
 801f2c4:	b538      	push	{r3, r4, r5, lr}
 801f2c6:	4d06      	ldr	r5, [pc, #24]	@ (801f2e0 <_isatty_r+0x1c>)
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	4604      	mov	r4, r0
 801f2cc:	4608      	mov	r0, r1
 801f2ce:	602b      	str	r3, [r5, #0]
 801f2d0:	f7e5 ff32 	bl	8005138 <_isatty>
 801f2d4:	1c43      	adds	r3, r0, #1
 801f2d6:	d102      	bne.n	801f2de <_isatty_r+0x1a>
 801f2d8:	682b      	ldr	r3, [r5, #0]
 801f2da:	b103      	cbz	r3, 801f2de <_isatty_r+0x1a>
 801f2dc:	6023      	str	r3, [r4, #0]
 801f2de:	bd38      	pop	{r3, r4, r5, pc}
 801f2e0:	20018354 	.word	0x20018354

0801f2e4 <_kill_r>:
 801f2e4:	b538      	push	{r3, r4, r5, lr}
 801f2e6:	4d07      	ldr	r5, [pc, #28]	@ (801f304 <_kill_r+0x20>)
 801f2e8:	2300      	movs	r3, #0
 801f2ea:	4604      	mov	r4, r0
 801f2ec:	4608      	mov	r0, r1
 801f2ee:	4611      	mov	r1, r2
 801f2f0:	602b      	str	r3, [r5, #0]
 801f2f2:	f7e5 feb1 	bl	8005058 <_kill>
 801f2f6:	1c43      	adds	r3, r0, #1
 801f2f8:	d102      	bne.n	801f300 <_kill_r+0x1c>
 801f2fa:	682b      	ldr	r3, [r5, #0]
 801f2fc:	b103      	cbz	r3, 801f300 <_kill_r+0x1c>
 801f2fe:	6023      	str	r3, [r4, #0]
 801f300:	bd38      	pop	{r3, r4, r5, pc}
 801f302:	bf00      	nop
 801f304:	20018354 	.word	0x20018354

0801f308 <_getpid_r>:
 801f308:	f7e5 be9e 	b.w	8005048 <_getpid>

0801f30c <__ascii_mbtowc>:
 801f30c:	b082      	sub	sp, #8
 801f30e:	b901      	cbnz	r1, 801f312 <__ascii_mbtowc+0x6>
 801f310:	a901      	add	r1, sp, #4
 801f312:	b142      	cbz	r2, 801f326 <__ascii_mbtowc+0x1a>
 801f314:	b14b      	cbz	r3, 801f32a <__ascii_mbtowc+0x1e>
 801f316:	7813      	ldrb	r3, [r2, #0]
 801f318:	600b      	str	r3, [r1, #0]
 801f31a:	7812      	ldrb	r2, [r2, #0]
 801f31c:	1e10      	subs	r0, r2, #0
 801f31e:	bf18      	it	ne
 801f320:	2001      	movne	r0, #1
 801f322:	b002      	add	sp, #8
 801f324:	4770      	bx	lr
 801f326:	4610      	mov	r0, r2
 801f328:	e7fb      	b.n	801f322 <__ascii_mbtowc+0x16>
 801f32a:	f06f 0001 	mvn.w	r0, #1
 801f32e:	e7f8      	b.n	801f322 <__ascii_mbtowc+0x16>

0801f330 <__ascii_wctomb>:
 801f330:	4603      	mov	r3, r0
 801f332:	4608      	mov	r0, r1
 801f334:	b141      	cbz	r1, 801f348 <__ascii_wctomb+0x18>
 801f336:	2aff      	cmp	r2, #255	@ 0xff
 801f338:	d904      	bls.n	801f344 <__ascii_wctomb+0x14>
 801f33a:	228a      	movs	r2, #138	@ 0x8a
 801f33c:	601a      	str	r2, [r3, #0]
 801f33e:	f04f 30ff 	mov.w	r0, #4294967295
 801f342:	4770      	bx	lr
 801f344:	700a      	strb	r2, [r1, #0]
 801f346:	2001      	movs	r0, #1
 801f348:	4770      	bx	lr

0801f34a <fmod>:
 801f34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f34c:	ed2d 8b02 	vpush	{d8}
 801f350:	ec57 6b10 	vmov	r6, r7, d0
 801f354:	ec55 4b11 	vmov	r4, r5, d1
 801f358:	f000 fadc 	bl	801f914 <__ieee754_fmod>
 801f35c:	4622      	mov	r2, r4
 801f35e:	462b      	mov	r3, r5
 801f360:	4630      	mov	r0, r6
 801f362:	4639      	mov	r1, r7
 801f364:	eeb0 8a40 	vmov.f32	s16, s0
 801f368:	eef0 8a60 	vmov.f32	s17, s1
 801f36c:	f7e1 fbee 	bl	8000b4c <__aeabi_dcmpun>
 801f370:	b990      	cbnz	r0, 801f398 <fmod+0x4e>
 801f372:	2200      	movs	r2, #0
 801f374:	2300      	movs	r3, #0
 801f376:	4620      	mov	r0, r4
 801f378:	4629      	mov	r1, r5
 801f37a:	f7e1 fbb5 	bl	8000ae8 <__aeabi_dcmpeq>
 801f37e:	b158      	cbz	r0, 801f398 <fmod+0x4e>
 801f380:	f7fe f93e 	bl	801d600 <__errno>
 801f384:	2321      	movs	r3, #33	@ 0x21
 801f386:	6003      	str	r3, [r0, #0]
 801f388:	2200      	movs	r2, #0
 801f38a:	2300      	movs	r3, #0
 801f38c:	4610      	mov	r0, r2
 801f38e:	4619      	mov	r1, r3
 801f390:	f7e1 fa6c 	bl	800086c <__aeabi_ddiv>
 801f394:	ec41 0b18 	vmov	d8, r0, r1
 801f398:	eeb0 0a48 	vmov.f32	s0, s16
 801f39c:	eef0 0a68 	vmov.f32	s1, s17
 801f3a0:	ecbd 8b02 	vpop	{d8}
 801f3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f3a8 <cos>:
 801f3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f3aa:	ec53 2b10 	vmov	r2, r3, d0
 801f3ae:	4826      	ldr	r0, [pc, #152]	@ (801f448 <cos+0xa0>)
 801f3b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f3b4:	4281      	cmp	r1, r0
 801f3b6:	d806      	bhi.n	801f3c6 <cos+0x1e>
 801f3b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f440 <cos+0x98>
 801f3bc:	b005      	add	sp, #20
 801f3be:	f85d eb04 	ldr.w	lr, [sp], #4
 801f3c2:	f000 b925 	b.w	801f610 <__kernel_cos>
 801f3c6:	4821      	ldr	r0, [pc, #132]	@ (801f44c <cos+0xa4>)
 801f3c8:	4281      	cmp	r1, r0
 801f3ca:	d908      	bls.n	801f3de <cos+0x36>
 801f3cc:	4610      	mov	r0, r2
 801f3ce:	4619      	mov	r1, r3
 801f3d0:	f7e0 ff6a 	bl	80002a8 <__aeabi_dsub>
 801f3d4:	ec41 0b10 	vmov	d0, r0, r1
 801f3d8:	b005      	add	sp, #20
 801f3da:	f85d fb04 	ldr.w	pc, [sp], #4
 801f3de:	4668      	mov	r0, sp
 801f3e0:	f000 fba2 	bl	801fb28 <__ieee754_rem_pio2>
 801f3e4:	f000 0003 	and.w	r0, r0, #3
 801f3e8:	2801      	cmp	r0, #1
 801f3ea:	d00b      	beq.n	801f404 <cos+0x5c>
 801f3ec:	2802      	cmp	r0, #2
 801f3ee:	d015      	beq.n	801f41c <cos+0x74>
 801f3f0:	b9d8      	cbnz	r0, 801f42a <cos+0x82>
 801f3f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f3f6:	ed9d 0b00 	vldr	d0, [sp]
 801f3fa:	f000 f909 	bl	801f610 <__kernel_cos>
 801f3fe:	ec51 0b10 	vmov	r0, r1, d0
 801f402:	e7e7      	b.n	801f3d4 <cos+0x2c>
 801f404:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f408:	ed9d 0b00 	vldr	d0, [sp]
 801f40c:	f000 f9c8 	bl	801f7a0 <__kernel_sin>
 801f410:	ec53 2b10 	vmov	r2, r3, d0
 801f414:	4610      	mov	r0, r2
 801f416:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f41a:	e7db      	b.n	801f3d4 <cos+0x2c>
 801f41c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f420:	ed9d 0b00 	vldr	d0, [sp]
 801f424:	f000 f8f4 	bl	801f610 <__kernel_cos>
 801f428:	e7f2      	b.n	801f410 <cos+0x68>
 801f42a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f42e:	ed9d 0b00 	vldr	d0, [sp]
 801f432:	2001      	movs	r0, #1
 801f434:	f000 f9b4 	bl	801f7a0 <__kernel_sin>
 801f438:	e7e1      	b.n	801f3fe <cos+0x56>
 801f43a:	bf00      	nop
 801f43c:	f3af 8000 	nop.w
	...
 801f448:	3fe921fb 	.word	0x3fe921fb
 801f44c:	7fefffff 	.word	0x7fefffff

0801f450 <sin>:
 801f450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f452:	ec53 2b10 	vmov	r2, r3, d0
 801f456:	4826      	ldr	r0, [pc, #152]	@ (801f4f0 <sin+0xa0>)
 801f458:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f45c:	4281      	cmp	r1, r0
 801f45e:	d807      	bhi.n	801f470 <sin+0x20>
 801f460:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f4e8 <sin+0x98>
 801f464:	2000      	movs	r0, #0
 801f466:	b005      	add	sp, #20
 801f468:	f85d eb04 	ldr.w	lr, [sp], #4
 801f46c:	f000 b998 	b.w	801f7a0 <__kernel_sin>
 801f470:	4820      	ldr	r0, [pc, #128]	@ (801f4f4 <sin+0xa4>)
 801f472:	4281      	cmp	r1, r0
 801f474:	d908      	bls.n	801f488 <sin+0x38>
 801f476:	4610      	mov	r0, r2
 801f478:	4619      	mov	r1, r3
 801f47a:	f7e0 ff15 	bl	80002a8 <__aeabi_dsub>
 801f47e:	ec41 0b10 	vmov	d0, r0, r1
 801f482:	b005      	add	sp, #20
 801f484:	f85d fb04 	ldr.w	pc, [sp], #4
 801f488:	4668      	mov	r0, sp
 801f48a:	f000 fb4d 	bl	801fb28 <__ieee754_rem_pio2>
 801f48e:	f000 0003 	and.w	r0, r0, #3
 801f492:	2801      	cmp	r0, #1
 801f494:	d00c      	beq.n	801f4b0 <sin+0x60>
 801f496:	2802      	cmp	r0, #2
 801f498:	d011      	beq.n	801f4be <sin+0x6e>
 801f49a:	b9e8      	cbnz	r0, 801f4d8 <sin+0x88>
 801f49c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f4a0:	ed9d 0b00 	vldr	d0, [sp]
 801f4a4:	2001      	movs	r0, #1
 801f4a6:	f000 f97b 	bl	801f7a0 <__kernel_sin>
 801f4aa:	ec51 0b10 	vmov	r0, r1, d0
 801f4ae:	e7e6      	b.n	801f47e <sin+0x2e>
 801f4b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f4b4:	ed9d 0b00 	vldr	d0, [sp]
 801f4b8:	f000 f8aa 	bl	801f610 <__kernel_cos>
 801f4bc:	e7f5      	b.n	801f4aa <sin+0x5a>
 801f4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f4c2:	ed9d 0b00 	vldr	d0, [sp]
 801f4c6:	2001      	movs	r0, #1
 801f4c8:	f000 f96a 	bl	801f7a0 <__kernel_sin>
 801f4cc:	ec53 2b10 	vmov	r2, r3, d0
 801f4d0:	4610      	mov	r0, r2
 801f4d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f4d6:	e7d2      	b.n	801f47e <sin+0x2e>
 801f4d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f4dc:	ed9d 0b00 	vldr	d0, [sp]
 801f4e0:	f000 f896 	bl	801f610 <__kernel_cos>
 801f4e4:	e7f2      	b.n	801f4cc <sin+0x7c>
 801f4e6:	bf00      	nop
	...
 801f4f0:	3fe921fb 	.word	0x3fe921fb
 801f4f4:	7fefffff 	.word	0x7fefffff

0801f4f8 <cosf>:
 801f4f8:	ee10 3a10 	vmov	r3, s0
 801f4fc:	b507      	push	{r0, r1, r2, lr}
 801f4fe:	4a1e      	ldr	r2, [pc, #120]	@ (801f578 <cosf+0x80>)
 801f500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f504:	4293      	cmp	r3, r2
 801f506:	d806      	bhi.n	801f516 <cosf+0x1e>
 801f508:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801f57c <cosf+0x84>
 801f50c:	b003      	add	sp, #12
 801f50e:	f85d eb04 	ldr.w	lr, [sp], #4
 801f512:	f000 bd0d 	b.w	801ff30 <__kernel_cosf>
 801f516:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f51a:	d304      	bcc.n	801f526 <cosf+0x2e>
 801f51c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f520:	b003      	add	sp, #12
 801f522:	f85d fb04 	ldr.w	pc, [sp], #4
 801f526:	4668      	mov	r0, sp
 801f528:	f000 fda2 	bl	8020070 <__ieee754_rem_pio2f>
 801f52c:	f000 0003 	and.w	r0, r0, #3
 801f530:	2801      	cmp	r0, #1
 801f532:	d009      	beq.n	801f548 <cosf+0x50>
 801f534:	2802      	cmp	r0, #2
 801f536:	d010      	beq.n	801f55a <cosf+0x62>
 801f538:	b9b0      	cbnz	r0, 801f568 <cosf+0x70>
 801f53a:	eddd 0a01 	vldr	s1, [sp, #4]
 801f53e:	ed9d 0a00 	vldr	s0, [sp]
 801f542:	f000 fcf5 	bl	801ff30 <__kernel_cosf>
 801f546:	e7eb      	b.n	801f520 <cosf+0x28>
 801f548:	eddd 0a01 	vldr	s1, [sp, #4]
 801f54c:	ed9d 0a00 	vldr	s0, [sp]
 801f550:	f000 fd46 	bl	801ffe0 <__kernel_sinf>
 801f554:	eeb1 0a40 	vneg.f32	s0, s0
 801f558:	e7e2      	b.n	801f520 <cosf+0x28>
 801f55a:	eddd 0a01 	vldr	s1, [sp, #4]
 801f55e:	ed9d 0a00 	vldr	s0, [sp]
 801f562:	f000 fce5 	bl	801ff30 <__kernel_cosf>
 801f566:	e7f5      	b.n	801f554 <cosf+0x5c>
 801f568:	eddd 0a01 	vldr	s1, [sp, #4]
 801f56c:	ed9d 0a00 	vldr	s0, [sp]
 801f570:	2001      	movs	r0, #1
 801f572:	f000 fd35 	bl	801ffe0 <__kernel_sinf>
 801f576:	e7d3      	b.n	801f520 <cosf+0x28>
 801f578:	3f490fd8 	.word	0x3f490fd8
 801f57c:	00000000 	.word	0x00000000

0801f580 <sinf>:
 801f580:	ee10 3a10 	vmov	r3, s0
 801f584:	b507      	push	{r0, r1, r2, lr}
 801f586:	4a1f      	ldr	r2, [pc, #124]	@ (801f604 <sinf+0x84>)
 801f588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f58c:	4293      	cmp	r3, r2
 801f58e:	d807      	bhi.n	801f5a0 <sinf+0x20>
 801f590:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801f608 <sinf+0x88>
 801f594:	2000      	movs	r0, #0
 801f596:	b003      	add	sp, #12
 801f598:	f85d eb04 	ldr.w	lr, [sp], #4
 801f59c:	f000 bd20 	b.w	801ffe0 <__kernel_sinf>
 801f5a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801f5a4:	d304      	bcc.n	801f5b0 <sinf+0x30>
 801f5a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f5aa:	b003      	add	sp, #12
 801f5ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801f5b0:	4668      	mov	r0, sp
 801f5b2:	f000 fd5d 	bl	8020070 <__ieee754_rem_pio2f>
 801f5b6:	f000 0003 	and.w	r0, r0, #3
 801f5ba:	2801      	cmp	r0, #1
 801f5bc:	d00a      	beq.n	801f5d4 <sinf+0x54>
 801f5be:	2802      	cmp	r0, #2
 801f5c0:	d00f      	beq.n	801f5e2 <sinf+0x62>
 801f5c2:	b9c0      	cbnz	r0, 801f5f6 <sinf+0x76>
 801f5c4:	eddd 0a01 	vldr	s1, [sp, #4]
 801f5c8:	ed9d 0a00 	vldr	s0, [sp]
 801f5cc:	2001      	movs	r0, #1
 801f5ce:	f000 fd07 	bl	801ffe0 <__kernel_sinf>
 801f5d2:	e7ea      	b.n	801f5aa <sinf+0x2a>
 801f5d4:	eddd 0a01 	vldr	s1, [sp, #4]
 801f5d8:	ed9d 0a00 	vldr	s0, [sp]
 801f5dc:	f000 fca8 	bl	801ff30 <__kernel_cosf>
 801f5e0:	e7e3      	b.n	801f5aa <sinf+0x2a>
 801f5e2:	eddd 0a01 	vldr	s1, [sp, #4]
 801f5e6:	ed9d 0a00 	vldr	s0, [sp]
 801f5ea:	2001      	movs	r0, #1
 801f5ec:	f000 fcf8 	bl	801ffe0 <__kernel_sinf>
 801f5f0:	eeb1 0a40 	vneg.f32	s0, s0
 801f5f4:	e7d9      	b.n	801f5aa <sinf+0x2a>
 801f5f6:	eddd 0a01 	vldr	s1, [sp, #4]
 801f5fa:	ed9d 0a00 	vldr	s0, [sp]
 801f5fe:	f000 fc97 	bl	801ff30 <__kernel_cosf>
 801f602:	e7f5      	b.n	801f5f0 <sinf+0x70>
 801f604:	3f490fd8 	.word	0x3f490fd8
	...

0801f610 <__kernel_cos>:
 801f610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f614:	ec57 6b10 	vmov	r6, r7, d0
 801f618:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801f61c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801f620:	ed8d 1b00 	vstr	d1, [sp]
 801f624:	d206      	bcs.n	801f634 <__kernel_cos+0x24>
 801f626:	4630      	mov	r0, r6
 801f628:	4639      	mov	r1, r7
 801f62a:	f7e1 faa5 	bl	8000b78 <__aeabi_d2iz>
 801f62e:	2800      	cmp	r0, #0
 801f630:	f000 8088 	beq.w	801f744 <__kernel_cos+0x134>
 801f634:	4632      	mov	r2, r6
 801f636:	463b      	mov	r3, r7
 801f638:	4630      	mov	r0, r6
 801f63a:	4639      	mov	r1, r7
 801f63c:	f7e0 ffec 	bl	8000618 <__aeabi_dmul>
 801f640:	4b51      	ldr	r3, [pc, #324]	@ (801f788 <__kernel_cos+0x178>)
 801f642:	2200      	movs	r2, #0
 801f644:	4604      	mov	r4, r0
 801f646:	460d      	mov	r5, r1
 801f648:	f7e0 ffe6 	bl	8000618 <__aeabi_dmul>
 801f64c:	a340      	add	r3, pc, #256	@ (adr r3, 801f750 <__kernel_cos+0x140>)
 801f64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f652:	4682      	mov	sl, r0
 801f654:	468b      	mov	fp, r1
 801f656:	4620      	mov	r0, r4
 801f658:	4629      	mov	r1, r5
 801f65a:	f7e0 ffdd 	bl	8000618 <__aeabi_dmul>
 801f65e:	a33e      	add	r3, pc, #248	@ (adr r3, 801f758 <__kernel_cos+0x148>)
 801f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f664:	f7e0 fe22 	bl	80002ac <__adddf3>
 801f668:	4622      	mov	r2, r4
 801f66a:	462b      	mov	r3, r5
 801f66c:	f7e0 ffd4 	bl	8000618 <__aeabi_dmul>
 801f670:	a33b      	add	r3, pc, #236	@ (adr r3, 801f760 <__kernel_cos+0x150>)
 801f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f676:	f7e0 fe17 	bl	80002a8 <__aeabi_dsub>
 801f67a:	4622      	mov	r2, r4
 801f67c:	462b      	mov	r3, r5
 801f67e:	f7e0 ffcb 	bl	8000618 <__aeabi_dmul>
 801f682:	a339      	add	r3, pc, #228	@ (adr r3, 801f768 <__kernel_cos+0x158>)
 801f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f688:	f7e0 fe10 	bl	80002ac <__adddf3>
 801f68c:	4622      	mov	r2, r4
 801f68e:	462b      	mov	r3, r5
 801f690:	f7e0 ffc2 	bl	8000618 <__aeabi_dmul>
 801f694:	a336      	add	r3, pc, #216	@ (adr r3, 801f770 <__kernel_cos+0x160>)
 801f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f69a:	f7e0 fe05 	bl	80002a8 <__aeabi_dsub>
 801f69e:	4622      	mov	r2, r4
 801f6a0:	462b      	mov	r3, r5
 801f6a2:	f7e0 ffb9 	bl	8000618 <__aeabi_dmul>
 801f6a6:	a334      	add	r3, pc, #208	@ (adr r3, 801f778 <__kernel_cos+0x168>)
 801f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ac:	f7e0 fdfe 	bl	80002ac <__adddf3>
 801f6b0:	4622      	mov	r2, r4
 801f6b2:	462b      	mov	r3, r5
 801f6b4:	f7e0 ffb0 	bl	8000618 <__aeabi_dmul>
 801f6b8:	4622      	mov	r2, r4
 801f6ba:	462b      	mov	r3, r5
 801f6bc:	f7e0 ffac 	bl	8000618 <__aeabi_dmul>
 801f6c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6c4:	4604      	mov	r4, r0
 801f6c6:	460d      	mov	r5, r1
 801f6c8:	4630      	mov	r0, r6
 801f6ca:	4639      	mov	r1, r7
 801f6cc:	f7e0 ffa4 	bl	8000618 <__aeabi_dmul>
 801f6d0:	460b      	mov	r3, r1
 801f6d2:	4602      	mov	r2, r0
 801f6d4:	4629      	mov	r1, r5
 801f6d6:	4620      	mov	r0, r4
 801f6d8:	f7e0 fde6 	bl	80002a8 <__aeabi_dsub>
 801f6dc:	4b2b      	ldr	r3, [pc, #172]	@ (801f78c <__kernel_cos+0x17c>)
 801f6de:	4598      	cmp	r8, r3
 801f6e0:	4606      	mov	r6, r0
 801f6e2:	460f      	mov	r7, r1
 801f6e4:	d810      	bhi.n	801f708 <__kernel_cos+0xf8>
 801f6e6:	4602      	mov	r2, r0
 801f6e8:	460b      	mov	r3, r1
 801f6ea:	4650      	mov	r0, sl
 801f6ec:	4659      	mov	r1, fp
 801f6ee:	f7e0 fddb 	bl	80002a8 <__aeabi_dsub>
 801f6f2:	460b      	mov	r3, r1
 801f6f4:	4926      	ldr	r1, [pc, #152]	@ (801f790 <__kernel_cos+0x180>)
 801f6f6:	4602      	mov	r2, r0
 801f6f8:	2000      	movs	r0, #0
 801f6fa:	f7e0 fdd5 	bl	80002a8 <__aeabi_dsub>
 801f6fe:	ec41 0b10 	vmov	d0, r0, r1
 801f702:	b003      	add	sp, #12
 801f704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f708:	4b22      	ldr	r3, [pc, #136]	@ (801f794 <__kernel_cos+0x184>)
 801f70a:	4921      	ldr	r1, [pc, #132]	@ (801f790 <__kernel_cos+0x180>)
 801f70c:	4598      	cmp	r8, r3
 801f70e:	bf8c      	ite	hi
 801f710:	4d21      	ldrhi	r5, [pc, #132]	@ (801f798 <__kernel_cos+0x188>)
 801f712:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801f716:	2400      	movs	r4, #0
 801f718:	4622      	mov	r2, r4
 801f71a:	462b      	mov	r3, r5
 801f71c:	2000      	movs	r0, #0
 801f71e:	f7e0 fdc3 	bl	80002a8 <__aeabi_dsub>
 801f722:	4622      	mov	r2, r4
 801f724:	4680      	mov	r8, r0
 801f726:	4689      	mov	r9, r1
 801f728:	462b      	mov	r3, r5
 801f72a:	4650      	mov	r0, sl
 801f72c:	4659      	mov	r1, fp
 801f72e:	f7e0 fdbb 	bl	80002a8 <__aeabi_dsub>
 801f732:	4632      	mov	r2, r6
 801f734:	463b      	mov	r3, r7
 801f736:	f7e0 fdb7 	bl	80002a8 <__aeabi_dsub>
 801f73a:	4602      	mov	r2, r0
 801f73c:	460b      	mov	r3, r1
 801f73e:	4640      	mov	r0, r8
 801f740:	4649      	mov	r1, r9
 801f742:	e7da      	b.n	801f6fa <__kernel_cos+0xea>
 801f744:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801f780 <__kernel_cos+0x170>
 801f748:	e7db      	b.n	801f702 <__kernel_cos+0xf2>
 801f74a:	bf00      	nop
 801f74c:	f3af 8000 	nop.w
 801f750:	be8838d4 	.word	0xbe8838d4
 801f754:	bda8fae9 	.word	0xbda8fae9
 801f758:	bdb4b1c4 	.word	0xbdb4b1c4
 801f75c:	3e21ee9e 	.word	0x3e21ee9e
 801f760:	809c52ad 	.word	0x809c52ad
 801f764:	3e927e4f 	.word	0x3e927e4f
 801f768:	19cb1590 	.word	0x19cb1590
 801f76c:	3efa01a0 	.word	0x3efa01a0
 801f770:	16c15177 	.word	0x16c15177
 801f774:	3f56c16c 	.word	0x3f56c16c
 801f778:	5555554c 	.word	0x5555554c
 801f77c:	3fa55555 	.word	0x3fa55555
 801f780:	00000000 	.word	0x00000000
 801f784:	3ff00000 	.word	0x3ff00000
 801f788:	3fe00000 	.word	0x3fe00000
 801f78c:	3fd33332 	.word	0x3fd33332
 801f790:	3ff00000 	.word	0x3ff00000
 801f794:	3fe90000 	.word	0x3fe90000
 801f798:	3fd20000 	.word	0x3fd20000
 801f79c:	00000000 	.word	0x00000000

0801f7a0 <__kernel_sin>:
 801f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a4:	ec55 4b10 	vmov	r4, r5, d0
 801f7a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f7ac:	b085      	sub	sp, #20
 801f7ae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801f7b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801f7b6:	4680      	mov	r8, r0
 801f7b8:	d205      	bcs.n	801f7c6 <__kernel_sin+0x26>
 801f7ba:	4620      	mov	r0, r4
 801f7bc:	4629      	mov	r1, r5
 801f7be:	f7e1 f9db 	bl	8000b78 <__aeabi_d2iz>
 801f7c2:	2800      	cmp	r0, #0
 801f7c4:	d052      	beq.n	801f86c <__kernel_sin+0xcc>
 801f7c6:	4622      	mov	r2, r4
 801f7c8:	462b      	mov	r3, r5
 801f7ca:	4620      	mov	r0, r4
 801f7cc:	4629      	mov	r1, r5
 801f7ce:	f7e0 ff23 	bl	8000618 <__aeabi_dmul>
 801f7d2:	4682      	mov	sl, r0
 801f7d4:	468b      	mov	fp, r1
 801f7d6:	4602      	mov	r2, r0
 801f7d8:	460b      	mov	r3, r1
 801f7da:	4620      	mov	r0, r4
 801f7dc:	4629      	mov	r1, r5
 801f7de:	f7e0 ff1b 	bl	8000618 <__aeabi_dmul>
 801f7e2:	a342      	add	r3, pc, #264	@ (adr r3, 801f8ec <__kernel_sin+0x14c>)
 801f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7e8:	e9cd 0100 	strd	r0, r1, [sp]
 801f7ec:	4650      	mov	r0, sl
 801f7ee:	4659      	mov	r1, fp
 801f7f0:	f7e0 ff12 	bl	8000618 <__aeabi_dmul>
 801f7f4:	a33f      	add	r3, pc, #252	@ (adr r3, 801f8f4 <__kernel_sin+0x154>)
 801f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7fa:	f7e0 fd55 	bl	80002a8 <__aeabi_dsub>
 801f7fe:	4652      	mov	r2, sl
 801f800:	465b      	mov	r3, fp
 801f802:	f7e0 ff09 	bl	8000618 <__aeabi_dmul>
 801f806:	a33d      	add	r3, pc, #244	@ (adr r3, 801f8fc <__kernel_sin+0x15c>)
 801f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f80c:	f7e0 fd4e 	bl	80002ac <__adddf3>
 801f810:	4652      	mov	r2, sl
 801f812:	465b      	mov	r3, fp
 801f814:	f7e0 ff00 	bl	8000618 <__aeabi_dmul>
 801f818:	a33a      	add	r3, pc, #232	@ (adr r3, 801f904 <__kernel_sin+0x164>)
 801f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f81e:	f7e0 fd43 	bl	80002a8 <__aeabi_dsub>
 801f822:	4652      	mov	r2, sl
 801f824:	465b      	mov	r3, fp
 801f826:	f7e0 fef7 	bl	8000618 <__aeabi_dmul>
 801f82a:	a338      	add	r3, pc, #224	@ (adr r3, 801f90c <__kernel_sin+0x16c>)
 801f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f830:	f7e0 fd3c 	bl	80002ac <__adddf3>
 801f834:	4606      	mov	r6, r0
 801f836:	460f      	mov	r7, r1
 801f838:	f1b8 0f00 	cmp.w	r8, #0
 801f83c:	d11b      	bne.n	801f876 <__kernel_sin+0xd6>
 801f83e:	4602      	mov	r2, r0
 801f840:	460b      	mov	r3, r1
 801f842:	4650      	mov	r0, sl
 801f844:	4659      	mov	r1, fp
 801f846:	f7e0 fee7 	bl	8000618 <__aeabi_dmul>
 801f84a:	a325      	add	r3, pc, #148	@ (adr r3, 801f8e0 <__kernel_sin+0x140>)
 801f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f850:	f7e0 fd2a 	bl	80002a8 <__aeabi_dsub>
 801f854:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f858:	f7e0 fede 	bl	8000618 <__aeabi_dmul>
 801f85c:	4602      	mov	r2, r0
 801f85e:	460b      	mov	r3, r1
 801f860:	4620      	mov	r0, r4
 801f862:	4629      	mov	r1, r5
 801f864:	f7e0 fd22 	bl	80002ac <__adddf3>
 801f868:	4604      	mov	r4, r0
 801f86a:	460d      	mov	r5, r1
 801f86c:	ec45 4b10 	vmov	d0, r4, r5
 801f870:	b005      	add	sp, #20
 801f872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f87a:	4b1b      	ldr	r3, [pc, #108]	@ (801f8e8 <__kernel_sin+0x148>)
 801f87c:	2200      	movs	r2, #0
 801f87e:	f7e0 fecb 	bl	8000618 <__aeabi_dmul>
 801f882:	4632      	mov	r2, r6
 801f884:	4680      	mov	r8, r0
 801f886:	4689      	mov	r9, r1
 801f888:	463b      	mov	r3, r7
 801f88a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f88e:	f7e0 fec3 	bl	8000618 <__aeabi_dmul>
 801f892:	4602      	mov	r2, r0
 801f894:	460b      	mov	r3, r1
 801f896:	4640      	mov	r0, r8
 801f898:	4649      	mov	r1, r9
 801f89a:	f7e0 fd05 	bl	80002a8 <__aeabi_dsub>
 801f89e:	4652      	mov	r2, sl
 801f8a0:	465b      	mov	r3, fp
 801f8a2:	f7e0 feb9 	bl	8000618 <__aeabi_dmul>
 801f8a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f8aa:	f7e0 fcfd 	bl	80002a8 <__aeabi_dsub>
 801f8ae:	a30c      	add	r3, pc, #48	@ (adr r3, 801f8e0 <__kernel_sin+0x140>)
 801f8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8b4:	4606      	mov	r6, r0
 801f8b6:	460f      	mov	r7, r1
 801f8b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f8bc:	f7e0 feac 	bl	8000618 <__aeabi_dmul>
 801f8c0:	4602      	mov	r2, r0
 801f8c2:	460b      	mov	r3, r1
 801f8c4:	4630      	mov	r0, r6
 801f8c6:	4639      	mov	r1, r7
 801f8c8:	f7e0 fcf0 	bl	80002ac <__adddf3>
 801f8cc:	4602      	mov	r2, r0
 801f8ce:	460b      	mov	r3, r1
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	4629      	mov	r1, r5
 801f8d4:	f7e0 fce8 	bl	80002a8 <__aeabi_dsub>
 801f8d8:	e7c6      	b.n	801f868 <__kernel_sin+0xc8>
 801f8da:	bf00      	nop
 801f8dc:	f3af 8000 	nop.w
 801f8e0:	55555549 	.word	0x55555549
 801f8e4:	3fc55555 	.word	0x3fc55555
 801f8e8:	3fe00000 	.word	0x3fe00000
 801f8ec:	5acfd57c 	.word	0x5acfd57c
 801f8f0:	3de5d93a 	.word	0x3de5d93a
 801f8f4:	8a2b9ceb 	.word	0x8a2b9ceb
 801f8f8:	3e5ae5e6 	.word	0x3e5ae5e6
 801f8fc:	57b1fe7d 	.word	0x57b1fe7d
 801f900:	3ec71de3 	.word	0x3ec71de3
 801f904:	19c161d5 	.word	0x19c161d5
 801f908:	3f2a01a0 	.word	0x3f2a01a0
 801f90c:	1110f8a6 	.word	0x1110f8a6
 801f910:	3f811111 	.word	0x3f811111

0801f914 <__ieee754_fmod>:
 801f914:	ec53 2b11 	vmov	r2, r3, d1
 801f918:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 801f91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f920:	ea52 040c 	orrs.w	r4, r2, ip
 801f924:	ec51 0b10 	vmov	r0, r1, d0
 801f928:	461e      	mov	r6, r3
 801f92a:	4617      	mov	r7, r2
 801f92c:	4696      	mov	lr, r2
 801f92e:	d00c      	beq.n	801f94a <__ieee754_fmod+0x36>
 801f930:	4c77      	ldr	r4, [pc, #476]	@ (801fb10 <__ieee754_fmod+0x1fc>)
 801f932:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 801f936:	45a0      	cmp	r8, r4
 801f938:	4689      	mov	r9, r1
 801f93a:	d806      	bhi.n	801f94a <__ieee754_fmod+0x36>
 801f93c:	4254      	negs	r4, r2
 801f93e:	4d75      	ldr	r5, [pc, #468]	@ (801fb14 <__ieee754_fmod+0x200>)
 801f940:	4314      	orrs	r4, r2
 801f942:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801f946:	42ac      	cmp	r4, r5
 801f948:	d909      	bls.n	801f95e <__ieee754_fmod+0x4a>
 801f94a:	f7e0 fe65 	bl	8000618 <__aeabi_dmul>
 801f94e:	4602      	mov	r2, r0
 801f950:	460b      	mov	r3, r1
 801f952:	f7e0 ff8b 	bl	800086c <__aeabi_ddiv>
 801f956:	ec41 0b10 	vmov	d0, r0, r1
 801f95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f95e:	45e0      	cmp	r8, ip
 801f960:	4682      	mov	sl, r0
 801f962:	4604      	mov	r4, r0
 801f964:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 801f968:	dc09      	bgt.n	801f97e <__ieee754_fmod+0x6a>
 801f96a:	dbf4      	blt.n	801f956 <__ieee754_fmod+0x42>
 801f96c:	4282      	cmp	r2, r0
 801f96e:	d8f2      	bhi.n	801f956 <__ieee754_fmod+0x42>
 801f970:	d105      	bne.n	801f97e <__ieee754_fmod+0x6a>
 801f972:	4b69      	ldr	r3, [pc, #420]	@ (801fb18 <__ieee754_fmod+0x204>)
 801f974:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801f978:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f97c:	e7eb      	b.n	801f956 <__ieee754_fmod+0x42>
 801f97e:	4a65      	ldr	r2, [pc, #404]	@ (801fb14 <__ieee754_fmod+0x200>)
 801f980:	ea19 0f02 	tst.w	r9, r2
 801f984:	d148      	bne.n	801fa18 <__ieee754_fmod+0x104>
 801f986:	f1b8 0f00 	cmp.w	r8, #0
 801f98a:	d13d      	bne.n	801fa08 <__ieee754_fmod+0xf4>
 801f98c:	4963      	ldr	r1, [pc, #396]	@ (801fb1c <__ieee754_fmod+0x208>)
 801f98e:	4653      	mov	r3, sl
 801f990:	2b00      	cmp	r3, #0
 801f992:	dc36      	bgt.n	801fa02 <__ieee754_fmod+0xee>
 801f994:	4216      	tst	r6, r2
 801f996:	d14f      	bne.n	801fa38 <__ieee754_fmod+0x124>
 801f998:	f1bc 0f00 	cmp.w	ip, #0
 801f99c:	d144      	bne.n	801fa28 <__ieee754_fmod+0x114>
 801f99e:	4a5f      	ldr	r2, [pc, #380]	@ (801fb1c <__ieee754_fmod+0x208>)
 801f9a0:	463b      	mov	r3, r7
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	dc3d      	bgt.n	801fa22 <__ieee754_fmod+0x10e>
 801f9a6:	485e      	ldr	r0, [pc, #376]	@ (801fb20 <__ieee754_fmod+0x20c>)
 801f9a8:	4281      	cmp	r1, r0
 801f9aa:	db4a      	blt.n	801fa42 <__ieee754_fmod+0x12e>
 801f9ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f9b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f9b4:	485a      	ldr	r0, [pc, #360]	@ (801fb20 <__ieee754_fmod+0x20c>)
 801f9b6:	4282      	cmp	r2, r0
 801f9b8:	db57      	blt.n	801fa6a <__ieee754_fmod+0x156>
 801f9ba:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801f9be:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 801f9c2:	1a89      	subs	r1, r1, r2
 801f9c4:	1b98      	subs	r0, r3, r6
 801f9c6:	eba4 070e 	sub.w	r7, r4, lr
 801f9ca:	2900      	cmp	r1, #0
 801f9cc:	d162      	bne.n	801fa94 <__ieee754_fmod+0x180>
 801f9ce:	4574      	cmp	r4, lr
 801f9d0:	bf38      	it	cc
 801f9d2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801f9d6:	2800      	cmp	r0, #0
 801f9d8:	bfa4      	itt	ge
 801f9da:	463c      	movge	r4, r7
 801f9dc:	4603      	movge	r3, r0
 801f9de:	ea53 0104 	orrs.w	r1, r3, r4
 801f9e2:	d0c6      	beq.n	801f972 <__ieee754_fmod+0x5e>
 801f9e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f9e8:	db69      	blt.n	801fabe <__ieee754_fmod+0x1aa>
 801f9ea:	494d      	ldr	r1, [pc, #308]	@ (801fb20 <__ieee754_fmod+0x20c>)
 801f9ec:	428a      	cmp	r2, r1
 801f9ee:	db6c      	blt.n	801faca <__ieee754_fmod+0x1b6>
 801f9f0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801f9f4:	432b      	orrs	r3, r5
 801f9f6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801f9fa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f9fe:	4620      	mov	r0, r4
 801fa00:	e7a9      	b.n	801f956 <__ieee754_fmod+0x42>
 801fa02:	3901      	subs	r1, #1
 801fa04:	005b      	lsls	r3, r3, #1
 801fa06:	e7c3      	b.n	801f990 <__ieee754_fmod+0x7c>
 801fa08:	4945      	ldr	r1, [pc, #276]	@ (801fb20 <__ieee754_fmod+0x20c>)
 801fa0a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	ddc0      	ble.n	801f994 <__ieee754_fmod+0x80>
 801fa12:	3901      	subs	r1, #1
 801fa14:	005b      	lsls	r3, r3, #1
 801fa16:	e7fa      	b.n	801fa0e <__ieee754_fmod+0xfa>
 801fa18:	ea4f 5128 	mov.w	r1, r8, asr #20
 801fa1c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801fa20:	e7b8      	b.n	801f994 <__ieee754_fmod+0x80>
 801fa22:	3a01      	subs	r2, #1
 801fa24:	005b      	lsls	r3, r3, #1
 801fa26:	e7bc      	b.n	801f9a2 <__ieee754_fmod+0x8e>
 801fa28:	4a3d      	ldr	r2, [pc, #244]	@ (801fb20 <__ieee754_fmod+0x20c>)
 801fa2a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	ddb9      	ble.n	801f9a6 <__ieee754_fmod+0x92>
 801fa32:	3a01      	subs	r2, #1
 801fa34:	005b      	lsls	r3, r3, #1
 801fa36:	e7fa      	b.n	801fa2e <__ieee754_fmod+0x11a>
 801fa38:	ea4f 522c 	mov.w	r2, ip, asr #20
 801fa3c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801fa40:	e7b1      	b.n	801f9a6 <__ieee754_fmod+0x92>
 801fa42:	1a40      	subs	r0, r0, r1
 801fa44:	281f      	cmp	r0, #31
 801fa46:	dc0a      	bgt.n	801fa5e <__ieee754_fmod+0x14a>
 801fa48:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 801fa4c:	fa08 f800 	lsl.w	r8, r8, r0
 801fa50:	fa2a f303 	lsr.w	r3, sl, r3
 801fa54:	ea43 0308 	orr.w	r3, r3, r8
 801fa58:	fa0a f400 	lsl.w	r4, sl, r0
 801fa5c:	e7aa      	b.n	801f9b4 <__ieee754_fmod+0xa0>
 801fa5e:	4b31      	ldr	r3, [pc, #196]	@ (801fb24 <__ieee754_fmod+0x210>)
 801fa60:	1a5b      	subs	r3, r3, r1
 801fa62:	fa0a f303 	lsl.w	r3, sl, r3
 801fa66:	2400      	movs	r4, #0
 801fa68:	e7a4      	b.n	801f9b4 <__ieee754_fmod+0xa0>
 801fa6a:	1a80      	subs	r0, r0, r2
 801fa6c:	281f      	cmp	r0, #31
 801fa6e:	dc0a      	bgt.n	801fa86 <__ieee754_fmod+0x172>
 801fa70:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 801fa74:	fa0c fc00 	lsl.w	ip, ip, r0
 801fa78:	fa27 f606 	lsr.w	r6, r7, r6
 801fa7c:	ea46 060c 	orr.w	r6, r6, ip
 801fa80:	fa07 fe00 	lsl.w	lr, r7, r0
 801fa84:	e79d      	b.n	801f9c2 <__ieee754_fmod+0xae>
 801fa86:	4e27      	ldr	r6, [pc, #156]	@ (801fb24 <__ieee754_fmod+0x210>)
 801fa88:	1ab6      	subs	r6, r6, r2
 801fa8a:	fa07 f606 	lsl.w	r6, r7, r6
 801fa8e:	f04f 0e00 	mov.w	lr, #0
 801fa92:	e796      	b.n	801f9c2 <__ieee754_fmod+0xae>
 801fa94:	4574      	cmp	r4, lr
 801fa96:	bf38      	it	cc
 801fa98:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801fa9c:	2800      	cmp	r0, #0
 801fa9e:	da05      	bge.n	801faac <__ieee754_fmod+0x198>
 801faa0:	0fe0      	lsrs	r0, r4, #31
 801faa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801faa6:	0064      	lsls	r4, r4, #1
 801faa8:	3901      	subs	r1, #1
 801faaa:	e78b      	b.n	801f9c4 <__ieee754_fmod+0xb0>
 801faac:	ea50 0307 	orrs.w	r3, r0, r7
 801fab0:	f43f af5f 	beq.w	801f972 <__ieee754_fmod+0x5e>
 801fab4:	0ffb      	lsrs	r3, r7, #31
 801fab6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801faba:	007c      	lsls	r4, r7, #1
 801fabc:	e7f4      	b.n	801faa8 <__ieee754_fmod+0x194>
 801fabe:	0fe1      	lsrs	r1, r4, #31
 801fac0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801fac4:	0064      	lsls	r4, r4, #1
 801fac6:	3a01      	subs	r2, #1
 801fac8:	e78c      	b.n	801f9e4 <__ieee754_fmod+0xd0>
 801faca:	1a89      	subs	r1, r1, r2
 801facc:	2914      	cmp	r1, #20
 801face:	dc0a      	bgt.n	801fae6 <__ieee754_fmod+0x1d2>
 801fad0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801fad4:	fa03 f202 	lsl.w	r2, r3, r2
 801fad8:	40cc      	lsrs	r4, r1
 801fada:	4322      	orrs	r2, r4
 801fadc:	410b      	asrs	r3, r1
 801fade:	ea43 0105 	orr.w	r1, r3, r5
 801fae2:	4610      	mov	r0, r2
 801fae4:	e737      	b.n	801f956 <__ieee754_fmod+0x42>
 801fae6:	291f      	cmp	r1, #31
 801fae8:	dc07      	bgt.n	801fafa <__ieee754_fmod+0x1e6>
 801faea:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 801faee:	40cc      	lsrs	r4, r1
 801faf0:	fa03 f202 	lsl.w	r2, r3, r2
 801faf4:	4322      	orrs	r2, r4
 801faf6:	462b      	mov	r3, r5
 801faf8:	e7f1      	b.n	801fade <__ieee754_fmod+0x1ca>
 801fafa:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 801fafe:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801fb02:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801fb06:	32e2      	adds	r2, #226	@ 0xe2
 801fb08:	fa43 f202 	asr.w	r2, r3, r2
 801fb0c:	e7f3      	b.n	801faf6 <__ieee754_fmod+0x1e2>
 801fb0e:	bf00      	nop
 801fb10:	7fefffff 	.word	0x7fefffff
 801fb14:	7ff00000 	.word	0x7ff00000
 801fb18:	08024838 	.word	0x08024838
 801fb1c:	fffffbed 	.word	0xfffffbed
 801fb20:	fffffc02 	.word	0xfffffc02
 801fb24:	fffffbe2 	.word	0xfffffbe2

0801fb28 <__ieee754_rem_pio2>:
 801fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb2c:	ec57 6b10 	vmov	r6, r7, d0
 801fb30:	4bc5      	ldr	r3, [pc, #788]	@ (801fe48 <__ieee754_rem_pio2+0x320>)
 801fb32:	b08d      	sub	sp, #52	@ 0x34
 801fb34:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801fb38:	4598      	cmp	r8, r3
 801fb3a:	4604      	mov	r4, r0
 801fb3c:	9704      	str	r7, [sp, #16]
 801fb3e:	d807      	bhi.n	801fb50 <__ieee754_rem_pio2+0x28>
 801fb40:	2200      	movs	r2, #0
 801fb42:	2300      	movs	r3, #0
 801fb44:	ed80 0b00 	vstr	d0, [r0]
 801fb48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801fb4c:	2500      	movs	r5, #0
 801fb4e:	e028      	b.n	801fba2 <__ieee754_rem_pio2+0x7a>
 801fb50:	4bbe      	ldr	r3, [pc, #760]	@ (801fe4c <__ieee754_rem_pio2+0x324>)
 801fb52:	4598      	cmp	r8, r3
 801fb54:	d878      	bhi.n	801fc48 <__ieee754_rem_pio2+0x120>
 801fb56:	9b04      	ldr	r3, [sp, #16]
 801fb58:	4dbd      	ldr	r5, [pc, #756]	@ (801fe50 <__ieee754_rem_pio2+0x328>)
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	4630      	mov	r0, r6
 801fb5e:	a3ac      	add	r3, pc, #688	@ (adr r3, 801fe10 <__ieee754_rem_pio2+0x2e8>)
 801fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb64:	4639      	mov	r1, r7
 801fb66:	dd38      	ble.n	801fbda <__ieee754_rem_pio2+0xb2>
 801fb68:	f7e0 fb9e 	bl	80002a8 <__aeabi_dsub>
 801fb6c:	45a8      	cmp	r8, r5
 801fb6e:	4606      	mov	r6, r0
 801fb70:	460f      	mov	r7, r1
 801fb72:	d01a      	beq.n	801fbaa <__ieee754_rem_pio2+0x82>
 801fb74:	a3a8      	add	r3, pc, #672	@ (adr r3, 801fe18 <__ieee754_rem_pio2+0x2f0>)
 801fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb7a:	f7e0 fb95 	bl	80002a8 <__aeabi_dsub>
 801fb7e:	4602      	mov	r2, r0
 801fb80:	460b      	mov	r3, r1
 801fb82:	4680      	mov	r8, r0
 801fb84:	4689      	mov	r9, r1
 801fb86:	4630      	mov	r0, r6
 801fb88:	4639      	mov	r1, r7
 801fb8a:	f7e0 fb8d 	bl	80002a8 <__aeabi_dsub>
 801fb8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 801fe18 <__ieee754_rem_pio2+0x2f0>)
 801fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb94:	f7e0 fb88 	bl	80002a8 <__aeabi_dsub>
 801fb98:	e9c4 8900 	strd	r8, r9, [r4]
 801fb9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fba0:	2501      	movs	r5, #1
 801fba2:	4628      	mov	r0, r5
 801fba4:	b00d      	add	sp, #52	@ 0x34
 801fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbaa:	a39d      	add	r3, pc, #628	@ (adr r3, 801fe20 <__ieee754_rem_pio2+0x2f8>)
 801fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbb0:	f7e0 fb7a 	bl	80002a8 <__aeabi_dsub>
 801fbb4:	a39c      	add	r3, pc, #624	@ (adr r3, 801fe28 <__ieee754_rem_pio2+0x300>)
 801fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbba:	4606      	mov	r6, r0
 801fbbc:	460f      	mov	r7, r1
 801fbbe:	f7e0 fb73 	bl	80002a8 <__aeabi_dsub>
 801fbc2:	4602      	mov	r2, r0
 801fbc4:	460b      	mov	r3, r1
 801fbc6:	4680      	mov	r8, r0
 801fbc8:	4689      	mov	r9, r1
 801fbca:	4630      	mov	r0, r6
 801fbcc:	4639      	mov	r1, r7
 801fbce:	f7e0 fb6b 	bl	80002a8 <__aeabi_dsub>
 801fbd2:	a395      	add	r3, pc, #596	@ (adr r3, 801fe28 <__ieee754_rem_pio2+0x300>)
 801fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbd8:	e7dc      	b.n	801fb94 <__ieee754_rem_pio2+0x6c>
 801fbda:	f7e0 fb67 	bl	80002ac <__adddf3>
 801fbde:	45a8      	cmp	r8, r5
 801fbe0:	4606      	mov	r6, r0
 801fbe2:	460f      	mov	r7, r1
 801fbe4:	d018      	beq.n	801fc18 <__ieee754_rem_pio2+0xf0>
 801fbe6:	a38c      	add	r3, pc, #560	@ (adr r3, 801fe18 <__ieee754_rem_pio2+0x2f0>)
 801fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbec:	f7e0 fb5e 	bl	80002ac <__adddf3>
 801fbf0:	4602      	mov	r2, r0
 801fbf2:	460b      	mov	r3, r1
 801fbf4:	4680      	mov	r8, r0
 801fbf6:	4689      	mov	r9, r1
 801fbf8:	4630      	mov	r0, r6
 801fbfa:	4639      	mov	r1, r7
 801fbfc:	f7e0 fb54 	bl	80002a8 <__aeabi_dsub>
 801fc00:	a385      	add	r3, pc, #532	@ (adr r3, 801fe18 <__ieee754_rem_pio2+0x2f0>)
 801fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc06:	f7e0 fb51 	bl	80002ac <__adddf3>
 801fc0a:	f04f 35ff 	mov.w	r5, #4294967295
 801fc0e:	e9c4 8900 	strd	r8, r9, [r4]
 801fc12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fc16:	e7c4      	b.n	801fba2 <__ieee754_rem_pio2+0x7a>
 801fc18:	a381      	add	r3, pc, #516	@ (adr r3, 801fe20 <__ieee754_rem_pio2+0x2f8>)
 801fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc1e:	f7e0 fb45 	bl	80002ac <__adddf3>
 801fc22:	a381      	add	r3, pc, #516	@ (adr r3, 801fe28 <__ieee754_rem_pio2+0x300>)
 801fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc28:	4606      	mov	r6, r0
 801fc2a:	460f      	mov	r7, r1
 801fc2c:	f7e0 fb3e 	bl	80002ac <__adddf3>
 801fc30:	4602      	mov	r2, r0
 801fc32:	460b      	mov	r3, r1
 801fc34:	4680      	mov	r8, r0
 801fc36:	4689      	mov	r9, r1
 801fc38:	4630      	mov	r0, r6
 801fc3a:	4639      	mov	r1, r7
 801fc3c:	f7e0 fb34 	bl	80002a8 <__aeabi_dsub>
 801fc40:	a379      	add	r3, pc, #484	@ (adr r3, 801fe28 <__ieee754_rem_pio2+0x300>)
 801fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc46:	e7de      	b.n	801fc06 <__ieee754_rem_pio2+0xde>
 801fc48:	4b82      	ldr	r3, [pc, #520]	@ (801fe54 <__ieee754_rem_pio2+0x32c>)
 801fc4a:	4598      	cmp	r8, r3
 801fc4c:	f200 80d1 	bhi.w	801fdf2 <__ieee754_rem_pio2+0x2ca>
 801fc50:	f000 f966 	bl	801ff20 <fabs>
 801fc54:	ec57 6b10 	vmov	r6, r7, d0
 801fc58:	a375      	add	r3, pc, #468	@ (adr r3, 801fe30 <__ieee754_rem_pio2+0x308>)
 801fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc5e:	4630      	mov	r0, r6
 801fc60:	4639      	mov	r1, r7
 801fc62:	f7e0 fcd9 	bl	8000618 <__aeabi_dmul>
 801fc66:	4b7c      	ldr	r3, [pc, #496]	@ (801fe58 <__ieee754_rem_pio2+0x330>)
 801fc68:	2200      	movs	r2, #0
 801fc6a:	f7e0 fb1f 	bl	80002ac <__adddf3>
 801fc6e:	f7e0 ff83 	bl	8000b78 <__aeabi_d2iz>
 801fc72:	4605      	mov	r5, r0
 801fc74:	f7e0 fc66 	bl	8000544 <__aeabi_i2d>
 801fc78:	4602      	mov	r2, r0
 801fc7a:	460b      	mov	r3, r1
 801fc7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fc80:	a363      	add	r3, pc, #396	@ (adr r3, 801fe10 <__ieee754_rem_pio2+0x2e8>)
 801fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc86:	f7e0 fcc7 	bl	8000618 <__aeabi_dmul>
 801fc8a:	4602      	mov	r2, r0
 801fc8c:	460b      	mov	r3, r1
 801fc8e:	4630      	mov	r0, r6
 801fc90:	4639      	mov	r1, r7
 801fc92:	f7e0 fb09 	bl	80002a8 <__aeabi_dsub>
 801fc96:	a360      	add	r3, pc, #384	@ (adr r3, 801fe18 <__ieee754_rem_pio2+0x2f0>)
 801fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc9c:	4682      	mov	sl, r0
 801fc9e:	468b      	mov	fp, r1
 801fca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fca4:	f7e0 fcb8 	bl	8000618 <__aeabi_dmul>
 801fca8:	2d1f      	cmp	r5, #31
 801fcaa:	4606      	mov	r6, r0
 801fcac:	460f      	mov	r7, r1
 801fcae:	dc0c      	bgt.n	801fcca <__ieee754_rem_pio2+0x1a2>
 801fcb0:	4b6a      	ldr	r3, [pc, #424]	@ (801fe5c <__ieee754_rem_pio2+0x334>)
 801fcb2:	1e6a      	subs	r2, r5, #1
 801fcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fcb8:	4543      	cmp	r3, r8
 801fcba:	d006      	beq.n	801fcca <__ieee754_rem_pio2+0x1a2>
 801fcbc:	4632      	mov	r2, r6
 801fcbe:	463b      	mov	r3, r7
 801fcc0:	4650      	mov	r0, sl
 801fcc2:	4659      	mov	r1, fp
 801fcc4:	f7e0 faf0 	bl	80002a8 <__aeabi_dsub>
 801fcc8:	e00e      	b.n	801fce8 <__ieee754_rem_pio2+0x1c0>
 801fcca:	463b      	mov	r3, r7
 801fccc:	4632      	mov	r2, r6
 801fcce:	4650      	mov	r0, sl
 801fcd0:	4659      	mov	r1, fp
 801fcd2:	f7e0 fae9 	bl	80002a8 <__aeabi_dsub>
 801fcd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fcda:	9305      	str	r3, [sp, #20]
 801fcdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fce0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801fce4:	2b10      	cmp	r3, #16
 801fce6:	dc02      	bgt.n	801fcee <__ieee754_rem_pio2+0x1c6>
 801fce8:	e9c4 0100 	strd	r0, r1, [r4]
 801fcec:	e039      	b.n	801fd62 <__ieee754_rem_pio2+0x23a>
 801fcee:	a34c      	add	r3, pc, #304	@ (adr r3, 801fe20 <__ieee754_rem_pio2+0x2f8>)
 801fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fcf8:	f7e0 fc8e 	bl	8000618 <__aeabi_dmul>
 801fcfc:	4606      	mov	r6, r0
 801fcfe:	460f      	mov	r7, r1
 801fd00:	4602      	mov	r2, r0
 801fd02:	460b      	mov	r3, r1
 801fd04:	4650      	mov	r0, sl
 801fd06:	4659      	mov	r1, fp
 801fd08:	f7e0 face 	bl	80002a8 <__aeabi_dsub>
 801fd0c:	4602      	mov	r2, r0
 801fd0e:	460b      	mov	r3, r1
 801fd10:	4680      	mov	r8, r0
 801fd12:	4689      	mov	r9, r1
 801fd14:	4650      	mov	r0, sl
 801fd16:	4659      	mov	r1, fp
 801fd18:	f7e0 fac6 	bl	80002a8 <__aeabi_dsub>
 801fd1c:	4632      	mov	r2, r6
 801fd1e:	463b      	mov	r3, r7
 801fd20:	f7e0 fac2 	bl	80002a8 <__aeabi_dsub>
 801fd24:	a340      	add	r3, pc, #256	@ (adr r3, 801fe28 <__ieee754_rem_pio2+0x300>)
 801fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd2a:	4606      	mov	r6, r0
 801fd2c:	460f      	mov	r7, r1
 801fd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fd32:	f7e0 fc71 	bl	8000618 <__aeabi_dmul>
 801fd36:	4632      	mov	r2, r6
 801fd38:	463b      	mov	r3, r7
 801fd3a:	f7e0 fab5 	bl	80002a8 <__aeabi_dsub>
 801fd3e:	4602      	mov	r2, r0
 801fd40:	460b      	mov	r3, r1
 801fd42:	4606      	mov	r6, r0
 801fd44:	460f      	mov	r7, r1
 801fd46:	4640      	mov	r0, r8
 801fd48:	4649      	mov	r1, r9
 801fd4a:	f7e0 faad 	bl	80002a8 <__aeabi_dsub>
 801fd4e:	9a05      	ldr	r2, [sp, #20]
 801fd50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fd54:	1ad3      	subs	r3, r2, r3
 801fd56:	2b31      	cmp	r3, #49	@ 0x31
 801fd58:	dc20      	bgt.n	801fd9c <__ieee754_rem_pio2+0x274>
 801fd5a:	e9c4 0100 	strd	r0, r1, [r4]
 801fd5e:	46c2      	mov	sl, r8
 801fd60:	46cb      	mov	fp, r9
 801fd62:	e9d4 8900 	ldrd	r8, r9, [r4]
 801fd66:	4650      	mov	r0, sl
 801fd68:	4642      	mov	r2, r8
 801fd6a:	464b      	mov	r3, r9
 801fd6c:	4659      	mov	r1, fp
 801fd6e:	f7e0 fa9b 	bl	80002a8 <__aeabi_dsub>
 801fd72:	463b      	mov	r3, r7
 801fd74:	4632      	mov	r2, r6
 801fd76:	f7e0 fa97 	bl	80002a8 <__aeabi_dsub>
 801fd7a:	9b04      	ldr	r3, [sp, #16]
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fd82:	f6bf af0e 	bge.w	801fba2 <__ieee754_rem_pio2+0x7a>
 801fd86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801fd8a:	6063      	str	r3, [r4, #4]
 801fd8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fd90:	f8c4 8000 	str.w	r8, [r4]
 801fd94:	60a0      	str	r0, [r4, #8]
 801fd96:	60e3      	str	r3, [r4, #12]
 801fd98:	426d      	negs	r5, r5
 801fd9a:	e702      	b.n	801fba2 <__ieee754_rem_pio2+0x7a>
 801fd9c:	a326      	add	r3, pc, #152	@ (adr r3, 801fe38 <__ieee754_rem_pio2+0x310>)
 801fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fda6:	f7e0 fc37 	bl	8000618 <__aeabi_dmul>
 801fdaa:	4606      	mov	r6, r0
 801fdac:	460f      	mov	r7, r1
 801fdae:	4602      	mov	r2, r0
 801fdb0:	460b      	mov	r3, r1
 801fdb2:	4640      	mov	r0, r8
 801fdb4:	4649      	mov	r1, r9
 801fdb6:	f7e0 fa77 	bl	80002a8 <__aeabi_dsub>
 801fdba:	4602      	mov	r2, r0
 801fdbc:	460b      	mov	r3, r1
 801fdbe:	4682      	mov	sl, r0
 801fdc0:	468b      	mov	fp, r1
 801fdc2:	4640      	mov	r0, r8
 801fdc4:	4649      	mov	r1, r9
 801fdc6:	f7e0 fa6f 	bl	80002a8 <__aeabi_dsub>
 801fdca:	4632      	mov	r2, r6
 801fdcc:	463b      	mov	r3, r7
 801fdce:	f7e0 fa6b 	bl	80002a8 <__aeabi_dsub>
 801fdd2:	a31b      	add	r3, pc, #108	@ (adr r3, 801fe40 <__ieee754_rem_pio2+0x318>)
 801fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd8:	4606      	mov	r6, r0
 801fdda:	460f      	mov	r7, r1
 801fddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fde0:	f7e0 fc1a 	bl	8000618 <__aeabi_dmul>
 801fde4:	4632      	mov	r2, r6
 801fde6:	463b      	mov	r3, r7
 801fde8:	f7e0 fa5e 	bl	80002a8 <__aeabi_dsub>
 801fdec:	4606      	mov	r6, r0
 801fdee:	460f      	mov	r7, r1
 801fdf0:	e764      	b.n	801fcbc <__ieee754_rem_pio2+0x194>
 801fdf2:	4b1b      	ldr	r3, [pc, #108]	@ (801fe60 <__ieee754_rem_pio2+0x338>)
 801fdf4:	4598      	cmp	r8, r3
 801fdf6:	d935      	bls.n	801fe64 <__ieee754_rem_pio2+0x33c>
 801fdf8:	4632      	mov	r2, r6
 801fdfa:	463b      	mov	r3, r7
 801fdfc:	4630      	mov	r0, r6
 801fdfe:	4639      	mov	r1, r7
 801fe00:	f7e0 fa52 	bl	80002a8 <__aeabi_dsub>
 801fe04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fe08:	e9c4 0100 	strd	r0, r1, [r4]
 801fe0c:	e69e      	b.n	801fb4c <__ieee754_rem_pio2+0x24>
 801fe0e:	bf00      	nop
 801fe10:	54400000 	.word	0x54400000
 801fe14:	3ff921fb 	.word	0x3ff921fb
 801fe18:	1a626331 	.word	0x1a626331
 801fe1c:	3dd0b461 	.word	0x3dd0b461
 801fe20:	1a600000 	.word	0x1a600000
 801fe24:	3dd0b461 	.word	0x3dd0b461
 801fe28:	2e037073 	.word	0x2e037073
 801fe2c:	3ba3198a 	.word	0x3ba3198a
 801fe30:	6dc9c883 	.word	0x6dc9c883
 801fe34:	3fe45f30 	.word	0x3fe45f30
 801fe38:	2e000000 	.word	0x2e000000
 801fe3c:	3ba3198a 	.word	0x3ba3198a
 801fe40:	252049c1 	.word	0x252049c1
 801fe44:	397b839a 	.word	0x397b839a
 801fe48:	3fe921fb 	.word	0x3fe921fb
 801fe4c:	4002d97b 	.word	0x4002d97b
 801fe50:	3ff921fb 	.word	0x3ff921fb
 801fe54:	413921fb 	.word	0x413921fb
 801fe58:	3fe00000 	.word	0x3fe00000
 801fe5c:	08024848 	.word	0x08024848
 801fe60:	7fefffff 	.word	0x7fefffff
 801fe64:	ea4f 5528 	mov.w	r5, r8, asr #20
 801fe68:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801fe6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801fe70:	4630      	mov	r0, r6
 801fe72:	460f      	mov	r7, r1
 801fe74:	f7e0 fe80 	bl	8000b78 <__aeabi_d2iz>
 801fe78:	f7e0 fb64 	bl	8000544 <__aeabi_i2d>
 801fe7c:	4602      	mov	r2, r0
 801fe7e:	460b      	mov	r3, r1
 801fe80:	4630      	mov	r0, r6
 801fe82:	4639      	mov	r1, r7
 801fe84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fe88:	f7e0 fa0e 	bl	80002a8 <__aeabi_dsub>
 801fe8c:	4b22      	ldr	r3, [pc, #136]	@ (801ff18 <__ieee754_rem_pio2+0x3f0>)
 801fe8e:	2200      	movs	r2, #0
 801fe90:	f7e0 fbc2 	bl	8000618 <__aeabi_dmul>
 801fe94:	460f      	mov	r7, r1
 801fe96:	4606      	mov	r6, r0
 801fe98:	f7e0 fe6e 	bl	8000b78 <__aeabi_d2iz>
 801fe9c:	f7e0 fb52 	bl	8000544 <__aeabi_i2d>
 801fea0:	4602      	mov	r2, r0
 801fea2:	460b      	mov	r3, r1
 801fea4:	4630      	mov	r0, r6
 801fea6:	4639      	mov	r1, r7
 801fea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801feac:	f7e0 f9fc 	bl	80002a8 <__aeabi_dsub>
 801feb0:	4b19      	ldr	r3, [pc, #100]	@ (801ff18 <__ieee754_rem_pio2+0x3f0>)
 801feb2:	2200      	movs	r2, #0
 801feb4:	f7e0 fbb0 	bl	8000618 <__aeabi_dmul>
 801feb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801febc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801fec0:	f04f 0803 	mov.w	r8, #3
 801fec4:	2600      	movs	r6, #0
 801fec6:	2700      	movs	r7, #0
 801fec8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801fecc:	4632      	mov	r2, r6
 801fece:	463b      	mov	r3, r7
 801fed0:	46c2      	mov	sl, r8
 801fed2:	f108 38ff 	add.w	r8, r8, #4294967295
 801fed6:	f7e0 fe07 	bl	8000ae8 <__aeabi_dcmpeq>
 801feda:	2800      	cmp	r0, #0
 801fedc:	d1f4      	bne.n	801fec8 <__ieee754_rem_pio2+0x3a0>
 801fede:	4b0f      	ldr	r3, [pc, #60]	@ (801ff1c <__ieee754_rem_pio2+0x3f4>)
 801fee0:	9301      	str	r3, [sp, #4]
 801fee2:	2302      	movs	r3, #2
 801fee4:	9300      	str	r3, [sp, #0]
 801fee6:	462a      	mov	r2, r5
 801fee8:	4653      	mov	r3, sl
 801feea:	4621      	mov	r1, r4
 801feec:	a806      	add	r0, sp, #24
 801feee:	f000 f9f7 	bl	80202e0 <__kernel_rem_pio2>
 801fef2:	9b04      	ldr	r3, [sp, #16]
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	4605      	mov	r5, r0
 801fef8:	f6bf ae53 	bge.w	801fba2 <__ieee754_rem_pio2+0x7a>
 801fefc:	e9d4 2100 	ldrd	r2, r1, [r4]
 801ff00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ff04:	e9c4 2300 	strd	r2, r3, [r4]
 801ff08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801ff0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ff10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801ff14:	e740      	b.n	801fd98 <__ieee754_rem_pio2+0x270>
 801ff16:	bf00      	nop
 801ff18:	41700000 	.word	0x41700000
 801ff1c:	080248c8 	.word	0x080248c8

0801ff20 <fabs>:
 801ff20:	ec51 0b10 	vmov	r0, r1, d0
 801ff24:	4602      	mov	r2, r0
 801ff26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ff2a:	ec43 2b10 	vmov	d0, r2, r3
 801ff2e:	4770      	bx	lr

0801ff30 <__kernel_cosf>:
 801ff30:	ee10 3a10 	vmov	r3, s0
 801ff34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ff38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ff3c:	eef0 6a40 	vmov.f32	s13, s0
 801ff40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ff44:	d204      	bcs.n	801ff50 <__kernel_cosf+0x20>
 801ff46:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801ff4a:	ee17 2a90 	vmov	r2, s15
 801ff4e:	b342      	cbz	r2, 801ffa2 <__kernel_cosf+0x72>
 801ff50:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ff54:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801ffc0 <__kernel_cosf+0x90>
 801ff58:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801ffc4 <__kernel_cosf+0x94>
 801ff5c:	4a1a      	ldr	r2, [pc, #104]	@ (801ffc8 <__kernel_cosf+0x98>)
 801ff5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ff62:	4293      	cmp	r3, r2
 801ff64:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ffcc <__kernel_cosf+0x9c>
 801ff68:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ff6c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801ffd0 <__kernel_cosf+0xa0>
 801ff70:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ff74:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801ffd4 <__kernel_cosf+0xa4>
 801ff78:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ff7c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801ffd8 <__kernel_cosf+0xa8>
 801ff80:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ff84:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801ff88:	ee26 6a07 	vmul.f32	s12, s12, s14
 801ff8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ff90:	eee7 0a06 	vfma.f32	s1, s14, s12
 801ff94:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ff98:	d804      	bhi.n	801ffa4 <__kernel_cosf+0x74>
 801ff9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ff9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ffa2:	4770      	bx	lr
 801ffa4:	4a0d      	ldr	r2, [pc, #52]	@ (801ffdc <__kernel_cosf+0xac>)
 801ffa6:	4293      	cmp	r3, r2
 801ffa8:	bf9a      	itte	ls
 801ffaa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801ffae:	ee07 3a10 	vmovls	s14, r3
 801ffb2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801ffb6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ffba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ffbe:	e7ec      	b.n	801ff9a <__kernel_cosf+0x6a>
 801ffc0:	ad47d74e 	.word	0xad47d74e
 801ffc4:	310f74f6 	.word	0x310f74f6
 801ffc8:	3e999999 	.word	0x3e999999
 801ffcc:	b493f27c 	.word	0xb493f27c
 801ffd0:	37d00d01 	.word	0x37d00d01
 801ffd4:	bab60b61 	.word	0xbab60b61
 801ffd8:	3d2aaaab 	.word	0x3d2aaaab
 801ffdc:	3f480000 	.word	0x3f480000

0801ffe0 <__kernel_sinf>:
 801ffe0:	ee10 3a10 	vmov	r3, s0
 801ffe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ffe8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ffec:	d204      	bcs.n	801fff8 <__kernel_sinf+0x18>
 801ffee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801fff2:	ee17 3a90 	vmov	r3, s15
 801fff6:	b35b      	cbz	r3, 8020050 <__kernel_sinf+0x70>
 801fff8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801fffc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8020054 <__kernel_sinf+0x74>
 8020000:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8020058 <__kernel_sinf+0x78>
 8020004:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020008:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802005c <__kernel_sinf+0x7c>
 802000c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020010:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8020060 <__kernel_sinf+0x80>
 8020014:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020018:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8020064 <__kernel_sinf+0x84>
 802001c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020020:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020024:	b930      	cbnz	r0, 8020034 <__kernel_sinf+0x54>
 8020026:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8020068 <__kernel_sinf+0x88>
 802002a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802002e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8020032:	4770      	bx	lr
 8020034:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8020038:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802003c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020040:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020044:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802006c <__kernel_sinf+0x8c>
 8020048:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802004c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8020050:	4770      	bx	lr
 8020052:	bf00      	nop
 8020054:	2f2ec9d3 	.word	0x2f2ec9d3
 8020058:	b2d72f34 	.word	0xb2d72f34
 802005c:	3638ef1b 	.word	0x3638ef1b
 8020060:	b9500d01 	.word	0xb9500d01
 8020064:	3c088889 	.word	0x3c088889
 8020068:	be2aaaab 	.word	0xbe2aaaab
 802006c:	3e2aaaab 	.word	0x3e2aaaab

08020070 <__ieee754_rem_pio2f>:
 8020070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020072:	ee10 6a10 	vmov	r6, s0
 8020076:	4b88      	ldr	r3, [pc, #544]	@ (8020298 <__ieee754_rem_pio2f+0x228>)
 8020078:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802007c:	429d      	cmp	r5, r3
 802007e:	b087      	sub	sp, #28
 8020080:	4604      	mov	r4, r0
 8020082:	d805      	bhi.n	8020090 <__ieee754_rem_pio2f+0x20>
 8020084:	2300      	movs	r3, #0
 8020086:	ed80 0a00 	vstr	s0, [r0]
 802008a:	6043      	str	r3, [r0, #4]
 802008c:	2000      	movs	r0, #0
 802008e:	e022      	b.n	80200d6 <__ieee754_rem_pio2f+0x66>
 8020090:	4b82      	ldr	r3, [pc, #520]	@ (802029c <__ieee754_rem_pio2f+0x22c>)
 8020092:	429d      	cmp	r5, r3
 8020094:	d83a      	bhi.n	802010c <__ieee754_rem_pio2f+0x9c>
 8020096:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802009a:	2e00      	cmp	r6, #0
 802009c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80202a0 <__ieee754_rem_pio2f+0x230>
 80200a0:	4a80      	ldr	r2, [pc, #512]	@ (80202a4 <__ieee754_rem_pio2f+0x234>)
 80200a2:	f023 030f 	bic.w	r3, r3, #15
 80200a6:	dd18      	ble.n	80200da <__ieee754_rem_pio2f+0x6a>
 80200a8:	4293      	cmp	r3, r2
 80200aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80200ae:	bf09      	itett	eq
 80200b0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80202a8 <__ieee754_rem_pio2f+0x238>
 80200b4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80202ac <__ieee754_rem_pio2f+0x23c>
 80200b8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80202b0 <__ieee754_rem_pio2f+0x240>
 80200bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80200c0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80200c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80200c8:	ed80 7a00 	vstr	s14, [r0]
 80200cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80200d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80200d4:	2001      	movs	r0, #1
 80200d6:	b007      	add	sp, #28
 80200d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200da:	4293      	cmp	r3, r2
 80200dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80200e0:	bf09      	itett	eq
 80200e2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80202a8 <__ieee754_rem_pio2f+0x238>
 80200e6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80202ac <__ieee754_rem_pio2f+0x23c>
 80200ea:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80202b0 <__ieee754_rem_pio2f+0x240>
 80200ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80200f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80200f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80200fa:	ed80 7a00 	vstr	s14, [r0]
 80200fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020102:	edc0 7a01 	vstr	s15, [r0, #4]
 8020106:	f04f 30ff 	mov.w	r0, #4294967295
 802010a:	e7e4      	b.n	80200d6 <__ieee754_rem_pio2f+0x66>
 802010c:	4b69      	ldr	r3, [pc, #420]	@ (80202b4 <__ieee754_rem_pio2f+0x244>)
 802010e:	429d      	cmp	r5, r3
 8020110:	d873      	bhi.n	80201fa <__ieee754_rem_pio2f+0x18a>
 8020112:	f000 f8dd 	bl	80202d0 <fabsf>
 8020116:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80202b8 <__ieee754_rem_pio2f+0x248>
 802011a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802011e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8020122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802012a:	ee17 0a90 	vmov	r0, s15
 802012e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80202a0 <__ieee754_rem_pio2f+0x230>
 8020132:	eea7 0a67 	vfms.f32	s0, s14, s15
 8020136:	281f      	cmp	r0, #31
 8020138:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80202ac <__ieee754_rem_pio2f+0x23c>
 802013c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020140:	eeb1 6a47 	vneg.f32	s12, s14
 8020144:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020148:	ee16 1a90 	vmov	r1, s13
 802014c:	dc09      	bgt.n	8020162 <__ieee754_rem_pio2f+0xf2>
 802014e:	4a5b      	ldr	r2, [pc, #364]	@ (80202bc <__ieee754_rem_pio2f+0x24c>)
 8020150:	1e47      	subs	r7, r0, #1
 8020152:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8020156:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802015a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802015e:	4293      	cmp	r3, r2
 8020160:	d107      	bne.n	8020172 <__ieee754_rem_pio2f+0x102>
 8020162:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8020166:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802016a:	2a08      	cmp	r2, #8
 802016c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8020170:	dc14      	bgt.n	802019c <__ieee754_rem_pio2f+0x12c>
 8020172:	6021      	str	r1, [r4, #0]
 8020174:	ed94 7a00 	vldr	s14, [r4]
 8020178:	ee30 0a47 	vsub.f32	s0, s0, s14
 802017c:	2e00      	cmp	r6, #0
 802017e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020182:	ed84 0a01 	vstr	s0, [r4, #4]
 8020186:	daa6      	bge.n	80200d6 <__ieee754_rem_pio2f+0x66>
 8020188:	eeb1 7a47 	vneg.f32	s14, s14
 802018c:	eeb1 0a40 	vneg.f32	s0, s0
 8020190:	ed84 7a00 	vstr	s14, [r4]
 8020194:	ed84 0a01 	vstr	s0, [r4, #4]
 8020198:	4240      	negs	r0, r0
 802019a:	e79c      	b.n	80200d6 <__ieee754_rem_pio2f+0x66>
 802019c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80202a8 <__ieee754_rem_pio2f+0x238>
 80201a0:	eef0 6a40 	vmov.f32	s13, s0
 80201a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80201a8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80201ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80201b0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80202b0 <__ieee754_rem_pio2f+0x240>
 80201b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80201b8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80201bc:	ee15 2a90 	vmov	r2, s11
 80201c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80201c4:	1a5b      	subs	r3, r3, r1
 80201c6:	2b19      	cmp	r3, #25
 80201c8:	dc04      	bgt.n	80201d4 <__ieee754_rem_pio2f+0x164>
 80201ca:	edc4 5a00 	vstr	s11, [r4]
 80201ce:	eeb0 0a66 	vmov.f32	s0, s13
 80201d2:	e7cf      	b.n	8020174 <__ieee754_rem_pio2f+0x104>
 80201d4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80202c0 <__ieee754_rem_pio2f+0x250>
 80201d8:	eeb0 0a66 	vmov.f32	s0, s13
 80201dc:	eea6 0a25 	vfma.f32	s0, s12, s11
 80201e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80201e4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80202c4 <__ieee754_rem_pio2f+0x254>
 80201e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80201ec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80201f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80201f4:	ed84 7a00 	vstr	s14, [r4]
 80201f8:	e7bc      	b.n	8020174 <__ieee754_rem_pio2f+0x104>
 80201fa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80201fe:	d306      	bcc.n	802020e <__ieee754_rem_pio2f+0x19e>
 8020200:	ee70 7a40 	vsub.f32	s15, s0, s0
 8020204:	edc0 7a01 	vstr	s15, [r0, #4]
 8020208:	edc0 7a00 	vstr	s15, [r0]
 802020c:	e73e      	b.n	802008c <__ieee754_rem_pio2f+0x1c>
 802020e:	15ea      	asrs	r2, r5, #23
 8020210:	3a86      	subs	r2, #134	@ 0x86
 8020212:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8020216:	ee07 3a90 	vmov	s15, r3
 802021a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802021e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80202c8 <__ieee754_rem_pio2f+0x258>
 8020222:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802022a:	ed8d 7a03 	vstr	s14, [sp, #12]
 802022e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020232:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8020236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802023a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802023e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8020242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020246:	eef5 7a40 	vcmp.f32	s15, #0.0
 802024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802024e:	edcd 7a05 	vstr	s15, [sp, #20]
 8020252:	d11e      	bne.n	8020292 <__ieee754_rem_pio2f+0x222>
 8020254:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8020258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802025c:	bf0c      	ite	eq
 802025e:	2301      	moveq	r3, #1
 8020260:	2302      	movne	r3, #2
 8020262:	491a      	ldr	r1, [pc, #104]	@ (80202cc <__ieee754_rem_pio2f+0x25c>)
 8020264:	9101      	str	r1, [sp, #4]
 8020266:	2102      	movs	r1, #2
 8020268:	9100      	str	r1, [sp, #0]
 802026a:	a803      	add	r0, sp, #12
 802026c:	4621      	mov	r1, r4
 802026e:	f000 fb8f 	bl	8020990 <__kernel_rem_pio2f>
 8020272:	2e00      	cmp	r6, #0
 8020274:	f6bf af2f 	bge.w	80200d6 <__ieee754_rem_pio2f+0x66>
 8020278:	edd4 7a00 	vldr	s15, [r4]
 802027c:	eef1 7a67 	vneg.f32	s15, s15
 8020280:	edc4 7a00 	vstr	s15, [r4]
 8020284:	edd4 7a01 	vldr	s15, [r4, #4]
 8020288:	eef1 7a67 	vneg.f32	s15, s15
 802028c:	edc4 7a01 	vstr	s15, [r4, #4]
 8020290:	e782      	b.n	8020198 <__ieee754_rem_pio2f+0x128>
 8020292:	2303      	movs	r3, #3
 8020294:	e7e5      	b.n	8020262 <__ieee754_rem_pio2f+0x1f2>
 8020296:	bf00      	nop
 8020298:	3f490fd8 	.word	0x3f490fd8
 802029c:	4016cbe3 	.word	0x4016cbe3
 80202a0:	3fc90f80 	.word	0x3fc90f80
 80202a4:	3fc90fd0 	.word	0x3fc90fd0
 80202a8:	37354400 	.word	0x37354400
 80202ac:	37354443 	.word	0x37354443
 80202b0:	2e85a308 	.word	0x2e85a308
 80202b4:	43490f80 	.word	0x43490f80
 80202b8:	3f22f984 	.word	0x3f22f984
 80202bc:	080249d0 	.word	0x080249d0
 80202c0:	2e85a300 	.word	0x2e85a300
 80202c4:	248d3132 	.word	0x248d3132
 80202c8:	43800000 	.word	0x43800000
 80202cc:	08024a50 	.word	0x08024a50

080202d0 <fabsf>:
 80202d0:	ee10 3a10 	vmov	r3, s0
 80202d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80202d8:	ee00 3a10 	vmov	s0, r3
 80202dc:	4770      	bx	lr
	...

080202e0 <__kernel_rem_pio2>:
 80202e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202e4:	ed2d 8b02 	vpush	{d8}
 80202e8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80202ec:	f112 0f14 	cmn.w	r2, #20
 80202f0:	9306      	str	r3, [sp, #24]
 80202f2:	9104      	str	r1, [sp, #16]
 80202f4:	4bbe      	ldr	r3, [pc, #760]	@ (80205f0 <__kernel_rem_pio2+0x310>)
 80202f6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80202f8:	9008      	str	r0, [sp, #32]
 80202fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80202fe:	9300      	str	r3, [sp, #0]
 8020300:	9b06      	ldr	r3, [sp, #24]
 8020302:	f103 33ff 	add.w	r3, r3, #4294967295
 8020306:	bfa8      	it	ge
 8020308:	1ed4      	subge	r4, r2, #3
 802030a:	9305      	str	r3, [sp, #20]
 802030c:	bfb2      	itee	lt
 802030e:	2400      	movlt	r4, #0
 8020310:	2318      	movge	r3, #24
 8020312:	fb94 f4f3 	sdivge	r4, r4, r3
 8020316:	f06f 0317 	mvn.w	r3, #23
 802031a:	fb04 3303 	mla	r3, r4, r3, r3
 802031e:	eb03 0b02 	add.w	fp, r3, r2
 8020322:	9b00      	ldr	r3, [sp, #0]
 8020324:	9a05      	ldr	r2, [sp, #20]
 8020326:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80205e0 <__kernel_rem_pio2+0x300>
 802032a:	eb03 0802 	add.w	r8, r3, r2
 802032e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8020330:	1aa7      	subs	r7, r4, r2
 8020332:	ae20      	add	r6, sp, #128	@ 0x80
 8020334:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8020338:	2500      	movs	r5, #0
 802033a:	4545      	cmp	r5, r8
 802033c:	dd13      	ble.n	8020366 <__kernel_rem_pio2+0x86>
 802033e:	9b06      	ldr	r3, [sp, #24]
 8020340:	aa20      	add	r2, sp, #128	@ 0x80
 8020342:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8020346:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 802034a:	f04f 0800 	mov.w	r8, #0
 802034e:	9b00      	ldr	r3, [sp, #0]
 8020350:	4598      	cmp	r8, r3
 8020352:	dc31      	bgt.n	80203b8 <__kernel_rem_pio2+0xd8>
 8020354:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80205e0 <__kernel_rem_pio2+0x300>
 8020358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802035c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020360:	462f      	mov	r7, r5
 8020362:	2600      	movs	r6, #0
 8020364:	e01b      	b.n	802039e <__kernel_rem_pio2+0xbe>
 8020366:	42ef      	cmn	r7, r5
 8020368:	d407      	bmi.n	802037a <__kernel_rem_pio2+0x9a>
 802036a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802036e:	f7e0 f8e9 	bl	8000544 <__aeabi_i2d>
 8020372:	e8e6 0102 	strd	r0, r1, [r6], #8
 8020376:	3501      	adds	r5, #1
 8020378:	e7df      	b.n	802033a <__kernel_rem_pio2+0x5a>
 802037a:	ec51 0b18 	vmov	r0, r1, d8
 802037e:	e7f8      	b.n	8020372 <__kernel_rem_pio2+0x92>
 8020380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020384:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020388:	f7e0 f946 	bl	8000618 <__aeabi_dmul>
 802038c:	4602      	mov	r2, r0
 802038e:	460b      	mov	r3, r1
 8020390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020394:	f7df ff8a 	bl	80002ac <__adddf3>
 8020398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802039c:	3601      	adds	r6, #1
 802039e:	9b05      	ldr	r3, [sp, #20]
 80203a0:	429e      	cmp	r6, r3
 80203a2:	f1a7 0708 	sub.w	r7, r7, #8
 80203a6:	ddeb      	ble.n	8020380 <__kernel_rem_pio2+0xa0>
 80203a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80203ac:	f108 0801 	add.w	r8, r8, #1
 80203b0:	ecaa 7b02 	vstmia	sl!, {d7}
 80203b4:	3508      	adds	r5, #8
 80203b6:	e7ca      	b.n	802034e <__kernel_rem_pio2+0x6e>
 80203b8:	9b00      	ldr	r3, [sp, #0]
 80203ba:	f8dd 8000 	ldr.w	r8, [sp]
 80203be:	aa0c      	add	r2, sp, #48	@ 0x30
 80203c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80203c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80203c6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80203c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80203cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80203ce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80203d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203d4:	ab98      	add	r3, sp, #608	@ 0x260
 80203d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80203da:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80203de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80203e2:	ac0c      	add	r4, sp, #48	@ 0x30
 80203e4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80203e6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80203ea:	46a1      	mov	r9, r4
 80203ec:	46c2      	mov	sl, r8
 80203ee:	f1ba 0f00 	cmp.w	sl, #0
 80203f2:	f1a5 0508 	sub.w	r5, r5, #8
 80203f6:	dc77      	bgt.n	80204e8 <__kernel_rem_pio2+0x208>
 80203f8:	4658      	mov	r0, fp
 80203fa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80203fe:	f000 fd3b 	bl	8020e78 <scalbn>
 8020402:	ec57 6b10 	vmov	r6, r7, d0
 8020406:	2200      	movs	r2, #0
 8020408:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802040c:	4630      	mov	r0, r6
 802040e:	4639      	mov	r1, r7
 8020410:	f7e0 f902 	bl	8000618 <__aeabi_dmul>
 8020414:	ec41 0b10 	vmov	d0, r0, r1
 8020418:	f000 fe12 	bl	8021040 <floor>
 802041c:	4b75      	ldr	r3, [pc, #468]	@ (80205f4 <__kernel_rem_pio2+0x314>)
 802041e:	ec51 0b10 	vmov	r0, r1, d0
 8020422:	2200      	movs	r2, #0
 8020424:	f7e0 f8f8 	bl	8000618 <__aeabi_dmul>
 8020428:	4602      	mov	r2, r0
 802042a:	460b      	mov	r3, r1
 802042c:	4630      	mov	r0, r6
 802042e:	4639      	mov	r1, r7
 8020430:	f7df ff3a 	bl	80002a8 <__aeabi_dsub>
 8020434:	460f      	mov	r7, r1
 8020436:	4606      	mov	r6, r0
 8020438:	f7e0 fb9e 	bl	8000b78 <__aeabi_d2iz>
 802043c:	9002      	str	r0, [sp, #8]
 802043e:	f7e0 f881 	bl	8000544 <__aeabi_i2d>
 8020442:	4602      	mov	r2, r0
 8020444:	460b      	mov	r3, r1
 8020446:	4630      	mov	r0, r6
 8020448:	4639      	mov	r1, r7
 802044a:	f7df ff2d 	bl	80002a8 <__aeabi_dsub>
 802044e:	f1bb 0f00 	cmp.w	fp, #0
 8020452:	4606      	mov	r6, r0
 8020454:	460f      	mov	r7, r1
 8020456:	dd6c      	ble.n	8020532 <__kernel_rem_pio2+0x252>
 8020458:	f108 31ff 	add.w	r1, r8, #4294967295
 802045c:	ab0c      	add	r3, sp, #48	@ 0x30
 802045e:	9d02      	ldr	r5, [sp, #8]
 8020460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020464:	f1cb 0018 	rsb	r0, fp, #24
 8020468:	fa43 f200 	asr.w	r2, r3, r0
 802046c:	4415      	add	r5, r2
 802046e:	4082      	lsls	r2, r0
 8020470:	1a9b      	subs	r3, r3, r2
 8020472:	aa0c      	add	r2, sp, #48	@ 0x30
 8020474:	9502      	str	r5, [sp, #8]
 8020476:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 802047a:	f1cb 0217 	rsb	r2, fp, #23
 802047e:	fa43 f902 	asr.w	r9, r3, r2
 8020482:	f1b9 0f00 	cmp.w	r9, #0
 8020486:	dd64      	ble.n	8020552 <__kernel_rem_pio2+0x272>
 8020488:	9b02      	ldr	r3, [sp, #8]
 802048a:	2200      	movs	r2, #0
 802048c:	3301      	adds	r3, #1
 802048e:	9302      	str	r3, [sp, #8]
 8020490:	4615      	mov	r5, r2
 8020492:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8020496:	4590      	cmp	r8, r2
 8020498:	f300 80b8 	bgt.w	802060c <__kernel_rem_pio2+0x32c>
 802049c:	f1bb 0f00 	cmp.w	fp, #0
 80204a0:	dd07      	ble.n	80204b2 <__kernel_rem_pio2+0x1d2>
 80204a2:	f1bb 0f01 	cmp.w	fp, #1
 80204a6:	f000 80bf 	beq.w	8020628 <__kernel_rem_pio2+0x348>
 80204aa:	f1bb 0f02 	cmp.w	fp, #2
 80204ae:	f000 80c6 	beq.w	802063e <__kernel_rem_pio2+0x35e>
 80204b2:	f1b9 0f02 	cmp.w	r9, #2
 80204b6:	d14c      	bne.n	8020552 <__kernel_rem_pio2+0x272>
 80204b8:	4632      	mov	r2, r6
 80204ba:	463b      	mov	r3, r7
 80204bc:	494e      	ldr	r1, [pc, #312]	@ (80205f8 <__kernel_rem_pio2+0x318>)
 80204be:	2000      	movs	r0, #0
 80204c0:	f7df fef2 	bl	80002a8 <__aeabi_dsub>
 80204c4:	4606      	mov	r6, r0
 80204c6:	460f      	mov	r7, r1
 80204c8:	2d00      	cmp	r5, #0
 80204ca:	d042      	beq.n	8020552 <__kernel_rem_pio2+0x272>
 80204cc:	4658      	mov	r0, fp
 80204ce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80205e8 <__kernel_rem_pio2+0x308>
 80204d2:	f000 fcd1 	bl	8020e78 <scalbn>
 80204d6:	4630      	mov	r0, r6
 80204d8:	4639      	mov	r1, r7
 80204da:	ec53 2b10 	vmov	r2, r3, d0
 80204de:	f7df fee3 	bl	80002a8 <__aeabi_dsub>
 80204e2:	4606      	mov	r6, r0
 80204e4:	460f      	mov	r7, r1
 80204e6:	e034      	b.n	8020552 <__kernel_rem_pio2+0x272>
 80204e8:	4b44      	ldr	r3, [pc, #272]	@ (80205fc <__kernel_rem_pio2+0x31c>)
 80204ea:	2200      	movs	r2, #0
 80204ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80204f0:	f7e0 f892 	bl	8000618 <__aeabi_dmul>
 80204f4:	f7e0 fb40 	bl	8000b78 <__aeabi_d2iz>
 80204f8:	f7e0 f824 	bl	8000544 <__aeabi_i2d>
 80204fc:	4b40      	ldr	r3, [pc, #256]	@ (8020600 <__kernel_rem_pio2+0x320>)
 80204fe:	2200      	movs	r2, #0
 8020500:	4606      	mov	r6, r0
 8020502:	460f      	mov	r7, r1
 8020504:	f7e0 f888 	bl	8000618 <__aeabi_dmul>
 8020508:	4602      	mov	r2, r0
 802050a:	460b      	mov	r3, r1
 802050c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020510:	f7df feca 	bl	80002a8 <__aeabi_dsub>
 8020514:	f7e0 fb30 	bl	8000b78 <__aeabi_d2iz>
 8020518:	e9d5 2300 	ldrd	r2, r3, [r5]
 802051c:	f849 0b04 	str.w	r0, [r9], #4
 8020520:	4639      	mov	r1, r7
 8020522:	4630      	mov	r0, r6
 8020524:	f7df fec2 	bl	80002ac <__adddf3>
 8020528:	f10a 3aff 	add.w	sl, sl, #4294967295
 802052c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020530:	e75d      	b.n	80203ee <__kernel_rem_pio2+0x10e>
 8020532:	d107      	bne.n	8020544 <__kernel_rem_pio2+0x264>
 8020534:	f108 33ff 	add.w	r3, r8, #4294967295
 8020538:	aa0c      	add	r2, sp, #48	@ 0x30
 802053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802053e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8020542:	e79e      	b.n	8020482 <__kernel_rem_pio2+0x1a2>
 8020544:	4b2f      	ldr	r3, [pc, #188]	@ (8020604 <__kernel_rem_pio2+0x324>)
 8020546:	2200      	movs	r2, #0
 8020548:	f7e0 faec 	bl	8000b24 <__aeabi_dcmpge>
 802054c:	2800      	cmp	r0, #0
 802054e:	d143      	bne.n	80205d8 <__kernel_rem_pio2+0x2f8>
 8020550:	4681      	mov	r9, r0
 8020552:	2200      	movs	r2, #0
 8020554:	2300      	movs	r3, #0
 8020556:	4630      	mov	r0, r6
 8020558:	4639      	mov	r1, r7
 802055a:	f7e0 fac5 	bl	8000ae8 <__aeabi_dcmpeq>
 802055e:	2800      	cmp	r0, #0
 8020560:	f000 80bf 	beq.w	80206e2 <__kernel_rem_pio2+0x402>
 8020564:	f108 33ff 	add.w	r3, r8, #4294967295
 8020568:	2200      	movs	r2, #0
 802056a:	9900      	ldr	r1, [sp, #0]
 802056c:	428b      	cmp	r3, r1
 802056e:	da6e      	bge.n	802064e <__kernel_rem_pio2+0x36e>
 8020570:	2a00      	cmp	r2, #0
 8020572:	f000 8089 	beq.w	8020688 <__kernel_rem_pio2+0x3a8>
 8020576:	f108 38ff 	add.w	r8, r8, #4294967295
 802057a:	ab0c      	add	r3, sp, #48	@ 0x30
 802057c:	f1ab 0b18 	sub.w	fp, fp, #24
 8020580:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8020584:	2b00      	cmp	r3, #0
 8020586:	d0f6      	beq.n	8020576 <__kernel_rem_pio2+0x296>
 8020588:	4658      	mov	r0, fp
 802058a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80205e8 <__kernel_rem_pio2+0x308>
 802058e:	f000 fc73 	bl	8020e78 <scalbn>
 8020592:	f108 0301 	add.w	r3, r8, #1
 8020596:	00da      	lsls	r2, r3, #3
 8020598:	9205      	str	r2, [sp, #20]
 802059a:	ec55 4b10 	vmov	r4, r5, d0
 802059e:	aa70      	add	r2, sp, #448	@ 0x1c0
 80205a0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80205fc <__kernel_rem_pio2+0x31c>
 80205a4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80205a8:	4646      	mov	r6, r8
 80205aa:	f04f 0a00 	mov.w	sl, #0
 80205ae:	2e00      	cmp	r6, #0
 80205b0:	f280 80cf 	bge.w	8020752 <__kernel_rem_pio2+0x472>
 80205b4:	4644      	mov	r4, r8
 80205b6:	2c00      	cmp	r4, #0
 80205b8:	f2c0 80fd 	blt.w	80207b6 <__kernel_rem_pio2+0x4d6>
 80205bc:	4b12      	ldr	r3, [pc, #72]	@ (8020608 <__kernel_rem_pio2+0x328>)
 80205be:	461f      	mov	r7, r3
 80205c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80205c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80205c6:	9306      	str	r3, [sp, #24]
 80205c8:	f04f 0a00 	mov.w	sl, #0
 80205cc:	f04f 0b00 	mov.w	fp, #0
 80205d0:	2600      	movs	r6, #0
 80205d2:	eba8 0504 	sub.w	r5, r8, r4
 80205d6:	e0e2      	b.n	802079e <__kernel_rem_pio2+0x4be>
 80205d8:	f04f 0902 	mov.w	r9, #2
 80205dc:	e754      	b.n	8020488 <__kernel_rem_pio2+0x1a8>
 80205de:	bf00      	nop
	...
 80205ec:	3ff00000 	.word	0x3ff00000
 80205f0:	08024da8 	.word	0x08024da8
 80205f4:	40200000 	.word	0x40200000
 80205f8:	3ff00000 	.word	0x3ff00000
 80205fc:	3e700000 	.word	0x3e700000
 8020600:	41700000 	.word	0x41700000
 8020604:	3fe00000 	.word	0x3fe00000
 8020608:	08024d68 	.word	0x08024d68
 802060c:	f854 3b04 	ldr.w	r3, [r4], #4
 8020610:	b945      	cbnz	r5, 8020624 <__kernel_rem_pio2+0x344>
 8020612:	b123      	cbz	r3, 802061e <__kernel_rem_pio2+0x33e>
 8020614:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8020618:	f844 3c04 	str.w	r3, [r4, #-4]
 802061c:	2301      	movs	r3, #1
 802061e:	3201      	adds	r2, #1
 8020620:	461d      	mov	r5, r3
 8020622:	e738      	b.n	8020496 <__kernel_rem_pio2+0x1b6>
 8020624:	1acb      	subs	r3, r1, r3
 8020626:	e7f7      	b.n	8020618 <__kernel_rem_pio2+0x338>
 8020628:	f108 32ff 	add.w	r2, r8, #4294967295
 802062c:	ab0c      	add	r3, sp, #48	@ 0x30
 802062e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020632:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8020636:	a90c      	add	r1, sp, #48	@ 0x30
 8020638:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802063c:	e739      	b.n	80204b2 <__kernel_rem_pio2+0x1d2>
 802063e:	f108 32ff 	add.w	r2, r8, #4294967295
 8020642:	ab0c      	add	r3, sp, #48	@ 0x30
 8020644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020648:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802064c:	e7f3      	b.n	8020636 <__kernel_rem_pio2+0x356>
 802064e:	a90c      	add	r1, sp, #48	@ 0x30
 8020650:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8020654:	3b01      	subs	r3, #1
 8020656:	430a      	orrs	r2, r1
 8020658:	e787      	b.n	802056a <__kernel_rem_pio2+0x28a>
 802065a:	3401      	adds	r4, #1
 802065c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8020660:	2a00      	cmp	r2, #0
 8020662:	d0fa      	beq.n	802065a <__kernel_rem_pio2+0x37a>
 8020664:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020666:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 802066a:	eb0d 0503 	add.w	r5, sp, r3
 802066e:	9b06      	ldr	r3, [sp, #24]
 8020670:	aa20      	add	r2, sp, #128	@ 0x80
 8020672:	4443      	add	r3, r8
 8020674:	f108 0701 	add.w	r7, r8, #1
 8020678:	3d98      	subs	r5, #152	@ 0x98
 802067a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 802067e:	4444      	add	r4, r8
 8020680:	42bc      	cmp	r4, r7
 8020682:	da04      	bge.n	802068e <__kernel_rem_pio2+0x3ae>
 8020684:	46a0      	mov	r8, r4
 8020686:	e6a2      	b.n	80203ce <__kernel_rem_pio2+0xee>
 8020688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802068a:	2401      	movs	r4, #1
 802068c:	e7e6      	b.n	802065c <__kernel_rem_pio2+0x37c>
 802068e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020690:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8020694:	f7df ff56 	bl	8000544 <__aeabi_i2d>
 8020698:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8020960 <__kernel_rem_pio2+0x680>
 802069c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80206a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80206a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80206a8:	46b2      	mov	sl, r6
 80206aa:	f04f 0800 	mov.w	r8, #0
 80206ae:	9b05      	ldr	r3, [sp, #20]
 80206b0:	4598      	cmp	r8, r3
 80206b2:	dd05      	ble.n	80206c0 <__kernel_rem_pio2+0x3e0>
 80206b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80206b8:	3701      	adds	r7, #1
 80206ba:	eca5 7b02 	vstmia	r5!, {d7}
 80206be:	e7df      	b.n	8020680 <__kernel_rem_pio2+0x3a0>
 80206c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80206c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80206c8:	f7df ffa6 	bl	8000618 <__aeabi_dmul>
 80206cc:	4602      	mov	r2, r0
 80206ce:	460b      	mov	r3, r1
 80206d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80206d4:	f7df fdea 	bl	80002ac <__adddf3>
 80206d8:	f108 0801 	add.w	r8, r8, #1
 80206dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80206e0:	e7e5      	b.n	80206ae <__kernel_rem_pio2+0x3ce>
 80206e2:	f1cb 0000 	rsb	r0, fp, #0
 80206e6:	ec47 6b10 	vmov	d0, r6, r7
 80206ea:	f000 fbc5 	bl	8020e78 <scalbn>
 80206ee:	ec55 4b10 	vmov	r4, r5, d0
 80206f2:	4b9d      	ldr	r3, [pc, #628]	@ (8020968 <__kernel_rem_pio2+0x688>)
 80206f4:	2200      	movs	r2, #0
 80206f6:	4620      	mov	r0, r4
 80206f8:	4629      	mov	r1, r5
 80206fa:	f7e0 fa13 	bl	8000b24 <__aeabi_dcmpge>
 80206fe:	b300      	cbz	r0, 8020742 <__kernel_rem_pio2+0x462>
 8020700:	4b9a      	ldr	r3, [pc, #616]	@ (802096c <__kernel_rem_pio2+0x68c>)
 8020702:	2200      	movs	r2, #0
 8020704:	4620      	mov	r0, r4
 8020706:	4629      	mov	r1, r5
 8020708:	f7df ff86 	bl	8000618 <__aeabi_dmul>
 802070c:	f7e0 fa34 	bl	8000b78 <__aeabi_d2iz>
 8020710:	4606      	mov	r6, r0
 8020712:	f7df ff17 	bl	8000544 <__aeabi_i2d>
 8020716:	4b94      	ldr	r3, [pc, #592]	@ (8020968 <__kernel_rem_pio2+0x688>)
 8020718:	2200      	movs	r2, #0
 802071a:	f7df ff7d 	bl	8000618 <__aeabi_dmul>
 802071e:	460b      	mov	r3, r1
 8020720:	4602      	mov	r2, r0
 8020722:	4629      	mov	r1, r5
 8020724:	4620      	mov	r0, r4
 8020726:	f7df fdbf 	bl	80002a8 <__aeabi_dsub>
 802072a:	f7e0 fa25 	bl	8000b78 <__aeabi_d2iz>
 802072e:	ab0c      	add	r3, sp, #48	@ 0x30
 8020730:	f10b 0b18 	add.w	fp, fp, #24
 8020734:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8020738:	f108 0801 	add.w	r8, r8, #1
 802073c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8020740:	e722      	b.n	8020588 <__kernel_rem_pio2+0x2a8>
 8020742:	4620      	mov	r0, r4
 8020744:	4629      	mov	r1, r5
 8020746:	f7e0 fa17 	bl	8000b78 <__aeabi_d2iz>
 802074a:	ab0c      	add	r3, sp, #48	@ 0x30
 802074c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8020750:	e71a      	b.n	8020588 <__kernel_rem_pio2+0x2a8>
 8020752:	ab0c      	add	r3, sp, #48	@ 0x30
 8020754:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8020758:	f7df fef4 	bl	8000544 <__aeabi_i2d>
 802075c:	4622      	mov	r2, r4
 802075e:	462b      	mov	r3, r5
 8020760:	f7df ff5a 	bl	8000618 <__aeabi_dmul>
 8020764:	4652      	mov	r2, sl
 8020766:	e967 0102 	strd	r0, r1, [r7, #-8]!
 802076a:	465b      	mov	r3, fp
 802076c:	4620      	mov	r0, r4
 802076e:	4629      	mov	r1, r5
 8020770:	f7df ff52 	bl	8000618 <__aeabi_dmul>
 8020774:	3e01      	subs	r6, #1
 8020776:	4604      	mov	r4, r0
 8020778:	460d      	mov	r5, r1
 802077a:	e718      	b.n	80205ae <__kernel_rem_pio2+0x2ce>
 802077c:	9906      	ldr	r1, [sp, #24]
 802077e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8020782:	9106      	str	r1, [sp, #24]
 8020784:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8020788:	f7df ff46 	bl	8000618 <__aeabi_dmul>
 802078c:	4602      	mov	r2, r0
 802078e:	460b      	mov	r3, r1
 8020790:	4650      	mov	r0, sl
 8020792:	4659      	mov	r1, fp
 8020794:	f7df fd8a 	bl	80002ac <__adddf3>
 8020798:	3601      	adds	r6, #1
 802079a:	4682      	mov	sl, r0
 802079c:	468b      	mov	fp, r1
 802079e:	9b00      	ldr	r3, [sp, #0]
 80207a0:	429e      	cmp	r6, r3
 80207a2:	dc01      	bgt.n	80207a8 <__kernel_rem_pio2+0x4c8>
 80207a4:	42b5      	cmp	r5, r6
 80207a6:	dae9      	bge.n	802077c <__kernel_rem_pio2+0x49c>
 80207a8:	ab48      	add	r3, sp, #288	@ 0x120
 80207aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80207ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80207b2:	3c01      	subs	r4, #1
 80207b4:	e6ff      	b.n	80205b6 <__kernel_rem_pio2+0x2d6>
 80207b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80207b8:	2b02      	cmp	r3, #2
 80207ba:	dc0b      	bgt.n	80207d4 <__kernel_rem_pio2+0x4f4>
 80207bc:	2b00      	cmp	r3, #0
 80207be:	dc39      	bgt.n	8020834 <__kernel_rem_pio2+0x554>
 80207c0:	d05d      	beq.n	802087e <__kernel_rem_pio2+0x59e>
 80207c2:	9b02      	ldr	r3, [sp, #8]
 80207c4:	f003 0007 	and.w	r0, r3, #7
 80207c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80207cc:	ecbd 8b02 	vpop	{d8}
 80207d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80207d6:	2b03      	cmp	r3, #3
 80207d8:	d1f3      	bne.n	80207c2 <__kernel_rem_pio2+0x4e2>
 80207da:	9b05      	ldr	r3, [sp, #20]
 80207dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80207e0:	eb0d 0403 	add.w	r4, sp, r3
 80207e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80207e8:	4625      	mov	r5, r4
 80207ea:	46c2      	mov	sl, r8
 80207ec:	f1ba 0f00 	cmp.w	sl, #0
 80207f0:	f1a5 0508 	sub.w	r5, r5, #8
 80207f4:	dc6b      	bgt.n	80208ce <__kernel_rem_pio2+0x5ee>
 80207f6:	4645      	mov	r5, r8
 80207f8:	2d01      	cmp	r5, #1
 80207fa:	f1a4 0408 	sub.w	r4, r4, #8
 80207fe:	f300 8087 	bgt.w	8020910 <__kernel_rem_pio2+0x630>
 8020802:	9c05      	ldr	r4, [sp, #20]
 8020804:	ab48      	add	r3, sp, #288	@ 0x120
 8020806:	441c      	add	r4, r3
 8020808:	2000      	movs	r0, #0
 802080a:	2100      	movs	r1, #0
 802080c:	f1b8 0f01 	cmp.w	r8, #1
 8020810:	f300 809c 	bgt.w	802094c <__kernel_rem_pio2+0x66c>
 8020814:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8020818:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 802081c:	f1b9 0f00 	cmp.w	r9, #0
 8020820:	f040 80a6 	bne.w	8020970 <__kernel_rem_pio2+0x690>
 8020824:	9b04      	ldr	r3, [sp, #16]
 8020826:	e9c3 7800 	strd	r7, r8, [r3]
 802082a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 802082e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8020832:	e7c6      	b.n	80207c2 <__kernel_rem_pio2+0x4e2>
 8020834:	9d05      	ldr	r5, [sp, #20]
 8020836:	ab48      	add	r3, sp, #288	@ 0x120
 8020838:	441d      	add	r5, r3
 802083a:	4644      	mov	r4, r8
 802083c:	2000      	movs	r0, #0
 802083e:	2100      	movs	r1, #0
 8020840:	2c00      	cmp	r4, #0
 8020842:	da35      	bge.n	80208b0 <__kernel_rem_pio2+0x5d0>
 8020844:	f1b9 0f00 	cmp.w	r9, #0
 8020848:	d038      	beq.n	80208bc <__kernel_rem_pio2+0x5dc>
 802084a:	4602      	mov	r2, r0
 802084c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020850:	9c04      	ldr	r4, [sp, #16]
 8020852:	e9c4 2300 	strd	r2, r3, [r4]
 8020856:	4602      	mov	r2, r0
 8020858:	460b      	mov	r3, r1
 802085a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 802085e:	f7df fd23 	bl	80002a8 <__aeabi_dsub>
 8020862:	ad4a      	add	r5, sp, #296	@ 0x128
 8020864:	2401      	movs	r4, #1
 8020866:	45a0      	cmp	r8, r4
 8020868:	da2b      	bge.n	80208c2 <__kernel_rem_pio2+0x5e2>
 802086a:	f1b9 0f00 	cmp.w	r9, #0
 802086e:	d002      	beq.n	8020876 <__kernel_rem_pio2+0x596>
 8020870:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020874:	4619      	mov	r1, r3
 8020876:	9b04      	ldr	r3, [sp, #16]
 8020878:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802087c:	e7a1      	b.n	80207c2 <__kernel_rem_pio2+0x4e2>
 802087e:	9c05      	ldr	r4, [sp, #20]
 8020880:	ab48      	add	r3, sp, #288	@ 0x120
 8020882:	441c      	add	r4, r3
 8020884:	2000      	movs	r0, #0
 8020886:	2100      	movs	r1, #0
 8020888:	f1b8 0f00 	cmp.w	r8, #0
 802088c:	da09      	bge.n	80208a2 <__kernel_rem_pio2+0x5c2>
 802088e:	f1b9 0f00 	cmp.w	r9, #0
 8020892:	d002      	beq.n	802089a <__kernel_rem_pio2+0x5ba>
 8020894:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020898:	4619      	mov	r1, r3
 802089a:	9b04      	ldr	r3, [sp, #16]
 802089c:	e9c3 0100 	strd	r0, r1, [r3]
 80208a0:	e78f      	b.n	80207c2 <__kernel_rem_pio2+0x4e2>
 80208a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80208a6:	f7df fd01 	bl	80002ac <__adddf3>
 80208aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80208ae:	e7eb      	b.n	8020888 <__kernel_rem_pio2+0x5a8>
 80208b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80208b4:	f7df fcfa 	bl	80002ac <__adddf3>
 80208b8:	3c01      	subs	r4, #1
 80208ba:	e7c1      	b.n	8020840 <__kernel_rem_pio2+0x560>
 80208bc:	4602      	mov	r2, r0
 80208be:	460b      	mov	r3, r1
 80208c0:	e7c6      	b.n	8020850 <__kernel_rem_pio2+0x570>
 80208c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80208c6:	f7df fcf1 	bl	80002ac <__adddf3>
 80208ca:	3401      	adds	r4, #1
 80208cc:	e7cb      	b.n	8020866 <__kernel_rem_pio2+0x586>
 80208ce:	ed95 7b00 	vldr	d7, [r5]
 80208d2:	ed8d 7b00 	vstr	d7, [sp]
 80208d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80208da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80208de:	ec53 2b17 	vmov	r2, r3, d7
 80208e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80208e6:	f7df fce1 	bl	80002ac <__adddf3>
 80208ea:	4602      	mov	r2, r0
 80208ec:	460b      	mov	r3, r1
 80208ee:	4606      	mov	r6, r0
 80208f0:	460f      	mov	r7, r1
 80208f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80208f6:	f7df fcd7 	bl	80002a8 <__aeabi_dsub>
 80208fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80208fe:	f7df fcd5 	bl	80002ac <__adddf3>
 8020902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020906:	e9c5 0102 	strd	r0, r1, [r5, #8]
 802090a:	e9c5 6700 	strd	r6, r7, [r5]
 802090e:	e76d      	b.n	80207ec <__kernel_rem_pio2+0x50c>
 8020910:	ed94 7b00 	vldr	d7, [r4]
 8020914:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8020918:	ec51 0b17 	vmov	r0, r1, d7
 802091c:	4652      	mov	r2, sl
 802091e:	465b      	mov	r3, fp
 8020920:	ed8d 7b00 	vstr	d7, [sp]
 8020924:	f7df fcc2 	bl	80002ac <__adddf3>
 8020928:	4602      	mov	r2, r0
 802092a:	460b      	mov	r3, r1
 802092c:	4606      	mov	r6, r0
 802092e:	460f      	mov	r7, r1
 8020930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020934:	f7df fcb8 	bl	80002a8 <__aeabi_dsub>
 8020938:	4652      	mov	r2, sl
 802093a:	465b      	mov	r3, fp
 802093c:	f7df fcb6 	bl	80002ac <__adddf3>
 8020940:	3d01      	subs	r5, #1
 8020942:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020946:	e9c4 6700 	strd	r6, r7, [r4]
 802094a:	e755      	b.n	80207f8 <__kernel_rem_pio2+0x518>
 802094c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020950:	f7df fcac 	bl	80002ac <__adddf3>
 8020954:	f108 38ff 	add.w	r8, r8, #4294967295
 8020958:	e758      	b.n	802080c <__kernel_rem_pio2+0x52c>
 802095a:	bf00      	nop
 802095c:	f3af 8000 	nop.w
	...
 8020968:	41700000 	.word	0x41700000
 802096c:	3e700000 	.word	0x3e700000
 8020970:	9b04      	ldr	r3, [sp, #16]
 8020972:	9a04      	ldr	r2, [sp, #16]
 8020974:	601f      	str	r7, [r3, #0]
 8020976:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 802097a:	605c      	str	r4, [r3, #4]
 802097c:	609d      	str	r5, [r3, #8]
 802097e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8020982:	60d3      	str	r3, [r2, #12]
 8020984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020988:	6110      	str	r0, [r2, #16]
 802098a:	6153      	str	r3, [r2, #20]
 802098c:	e719      	b.n	80207c2 <__kernel_rem_pio2+0x4e2>
 802098e:	bf00      	nop

08020990 <__kernel_rem_pio2f>:
 8020990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020994:	ed2d 8b04 	vpush	{d8-d9}
 8020998:	b0d9      	sub	sp, #356	@ 0x164
 802099a:	4690      	mov	r8, r2
 802099c:	9001      	str	r0, [sp, #4]
 802099e:	4ab9      	ldr	r2, [pc, #740]	@ (8020c84 <__kernel_rem_pio2f+0x2f4>)
 80209a0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80209a2:	f118 0f04 	cmn.w	r8, #4
 80209a6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80209aa:	460f      	mov	r7, r1
 80209ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80209b0:	db27      	blt.n	8020a02 <__kernel_rem_pio2f+0x72>
 80209b2:	f1b8 0203 	subs.w	r2, r8, #3
 80209b6:	bf48      	it	mi
 80209b8:	f108 0204 	addmi.w	r2, r8, #4
 80209bc:	10d2      	asrs	r2, r2, #3
 80209be:	1c55      	adds	r5, r2, #1
 80209c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80209c2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 80209c6:	00e8      	lsls	r0, r5, #3
 80209c8:	eba2 060b 	sub.w	r6, r2, fp
 80209cc:	9002      	str	r0, [sp, #8]
 80209ce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80209d2:	eb0a 0c0b 	add.w	ip, sl, fp
 80209d6:	ac1c      	add	r4, sp, #112	@ 0x70
 80209d8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80209dc:	2000      	movs	r0, #0
 80209de:	4560      	cmp	r0, ip
 80209e0:	dd11      	ble.n	8020a06 <__kernel_rem_pio2f+0x76>
 80209e2:	a91c      	add	r1, sp, #112	@ 0x70
 80209e4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80209e8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80209ec:	f04f 0c00 	mov.w	ip, #0
 80209f0:	45d4      	cmp	ip, sl
 80209f2:	dc27      	bgt.n	8020a44 <__kernel_rem_pio2f+0xb4>
 80209f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209f8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 80209fc:	4606      	mov	r6, r0
 80209fe:	2400      	movs	r4, #0
 8020a00:	e016      	b.n	8020a30 <__kernel_rem_pio2f+0xa0>
 8020a02:	2200      	movs	r2, #0
 8020a04:	e7db      	b.n	80209be <__kernel_rem_pio2f+0x2e>
 8020a06:	42c6      	cmn	r6, r0
 8020a08:	bf5d      	ittte	pl
 8020a0a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8020a0e:	ee07 1a90 	vmovpl	s15, r1
 8020a12:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8020a16:	eef0 7a47 	vmovmi.f32	s15, s14
 8020a1a:	ece4 7a01 	vstmia	r4!, {s15}
 8020a1e:	3001      	adds	r0, #1
 8020a20:	e7dd      	b.n	80209de <__kernel_rem_pio2f+0x4e>
 8020a22:	ecfe 6a01 	vldmia	lr!, {s13}
 8020a26:	ed96 7a00 	vldr	s14, [r6]
 8020a2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020a2e:	3401      	adds	r4, #1
 8020a30:	455c      	cmp	r4, fp
 8020a32:	f1a6 0604 	sub.w	r6, r6, #4
 8020a36:	ddf4      	ble.n	8020a22 <__kernel_rem_pio2f+0x92>
 8020a38:	ece9 7a01 	vstmia	r9!, {s15}
 8020a3c:	f10c 0c01 	add.w	ip, ip, #1
 8020a40:	3004      	adds	r0, #4
 8020a42:	e7d5      	b.n	80209f0 <__kernel_rem_pio2f+0x60>
 8020a44:	a908      	add	r1, sp, #32
 8020a46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020a4a:	9104      	str	r1, [sp, #16]
 8020a4c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8020a4e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8020c90 <__kernel_rem_pio2f+0x300>
 8020a52:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8020c8c <__kernel_rem_pio2f+0x2fc>
 8020a56:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020a5a:	9203      	str	r2, [sp, #12]
 8020a5c:	4654      	mov	r4, sl
 8020a5e:	00a2      	lsls	r2, r4, #2
 8020a60:	9205      	str	r2, [sp, #20]
 8020a62:	aa58      	add	r2, sp, #352	@ 0x160
 8020a64:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8020a68:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8020a6c:	a944      	add	r1, sp, #272	@ 0x110
 8020a6e:	aa08      	add	r2, sp, #32
 8020a70:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8020a74:	4694      	mov	ip, r2
 8020a76:	4626      	mov	r6, r4
 8020a78:	2e00      	cmp	r6, #0
 8020a7a:	f1a0 0004 	sub.w	r0, r0, #4
 8020a7e:	dc4c      	bgt.n	8020b1a <__kernel_rem_pio2f+0x18a>
 8020a80:	4628      	mov	r0, r5
 8020a82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8020a86:	f000 fa75 	bl	8020f74 <scalbnf>
 8020a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8020a8e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8020a92:	ee28 0a00 	vmul.f32	s0, s16, s0
 8020a96:	f000 fb4f 	bl	8021138 <floorf>
 8020a9a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8020a9e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8020aa2:	2d00      	cmp	r5, #0
 8020aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020aa8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8020aac:	ee17 9a90 	vmov	r9, s15
 8020ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ab4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8020ab8:	dd41      	ble.n	8020b3e <__kernel_rem_pio2f+0x1ae>
 8020aba:	f104 3cff 	add.w	ip, r4, #4294967295
 8020abe:	a908      	add	r1, sp, #32
 8020ac0:	f1c5 0e08 	rsb	lr, r5, #8
 8020ac4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8020ac8:	fa46 f00e 	asr.w	r0, r6, lr
 8020acc:	4481      	add	r9, r0
 8020ace:	fa00 f00e 	lsl.w	r0, r0, lr
 8020ad2:	1a36      	subs	r6, r6, r0
 8020ad4:	f1c5 0007 	rsb	r0, r5, #7
 8020ad8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8020adc:	4106      	asrs	r6, r0
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	dd3c      	ble.n	8020b5c <__kernel_rem_pio2f+0x1cc>
 8020ae2:	f04f 0e00 	mov.w	lr, #0
 8020ae6:	f109 0901 	add.w	r9, r9, #1
 8020aea:	4670      	mov	r0, lr
 8020aec:	4574      	cmp	r4, lr
 8020aee:	dc68      	bgt.n	8020bc2 <__kernel_rem_pio2f+0x232>
 8020af0:	2d00      	cmp	r5, #0
 8020af2:	dd03      	ble.n	8020afc <__kernel_rem_pio2f+0x16c>
 8020af4:	2d01      	cmp	r5, #1
 8020af6:	d074      	beq.n	8020be2 <__kernel_rem_pio2f+0x252>
 8020af8:	2d02      	cmp	r5, #2
 8020afa:	d07d      	beq.n	8020bf8 <__kernel_rem_pio2f+0x268>
 8020afc:	2e02      	cmp	r6, #2
 8020afe:	d12d      	bne.n	8020b5c <__kernel_rem_pio2f+0x1cc>
 8020b00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020b04:	ee30 8a48 	vsub.f32	s16, s0, s16
 8020b08:	b340      	cbz	r0, 8020b5c <__kernel_rem_pio2f+0x1cc>
 8020b0a:	4628      	mov	r0, r5
 8020b0c:	9306      	str	r3, [sp, #24]
 8020b0e:	f000 fa31 	bl	8020f74 <scalbnf>
 8020b12:	9b06      	ldr	r3, [sp, #24]
 8020b14:	ee38 8a40 	vsub.f32	s16, s16, s0
 8020b18:	e020      	b.n	8020b5c <__kernel_rem_pio2f+0x1cc>
 8020b1a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8020b1e:	3e01      	subs	r6, #1
 8020b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b28:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8020b2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020b30:	ecac 0a01 	vstmia	ip!, {s0}
 8020b34:	ed90 0a00 	vldr	s0, [r0]
 8020b38:	ee37 0a80 	vadd.f32	s0, s15, s0
 8020b3c:	e79c      	b.n	8020a78 <__kernel_rem_pio2f+0xe8>
 8020b3e:	d105      	bne.n	8020b4c <__kernel_rem_pio2f+0x1bc>
 8020b40:	1e60      	subs	r0, r4, #1
 8020b42:	a908      	add	r1, sp, #32
 8020b44:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8020b48:	11f6      	asrs	r6, r6, #7
 8020b4a:	e7c8      	b.n	8020ade <__kernel_rem_pio2f+0x14e>
 8020b4c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020b50:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8020b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b58:	da31      	bge.n	8020bbe <__kernel_rem_pio2f+0x22e>
 8020b5a:	2600      	movs	r6, #0
 8020b5c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8020b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b64:	f040 8098 	bne.w	8020c98 <__kernel_rem_pio2f+0x308>
 8020b68:	1e60      	subs	r0, r4, #1
 8020b6a:	2200      	movs	r2, #0
 8020b6c:	4550      	cmp	r0, sl
 8020b6e:	da4b      	bge.n	8020c08 <__kernel_rem_pio2f+0x278>
 8020b70:	2a00      	cmp	r2, #0
 8020b72:	d065      	beq.n	8020c40 <__kernel_rem_pio2f+0x2b0>
 8020b74:	3c01      	subs	r4, #1
 8020b76:	ab08      	add	r3, sp, #32
 8020b78:	3d08      	subs	r5, #8
 8020b7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d0f8      	beq.n	8020b74 <__kernel_rem_pio2f+0x1e4>
 8020b82:	4628      	mov	r0, r5
 8020b84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020b88:	f000 f9f4 	bl	8020f74 <scalbnf>
 8020b8c:	1c63      	adds	r3, r4, #1
 8020b8e:	aa44      	add	r2, sp, #272	@ 0x110
 8020b90:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8020c90 <__kernel_rem_pio2f+0x300>
 8020b94:	0099      	lsls	r1, r3, #2
 8020b96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020b9a:	4623      	mov	r3, r4
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	f280 80a9 	bge.w	8020cf4 <__kernel_rem_pio2f+0x364>
 8020ba2:	4623      	mov	r3, r4
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	f2c0 80c7 	blt.w	8020d38 <__kernel_rem_pio2f+0x3a8>
 8020baa:	aa44      	add	r2, sp, #272	@ 0x110
 8020bac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020bb0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8020c88 <__kernel_rem_pio2f+0x2f8>
 8020bb4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 8020bb8:	2000      	movs	r0, #0
 8020bba:	1ae2      	subs	r2, r4, r3
 8020bbc:	e0b1      	b.n	8020d22 <__kernel_rem_pio2f+0x392>
 8020bbe:	2602      	movs	r6, #2
 8020bc0:	e78f      	b.n	8020ae2 <__kernel_rem_pio2f+0x152>
 8020bc2:	f852 1b04 	ldr.w	r1, [r2], #4
 8020bc6:	b948      	cbnz	r0, 8020bdc <__kernel_rem_pio2f+0x24c>
 8020bc8:	b121      	cbz	r1, 8020bd4 <__kernel_rem_pio2f+0x244>
 8020bca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8020bce:	f842 1c04 	str.w	r1, [r2, #-4]
 8020bd2:	2101      	movs	r1, #1
 8020bd4:	f10e 0e01 	add.w	lr, lr, #1
 8020bd8:	4608      	mov	r0, r1
 8020bda:	e787      	b.n	8020aec <__kernel_rem_pio2f+0x15c>
 8020bdc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8020be0:	e7f5      	b.n	8020bce <__kernel_rem_pio2f+0x23e>
 8020be2:	f104 3cff 	add.w	ip, r4, #4294967295
 8020be6:	aa08      	add	r2, sp, #32
 8020be8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8020bec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8020bf0:	a908      	add	r1, sp, #32
 8020bf2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8020bf6:	e781      	b.n	8020afc <__kernel_rem_pio2f+0x16c>
 8020bf8:	f104 3cff 	add.w	ip, r4, #4294967295
 8020bfc:	aa08      	add	r2, sp, #32
 8020bfe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8020c02:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020c06:	e7f3      	b.n	8020bf0 <__kernel_rem_pio2f+0x260>
 8020c08:	a908      	add	r1, sp, #32
 8020c0a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8020c0e:	3801      	subs	r0, #1
 8020c10:	430a      	orrs	r2, r1
 8020c12:	e7ab      	b.n	8020b6c <__kernel_rem_pio2f+0x1dc>
 8020c14:	3201      	adds	r2, #1
 8020c16:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8020c1a:	2e00      	cmp	r6, #0
 8020c1c:	d0fa      	beq.n	8020c14 <__kernel_rem_pio2f+0x284>
 8020c1e:	9905      	ldr	r1, [sp, #20]
 8020c20:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8020c24:	eb0d 0001 	add.w	r0, sp, r1
 8020c28:	18e6      	adds	r6, r4, r3
 8020c2a:	a91c      	add	r1, sp, #112	@ 0x70
 8020c2c:	f104 0c01 	add.w	ip, r4, #1
 8020c30:	384c      	subs	r0, #76	@ 0x4c
 8020c32:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8020c36:	4422      	add	r2, r4
 8020c38:	4562      	cmp	r2, ip
 8020c3a:	da04      	bge.n	8020c46 <__kernel_rem_pio2f+0x2b6>
 8020c3c:	4614      	mov	r4, r2
 8020c3e:	e70e      	b.n	8020a5e <__kernel_rem_pio2f+0xce>
 8020c40:	9804      	ldr	r0, [sp, #16]
 8020c42:	2201      	movs	r2, #1
 8020c44:	e7e7      	b.n	8020c16 <__kernel_rem_pio2f+0x286>
 8020c46:	9903      	ldr	r1, [sp, #12]
 8020c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020c4c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8020c50:	9105      	str	r1, [sp, #20]
 8020c52:	ee07 1a90 	vmov	s15, r1
 8020c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020c5a:	2400      	movs	r4, #0
 8020c5c:	ece6 7a01 	vstmia	r6!, {s15}
 8020c60:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 8020c64:	46b1      	mov	r9, r6
 8020c66:	455c      	cmp	r4, fp
 8020c68:	dd04      	ble.n	8020c74 <__kernel_rem_pio2f+0x2e4>
 8020c6a:	ece0 7a01 	vstmia	r0!, {s15}
 8020c6e:	f10c 0c01 	add.w	ip, ip, #1
 8020c72:	e7e1      	b.n	8020c38 <__kernel_rem_pio2f+0x2a8>
 8020c74:	ecfe 6a01 	vldmia	lr!, {s13}
 8020c78:	ed39 7a01 	vldmdb	r9!, {s14}
 8020c7c:	3401      	adds	r4, #1
 8020c7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020c82:	e7f0      	b.n	8020c66 <__kernel_rem_pio2f+0x2d6>
 8020c84:	08024de4 	.word	0x08024de4
 8020c88:	08024db8 	.word	0x08024db8
 8020c8c:	43800000 	.word	0x43800000
 8020c90:	3b800000 	.word	0x3b800000
 8020c94:	00000000 	.word	0x00000000
 8020c98:	9b02      	ldr	r3, [sp, #8]
 8020c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8020c9e:	eba3 0008 	sub.w	r0, r3, r8
 8020ca2:	f000 f967 	bl	8020f74 <scalbnf>
 8020ca6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8020c8c <__kernel_rem_pio2f+0x2fc>
 8020caa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8020cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cb2:	db19      	blt.n	8020ce8 <__kernel_rem_pio2f+0x358>
 8020cb4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8020c90 <__kernel_rem_pio2f+0x300>
 8020cb8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020cbc:	aa08      	add	r2, sp, #32
 8020cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020cc2:	3508      	adds	r5, #8
 8020cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020cc8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8020ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020cd0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020cd4:	ee10 3a10 	vmov	r3, s0
 8020cd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8020cdc:	ee17 3a90 	vmov	r3, s15
 8020ce0:	3401      	adds	r4, #1
 8020ce2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8020ce6:	e74c      	b.n	8020b82 <__kernel_rem_pio2f+0x1f2>
 8020ce8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020cec:	aa08      	add	r2, sp, #32
 8020cee:	ee10 3a10 	vmov	r3, s0
 8020cf2:	e7f6      	b.n	8020ce2 <__kernel_rem_pio2f+0x352>
 8020cf4:	a808      	add	r0, sp, #32
 8020cf6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8020cfa:	9001      	str	r0, [sp, #4]
 8020cfc:	ee07 0a90 	vmov	s15, r0
 8020d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020d04:	3b01      	subs	r3, #1
 8020d06:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020d0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020d0e:	ed62 7a01 	vstmdb	r2!, {s15}
 8020d12:	e743      	b.n	8020b9c <__kernel_rem_pio2f+0x20c>
 8020d14:	ecfc 6a01 	vldmia	ip!, {s13}
 8020d18:	ecb5 7a01 	vldmia	r5!, {s14}
 8020d1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020d20:	3001      	adds	r0, #1
 8020d22:	4550      	cmp	r0, sl
 8020d24:	dc01      	bgt.n	8020d2a <__kernel_rem_pio2f+0x39a>
 8020d26:	4282      	cmp	r2, r0
 8020d28:	daf4      	bge.n	8020d14 <__kernel_rem_pio2f+0x384>
 8020d2a:	a858      	add	r0, sp, #352	@ 0x160
 8020d2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8020d30:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8020d34:	3b01      	subs	r3, #1
 8020d36:	e735      	b.n	8020ba4 <__kernel_rem_pio2f+0x214>
 8020d38:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8020d3a:	2b02      	cmp	r3, #2
 8020d3c:	dc09      	bgt.n	8020d52 <__kernel_rem_pio2f+0x3c2>
 8020d3e:	2b00      	cmp	r3, #0
 8020d40:	dc2b      	bgt.n	8020d9a <__kernel_rem_pio2f+0x40a>
 8020d42:	d044      	beq.n	8020dce <__kernel_rem_pio2f+0x43e>
 8020d44:	f009 0007 	and.w	r0, r9, #7
 8020d48:	b059      	add	sp, #356	@ 0x164
 8020d4a:	ecbd 8b04 	vpop	{d8-d9}
 8020d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d52:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8020d54:	2b03      	cmp	r3, #3
 8020d56:	d1f5      	bne.n	8020d44 <__kernel_rem_pio2f+0x3b4>
 8020d58:	aa30      	add	r2, sp, #192	@ 0xc0
 8020d5a:	1f0b      	subs	r3, r1, #4
 8020d5c:	4413      	add	r3, r2
 8020d5e:	461a      	mov	r2, r3
 8020d60:	4620      	mov	r0, r4
 8020d62:	2800      	cmp	r0, #0
 8020d64:	f1a2 0204 	sub.w	r2, r2, #4
 8020d68:	dc52      	bgt.n	8020e10 <__kernel_rem_pio2f+0x480>
 8020d6a:	4622      	mov	r2, r4
 8020d6c:	2a01      	cmp	r2, #1
 8020d6e:	f1a3 0304 	sub.w	r3, r3, #4
 8020d72:	dc5d      	bgt.n	8020e30 <__kernel_rem_pio2f+0x4a0>
 8020d74:	ab30      	add	r3, sp, #192	@ 0xc0
 8020d76:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 8020d7a:	440b      	add	r3, r1
 8020d7c:	2c01      	cmp	r4, #1
 8020d7e:	dc67      	bgt.n	8020e50 <__kernel_rem_pio2f+0x4c0>
 8020d80:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8020d84:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8020d88:	2e00      	cmp	r6, #0
 8020d8a:	d167      	bne.n	8020e5c <__kernel_rem_pio2f+0x4cc>
 8020d8c:	edc7 6a00 	vstr	s13, [r7]
 8020d90:	ed87 7a01 	vstr	s14, [r7, #4]
 8020d94:	edc7 7a02 	vstr	s15, [r7, #8]
 8020d98:	e7d4      	b.n	8020d44 <__kernel_rem_pio2f+0x3b4>
 8020d9a:	ab30      	add	r3, sp, #192	@ 0xc0
 8020d9c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 8020da0:	440b      	add	r3, r1
 8020da2:	4622      	mov	r2, r4
 8020da4:	2a00      	cmp	r2, #0
 8020da6:	da24      	bge.n	8020df2 <__kernel_rem_pio2f+0x462>
 8020da8:	b34e      	cbz	r6, 8020dfe <__kernel_rem_pio2f+0x46e>
 8020daa:	eef1 7a47 	vneg.f32	s15, s14
 8020dae:	edc7 7a00 	vstr	s15, [r7]
 8020db2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8020db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020dba:	aa31      	add	r2, sp, #196	@ 0xc4
 8020dbc:	2301      	movs	r3, #1
 8020dbe:	429c      	cmp	r4, r3
 8020dc0:	da20      	bge.n	8020e04 <__kernel_rem_pio2f+0x474>
 8020dc2:	b10e      	cbz	r6, 8020dc8 <__kernel_rem_pio2f+0x438>
 8020dc4:	eef1 7a67 	vneg.f32	s15, s15
 8020dc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8020dcc:	e7ba      	b.n	8020d44 <__kernel_rem_pio2f+0x3b4>
 8020dce:	ab30      	add	r3, sp, #192	@ 0xc0
 8020dd0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8020c94 <__kernel_rem_pio2f+0x304>
 8020dd4:	440b      	add	r3, r1
 8020dd6:	2c00      	cmp	r4, #0
 8020dd8:	da05      	bge.n	8020de6 <__kernel_rem_pio2f+0x456>
 8020dda:	b10e      	cbz	r6, 8020de0 <__kernel_rem_pio2f+0x450>
 8020ddc:	eef1 7a67 	vneg.f32	s15, s15
 8020de0:	edc7 7a00 	vstr	s15, [r7]
 8020de4:	e7ae      	b.n	8020d44 <__kernel_rem_pio2f+0x3b4>
 8020de6:	ed33 7a01 	vldmdb	r3!, {s14}
 8020dea:	3c01      	subs	r4, #1
 8020dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020df0:	e7f1      	b.n	8020dd6 <__kernel_rem_pio2f+0x446>
 8020df2:	ed73 7a01 	vldmdb	r3!, {s15}
 8020df6:	3a01      	subs	r2, #1
 8020df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020dfc:	e7d2      	b.n	8020da4 <__kernel_rem_pio2f+0x414>
 8020dfe:	eef0 7a47 	vmov.f32	s15, s14
 8020e02:	e7d4      	b.n	8020dae <__kernel_rem_pio2f+0x41e>
 8020e04:	ecb2 7a01 	vldmia	r2!, {s14}
 8020e08:	3301      	adds	r3, #1
 8020e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020e0e:	e7d6      	b.n	8020dbe <__kernel_rem_pio2f+0x42e>
 8020e10:	edd2 7a00 	vldr	s15, [r2]
 8020e14:	edd2 6a01 	vldr	s13, [r2, #4]
 8020e18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020e1c:	3801      	subs	r0, #1
 8020e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020e22:	ed82 7a00 	vstr	s14, [r2]
 8020e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020e2a:	edc2 7a01 	vstr	s15, [r2, #4]
 8020e2e:	e798      	b.n	8020d62 <__kernel_rem_pio2f+0x3d2>
 8020e30:	edd3 7a00 	vldr	s15, [r3]
 8020e34:	edd3 6a01 	vldr	s13, [r3, #4]
 8020e38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020e3c:	3a01      	subs	r2, #1
 8020e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020e42:	ed83 7a00 	vstr	s14, [r3]
 8020e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020e4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8020e4e:	e78d      	b.n	8020d6c <__kernel_rem_pio2f+0x3dc>
 8020e50:	ed33 7a01 	vldmdb	r3!, {s14}
 8020e54:	3c01      	subs	r4, #1
 8020e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020e5a:	e78f      	b.n	8020d7c <__kernel_rem_pio2f+0x3ec>
 8020e5c:	eef1 6a66 	vneg.f32	s13, s13
 8020e60:	eeb1 7a47 	vneg.f32	s14, s14
 8020e64:	edc7 6a00 	vstr	s13, [r7]
 8020e68:	ed87 7a01 	vstr	s14, [r7, #4]
 8020e6c:	eef1 7a67 	vneg.f32	s15, s15
 8020e70:	e790      	b.n	8020d94 <__kernel_rem_pio2f+0x404>
 8020e72:	bf00      	nop
 8020e74:	0000      	movs	r0, r0
	...

08020e78 <scalbn>:
 8020e78:	b570      	push	{r4, r5, r6, lr}
 8020e7a:	ec55 4b10 	vmov	r4, r5, d0
 8020e7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020e82:	4606      	mov	r6, r0
 8020e84:	462b      	mov	r3, r5
 8020e86:	b991      	cbnz	r1, 8020eae <scalbn+0x36>
 8020e88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8020e8c:	4323      	orrs	r3, r4
 8020e8e:	d03d      	beq.n	8020f0c <scalbn+0x94>
 8020e90:	4b35      	ldr	r3, [pc, #212]	@ (8020f68 <scalbn+0xf0>)
 8020e92:	4620      	mov	r0, r4
 8020e94:	4629      	mov	r1, r5
 8020e96:	2200      	movs	r2, #0
 8020e98:	f7df fbbe 	bl	8000618 <__aeabi_dmul>
 8020e9c:	4b33      	ldr	r3, [pc, #204]	@ (8020f6c <scalbn+0xf4>)
 8020e9e:	429e      	cmp	r6, r3
 8020ea0:	4604      	mov	r4, r0
 8020ea2:	460d      	mov	r5, r1
 8020ea4:	da0f      	bge.n	8020ec6 <scalbn+0x4e>
 8020ea6:	a328      	add	r3, pc, #160	@ (adr r3, 8020f48 <scalbn+0xd0>)
 8020ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eac:	e01e      	b.n	8020eec <scalbn+0x74>
 8020eae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8020eb2:	4291      	cmp	r1, r2
 8020eb4:	d10b      	bne.n	8020ece <scalbn+0x56>
 8020eb6:	4622      	mov	r2, r4
 8020eb8:	4620      	mov	r0, r4
 8020eba:	4629      	mov	r1, r5
 8020ebc:	f7df f9f6 	bl	80002ac <__adddf3>
 8020ec0:	4604      	mov	r4, r0
 8020ec2:	460d      	mov	r5, r1
 8020ec4:	e022      	b.n	8020f0c <scalbn+0x94>
 8020ec6:	460b      	mov	r3, r1
 8020ec8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8020ecc:	3936      	subs	r1, #54	@ 0x36
 8020ece:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8020ed2:	4296      	cmp	r6, r2
 8020ed4:	dd0d      	ble.n	8020ef2 <scalbn+0x7a>
 8020ed6:	2d00      	cmp	r5, #0
 8020ed8:	a11d      	add	r1, pc, #116	@ (adr r1, 8020f50 <scalbn+0xd8>)
 8020eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ede:	da02      	bge.n	8020ee6 <scalbn+0x6e>
 8020ee0:	a11d      	add	r1, pc, #116	@ (adr r1, 8020f58 <scalbn+0xe0>)
 8020ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ee6:	a31a      	add	r3, pc, #104	@ (adr r3, 8020f50 <scalbn+0xd8>)
 8020ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eec:	f7df fb94 	bl	8000618 <__aeabi_dmul>
 8020ef0:	e7e6      	b.n	8020ec0 <scalbn+0x48>
 8020ef2:	1872      	adds	r2, r6, r1
 8020ef4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8020ef8:	428a      	cmp	r2, r1
 8020efa:	dcec      	bgt.n	8020ed6 <scalbn+0x5e>
 8020efc:	2a00      	cmp	r2, #0
 8020efe:	dd08      	ble.n	8020f12 <scalbn+0x9a>
 8020f00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8020f04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8020f08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020f0c:	ec45 4b10 	vmov	d0, r4, r5
 8020f10:	bd70      	pop	{r4, r5, r6, pc}
 8020f12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8020f16:	da08      	bge.n	8020f2a <scalbn+0xb2>
 8020f18:	2d00      	cmp	r5, #0
 8020f1a:	a10b      	add	r1, pc, #44	@ (adr r1, 8020f48 <scalbn+0xd0>)
 8020f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020f20:	dac1      	bge.n	8020ea6 <scalbn+0x2e>
 8020f22:	a10f      	add	r1, pc, #60	@ (adr r1, 8020f60 <scalbn+0xe8>)
 8020f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020f28:	e7bd      	b.n	8020ea6 <scalbn+0x2e>
 8020f2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8020f2e:	3236      	adds	r2, #54	@ 0x36
 8020f30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8020f34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020f38:	4620      	mov	r0, r4
 8020f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8020f70 <scalbn+0xf8>)
 8020f3c:	4629      	mov	r1, r5
 8020f3e:	2200      	movs	r2, #0
 8020f40:	e7d4      	b.n	8020eec <scalbn+0x74>
 8020f42:	bf00      	nop
 8020f44:	f3af 8000 	nop.w
 8020f48:	c2f8f359 	.word	0xc2f8f359
 8020f4c:	01a56e1f 	.word	0x01a56e1f
 8020f50:	8800759c 	.word	0x8800759c
 8020f54:	7e37e43c 	.word	0x7e37e43c
 8020f58:	8800759c 	.word	0x8800759c
 8020f5c:	fe37e43c 	.word	0xfe37e43c
 8020f60:	c2f8f359 	.word	0xc2f8f359
 8020f64:	81a56e1f 	.word	0x81a56e1f
 8020f68:	43500000 	.word	0x43500000
 8020f6c:	ffff3cb0 	.word	0xffff3cb0
 8020f70:	3c900000 	.word	0x3c900000

08020f74 <scalbnf>:
 8020f74:	ee10 3a10 	vmov	r3, s0
 8020f78:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8020f7c:	d02b      	beq.n	8020fd6 <scalbnf+0x62>
 8020f7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8020f82:	d302      	bcc.n	8020f8a <scalbnf+0x16>
 8020f84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020f88:	4770      	bx	lr
 8020f8a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8020f8e:	d123      	bne.n	8020fd8 <scalbnf+0x64>
 8020f90:	4b24      	ldr	r3, [pc, #144]	@ (8021024 <scalbnf+0xb0>)
 8020f92:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8021028 <scalbnf+0xb4>
 8020f96:	4298      	cmp	r0, r3
 8020f98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020f9c:	db17      	blt.n	8020fce <scalbnf+0x5a>
 8020f9e:	ee10 3a10 	vmov	r3, s0
 8020fa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020fa6:	3a19      	subs	r2, #25
 8020fa8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8020fac:	4288      	cmp	r0, r1
 8020fae:	dd15      	ble.n	8020fdc <scalbnf+0x68>
 8020fb0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 802102c <scalbnf+0xb8>
 8020fb4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8021030 <scalbnf+0xbc>
 8020fb8:	ee10 3a10 	vmov	r3, s0
 8020fbc:	eeb0 7a67 	vmov.f32	s14, s15
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	bfb8      	it	lt
 8020fc4:	eef0 7a66 	vmovlt.f32	s15, s13
 8020fc8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8020fcc:	4770      	bx	lr
 8020fce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8021034 <scalbnf+0xc0>
 8020fd2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020fd6:	4770      	bx	lr
 8020fd8:	0dd2      	lsrs	r2, r2, #23
 8020fda:	e7e5      	b.n	8020fa8 <scalbnf+0x34>
 8020fdc:	4410      	add	r0, r2
 8020fde:	28fe      	cmp	r0, #254	@ 0xfe
 8020fe0:	dce6      	bgt.n	8020fb0 <scalbnf+0x3c>
 8020fe2:	2800      	cmp	r0, #0
 8020fe4:	dd06      	ble.n	8020ff4 <scalbnf+0x80>
 8020fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8020fea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8020fee:	ee00 3a10 	vmov	s0, r3
 8020ff2:	4770      	bx	lr
 8020ff4:	f110 0f16 	cmn.w	r0, #22
 8020ff8:	da09      	bge.n	802100e <scalbnf+0x9a>
 8020ffa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8021034 <scalbnf+0xc0>
 8020ffe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8021038 <scalbnf+0xc4>
 8021002:	ee10 3a10 	vmov	r3, s0
 8021006:	eeb0 7a67 	vmov.f32	s14, s15
 802100a:	2b00      	cmp	r3, #0
 802100c:	e7d9      	b.n	8020fc2 <scalbnf+0x4e>
 802100e:	3019      	adds	r0, #25
 8021010:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8021014:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8021018:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 802103c <scalbnf+0xc8>
 802101c:	ee07 3a90 	vmov	s15, r3
 8021020:	e7d7      	b.n	8020fd2 <scalbnf+0x5e>
 8021022:	bf00      	nop
 8021024:	ffff3cb0 	.word	0xffff3cb0
 8021028:	4c000000 	.word	0x4c000000
 802102c:	7149f2ca 	.word	0x7149f2ca
 8021030:	f149f2ca 	.word	0xf149f2ca
 8021034:	0da24260 	.word	0x0da24260
 8021038:	8da24260 	.word	0x8da24260
 802103c:	33000000 	.word	0x33000000

08021040 <floor>:
 8021040:	ec51 0b10 	vmov	r0, r1, d0
 8021044:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802104c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8021050:	2e13      	cmp	r6, #19
 8021052:	460c      	mov	r4, r1
 8021054:	4605      	mov	r5, r0
 8021056:	4680      	mov	r8, r0
 8021058:	dc34      	bgt.n	80210c4 <floor+0x84>
 802105a:	2e00      	cmp	r6, #0
 802105c:	da17      	bge.n	802108e <floor+0x4e>
 802105e:	a332      	add	r3, pc, #200	@ (adr r3, 8021128 <floor+0xe8>)
 8021060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021064:	f7df f922 	bl	80002ac <__adddf3>
 8021068:	2200      	movs	r2, #0
 802106a:	2300      	movs	r3, #0
 802106c:	f7df fd64 	bl	8000b38 <__aeabi_dcmpgt>
 8021070:	b150      	cbz	r0, 8021088 <floor+0x48>
 8021072:	2c00      	cmp	r4, #0
 8021074:	da55      	bge.n	8021122 <floor+0xe2>
 8021076:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 802107a:	432c      	orrs	r4, r5
 802107c:	2500      	movs	r5, #0
 802107e:	42ac      	cmp	r4, r5
 8021080:	4c2b      	ldr	r4, [pc, #172]	@ (8021130 <floor+0xf0>)
 8021082:	bf08      	it	eq
 8021084:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8021088:	4621      	mov	r1, r4
 802108a:	4628      	mov	r0, r5
 802108c:	e023      	b.n	80210d6 <floor+0x96>
 802108e:	4f29      	ldr	r7, [pc, #164]	@ (8021134 <floor+0xf4>)
 8021090:	4137      	asrs	r7, r6
 8021092:	ea01 0307 	and.w	r3, r1, r7
 8021096:	4303      	orrs	r3, r0
 8021098:	d01d      	beq.n	80210d6 <floor+0x96>
 802109a:	a323      	add	r3, pc, #140	@ (adr r3, 8021128 <floor+0xe8>)
 802109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210a0:	f7df f904 	bl	80002ac <__adddf3>
 80210a4:	2200      	movs	r2, #0
 80210a6:	2300      	movs	r3, #0
 80210a8:	f7df fd46 	bl	8000b38 <__aeabi_dcmpgt>
 80210ac:	2800      	cmp	r0, #0
 80210ae:	d0eb      	beq.n	8021088 <floor+0x48>
 80210b0:	2c00      	cmp	r4, #0
 80210b2:	bfbe      	ittt	lt
 80210b4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80210b8:	4133      	asrlt	r3, r6
 80210ba:	18e4      	addlt	r4, r4, r3
 80210bc:	ea24 0407 	bic.w	r4, r4, r7
 80210c0:	2500      	movs	r5, #0
 80210c2:	e7e1      	b.n	8021088 <floor+0x48>
 80210c4:	2e33      	cmp	r6, #51	@ 0x33
 80210c6:	dd0a      	ble.n	80210de <floor+0x9e>
 80210c8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80210cc:	d103      	bne.n	80210d6 <floor+0x96>
 80210ce:	4602      	mov	r2, r0
 80210d0:	460b      	mov	r3, r1
 80210d2:	f7df f8eb 	bl	80002ac <__adddf3>
 80210d6:	ec41 0b10 	vmov	d0, r0, r1
 80210da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210de:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80210e2:	f04f 37ff 	mov.w	r7, #4294967295
 80210e6:	40df      	lsrs	r7, r3
 80210e8:	4207      	tst	r7, r0
 80210ea:	d0f4      	beq.n	80210d6 <floor+0x96>
 80210ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8021128 <floor+0xe8>)
 80210ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210f2:	f7df f8db 	bl	80002ac <__adddf3>
 80210f6:	2200      	movs	r2, #0
 80210f8:	2300      	movs	r3, #0
 80210fa:	f7df fd1d 	bl	8000b38 <__aeabi_dcmpgt>
 80210fe:	2800      	cmp	r0, #0
 8021100:	d0c2      	beq.n	8021088 <floor+0x48>
 8021102:	2c00      	cmp	r4, #0
 8021104:	da0a      	bge.n	802111c <floor+0xdc>
 8021106:	2e14      	cmp	r6, #20
 8021108:	d101      	bne.n	802110e <floor+0xce>
 802110a:	3401      	adds	r4, #1
 802110c:	e006      	b.n	802111c <floor+0xdc>
 802110e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8021112:	2301      	movs	r3, #1
 8021114:	40b3      	lsls	r3, r6
 8021116:	441d      	add	r5, r3
 8021118:	4545      	cmp	r5, r8
 802111a:	d3f6      	bcc.n	802110a <floor+0xca>
 802111c:	ea25 0507 	bic.w	r5, r5, r7
 8021120:	e7b2      	b.n	8021088 <floor+0x48>
 8021122:	2500      	movs	r5, #0
 8021124:	462c      	mov	r4, r5
 8021126:	e7af      	b.n	8021088 <floor+0x48>
 8021128:	8800759c 	.word	0x8800759c
 802112c:	7e37e43c 	.word	0x7e37e43c
 8021130:	bff00000 	.word	0xbff00000
 8021134:	000fffff 	.word	0x000fffff

08021138 <floorf>:
 8021138:	ee10 3a10 	vmov	r3, s0
 802113c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021140:	3a7f      	subs	r2, #127	@ 0x7f
 8021142:	2a16      	cmp	r2, #22
 8021144:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8021148:	dc2b      	bgt.n	80211a2 <floorf+0x6a>
 802114a:	2a00      	cmp	r2, #0
 802114c:	da12      	bge.n	8021174 <floorf+0x3c>
 802114e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80211b4 <floorf+0x7c>
 8021152:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021156:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802115e:	dd06      	ble.n	802116e <floorf+0x36>
 8021160:	2b00      	cmp	r3, #0
 8021162:	da24      	bge.n	80211ae <floorf+0x76>
 8021164:	2900      	cmp	r1, #0
 8021166:	4b14      	ldr	r3, [pc, #80]	@ (80211b8 <floorf+0x80>)
 8021168:	bf08      	it	eq
 802116a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 802116e:	ee00 3a10 	vmov	s0, r3
 8021172:	4770      	bx	lr
 8021174:	4911      	ldr	r1, [pc, #68]	@ (80211bc <floorf+0x84>)
 8021176:	4111      	asrs	r1, r2
 8021178:	420b      	tst	r3, r1
 802117a:	d0fa      	beq.n	8021172 <floorf+0x3a>
 802117c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80211b4 <floorf+0x7c>
 8021180:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021184:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802118c:	ddef      	ble.n	802116e <floorf+0x36>
 802118e:	2b00      	cmp	r3, #0
 8021190:	bfbe      	ittt	lt
 8021192:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8021196:	fa40 f202 	asrlt.w	r2, r0, r2
 802119a:	189b      	addlt	r3, r3, r2
 802119c:	ea23 0301 	bic.w	r3, r3, r1
 80211a0:	e7e5      	b.n	802116e <floorf+0x36>
 80211a2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80211a6:	d3e4      	bcc.n	8021172 <floorf+0x3a>
 80211a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80211ac:	4770      	bx	lr
 80211ae:	2300      	movs	r3, #0
 80211b0:	e7dd      	b.n	802116e <floorf+0x36>
 80211b2:	bf00      	nop
 80211b4:	7149f2ca 	.word	0x7149f2ca
 80211b8:	bf800000 	.word	0xbf800000
 80211bc:	007fffff 	.word	0x007fffff

080211c0 <_init>:
 80211c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211c2:	bf00      	nop
 80211c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80211c6:	bc08      	pop	{r3}
 80211c8:	469e      	mov	lr, r3
 80211ca:	4770      	bx	lr

080211cc <_fini>:
 80211cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211ce:	bf00      	nop
 80211d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80211d2:	bc08      	pop	{r3}
 80211d4:	469e      	mov	lr, r3
 80211d6:	4770      	bx	lr
